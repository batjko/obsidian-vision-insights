/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VisionInsightsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/image-handler.ts
var import_obsidian = require("obsidian");

// src/utils.ts
function arrayBufferToBase64(buffer) {
  const bytes = new Uint8Array(buffer);
  let binary = "";
  for (let i = 0; i < bytes.byteLength; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return btoa(binary);
}
function getMimeType(extension) {
  const mimeTypes = {
    "png": "image/png",
    "jpg": "image/jpeg",
    "jpeg": "image/jpeg",
    "gif": "image/gif",
    "webp": "image/webp",
    "svg": "image/svg+xml",
    "bmp": "image/bmp",
    "tiff": "image/tiff"
  };
  return mimeTypes[extension.toLowerCase()] || "image/jpeg";
}
function hashString(str2) {
  let hash = 0;
  if (str2.length === 0)
    return hash.toString();
  for (let i = 0; i < str2.length; i++) {
    const char = str2.charCodeAt(i);
    hash = (hash << 5) - hash + char;
    hash = hash & hash;
  }
  return Math.abs(hash).toString();
}

// src/image-handler.ts
var ImageHandler = class {
  constructor(app, settings) {
    this.app = app;
    this.settings = settings;
  }
  updateSettings(settings) {
    this.settings = settings;
  }
  async detectImageAtCursor(editor, view) {
    const cursor = editor.getCursor();
    const line = editor.getLine(cursor.line);
    const imageRegex = /(!\[\[([^\]]+?)\]\])|(!\[[^\]]*?\]\((.*?)\))|(<img[^>]+src=["'](.*?)["'][^>]*>)/g;
    let match;
    while ((match = imageRegex.exec(line)) !== null) {
      const matchText = match[0];
      const startIndex = match.index;
      const endIndex = startIndex + matchText.length;
      if (cursor.ch >= startIndex && cursor.ch <= endIndex) {
        const imagePath = match[2] || match[4] || match[6];
        if (imagePath) {
          return this.createImageInfo(decodeURIComponent(imagePath), view);
        }
      }
    }
    return null;
  }
  extractNoteContext(editor, view, imageInfo) {
    var _a2;
    const noteName = ((_a2 = view.file) == null ? void 0 : _a2.basename) || "Untitled";
    const allText = editor.getValue();
    const imagePattern = this.createImageSearchPattern(imageInfo);
    const match = allText.match(imagePattern);
    if (match) {
      const matchIndex = match.index;
      const matchLength = match[0].length;
      const textBefore = allText.substring(0, matchIndex).trim();
      const textAfter = allText.substring(matchIndex + matchLength).trim();
      return {
        textBefore,
        textAfter,
        noteName
      };
    }
    console.warn("Vision Insights: Could not locate image in note content for context extraction");
    return {
      textBefore: "",
      textAfter: "",
      noteName
    };
  }
  createImageSearchPattern(imageInfo) {
    const escapedPath = imageInfo.url.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    const escapedImagePath = imageInfo.path.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    const patterns = [
      `!\\[\\[${escapedPath}\\]\\]`,
      // ![[image.png]]
      `!\\[\\[${escapedImagePath}\\]\\]`,
      // ![[path/image.png]]
      `!\\[[^\\]]*?\\]\\(${escapedPath}\\)`,
      // ![alt](image.png)
      `!\\[[^\\]]*?\\]\\(${escapedImagePath}\\)`,
      // ![alt](path/image.png)
      `<img[^>]+src=["']${escapedPath}["'][^>]*>`,
      // <img src="image.png">
      `<img[^>]+src=["']${escapedImagePath}["'][^>]*>`
      // <img src="path/image.png">
    ];
    return new RegExp(patterns.join("|"), "i");
  }
  createImageInfoFromFile(file) {
    if (!file)
      return null;
    return {
      path: file.path,
      url: this.app.vault.getResourcePath(file),
      isExternal: false,
      filename: file.name,
      mimeType: getMimeType(file.extension)
    };
  }
  createImageInfoFromSrc(src) {
    var _a2;
    if (!src)
      return null;
    try {
      if (src.startsWith("http")) {
        const filename = new URL(src).pathname.split("/").pop() || "unknown-external";
        const extension = ((_a2 = filename.split(".").pop()) == null ? void 0 : _a2.toLowerCase()) || "";
        return {
          path: src,
          url: src,
          isExternal: true,
          filename,
          mimeType: getMimeType(extension)
        };
      } else if (src.startsWith("app://")) {
        const url = new URL(src);
        const path = decodeURIComponent(url.pathname).split("/").slice(2).join("/");
        const file = this.app.vault.getAbstractFileByPath(path);
        if (file instanceof import_obsidian.TFile) {
          return this.createImageInfoFromFile(file);
        }
      }
    } catch (error) {
      console.error("Vision Insights: Error parsing image src:", src, error);
    }
    return null;
  }
  createImageInfo(imagePath, view) {
    var _a2, _b, _c;
    const isExternal = imagePath.startsWith("http://") || imagePath.startsWith("https://");
    if (isExternal) {
      const filename = ((_a2 = imagePath.split("/").pop()) == null ? void 0 : _a2.split("?")[0]) || "unknown-external";
      const extension = ((_b = filename.split(".").pop()) == null ? void 0 : _b.toLowerCase()) || "";
      return {
        path: imagePath,
        url: imagePath,
        isExternal: true,
        filename,
        mimeType: getMimeType(extension)
      };
    }
    const sourcePath = ((_c = view.file) == null ? void 0 : _c.path) || "";
    const file = this.app.metadataCache.getFirstLinkpathDest(imagePath, sourcePath);
    if (!file || !(file instanceof import_obsidian.TFile)) {
      console.warn(`Vision Insights: Could not resolve image path "${imagePath}" from source "${sourcePath}".`);
      return null;
    }
    return {
      path: file.path,
      url: imagePath,
      isExternal: false,
      filename: file.name,
      mimeType: getMimeType(file.extension)
    };
  }
  async prepareImageForAPI(imageInfo) {
    if (imageInfo.isExternal) {
      return imageInfo.url;
    }
    const file = this.app.vault.getAbstractFileByPath(imageInfo.path);
    if (!(file instanceof import_obsidian.TFile)) {
      throw new Error(`Image file not found: ${imageInfo.path}`);
    }
    const arrayBuffer = await this.app.vault.readBinary(file);
    const base64 = arrayBufferToBase64(arrayBuffer);
    return `data:${imageInfo.mimeType};base64,${base64}`;
  }
};

// node_modules/openai/internal/qs/formats.mjs
var default_format = "RFC3986";
var formatters = {
  RFC1738: (v) => String(v).replace(/%20/g, "+"),
  RFC3986: (v) => String(v)
};
var RFC1738 = "RFC1738";

// node_modules/openai/internal/qs/utils.mjs
var is_array = Array.isArray;
var hex_table = (() => {
  const array = [];
  for (let i = 0; i < 256; ++i) {
    array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
  }
  return array;
})();
var limit = 1024;
var encode = (str2, _defaultEncoder, charset, _kind, format) => {
  if (str2.length === 0) {
    return str2;
  }
  let string = str2;
  if (typeof str2 === "symbol") {
    string = Symbol.prototype.toString.call(str2);
  } else if (typeof str2 !== "string") {
    string = String(str2);
  }
  if (charset === "iso-8859-1") {
    return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
      return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
    });
  }
  let out = "";
  for (let j = 0; j < string.length; j += limit) {
    const segment = string.length >= limit ? string.slice(j, j + limit) : string;
    const arr = [];
    for (let i = 0; i < segment.length; ++i) {
      let c = segment.charCodeAt(i);
      if (c === 45 || // -
      c === 46 || // .
      c === 95 || // _
      c === 126 || // ~
      c >= 48 && c <= 57 || // 0-9
      c >= 65 && c <= 90 || // a-z
      c >= 97 && c <= 122 || // A-Z
      format === RFC1738 && (c === 40 || c === 41)) {
        arr[arr.length] = segment.charAt(i);
        continue;
      }
      if (c < 128) {
        arr[arr.length] = hex_table[c];
        continue;
      }
      if (c < 2048) {
        arr[arr.length] = hex_table[192 | c >> 6] + hex_table[128 | c & 63];
        continue;
      }
      if (c < 55296 || c >= 57344) {
        arr[arr.length] = hex_table[224 | c >> 12] + hex_table[128 | c >> 6 & 63] + hex_table[128 | c & 63];
        continue;
      }
      i += 1;
      c = 65536 + ((c & 1023) << 10 | segment.charCodeAt(i) & 1023);
      arr[arr.length] = hex_table[240 | c >> 18] + hex_table[128 | c >> 12 & 63] + hex_table[128 | c >> 6 & 63] + hex_table[128 | c & 63];
    }
    out += arr.join("");
  }
  return out;
};
function is_buffer(obj) {
  if (!obj || typeof obj !== "object") {
    return false;
  }
  return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
}
function maybe_map(val, fn) {
  if (is_array(val)) {
    const mapped = [];
    for (let i = 0; i < val.length; i += 1) {
      mapped.push(fn(val[i]));
    }
    return mapped;
  }
  return fn(val);
}

// node_modules/openai/internal/qs/stringify.mjs
var has = Object.prototype.hasOwnProperty;
var array_prefix_generators = {
  brackets(prefix) {
    return String(prefix) + "[]";
  },
  comma: "comma",
  indices(prefix, key) {
    return String(prefix) + "[" + key + "]";
  },
  repeat(prefix) {
    return String(prefix);
  }
};
var is_array2 = Array.isArray;
var push = Array.prototype.push;
var push_to_array = function(arr, value_or_array) {
  push.apply(arr, is_array2(value_or_array) ? value_or_array : [value_or_array]);
};
var to_ISO = Date.prototype.toISOString;
var defaults = {
  addQueryPrefix: false,
  allowDots: false,
  allowEmptyArrays: false,
  arrayFormat: "indices",
  charset: "utf-8",
  charsetSentinel: false,
  delimiter: "&",
  encode: true,
  encodeDotInKeys: false,
  encoder: encode,
  encodeValuesOnly: false,
  format: default_format,
  formatter: formatters[default_format],
  /** @deprecated */
  indices: false,
  serializeDate(date) {
    return to_ISO.call(date);
  },
  skipNulls: false,
  strictNullHandling: false
};
function is_non_nullish_primitive(v) {
  return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
}
var sentinel = {};
function inner_stringify(object, prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
  let obj = object;
  let tmp_sc = sideChannel;
  let step = 0;
  let find_flag = false;
  while ((tmp_sc = tmp_sc.get(sentinel)) !== void 0 && !find_flag) {
    const pos = tmp_sc.get(object);
    step += 1;
    if (typeof pos !== "undefined") {
      if (pos === step) {
        throw new RangeError("Cyclic object value");
      } else {
        find_flag = true;
      }
    }
    if (typeof tmp_sc.get(sentinel) === "undefined") {
      step = 0;
    }
  }
  if (typeof filter === "function") {
    obj = filter(prefix, obj);
  } else if (obj instanceof Date) {
    obj = serializeDate == null ? void 0 : serializeDate(obj);
  } else if (generateArrayPrefix === "comma" && is_array2(obj)) {
    obj = maybe_map(obj, function(value) {
      if (value instanceof Date) {
        return serializeDate == null ? void 0 : serializeDate(value);
      }
      return value;
    });
  }
  if (obj === null) {
    if (strictNullHandling) {
      return encoder && !encodeValuesOnly ? (
        // @ts-expect-error
        encoder(prefix, defaults.encoder, charset, "key", format)
      ) : prefix;
    }
    obj = "";
  }
  if (is_non_nullish_primitive(obj) || is_buffer(obj)) {
    if (encoder) {
      const key_value = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
      return [
        (formatter == null ? void 0 : formatter(key_value)) + "=" + // @ts-expect-error
        (formatter == null ? void 0 : formatter(encoder(obj, defaults.encoder, charset, "value", format)))
      ];
    }
    return [(formatter == null ? void 0 : formatter(prefix)) + "=" + (formatter == null ? void 0 : formatter(String(obj)))];
  }
  const values = [];
  if (typeof obj === "undefined") {
    return values;
  }
  let obj_keys;
  if (generateArrayPrefix === "comma" && is_array2(obj)) {
    if (encodeValuesOnly && encoder) {
      obj = maybe_map(obj, encoder);
    }
    obj_keys = [{ value: obj.length > 0 ? obj.join(",") || null : void 0 }];
  } else if (is_array2(filter)) {
    obj_keys = filter;
  } else {
    const keys = Object.keys(obj);
    obj_keys = sort ? keys.sort(sort) : keys;
  }
  const encoded_prefix = encodeDotInKeys ? String(prefix).replace(/\./g, "%2E") : String(prefix);
  const adjusted_prefix = commaRoundTrip && is_array2(obj) && obj.length === 1 ? encoded_prefix + "[]" : encoded_prefix;
  if (allowEmptyArrays && is_array2(obj) && obj.length === 0) {
    return adjusted_prefix + "[]";
  }
  for (let j = 0; j < obj_keys.length; ++j) {
    const key = obj_keys[j];
    const value = (
      // @ts-ignore
      typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key]
    );
    if (skipNulls && value === null) {
      continue;
    }
    const encoded_key = allowDots && encodeDotInKeys ? key.replace(/\./g, "%2E") : key;
    const key_prefix = is_array2(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjusted_prefix, encoded_key) : adjusted_prefix : adjusted_prefix + (allowDots ? "." + encoded_key : "[" + encoded_key + "]");
    sideChannel.set(object, step);
    const valueSideChannel = /* @__PURE__ */ new WeakMap();
    valueSideChannel.set(sentinel, sideChannel);
    push_to_array(values, inner_stringify(
      value,
      key_prefix,
      generateArrayPrefix,
      commaRoundTrip,
      allowEmptyArrays,
      strictNullHandling,
      skipNulls,
      encodeDotInKeys,
      // @ts-ignore
      generateArrayPrefix === "comma" && encodeValuesOnly && is_array2(obj) ? null : encoder,
      filter,
      sort,
      allowDots,
      serializeDate,
      format,
      formatter,
      encodeValuesOnly,
      charset,
      valueSideChannel
    ));
  }
  return values;
}
function normalize_stringify_options(opts = defaults) {
  if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") {
    throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
  }
  if (typeof opts.encodeDotInKeys !== "undefined" && typeof opts.encodeDotInKeys !== "boolean") {
    throw new TypeError("`encodeDotInKeys` option can only be `true` or `false`, when provided");
  }
  if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") {
    throw new TypeError("Encoder has to be a function.");
  }
  const charset = opts.charset || defaults.charset;
  if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
    throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
  }
  let format = default_format;
  if (typeof opts.format !== "undefined") {
    if (!has.call(formatters, opts.format)) {
      throw new TypeError("Unknown format option provided.");
    }
    format = opts.format;
  }
  const formatter = formatters[format];
  let filter = defaults.filter;
  if (typeof opts.filter === "function" || is_array2(opts.filter)) {
    filter = opts.filter;
  }
  let arrayFormat;
  if (opts.arrayFormat && opts.arrayFormat in array_prefix_generators) {
    arrayFormat = opts.arrayFormat;
  } else if ("indices" in opts) {
    arrayFormat = opts.indices ? "indices" : "repeat";
  } else {
    arrayFormat = defaults.arrayFormat;
  }
  if ("commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") {
    throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
  }
  const allowDots = typeof opts.allowDots === "undefined" ? !!opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;
  return {
    addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
    // @ts-ignore
    allowDots,
    allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
    arrayFormat,
    charset,
    charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
    commaRoundTrip: !!opts.commaRoundTrip,
    delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
    encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
    encodeDotInKeys: typeof opts.encodeDotInKeys === "boolean" ? opts.encodeDotInKeys : defaults.encodeDotInKeys,
    encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
    encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
    filter,
    format,
    formatter,
    serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
    skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
    // @ts-ignore
    sort: typeof opts.sort === "function" ? opts.sort : null,
    strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
  };
}
function stringify(object, opts = {}) {
  let obj = object;
  const options = normalize_stringify_options(opts);
  let obj_keys;
  let filter;
  if (typeof options.filter === "function") {
    filter = options.filter;
    obj = filter("", obj);
  } else if (is_array2(options.filter)) {
    filter = options.filter;
    obj_keys = filter;
  }
  const keys = [];
  if (typeof obj !== "object" || obj === null) {
    return "";
  }
  const generateArrayPrefix = array_prefix_generators[options.arrayFormat];
  const commaRoundTrip = generateArrayPrefix === "comma" && options.commaRoundTrip;
  if (!obj_keys) {
    obj_keys = Object.keys(obj);
  }
  if (options.sort) {
    obj_keys.sort(options.sort);
  }
  const sideChannel = /* @__PURE__ */ new WeakMap();
  for (let i = 0; i < obj_keys.length; ++i) {
    const key = obj_keys[i];
    if (options.skipNulls && obj[key] === null) {
      continue;
    }
    push_to_array(keys, inner_stringify(
      obj[key],
      key,
      // @ts-expect-error
      generateArrayPrefix,
      commaRoundTrip,
      options.allowEmptyArrays,
      options.strictNullHandling,
      options.skipNulls,
      options.encodeDotInKeys,
      options.encode ? options.encoder : null,
      options.filter,
      options.sort,
      options.allowDots,
      options.serializeDate,
      options.format,
      options.formatter,
      options.encodeValuesOnly,
      options.charset,
      sideChannel
    ));
  }
  const joined = keys.join(options.delimiter);
  let prefix = options.addQueryPrefix === true ? "?" : "";
  if (options.charsetSentinel) {
    if (options.charset === "iso-8859-1") {
      prefix += "utf8=%26%2310003%3B&";
    } else {
      prefix += "utf8=%E2%9C%93&";
    }
  }
  return joined.length > 0 ? prefix + joined : "";
}

// node_modules/openai/version.mjs
var VERSION = "4.104.0";

// node_modules/openai/_shims/registry.mjs
var auto = false;
var kind = void 0;
var fetch2 = void 0;
var Request2 = void 0;
var Response2 = void 0;
var Headers2 = void 0;
var FormData2 = void 0;
var Blob2 = void 0;
var File2 = void 0;
var ReadableStream2 = void 0;
var getMultipartRequestOptions = void 0;
var getDefaultAgent = void 0;
var fileFromPath = void 0;
var isFsReadStream = void 0;
function setShims(shims, options = { auto: false }) {
  if (auto) {
    throw new Error(`you must \`import 'openai/shims/${shims.kind}'\` before importing anything else from openai`);
  }
  if (kind) {
    throw new Error(`can't \`import 'openai/shims/${shims.kind}'\` after \`import 'openai/shims/${kind}'\``);
  }
  auto = options.auto;
  kind = shims.kind;
  fetch2 = shims.fetch;
  Request2 = shims.Request;
  Response2 = shims.Response;
  Headers2 = shims.Headers;
  FormData2 = shims.FormData;
  Blob2 = shims.Blob;
  File2 = shims.File;
  ReadableStream2 = shims.ReadableStream;
  getMultipartRequestOptions = shims.getMultipartRequestOptions;
  getDefaultAgent = shims.getDefaultAgent;
  fileFromPath = shims.fileFromPath;
  isFsReadStream = shims.isFsReadStream;
}

// node_modules/openai/_shims/MultipartBody.mjs
var MultipartBody = class {
  constructor(body) {
    this.body = body;
  }
  get [Symbol.toStringTag]() {
    return "MultipartBody";
  }
};

// node_modules/openai/_shims/web-runtime.mjs
function getRuntime({ manuallyImported } = {}) {
  const recommendation = manuallyImported ? `You may need to use polyfills` : `Add one of these imports before your first \`import \u2026 from 'openai'\`:
- \`import 'openai/shims/node'\` (if you're running on Node)
- \`import 'openai/shims/web'\` (otherwise)
`;
  let _fetch, _Request, _Response, _Headers;
  try {
    _fetch = fetch;
    _Request = Request;
    _Response = Response;
    _Headers = Headers;
  } catch (error) {
    throw new Error(`this environment is missing the following Web Fetch API type: ${error.message}. ${recommendation}`);
  }
  return {
    kind: "web",
    fetch: _fetch,
    Request: _Request,
    Response: _Response,
    Headers: _Headers,
    FormData: (
      // @ts-ignore
      typeof FormData !== "undefined" ? FormData : class FormData {
        // @ts-ignore
        constructor() {
          throw new Error(`file uploads aren't supported in this environment yet as 'FormData' is undefined. ${recommendation}`);
        }
      }
    ),
    Blob: typeof Blob !== "undefined" ? Blob : class Blob {
      constructor() {
        throw new Error(`file uploads aren't supported in this environment yet as 'Blob' is undefined. ${recommendation}`);
      }
    },
    File: (
      // @ts-ignore
      typeof File !== "undefined" ? File : class File {
        // @ts-ignore
        constructor() {
          throw new Error(`file uploads aren't supported in this environment yet as 'File' is undefined. ${recommendation}`);
        }
      }
    ),
    ReadableStream: (
      // @ts-ignore
      typeof ReadableStream !== "undefined" ? ReadableStream : class ReadableStream {
        // @ts-ignore
        constructor() {
          throw new Error(`streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${recommendation}`);
        }
      }
    ),
    getMultipartRequestOptions: async (form, opts) => ({
      ...opts,
      body: new MultipartBody(form)
    }),
    getDefaultAgent: (url) => void 0,
    fileFromPath: () => {
      throw new Error("The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/openai/openai-node#file-uploads");
    },
    isFsReadStream: (value) => false
  };
}

// node_modules/openai/_shims/index.mjs
var init = () => {
  if (!kind)
    setShims(getRuntime(), { auto: true });
};
init();

// node_modules/openai/error.mjs
var OpenAIError = class extends Error {
};
var APIError = class extends OpenAIError {
  constructor(status, error, message, headers) {
    super(`${APIError.makeMessage(status, error, message)}`);
    this.status = status;
    this.headers = headers;
    this.request_id = headers == null ? void 0 : headers["x-request-id"];
    this.error = error;
    const data = error;
    this.code = data == null ? void 0 : data["code"];
    this.param = data == null ? void 0 : data["param"];
    this.type = data == null ? void 0 : data["type"];
  }
  static makeMessage(status, error, message) {
    const msg = (error == null ? void 0 : error.message) ? typeof error.message === "string" ? error.message : JSON.stringify(error.message) : error ? JSON.stringify(error) : message;
    if (status && msg) {
      return `${status} ${msg}`;
    }
    if (status) {
      return `${status} status code (no body)`;
    }
    if (msg) {
      return msg;
    }
    return "(no status code or body)";
  }
  static generate(status, errorResponse, message, headers) {
    if (!status || !headers) {
      return new APIConnectionError({ message, cause: castToError(errorResponse) });
    }
    const error = errorResponse == null ? void 0 : errorResponse["error"];
    if (status === 400) {
      return new BadRequestError(status, error, message, headers);
    }
    if (status === 401) {
      return new AuthenticationError(status, error, message, headers);
    }
    if (status === 403) {
      return new PermissionDeniedError(status, error, message, headers);
    }
    if (status === 404) {
      return new NotFoundError(status, error, message, headers);
    }
    if (status === 409) {
      return new ConflictError(status, error, message, headers);
    }
    if (status === 422) {
      return new UnprocessableEntityError(status, error, message, headers);
    }
    if (status === 429) {
      return new RateLimitError(status, error, message, headers);
    }
    if (status >= 500) {
      return new InternalServerError(status, error, message, headers);
    }
    return new APIError(status, error, message, headers);
  }
};
var APIUserAbortError = class extends APIError {
  constructor({ message } = {}) {
    super(void 0, void 0, message || "Request was aborted.", void 0);
  }
};
var APIConnectionError = class extends APIError {
  constructor({ message, cause }) {
    super(void 0, void 0, message || "Connection error.", void 0);
    if (cause)
      this.cause = cause;
  }
};
var APIConnectionTimeoutError = class extends APIConnectionError {
  constructor({ message } = {}) {
    super({ message: message != null ? message : "Request timed out." });
  }
};
var BadRequestError = class extends APIError {
};
var AuthenticationError = class extends APIError {
};
var PermissionDeniedError = class extends APIError {
};
var NotFoundError = class extends APIError {
};
var ConflictError = class extends APIError {
};
var UnprocessableEntityError = class extends APIError {
};
var RateLimitError = class extends APIError {
};
var InternalServerError = class extends APIError {
};
var LengthFinishReasonError = class extends OpenAIError {
  constructor() {
    super(`Could not parse response content as the length limit was reached`);
  }
};
var ContentFilterFinishReasonError = class extends OpenAIError {
  constructor() {
    super(`Could not parse response content as the request was rejected by the content filter`);
  }
};

// node_modules/openai/internal/decoders/line.mjs
var __classPrivateFieldSet = function(receiver, state, value, kind2, f) {
  if (kind2 === "m")
    throw new TypeError("Private method is not writable");
  if (kind2 === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind2 === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet = function(receiver, state, kind2, f) {
  if (kind2 === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind2 === "m" ? f : kind2 === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _LineDecoder_carriageReturnIndex;
var LineDecoder = class {
  constructor() {
    _LineDecoder_carriageReturnIndex.set(this, void 0);
    this.buffer = new Uint8Array();
    __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, "f");
  }
  decode(chunk) {
    if (chunk == null) {
      return [];
    }
    const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk) : typeof chunk === "string" ? new TextEncoder().encode(chunk) : chunk;
    let newData = new Uint8Array(this.buffer.length + binaryChunk.length);
    newData.set(this.buffer);
    newData.set(binaryChunk, this.buffer.length);
    this.buffer = newData;
    const lines = [];
    let patternIndex;
    while ((patternIndex = findNewlineIndex(this.buffer, __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, "f"))) != null) {
      if (patternIndex.carriage && __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, "f") == null) {
        __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, patternIndex.index, "f");
        continue;
      }
      if (__classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, "f") != null && (patternIndex.index !== __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, "f") + 1 || patternIndex.carriage)) {
        lines.push(this.decodeText(this.buffer.slice(0, __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, "f") - 1)));
        this.buffer = this.buffer.slice(__classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, "f"));
        __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, "f");
        continue;
      }
      const endIndex = __classPrivateFieldGet(this, _LineDecoder_carriageReturnIndex, "f") !== null ? patternIndex.preceding - 1 : patternIndex.preceding;
      const line = this.decodeText(this.buffer.slice(0, endIndex));
      lines.push(line);
      this.buffer = this.buffer.slice(patternIndex.index);
      __classPrivateFieldSet(this, _LineDecoder_carriageReturnIndex, null, "f");
    }
    return lines;
  }
  decodeText(bytes) {
    var _a2;
    if (bytes == null)
      return "";
    if (typeof bytes === "string")
      return bytes;
    if (typeof Buffer !== "undefined") {
      if (bytes instanceof Buffer) {
        return bytes.toString();
      }
      if (bytes instanceof Uint8Array) {
        return Buffer.from(bytes).toString();
      }
      throw new OpenAIError(`Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global "Buffer" defined, which this library assumes to be Node. Please report this error.`);
    }
    if (typeof TextDecoder !== "undefined") {
      if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {
        (_a2 = this.textDecoder) != null ? _a2 : this.textDecoder = new TextDecoder("utf8");
        return this.textDecoder.decode(bytes);
      }
      throw new OpenAIError(`Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`);
    }
    throw new OpenAIError(`Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`);
  }
  flush() {
    if (!this.buffer.length) {
      return [];
    }
    return this.decode("\n");
  }
};
_LineDecoder_carriageReturnIndex = /* @__PURE__ */ new WeakMap();
LineDecoder.NEWLINE_CHARS = /* @__PURE__ */ new Set(["\n", "\r"]);
LineDecoder.NEWLINE_REGEXP = /\r\n|[\n\r]/g;
function findNewlineIndex(buffer, startIndex) {
  const newline = 10;
  const carriage = 13;
  for (let i = startIndex != null ? startIndex : 0; i < buffer.length; i++) {
    if (buffer[i] === newline) {
      return { preceding: i, index: i + 1, carriage: false };
    }
    if (buffer[i] === carriage) {
      return { preceding: i, index: i + 1, carriage: true };
    }
  }
  return null;
}
function findDoubleNewlineIndex(buffer) {
  const newline = 10;
  const carriage = 13;
  for (let i = 0; i < buffer.length - 1; i++) {
    if (buffer[i] === newline && buffer[i + 1] === newline) {
      return i + 2;
    }
    if (buffer[i] === carriage && buffer[i + 1] === carriage) {
      return i + 2;
    }
    if (buffer[i] === carriage && buffer[i + 1] === newline && i + 3 < buffer.length && buffer[i + 2] === carriage && buffer[i + 3] === newline) {
      return i + 4;
    }
  }
  return -1;
}

// node_modules/openai/internal/stream-utils.mjs
function ReadableStreamToAsyncIterable(stream) {
  if (stream[Symbol.asyncIterator])
    return stream;
  const reader = stream.getReader();
  return {
    async next() {
      try {
        const result = await reader.read();
        if (result == null ? void 0 : result.done)
          reader.releaseLock();
        return result;
      } catch (e) {
        reader.releaseLock();
        throw e;
      }
    },
    async return() {
      const cancelPromise = reader.cancel();
      reader.releaseLock();
      await cancelPromise;
      return { done: true, value: void 0 };
    },
    [Symbol.asyncIterator]() {
      return this;
    }
  };
}

// node_modules/openai/streaming.mjs
var Stream = class {
  constructor(iterator, controller) {
    this.iterator = iterator;
    this.controller = controller;
  }
  static fromSSEResponse(response, controller) {
    let consumed = false;
    async function* iterator() {
      if (consumed) {
        throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream.");
      }
      consumed = true;
      let done = false;
      try {
        for await (const sse of _iterSSEMessages(response, controller)) {
          if (done)
            continue;
          if (sse.data.startsWith("[DONE]")) {
            done = true;
            continue;
          }
          if (sse.event === null || sse.event.startsWith("response.") || sse.event.startsWith("transcript.")) {
            let data;
            try {
              data = JSON.parse(sse.data);
            } catch (e) {
              console.error(`Could not parse message into JSON:`, sse.data);
              console.error(`From chunk:`, sse.raw);
              throw e;
            }
            if (data && data.error) {
              throw new APIError(void 0, data.error, void 0, createResponseHeaders(response.headers));
            }
            yield data;
          } else {
            let data;
            try {
              data = JSON.parse(sse.data);
            } catch (e) {
              console.error(`Could not parse message into JSON:`, sse.data);
              console.error(`From chunk:`, sse.raw);
              throw e;
            }
            if (sse.event == "error") {
              throw new APIError(void 0, data.error, data.message, void 0);
            }
            yield { event: sse.event, data };
          }
        }
        done = true;
      } catch (e) {
        if (e instanceof Error && e.name === "AbortError")
          return;
        throw e;
      } finally {
        if (!done)
          controller.abort();
      }
    }
    return new Stream(iterator, controller);
  }
  /**
   * Generates a Stream from a newline-separated ReadableStream
   * where each item is a JSON value.
   */
  static fromReadableStream(readableStream, controller) {
    let consumed = false;
    async function* iterLines() {
      const lineDecoder = new LineDecoder();
      const iter = ReadableStreamToAsyncIterable(readableStream);
      for await (const chunk of iter) {
        for (const line of lineDecoder.decode(chunk)) {
          yield line;
        }
      }
      for (const line of lineDecoder.flush()) {
        yield line;
      }
    }
    async function* iterator() {
      if (consumed) {
        throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream.");
      }
      consumed = true;
      let done = false;
      try {
        for await (const line of iterLines()) {
          if (done)
            continue;
          if (line)
            yield JSON.parse(line);
        }
        done = true;
      } catch (e) {
        if (e instanceof Error && e.name === "AbortError")
          return;
        throw e;
      } finally {
        if (!done)
          controller.abort();
      }
    }
    return new Stream(iterator, controller);
  }
  [Symbol.asyncIterator]() {
    return this.iterator();
  }
  /**
   * Splits the stream into two streams which can be
   * independently read from at different speeds.
   */
  tee() {
    const left = [];
    const right = [];
    const iterator = this.iterator();
    const teeIterator = (queue) => {
      return {
        next: () => {
          if (queue.length === 0) {
            const result = iterator.next();
            left.push(result);
            right.push(result);
          }
          return queue.shift();
        }
      };
    };
    return [
      new Stream(() => teeIterator(left), this.controller),
      new Stream(() => teeIterator(right), this.controller)
    ];
  }
  /**
   * Converts this stream to a newline-separated ReadableStream of
   * JSON stringified values in the stream
   * which can be turned back into a Stream with `Stream.fromReadableStream()`.
   */
  toReadableStream() {
    const self = this;
    let iter;
    const encoder = new TextEncoder();
    return new ReadableStream2({
      async start() {
        iter = self[Symbol.asyncIterator]();
      },
      async pull(ctrl) {
        try {
          const { value, done } = await iter.next();
          if (done)
            return ctrl.close();
          const bytes = encoder.encode(JSON.stringify(value) + "\n");
          ctrl.enqueue(bytes);
        } catch (err) {
          ctrl.error(err);
        }
      },
      async cancel() {
        var _a2;
        await ((_a2 = iter.return) == null ? void 0 : _a2.call(iter));
      }
    });
  }
};
async function* _iterSSEMessages(response, controller) {
  if (!response.body) {
    controller.abort();
    throw new OpenAIError(`Attempted to iterate over a response with no body`);
  }
  const sseDecoder = new SSEDecoder();
  const lineDecoder = new LineDecoder();
  const iter = ReadableStreamToAsyncIterable(response.body);
  for await (const sseChunk of iterSSEChunks(iter)) {
    for (const line of lineDecoder.decode(sseChunk)) {
      const sse = sseDecoder.decode(line);
      if (sse)
        yield sse;
    }
  }
  for (const line of lineDecoder.flush()) {
    const sse = sseDecoder.decode(line);
    if (sse)
      yield sse;
  }
}
async function* iterSSEChunks(iterator) {
  let data = new Uint8Array();
  for await (const chunk of iterator) {
    if (chunk == null) {
      continue;
    }
    const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk) : typeof chunk === "string" ? new TextEncoder().encode(chunk) : chunk;
    let newData = new Uint8Array(data.length + binaryChunk.length);
    newData.set(data);
    newData.set(binaryChunk, data.length);
    data = newData;
    let patternIndex;
    while ((patternIndex = findDoubleNewlineIndex(data)) !== -1) {
      yield data.slice(0, patternIndex);
      data = data.slice(patternIndex);
    }
  }
  if (data.length > 0) {
    yield data;
  }
}
var SSEDecoder = class {
  constructor() {
    this.event = null;
    this.data = [];
    this.chunks = [];
  }
  decode(line) {
    if (line.endsWith("\r")) {
      line = line.substring(0, line.length - 1);
    }
    if (!line) {
      if (!this.event && !this.data.length)
        return null;
      const sse = {
        event: this.event,
        data: this.data.join("\n"),
        raw: this.chunks
      };
      this.event = null;
      this.data = [];
      this.chunks = [];
      return sse;
    }
    this.chunks.push(line);
    if (line.startsWith(":")) {
      return null;
    }
    let [fieldname, _, value] = partition(line, ":");
    if (value.startsWith(" ")) {
      value = value.substring(1);
    }
    if (fieldname === "event") {
      this.event = value;
    } else if (fieldname === "data") {
      this.data.push(value);
    }
    return null;
  }
};
function partition(str2, delimiter) {
  const index = str2.indexOf(delimiter);
  if (index !== -1) {
    return [str2.substring(0, index), delimiter, str2.substring(index + delimiter.length)];
  }
  return [str2, "", ""];
}

// node_modules/openai/uploads.mjs
var isResponseLike = (value) => value != null && typeof value === "object" && typeof value.url === "string" && typeof value.blob === "function";
var isFileLike = (value) => value != null && typeof value === "object" && typeof value.name === "string" && typeof value.lastModified === "number" && isBlobLike(value);
var isBlobLike = (value) => value != null && typeof value === "object" && typeof value.size === "number" && typeof value.type === "string" && typeof value.text === "function" && typeof value.slice === "function" && typeof value.arrayBuffer === "function";
var isUploadable = (value) => {
  return isFileLike(value) || isResponseLike(value) || isFsReadStream(value);
};
async function toFile(value, name, options) {
  var _a2, _b, _c;
  value = await value;
  if (isFileLike(value)) {
    return value;
  }
  if (isResponseLike(value)) {
    const blob = await value.blob();
    name || (name = (_a2 = new URL(value.url).pathname.split(/[\\/]/).pop()) != null ? _a2 : "unknown_file");
    const data = isBlobLike(blob) ? [await blob.arrayBuffer()] : [blob];
    return new File2(data, name, options);
  }
  const bits = await getBytes(value);
  name || (name = (_b = getName(value)) != null ? _b : "unknown_file");
  if (!(options == null ? void 0 : options.type)) {
    const type = (_c = bits[0]) == null ? void 0 : _c.type;
    if (typeof type === "string") {
      options = { ...options, type };
    }
  }
  return new File2(bits, name, options);
}
async function getBytes(value) {
  var _a2;
  let parts = [];
  if (typeof value === "string" || ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.
  value instanceof ArrayBuffer) {
    parts.push(value);
  } else if (isBlobLike(value)) {
    parts.push(await value.arrayBuffer());
  } else if (isAsyncIterableIterator(value)) {
    for await (const chunk of value) {
      parts.push(chunk);
    }
  } else {
    throw new Error(`Unexpected data type: ${typeof value}; constructor: ${(_a2 = value == null ? void 0 : value.constructor) == null ? void 0 : _a2.name}; props: ${propsForError(value)}`);
  }
  return parts;
}
function propsForError(value) {
  const props = Object.getOwnPropertyNames(value);
  return `[${props.map((p) => `"${p}"`).join(", ")}]`;
}
function getName(value) {
  var _a2;
  return getStringFromMaybeBuffer(value.name) || getStringFromMaybeBuffer(value.filename) || // For fs.ReadStream
  ((_a2 = getStringFromMaybeBuffer(value.path)) == null ? void 0 : _a2.split(/[\\/]/).pop());
}
var getStringFromMaybeBuffer = (x) => {
  if (typeof x === "string")
    return x;
  if (typeof Buffer !== "undefined" && x instanceof Buffer)
    return String(x);
  return void 0;
};
var isAsyncIterableIterator = (value) => value != null && typeof value === "object" && typeof value[Symbol.asyncIterator] === "function";
var isMultipartBody = (body) => body && typeof body === "object" && body.body && body[Symbol.toStringTag] === "MultipartBody";
var multipartFormRequestOptions = async (opts) => {
  const form = await createForm(opts.body);
  return getMultipartRequestOptions(form, opts);
};
var createForm = async (body) => {
  const form = new FormData2();
  await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));
  return form;
};
var addFormValue = async (form, key, value) => {
  if (value === void 0)
    return;
  if (value == null) {
    throw new TypeError(`Received null for "${key}"; to pass null in FormData, you must use the string 'null'`);
  }
  if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
    form.append(key, String(value));
  } else if (isUploadable(value)) {
    const file = await toFile(value);
    form.append(key, file);
  } else if (Array.isArray(value)) {
    await Promise.all(value.map((entry) => addFormValue(form, key + "[]", entry)));
  } else if (typeof value === "object") {
    await Promise.all(Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)));
  } else {
    throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`);
  }
};

// node_modules/openai/core.mjs
var __classPrivateFieldSet2 = function(receiver, state, value, kind2, f) {
  if (kind2 === "m")
    throw new TypeError("Private method is not writable");
  if (kind2 === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind2 === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet2 = function(receiver, state, kind2, f) {
  if (kind2 === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind2 === "m" ? f : kind2 === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AbstractPage_client;
init();
async function defaultParseResponse(props) {
  var _a2;
  const { response } = props;
  if (props.options.stream) {
    debug("response", response.status, response.url, response.headers, response.body);
    if (props.options.__streamClass) {
      return props.options.__streamClass.fromSSEResponse(response, props.controller);
    }
    return Stream.fromSSEResponse(response, props.controller);
  }
  if (response.status === 204) {
    return null;
  }
  if (props.options.__binaryResponse) {
    return response;
  }
  const contentType = response.headers.get("content-type");
  const mediaType = (_a2 = contentType == null ? void 0 : contentType.split(";")[0]) == null ? void 0 : _a2.trim();
  const isJSON = (mediaType == null ? void 0 : mediaType.includes("application/json")) || (mediaType == null ? void 0 : mediaType.endsWith("+json"));
  if (isJSON) {
    const json = await response.json();
    debug("response", response.status, response.url, response.headers, json);
    return _addRequestID(json, response);
  }
  const text = await response.text();
  debug("response", response.status, response.url, response.headers, text);
  return text;
}
function _addRequestID(value, response) {
  if (!value || typeof value !== "object" || Array.isArray(value)) {
    return value;
  }
  return Object.defineProperty(value, "_request_id", {
    value: response.headers.get("x-request-id"),
    enumerable: false
  });
}
var APIPromise = class extends Promise {
  constructor(responsePromise, parseResponse2 = defaultParseResponse) {
    super((resolve) => {
      resolve(null);
    });
    this.responsePromise = responsePromise;
    this.parseResponse = parseResponse2;
  }
  _thenUnwrap(transform) {
    return new APIPromise(this.responsePromise, async (props) => _addRequestID(transform(await this.parseResponse(props), props), props.response));
  }
  /**
   * Gets the raw `Response` instance instead of parsing the response
   * data.
   *
   * If you want to parse the response body but still get the `Response`
   * instance, you can use {@link withResponse()}.
   *
   * 👋 Getting the wrong TypeScript type for `Response`?
   * Try setting `"moduleResolution": "NodeNext"` if you can,
   * or add one of these imports before your first `import … from 'openai'`:
   * - `import 'openai/shims/node'` (if you're running on Node)
   * - `import 'openai/shims/web'` (otherwise)
   */
  asResponse() {
    return this.responsePromise.then((p) => p.response);
  }
  /**
   * Gets the parsed response data, the raw `Response` instance and the ID of the request,
   * returned via the X-Request-ID header which is useful for debugging requests and reporting
   * issues to OpenAI.
   *
   * If you just want to get the raw `Response` instance without parsing it,
   * you can use {@link asResponse()}.
   *
   *
   * 👋 Getting the wrong TypeScript type for `Response`?
   * Try setting `"moduleResolution": "NodeNext"` if you can,
   * or add one of these imports before your first `import … from 'openai'`:
   * - `import 'openai/shims/node'` (if you're running on Node)
   * - `import 'openai/shims/web'` (otherwise)
   */
  async withResponse() {
    const [data, response] = await Promise.all([this.parse(), this.asResponse()]);
    return { data, response, request_id: response.headers.get("x-request-id") };
  }
  parse() {
    if (!this.parsedPromise) {
      this.parsedPromise = this.responsePromise.then(this.parseResponse);
    }
    return this.parsedPromise;
  }
  then(onfulfilled, onrejected) {
    return this.parse().then(onfulfilled, onrejected);
  }
  catch(onrejected) {
    return this.parse().catch(onrejected);
  }
  finally(onfinally) {
    return this.parse().finally(onfinally);
  }
};
var APIClient = class {
  constructor({
    baseURL,
    maxRetries = 2,
    timeout = 6e5,
    // 10 minutes
    httpAgent,
    fetch: overriddenFetch
  }) {
    this.baseURL = baseURL;
    this.maxRetries = validatePositiveInteger("maxRetries", maxRetries);
    this.timeout = validatePositiveInteger("timeout", timeout);
    this.httpAgent = httpAgent;
    this.fetch = overriddenFetch != null ? overriddenFetch : fetch2;
  }
  authHeaders(opts) {
    return {};
  }
  /**
   * Override this to add your own default headers, for example:
   *
   *  {
   *    ...super.defaultHeaders(),
   *    Authorization: 'Bearer 123',
   *  }
   */
  defaultHeaders(opts) {
    return {
      Accept: "application/json",
      "Content-Type": "application/json",
      "User-Agent": this.getUserAgent(),
      ...getPlatformHeaders(),
      ...this.authHeaders(opts)
    };
  }
  /**
   * Override this to add your own headers validation:
   */
  validateHeaders(headers, customHeaders) {
  }
  defaultIdempotencyKey() {
    return `stainless-node-retry-${uuid4()}`;
  }
  get(path, opts) {
    return this.methodRequest("get", path, opts);
  }
  post(path, opts) {
    return this.methodRequest("post", path, opts);
  }
  patch(path, opts) {
    return this.methodRequest("patch", path, opts);
  }
  put(path, opts) {
    return this.methodRequest("put", path, opts);
  }
  delete(path, opts) {
    return this.methodRequest("delete", path, opts);
  }
  methodRequest(method, path, opts) {
    return this.request(Promise.resolve(opts).then(async (opts2) => {
      const body = opts2 && isBlobLike(opts2 == null ? void 0 : opts2.body) ? new DataView(await opts2.body.arrayBuffer()) : (opts2 == null ? void 0 : opts2.body) instanceof DataView ? opts2.body : (opts2 == null ? void 0 : opts2.body) instanceof ArrayBuffer ? new DataView(opts2.body) : opts2 && ArrayBuffer.isView(opts2 == null ? void 0 : opts2.body) ? new DataView(opts2.body.buffer) : opts2 == null ? void 0 : opts2.body;
      return { method, path, ...opts2, body };
    }));
  }
  getAPIList(path, Page2, opts) {
    return this.requestAPIList(Page2, { method: "get", path, ...opts });
  }
  calculateContentLength(body) {
    if (typeof body === "string") {
      if (typeof Buffer !== "undefined") {
        return Buffer.byteLength(body, "utf8").toString();
      }
      if (typeof TextEncoder !== "undefined") {
        const encoder = new TextEncoder();
        const encoded = encoder.encode(body);
        return encoded.length.toString();
      }
    } else if (ArrayBuffer.isView(body)) {
      return body.byteLength.toString();
    }
    return null;
  }
  buildRequest(inputOptions, { retryCount = 0 } = {}) {
    var _a2, _b, _c, _d, _e, _f;
    const options = { ...inputOptions };
    const { method, path, query, headers = {} } = options;
    const body = ArrayBuffer.isView(options.body) || options.__binaryRequest && typeof options.body === "string" ? options.body : isMultipartBody(options.body) ? options.body.body : options.body ? JSON.stringify(options.body, null, 2) : null;
    const contentLength = this.calculateContentLength(body);
    const url = this.buildURL(path, query);
    if ("timeout" in options)
      validatePositiveInteger("timeout", options.timeout);
    options.timeout = (_a2 = options.timeout) != null ? _a2 : this.timeout;
    const httpAgent = (_c = (_b = options.httpAgent) != null ? _b : this.httpAgent) != null ? _c : getDefaultAgent(url);
    const minAgentTimeout = options.timeout + 1e3;
    if (typeof ((_d = httpAgent == null ? void 0 : httpAgent.options) == null ? void 0 : _d.timeout) === "number" && minAgentTimeout > ((_e = httpAgent.options.timeout) != null ? _e : 0)) {
      httpAgent.options.timeout = minAgentTimeout;
    }
    if (this.idempotencyHeader && method !== "get") {
      if (!inputOptions.idempotencyKey)
        inputOptions.idempotencyKey = this.defaultIdempotencyKey();
      headers[this.idempotencyHeader] = inputOptions.idempotencyKey;
    }
    const reqHeaders = this.buildHeaders({ options, headers, contentLength, retryCount });
    const req = {
      method,
      ...body && { body },
      headers: reqHeaders,
      ...httpAgent && { agent: httpAgent },
      // @ts-ignore node-fetch uses a custom AbortSignal type that is
      // not compatible with standard web types
      signal: (_f = options.signal) != null ? _f : null
    };
    return { req, url, timeout: options.timeout };
  }
  buildHeaders({ options, headers, contentLength, retryCount }) {
    const reqHeaders = {};
    if (contentLength) {
      reqHeaders["content-length"] = contentLength;
    }
    const defaultHeaders = this.defaultHeaders(options);
    applyHeadersMut(reqHeaders, defaultHeaders);
    applyHeadersMut(reqHeaders, headers);
    if (isMultipartBody(options.body) && kind !== "node") {
      delete reqHeaders["content-type"];
    }
    if (getHeader(defaultHeaders, "x-stainless-retry-count") === void 0 && getHeader(headers, "x-stainless-retry-count") === void 0) {
      reqHeaders["x-stainless-retry-count"] = String(retryCount);
    }
    if (getHeader(defaultHeaders, "x-stainless-timeout") === void 0 && getHeader(headers, "x-stainless-timeout") === void 0 && options.timeout) {
      reqHeaders["x-stainless-timeout"] = String(Math.trunc(options.timeout / 1e3));
    }
    this.validateHeaders(reqHeaders, headers);
    return reqHeaders;
  }
  /**
   * Used as a callback for mutating the given `FinalRequestOptions` object.
   */
  async prepareOptions(options) {
  }
  /**
   * Used as a callback for mutating the given `RequestInit` object.
   *
   * This is useful for cases where you want to add certain headers based off of
   * the request properties, e.g. `method` or `url`.
   */
  async prepareRequest(request, { url, options }) {
  }
  parseHeaders(headers) {
    return !headers ? {} : Symbol.iterator in headers ? Object.fromEntries(Array.from(headers).map((header) => [...header])) : { ...headers };
  }
  makeStatusError(status, error, message, headers) {
    return APIError.generate(status, error, message, headers);
  }
  request(options, remainingRetries = null) {
    return new APIPromise(this.makeRequest(options, remainingRetries));
  }
  async makeRequest(optionsInput, retriesRemaining) {
    var _a2, _b, _c;
    const options = await optionsInput;
    const maxRetries = (_a2 = options.maxRetries) != null ? _a2 : this.maxRetries;
    if (retriesRemaining == null) {
      retriesRemaining = maxRetries;
    }
    await this.prepareOptions(options);
    const { req, url, timeout } = this.buildRequest(options, { retryCount: maxRetries - retriesRemaining });
    await this.prepareRequest(req, { url, options });
    debug("request", url, options, req.headers);
    if ((_b = options.signal) == null ? void 0 : _b.aborted) {
      throw new APIUserAbortError();
    }
    const controller = new AbortController();
    const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);
    if (response instanceof Error) {
      if ((_c = options.signal) == null ? void 0 : _c.aborted) {
        throw new APIUserAbortError();
      }
      if (retriesRemaining) {
        return this.retryRequest(options, retriesRemaining);
      }
      if (response.name === "AbortError") {
        throw new APIConnectionTimeoutError();
      }
      throw new APIConnectionError({ cause: response });
    }
    const responseHeaders = createResponseHeaders(response.headers);
    if (!response.ok) {
      if (retriesRemaining && this.shouldRetry(response)) {
        const retryMessage2 = `retrying, ${retriesRemaining} attempts remaining`;
        debug(`response (error; ${retryMessage2})`, response.status, url, responseHeaders);
        return this.retryRequest(options, retriesRemaining, responseHeaders);
      }
      const errText = await response.text().catch((e) => castToError(e).message);
      const errJSON = safeJSON(errText);
      const errMessage = errJSON ? void 0 : errText;
      const retryMessage = retriesRemaining ? `(error; no more retries left)` : `(error; not retryable)`;
      debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders, errMessage);
      const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);
      throw err;
    }
    return { response, options, controller };
  }
  requestAPIList(Page2, options) {
    const request = this.makeRequest(options, null);
    return new PagePromise(this, request, Page2);
  }
  buildURL(path, query) {
    const url = isAbsoluteURL(path) ? new URL(path) : new URL(this.baseURL + (this.baseURL.endsWith("/") && path.startsWith("/") ? path.slice(1) : path));
    const defaultQuery = this.defaultQuery();
    if (!isEmptyObj(defaultQuery)) {
      query = { ...defaultQuery, ...query };
    }
    if (typeof query === "object" && query && !Array.isArray(query)) {
      url.search = this.stringifyQuery(query);
    }
    return url.toString();
  }
  stringifyQuery(query) {
    return Object.entries(query).filter(([_, value]) => typeof value !== "undefined").map(([key, value]) => {
      if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
        return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;
      }
      if (value === null) {
        return `${encodeURIComponent(key)}=`;
      }
      throw new OpenAIError(`Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`);
    }).join("&");
  }
  async fetchWithTimeout(url, init2, ms, controller) {
    const { signal, ...options } = init2 || {};
    if (signal)
      signal.addEventListener("abort", () => controller.abort());
    const timeout = setTimeout(() => controller.abort(), ms);
    const fetchOptions = {
      signal: controller.signal,
      ...options
    };
    if (fetchOptions.method) {
      fetchOptions.method = fetchOptions.method.toUpperCase();
    }
    return (
      // use undefined this binding; fetch errors if bound to something else in browser/cloudflare
      this.fetch.call(void 0, url, fetchOptions).finally(() => {
        clearTimeout(timeout);
      })
    );
  }
  shouldRetry(response) {
    const shouldRetryHeader = response.headers.get("x-should-retry");
    if (shouldRetryHeader === "true")
      return true;
    if (shouldRetryHeader === "false")
      return false;
    if (response.status === 408)
      return true;
    if (response.status === 409)
      return true;
    if (response.status === 429)
      return true;
    if (response.status >= 500)
      return true;
    return false;
  }
  async retryRequest(options, retriesRemaining, responseHeaders) {
    var _a2;
    let timeoutMillis;
    const retryAfterMillisHeader = responseHeaders == null ? void 0 : responseHeaders["retry-after-ms"];
    if (retryAfterMillisHeader) {
      const timeoutMs = parseFloat(retryAfterMillisHeader);
      if (!Number.isNaN(timeoutMs)) {
        timeoutMillis = timeoutMs;
      }
    }
    const retryAfterHeader = responseHeaders == null ? void 0 : responseHeaders["retry-after"];
    if (retryAfterHeader && !timeoutMillis) {
      const timeoutSeconds = parseFloat(retryAfterHeader);
      if (!Number.isNaN(timeoutSeconds)) {
        timeoutMillis = timeoutSeconds * 1e3;
      } else {
        timeoutMillis = Date.parse(retryAfterHeader) - Date.now();
      }
    }
    if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1e3)) {
      const maxRetries = (_a2 = options.maxRetries) != null ? _a2 : this.maxRetries;
      timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);
    }
    await sleep(timeoutMillis);
    return this.makeRequest(options, retriesRemaining - 1);
  }
  calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {
    const initialRetryDelay = 0.5;
    const maxRetryDelay = 8;
    const numRetries = maxRetries - retriesRemaining;
    const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);
    const jitter = 1 - Math.random() * 0.25;
    return sleepSeconds * jitter * 1e3;
  }
  getUserAgent() {
    return `${this.constructor.name}/JS ${VERSION}`;
  }
};
var AbstractPage = class {
  constructor(client, response, body, options) {
    _AbstractPage_client.set(this, void 0);
    __classPrivateFieldSet2(this, _AbstractPage_client, client, "f");
    this.options = options;
    this.response = response;
    this.body = body;
  }
  hasNextPage() {
    const items = this.getPaginatedItems();
    if (!items.length)
      return false;
    return this.nextPageInfo() != null;
  }
  async getNextPage() {
    const nextInfo = this.nextPageInfo();
    if (!nextInfo) {
      throw new OpenAIError("No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.");
    }
    const nextOptions = { ...this.options };
    if ("params" in nextInfo && typeof nextOptions.query === "object") {
      nextOptions.query = { ...nextOptions.query, ...nextInfo.params };
    } else if ("url" in nextInfo) {
      const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];
      for (const [key, value] of params) {
        nextInfo.url.searchParams.set(key, value);
      }
      nextOptions.query = void 0;
      nextOptions.path = nextInfo.url.toString();
    }
    return await __classPrivateFieldGet2(this, _AbstractPage_client, "f").requestAPIList(this.constructor, nextOptions);
  }
  async *iterPages() {
    let page = this;
    yield page;
    while (page.hasNextPage()) {
      page = await page.getNextPage();
      yield page;
    }
  }
  async *[(_AbstractPage_client = /* @__PURE__ */ new WeakMap(), Symbol.asyncIterator)]() {
    for await (const page of this.iterPages()) {
      for (const item of page.getPaginatedItems()) {
        yield item;
      }
    }
  }
};
var PagePromise = class extends APIPromise {
  constructor(client, request, Page2) {
    super(request, async (props) => new Page2(client, props.response, await defaultParseResponse(props), props.options));
  }
  /**
   * Allow auto-paginating iteration on an unawaited list call, eg:
   *
   *    for await (const item of client.items.list()) {
   *      console.log(item)
   *    }
   */
  async *[Symbol.asyncIterator]() {
    const page = await this;
    for await (const item of page) {
      yield item;
    }
  }
};
var createResponseHeaders = (headers) => {
  return new Proxy(Object.fromEntries(
    // @ts-ignore
    headers.entries()
  ), {
    get(target, name) {
      const key = name.toString();
      return target[key.toLowerCase()] || target[key];
    }
  });
};
var requestOptionsKeys = {
  method: true,
  path: true,
  query: true,
  body: true,
  headers: true,
  maxRetries: true,
  stream: true,
  timeout: true,
  httpAgent: true,
  signal: true,
  idempotencyKey: true,
  __metadata: true,
  __binaryRequest: true,
  __binaryResponse: true,
  __streamClass: true
};
var isRequestOptions = (obj) => {
  return typeof obj === "object" && obj !== null && !isEmptyObj(obj) && Object.keys(obj).every((k) => hasOwn(requestOptionsKeys, k));
};
var getPlatformProperties = () => {
  var _a2, _b;
  if (typeof Deno !== "undefined" && Deno.build != null) {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION,
      "X-Stainless-OS": normalizePlatform(Deno.build.os),
      "X-Stainless-Arch": normalizeArch(Deno.build.arch),
      "X-Stainless-Runtime": "deno",
      "X-Stainless-Runtime-Version": typeof Deno.version === "string" ? Deno.version : (_b = (_a2 = Deno.version) == null ? void 0 : _a2.deno) != null ? _b : "unknown"
    };
  }
  if (typeof EdgeRuntime !== "undefined") {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION,
      "X-Stainless-OS": "Unknown",
      "X-Stainless-Arch": `other:${EdgeRuntime}`,
      "X-Stainless-Runtime": "edge",
      "X-Stainless-Runtime-Version": process.version
    };
  }
  if (Object.prototype.toString.call(typeof process !== "undefined" ? process : 0) === "[object process]") {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION,
      "X-Stainless-OS": normalizePlatform(process.platform),
      "X-Stainless-Arch": normalizeArch(process.arch),
      "X-Stainless-Runtime": "node",
      "X-Stainless-Runtime-Version": process.version
    };
  }
  const browserInfo = getBrowserInfo();
  if (browserInfo) {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION,
      "X-Stainless-OS": "Unknown",
      "X-Stainless-Arch": "unknown",
      "X-Stainless-Runtime": `browser:${browserInfo.browser}`,
      "X-Stainless-Runtime-Version": browserInfo.version
    };
  }
  return {
    "X-Stainless-Lang": "js",
    "X-Stainless-Package-Version": VERSION,
    "X-Stainless-OS": "Unknown",
    "X-Stainless-Arch": "unknown",
    "X-Stainless-Runtime": "unknown",
    "X-Stainless-Runtime-Version": "unknown"
  };
};
function getBrowserInfo() {
  if (typeof navigator === "undefined" || !navigator) {
    return null;
  }
  const browserPatterns = [
    { key: "edge", pattern: /Edge(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "ie", pattern: /MSIE(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "ie", pattern: /Trident(?:.*rv\:(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "chrome", pattern: /Chrome(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "firefox", pattern: /Firefox(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "safari", pattern: /(?:Version\W+(\d+)\.(\d+)(?:\.(\d+))?)?(?:\W+Mobile\S*)?\W+Safari/ }
  ];
  for (const { key, pattern } of browserPatterns) {
    const match = pattern.exec(navigator.userAgent);
    if (match) {
      const major = match[1] || 0;
      const minor = match[2] || 0;
      const patch = match[3] || 0;
      return { browser: key, version: `${major}.${minor}.${patch}` };
    }
  }
  return null;
}
var normalizeArch = (arch) => {
  if (arch === "x32")
    return "x32";
  if (arch === "x86_64" || arch === "x64")
    return "x64";
  if (arch === "arm")
    return "arm";
  if (arch === "aarch64" || arch === "arm64")
    return "arm64";
  if (arch)
    return `other:${arch}`;
  return "unknown";
};
var normalizePlatform = (platform) => {
  platform = platform.toLowerCase();
  if (platform.includes("ios"))
    return "iOS";
  if (platform === "android")
    return "Android";
  if (platform === "darwin")
    return "MacOS";
  if (platform === "win32")
    return "Windows";
  if (platform === "freebsd")
    return "FreeBSD";
  if (platform === "openbsd")
    return "OpenBSD";
  if (platform === "linux")
    return "Linux";
  if (platform)
    return `Other:${platform}`;
  return "Unknown";
};
var _platformHeaders;
var getPlatformHeaders = () => {
  return _platformHeaders != null ? _platformHeaders : _platformHeaders = getPlatformProperties();
};
var safeJSON = (text) => {
  try {
    return JSON.parse(text);
  } catch (err) {
    return void 0;
  }
};
var startsWithSchemeRegexp = /^[a-z][a-z0-9+.-]*:/i;
var isAbsoluteURL = (url) => {
  return startsWithSchemeRegexp.test(url);
};
var sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
var validatePositiveInteger = (name, n) => {
  if (typeof n !== "number" || !Number.isInteger(n)) {
    throw new OpenAIError(`${name} must be an integer`);
  }
  if (n < 0) {
    throw new OpenAIError(`${name} must be a positive integer`);
  }
  return n;
};
var castToError = (err) => {
  if (err instanceof Error)
    return err;
  if (typeof err === "object" && err !== null) {
    try {
      return new Error(JSON.stringify(err));
    } catch (e) {
    }
  }
  return new Error(err);
};
var readEnv = (env) => {
  var _a2, _b, _c, _d, _e, _f;
  if (typeof process !== "undefined") {
    return (_c = (_b = (_a2 = process.env) == null ? void 0 : _a2[env]) == null ? void 0 : _b.trim()) != null ? _c : void 0;
  }
  if (typeof Deno !== "undefined") {
    return (_f = (_e = (_d = Deno.env) == null ? void 0 : _d.get) == null ? void 0 : _e.call(_d, env)) == null ? void 0 : _f.trim();
  }
  return void 0;
};
function isEmptyObj(obj) {
  if (!obj)
    return true;
  for (const _k in obj)
    return false;
  return true;
}
function hasOwn(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}
function applyHeadersMut(targetHeaders, newHeaders) {
  for (const k in newHeaders) {
    if (!hasOwn(newHeaders, k))
      continue;
    const lowerKey = k.toLowerCase();
    if (!lowerKey)
      continue;
    const val = newHeaders[k];
    if (val === null) {
      delete targetHeaders[lowerKey];
    } else if (val !== void 0) {
      targetHeaders[lowerKey] = val;
    }
  }
}
var SENSITIVE_HEADERS = /* @__PURE__ */ new Set(["authorization", "api-key"]);
function debug(action, ...args) {
  var _a2;
  if (typeof process !== "undefined" && ((_a2 = process == null ? void 0 : process.env) == null ? void 0 : _a2["DEBUG"]) === "true") {
    const modifiedArgs = args.map((arg) => {
      if (!arg) {
        return arg;
      }
      if (arg["headers"]) {
        const modifiedArg2 = { ...arg, headers: { ...arg["headers"] } };
        for (const header in arg["headers"]) {
          if (SENSITIVE_HEADERS.has(header.toLowerCase())) {
            modifiedArg2["headers"][header] = "REDACTED";
          }
        }
        return modifiedArg2;
      }
      let modifiedArg = null;
      for (const header in arg) {
        if (SENSITIVE_HEADERS.has(header.toLowerCase())) {
          modifiedArg != null ? modifiedArg : modifiedArg = { ...arg };
          modifiedArg[header] = "REDACTED";
        }
      }
      return modifiedArg != null ? modifiedArg : arg;
    });
    console.log(`OpenAI:DEBUG:${action}`, ...modifiedArgs);
  }
}
var uuid4 = () => {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
    const r = Math.random() * 16 | 0;
    const v = c === "x" ? r : r & 3 | 8;
    return v.toString(16);
  });
};
var isRunningInBrowser = () => {
  return (
    // @ts-ignore
    typeof window !== "undefined" && // @ts-ignore
    typeof window.document !== "undefined" && // @ts-ignore
    typeof navigator !== "undefined"
  );
};
var isHeadersProtocol = (headers) => {
  return typeof (headers == null ? void 0 : headers.get) === "function";
};
var getHeader = (headers, header) => {
  var _a2;
  const lowerCasedHeader = header.toLowerCase();
  if (isHeadersProtocol(headers)) {
    const intercapsHeader = ((_a2 = header[0]) == null ? void 0 : _a2.toUpperCase()) + header.substring(1).replace(/([^\w])(\w)/g, (_m, g1, g2) => g1 + g2.toUpperCase());
    for (const key of [header, lowerCasedHeader, header.toUpperCase(), intercapsHeader]) {
      const value = headers.get(key);
      if (value) {
        return value;
      }
    }
  }
  for (const [key, value] of Object.entries(headers)) {
    if (key.toLowerCase() === lowerCasedHeader) {
      if (Array.isArray(value)) {
        if (value.length <= 1)
          return value[0];
        console.warn(`Received ${value.length} entries for the ${header} header, using the first entry.`);
        return value[0];
      }
      return value;
    }
  }
  return void 0;
};
var toFloat32Array = (base64Str) => {
  if (typeof Buffer !== "undefined") {
    const buf = Buffer.from(base64Str, "base64");
    return Array.from(new Float32Array(buf.buffer, buf.byteOffset, buf.length / Float32Array.BYTES_PER_ELEMENT));
  } else {
    const binaryStr = atob(base64Str);
    const len = binaryStr.length;
    const bytes = new Uint8Array(len);
    for (let i = 0; i < len; i++) {
      bytes[i] = binaryStr.charCodeAt(i);
    }
    return Array.from(new Float32Array(bytes.buffer));
  }
};
function isObj(obj) {
  return obj != null && typeof obj === "object" && !Array.isArray(obj);
}

// node_modules/openai/pagination.mjs
var Page = class extends AbstractPage {
  constructor(client, response, body, options) {
    super(client, response, body, options);
    this.data = body.data || [];
    this.object = body.object;
  }
  getPaginatedItems() {
    var _a2;
    return (_a2 = this.data) != null ? _a2 : [];
  }
  // @deprecated Please use `nextPageInfo()` instead
  /**
   * This page represents a response that isn't actually paginated at the API level
   * so there will never be any next page params.
   */
  nextPageParams() {
    return null;
  }
  nextPageInfo() {
    return null;
  }
};
var CursorPage = class extends AbstractPage {
  constructor(client, response, body, options) {
    super(client, response, body, options);
    this.data = body.data || [];
    this.has_more = body.has_more || false;
  }
  getPaginatedItems() {
    var _a2;
    return (_a2 = this.data) != null ? _a2 : [];
  }
  hasNextPage() {
    if (this.has_more === false) {
      return false;
    }
    return super.hasNextPage();
  }
  // @deprecated Please use `nextPageInfo()` instead
  nextPageParams() {
    const info = this.nextPageInfo();
    if (!info)
      return null;
    if ("params" in info)
      return info.params;
    const params = Object.fromEntries(info.url.searchParams);
    if (!Object.keys(params).length)
      return null;
    return params;
  }
  nextPageInfo() {
    var _a2;
    const data = this.getPaginatedItems();
    if (!data.length) {
      return null;
    }
    const id = (_a2 = data[data.length - 1]) == null ? void 0 : _a2.id;
    if (!id) {
      return null;
    }
    return { params: { after: id } };
  }
};

// node_modules/openai/resource.mjs
var APIResource = class {
  constructor(client) {
    this._client = client;
  }
};

// node_modules/openai/resources/chat/completions/messages.mjs
var Messages = class extends APIResource {
  list(completionId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list(completionId, {}, query);
    }
    return this._client.getAPIList(`/chat/completions/${completionId}/messages`, ChatCompletionStoreMessagesPage, { query, ...options });
  }
};

// node_modules/openai/resources/chat/completions/completions.mjs
var Completions = class extends APIResource {
  constructor() {
    super(...arguments);
    this.messages = new Messages(this._client);
  }
  create(body, options) {
    var _a2;
    return this._client.post("/chat/completions", { body, ...options, stream: (_a2 = body.stream) != null ? _a2 : false });
  }
  /**
   * Get a stored chat completion. Only Chat Completions that have been created with
   * the `store` parameter set to `true` will be returned.
   *
   * @example
   * ```ts
   * const chatCompletion =
   *   await client.chat.completions.retrieve('completion_id');
   * ```
   */
  retrieve(completionId, options) {
    return this._client.get(`/chat/completions/${completionId}`, options);
  }
  /**
   * Modify a stored chat completion. Only Chat Completions that have been created
   * with the `store` parameter set to `true` can be modified. Currently, the only
   * supported modification is to update the `metadata` field.
   *
   * @example
   * ```ts
   * const chatCompletion = await client.chat.completions.update(
   *   'completion_id',
   *   { metadata: { foo: 'string' } },
   * );
   * ```
   */
  update(completionId, body, options) {
    return this._client.post(`/chat/completions/${completionId}`, { body, ...options });
  }
  list(query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list({}, query);
    }
    return this._client.getAPIList("/chat/completions", ChatCompletionsPage, { query, ...options });
  }
  /**
   * Delete a stored chat completion. Only Chat Completions that have been created
   * with the `store` parameter set to `true` can be deleted.
   *
   * @example
   * ```ts
   * const chatCompletionDeleted =
   *   await client.chat.completions.del('completion_id');
   * ```
   */
  del(completionId, options) {
    return this._client.delete(`/chat/completions/${completionId}`, options);
  }
};
var ChatCompletionsPage = class extends CursorPage {
};
var ChatCompletionStoreMessagesPage = class extends CursorPage {
};
Completions.ChatCompletionsPage = ChatCompletionsPage;
Completions.Messages = Messages;

// node_modules/openai/resources/chat/chat.mjs
var Chat = class extends APIResource {
  constructor() {
    super(...arguments);
    this.completions = new Completions(this._client);
  }
};
Chat.Completions = Completions;
Chat.ChatCompletionsPage = ChatCompletionsPage;

// node_modules/openai/resources/audio/speech.mjs
var Speech = class extends APIResource {
  /**
   * Generates audio from the input text.
   *
   * @example
   * ```ts
   * const speech = await client.audio.speech.create({
   *   input: 'input',
   *   model: 'string',
   *   voice: 'ash',
   * });
   *
   * const content = await speech.blob();
   * console.log(content);
   * ```
   */
  create(body, options) {
    return this._client.post("/audio/speech", {
      body,
      ...options,
      headers: { Accept: "application/octet-stream", ...options == null ? void 0 : options.headers },
      __binaryResponse: true
    });
  }
};

// node_modules/openai/resources/audio/transcriptions.mjs
var Transcriptions = class extends APIResource {
  create(body, options) {
    var _a2;
    return this._client.post("/audio/transcriptions", multipartFormRequestOptions({
      body,
      ...options,
      stream: (_a2 = body.stream) != null ? _a2 : false,
      __metadata: { model: body.model }
    }));
  }
};

// node_modules/openai/resources/audio/translations.mjs
var Translations = class extends APIResource {
  create(body, options) {
    return this._client.post("/audio/translations", multipartFormRequestOptions({ body, ...options, __metadata: { model: body.model } }));
  }
};

// node_modules/openai/resources/audio/audio.mjs
var Audio = class extends APIResource {
  constructor() {
    super(...arguments);
    this.transcriptions = new Transcriptions(this._client);
    this.translations = new Translations(this._client);
    this.speech = new Speech(this._client);
  }
};
Audio.Transcriptions = Transcriptions;
Audio.Translations = Translations;
Audio.Speech = Speech;

// node_modules/openai/resources/batches.mjs
var Batches = class extends APIResource {
  /**
   * Creates and executes a batch from an uploaded file of requests
   */
  create(body, options) {
    return this._client.post("/batches", { body, ...options });
  }
  /**
   * Retrieves a batch.
   */
  retrieve(batchId, options) {
    return this._client.get(`/batches/${batchId}`, options);
  }
  list(query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list({}, query);
    }
    return this._client.getAPIList("/batches", BatchesPage, { query, ...options });
  }
  /**
   * Cancels an in-progress batch. The batch will be in status `cancelling` for up to
   * 10 minutes, before changing to `cancelled`, where it will have partial results
   * (if any) available in the output file.
   */
  cancel(batchId, options) {
    return this._client.post(`/batches/${batchId}/cancel`, options);
  }
};
var BatchesPage = class extends CursorPage {
};
Batches.BatchesPage = BatchesPage;

// node_modules/openai/lib/EventStream.mjs
var __classPrivateFieldSet3 = function(receiver, state, value, kind2, f) {
  if (kind2 === "m")
    throw new TypeError("Private method is not writable");
  if (kind2 === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind2 === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet3 = function(receiver, state, kind2, f) {
  if (kind2 === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind2 === "m" ? f : kind2 === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _EventStream_instances;
var _EventStream_connectedPromise;
var _EventStream_resolveConnectedPromise;
var _EventStream_rejectConnectedPromise;
var _EventStream_endPromise;
var _EventStream_resolveEndPromise;
var _EventStream_rejectEndPromise;
var _EventStream_listeners;
var _EventStream_ended;
var _EventStream_errored;
var _EventStream_aborted;
var _EventStream_catchingPromiseCreated;
var _EventStream_handleError;
var EventStream = class {
  constructor() {
    _EventStream_instances.add(this);
    this.controller = new AbortController();
    _EventStream_connectedPromise.set(this, void 0);
    _EventStream_resolveConnectedPromise.set(this, () => {
    });
    _EventStream_rejectConnectedPromise.set(this, () => {
    });
    _EventStream_endPromise.set(this, void 0);
    _EventStream_resolveEndPromise.set(this, () => {
    });
    _EventStream_rejectEndPromise.set(this, () => {
    });
    _EventStream_listeners.set(this, {});
    _EventStream_ended.set(this, false);
    _EventStream_errored.set(this, false);
    _EventStream_aborted.set(this, false);
    _EventStream_catchingPromiseCreated.set(this, false);
    __classPrivateFieldSet3(this, _EventStream_connectedPromise, new Promise((resolve, reject) => {
      __classPrivateFieldSet3(this, _EventStream_resolveConnectedPromise, resolve, "f");
      __classPrivateFieldSet3(this, _EventStream_rejectConnectedPromise, reject, "f");
    }), "f");
    __classPrivateFieldSet3(this, _EventStream_endPromise, new Promise((resolve, reject) => {
      __classPrivateFieldSet3(this, _EventStream_resolveEndPromise, resolve, "f");
      __classPrivateFieldSet3(this, _EventStream_rejectEndPromise, reject, "f");
    }), "f");
    __classPrivateFieldGet3(this, _EventStream_connectedPromise, "f").catch(() => {
    });
    __classPrivateFieldGet3(this, _EventStream_endPromise, "f").catch(() => {
    });
  }
  _run(executor) {
    setTimeout(() => {
      executor().then(() => {
        this._emitFinal();
        this._emit("end");
      }, __classPrivateFieldGet3(this, _EventStream_instances, "m", _EventStream_handleError).bind(this));
    }, 0);
  }
  _connected() {
    if (this.ended)
      return;
    __classPrivateFieldGet3(this, _EventStream_resolveConnectedPromise, "f").call(this);
    this._emit("connect");
  }
  get ended() {
    return __classPrivateFieldGet3(this, _EventStream_ended, "f");
  }
  get errored() {
    return __classPrivateFieldGet3(this, _EventStream_errored, "f");
  }
  get aborted() {
    return __classPrivateFieldGet3(this, _EventStream_aborted, "f");
  }
  abort() {
    this.controller.abort();
  }
  /**
   * Adds the listener function to the end of the listeners array for the event.
   * No checks are made to see if the listener has already been added. Multiple calls passing
   * the same combination of event and listener will result in the listener being added, and
   * called, multiple times.
   * @returns this ChatCompletionStream, so that calls can be chained
   */
  on(event, listener) {
    const listeners = __classPrivateFieldGet3(this, _EventStream_listeners, "f")[event] || (__classPrivateFieldGet3(this, _EventStream_listeners, "f")[event] = []);
    listeners.push({ listener });
    return this;
  }
  /**
   * Removes the specified listener from the listener array for the event.
   * off() will remove, at most, one instance of a listener from the listener array. If any single
   * listener has been added multiple times to the listener array for the specified event, then
   * off() must be called multiple times to remove each instance.
   * @returns this ChatCompletionStream, so that calls can be chained
   */
  off(event, listener) {
    const listeners = __classPrivateFieldGet3(this, _EventStream_listeners, "f")[event];
    if (!listeners)
      return this;
    const index = listeners.findIndex((l) => l.listener === listener);
    if (index >= 0)
      listeners.splice(index, 1);
    return this;
  }
  /**
   * Adds a one-time listener function for the event. The next time the event is triggered,
   * this listener is removed and then invoked.
   * @returns this ChatCompletionStream, so that calls can be chained
   */
  once(event, listener) {
    const listeners = __classPrivateFieldGet3(this, _EventStream_listeners, "f")[event] || (__classPrivateFieldGet3(this, _EventStream_listeners, "f")[event] = []);
    listeners.push({ listener, once: true });
    return this;
  }
  /**
   * This is similar to `.once()`, but returns a Promise that resolves the next time
   * the event is triggered, instead of calling a listener callback.
   * @returns a Promise that resolves the next time given event is triggered,
   * or rejects if an error is emitted.  (If you request the 'error' event,
   * returns a promise that resolves with the error).
   *
   * Example:
   *
   *   const message = await stream.emitted('message') // rejects if the stream errors
   */
  emitted(event) {
    return new Promise((resolve, reject) => {
      __classPrivateFieldSet3(this, _EventStream_catchingPromiseCreated, true, "f");
      if (event !== "error")
        this.once("error", reject);
      this.once(event, resolve);
    });
  }
  async done() {
    __classPrivateFieldSet3(this, _EventStream_catchingPromiseCreated, true, "f");
    await __classPrivateFieldGet3(this, _EventStream_endPromise, "f");
  }
  _emit(event, ...args) {
    if (__classPrivateFieldGet3(this, _EventStream_ended, "f")) {
      return;
    }
    if (event === "end") {
      __classPrivateFieldSet3(this, _EventStream_ended, true, "f");
      __classPrivateFieldGet3(this, _EventStream_resolveEndPromise, "f").call(this);
    }
    const listeners = __classPrivateFieldGet3(this, _EventStream_listeners, "f")[event];
    if (listeners) {
      __classPrivateFieldGet3(this, _EventStream_listeners, "f")[event] = listeners.filter((l) => !l.once);
      listeners.forEach(({ listener }) => listener(...args));
    }
    if (event === "abort") {
      const error = args[0];
      if (!__classPrivateFieldGet3(this, _EventStream_catchingPromiseCreated, "f") && !(listeners == null ? void 0 : listeners.length)) {
        Promise.reject(error);
      }
      __classPrivateFieldGet3(this, _EventStream_rejectConnectedPromise, "f").call(this, error);
      __classPrivateFieldGet3(this, _EventStream_rejectEndPromise, "f").call(this, error);
      this._emit("end");
      return;
    }
    if (event === "error") {
      const error = args[0];
      if (!__classPrivateFieldGet3(this, _EventStream_catchingPromiseCreated, "f") && !(listeners == null ? void 0 : listeners.length)) {
        Promise.reject(error);
      }
      __classPrivateFieldGet3(this, _EventStream_rejectConnectedPromise, "f").call(this, error);
      __classPrivateFieldGet3(this, _EventStream_rejectEndPromise, "f").call(this, error);
      this._emit("end");
    }
  }
  _emitFinal() {
  }
};
_EventStream_connectedPromise = /* @__PURE__ */ new WeakMap(), _EventStream_resolveConnectedPromise = /* @__PURE__ */ new WeakMap(), _EventStream_rejectConnectedPromise = /* @__PURE__ */ new WeakMap(), _EventStream_endPromise = /* @__PURE__ */ new WeakMap(), _EventStream_resolveEndPromise = /* @__PURE__ */ new WeakMap(), _EventStream_rejectEndPromise = /* @__PURE__ */ new WeakMap(), _EventStream_listeners = /* @__PURE__ */ new WeakMap(), _EventStream_ended = /* @__PURE__ */ new WeakMap(), _EventStream_errored = /* @__PURE__ */ new WeakMap(), _EventStream_aborted = /* @__PURE__ */ new WeakMap(), _EventStream_catchingPromiseCreated = /* @__PURE__ */ new WeakMap(), _EventStream_instances = /* @__PURE__ */ new WeakSet(), _EventStream_handleError = function _EventStream_handleError2(error) {
  __classPrivateFieldSet3(this, _EventStream_errored, true, "f");
  if (error instanceof Error && error.name === "AbortError") {
    error = new APIUserAbortError();
  }
  if (error instanceof APIUserAbortError) {
    __classPrivateFieldSet3(this, _EventStream_aborted, true, "f");
    return this._emit("abort", error);
  }
  if (error instanceof OpenAIError) {
    return this._emit("error", error);
  }
  if (error instanceof Error) {
    const openAIError = new OpenAIError(error.message);
    openAIError.cause = error;
    return this._emit("error", openAIError);
  }
  return this._emit("error", new OpenAIError(String(error)));
};

// node_modules/openai/lib/AssistantStream.mjs
var __classPrivateFieldGet4 = function(receiver, state, kind2, f) {
  if (kind2 === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind2 === "m" ? f : kind2 === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet4 = function(receiver, state, value, kind2, f) {
  if (kind2 === "m")
    throw new TypeError("Private method is not writable");
  if (kind2 === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind2 === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var _AssistantStream_instances;
var _AssistantStream_events;
var _AssistantStream_runStepSnapshots;
var _AssistantStream_messageSnapshots;
var _AssistantStream_messageSnapshot;
var _AssistantStream_finalRun;
var _AssistantStream_currentContentIndex;
var _AssistantStream_currentContent;
var _AssistantStream_currentToolCallIndex;
var _AssistantStream_currentToolCall;
var _AssistantStream_currentEvent;
var _AssistantStream_currentRunSnapshot;
var _AssistantStream_currentRunStepSnapshot;
var _AssistantStream_addEvent;
var _AssistantStream_endRequest;
var _AssistantStream_handleMessage;
var _AssistantStream_handleRunStep;
var _AssistantStream_handleEvent;
var _AssistantStream_accumulateRunStep;
var _AssistantStream_accumulateMessage;
var _AssistantStream_accumulateContent;
var _AssistantStream_handleRun;
var AssistantStream = class extends EventStream {
  constructor() {
    super(...arguments);
    _AssistantStream_instances.add(this);
    _AssistantStream_events.set(this, []);
    _AssistantStream_runStepSnapshots.set(this, {});
    _AssistantStream_messageSnapshots.set(this, {});
    _AssistantStream_messageSnapshot.set(this, void 0);
    _AssistantStream_finalRun.set(this, void 0);
    _AssistantStream_currentContentIndex.set(this, void 0);
    _AssistantStream_currentContent.set(this, void 0);
    _AssistantStream_currentToolCallIndex.set(this, void 0);
    _AssistantStream_currentToolCall.set(this, void 0);
    _AssistantStream_currentEvent.set(this, void 0);
    _AssistantStream_currentRunSnapshot.set(this, void 0);
    _AssistantStream_currentRunStepSnapshot.set(this, void 0);
  }
  [(_AssistantStream_events = /* @__PURE__ */ new WeakMap(), _AssistantStream_runStepSnapshots = /* @__PURE__ */ new WeakMap(), _AssistantStream_messageSnapshots = /* @__PURE__ */ new WeakMap(), _AssistantStream_messageSnapshot = /* @__PURE__ */ new WeakMap(), _AssistantStream_finalRun = /* @__PURE__ */ new WeakMap(), _AssistantStream_currentContentIndex = /* @__PURE__ */ new WeakMap(), _AssistantStream_currentContent = /* @__PURE__ */ new WeakMap(), _AssistantStream_currentToolCallIndex = /* @__PURE__ */ new WeakMap(), _AssistantStream_currentToolCall = /* @__PURE__ */ new WeakMap(), _AssistantStream_currentEvent = /* @__PURE__ */ new WeakMap(), _AssistantStream_currentRunSnapshot = /* @__PURE__ */ new WeakMap(), _AssistantStream_currentRunStepSnapshot = /* @__PURE__ */ new WeakMap(), _AssistantStream_instances = /* @__PURE__ */ new WeakSet(), Symbol.asyncIterator)]() {
    const pushQueue = [];
    const readQueue = [];
    let done = false;
    this.on("event", (event) => {
      const reader = readQueue.shift();
      if (reader) {
        reader.resolve(event);
      } else {
        pushQueue.push(event);
      }
    });
    this.on("end", () => {
      done = true;
      for (const reader of readQueue) {
        reader.resolve(void 0);
      }
      readQueue.length = 0;
    });
    this.on("abort", (err) => {
      done = true;
      for (const reader of readQueue) {
        reader.reject(err);
      }
      readQueue.length = 0;
    });
    this.on("error", (err) => {
      done = true;
      for (const reader of readQueue) {
        reader.reject(err);
      }
      readQueue.length = 0;
    });
    return {
      next: async () => {
        if (!pushQueue.length) {
          if (done) {
            return { value: void 0, done: true };
          }
          return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((chunk2) => chunk2 ? { value: chunk2, done: false } : { value: void 0, done: true });
        }
        const chunk = pushQueue.shift();
        return { value: chunk, done: false };
      },
      return: async () => {
        this.abort();
        return { value: void 0, done: true };
      }
    };
  }
  static fromReadableStream(stream) {
    const runner = new AssistantStream();
    runner._run(() => runner._fromReadableStream(stream));
    return runner;
  }
  async _fromReadableStream(readableStream, options) {
    var _a2;
    const signal = options == null ? void 0 : options.signal;
    if (signal) {
      if (signal.aborted)
        this.controller.abort();
      signal.addEventListener("abort", () => this.controller.abort());
    }
    this._connected();
    const stream = Stream.fromReadableStream(readableStream, this.controller);
    for await (const event of stream) {
      __classPrivateFieldGet4(this, _AssistantStream_instances, "m", _AssistantStream_addEvent).call(this, event);
    }
    if ((_a2 = stream.controller.signal) == null ? void 0 : _a2.aborted) {
      throw new APIUserAbortError();
    }
    return this._addRun(__classPrivateFieldGet4(this, _AssistantStream_instances, "m", _AssistantStream_endRequest).call(this));
  }
  toReadableStream() {
    const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);
    return stream.toReadableStream();
  }
  static createToolAssistantStream(threadId, runId, runs, params, options) {
    const runner = new AssistantStream();
    runner._run(() => runner._runToolAssistantStream(threadId, runId, runs, params, {
      ...options,
      headers: { ...options == null ? void 0 : options.headers, "X-Stainless-Helper-Method": "stream" }
    }));
    return runner;
  }
  async _createToolAssistantStream(run, threadId, runId, params, options) {
    var _a2;
    const signal = options == null ? void 0 : options.signal;
    if (signal) {
      if (signal.aborted)
        this.controller.abort();
      signal.addEventListener("abort", () => this.controller.abort());
    }
    const body = { ...params, stream: true };
    const stream = await run.submitToolOutputs(threadId, runId, body, {
      ...options,
      signal: this.controller.signal
    });
    this._connected();
    for await (const event of stream) {
      __classPrivateFieldGet4(this, _AssistantStream_instances, "m", _AssistantStream_addEvent).call(this, event);
    }
    if ((_a2 = stream.controller.signal) == null ? void 0 : _a2.aborted) {
      throw new APIUserAbortError();
    }
    return this._addRun(__classPrivateFieldGet4(this, _AssistantStream_instances, "m", _AssistantStream_endRequest).call(this));
  }
  static createThreadAssistantStream(params, thread, options) {
    const runner = new AssistantStream();
    runner._run(() => runner._threadAssistantStream(params, thread, {
      ...options,
      headers: { ...options == null ? void 0 : options.headers, "X-Stainless-Helper-Method": "stream" }
    }));
    return runner;
  }
  static createAssistantStream(threadId, runs, params, options) {
    const runner = new AssistantStream();
    runner._run(() => runner._runAssistantStream(threadId, runs, params, {
      ...options,
      headers: { ...options == null ? void 0 : options.headers, "X-Stainless-Helper-Method": "stream" }
    }));
    return runner;
  }
  currentEvent() {
    return __classPrivateFieldGet4(this, _AssistantStream_currentEvent, "f");
  }
  currentRun() {
    return __classPrivateFieldGet4(this, _AssistantStream_currentRunSnapshot, "f");
  }
  currentMessageSnapshot() {
    return __classPrivateFieldGet4(this, _AssistantStream_messageSnapshot, "f");
  }
  currentRunStepSnapshot() {
    return __classPrivateFieldGet4(this, _AssistantStream_currentRunStepSnapshot, "f");
  }
  async finalRunSteps() {
    await this.done();
    return Object.values(__classPrivateFieldGet4(this, _AssistantStream_runStepSnapshots, "f"));
  }
  async finalMessages() {
    await this.done();
    return Object.values(__classPrivateFieldGet4(this, _AssistantStream_messageSnapshots, "f"));
  }
  async finalRun() {
    await this.done();
    if (!__classPrivateFieldGet4(this, _AssistantStream_finalRun, "f"))
      throw Error("Final run was not received.");
    return __classPrivateFieldGet4(this, _AssistantStream_finalRun, "f");
  }
  async _createThreadAssistantStream(thread, params, options) {
    var _a2;
    const signal = options == null ? void 0 : options.signal;
    if (signal) {
      if (signal.aborted)
        this.controller.abort();
      signal.addEventListener("abort", () => this.controller.abort());
    }
    const body = { ...params, stream: true };
    const stream = await thread.createAndRun(body, { ...options, signal: this.controller.signal });
    this._connected();
    for await (const event of stream) {
      __classPrivateFieldGet4(this, _AssistantStream_instances, "m", _AssistantStream_addEvent).call(this, event);
    }
    if ((_a2 = stream.controller.signal) == null ? void 0 : _a2.aborted) {
      throw new APIUserAbortError();
    }
    return this._addRun(__classPrivateFieldGet4(this, _AssistantStream_instances, "m", _AssistantStream_endRequest).call(this));
  }
  async _createAssistantStream(run, threadId, params, options) {
    var _a2;
    const signal = options == null ? void 0 : options.signal;
    if (signal) {
      if (signal.aborted)
        this.controller.abort();
      signal.addEventListener("abort", () => this.controller.abort());
    }
    const body = { ...params, stream: true };
    const stream = await run.create(threadId, body, { ...options, signal: this.controller.signal });
    this._connected();
    for await (const event of stream) {
      __classPrivateFieldGet4(this, _AssistantStream_instances, "m", _AssistantStream_addEvent).call(this, event);
    }
    if ((_a2 = stream.controller.signal) == null ? void 0 : _a2.aborted) {
      throw new APIUserAbortError();
    }
    return this._addRun(__classPrivateFieldGet4(this, _AssistantStream_instances, "m", _AssistantStream_endRequest).call(this));
  }
  static accumulateDelta(acc, delta) {
    for (const [key, deltaValue] of Object.entries(delta)) {
      if (!acc.hasOwnProperty(key)) {
        acc[key] = deltaValue;
        continue;
      }
      let accValue = acc[key];
      if (accValue === null || accValue === void 0) {
        acc[key] = deltaValue;
        continue;
      }
      if (key === "index" || key === "type") {
        acc[key] = deltaValue;
        continue;
      }
      if (typeof accValue === "string" && typeof deltaValue === "string") {
        accValue += deltaValue;
      } else if (typeof accValue === "number" && typeof deltaValue === "number") {
        accValue += deltaValue;
      } else if (isObj(accValue) && isObj(deltaValue)) {
        accValue = this.accumulateDelta(accValue, deltaValue);
      } else if (Array.isArray(accValue) && Array.isArray(deltaValue)) {
        if (accValue.every((x) => typeof x === "string" || typeof x === "number")) {
          accValue.push(...deltaValue);
          continue;
        }
        for (const deltaEntry of deltaValue) {
          if (!isObj(deltaEntry)) {
            throw new Error(`Expected array delta entry to be an object but got: ${deltaEntry}`);
          }
          const index = deltaEntry["index"];
          if (index == null) {
            console.error(deltaEntry);
            throw new Error("Expected array delta entry to have an `index` property");
          }
          if (typeof index !== "number") {
            throw new Error(`Expected array delta entry \`index\` property to be a number but got ${index}`);
          }
          const accEntry = accValue[index];
          if (accEntry == null) {
            accValue.push(deltaEntry);
          } else {
            accValue[index] = this.accumulateDelta(accEntry, deltaEntry);
          }
        }
        continue;
      } else {
        throw Error(`Unhandled record type: ${key}, deltaValue: ${deltaValue}, accValue: ${accValue}`);
      }
      acc[key] = accValue;
    }
    return acc;
  }
  _addRun(run) {
    return run;
  }
  async _threadAssistantStream(params, thread, options) {
    return await this._createThreadAssistantStream(thread, params, options);
  }
  async _runAssistantStream(threadId, runs, params, options) {
    return await this._createAssistantStream(runs, threadId, params, options);
  }
  async _runToolAssistantStream(threadId, runId, runs, params, options) {
    return await this._createToolAssistantStream(runs, threadId, runId, params, options);
  }
};
_AssistantStream_addEvent = function _AssistantStream_addEvent2(event) {
  if (this.ended)
    return;
  __classPrivateFieldSet4(this, _AssistantStream_currentEvent, event, "f");
  __classPrivateFieldGet4(this, _AssistantStream_instances, "m", _AssistantStream_handleEvent).call(this, event);
  switch (event.event) {
    case "thread.created":
      break;
    case "thread.run.created":
    case "thread.run.queued":
    case "thread.run.in_progress":
    case "thread.run.requires_action":
    case "thread.run.completed":
    case "thread.run.incomplete":
    case "thread.run.failed":
    case "thread.run.cancelling":
    case "thread.run.cancelled":
    case "thread.run.expired":
      __classPrivateFieldGet4(this, _AssistantStream_instances, "m", _AssistantStream_handleRun).call(this, event);
      break;
    case "thread.run.step.created":
    case "thread.run.step.in_progress":
    case "thread.run.step.delta":
    case "thread.run.step.completed":
    case "thread.run.step.failed":
    case "thread.run.step.cancelled":
    case "thread.run.step.expired":
      __classPrivateFieldGet4(this, _AssistantStream_instances, "m", _AssistantStream_handleRunStep).call(this, event);
      break;
    case "thread.message.created":
    case "thread.message.in_progress":
    case "thread.message.delta":
    case "thread.message.completed":
    case "thread.message.incomplete":
      __classPrivateFieldGet4(this, _AssistantStream_instances, "m", _AssistantStream_handleMessage).call(this, event);
      break;
    case "error":
      throw new Error("Encountered an error event in event processing - errors should be processed earlier");
    default:
      assertNever(event);
  }
}, _AssistantStream_endRequest = function _AssistantStream_endRequest2() {
  if (this.ended) {
    throw new OpenAIError(`stream has ended, this shouldn't happen`);
  }
  if (!__classPrivateFieldGet4(this, _AssistantStream_finalRun, "f"))
    throw Error("Final run has not been received");
  return __classPrivateFieldGet4(this, _AssistantStream_finalRun, "f");
}, _AssistantStream_handleMessage = function _AssistantStream_handleMessage2(event) {
  const [accumulatedMessage, newContent] = __classPrivateFieldGet4(this, _AssistantStream_instances, "m", _AssistantStream_accumulateMessage).call(this, event, __classPrivateFieldGet4(this, _AssistantStream_messageSnapshot, "f"));
  __classPrivateFieldSet4(this, _AssistantStream_messageSnapshot, accumulatedMessage, "f");
  __classPrivateFieldGet4(this, _AssistantStream_messageSnapshots, "f")[accumulatedMessage.id] = accumulatedMessage;
  for (const content of newContent) {
    const snapshotContent = accumulatedMessage.content[content.index];
    if ((snapshotContent == null ? void 0 : snapshotContent.type) == "text") {
      this._emit("textCreated", snapshotContent.text);
    }
  }
  switch (event.event) {
    case "thread.message.created":
      this._emit("messageCreated", event.data);
      break;
    case "thread.message.in_progress":
      break;
    case "thread.message.delta":
      this._emit("messageDelta", event.data.delta, accumulatedMessage);
      if (event.data.delta.content) {
        for (const content of event.data.delta.content) {
          if (content.type == "text" && content.text) {
            let textDelta = content.text;
            let snapshot = accumulatedMessage.content[content.index];
            if (snapshot && snapshot.type == "text") {
              this._emit("textDelta", textDelta, snapshot.text);
            } else {
              throw Error("The snapshot associated with this text delta is not text or missing");
            }
          }
          if (content.index != __classPrivateFieldGet4(this, _AssistantStream_currentContentIndex, "f")) {
            if (__classPrivateFieldGet4(this, _AssistantStream_currentContent, "f")) {
              switch (__classPrivateFieldGet4(this, _AssistantStream_currentContent, "f").type) {
                case "text":
                  this._emit("textDone", __classPrivateFieldGet4(this, _AssistantStream_currentContent, "f").text, __classPrivateFieldGet4(this, _AssistantStream_messageSnapshot, "f"));
                  break;
                case "image_file":
                  this._emit("imageFileDone", __classPrivateFieldGet4(this, _AssistantStream_currentContent, "f").image_file, __classPrivateFieldGet4(this, _AssistantStream_messageSnapshot, "f"));
                  break;
              }
            }
            __classPrivateFieldSet4(this, _AssistantStream_currentContentIndex, content.index, "f");
          }
          __classPrivateFieldSet4(this, _AssistantStream_currentContent, accumulatedMessage.content[content.index], "f");
        }
      }
      break;
    case "thread.message.completed":
    case "thread.message.incomplete":
      if (__classPrivateFieldGet4(this, _AssistantStream_currentContentIndex, "f") !== void 0) {
        const currentContent = event.data.content[__classPrivateFieldGet4(this, _AssistantStream_currentContentIndex, "f")];
        if (currentContent) {
          switch (currentContent.type) {
            case "image_file":
              this._emit("imageFileDone", currentContent.image_file, __classPrivateFieldGet4(this, _AssistantStream_messageSnapshot, "f"));
              break;
            case "text":
              this._emit("textDone", currentContent.text, __classPrivateFieldGet4(this, _AssistantStream_messageSnapshot, "f"));
              break;
          }
        }
      }
      if (__classPrivateFieldGet4(this, _AssistantStream_messageSnapshot, "f")) {
        this._emit("messageDone", event.data);
      }
      __classPrivateFieldSet4(this, _AssistantStream_messageSnapshot, void 0, "f");
  }
}, _AssistantStream_handleRunStep = function _AssistantStream_handleRunStep2(event) {
  const accumulatedRunStep = __classPrivateFieldGet4(this, _AssistantStream_instances, "m", _AssistantStream_accumulateRunStep).call(this, event);
  __classPrivateFieldSet4(this, _AssistantStream_currentRunStepSnapshot, accumulatedRunStep, "f");
  switch (event.event) {
    case "thread.run.step.created":
      this._emit("runStepCreated", event.data);
      break;
    case "thread.run.step.delta":
      const delta = event.data.delta;
      if (delta.step_details && delta.step_details.type == "tool_calls" && delta.step_details.tool_calls && accumulatedRunStep.step_details.type == "tool_calls") {
        for (const toolCall of delta.step_details.tool_calls) {
          if (toolCall.index == __classPrivateFieldGet4(this, _AssistantStream_currentToolCallIndex, "f")) {
            this._emit("toolCallDelta", toolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index]);
          } else {
            if (__classPrivateFieldGet4(this, _AssistantStream_currentToolCall, "f")) {
              this._emit("toolCallDone", __classPrivateFieldGet4(this, _AssistantStream_currentToolCall, "f"));
            }
            __classPrivateFieldSet4(this, _AssistantStream_currentToolCallIndex, toolCall.index, "f");
            __classPrivateFieldSet4(this, _AssistantStream_currentToolCall, accumulatedRunStep.step_details.tool_calls[toolCall.index], "f");
            if (__classPrivateFieldGet4(this, _AssistantStream_currentToolCall, "f"))
              this._emit("toolCallCreated", __classPrivateFieldGet4(this, _AssistantStream_currentToolCall, "f"));
          }
        }
      }
      this._emit("runStepDelta", event.data.delta, accumulatedRunStep);
      break;
    case "thread.run.step.completed":
    case "thread.run.step.failed":
    case "thread.run.step.cancelled":
    case "thread.run.step.expired":
      __classPrivateFieldSet4(this, _AssistantStream_currentRunStepSnapshot, void 0, "f");
      const details = event.data.step_details;
      if (details.type == "tool_calls") {
        if (__classPrivateFieldGet4(this, _AssistantStream_currentToolCall, "f")) {
          this._emit("toolCallDone", __classPrivateFieldGet4(this, _AssistantStream_currentToolCall, "f"));
          __classPrivateFieldSet4(this, _AssistantStream_currentToolCall, void 0, "f");
        }
      }
      this._emit("runStepDone", event.data, accumulatedRunStep);
      break;
    case "thread.run.step.in_progress":
      break;
  }
}, _AssistantStream_handleEvent = function _AssistantStream_handleEvent2(event) {
  __classPrivateFieldGet4(this, _AssistantStream_events, "f").push(event);
  this._emit("event", event);
}, _AssistantStream_accumulateRunStep = function _AssistantStream_accumulateRunStep2(event) {
  switch (event.event) {
    case "thread.run.step.created":
      __classPrivateFieldGet4(this, _AssistantStream_runStepSnapshots, "f")[event.data.id] = event.data;
      return event.data;
    case "thread.run.step.delta":
      let snapshot = __classPrivateFieldGet4(this, _AssistantStream_runStepSnapshots, "f")[event.data.id];
      if (!snapshot) {
        throw Error("Received a RunStepDelta before creation of a snapshot");
      }
      let data = event.data;
      if (data.delta) {
        const accumulated = AssistantStream.accumulateDelta(snapshot, data.delta);
        __classPrivateFieldGet4(this, _AssistantStream_runStepSnapshots, "f")[event.data.id] = accumulated;
      }
      return __classPrivateFieldGet4(this, _AssistantStream_runStepSnapshots, "f")[event.data.id];
    case "thread.run.step.completed":
    case "thread.run.step.failed":
    case "thread.run.step.cancelled":
    case "thread.run.step.expired":
    case "thread.run.step.in_progress":
      __classPrivateFieldGet4(this, _AssistantStream_runStepSnapshots, "f")[event.data.id] = event.data;
      break;
  }
  if (__classPrivateFieldGet4(this, _AssistantStream_runStepSnapshots, "f")[event.data.id])
    return __classPrivateFieldGet4(this, _AssistantStream_runStepSnapshots, "f")[event.data.id];
  throw new Error("No snapshot available");
}, _AssistantStream_accumulateMessage = function _AssistantStream_accumulateMessage2(event, snapshot) {
  let newContent = [];
  switch (event.event) {
    case "thread.message.created":
      return [event.data, newContent];
    case "thread.message.delta":
      if (!snapshot) {
        throw Error("Received a delta with no existing snapshot (there should be one from message creation)");
      }
      let data = event.data;
      if (data.delta.content) {
        for (const contentElement of data.delta.content) {
          if (contentElement.index in snapshot.content) {
            let currentContent = snapshot.content[contentElement.index];
            snapshot.content[contentElement.index] = __classPrivateFieldGet4(this, _AssistantStream_instances, "m", _AssistantStream_accumulateContent).call(this, contentElement, currentContent);
          } else {
            snapshot.content[contentElement.index] = contentElement;
            newContent.push(contentElement);
          }
        }
      }
      return [snapshot, newContent];
    case "thread.message.in_progress":
    case "thread.message.completed":
    case "thread.message.incomplete":
      if (snapshot) {
        return [snapshot, newContent];
      } else {
        throw Error("Received thread message event with no existing snapshot");
      }
  }
  throw Error("Tried to accumulate a non-message event");
}, _AssistantStream_accumulateContent = function _AssistantStream_accumulateContent2(contentElement, currentContent) {
  return AssistantStream.accumulateDelta(currentContent, contentElement);
}, _AssistantStream_handleRun = function _AssistantStream_handleRun2(event) {
  __classPrivateFieldSet4(this, _AssistantStream_currentRunSnapshot, event.data, "f");
  switch (event.event) {
    case "thread.run.created":
      break;
    case "thread.run.queued":
      break;
    case "thread.run.in_progress":
      break;
    case "thread.run.requires_action":
    case "thread.run.cancelled":
    case "thread.run.failed":
    case "thread.run.completed":
    case "thread.run.expired":
      __classPrivateFieldSet4(this, _AssistantStream_finalRun, event.data, "f");
      if (__classPrivateFieldGet4(this, _AssistantStream_currentToolCall, "f")) {
        this._emit("toolCallDone", __classPrivateFieldGet4(this, _AssistantStream_currentToolCall, "f"));
        __classPrivateFieldSet4(this, _AssistantStream_currentToolCall, void 0, "f");
      }
      break;
    case "thread.run.cancelling":
      break;
  }
};
function assertNever(_x) {
}

// node_modules/openai/resources/beta/assistants.mjs
var Assistants = class extends APIResource {
  /**
   * Create an assistant with a model and instructions.
   *
   * @example
   * ```ts
   * const assistant = await client.beta.assistants.create({
   *   model: 'gpt-4o',
   * });
   * ```
   */
  create(body, options) {
    return this._client.post("/assistants", {
      body,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * Retrieves an assistant.
   *
   * @example
   * ```ts
   * const assistant = await client.beta.assistants.retrieve(
   *   'assistant_id',
   * );
   * ```
   */
  retrieve(assistantId, options) {
    return this._client.get(`/assistants/${assistantId}`, {
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * Modifies an assistant.
   *
   * @example
   * ```ts
   * const assistant = await client.beta.assistants.update(
   *   'assistant_id',
   * );
   * ```
   */
  update(assistantId, body, options) {
    return this._client.post(`/assistants/${assistantId}`, {
      body,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  list(query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list({}, query);
    }
    return this._client.getAPIList("/assistants", AssistantsPage, {
      query,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * Delete an assistant.
   *
   * @example
   * ```ts
   * const assistantDeleted = await client.beta.assistants.del(
   *   'assistant_id',
   * );
   * ```
   */
  del(assistantId, options) {
    return this._client.delete(`/assistants/${assistantId}`, {
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
};
var AssistantsPage = class extends CursorPage {
};
Assistants.AssistantsPage = AssistantsPage;

// node_modules/openai/lib/RunnableFunction.mjs
function isRunnableFunctionWithParse(fn) {
  return typeof fn.parse === "function";
}

// node_modules/openai/lib/chatCompletionUtils.mjs
var isAssistantMessage = (message) => {
  return (message == null ? void 0 : message.role) === "assistant";
};
var isFunctionMessage = (message) => {
  return (message == null ? void 0 : message.role) === "function";
};
var isToolMessage = (message) => {
  return (message == null ? void 0 : message.role) === "tool";
};

// node_modules/openai/lib/parser.mjs
function isAutoParsableResponseFormat(response_format) {
  return (response_format == null ? void 0 : response_format["$brand"]) === "auto-parseable-response-format";
}
function isAutoParsableTool(tool) {
  return (tool == null ? void 0 : tool["$brand"]) === "auto-parseable-tool";
}
function maybeParseChatCompletion(completion, params) {
  if (!params || !hasAutoParseableInput(params)) {
    return {
      ...completion,
      choices: completion.choices.map((choice) => ({
        ...choice,
        message: {
          ...choice.message,
          parsed: null,
          ...choice.message.tool_calls ? {
            tool_calls: choice.message.tool_calls
          } : void 0
        }
      }))
    };
  }
  return parseChatCompletion(completion, params);
}
function parseChatCompletion(completion, params) {
  const choices = completion.choices.map((choice) => {
    var _a2, _b;
    if (choice.finish_reason === "length") {
      throw new LengthFinishReasonError();
    }
    if (choice.finish_reason === "content_filter") {
      throw new ContentFilterFinishReasonError();
    }
    return {
      ...choice,
      message: {
        ...choice.message,
        ...choice.message.tool_calls ? {
          tool_calls: (_b = (_a2 = choice.message.tool_calls) == null ? void 0 : _a2.map((toolCall) => parseToolCall(params, toolCall))) != null ? _b : void 0
        } : void 0,
        parsed: choice.message.content && !choice.message.refusal ? parseResponseFormat(params, choice.message.content) : null
      }
    };
  });
  return { ...completion, choices };
}
function parseResponseFormat(params, content) {
  var _a2, _b;
  if (((_a2 = params.response_format) == null ? void 0 : _a2.type) !== "json_schema") {
    return null;
  }
  if (((_b = params.response_format) == null ? void 0 : _b.type) === "json_schema") {
    if ("$parseRaw" in params.response_format) {
      const response_format = params.response_format;
      return response_format.$parseRaw(content);
    }
    return JSON.parse(content);
  }
  return null;
}
function parseToolCall(params, toolCall) {
  var _a2;
  const inputTool = (_a2 = params.tools) == null ? void 0 : _a2.find((inputTool2) => {
    var _a3;
    return ((_a3 = inputTool2.function) == null ? void 0 : _a3.name) === toolCall.function.name;
  });
  return {
    ...toolCall,
    function: {
      ...toolCall.function,
      parsed_arguments: isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.function.arguments) : (inputTool == null ? void 0 : inputTool.function.strict) ? JSON.parse(toolCall.function.arguments) : null
    }
  };
}
function shouldParseToolCall(params, toolCall) {
  var _a2;
  if (!params) {
    return false;
  }
  const inputTool = (_a2 = params.tools) == null ? void 0 : _a2.find((inputTool2) => {
    var _a3;
    return ((_a3 = inputTool2.function) == null ? void 0 : _a3.name) === toolCall.function.name;
  });
  return isAutoParsableTool(inputTool) || (inputTool == null ? void 0 : inputTool.function.strict) || false;
}
function hasAutoParseableInput(params) {
  var _a2, _b;
  if (isAutoParsableResponseFormat(params.response_format)) {
    return true;
  }
  return (_b = (_a2 = params.tools) == null ? void 0 : _a2.some((t) => isAutoParsableTool(t) || t.type === "function" && t.function.strict === true)) != null ? _b : false;
}
function validateInputTools(tools) {
  for (const tool of tools != null ? tools : []) {
    if (tool.type !== "function") {
      throw new OpenAIError(`Currently only \`function\` tool types support auto-parsing; Received \`${tool.type}\``);
    }
    if (tool.function.strict !== true) {
      throw new OpenAIError(`The \`${tool.function.name}\` tool is not marked with \`strict: true\`. Only strict function tools can be auto-parsed`);
    }
  }
}

// node_modules/openai/lib/AbstractChatCompletionRunner.mjs
var __classPrivateFieldGet5 = function(receiver, state, kind2, f) {
  if (kind2 === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind2 === "m" ? f : kind2 === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AbstractChatCompletionRunner_instances;
var _AbstractChatCompletionRunner_getFinalContent;
var _AbstractChatCompletionRunner_getFinalMessage;
var _AbstractChatCompletionRunner_getFinalFunctionCall;
var _AbstractChatCompletionRunner_getFinalFunctionCallResult;
var _AbstractChatCompletionRunner_calculateTotalUsage;
var _AbstractChatCompletionRunner_validateParams;
var _AbstractChatCompletionRunner_stringifyFunctionCallResult;
var DEFAULT_MAX_CHAT_COMPLETIONS = 10;
var AbstractChatCompletionRunner = class extends EventStream {
  constructor() {
    super(...arguments);
    _AbstractChatCompletionRunner_instances.add(this);
    this._chatCompletions = [];
    this.messages = [];
  }
  _addChatCompletion(chatCompletion) {
    var _a2;
    this._chatCompletions.push(chatCompletion);
    this._emit("chatCompletion", chatCompletion);
    const message = (_a2 = chatCompletion.choices[0]) == null ? void 0 : _a2.message;
    if (message)
      this._addMessage(message);
    return chatCompletion;
  }
  _addMessage(message, emit = true) {
    if (!("content" in message))
      message.content = null;
    this.messages.push(message);
    if (emit) {
      this._emit("message", message);
      if ((isFunctionMessage(message) || isToolMessage(message)) && message.content) {
        this._emit("functionCallResult", message.content);
      } else if (isAssistantMessage(message) && message.function_call) {
        this._emit("functionCall", message.function_call);
      } else if (isAssistantMessage(message) && message.tool_calls) {
        for (const tool_call of message.tool_calls) {
          if (tool_call.type === "function") {
            this._emit("functionCall", tool_call.function);
          }
        }
      }
    }
  }
  /**
   * @returns a promise that resolves with the final ChatCompletion, or rejects
   * if an error occurred or the stream ended prematurely without producing a ChatCompletion.
   */
  async finalChatCompletion() {
    await this.done();
    const completion = this._chatCompletions[this._chatCompletions.length - 1];
    if (!completion)
      throw new OpenAIError("stream ended without producing a ChatCompletion");
    return completion;
  }
  /**
   * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects
   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.
   */
  async finalContent() {
    await this.done();
    return __classPrivateFieldGet5(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalContent).call(this);
  }
  /**
   * @returns a promise that resolves with the the final assistant ChatCompletionMessage response,
   * or rejects if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.
   */
  async finalMessage() {
    await this.done();
    return __classPrivateFieldGet5(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalMessage).call(this);
  }
  /**
   * @returns a promise that resolves with the content of the final FunctionCall, or rejects
   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.
   */
  async finalFunctionCall() {
    await this.done();
    return __classPrivateFieldGet5(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);
  }
  async finalFunctionCallResult() {
    await this.done();
    return __classPrivateFieldGet5(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);
  }
  async totalUsage() {
    await this.done();
    return __classPrivateFieldGet5(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_calculateTotalUsage).call(this);
  }
  allChatCompletions() {
    return [...this._chatCompletions];
  }
  _emitFinal() {
    const completion = this._chatCompletions[this._chatCompletions.length - 1];
    if (completion)
      this._emit("finalChatCompletion", completion);
    const finalMessage = __classPrivateFieldGet5(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalMessage).call(this);
    if (finalMessage)
      this._emit("finalMessage", finalMessage);
    const finalContent = __classPrivateFieldGet5(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalContent).call(this);
    if (finalContent)
      this._emit("finalContent", finalContent);
    const finalFunctionCall = __classPrivateFieldGet5(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);
    if (finalFunctionCall)
      this._emit("finalFunctionCall", finalFunctionCall);
    const finalFunctionCallResult = __classPrivateFieldGet5(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);
    if (finalFunctionCallResult != null)
      this._emit("finalFunctionCallResult", finalFunctionCallResult);
    if (this._chatCompletions.some((c) => c.usage)) {
      this._emit("totalUsage", __classPrivateFieldGet5(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_calculateTotalUsage).call(this));
    }
  }
  async _createChatCompletion(client, params, options) {
    const signal = options == null ? void 0 : options.signal;
    if (signal) {
      if (signal.aborted)
        this.controller.abort();
      signal.addEventListener("abort", () => this.controller.abort());
    }
    __classPrivateFieldGet5(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_validateParams).call(this, params);
    const chatCompletion = await client.chat.completions.create({ ...params, stream: false }, { ...options, signal: this.controller.signal });
    this._connected();
    return this._addChatCompletion(parseChatCompletion(chatCompletion, params));
  }
  async _runChatCompletion(client, params, options) {
    for (const message of params.messages) {
      this._addMessage(message, false);
    }
    return await this._createChatCompletion(client, params, options);
  }
  async _runFunctions(client, params, options) {
    var _a2;
    const role = "function";
    const { function_call = "auto", stream, ...restParams } = params;
    const singleFunctionToCall = typeof function_call !== "string" && (function_call == null ? void 0 : function_call.name);
    const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};
    const functionsByName = {};
    for (const f of params.functions) {
      functionsByName[f.name || f.function.name] = f;
    }
    const functions = params.functions.map((f) => ({
      name: f.name || f.function.name,
      parameters: f.parameters,
      description: f.description
    }));
    for (const message of params.messages) {
      this._addMessage(message, false);
    }
    for (let i = 0; i < maxChatCompletions; ++i) {
      const chatCompletion = await this._createChatCompletion(client, {
        ...restParams,
        function_call,
        functions,
        messages: [...this.messages]
      }, options);
      const message = (_a2 = chatCompletion.choices[0]) == null ? void 0 : _a2.message;
      if (!message) {
        throw new OpenAIError(`missing message in ChatCompletion response`);
      }
      if (!message.function_call)
        return;
      const { name, arguments: args } = message.function_call;
      const fn = functionsByName[name];
      if (!fn) {
        const content2 = `Invalid function_call: ${JSON.stringify(name)}. Available options are: ${functions.map((f) => JSON.stringify(f.name)).join(", ")}. Please try again`;
        this._addMessage({ role, name, content: content2 });
        continue;
      } else if (singleFunctionToCall && singleFunctionToCall !== name) {
        const content2 = `Invalid function_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;
        this._addMessage({ role, name, content: content2 });
        continue;
      }
      let parsed;
      try {
        parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;
      } catch (error) {
        this._addMessage({
          role,
          name,
          content: error instanceof Error ? error.message : String(error)
        });
        continue;
      }
      const rawContent = await fn.function(parsed, this);
      const content = __classPrivateFieldGet5(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);
      this._addMessage({ role, name, content });
      if (singleFunctionToCall)
        return;
    }
  }
  async _runTools(client, params, options) {
    var _a2, _b, _c;
    const role = "tool";
    const { tool_choice = "auto", stream, ...restParams } = params;
    const singleFunctionToCall = typeof tool_choice !== "string" && ((_a2 = tool_choice == null ? void 0 : tool_choice.function) == null ? void 0 : _a2.name);
    const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};
    const inputTools = params.tools.map((tool) => {
      if (isAutoParsableTool(tool)) {
        if (!tool.$callback) {
          throw new OpenAIError("Tool given to `.runTools()` that does not have an associated function");
        }
        return {
          type: "function",
          function: {
            function: tool.$callback,
            name: tool.function.name,
            description: tool.function.description || "",
            parameters: tool.function.parameters,
            parse: tool.$parseRaw,
            strict: true
          }
        };
      }
      return tool;
    });
    const functionsByName = {};
    for (const f of inputTools) {
      if (f.type === "function") {
        functionsByName[f.function.name || f.function.function.name] = f.function;
      }
    }
    const tools = "tools" in params ? inputTools.map((t) => t.type === "function" ? {
      type: "function",
      function: {
        name: t.function.name || t.function.function.name,
        parameters: t.function.parameters,
        description: t.function.description,
        strict: t.function.strict
      }
    } : t) : void 0;
    for (const message of params.messages) {
      this._addMessage(message, false);
    }
    for (let i = 0; i < maxChatCompletions; ++i) {
      const chatCompletion = await this._createChatCompletion(client, {
        ...restParams,
        tool_choice,
        tools,
        messages: [...this.messages]
      }, options);
      const message = (_b = chatCompletion.choices[0]) == null ? void 0 : _b.message;
      if (!message) {
        throw new OpenAIError(`missing message in ChatCompletion response`);
      }
      if (!((_c = message.tool_calls) == null ? void 0 : _c.length)) {
        return;
      }
      for (const tool_call of message.tool_calls) {
        if (tool_call.type !== "function")
          continue;
        const tool_call_id = tool_call.id;
        const { name, arguments: args } = tool_call.function;
        const fn = functionsByName[name];
        if (!fn) {
          const content2 = `Invalid tool_call: ${JSON.stringify(name)}. Available options are: ${Object.keys(functionsByName).map((name2) => JSON.stringify(name2)).join(", ")}. Please try again`;
          this._addMessage({ role, tool_call_id, content: content2 });
          continue;
        } else if (singleFunctionToCall && singleFunctionToCall !== name) {
          const content2 = `Invalid tool_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;
          this._addMessage({ role, tool_call_id, content: content2 });
          continue;
        }
        let parsed;
        try {
          parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;
        } catch (error) {
          const content2 = error instanceof Error ? error.message : String(error);
          this._addMessage({ role, tool_call_id, content: content2 });
          continue;
        }
        const rawContent = await fn.function(parsed, this);
        const content = __classPrivateFieldGet5(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);
        this._addMessage({ role, tool_call_id, content });
        if (singleFunctionToCall) {
          return;
        }
      }
    }
    return;
  }
};
_AbstractChatCompletionRunner_instances = /* @__PURE__ */ new WeakSet(), _AbstractChatCompletionRunner_getFinalContent = function _AbstractChatCompletionRunner_getFinalContent2() {
  var _a2;
  return (_a2 = __classPrivateFieldGet5(this, _AbstractChatCompletionRunner_instances, "m", _AbstractChatCompletionRunner_getFinalMessage).call(this).content) != null ? _a2 : null;
}, _AbstractChatCompletionRunner_getFinalMessage = function _AbstractChatCompletionRunner_getFinalMessage2() {
  var _a2, _b;
  let i = this.messages.length;
  while (i-- > 0) {
    const message = this.messages[i];
    if (isAssistantMessage(message)) {
      const { function_call, ...rest } = message;
      const ret = {
        ...rest,
        content: (_a2 = message.content) != null ? _a2 : null,
        refusal: (_b = message.refusal) != null ? _b : null
      };
      if (function_call) {
        ret.function_call = function_call;
      }
      return ret;
    }
  }
  throw new OpenAIError("stream ended without producing a ChatCompletionMessage with role=assistant");
}, _AbstractChatCompletionRunner_getFinalFunctionCall = function _AbstractChatCompletionRunner_getFinalFunctionCall2() {
  var _a2, _b;
  for (let i = this.messages.length - 1; i >= 0; i--) {
    const message = this.messages[i];
    if (isAssistantMessage(message) && (message == null ? void 0 : message.function_call)) {
      return message.function_call;
    }
    if (isAssistantMessage(message) && ((_a2 = message == null ? void 0 : message.tool_calls) == null ? void 0 : _a2.length)) {
      return (_b = message.tool_calls.at(-1)) == null ? void 0 : _b.function;
    }
  }
  return;
}, _AbstractChatCompletionRunner_getFinalFunctionCallResult = function _AbstractChatCompletionRunner_getFinalFunctionCallResult2() {
  for (let i = this.messages.length - 1; i >= 0; i--) {
    const message = this.messages[i];
    if (isFunctionMessage(message) && message.content != null) {
      return message.content;
    }
    if (isToolMessage(message) && message.content != null && typeof message.content === "string" && this.messages.some((x) => {
      var _a2;
      return x.role === "assistant" && ((_a2 = x.tool_calls) == null ? void 0 : _a2.some((y) => y.type === "function" && y.id === message.tool_call_id));
    })) {
      return message.content;
    }
  }
  return;
}, _AbstractChatCompletionRunner_calculateTotalUsage = function _AbstractChatCompletionRunner_calculateTotalUsage2() {
  const total = {
    completion_tokens: 0,
    prompt_tokens: 0,
    total_tokens: 0
  };
  for (const { usage } of this._chatCompletions) {
    if (usage) {
      total.completion_tokens += usage.completion_tokens;
      total.prompt_tokens += usage.prompt_tokens;
      total.total_tokens += usage.total_tokens;
    }
  }
  return total;
}, _AbstractChatCompletionRunner_validateParams = function _AbstractChatCompletionRunner_validateParams2(params) {
  if (params.n != null && params.n > 1) {
    throw new OpenAIError("ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.");
  }
}, _AbstractChatCompletionRunner_stringifyFunctionCallResult = function _AbstractChatCompletionRunner_stringifyFunctionCallResult2(rawContent) {
  return typeof rawContent === "string" ? rawContent : rawContent === void 0 ? "undefined" : JSON.stringify(rawContent);
};

// node_modules/openai/lib/ChatCompletionRunner.mjs
var ChatCompletionRunner = class extends AbstractChatCompletionRunner {
  /** @deprecated - please use `runTools` instead. */
  static runFunctions(client, params, options) {
    const runner = new ChatCompletionRunner();
    const opts = {
      ...options,
      headers: { ...options == null ? void 0 : options.headers, "X-Stainless-Helper-Method": "runFunctions" }
    };
    runner._run(() => runner._runFunctions(client, params, opts));
    return runner;
  }
  static runTools(client, params, options) {
    const runner = new ChatCompletionRunner();
    const opts = {
      ...options,
      headers: { ...options == null ? void 0 : options.headers, "X-Stainless-Helper-Method": "runTools" }
    };
    runner._run(() => runner._runTools(client, params, opts));
    return runner;
  }
  _addMessage(message, emit = true) {
    super._addMessage(message, emit);
    if (isAssistantMessage(message) && message.content) {
      this._emit("content", message.content);
    }
  }
};

// node_modules/openai/_vendor/partial-json-parser/parser.mjs
var STR = 1;
var NUM = 2;
var ARR = 4;
var OBJ = 8;
var NULL = 16;
var BOOL = 32;
var NAN = 64;
var INFINITY = 128;
var MINUS_INFINITY = 256;
var INF = INFINITY | MINUS_INFINITY;
var SPECIAL = NULL | BOOL | INF | NAN;
var ATOM = STR | NUM | SPECIAL;
var COLLECTION = ARR | OBJ;
var ALL = ATOM | COLLECTION;
var Allow = {
  STR,
  NUM,
  ARR,
  OBJ,
  NULL,
  BOOL,
  NAN,
  INFINITY,
  MINUS_INFINITY,
  INF,
  SPECIAL,
  ATOM,
  COLLECTION,
  ALL
};
var PartialJSON = class extends Error {
};
var MalformedJSON = class extends Error {
};
function parseJSON(jsonString, allowPartial = Allow.ALL) {
  if (typeof jsonString !== "string") {
    throw new TypeError(`expecting str, got ${typeof jsonString}`);
  }
  if (!jsonString.trim()) {
    throw new Error(`${jsonString} is empty`);
  }
  return _parseJSON(jsonString.trim(), allowPartial);
}
var _parseJSON = (jsonString, allow) => {
  const length = jsonString.length;
  let index = 0;
  const markPartialJSON = (msg) => {
    throw new PartialJSON(`${msg} at position ${index}`);
  };
  const throwMalformedError = (msg) => {
    throw new MalformedJSON(`${msg} at position ${index}`);
  };
  const parseAny = () => {
    skipBlank();
    if (index >= length)
      markPartialJSON("Unexpected end of input");
    if (jsonString[index] === '"')
      return parseStr();
    if (jsonString[index] === "{")
      return parseObj();
    if (jsonString[index] === "[")
      return parseArr();
    if (jsonString.substring(index, index + 4) === "null" || Allow.NULL & allow && length - index < 4 && "null".startsWith(jsonString.substring(index))) {
      index += 4;
      return null;
    }
    if (jsonString.substring(index, index + 4) === "true" || Allow.BOOL & allow && length - index < 4 && "true".startsWith(jsonString.substring(index))) {
      index += 4;
      return true;
    }
    if (jsonString.substring(index, index + 5) === "false" || Allow.BOOL & allow && length - index < 5 && "false".startsWith(jsonString.substring(index))) {
      index += 5;
      return false;
    }
    if (jsonString.substring(index, index + 8) === "Infinity" || Allow.INFINITY & allow && length - index < 8 && "Infinity".startsWith(jsonString.substring(index))) {
      index += 8;
      return Infinity;
    }
    if (jsonString.substring(index, index + 9) === "-Infinity" || Allow.MINUS_INFINITY & allow && 1 < length - index && length - index < 9 && "-Infinity".startsWith(jsonString.substring(index))) {
      index += 9;
      return -Infinity;
    }
    if (jsonString.substring(index, index + 3) === "NaN" || Allow.NAN & allow && length - index < 3 && "NaN".startsWith(jsonString.substring(index))) {
      index += 3;
      return NaN;
    }
    return parseNum();
  };
  const parseStr = () => {
    const start = index;
    let escape2 = false;
    index++;
    while (index < length && (jsonString[index] !== '"' || escape2 && jsonString[index - 1] === "\\")) {
      escape2 = jsonString[index] === "\\" ? !escape2 : false;
      index++;
    }
    if (jsonString.charAt(index) == '"') {
      try {
        return JSON.parse(jsonString.substring(start, ++index - Number(escape2)));
      } catch (e) {
        throwMalformedError(String(e));
      }
    } else if (Allow.STR & allow) {
      try {
        return JSON.parse(jsonString.substring(start, index - Number(escape2)) + '"');
      } catch (e) {
        return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf("\\")) + '"');
      }
    }
    markPartialJSON("Unterminated string literal");
  };
  const parseObj = () => {
    index++;
    skipBlank();
    const obj = {};
    try {
      while (jsonString[index] !== "}") {
        skipBlank();
        if (index >= length && Allow.OBJ & allow)
          return obj;
        const key = parseStr();
        skipBlank();
        index++;
        try {
          const value = parseAny();
          Object.defineProperty(obj, key, { value, writable: true, enumerable: true, configurable: true });
        } catch (e) {
          if (Allow.OBJ & allow)
            return obj;
          else
            throw e;
        }
        skipBlank();
        if (jsonString[index] === ",")
          index++;
      }
    } catch (e) {
      if (Allow.OBJ & allow)
        return obj;
      else
        markPartialJSON("Expected '}' at end of object");
    }
    index++;
    return obj;
  };
  const parseArr = () => {
    index++;
    const arr = [];
    try {
      while (jsonString[index] !== "]") {
        arr.push(parseAny());
        skipBlank();
        if (jsonString[index] === ",") {
          index++;
        }
      }
    } catch (e) {
      if (Allow.ARR & allow) {
        return arr;
      }
      markPartialJSON("Expected ']' at end of array");
    }
    index++;
    return arr;
  };
  const parseNum = () => {
    if (index === 0) {
      if (jsonString === "-" && Allow.NUM & allow)
        markPartialJSON("Not sure what '-' is");
      try {
        return JSON.parse(jsonString);
      } catch (e) {
        if (Allow.NUM & allow) {
          try {
            if ("." === jsonString[jsonString.length - 1])
              return JSON.parse(jsonString.substring(0, jsonString.lastIndexOf(".")));
            return JSON.parse(jsonString.substring(0, jsonString.lastIndexOf("e")));
          } catch (e2) {
          }
        }
        throwMalformedError(String(e));
      }
    }
    const start = index;
    if (jsonString[index] === "-")
      index++;
    while (jsonString[index] && !",]}".includes(jsonString[index]))
      index++;
    if (index == length && !(Allow.NUM & allow))
      markPartialJSON("Unterminated number literal");
    try {
      return JSON.parse(jsonString.substring(start, index));
    } catch (e) {
      if (jsonString.substring(start, index) === "-" && Allow.NUM & allow)
        markPartialJSON("Not sure what '-' is");
      try {
        return JSON.parse(jsonString.substring(start, jsonString.lastIndexOf("e")));
      } catch (e2) {
        throwMalformedError(String(e2));
      }
    }
  };
  const skipBlank = () => {
    while (index < length && " \n\r	".includes(jsonString[index])) {
      index++;
    }
  };
  return parseAny();
};
var partialParse = (input) => parseJSON(input, Allow.ALL ^ Allow.NUM);

// node_modules/openai/lib/ChatCompletionStream.mjs
var __classPrivateFieldSet5 = function(receiver, state, value, kind2, f) {
  if (kind2 === "m")
    throw new TypeError("Private method is not writable");
  if (kind2 === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind2 === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet6 = function(receiver, state, kind2, f) {
  if (kind2 === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind2 === "m" ? f : kind2 === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ChatCompletionStream_instances;
var _ChatCompletionStream_params;
var _ChatCompletionStream_choiceEventStates;
var _ChatCompletionStream_currentChatCompletionSnapshot;
var _ChatCompletionStream_beginRequest;
var _ChatCompletionStream_getChoiceEventState;
var _ChatCompletionStream_addChunk;
var _ChatCompletionStream_emitToolCallDoneEvent;
var _ChatCompletionStream_emitContentDoneEvents;
var _ChatCompletionStream_endRequest;
var _ChatCompletionStream_getAutoParseableResponseFormat;
var _ChatCompletionStream_accumulateChatCompletion;
var ChatCompletionStream = class extends AbstractChatCompletionRunner {
  constructor(params) {
    super();
    _ChatCompletionStream_instances.add(this);
    _ChatCompletionStream_params.set(this, void 0);
    _ChatCompletionStream_choiceEventStates.set(this, void 0);
    _ChatCompletionStream_currentChatCompletionSnapshot.set(this, void 0);
    __classPrivateFieldSet5(this, _ChatCompletionStream_params, params, "f");
    __classPrivateFieldSet5(this, _ChatCompletionStream_choiceEventStates, [], "f");
  }
  get currentChatCompletionSnapshot() {
    return __classPrivateFieldGet6(this, _ChatCompletionStream_currentChatCompletionSnapshot, "f");
  }
  /**
   * Intended for use on the frontend, consuming a stream produced with
   * `.toReadableStream()` on the backend.
   *
   * Note that messages sent to the model do not appear in `.on('message')`
   * in this context.
   */
  static fromReadableStream(stream) {
    const runner = new ChatCompletionStream(null);
    runner._run(() => runner._fromReadableStream(stream));
    return runner;
  }
  static createChatCompletion(client, params, options) {
    const runner = new ChatCompletionStream(params);
    runner._run(() => runner._runChatCompletion(client, { ...params, stream: true }, { ...options, headers: { ...options == null ? void 0 : options.headers, "X-Stainless-Helper-Method": "stream" } }));
    return runner;
  }
  async _createChatCompletion(client, params, options) {
    var _a2;
    super._createChatCompletion;
    const signal = options == null ? void 0 : options.signal;
    if (signal) {
      if (signal.aborted)
        this.controller.abort();
      signal.addEventListener("abort", () => this.controller.abort());
    }
    __classPrivateFieldGet6(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_beginRequest).call(this);
    const stream = await client.chat.completions.create({ ...params, stream: true }, { ...options, signal: this.controller.signal });
    this._connected();
    for await (const chunk of stream) {
      __classPrivateFieldGet6(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_addChunk).call(this, chunk);
    }
    if ((_a2 = stream.controller.signal) == null ? void 0 : _a2.aborted) {
      throw new APIUserAbortError();
    }
    return this._addChatCompletion(__classPrivateFieldGet6(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_endRequest).call(this));
  }
  async _fromReadableStream(readableStream, options) {
    var _a2;
    const signal = options == null ? void 0 : options.signal;
    if (signal) {
      if (signal.aborted)
        this.controller.abort();
      signal.addEventListener("abort", () => this.controller.abort());
    }
    __classPrivateFieldGet6(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_beginRequest).call(this);
    this._connected();
    const stream = Stream.fromReadableStream(readableStream, this.controller);
    let chatId;
    for await (const chunk of stream) {
      if (chatId && chatId !== chunk.id) {
        this._addChatCompletion(__classPrivateFieldGet6(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_endRequest).call(this));
      }
      __classPrivateFieldGet6(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_addChunk).call(this, chunk);
      chatId = chunk.id;
    }
    if ((_a2 = stream.controller.signal) == null ? void 0 : _a2.aborted) {
      throw new APIUserAbortError();
    }
    return this._addChatCompletion(__classPrivateFieldGet6(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_endRequest).call(this));
  }
  [(_ChatCompletionStream_params = /* @__PURE__ */ new WeakMap(), _ChatCompletionStream_choiceEventStates = /* @__PURE__ */ new WeakMap(), _ChatCompletionStream_currentChatCompletionSnapshot = /* @__PURE__ */ new WeakMap(), _ChatCompletionStream_instances = /* @__PURE__ */ new WeakSet(), _ChatCompletionStream_beginRequest = function _ChatCompletionStream_beginRequest2() {
    if (this.ended)
      return;
    __classPrivateFieldSet5(this, _ChatCompletionStream_currentChatCompletionSnapshot, void 0, "f");
  }, _ChatCompletionStream_getChoiceEventState = function _ChatCompletionStream_getChoiceEventState2(choice) {
    let state = __classPrivateFieldGet6(this, _ChatCompletionStream_choiceEventStates, "f")[choice.index];
    if (state) {
      return state;
    }
    state = {
      content_done: false,
      refusal_done: false,
      logprobs_content_done: false,
      logprobs_refusal_done: false,
      done_tool_calls: /* @__PURE__ */ new Set(),
      current_tool_call_index: null
    };
    __classPrivateFieldGet6(this, _ChatCompletionStream_choiceEventStates, "f")[choice.index] = state;
    return state;
  }, _ChatCompletionStream_addChunk = function _ChatCompletionStream_addChunk2(chunk) {
    var _a2, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t;
    if (this.ended)
      return;
    const completion = __classPrivateFieldGet6(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_accumulateChatCompletion).call(this, chunk);
    this._emit("chunk", chunk, completion);
    for (const choice of chunk.choices) {
      const choiceSnapshot = completion.choices[choice.index];
      if (choice.delta.content != null && ((_a2 = choiceSnapshot.message) == null ? void 0 : _a2.role) === "assistant" && ((_b = choiceSnapshot.message) == null ? void 0 : _b.content)) {
        this._emit("content", choice.delta.content, choiceSnapshot.message.content);
        this._emit("content.delta", {
          delta: choice.delta.content,
          snapshot: choiceSnapshot.message.content,
          parsed: choiceSnapshot.message.parsed
        });
      }
      if (choice.delta.refusal != null && ((_c = choiceSnapshot.message) == null ? void 0 : _c.role) === "assistant" && ((_d = choiceSnapshot.message) == null ? void 0 : _d.refusal)) {
        this._emit("refusal.delta", {
          delta: choice.delta.refusal,
          snapshot: choiceSnapshot.message.refusal
        });
      }
      if (((_e = choice.logprobs) == null ? void 0 : _e.content) != null && ((_f = choiceSnapshot.message) == null ? void 0 : _f.role) === "assistant") {
        this._emit("logprobs.content.delta", {
          content: (_g = choice.logprobs) == null ? void 0 : _g.content,
          snapshot: (_i = (_h = choiceSnapshot.logprobs) == null ? void 0 : _h.content) != null ? _i : []
        });
      }
      if (((_j = choice.logprobs) == null ? void 0 : _j.refusal) != null && ((_k = choiceSnapshot.message) == null ? void 0 : _k.role) === "assistant") {
        this._emit("logprobs.refusal.delta", {
          refusal: (_l = choice.logprobs) == null ? void 0 : _l.refusal,
          snapshot: (_n = (_m = choiceSnapshot.logprobs) == null ? void 0 : _m.refusal) != null ? _n : []
        });
      }
      const state = __classPrivateFieldGet6(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);
      if (choiceSnapshot.finish_reason) {
        __classPrivateFieldGet6(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_emitContentDoneEvents).call(this, choiceSnapshot);
        if (state.current_tool_call_index != null) {
          __classPrivateFieldGet6(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_emitToolCallDoneEvent).call(this, choiceSnapshot, state.current_tool_call_index);
        }
      }
      for (const toolCall of (_o = choice.delta.tool_calls) != null ? _o : []) {
        if (state.current_tool_call_index !== toolCall.index) {
          __classPrivateFieldGet6(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_emitContentDoneEvents).call(this, choiceSnapshot);
          if (state.current_tool_call_index != null) {
            __classPrivateFieldGet6(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_emitToolCallDoneEvent).call(this, choiceSnapshot, state.current_tool_call_index);
          }
        }
        state.current_tool_call_index = toolCall.index;
      }
      for (const toolCallDelta of (_p = choice.delta.tool_calls) != null ? _p : []) {
        const toolCallSnapshot = (_q = choiceSnapshot.message.tool_calls) == null ? void 0 : _q[toolCallDelta.index];
        if (!(toolCallSnapshot == null ? void 0 : toolCallSnapshot.type)) {
          continue;
        }
        if ((toolCallSnapshot == null ? void 0 : toolCallSnapshot.type) === "function") {
          this._emit("tool_calls.function.arguments.delta", {
            name: (_r = toolCallSnapshot.function) == null ? void 0 : _r.name,
            index: toolCallDelta.index,
            arguments: toolCallSnapshot.function.arguments,
            parsed_arguments: toolCallSnapshot.function.parsed_arguments,
            arguments_delta: (_t = (_s = toolCallDelta.function) == null ? void 0 : _s.arguments) != null ? _t : ""
          });
        } else {
          assertNever2(toolCallSnapshot == null ? void 0 : toolCallSnapshot.type);
        }
      }
    }
  }, _ChatCompletionStream_emitToolCallDoneEvent = function _ChatCompletionStream_emitToolCallDoneEvent2(choiceSnapshot, toolCallIndex) {
    var _a2, _b, _c;
    const state = __classPrivateFieldGet6(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);
    if (state.done_tool_calls.has(toolCallIndex)) {
      return;
    }
    const toolCallSnapshot = (_a2 = choiceSnapshot.message.tool_calls) == null ? void 0 : _a2[toolCallIndex];
    if (!toolCallSnapshot) {
      throw new Error("no tool call snapshot");
    }
    if (!toolCallSnapshot.type) {
      throw new Error("tool call snapshot missing `type`");
    }
    if (toolCallSnapshot.type === "function") {
      const inputTool = (_c = (_b = __classPrivateFieldGet6(this, _ChatCompletionStream_params, "f")) == null ? void 0 : _b.tools) == null ? void 0 : _c.find((tool) => tool.type === "function" && tool.function.name === toolCallSnapshot.function.name);
      this._emit("tool_calls.function.arguments.done", {
        name: toolCallSnapshot.function.name,
        index: toolCallIndex,
        arguments: toolCallSnapshot.function.arguments,
        parsed_arguments: isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCallSnapshot.function.arguments) : (inputTool == null ? void 0 : inputTool.function.strict) ? JSON.parse(toolCallSnapshot.function.arguments) : null
      });
    } else {
      assertNever2(toolCallSnapshot.type);
    }
  }, _ChatCompletionStream_emitContentDoneEvents = function _ChatCompletionStream_emitContentDoneEvents2(choiceSnapshot) {
    var _a2, _b;
    const state = __classPrivateFieldGet6(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_getChoiceEventState).call(this, choiceSnapshot);
    if (choiceSnapshot.message.content && !state.content_done) {
      state.content_done = true;
      const responseFormat = __classPrivateFieldGet6(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_getAutoParseableResponseFormat).call(this);
      this._emit("content.done", {
        content: choiceSnapshot.message.content,
        parsed: responseFormat ? responseFormat.$parseRaw(choiceSnapshot.message.content) : null
      });
    }
    if (choiceSnapshot.message.refusal && !state.refusal_done) {
      state.refusal_done = true;
      this._emit("refusal.done", { refusal: choiceSnapshot.message.refusal });
    }
    if (((_a2 = choiceSnapshot.logprobs) == null ? void 0 : _a2.content) && !state.logprobs_content_done) {
      state.logprobs_content_done = true;
      this._emit("logprobs.content.done", { content: choiceSnapshot.logprobs.content });
    }
    if (((_b = choiceSnapshot.logprobs) == null ? void 0 : _b.refusal) && !state.logprobs_refusal_done) {
      state.logprobs_refusal_done = true;
      this._emit("logprobs.refusal.done", { refusal: choiceSnapshot.logprobs.refusal });
    }
  }, _ChatCompletionStream_endRequest = function _ChatCompletionStream_endRequest2() {
    if (this.ended) {
      throw new OpenAIError(`stream has ended, this shouldn't happen`);
    }
    const snapshot = __classPrivateFieldGet6(this, _ChatCompletionStream_currentChatCompletionSnapshot, "f");
    if (!snapshot) {
      throw new OpenAIError(`request ended without sending any chunks`);
    }
    __classPrivateFieldSet5(this, _ChatCompletionStream_currentChatCompletionSnapshot, void 0, "f");
    __classPrivateFieldSet5(this, _ChatCompletionStream_choiceEventStates, [], "f");
    return finalizeChatCompletion(snapshot, __classPrivateFieldGet6(this, _ChatCompletionStream_params, "f"));
  }, _ChatCompletionStream_getAutoParseableResponseFormat = function _ChatCompletionStream_getAutoParseableResponseFormat2() {
    var _a2;
    const responseFormat = (_a2 = __classPrivateFieldGet6(this, _ChatCompletionStream_params, "f")) == null ? void 0 : _a2.response_format;
    if (isAutoParsableResponseFormat(responseFormat)) {
      return responseFormat;
    }
    return null;
  }, _ChatCompletionStream_accumulateChatCompletion = function _ChatCompletionStream_accumulateChatCompletion2(chunk) {
    var _a3, _b2, _c2, _d2, _e, _f;
    var _a2, _b, _c, _d;
    let snapshot = __classPrivateFieldGet6(this, _ChatCompletionStream_currentChatCompletionSnapshot, "f");
    const { choices, ...rest } = chunk;
    if (!snapshot) {
      snapshot = __classPrivateFieldSet5(this, _ChatCompletionStream_currentChatCompletionSnapshot, {
        ...rest,
        choices: []
      }, "f");
    } else {
      Object.assign(snapshot, rest);
    }
    for (const { delta, finish_reason, index, logprobs = null, ...other } of chunk.choices) {
      let choice = snapshot.choices[index];
      if (!choice) {
        choice = snapshot.choices[index] = { finish_reason, index, message: {}, logprobs, ...other };
      }
      if (logprobs) {
        if (!choice.logprobs) {
          choice.logprobs = Object.assign({}, logprobs);
        } else {
          const { content: content2, refusal: refusal2, ...rest3 } = logprobs;
          assertIsEmpty(rest3);
          Object.assign(choice.logprobs, rest3);
          if (content2) {
            (_a3 = (_a2 = choice.logprobs).content) != null ? _a3 : _a2.content = [];
            choice.logprobs.content.push(...content2);
          }
          if (refusal2) {
            (_b2 = (_b = choice.logprobs).refusal) != null ? _b2 : _b.refusal = [];
            choice.logprobs.refusal.push(...refusal2);
          }
        }
      }
      if (finish_reason) {
        choice.finish_reason = finish_reason;
        if (__classPrivateFieldGet6(this, _ChatCompletionStream_params, "f") && hasAutoParseableInput(__classPrivateFieldGet6(this, _ChatCompletionStream_params, "f"))) {
          if (finish_reason === "length") {
            throw new LengthFinishReasonError();
          }
          if (finish_reason === "content_filter") {
            throw new ContentFilterFinishReasonError();
          }
        }
      }
      Object.assign(choice, other);
      if (!delta)
        continue;
      const { content, refusal, function_call, role, tool_calls, ...rest2 } = delta;
      assertIsEmpty(rest2);
      Object.assign(choice.message, rest2);
      if (refusal) {
        choice.message.refusal = (choice.message.refusal || "") + refusal;
      }
      if (role)
        choice.message.role = role;
      if (function_call) {
        if (!choice.message.function_call) {
          choice.message.function_call = function_call;
        } else {
          if (function_call.name)
            choice.message.function_call.name = function_call.name;
          if (function_call.arguments) {
            (_c2 = (_c = choice.message.function_call).arguments) != null ? _c2 : _c.arguments = "";
            choice.message.function_call.arguments += function_call.arguments;
          }
        }
      }
      if (content) {
        choice.message.content = (choice.message.content || "") + content;
        if (!choice.message.refusal && __classPrivateFieldGet6(this, _ChatCompletionStream_instances, "m", _ChatCompletionStream_getAutoParseableResponseFormat).call(this)) {
          choice.message.parsed = partialParse(choice.message.content);
        }
      }
      if (tool_calls) {
        if (!choice.message.tool_calls)
          choice.message.tool_calls = [];
        for (const { index: index2, id, type, function: fn, ...rest3 } of tool_calls) {
          const tool_call = (_d2 = (_d = choice.message.tool_calls)[index2]) != null ? _d2 : _d[index2] = {};
          Object.assign(tool_call, rest3);
          if (id)
            tool_call.id = id;
          if (type)
            tool_call.type = type;
          if (fn)
            (_f = tool_call.function) != null ? _f : tool_call.function = { name: (_e = fn.name) != null ? _e : "", arguments: "" };
          if (fn == null ? void 0 : fn.name)
            tool_call.function.name = fn.name;
          if (fn == null ? void 0 : fn.arguments) {
            tool_call.function.arguments += fn.arguments;
            if (shouldParseToolCall(__classPrivateFieldGet6(this, _ChatCompletionStream_params, "f"), tool_call)) {
              tool_call.function.parsed_arguments = partialParse(tool_call.function.arguments);
            }
          }
        }
      }
    }
    return snapshot;
  }, Symbol.asyncIterator)]() {
    const pushQueue = [];
    const readQueue = [];
    let done = false;
    this.on("chunk", (chunk) => {
      const reader = readQueue.shift();
      if (reader) {
        reader.resolve(chunk);
      } else {
        pushQueue.push(chunk);
      }
    });
    this.on("end", () => {
      done = true;
      for (const reader of readQueue) {
        reader.resolve(void 0);
      }
      readQueue.length = 0;
    });
    this.on("abort", (err) => {
      done = true;
      for (const reader of readQueue) {
        reader.reject(err);
      }
      readQueue.length = 0;
    });
    this.on("error", (err) => {
      done = true;
      for (const reader of readQueue) {
        reader.reject(err);
      }
      readQueue.length = 0;
    });
    return {
      next: async () => {
        if (!pushQueue.length) {
          if (done) {
            return { value: void 0, done: true };
          }
          return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((chunk2) => chunk2 ? { value: chunk2, done: false } : { value: void 0, done: true });
        }
        const chunk = pushQueue.shift();
        return { value: chunk, done: false };
      },
      return: async () => {
        this.abort();
        return { value: void 0, done: true };
      }
    };
  }
  toReadableStream() {
    const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);
    return stream.toReadableStream();
  }
};
function finalizeChatCompletion(snapshot, params) {
  const { id, choices, created, model, system_fingerprint, ...rest } = snapshot;
  const completion = {
    ...rest,
    id,
    choices: choices.map(({ message, finish_reason, index, logprobs, ...choiceRest }) => {
      var _a2, _b, _c;
      if (!finish_reason) {
        throw new OpenAIError(`missing finish_reason for choice ${index}`);
      }
      const { content = null, function_call, tool_calls, ...messageRest } = message;
      const role = message.role;
      if (!role) {
        throw new OpenAIError(`missing role for choice ${index}`);
      }
      if (function_call) {
        const { arguments: args, name } = function_call;
        if (args == null) {
          throw new OpenAIError(`missing function_call.arguments for choice ${index}`);
        }
        if (!name) {
          throw new OpenAIError(`missing function_call.name for choice ${index}`);
        }
        return {
          ...choiceRest,
          message: {
            content,
            function_call: { arguments: args, name },
            role,
            refusal: (_a2 = message.refusal) != null ? _a2 : null
          },
          finish_reason,
          index,
          logprobs
        };
      }
      if (tool_calls) {
        return {
          ...choiceRest,
          index,
          finish_reason,
          logprobs,
          message: {
            ...messageRest,
            role,
            content,
            refusal: (_b = message.refusal) != null ? _b : null,
            tool_calls: tool_calls.map((tool_call, i) => {
              const { function: fn, type, id: id2, ...toolRest } = tool_call;
              const { arguments: args, name, ...fnRest } = fn || {};
              if (id2 == null) {
                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].id
${str(snapshot)}`);
              }
              if (type == null) {
                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].type
${str(snapshot)}`);
              }
              if (name == null) {
                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].function.name
${str(snapshot)}`);
              }
              if (args == null) {
                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].function.arguments
${str(snapshot)}`);
              }
              return { ...toolRest, id: id2, type, function: { ...fnRest, name, arguments: args } };
            })
          }
        };
      }
      return {
        ...choiceRest,
        message: { ...messageRest, content, role, refusal: (_c = message.refusal) != null ? _c : null },
        finish_reason,
        index,
        logprobs
      };
    }),
    created,
    model,
    object: "chat.completion",
    ...system_fingerprint ? { system_fingerprint } : {}
  };
  return maybeParseChatCompletion(completion, params);
}
function str(x) {
  return JSON.stringify(x);
}
function assertIsEmpty(obj) {
  return;
}
function assertNever2(_x) {
}

// node_modules/openai/lib/ChatCompletionStreamingRunner.mjs
var ChatCompletionStreamingRunner = class extends ChatCompletionStream {
  static fromReadableStream(stream) {
    const runner = new ChatCompletionStreamingRunner(null);
    runner._run(() => runner._fromReadableStream(stream));
    return runner;
  }
  /** @deprecated - please use `runTools` instead. */
  static runFunctions(client, params, options) {
    const runner = new ChatCompletionStreamingRunner(null);
    const opts = {
      ...options,
      headers: { ...options == null ? void 0 : options.headers, "X-Stainless-Helper-Method": "runFunctions" }
    };
    runner._run(() => runner._runFunctions(client, params, opts));
    return runner;
  }
  static runTools(client, params, options) {
    const runner = new ChatCompletionStreamingRunner(
      // @ts-expect-error TODO these types are incompatible
      params
    );
    const opts = {
      ...options,
      headers: { ...options == null ? void 0 : options.headers, "X-Stainless-Helper-Method": "runTools" }
    };
    runner._run(() => runner._runTools(client, params, opts));
    return runner;
  }
};

// node_modules/openai/resources/beta/chat/completions.mjs
var Completions2 = class extends APIResource {
  parse(body, options) {
    validateInputTools(body.tools);
    return this._client.chat.completions.create(body, {
      ...options,
      headers: {
        ...options == null ? void 0 : options.headers,
        "X-Stainless-Helper-Method": "beta.chat.completions.parse"
      }
    })._thenUnwrap((completion) => parseChatCompletion(completion, body));
  }
  runFunctions(body, options) {
    if (body.stream) {
      return ChatCompletionStreamingRunner.runFunctions(this._client, body, options);
    }
    return ChatCompletionRunner.runFunctions(this._client, body, options);
  }
  runTools(body, options) {
    if (body.stream) {
      return ChatCompletionStreamingRunner.runTools(this._client, body, options);
    }
    return ChatCompletionRunner.runTools(this._client, body, options);
  }
  /**
   * Creates a chat completion stream
   */
  stream(body, options) {
    return ChatCompletionStream.createChatCompletion(this._client, body, options);
  }
};

// node_modules/openai/resources/beta/chat/chat.mjs
var Chat2 = class extends APIResource {
  constructor() {
    super(...arguments);
    this.completions = new Completions2(this._client);
  }
};
(function(Chat3) {
  Chat3.Completions = Completions2;
})(Chat2 || (Chat2 = {}));

// node_modules/openai/resources/beta/realtime/sessions.mjs
var Sessions = class extends APIResource {
  /**
   * Create an ephemeral API token for use in client-side applications with the
   * Realtime API. Can be configured with the same session parameters as the
   * `session.update` client event.
   *
   * It responds with a session object, plus a `client_secret` key which contains a
   * usable ephemeral API token that can be used to authenticate browser clients for
   * the Realtime API.
   *
   * @example
   * ```ts
   * const session =
   *   await client.beta.realtime.sessions.create();
   * ```
   */
  create(body, options) {
    return this._client.post("/realtime/sessions", {
      body,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
};

// node_modules/openai/resources/beta/realtime/transcription-sessions.mjs
var TranscriptionSessions = class extends APIResource {
  /**
   * Create an ephemeral API token for use in client-side applications with the
   * Realtime API specifically for realtime transcriptions. Can be configured with
   * the same session parameters as the `transcription_session.update` client event.
   *
   * It responds with a session object, plus a `client_secret` key which contains a
   * usable ephemeral API token that can be used to authenticate browser clients for
   * the Realtime API.
   *
   * @example
   * ```ts
   * const transcriptionSession =
   *   await client.beta.realtime.transcriptionSessions.create();
   * ```
   */
  create(body, options) {
    return this._client.post("/realtime/transcription_sessions", {
      body,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
};

// node_modules/openai/resources/beta/realtime/realtime.mjs
var Realtime = class extends APIResource {
  constructor() {
    super(...arguments);
    this.sessions = new Sessions(this._client);
    this.transcriptionSessions = new TranscriptionSessions(this._client);
  }
};
Realtime.Sessions = Sessions;
Realtime.TranscriptionSessions = TranscriptionSessions;

// node_modules/openai/resources/beta/threads/messages.mjs
var Messages2 = class extends APIResource {
  /**
   * Create a message.
   *
   * @deprecated The Assistants API is deprecated in favor of the Responses API
   */
  create(threadId, body, options) {
    return this._client.post(`/threads/${threadId}/messages`, {
      body,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * Retrieve a message.
   *
   * @deprecated The Assistants API is deprecated in favor of the Responses API
   */
  retrieve(threadId, messageId, options) {
    return this._client.get(`/threads/${threadId}/messages/${messageId}`, {
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * Modifies a message.
   *
   * @deprecated The Assistants API is deprecated in favor of the Responses API
   */
  update(threadId, messageId, body, options) {
    return this._client.post(`/threads/${threadId}/messages/${messageId}`, {
      body,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  list(threadId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list(threadId, {}, query);
    }
    return this._client.getAPIList(`/threads/${threadId}/messages`, MessagesPage, {
      query,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * Deletes a message.
   *
   * @deprecated The Assistants API is deprecated in favor of the Responses API
   */
  del(threadId, messageId, options) {
    return this._client.delete(`/threads/${threadId}/messages/${messageId}`, {
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
};
var MessagesPage = class extends CursorPage {
};
Messages2.MessagesPage = MessagesPage;

// node_modules/openai/resources/beta/threads/runs/steps.mjs
var Steps = class extends APIResource {
  retrieve(threadId, runId, stepId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.retrieve(threadId, runId, stepId, {}, query);
    }
    return this._client.get(`/threads/${threadId}/runs/${runId}/steps/${stepId}`, {
      query,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  list(threadId, runId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list(threadId, runId, {}, query);
    }
    return this._client.getAPIList(`/threads/${threadId}/runs/${runId}/steps`, RunStepsPage, {
      query,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
};
var RunStepsPage = class extends CursorPage {
};
Steps.RunStepsPage = RunStepsPage;

// node_modules/openai/resources/beta/threads/runs/runs.mjs
var Runs = class extends APIResource {
  constructor() {
    super(...arguments);
    this.steps = new Steps(this._client);
  }
  create(threadId, params, options) {
    var _a2;
    const { include, ...body } = params;
    return this._client.post(`/threads/${threadId}/runs`, {
      query: { include },
      body,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers },
      stream: (_a2 = params.stream) != null ? _a2 : false
    });
  }
  /**
   * Retrieves a run.
   *
   * @deprecated The Assistants API is deprecated in favor of the Responses API
   */
  retrieve(threadId, runId, options) {
    return this._client.get(`/threads/${threadId}/runs/${runId}`, {
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * Modifies a run.
   *
   * @deprecated The Assistants API is deprecated in favor of the Responses API
   */
  update(threadId, runId, body, options) {
    return this._client.post(`/threads/${threadId}/runs/${runId}`, {
      body,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  list(threadId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list(threadId, {}, query);
    }
    return this._client.getAPIList(`/threads/${threadId}/runs`, RunsPage, {
      query,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * Cancels a run that is `in_progress`.
   *
   * @deprecated The Assistants API is deprecated in favor of the Responses API
   */
  cancel(threadId, runId, options) {
    return this._client.post(`/threads/${threadId}/runs/${runId}/cancel`, {
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * A helper to create a run an poll for a terminal state. More information on Run
   * lifecycles can be found here:
   * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps
   */
  async createAndPoll(threadId, body, options) {
    const run = await this.create(threadId, body, options);
    return await this.poll(threadId, run.id, options);
  }
  /**
   * Create a Run stream
   *
   * @deprecated use `stream` instead
   */
  createAndStream(threadId, body, options) {
    return AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);
  }
  /**
   * A helper to poll a run status until it reaches a terminal state. More
   * information on Run lifecycles can be found here:
   * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps
   */
  async poll(threadId, runId, options) {
    const headers = { ...options == null ? void 0 : options.headers, "X-Stainless-Poll-Helper": "true" };
    if (options == null ? void 0 : options.pollIntervalMs) {
      headers["X-Stainless-Custom-Poll-Interval"] = options.pollIntervalMs.toString();
    }
    while (true) {
      const { data: run, response } = await this.retrieve(threadId, runId, {
        ...options,
        headers: { ...options == null ? void 0 : options.headers, ...headers }
      }).withResponse();
      switch (run.status) {
        case "queued":
        case "in_progress":
        case "cancelling":
          let sleepInterval = 5e3;
          if (options == null ? void 0 : options.pollIntervalMs) {
            sleepInterval = options.pollIntervalMs;
          } else {
            const headerInterval = response.headers.get("openai-poll-after-ms");
            if (headerInterval) {
              const headerIntervalMs = parseInt(headerInterval);
              if (!isNaN(headerIntervalMs)) {
                sleepInterval = headerIntervalMs;
              }
            }
          }
          await sleep(sleepInterval);
          break;
        case "requires_action":
        case "incomplete":
        case "cancelled":
        case "completed":
        case "failed":
        case "expired":
          return run;
      }
    }
  }
  /**
   * Create a Run stream
   */
  stream(threadId, body, options) {
    return AssistantStream.createAssistantStream(threadId, this._client.beta.threads.runs, body, options);
  }
  submitToolOutputs(threadId, runId, body, options) {
    var _a2;
    return this._client.post(`/threads/${threadId}/runs/${runId}/submit_tool_outputs`, {
      body,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers },
      stream: (_a2 = body.stream) != null ? _a2 : false
    });
  }
  /**
   * A helper to submit a tool output to a run and poll for a terminal run state.
   * More information on Run lifecycles can be found here:
   * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps
   */
  async submitToolOutputsAndPoll(threadId, runId, body, options) {
    const run = await this.submitToolOutputs(threadId, runId, body, options);
    return await this.poll(threadId, run.id, options);
  }
  /**
   * Submit the tool outputs from a previous run and stream the run to a terminal
   * state. More information on Run lifecycles can be found here:
   * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps
   */
  submitToolOutputsStream(threadId, runId, body, options) {
    return AssistantStream.createToolAssistantStream(threadId, runId, this._client.beta.threads.runs, body, options);
  }
};
var RunsPage = class extends CursorPage {
};
Runs.RunsPage = RunsPage;
Runs.Steps = Steps;
Runs.RunStepsPage = RunStepsPage;

// node_modules/openai/resources/beta/threads/threads.mjs
var Threads = class extends APIResource {
  constructor() {
    super(...arguments);
    this.runs = new Runs(this._client);
    this.messages = new Messages2(this._client);
  }
  create(body = {}, options) {
    if (isRequestOptions(body)) {
      return this.create({}, body);
    }
    return this._client.post("/threads", {
      body,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * Retrieves a thread.
   *
   * @deprecated The Assistants API is deprecated in favor of the Responses API
   */
  retrieve(threadId, options) {
    return this._client.get(`/threads/${threadId}`, {
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * Modifies a thread.
   *
   * @deprecated The Assistants API is deprecated in favor of the Responses API
   */
  update(threadId, body, options) {
    return this._client.post(`/threads/${threadId}`, {
      body,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * Delete a thread.
   *
   * @deprecated The Assistants API is deprecated in favor of the Responses API
   */
  del(threadId, options) {
    return this._client.delete(`/threads/${threadId}`, {
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  createAndRun(body, options) {
    var _a2;
    return this._client.post("/threads/runs", {
      body,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers },
      stream: (_a2 = body.stream) != null ? _a2 : false
    });
  }
  /**
   * A helper to create a thread, start a run and then poll for a terminal state.
   * More information on Run lifecycles can be found here:
   * https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps
   */
  async createAndRunPoll(body, options) {
    const run = await this.createAndRun(body, options);
    return await this.runs.poll(run.thread_id, run.id, options);
  }
  /**
   * Create a thread and stream the run back
   */
  createAndRunStream(body, options) {
    return AssistantStream.createThreadAssistantStream(body, this._client.beta.threads, options);
  }
};
Threads.Runs = Runs;
Threads.RunsPage = RunsPage;
Threads.Messages = Messages2;
Threads.MessagesPage = MessagesPage;

// node_modules/openai/resources/beta/beta.mjs
var Beta = class extends APIResource {
  constructor() {
    super(...arguments);
    this.realtime = new Realtime(this._client);
    this.chat = new Chat2(this._client);
    this.assistants = new Assistants(this._client);
    this.threads = new Threads(this._client);
  }
};
Beta.Realtime = Realtime;
Beta.Assistants = Assistants;
Beta.AssistantsPage = AssistantsPage;
Beta.Threads = Threads;

// node_modules/openai/resources/completions.mjs
var Completions3 = class extends APIResource {
  create(body, options) {
    var _a2;
    return this._client.post("/completions", { body, ...options, stream: (_a2 = body.stream) != null ? _a2 : false });
  }
};

// node_modules/openai/resources/containers/files/content.mjs
var Content = class extends APIResource {
  /**
   * Retrieve Container File Content
   */
  retrieve(containerId, fileId, options) {
    return this._client.get(`/containers/${containerId}/files/${fileId}/content`, {
      ...options,
      headers: { Accept: "application/binary", ...options == null ? void 0 : options.headers },
      __binaryResponse: true
    });
  }
};

// node_modules/openai/resources/containers/files/files.mjs
var Files = class extends APIResource {
  constructor() {
    super(...arguments);
    this.content = new Content(this._client);
  }
  /**
   * Create a Container File
   *
   * You can send either a multipart/form-data request with the raw file content, or
   * a JSON request with a file ID.
   */
  create(containerId, body, options) {
    return this._client.post(`/containers/${containerId}/files`, multipartFormRequestOptions({ body, ...options }));
  }
  /**
   * Retrieve Container File
   */
  retrieve(containerId, fileId, options) {
    return this._client.get(`/containers/${containerId}/files/${fileId}`, options);
  }
  list(containerId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list(containerId, {}, query);
    }
    return this._client.getAPIList(`/containers/${containerId}/files`, FileListResponsesPage, {
      query,
      ...options
    });
  }
  /**
   * Delete Container File
   */
  del(containerId, fileId, options) {
    return this._client.delete(`/containers/${containerId}/files/${fileId}`, {
      ...options,
      headers: { Accept: "*/*", ...options == null ? void 0 : options.headers }
    });
  }
};
var FileListResponsesPage = class extends CursorPage {
};
Files.FileListResponsesPage = FileListResponsesPage;
Files.Content = Content;

// node_modules/openai/resources/containers/containers.mjs
var Containers = class extends APIResource {
  constructor() {
    super(...arguments);
    this.files = new Files(this._client);
  }
  /**
   * Create Container
   */
  create(body, options) {
    return this._client.post("/containers", { body, ...options });
  }
  /**
   * Retrieve Container
   */
  retrieve(containerId, options) {
    return this._client.get(`/containers/${containerId}`, options);
  }
  list(query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list({}, query);
    }
    return this._client.getAPIList("/containers", ContainerListResponsesPage, { query, ...options });
  }
  /**
   * Delete Container
   */
  del(containerId, options) {
    return this._client.delete(`/containers/${containerId}`, {
      ...options,
      headers: { Accept: "*/*", ...options == null ? void 0 : options.headers }
    });
  }
};
var ContainerListResponsesPage = class extends CursorPage {
};
Containers.ContainerListResponsesPage = ContainerListResponsesPage;
Containers.Files = Files;
Containers.FileListResponsesPage = FileListResponsesPage;

// node_modules/openai/resources/embeddings.mjs
var Embeddings = class extends APIResource {
  /**
   * Creates an embedding vector representing the input text.
   *
   * @example
   * ```ts
   * const createEmbeddingResponse =
   *   await client.embeddings.create({
   *     input: 'The quick brown fox jumped over the lazy dog',
   *     model: 'text-embedding-3-small',
   *   });
   * ```
   */
  create(body, options) {
    const hasUserProvidedEncodingFormat = !!body.encoding_format;
    let encoding_format = hasUserProvidedEncodingFormat ? body.encoding_format : "base64";
    if (hasUserProvidedEncodingFormat) {
      debug("Request", "User defined encoding_format:", body.encoding_format);
    }
    const response = this._client.post("/embeddings", {
      body: {
        ...body,
        encoding_format
      },
      ...options
    });
    if (hasUserProvidedEncodingFormat) {
      return response;
    }
    debug("response", "Decoding base64 embeddings to float32 array");
    return response._thenUnwrap((response2) => {
      if (response2 && response2.data) {
        response2.data.forEach((embeddingBase64Obj) => {
          const embeddingBase64Str = embeddingBase64Obj.embedding;
          embeddingBase64Obj.embedding = toFloat32Array(embeddingBase64Str);
        });
      }
      return response2;
    });
  }
};

// node_modules/openai/resources/evals/runs/output-items.mjs
var OutputItems = class extends APIResource {
  /**
   * Get an evaluation run output item by ID.
   */
  retrieve(evalId, runId, outputItemId, options) {
    return this._client.get(`/evals/${evalId}/runs/${runId}/output_items/${outputItemId}`, options);
  }
  list(evalId, runId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list(evalId, runId, {}, query);
    }
    return this._client.getAPIList(`/evals/${evalId}/runs/${runId}/output_items`, OutputItemListResponsesPage, { query, ...options });
  }
};
var OutputItemListResponsesPage = class extends CursorPage {
};
OutputItems.OutputItemListResponsesPage = OutputItemListResponsesPage;

// node_modules/openai/resources/evals/runs/runs.mjs
var Runs2 = class extends APIResource {
  constructor() {
    super(...arguments);
    this.outputItems = new OutputItems(this._client);
  }
  /**
   * Kicks off a new run for a given evaluation, specifying the data source, and what
   * model configuration to use to test. The datasource will be validated against the
   * schema specified in the config of the evaluation.
   */
  create(evalId, body, options) {
    return this._client.post(`/evals/${evalId}/runs`, { body, ...options });
  }
  /**
   * Get an evaluation run by ID.
   */
  retrieve(evalId, runId, options) {
    return this._client.get(`/evals/${evalId}/runs/${runId}`, options);
  }
  list(evalId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list(evalId, {}, query);
    }
    return this._client.getAPIList(`/evals/${evalId}/runs`, RunListResponsesPage, { query, ...options });
  }
  /**
   * Delete an eval run.
   */
  del(evalId, runId, options) {
    return this._client.delete(`/evals/${evalId}/runs/${runId}`, options);
  }
  /**
   * Cancel an ongoing evaluation run.
   */
  cancel(evalId, runId, options) {
    return this._client.post(`/evals/${evalId}/runs/${runId}`, options);
  }
};
var RunListResponsesPage = class extends CursorPage {
};
Runs2.RunListResponsesPage = RunListResponsesPage;
Runs2.OutputItems = OutputItems;
Runs2.OutputItemListResponsesPage = OutputItemListResponsesPage;

// node_modules/openai/resources/evals/evals.mjs
var Evals = class extends APIResource {
  constructor() {
    super(...arguments);
    this.runs = new Runs2(this._client);
  }
  /**
   * Create the structure of an evaluation that can be used to test a model's
   * performance. An evaluation is a set of testing criteria and the config for a
   * data source, which dictates the schema of the data used in the evaluation. After
   * creating an evaluation, you can run it on different models and model parameters.
   * We support several types of graders and datasources. For more information, see
   * the [Evals guide](https://platform.openai.com/docs/guides/evals).
   */
  create(body, options) {
    return this._client.post("/evals", { body, ...options });
  }
  /**
   * Get an evaluation by ID.
   */
  retrieve(evalId, options) {
    return this._client.get(`/evals/${evalId}`, options);
  }
  /**
   * Update certain properties of an evaluation.
   */
  update(evalId, body, options) {
    return this._client.post(`/evals/${evalId}`, { body, ...options });
  }
  list(query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list({}, query);
    }
    return this._client.getAPIList("/evals", EvalListResponsesPage, { query, ...options });
  }
  /**
   * Delete an evaluation.
   */
  del(evalId, options) {
    return this._client.delete(`/evals/${evalId}`, options);
  }
};
var EvalListResponsesPage = class extends CursorPage {
};
Evals.EvalListResponsesPage = EvalListResponsesPage;
Evals.Runs = Runs2;
Evals.RunListResponsesPage = RunListResponsesPage;

// node_modules/openai/resources/files.mjs
var Files2 = class extends APIResource {
  /**
   * Upload a file that can be used across various endpoints. Individual files can be
   * up to 512 MB, and the size of all files uploaded by one organization can be up
   * to 100 GB.
   *
   * The Assistants API supports files up to 2 million tokens and of specific file
   * types. See the
   * [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) for
   * details.
   *
   * The Fine-tuning API only supports `.jsonl` files. The input also has certain
   * required formats for fine-tuning
   * [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or
   * [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)
   * models.
   *
   * The Batch API only supports `.jsonl` files up to 200 MB in size. The input also
   * has a specific required
   * [format](https://platform.openai.com/docs/api-reference/batch/request-input).
   *
   * Please [contact us](https://help.openai.com/) if you need to increase these
   * storage limits.
   */
  create(body, options) {
    return this._client.post("/files", multipartFormRequestOptions({ body, ...options }));
  }
  /**
   * Returns information about a specific file.
   */
  retrieve(fileId, options) {
    return this._client.get(`/files/${fileId}`, options);
  }
  list(query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list({}, query);
    }
    return this._client.getAPIList("/files", FileObjectsPage, { query, ...options });
  }
  /**
   * Delete a file.
   */
  del(fileId, options) {
    return this._client.delete(`/files/${fileId}`, options);
  }
  /**
   * Returns the contents of the specified file.
   */
  content(fileId, options) {
    return this._client.get(`/files/${fileId}/content`, {
      ...options,
      headers: { Accept: "application/binary", ...options == null ? void 0 : options.headers },
      __binaryResponse: true
    });
  }
  /**
   * Returns the contents of the specified file.
   *
   * @deprecated The `.content()` method should be used instead
   */
  retrieveContent(fileId, options) {
    return this._client.get(`/files/${fileId}/content`, options);
  }
  /**
   * Waits for the given file to be processed, default timeout is 30 mins.
   */
  async waitForProcessing(id, { pollInterval = 5e3, maxWait = 30 * 60 * 1e3 } = {}) {
    const TERMINAL_STATES = /* @__PURE__ */ new Set(["processed", "error", "deleted"]);
    const start = Date.now();
    let file = await this.retrieve(id);
    while (!file.status || !TERMINAL_STATES.has(file.status)) {
      await sleep(pollInterval);
      file = await this.retrieve(id);
      if (Date.now() - start > maxWait) {
        throw new APIConnectionTimeoutError({
          message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`
        });
      }
    }
    return file;
  }
};
var FileObjectsPage = class extends CursorPage {
};
Files2.FileObjectsPage = FileObjectsPage;

// node_modules/openai/resources/fine-tuning/methods.mjs
var Methods = class extends APIResource {
};

// node_modules/openai/resources/fine-tuning/alpha/graders.mjs
var Graders = class extends APIResource {
  /**
   * Run a grader.
   *
   * @example
   * ```ts
   * const response = await client.fineTuning.alpha.graders.run({
   *   grader: {
   *     input: 'input',
   *     name: 'name',
   *     operation: 'eq',
   *     reference: 'reference',
   *     type: 'string_check',
   *   },
   *   model_sample: 'model_sample',
   *   reference_answer: 'string',
   * });
   * ```
   */
  run(body, options) {
    return this._client.post("/fine_tuning/alpha/graders/run", { body, ...options });
  }
  /**
   * Validate a grader.
   *
   * @example
   * ```ts
   * const response =
   *   await client.fineTuning.alpha.graders.validate({
   *     grader: {
   *       input: 'input',
   *       name: 'name',
   *       operation: 'eq',
   *       reference: 'reference',
   *       type: 'string_check',
   *     },
   *   });
   * ```
   */
  validate(body, options) {
    return this._client.post("/fine_tuning/alpha/graders/validate", { body, ...options });
  }
};

// node_modules/openai/resources/fine-tuning/alpha/alpha.mjs
var Alpha = class extends APIResource {
  constructor() {
    super(...arguments);
    this.graders = new Graders(this._client);
  }
};
Alpha.Graders = Graders;

// node_modules/openai/resources/fine-tuning/checkpoints/permissions.mjs
var Permissions = class extends APIResource {
  /**
   * **NOTE:** Calling this endpoint requires an [admin API key](../admin-api-keys).
   *
   * This enables organization owners to share fine-tuned models with other projects
   * in their organization.
   *
   * @example
   * ```ts
   * // Automatically fetches more pages as needed.
   * for await (const permissionCreateResponse of client.fineTuning.checkpoints.permissions.create(
   *   'ft:gpt-4o-mini-2024-07-18:org:weather:B7R9VjQd',
   *   { project_ids: ['string'] },
   * )) {
   *   // ...
   * }
   * ```
   */
  create(fineTunedModelCheckpoint, body, options) {
    return this._client.getAPIList(`/fine_tuning/checkpoints/${fineTunedModelCheckpoint}/permissions`, PermissionCreateResponsesPage, { body, method: "post", ...options });
  }
  retrieve(fineTunedModelCheckpoint, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.retrieve(fineTunedModelCheckpoint, {}, query);
    }
    return this._client.get(`/fine_tuning/checkpoints/${fineTunedModelCheckpoint}/permissions`, {
      query,
      ...options
    });
  }
  /**
   * **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).
   *
   * Organization owners can use this endpoint to delete a permission for a
   * fine-tuned model checkpoint.
   *
   * @example
   * ```ts
   * const permission =
   *   await client.fineTuning.checkpoints.permissions.del(
   *     'ft:gpt-4o-mini-2024-07-18:org:weather:B7R9VjQd',
   *     'cp_zc4Q7MP6XxulcVzj4MZdwsAB',
   *   );
   * ```
   */
  del(fineTunedModelCheckpoint, permissionId, options) {
    return this._client.delete(`/fine_tuning/checkpoints/${fineTunedModelCheckpoint}/permissions/${permissionId}`, options);
  }
};
var PermissionCreateResponsesPage = class extends Page {
};
Permissions.PermissionCreateResponsesPage = PermissionCreateResponsesPage;

// node_modules/openai/resources/fine-tuning/checkpoints/checkpoints.mjs
var Checkpoints = class extends APIResource {
  constructor() {
    super(...arguments);
    this.permissions = new Permissions(this._client);
  }
};
Checkpoints.Permissions = Permissions;
Checkpoints.PermissionCreateResponsesPage = PermissionCreateResponsesPage;

// node_modules/openai/resources/fine-tuning/jobs/checkpoints.mjs
var Checkpoints2 = class extends APIResource {
  list(fineTuningJobId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list(fineTuningJobId, {}, query);
    }
    return this._client.getAPIList(`/fine_tuning/jobs/${fineTuningJobId}/checkpoints`, FineTuningJobCheckpointsPage, { query, ...options });
  }
};
var FineTuningJobCheckpointsPage = class extends CursorPage {
};
Checkpoints2.FineTuningJobCheckpointsPage = FineTuningJobCheckpointsPage;

// node_modules/openai/resources/fine-tuning/jobs/jobs.mjs
var Jobs = class extends APIResource {
  constructor() {
    super(...arguments);
    this.checkpoints = new Checkpoints2(this._client);
  }
  /**
   * Creates a fine-tuning job which begins the process of creating a new model from
   * a given dataset.
   *
   * Response includes details of the enqueued job including job status and the name
   * of the fine-tuned models once complete.
   *
   * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)
   *
   * @example
   * ```ts
   * const fineTuningJob = await client.fineTuning.jobs.create({
   *   model: 'gpt-4o-mini',
   *   training_file: 'file-abc123',
   * });
   * ```
   */
  create(body, options) {
    return this._client.post("/fine_tuning/jobs", { body, ...options });
  }
  /**
   * Get info about a fine-tuning job.
   *
   * [Learn more about fine-tuning](https://platform.openai.com/docs/guides/fine-tuning)
   *
   * @example
   * ```ts
   * const fineTuningJob = await client.fineTuning.jobs.retrieve(
   *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',
   * );
   * ```
   */
  retrieve(fineTuningJobId, options) {
    return this._client.get(`/fine_tuning/jobs/${fineTuningJobId}`, options);
  }
  list(query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list({}, query);
    }
    return this._client.getAPIList("/fine_tuning/jobs", FineTuningJobsPage, { query, ...options });
  }
  /**
   * Immediately cancel a fine-tune job.
   *
   * @example
   * ```ts
   * const fineTuningJob = await client.fineTuning.jobs.cancel(
   *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',
   * );
   * ```
   */
  cancel(fineTuningJobId, options) {
    return this._client.post(`/fine_tuning/jobs/${fineTuningJobId}/cancel`, options);
  }
  listEvents(fineTuningJobId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.listEvents(fineTuningJobId, {}, query);
    }
    return this._client.getAPIList(`/fine_tuning/jobs/${fineTuningJobId}/events`, FineTuningJobEventsPage, {
      query,
      ...options
    });
  }
  /**
   * Pause a fine-tune job.
   *
   * @example
   * ```ts
   * const fineTuningJob = await client.fineTuning.jobs.pause(
   *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',
   * );
   * ```
   */
  pause(fineTuningJobId, options) {
    return this._client.post(`/fine_tuning/jobs/${fineTuningJobId}/pause`, options);
  }
  /**
   * Resume a fine-tune job.
   *
   * @example
   * ```ts
   * const fineTuningJob = await client.fineTuning.jobs.resume(
   *   'ft-AF1WoRqd3aJAHsqc9NY7iL8F',
   * );
   * ```
   */
  resume(fineTuningJobId, options) {
    return this._client.post(`/fine_tuning/jobs/${fineTuningJobId}/resume`, options);
  }
};
var FineTuningJobsPage = class extends CursorPage {
};
var FineTuningJobEventsPage = class extends CursorPage {
};
Jobs.FineTuningJobsPage = FineTuningJobsPage;
Jobs.FineTuningJobEventsPage = FineTuningJobEventsPage;
Jobs.Checkpoints = Checkpoints2;
Jobs.FineTuningJobCheckpointsPage = FineTuningJobCheckpointsPage;

// node_modules/openai/resources/fine-tuning/fine-tuning.mjs
var FineTuning = class extends APIResource {
  constructor() {
    super(...arguments);
    this.methods = new Methods(this._client);
    this.jobs = new Jobs(this._client);
    this.checkpoints = new Checkpoints(this._client);
    this.alpha = new Alpha(this._client);
  }
};
FineTuning.Methods = Methods;
FineTuning.Jobs = Jobs;
FineTuning.FineTuningJobsPage = FineTuningJobsPage;
FineTuning.FineTuningJobEventsPage = FineTuningJobEventsPage;
FineTuning.Checkpoints = Checkpoints;
FineTuning.Alpha = Alpha;

// node_modules/openai/resources/graders/grader-models.mjs
var GraderModels = class extends APIResource {
};

// node_modules/openai/resources/graders/graders.mjs
var Graders2 = class extends APIResource {
  constructor() {
    super(...arguments);
    this.graderModels = new GraderModels(this._client);
  }
};
Graders2.GraderModels = GraderModels;

// node_modules/openai/resources/images.mjs
var Images = class extends APIResource {
  /**
   * Creates a variation of a given image. This endpoint only supports `dall-e-2`.
   *
   * @example
   * ```ts
   * const imagesResponse = await client.images.createVariation({
   *   image: fs.createReadStream('otter.png'),
   * });
   * ```
   */
  createVariation(body, options) {
    return this._client.post("/images/variations", multipartFormRequestOptions({ body, ...options }));
  }
  /**
   * Creates an edited or extended image given one or more source images and a
   * prompt. This endpoint only supports `gpt-image-1` and `dall-e-2`.
   *
   * @example
   * ```ts
   * const imagesResponse = await client.images.edit({
   *   image: fs.createReadStream('path/to/file'),
   *   prompt: 'A cute baby sea otter wearing a beret',
   * });
   * ```
   */
  edit(body, options) {
    return this._client.post("/images/edits", multipartFormRequestOptions({ body, ...options }));
  }
  /**
   * Creates an image given a prompt.
   * [Learn more](https://platform.openai.com/docs/guides/images).
   *
   * @example
   * ```ts
   * const imagesResponse = await client.images.generate({
   *   prompt: 'A cute baby sea otter',
   * });
   * ```
   */
  generate(body, options) {
    return this._client.post("/images/generations", { body, ...options });
  }
};

// node_modules/openai/resources/models.mjs
var Models = class extends APIResource {
  /**
   * Retrieves a model instance, providing basic information about the model such as
   * the owner and permissioning.
   */
  retrieve(model, options) {
    return this._client.get(`/models/${model}`, options);
  }
  /**
   * Lists the currently available models, and provides basic information about each
   * one such as the owner and availability.
   */
  list(options) {
    return this._client.getAPIList("/models", ModelsPage, options);
  }
  /**
   * Delete a fine-tuned model. You must have the Owner role in your organization to
   * delete a model.
   */
  del(model, options) {
    return this._client.delete(`/models/${model}`, options);
  }
};
var ModelsPage = class extends Page {
};
Models.ModelsPage = ModelsPage;

// node_modules/openai/resources/moderations.mjs
var Moderations = class extends APIResource {
  /**
   * Classifies if text and/or image inputs are potentially harmful. Learn more in
   * the [moderation guide](https://platform.openai.com/docs/guides/moderation).
   */
  create(body, options) {
    return this._client.post("/moderations", { body, ...options });
  }
};

// node_modules/openai/lib/ResponsesParser.mjs
function maybeParseResponse(response, params) {
  if (!params || !hasAutoParseableInput2(params)) {
    return {
      ...response,
      output_parsed: null,
      output: response.output.map((item) => {
        if (item.type === "function_call") {
          return {
            ...item,
            parsed_arguments: null
          };
        }
        if (item.type === "message") {
          return {
            ...item,
            content: item.content.map((content) => ({
              ...content,
              parsed: null
            }))
          };
        } else {
          return item;
        }
      })
    };
  }
  return parseResponse(response, params);
}
function parseResponse(response, params) {
  const output = response.output.map((item) => {
    if (item.type === "function_call") {
      return {
        ...item,
        parsed_arguments: parseToolCall2(params, item)
      };
    }
    if (item.type === "message") {
      const content = item.content.map((content2) => {
        if (content2.type === "output_text") {
          return {
            ...content2,
            parsed: parseTextFormat(params, content2.text)
          };
        }
        return content2;
      });
      return {
        ...item,
        content
      };
    }
    return item;
  });
  const parsed = Object.assign({}, response, { output });
  if (!Object.getOwnPropertyDescriptor(response, "output_text")) {
    addOutputText(parsed);
  }
  Object.defineProperty(parsed, "output_parsed", {
    enumerable: true,
    get() {
      for (const output2 of parsed.output) {
        if (output2.type !== "message") {
          continue;
        }
        for (const content of output2.content) {
          if (content.type === "output_text" && content.parsed !== null) {
            return content.parsed;
          }
        }
      }
      return null;
    }
  });
  return parsed;
}
function parseTextFormat(params, content) {
  var _a2, _b, _c, _d;
  if (((_b = (_a2 = params.text) == null ? void 0 : _a2.format) == null ? void 0 : _b.type) !== "json_schema") {
    return null;
  }
  if ("$parseRaw" in ((_c = params.text) == null ? void 0 : _c.format)) {
    const text_format = (_d = params.text) == null ? void 0 : _d.format;
    return text_format.$parseRaw(content);
  }
  return JSON.parse(content);
}
function hasAutoParseableInput2(params) {
  var _a2;
  if (isAutoParsableResponseFormat((_a2 = params.text) == null ? void 0 : _a2.format)) {
    return true;
  }
  return false;
}
function isAutoParsableTool2(tool) {
  return (tool == null ? void 0 : tool["$brand"]) === "auto-parseable-tool";
}
function getInputToolByName(input_tools, name) {
  return input_tools.find((tool) => tool.type === "function" && tool.name === name);
}
function parseToolCall2(params, toolCall) {
  var _a2;
  const inputTool = getInputToolByName((_a2 = params.tools) != null ? _a2 : [], toolCall.name);
  return {
    ...toolCall,
    ...toolCall,
    parsed_arguments: isAutoParsableTool2(inputTool) ? inputTool.$parseRaw(toolCall.arguments) : (inputTool == null ? void 0 : inputTool.strict) ? JSON.parse(toolCall.arguments) : null
  };
}
function addOutputText(rsp) {
  const texts = [];
  for (const output of rsp.output) {
    if (output.type !== "message") {
      continue;
    }
    for (const content of output.content) {
      if (content.type === "output_text") {
        texts.push(content.text);
      }
    }
  }
  rsp.output_text = texts.join("");
}

// node_modules/openai/resources/responses/input-items.mjs
var InputItems = class extends APIResource {
  list(responseId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list(responseId, {}, query);
    }
    return this._client.getAPIList(`/responses/${responseId}/input_items`, ResponseItemsPage, {
      query,
      ...options
    });
  }
};

// node_modules/openai/lib/responses/ResponseStream.mjs
var __classPrivateFieldSet6 = function(receiver, state, value, kind2, f) {
  if (kind2 === "m")
    throw new TypeError("Private method is not writable");
  if (kind2 === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind2 === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet7 = function(receiver, state, kind2, f) {
  if (kind2 === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind2 === "m" ? f : kind2 === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ResponseStream_instances;
var _ResponseStream_params;
var _ResponseStream_currentResponseSnapshot;
var _ResponseStream_finalResponse;
var _ResponseStream_beginRequest;
var _ResponseStream_addEvent;
var _ResponseStream_endRequest;
var _ResponseStream_accumulateResponse;
var ResponseStream = class extends EventStream {
  constructor(params) {
    super();
    _ResponseStream_instances.add(this);
    _ResponseStream_params.set(this, void 0);
    _ResponseStream_currentResponseSnapshot.set(this, void 0);
    _ResponseStream_finalResponse.set(this, void 0);
    __classPrivateFieldSet6(this, _ResponseStream_params, params, "f");
  }
  static createResponse(client, params, options) {
    const runner = new ResponseStream(params);
    runner._run(() => runner._createOrRetrieveResponse(client, params, {
      ...options,
      headers: { ...options == null ? void 0 : options.headers, "X-Stainless-Helper-Method": "stream" }
    }));
    return runner;
  }
  async _createOrRetrieveResponse(client, params, options) {
    var _a2, _b;
    const signal = options == null ? void 0 : options.signal;
    if (signal) {
      if (signal.aborted)
        this.controller.abort();
      signal.addEventListener("abort", () => this.controller.abort());
    }
    __classPrivateFieldGet7(this, _ResponseStream_instances, "m", _ResponseStream_beginRequest).call(this);
    let stream;
    let starting_after = null;
    if ("response_id" in params) {
      stream = await client.responses.retrieve(params.response_id, { stream: true }, { ...options, signal: this.controller.signal, stream: true });
      starting_after = (_a2 = params.starting_after) != null ? _a2 : null;
    } else {
      stream = await client.responses.create({ ...params, stream: true }, { ...options, signal: this.controller.signal });
    }
    this._connected();
    for await (const event of stream) {
      __classPrivateFieldGet7(this, _ResponseStream_instances, "m", _ResponseStream_addEvent).call(this, event, starting_after);
    }
    if ((_b = stream.controller.signal) == null ? void 0 : _b.aborted) {
      throw new APIUserAbortError();
    }
    return __classPrivateFieldGet7(this, _ResponseStream_instances, "m", _ResponseStream_endRequest).call(this);
  }
  [(_ResponseStream_params = /* @__PURE__ */ new WeakMap(), _ResponseStream_currentResponseSnapshot = /* @__PURE__ */ new WeakMap(), _ResponseStream_finalResponse = /* @__PURE__ */ new WeakMap(), _ResponseStream_instances = /* @__PURE__ */ new WeakSet(), _ResponseStream_beginRequest = function _ResponseStream_beginRequest2() {
    if (this.ended)
      return;
    __classPrivateFieldSet6(this, _ResponseStream_currentResponseSnapshot, void 0, "f");
  }, _ResponseStream_addEvent = function _ResponseStream_addEvent2(event, starting_after) {
    if (this.ended)
      return;
    const maybeEmit = (name, event2) => {
      if (starting_after == null || event2.sequence_number > starting_after) {
        this._emit(name, event2);
      }
    };
    const response = __classPrivateFieldGet7(this, _ResponseStream_instances, "m", _ResponseStream_accumulateResponse).call(this, event);
    maybeEmit("event", event);
    switch (event.type) {
      case "response.output_text.delta": {
        const output = response.output[event.output_index];
        if (!output) {
          throw new OpenAIError(`missing output at index ${event.output_index}`);
        }
        if (output.type === "message") {
          const content = output.content[event.content_index];
          if (!content) {
            throw new OpenAIError(`missing content at index ${event.content_index}`);
          }
          if (content.type !== "output_text") {
            throw new OpenAIError(`expected content to be 'output_text', got ${content.type}`);
          }
          maybeEmit("response.output_text.delta", {
            ...event,
            snapshot: content.text
          });
        }
        break;
      }
      case "response.function_call_arguments.delta": {
        const output = response.output[event.output_index];
        if (!output) {
          throw new OpenAIError(`missing output at index ${event.output_index}`);
        }
        if (output.type === "function_call") {
          maybeEmit("response.function_call_arguments.delta", {
            ...event,
            snapshot: output.arguments
          });
        }
        break;
      }
      default:
        maybeEmit(event.type, event);
        break;
    }
  }, _ResponseStream_endRequest = function _ResponseStream_endRequest2() {
    if (this.ended) {
      throw new OpenAIError(`stream has ended, this shouldn't happen`);
    }
    const snapshot = __classPrivateFieldGet7(this, _ResponseStream_currentResponseSnapshot, "f");
    if (!snapshot) {
      throw new OpenAIError(`request ended without sending any events`);
    }
    __classPrivateFieldSet6(this, _ResponseStream_currentResponseSnapshot, void 0, "f");
    const parsedResponse = finalizeResponse(snapshot, __classPrivateFieldGet7(this, _ResponseStream_params, "f"));
    __classPrivateFieldSet6(this, _ResponseStream_finalResponse, parsedResponse, "f");
    return parsedResponse;
  }, _ResponseStream_accumulateResponse = function _ResponseStream_accumulateResponse2(event) {
    let snapshot = __classPrivateFieldGet7(this, _ResponseStream_currentResponseSnapshot, "f");
    if (!snapshot) {
      if (event.type !== "response.created") {
        throw new OpenAIError(`When snapshot hasn't been set yet, expected 'response.created' event, got ${event.type}`);
      }
      snapshot = __classPrivateFieldSet6(this, _ResponseStream_currentResponseSnapshot, event.response, "f");
      return snapshot;
    }
    switch (event.type) {
      case "response.output_item.added": {
        snapshot.output.push(event.item);
        break;
      }
      case "response.content_part.added": {
        const output = snapshot.output[event.output_index];
        if (!output) {
          throw new OpenAIError(`missing output at index ${event.output_index}`);
        }
        if (output.type === "message") {
          output.content.push(event.part);
        }
        break;
      }
      case "response.output_text.delta": {
        const output = snapshot.output[event.output_index];
        if (!output) {
          throw new OpenAIError(`missing output at index ${event.output_index}`);
        }
        if (output.type === "message") {
          const content = output.content[event.content_index];
          if (!content) {
            throw new OpenAIError(`missing content at index ${event.content_index}`);
          }
          if (content.type !== "output_text") {
            throw new OpenAIError(`expected content to be 'output_text', got ${content.type}`);
          }
          content.text += event.delta;
        }
        break;
      }
      case "response.function_call_arguments.delta": {
        const output = snapshot.output[event.output_index];
        if (!output) {
          throw new OpenAIError(`missing output at index ${event.output_index}`);
        }
        if (output.type === "function_call") {
          output.arguments += event.delta;
        }
        break;
      }
      case "response.completed": {
        __classPrivateFieldSet6(this, _ResponseStream_currentResponseSnapshot, event.response, "f");
        break;
      }
    }
    return snapshot;
  }, Symbol.asyncIterator)]() {
    const pushQueue = [];
    const readQueue = [];
    let done = false;
    this.on("event", (event) => {
      const reader = readQueue.shift();
      if (reader) {
        reader.resolve(event);
      } else {
        pushQueue.push(event);
      }
    });
    this.on("end", () => {
      done = true;
      for (const reader of readQueue) {
        reader.resolve(void 0);
      }
      readQueue.length = 0;
    });
    this.on("abort", (err) => {
      done = true;
      for (const reader of readQueue) {
        reader.reject(err);
      }
      readQueue.length = 0;
    });
    this.on("error", (err) => {
      done = true;
      for (const reader of readQueue) {
        reader.reject(err);
      }
      readQueue.length = 0;
    });
    return {
      next: async () => {
        if (!pushQueue.length) {
          if (done) {
            return { value: void 0, done: true };
          }
          return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((event2) => event2 ? { value: event2, done: false } : { value: void 0, done: true });
        }
        const event = pushQueue.shift();
        return { value: event, done: false };
      },
      return: async () => {
        this.abort();
        return { value: void 0, done: true };
      }
    };
  }
  /**
   * @returns a promise that resolves with the final Response, or rejects
   * if an error occurred or the stream ended prematurely without producing a REsponse.
   */
  async finalResponse() {
    await this.done();
    const response = __classPrivateFieldGet7(this, _ResponseStream_finalResponse, "f");
    if (!response)
      throw new OpenAIError("stream ended without producing a ChatCompletion");
    return response;
  }
};
function finalizeResponse(snapshot, params) {
  return maybeParseResponse(snapshot, params);
}

// node_modules/openai/resources/responses/responses.mjs
var Responses = class extends APIResource {
  constructor() {
    super(...arguments);
    this.inputItems = new InputItems(this._client);
  }
  create(body, options) {
    var _a2;
    return this._client.post("/responses", { body, ...options, stream: (_a2 = body.stream) != null ? _a2 : false })._thenUnwrap((rsp) => {
      if ("object" in rsp && rsp.object === "response") {
        addOutputText(rsp);
      }
      return rsp;
    });
  }
  retrieve(responseId, query = {}, options) {
    var _a2;
    return this._client.get(`/responses/${responseId}`, {
      query,
      ...options,
      stream: (_a2 = query == null ? void 0 : query.stream) != null ? _a2 : false
    });
  }
  /**
   * Deletes a model response with the given ID.
   *
   * @example
   * ```ts
   * await client.responses.del(
   *   'resp_677efb5139a88190b512bc3fef8e535d',
   * );
   * ```
   */
  del(responseId, options) {
    return this._client.delete(`/responses/${responseId}`, {
      ...options,
      headers: { Accept: "*/*", ...options == null ? void 0 : options.headers }
    });
  }
  parse(body, options) {
    return this._client.responses.create(body, options)._thenUnwrap((response) => parseResponse(response, body));
  }
  /**
   * Creates a model response stream
   */
  stream(body, options) {
    return ResponseStream.createResponse(this._client, body, options);
  }
  /**
   * Cancels a model response with the given ID. Only responses created with the
   * `background` parameter set to `true` can be cancelled.
   * [Learn more](https://platform.openai.com/docs/guides/background).
   *
   * @example
   * ```ts
   * await client.responses.cancel(
   *   'resp_677efb5139a88190b512bc3fef8e535d',
   * );
   * ```
   */
  cancel(responseId, options) {
    return this._client.post(`/responses/${responseId}/cancel`, {
      ...options,
      headers: { Accept: "*/*", ...options == null ? void 0 : options.headers }
    });
  }
};
var ResponseItemsPage = class extends CursorPage {
};
Responses.InputItems = InputItems;

// node_modules/openai/resources/uploads/parts.mjs
var Parts = class extends APIResource {
  /**
   * Adds a
   * [Part](https://platform.openai.com/docs/api-reference/uploads/part-object) to an
   * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object.
   * A Part represents a chunk of bytes from the file you are trying to upload.
   *
   * Each Part can be at most 64 MB, and you can add Parts until you hit the Upload
   * maximum of 8 GB.
   *
   * It is possible to add multiple Parts in parallel. You can decide the intended
   * order of the Parts when you
   * [complete the Upload](https://platform.openai.com/docs/api-reference/uploads/complete).
   */
  create(uploadId, body, options) {
    return this._client.post(`/uploads/${uploadId}/parts`, multipartFormRequestOptions({ body, ...options }));
  }
};

// node_modules/openai/resources/uploads/uploads.mjs
var Uploads = class extends APIResource {
  constructor() {
    super(...arguments);
    this.parts = new Parts(this._client);
  }
  /**
   * Creates an intermediate
   * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object
   * that you can add
   * [Parts](https://platform.openai.com/docs/api-reference/uploads/part-object) to.
   * Currently, an Upload can accept at most 8 GB in total and expires after an hour
   * after you create it.
   *
   * Once you complete the Upload, we will create a
   * [File](https://platform.openai.com/docs/api-reference/files/object) object that
   * contains all the parts you uploaded. This File is usable in the rest of our
   * platform as a regular File object.
   *
   * For certain `purpose` values, the correct `mime_type` must be specified. Please
   * refer to documentation for the
   * [supported MIME types for your use case](https://platform.openai.com/docs/assistants/tools/file-search#supported-files).
   *
   * For guidance on the proper filename extensions for each purpose, please follow
   * the documentation on
   * [creating a File](https://platform.openai.com/docs/api-reference/files/create).
   */
  create(body, options) {
    return this._client.post("/uploads", { body, ...options });
  }
  /**
   * Cancels the Upload. No Parts may be added after an Upload is cancelled.
   */
  cancel(uploadId, options) {
    return this._client.post(`/uploads/${uploadId}/cancel`, options);
  }
  /**
   * Completes the
   * [Upload](https://platform.openai.com/docs/api-reference/uploads/object).
   *
   * Within the returned Upload object, there is a nested
   * [File](https://platform.openai.com/docs/api-reference/files/object) object that
   * is ready to use in the rest of the platform.
   *
   * You can specify the order of the Parts by passing in an ordered list of the Part
   * IDs.
   *
   * The number of bytes uploaded upon completion must match the number of bytes
   * initially specified when creating the Upload object. No Parts may be added after
   * an Upload is completed.
   */
  complete(uploadId, body, options) {
    return this._client.post(`/uploads/${uploadId}/complete`, { body, ...options });
  }
};
Uploads.Parts = Parts;

// node_modules/openai/lib/Util.mjs
var allSettledWithThrow = async (promises) => {
  const results = await Promise.allSettled(promises);
  const rejected = results.filter((result) => result.status === "rejected");
  if (rejected.length) {
    for (const result of rejected) {
      console.error(result.reason);
    }
    throw new Error(`${rejected.length} promise(s) failed - see the above errors`);
  }
  const values = [];
  for (const result of results) {
    if (result.status === "fulfilled") {
      values.push(result.value);
    }
  }
  return values;
};

// node_modules/openai/resources/vector-stores/files.mjs
var Files3 = class extends APIResource {
  /**
   * Create a vector store file by attaching a
   * [File](https://platform.openai.com/docs/api-reference/files) to a
   * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).
   */
  create(vectorStoreId, body, options) {
    return this._client.post(`/vector_stores/${vectorStoreId}/files`, {
      body,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * Retrieves a vector store file.
   */
  retrieve(vectorStoreId, fileId, options) {
    return this._client.get(`/vector_stores/${vectorStoreId}/files/${fileId}`, {
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * Update attributes on a vector store file.
   */
  update(vectorStoreId, fileId, body, options) {
    return this._client.post(`/vector_stores/${vectorStoreId}/files/${fileId}`, {
      body,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  list(vectorStoreId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list(vectorStoreId, {}, query);
    }
    return this._client.getAPIList(`/vector_stores/${vectorStoreId}/files`, VectorStoreFilesPage, {
      query,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * Delete a vector store file. This will remove the file from the vector store but
   * the file itself will not be deleted. To delete the file, use the
   * [delete file](https://platform.openai.com/docs/api-reference/files/delete)
   * endpoint.
   */
  del(vectorStoreId, fileId, options) {
    return this._client.delete(`/vector_stores/${vectorStoreId}/files/${fileId}`, {
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * Attach a file to the given vector store and wait for it to be processed.
   */
  async createAndPoll(vectorStoreId, body, options) {
    const file = await this.create(vectorStoreId, body, options);
    return await this.poll(vectorStoreId, file.id, options);
  }
  /**
   * Wait for the vector store file to finish processing.
   *
   * Note: this will return even if the file failed to process, you need to check
   * file.last_error and file.status to handle these cases
   */
  async poll(vectorStoreId, fileId, options) {
    const headers = { ...options == null ? void 0 : options.headers, "X-Stainless-Poll-Helper": "true" };
    if (options == null ? void 0 : options.pollIntervalMs) {
      headers["X-Stainless-Custom-Poll-Interval"] = options.pollIntervalMs.toString();
    }
    while (true) {
      const fileResponse = await this.retrieve(vectorStoreId, fileId, {
        ...options,
        headers
      }).withResponse();
      const file = fileResponse.data;
      switch (file.status) {
        case "in_progress":
          let sleepInterval = 5e3;
          if (options == null ? void 0 : options.pollIntervalMs) {
            sleepInterval = options.pollIntervalMs;
          } else {
            const headerInterval = fileResponse.response.headers.get("openai-poll-after-ms");
            if (headerInterval) {
              const headerIntervalMs = parseInt(headerInterval);
              if (!isNaN(headerIntervalMs)) {
                sleepInterval = headerIntervalMs;
              }
            }
          }
          await sleep(sleepInterval);
          break;
        case "failed":
        case "completed":
          return file;
      }
    }
  }
  /**
   * Upload a file to the `files` API and then attach it to the given vector store.
   *
   * Note the file will be asynchronously processed (you can use the alternative
   * polling helper method to wait for processing to complete).
   */
  async upload(vectorStoreId, file, options) {
    const fileInfo = await this._client.files.create({ file, purpose: "assistants" }, options);
    return this.create(vectorStoreId, { file_id: fileInfo.id }, options);
  }
  /**
   * Add a file to a vector store and poll until processing is complete.
   */
  async uploadAndPoll(vectorStoreId, file, options) {
    const fileInfo = await this.upload(vectorStoreId, file, options);
    return await this.poll(vectorStoreId, fileInfo.id, options);
  }
  /**
   * Retrieve the parsed contents of a vector store file.
   */
  content(vectorStoreId, fileId, options) {
    return this._client.getAPIList(`/vector_stores/${vectorStoreId}/files/${fileId}/content`, FileContentResponsesPage, { ...options, headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers } });
  }
};
var VectorStoreFilesPage = class extends CursorPage {
};
var FileContentResponsesPage = class extends Page {
};
Files3.VectorStoreFilesPage = VectorStoreFilesPage;
Files3.FileContentResponsesPage = FileContentResponsesPage;

// node_modules/openai/resources/vector-stores/file-batches.mjs
var FileBatches = class extends APIResource {
  /**
   * Create a vector store file batch.
   */
  create(vectorStoreId, body, options) {
    return this._client.post(`/vector_stores/${vectorStoreId}/file_batches`, {
      body,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * Retrieves a vector store file batch.
   */
  retrieve(vectorStoreId, batchId, options) {
    return this._client.get(`/vector_stores/${vectorStoreId}/file_batches/${batchId}`, {
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * Cancel a vector store file batch. This attempts to cancel the processing of
   * files in this batch as soon as possible.
   */
  cancel(vectorStoreId, batchId, options) {
    return this._client.post(`/vector_stores/${vectorStoreId}/file_batches/${batchId}/cancel`, {
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * Create a vector store batch and poll until all files have been processed.
   */
  async createAndPoll(vectorStoreId, body, options) {
    const batch = await this.create(vectorStoreId, body);
    return await this.poll(vectorStoreId, batch.id, options);
  }
  listFiles(vectorStoreId, batchId, query = {}, options) {
    if (isRequestOptions(query)) {
      return this.listFiles(vectorStoreId, batchId, {}, query);
    }
    return this._client.getAPIList(`/vector_stores/${vectorStoreId}/file_batches/${batchId}/files`, VectorStoreFilesPage, { query, ...options, headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers } });
  }
  /**
   * Wait for the given file batch to be processed.
   *
   * Note: this will return even if one of the files failed to process, you need to
   * check batch.file_counts.failed_count to handle this case.
   */
  async poll(vectorStoreId, batchId, options) {
    const headers = { ...options == null ? void 0 : options.headers, "X-Stainless-Poll-Helper": "true" };
    if (options == null ? void 0 : options.pollIntervalMs) {
      headers["X-Stainless-Custom-Poll-Interval"] = options.pollIntervalMs.toString();
    }
    while (true) {
      const { data: batch, response } = await this.retrieve(vectorStoreId, batchId, {
        ...options,
        headers
      }).withResponse();
      switch (batch.status) {
        case "in_progress":
          let sleepInterval = 5e3;
          if (options == null ? void 0 : options.pollIntervalMs) {
            sleepInterval = options.pollIntervalMs;
          } else {
            const headerInterval = response.headers.get("openai-poll-after-ms");
            if (headerInterval) {
              const headerIntervalMs = parseInt(headerInterval);
              if (!isNaN(headerIntervalMs)) {
                sleepInterval = headerIntervalMs;
              }
            }
          }
          await sleep(sleepInterval);
          break;
        case "failed":
        case "cancelled":
        case "completed":
          return batch;
      }
    }
  }
  /**
   * Uploads the given files concurrently and then creates a vector store file batch.
   *
   * The concurrency limit is configurable using the `maxConcurrency` parameter.
   */
  async uploadAndPoll(vectorStoreId, { files, fileIds = [] }, options) {
    var _a2;
    if (files == null || files.length == 0) {
      throw new Error(`No \`files\` provided to process. If you've already uploaded files you should use \`.createAndPoll()\` instead`);
    }
    const configuredConcurrency = (_a2 = options == null ? void 0 : options.maxConcurrency) != null ? _a2 : 5;
    const concurrencyLimit = Math.min(configuredConcurrency, files.length);
    const client = this._client;
    const fileIterator = files.values();
    const allFileIds = [...fileIds];
    async function processFiles(iterator) {
      for (let item of iterator) {
        const fileObj = await client.files.create({ file: item, purpose: "assistants" }, options);
        allFileIds.push(fileObj.id);
      }
    }
    const workers = Array(concurrencyLimit).fill(fileIterator).map(processFiles);
    await allSettledWithThrow(workers);
    return await this.createAndPoll(vectorStoreId, {
      file_ids: allFileIds
    });
  }
};

// node_modules/openai/resources/vector-stores/vector-stores.mjs
var VectorStores = class extends APIResource {
  constructor() {
    super(...arguments);
    this.files = new Files3(this._client);
    this.fileBatches = new FileBatches(this._client);
  }
  /**
   * Create a vector store.
   */
  create(body, options) {
    return this._client.post("/vector_stores", {
      body,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * Retrieves a vector store.
   */
  retrieve(vectorStoreId, options) {
    return this._client.get(`/vector_stores/${vectorStoreId}`, {
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * Modifies a vector store.
   */
  update(vectorStoreId, body, options) {
    return this._client.post(`/vector_stores/${vectorStoreId}`, {
      body,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  list(query = {}, options) {
    if (isRequestOptions(query)) {
      return this.list({}, query);
    }
    return this._client.getAPIList("/vector_stores", VectorStoresPage, {
      query,
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * Delete a vector store.
   */
  del(vectorStoreId, options) {
    return this._client.delete(`/vector_stores/${vectorStoreId}`, {
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
  /**
   * Search a vector store for relevant chunks based on a query and file attributes
   * filter.
   */
  search(vectorStoreId, body, options) {
    return this._client.getAPIList(`/vector_stores/${vectorStoreId}/search`, VectorStoreSearchResponsesPage, {
      body,
      method: "post",
      ...options,
      headers: { "OpenAI-Beta": "assistants=v2", ...options == null ? void 0 : options.headers }
    });
  }
};
var VectorStoresPage = class extends CursorPage {
};
var VectorStoreSearchResponsesPage = class extends Page {
};
VectorStores.VectorStoresPage = VectorStoresPage;
VectorStores.VectorStoreSearchResponsesPage = VectorStoreSearchResponsesPage;
VectorStores.Files = Files3;
VectorStores.VectorStoreFilesPage = VectorStoreFilesPage;
VectorStores.FileContentResponsesPage = FileContentResponsesPage;
VectorStores.FileBatches = FileBatches;

// node_modules/openai/index.mjs
var _a;
var OpenAI = class extends APIClient {
  /**
   * API Client for interfacing with the OpenAI API.
   *
   * @param {string | undefined} [opts.apiKey=process.env['OPENAI_API_KEY'] ?? undefined]
   * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]
   * @param {string | null | undefined} [opts.project=process.env['OPENAI_PROJECT_ID'] ?? null]
   * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL'] ?? https://api.openai.com/v1] - Override the default base URL for the API.
   * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
   * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
   * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
   * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
   * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
   * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
   * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.
   */
  constructor({ baseURL = readEnv("OPENAI_BASE_URL"), apiKey = readEnv("OPENAI_API_KEY"), organization = ((_a2) => (_a2 = readEnv("OPENAI_ORG_ID")) != null ? _a2 : null)(), project = ((_b) => (_b = readEnv("OPENAI_PROJECT_ID")) != null ? _b : null)(), ...opts } = {}) {
    var _a3;
    if (apiKey === void 0) {
      throw new OpenAIError("The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' }).");
    }
    const options = {
      apiKey,
      organization,
      project,
      ...opts,
      baseURL: baseURL || `https://api.openai.com/v1`
    };
    if (!options.dangerouslyAllowBrowser && isRunningInBrowser()) {
      throw new OpenAIError("It looks like you're running in a browser-like environment.\n\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\nIf you understand the risks and have appropriate mitigations in place,\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\n\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\n\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\n");
    }
    super({
      baseURL: options.baseURL,
      timeout: (_a3 = options.timeout) != null ? _a3 : 6e5,
      httpAgent: options.httpAgent,
      maxRetries: options.maxRetries,
      fetch: options.fetch
    });
    this.completions = new Completions3(this);
    this.chat = new Chat(this);
    this.embeddings = new Embeddings(this);
    this.files = new Files2(this);
    this.images = new Images(this);
    this.audio = new Audio(this);
    this.moderations = new Moderations(this);
    this.models = new Models(this);
    this.fineTuning = new FineTuning(this);
    this.graders = new Graders2(this);
    this.vectorStores = new VectorStores(this);
    this.beta = new Beta(this);
    this.batches = new Batches(this);
    this.uploads = new Uploads(this);
    this.responses = new Responses(this);
    this.evals = new Evals(this);
    this.containers = new Containers(this);
    this._options = options;
    this.apiKey = apiKey;
    this.organization = organization;
    this.project = project;
  }
  defaultQuery() {
    return this._options.defaultQuery;
  }
  defaultHeaders(opts) {
    return {
      ...super.defaultHeaders(opts),
      "OpenAI-Organization": this.organization,
      "OpenAI-Project": this.project,
      ...this._options.defaultHeaders
    };
  }
  authHeaders(opts) {
    return { Authorization: `Bearer ${this.apiKey}` };
  }
  stringifyQuery(query) {
    return stringify(query, { arrayFormat: "brackets" });
  }
};
_a = OpenAI;
OpenAI.OpenAI = _a;
OpenAI.DEFAULT_TIMEOUT = 6e5;
OpenAI.OpenAIError = OpenAIError;
OpenAI.APIError = APIError;
OpenAI.APIConnectionError = APIConnectionError;
OpenAI.APIConnectionTimeoutError = APIConnectionTimeoutError;
OpenAI.APIUserAbortError = APIUserAbortError;
OpenAI.NotFoundError = NotFoundError;
OpenAI.ConflictError = ConflictError;
OpenAI.RateLimitError = RateLimitError;
OpenAI.BadRequestError = BadRequestError;
OpenAI.AuthenticationError = AuthenticationError;
OpenAI.InternalServerError = InternalServerError;
OpenAI.PermissionDeniedError = PermissionDeniedError;
OpenAI.UnprocessableEntityError = UnprocessableEntityError;
OpenAI.toFile = toFile;
OpenAI.fileFromPath = fileFromPath;
OpenAI.Completions = Completions3;
OpenAI.Chat = Chat;
OpenAI.ChatCompletionsPage = ChatCompletionsPage;
OpenAI.Embeddings = Embeddings;
OpenAI.Files = Files2;
OpenAI.FileObjectsPage = FileObjectsPage;
OpenAI.Images = Images;
OpenAI.Audio = Audio;
OpenAI.Moderations = Moderations;
OpenAI.Models = Models;
OpenAI.ModelsPage = ModelsPage;
OpenAI.FineTuning = FineTuning;
OpenAI.Graders = Graders2;
OpenAI.VectorStores = VectorStores;
OpenAI.VectorStoresPage = VectorStoresPage;
OpenAI.VectorStoreSearchResponsesPage = VectorStoreSearchResponsesPage;
OpenAI.Beta = Beta;
OpenAI.Batches = Batches;
OpenAI.BatchesPage = BatchesPage;
OpenAI.Uploads = Uploads;
OpenAI.Responses = Responses;
OpenAI.Evals = Evals;
OpenAI.EvalListResponsesPage = EvalListResponsesPage;
OpenAI.Containers = Containers;
OpenAI.ContainerListResponsesPage = ContainerListResponsesPage;
var openai_default = OpenAI;

// src/openai-client.ts
var OpenAIClient = class {
  constructor(settings) {
    this.settings = settings;
    this.client = new openai_default({
      apiKey: this.settings.openaiApiKey,
      dangerouslyAllowBrowser: true
    });
  }
  updateSettings(settings) {
    this.settings = settings;
    this.client = new openai_default({
      apiKey: this.settings.openaiApiKey,
      dangerouslyAllowBrowser: true
    });
  }
  async analyzeImage(imageData, action, noteContext) {
    if (!this.settings.openaiApiKey) {
      throw new Error("OpenAI API key not configured");
    }
    const prompt = this.getPromptForAction(action, noteContext);
    try {
      const response = await this.makeAPICall(imageData, prompt, this.settings.preferredModel);
      return response;
    } catch (error) {
      if (error instanceof openai_default.APIError && error.code === "model_not_found") {
        console.warn(`Model ${this.settings.preferredModel} not found, falling back to gpt-4o-mini`);
        return await this.makeAPICall(imageData, prompt, "gpt-4o-mini");
      }
      throw error;
    }
  }
  async makeAPICall(imageData, prompt, model) {
    var _a2, _b;
    const response = await this.client.chat.completions.create({
      model,
      messages: [{
        role: "user",
        content: [
          { type: "text", text: prompt },
          {
            type: "image_url",
            image_url: {
              url: imageData,
              detail: "auto"
            }
          }
        ]
      }],
      max_tokens: 1500,
      temperature: 0.1
    });
    const content = (_b = (_a2 = response.choices[0]) == null ? void 0 : _a2.message) == null ? void 0 : _b.content;
    if (!content) {
      throw new Error("Invalid response from OpenAI API");
    }
    return content;
  }
  getPromptForAction(action, noteContext) {
    let contextSection = "";
    if (noteContext) {
      contextSection = `

**NOTE CONTEXT:**
`;
      contextSection += `This image is embedded in a note titled "${noteContext.noteName}".
`;
      if (noteContext.textBefore.trim()) {
        contextSection += `
**Text BEFORE this image:**
${noteContext.textBefore}
`;
      }
      if (noteContext.textAfter.trim()) {
        contextSection += `
**Text AFTER this image:**
${noteContext.textAfter}
`;
      }
      contextSection += `
Please consider this context when analyzing the image to provide more relevant and contextualized insights.
`;
    }
    const prompts = {
      "smart-summary": [
        "Analyze this image and provide a focused 2-3 sentence summary that captures the core message and key takeaways.",
        "Prioritize actionable information, important data, and context that would be valuable for future reference in research notes.",
        "If there are specific metrics, findings, or conclusions shown, highlight them.",
        noteContext ? "Consider how this image relates to and builds upon the surrounding note content." : ""
      ].filter(Boolean).join(" ") + contextSection,
      "extract-facts": [
        "Extract specific, verifiable facts and data points from this image.",
        "Format as a bulleted list, grouping related facts together where appropriate.",
        "Do not assume the presence of particular types of information\u2014capture only what is clearly shown or stated.",
        "Add brief context to each fact if it aids clarity.",
        noteContext ? "Pay attention to how these facts relate to the surrounding note context and any ongoing narrative or discussion." : ""
      ].filter(Boolean).join(" ") + contextSection,
      "generate-description": [
        "Create a comprehensive visual description of this image for accessibility and archival purposes.",
        "Structure your response to include:",
        "1) Overall composition and layout,",
        "2) Primary visual elements and their relationships,",
        "3) Text content and its hierarchy,",
        "4) Colors, visual style, and formatting,",
        "5) Context clues and implied meaning.",
        "Write as if describing to someone who cannot see the image.",
        noteContext ? "Consider how this visual content fits within the broader note context and purpose." : ""
      ].filter(Boolean).join(" ") + contextSection,
      "identify-text": [
        "Perform OCR extraction of ALL visible text in this image.",
        "Maintain the original formatting, hierarchy, and structure.",
        "Organize the output to reflect:",
        "1) Headers and titles (with hierarchy levels),",
        "2) Body text (paragraphs and sentences),",
        "3) Labels and captions,",
        "4) Data in tables or lists,",
        "5) Any annotations or metadata.",
        "Use markdown formatting to preserve structure and indicate text styling where relevant.",
        noteContext ? "Consider how this extracted text connects to and continues the surrounding note content." : ""
      ].filter(Boolean).join(" ") + contextSection,
      "analyze-structure": [
        "Examine the organizational structure, information architecture, or workflow depicted in this image.",
        "Identify:",
        "1) Main components and their functions,",
        "2) Hierarchical relationships and dependencies,",
        "3) Information flow or process sequence,",
        "4) Groupings and categorizations,",
        "5) Key connections and interfaces.",
        "Explain how the structure serves its purpose and note any patterns or design principles evident.",
        noteContext ? "Relate this structural analysis to the broader context and themes present in the surrounding note content." : ""
      ].filter(Boolean).join(" ") + contextSection,
      "quick-insights": [
        "Provide 4-6 actionable insights that go beyond surface-level observations.",
        "Look for:",
        "1) Patterns or trends that might not be immediately obvious,",
        "2) Implications or consequences of what's shown,",
        "3) Connections to broader concepts or contexts,",
        "4) Potential applications or use cases,",
        "5) Notable details that add significant value.",
        "Focus on insights that would be useful for someone building knowledge or making decisions.",
        noteContext ? "Draw connections between the image content and the surrounding note context to provide more targeted insights." : ""
      ].filter(Boolean).join(" ") + contextSection,
      "analyze-data-viz": [
        "Analyze this data visualization, chart, graph, or diagram in detail.",
        "Provide:",
        "1) Data interpretation - what the numbers/trends show and their significance,",
        "2) Methodology - how the data is presented and any limitations,",
        "3) Key findings - the most important takeaways and conclusions,",
        "4) Context - what this data suggests about the broader topic,",
        "5) Actionable implications - how this information could be used or what decisions it supports.",
        "Focus on making the data meaningful and accessible.",
        noteContext ? "Connect this data analysis to the broader narrative and context established in the surrounding note content." : ""
      ].filter(Boolean).join(" ") + contextSection,
      "extract-meeting-participants": [
        "Extract and list all meeting participants visible in this screenshot.",
        "Look for:",
        "1) Participant names (from name tags, labels, or video tiles),",
        "2) Participant avatars or profile pictures,",
        "3) Status indicators (muted, camera on/off, hand raised, etc.),",
        "4) Roles or titles if visible,",
        "5) Host/presenter indicators.",
        "Format as a clean bulleted list with names - surround any firstName lastName combinations with wiki brackets, e.g. [[John Doe]] - and any relevant status information.",
        "If no participants are clearly identifiable, indicate what meeting interface elements are visible instead.",
        noteContext ? "Consider the meeting context from the surrounding note content, such as meeting agenda or previous discussion topics." : ""
      ].filter(Boolean).join(" ") + contextSection,
      "analyze-meeting-content": [
        "Analyze this meeting screenshot comprehensively, focusing on both the shared content and meeting context.",
        "Provide:",
        "1) **Shared Content Analysis** - describe any presentations, documents, or screen shares visible, including key points, slide titles, charts, or data,",
        "2) **Meeting Context** - identify the meeting platform (Zoom, Teams, etc.), meeting layout, and participant information,",
        "3) **Key Information** - extract important text, data, or decisions from the shared content,",
        "4) **Meeting Dynamics** - note any visible interactions like chat messages, raised hands, or presenter mode,",
        "5) **Action Items** - identify any explicit tasks, decisions, or next steps mentioned in the content.",
        "Structure the response to be useful for meeting notes and follow-up.",
        noteContext ? "Reference the surrounding note context to understand where this meeting fits in the broader discussion or project timeline." : ""
      ].filter(Boolean).join(" ") + contextSection
    };
    return prompts[action];
  }
  async validateApiKey() {
    if (!this.client) {
      return false;
    }
    try {
      await this.client.models.list();
      return true;
    } catch (error) {
      console.error("API Key validation error:", error);
      return false;
    }
  }
};

// src/results-modal.ts
var import_obsidian2 = require("obsidian");
var ResultsModal = class extends import_obsidian2.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  show(result, editor, view) {
    this.result = result;
    this.editor = editor;
    this.view = view;
    this.open();
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: `Vision Insights: ${this.getActionTitle(this.result.action)}` });
    const imageInfo = contentEl.createDiv("image-info");
    imageInfo.createEl("p", {
      text: `\u{1F4F8} Image: ${this.result.imageInfo.filename}`,
      cls: "image-filename"
    });
    if (this.result.cached) {
      imageInfo.createEl("span", {
        text: "\u26A1 Cached result",
        cls: "cached-indicator"
      });
    }
    const resultContent = contentEl.createDiv("result-content");
    resultContent.createEl("div", {
      text: this.result.content,
      cls: "analysis-result"
    });
    const buttonContainer = contentEl.createDiv("button-container");
    const primaryRow = buttonContainer.createDiv("button-row");
    new import_obsidian2.Setting(primaryRow).addButton((btn) => btn.setButtonText("Insert at Cursor").setCta().onClick(() => this.insertResult("cursor"))).addButton((btn) => btn.setButtonText("Copy to Clipboard").onClick(() => this.copyToClipboard()));
    const secondaryRow = buttonContainer.createDiv("button-row");
    new import_obsidian2.Setting(secondaryRow).addButton((btn) => btn.setButtonText("Insert as Quote").onClick(() => this.insertResult("quote"))).addButton((btn) => btn.setButtonText("Insert as Callout").onClick(() => this.insertResult("callout"))).addButton((btn) => btn.setButtonText("Save to New Note").onClick(() => this.insertResult("new-note")));
  }
  getActionTitle(action) {
    const titles = {
      "smart-summary": "Smart Summary",
      "extract-facts": "Key Facts",
      "generate-description": "Description",
      "identify-text": "Text Content",
      "analyze-structure": "Structure Analysis",
      "quick-insights": "Quick Insights"
    };
    return titles[action] || action;
  }
  async insertResult(mode) {
    try {
      const formattedContent = this.formatContent(this.result.content, mode);
      switch (mode) {
        case "cursor":
          this.editor.replaceSelection(formattedContent);
          break;
        case "quote":
          this.editor.replaceSelection(`> ${formattedContent.replace(/\n/g, "\n> ")}
> 
> *Source: ${this.result.imageInfo.filename}*`);
          break;
        case "callout":
          const calloutType = this.getCalloutType(this.result.action);
          this.editor.replaceSelection(`> [!${calloutType}] ${this.getActionTitle(this.result.action)}
> ${formattedContent.replace(/\n/g, "\n> ")}`);
          break;
        case "new-note":
          await this.createNewNote();
          break;
        case "daily-note":
          await this.appendToDailyNote();
          break;
      }
      new import_obsidian2.Notice(`Inserted ${this.getActionTitle(this.result.action)} result`);
      this.close();
    } catch (error) {
      new import_obsidian2.Notice(`Error inserting result: ${error.message}`);
    }
  }
  formatContent(content, mode) {
    return content.trim();
  }
  getCalloutType(action) {
    const calloutTypes = {
      "smart-summary": "summary",
      "extract-facts": "info",
      "generate-description": "note",
      "identify-text": "quote",
      "analyze-structure": "tip",
      "quick-insights": "example"
    };
    return calloutTypes[action] || "info";
  }
  async copyToClipboard() {
    await navigator.clipboard.writeText(this.result.content);
    new import_obsidian2.Notice("Copied to clipboard");
  }
  async createNewNote() {
    const timestamp = new Date().toISOString().split("T")[0];
    const filename = `Vision Analysis - ${this.result.imageInfo.filename} - ${timestamp}.md`;
    const content = `# Vision Analysis: ${this.getActionTitle(this.result.action)}

**Image:** ${this.result.imageInfo.filename}
**Analysis:** ${this.getActionTitle(this.result.action)}
**Date:** ${new Date().toLocaleDateString()}

## Results

${this.result.content}

---
*Generated by Vision Insights plugin*`;
    await this.app.vault.create(filename, content);
    new import_obsidian2.Notice(`Created note: ${filename}`);
  }
  async appendToDailyNote() {
    new import_obsidian2.Notice("Daily note integration not yet implemented");
  }
};

// src/settings.ts
var import_obsidian3 = require("obsidian");
var VisionInsightsSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    console.log("Vision Insights: Displaying settings tab.");
    try {
      containerEl.createEl("h2", { text: "Vision Insights Settings" });
      new import_obsidian3.Setting(containerEl).setName("OpenAI API Key").setDesc("Your OpenAI API key for vision analysis. Get one at https://platform.openai.com").addText((text) => text.setPlaceholder("sk-...").setValue(this.plugin.settings.openaiApiKey).onChange(async (value) => {
        this.plugin.settings.openaiApiKey = value;
        await this.plugin.saveSettings();
      }));
      new import_obsidian3.Setting(containerEl).setName("Test API Key").setDesc("Verify that your API key is valid").addButton((button) => button.setButtonText("Test Connection").onClick(async () => {
        button.setButtonText("Testing...");
        button.setDisabled(true);
        try {
          const isValid = await this.plugin.openaiClient.validateApiKey();
          if (isValid) {
            new import_obsidian3.Notice("\u2705 API key is valid");
          } else {
            new import_obsidian3.Notice("\u274C API key is invalid");
          }
        } catch (error) {
          new import_obsidian3.Notice(`\u274C Error testing API key: ${error.message}`);
        } finally {
          button.setButtonText("Test Connection");
          button.setDisabled(false);
        }
      }));
      new import_obsidian3.Setting(containerEl).setName("Preferred Model").setDesc("Choose the OpenAI model for image analysis. GPT-4.1 mini is recommended for best performance.").addDropdown((dropdown) => dropdown.addOption("gpt-4.1-mini", "GPT-4.1 Mini (Recommended)").addOption("gpt-4o-mini", "GPT-4o Mini").addOption("gpt-4o", "GPT-4o (Premium)").setValue(this.plugin.settings.preferredModel).onChange(async (value) => {
        this.plugin.settings.preferredModel = value;
        await this.plugin.saveSettings();
      }));
      containerEl.createEl("h3", { text: "Enabled Actions" });
      containerEl.createEl("p", {
        text: "Choose which analysis actions to show in the context menu:",
        cls: "setting-item-description"
      });
      const actionConfigs = [
        { action: "smart-summary", title: "Smart Summary", desc: "Generate concise summaries of image content" },
        { action: "extract-facts", title: "Extract Key Facts", desc: "List important data points and information" },
        { action: "generate-description", title: "Generate Description", desc: "Create detailed accessibility descriptions" },
        { action: "identify-text", title: "Identify Text (OCR)", desc: "Extract and transcribe readable text" },
        { action: "analyze-structure", title: "Analyze Structure", desc: "Describe layout and organizational structure" },
        { action: "quick-insights", title: "Quick Insights", desc: "Provide notable observations and insights" },
        { action: "analyze-data-viz", title: "Analyze Data Visualization", desc: "Specialized analysis for charts, graphs, and data visualizations" },
        { action: "extract-meeting-participants", title: "Extract Meeting Participants", desc: "Extract list of participants from meeting screenshots" },
        { action: "analyze-meeting-content", title: "Analyze Meeting Content", desc: "Analyze meeting screens including presentations, shared content, and participant information" }
      ];
      for (const config of actionConfigs) {
        new import_obsidian3.Setting(containerEl).setName(config.title).setDesc(config.desc).addToggle((toggle) => toggle.setValue(this.plugin.settings.enabledActions.includes(config.action)).onChange(async (value) => {
          if (value) {
            if (!this.plugin.settings.enabledActions.includes(config.action)) {
              this.plugin.settings.enabledActions.push(config.action);
            }
          } else {
            this.plugin.settings.enabledActions = this.plugin.settings.enabledActions.filter(
              (action) => action !== config.action
            );
          }
          await this.plugin.saveSettings();
        }));
      }
      containerEl.createEl("h3", { text: "Insertion Behavior" });
      new import_obsidian3.Setting(containerEl).setName("Default Insertion Mode").setDesc("How to insert analysis results into your notes by default").addDropdown((dropdown) => dropdown.addOption("cursor", "At Cursor Position").addOption("quote", "As Blockquote").addOption("callout", "As Callout").addOption("new-note", "Create New Note").addOption("daily-note", "Append to Daily Note").setValue(this.plugin.settings.defaultInsertionMode).onChange(async (value) => {
        this.plugin.settings.defaultInsertionMode = value;
        await this.plugin.saveSettings();
      }));
      containerEl.createEl("h3", { text: "Performance" });
      new import_obsidian3.Setting(containerEl).setName("Enable Caching").setDesc("Cache analysis results to avoid repeat API calls for the same image and action").addToggle((toggle) => toggle.setValue(this.plugin.settings.cacheResults).onChange(async (value) => {
        this.plugin.settings.cacheResults = value;
        await this.plugin.saveSettings();
        this.display();
      }));
      if (this.plugin.settings.cacheResults) {
        new import_obsidian3.Setting(containerEl).setName("Cache Duration (hours)").setDesc("How long to keep cached results before they expire").addSlider((slider) => slider.setLimits(1, 168, 1).setValue(this.plugin.settings.maxCacheAge).setDynamicTooltip().onChange(async (value) => {
          this.plugin.settings.maxCacheAge = value;
          await this.plugin.saveSettings();
        }));
        const stats = this.plugin.cacheManager.getCacheStats();
        new import_obsidian3.Setting(containerEl).setName("Cache Statistics").setDesc(`Valid entries: ${stats.validEntries}, Expired: ${stats.expiredEntries}, Total: ${stats.totalEntries}`).addButton((button) => button.setButtonText("Clear Cache").setWarning().onClick(() => {
          this.plugin.cacheManager.clearCache();
          new import_obsidian3.Notice("Cache cleared");
          this.display();
        }));
      }
      new import_obsidian3.Setting(containerEl).setName("Rate Limit Delay (ms)").setDesc("Minimum delay between API requests to avoid rate limiting").addSlider((slider) => slider.setLimits(100, 2e3, 100).setValue(this.plugin.settings.rateLimitDelay).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.rateLimitDelay = value;
        await this.plugin.saveSettings();
      }));
      containerEl.createEl("h3", { text: "Usage Tips" });
      const tipsContainer = containerEl.createDiv("tips-container");
      tipsContainer.createEl("p", { text: "\u2022 Right-click on any image in your notes to access Vision Insights" });
      tipsContainer.createEl("p", { text: "\u2022 Works with both [[image.png]] and ![](image.png) syntax" });
      tipsContainer.createEl("p", { text: "\u2022 Results can be inserted in multiple formats for different use cases" });
      tipsContainer.createEl("p", { text: "\u2022 Enable caching to save on API calls for repeated analysis" });
    } catch (error) {
      console.error("Vision Insights: Error displaying settings tab:", error);
      containerEl.createEl("h3", { text: "Error Loading Settings" });
      containerEl.createEl("p", { text: "Could not display the settings for Vision Insights. Please check the developer console for more details." });
    }
  }
};

// src/cache-manager.ts
var CacheManager = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.cache = /* @__PURE__ */ new Map();
    this.loadCache();
  }
  getCachedResult(imageInfo, action, noteContext) {
    if (!this.plugin.settings.cacheResults) {
      return null;
    }
    const cacheKey = this.generateCacheKey(imageInfo, action, noteContext);
    const entry = this.cache.get(cacheKey);
    if (!entry) {
      return null;
    }
    const maxAge = this.plugin.settings.maxCacheAge * 60 * 60 * 1e3;
    if (Date.now() - entry.timestamp > maxAge) {
      this.cache.delete(cacheKey);
      this.saveCache();
      return null;
    }
    return entry.result;
  }
  cacheResult(imageInfo, action, result, noteContext) {
    if (!this.plugin.settings.cacheResults) {
      return;
    }
    const cacheKey = this.generateCacheKey(imageInfo, action, noteContext);
    const entry = {
      result,
      timestamp: Date.now(),
      action,
      imageHash: this.hashImageInfo(imageInfo)
    };
    this.cache.set(cacheKey, entry);
    this.saveCache();
  }
  generateCacheKey(imageInfo, action, noteContext) {
    const imageHash = this.hashImageInfo(imageInfo);
    let key = `${imageHash}-${action}`;
    if (noteContext) {
      const contextHash = this.hashNoteContext(noteContext);
      key += `-${contextHash}`;
    }
    return key;
  }
  hashImageInfo(imageInfo) {
    const hashInput = `${imageInfo.path}-${imageInfo.filename}-${imageInfo.mimeType}`;
    return hashString(hashInput);
  }
  hashNoteContext(noteContext) {
    const contextInput = `${noteContext.noteName}-${noteContext.textBefore.substring(0, 200)}-${noteContext.textAfter.substring(0, 200)}`;
    return hashString(contextInput);
  }
  clearCache() {
    this.cache.clear();
    this.saveCache();
  }
  getCacheStats() {
    const now = Date.now();
    const maxAge = this.plugin.settings.maxCacheAge * 60 * 60 * 1e3;
    let validEntries = 0;
    let expiredEntries = 0;
    for (const entry of this.cache.values()) {
      if (now - entry.timestamp > maxAge) {
        expiredEntries++;
      } else {
        validEntries++;
      }
    }
    return { validEntries, expiredEntries, totalEntries: this.cache.size };
  }
  async loadCache() {
    try {
      const data = await this.plugin.loadData();
      if (data == null ? void 0 : data.cache) {
        this.cache = new Map(Object.entries(data.cache));
      }
    } catch (error) {
      console.error("Error loading cache:", error);
    }
  }
  async saveCache() {
    try {
      const data = await this.plugin.loadData() || {};
      data.cache = Object.fromEntries(this.cache);
      await this.plugin.saveData(data);
    } catch (error) {
      console.error("Error saving cache:", error);
    }
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  openaiApiKey: "",
  preferredModel: "gpt-4.1-mini",
  enabledActions: [
    "smart-summary",
    "extract-facts",
    "generate-description",
    "identify-text",
    "analyze-structure",
    "quick-insights",
    "analyze-data-viz",
    "extract-meeting-participants",
    "analyze-meeting-content"
  ],
  defaultInsertionMode: "cursor",
  cacheResults: true,
  maxCacheAge: 24,
  rateLimitDelay: 500
};
var VisionInsightsPlugin = class extends import_obsidian4.Plugin {
  constructor() {
    super(...arguments);
    this.lastRequestTime = 0;
  }
  async onload() {
    console.log("Vision Insights: Loading Plugin...");
    try {
      await this.loadSettings();
      this.imageHandler = new ImageHandler(this.app, this.settings);
      this.openaiClient = new OpenAIClient(this.settings);
      this.resultsModal = new ResultsModal(this.app, this);
      this.cacheManager = new CacheManager(this);
      this.registerContextMenus();
      console.log("Vision Insights: Context menu handlers registered.");
      this.addSettingTab(new VisionInsightsSettingTab(this.app, this));
      console.log("Vision Insights: Settings tab added.");
      this.addCommand({
        id: "test-vision-analysis",
        name: "Test Vision Analysis",
        callback: () => new import_obsidian4.Notice("Vision Insights plugin loaded successfully!")
      });
      console.log("Vision Insights: Plugin loaded successfully.");
    } catch (error) {
      console.error("Vision Insights: Fatal error during onload:", error);
    }
  }
  onunload() {
    console.log("Unloading Vision Insights Plugin");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    if (this.openaiClient) {
      this.openaiClient.updateSettings(this.settings);
    }
    if (this.imageHandler) {
      this.imageHandler.updateSettings(this.settings);
    }
  }
  registerContextMenus() {
    this.registerEvent(
      this.app.workspace.on(
        "editor-menu",
        this.handleEditorMenu.bind(this)
      )
    );
    this.registerEvent(
      this.app.workspace.on(
        "file-menu",
        (menu, file) => {
          if (file instanceof import_obsidian4.TFile && file.extension.match(/^(png|jpg|jpeg|gif|webp|bmp|tiff)$/i)) {
            const imageInfo = this.imageHandler.createImageInfoFromFile(file);
            if (imageInfo) {
              const activeView = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
              if (activeView) {
                this.addVisionMenuItems(menu, imageInfo, activeView.editor, activeView);
              }
            }
          }
        }
      )
    );
  }
  async handleEditorMenu(menu, editor, view) {
    const imageInfo = await this.imageHandler.detectImageAtCursor(editor, view);
    if (imageInfo) {
      this.addVisionMenuItems(menu, imageInfo, editor, view);
    }
  }
  addVisionMenuItems(menu, imageInfo, editor, view) {
    if (!this.settings.enabledActions.length)
      return;
    menu.addSeparator();
    const actionConfigs = [
      { action: "smart-summary", title: "\u{1F4DD} Smart Summary", icon: "file-text" },
      { action: "extract-facts", title: "\u{1F4CA} Extract Key Facts", icon: "list" },
      { action: "generate-description", title: "\u{1F5BC}\uFE0F Generate Description", icon: "image" },
      { action: "identify-text", title: "\u{1F524} Identify Text (OCR)", icon: "type" },
      { action: "analyze-structure", title: "\u{1F3D7}\uFE0F Analyze Structure", icon: "network" },
      { action: "quick-insights", title: "\u{1F4A1} Quick Insights", icon: "lightbulb" },
      { action: "analyze-data-viz", title: "\u{1F4C8} Analyze Data Visualization", icon: "bar-chart" },
      { action: "extract-meeting-participants", title: "\u{1F465} Extract Meeting Participants", icon: "users" },
      { action: "analyze-meeting-content", title: "\u{1F3A5} Analyze Meeting Content", icon: "video" }
    ];
    for (const config of actionConfigs) {
      if (this.settings.enabledActions.includes(config.action)) {
        menu.addItem((item) => {
          item.setTitle(config.title).setIcon(config.icon).onClick(
            () => this.executeVisionAction(
              config.action,
              imageInfo,
              editor,
              view
            )
          );
        });
      }
    }
    menu.addSeparator();
  }
  async executeVisionAction(action, imageInfo, editor, view) {
    try {
      await this.enforceRateLimit();
      new import_obsidian4.Notice(`Analyzing image with ${action.replace(/-/g, " ")}...`);
      const noteContext = this.imageHandler.extractNoteContext(editor, view, imageInfo);
      const cachedResult = this.cacheManager.getCachedResult(imageInfo, action, noteContext);
      if (cachedResult) {
        new import_obsidian4.Notice("Showing cached result.");
        this.showResults(
          {
            action,
            content: cachedResult,
            imageInfo,
            timestamp: Date.now(),
            cached: true
          },
          editor,
          view
        );
        return;
      }
      const imageData = await this.imageHandler.prepareImageForAPI(imageInfo);
      const result = await this.openaiClient.analyzeImage(imageData, action, noteContext);
      this.cacheManager.cacheResult(imageInfo, action, result, noteContext);
      this.showResults(
        {
          action,
          content: result,
          imageInfo,
          timestamp: Date.now(),
          cached: false
        },
        editor,
        view
      );
    } catch (error) {
      console.error("Vision analysis error:", error);
      new import_obsidian4.Notice(`Error analyzing image: ${error.message}`);
    }
  }
  async enforceRateLimit() {
    const now = Date.now();
    const timeSinceLastRequest = now - this.lastRequestTime;
    if (timeSinceLastRequest < this.settings.rateLimitDelay) {
      const waitTime = this.settings.rateLimitDelay - timeSinceLastRequest;
      await new Promise((resolve) => setTimeout(resolve, waitTime));
    }
    this.lastRequestTime = Date.now();
  }
  showResults(result, editor, view) {
    this.resultsModal.show(result, editor, view);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzcmMvaW1hZ2UtaGFuZGxlci50cyIsICJzcmMvdXRpbHMudHMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9zcmMvaW50ZXJuYWwvcXMvZm9ybWF0cy50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9pbnRlcm5hbC9xcy91dGlscy50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9pbnRlcm5hbC9xcy9zdHJpbmdpZnkudHMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9zcmMvdmVyc2lvbi50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9fc2hpbXMvcmVnaXN0cnkudHMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9zcmMvX3NoaW1zL011bHRpcGFydEJvZHkudHMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9zcmMvX3NoaW1zL3dlYi1ydW50aW1lLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvX3NoaW1zL2luZGV4Lm1qcyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9lcnJvci50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9pbnRlcm5hbC9kZWNvZGVycy9saW5lLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL2ludGVybmFsL3N0cmVhbS11dGlscy50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9zdHJlYW1pbmcudHMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9zcmMvdXBsb2Fkcy50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9jb3JlLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL3BhZ2luYXRpb24udHMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9zcmMvcmVzb3VyY2UudHMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9zcmMvcmVzb3VyY2VzL2NoYXQvY29tcGxldGlvbnMvbWVzc2FnZXMudHMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9zcmMvcmVzb3VyY2VzL2NoYXQvY29tcGxldGlvbnMvY29tcGxldGlvbnMudHMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9zcmMvcmVzb3VyY2VzL2NoYXQvY2hhdC50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9yZXNvdXJjZXMvYXVkaW8vc3BlZWNoLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL3Jlc291cmNlcy9hdWRpby90cmFuc2NyaXB0aW9ucy50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9yZXNvdXJjZXMvYXVkaW8vdHJhbnNsYXRpb25zLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL3Jlc291cmNlcy9hdWRpby9hdWRpby50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9yZXNvdXJjZXMvYmF0Y2hlcy50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9saWIvRXZlbnRTdHJlYW0udHMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9zcmMvbGliL0Fzc2lzdGFudFN0cmVhbS50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9yZXNvdXJjZXMvYmV0YS9hc3Npc3RhbnRzLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL2xpYi9SdW5uYWJsZUZ1bmN0aW9uLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL2xpYi9jaGF0Q29tcGxldGlvblV0aWxzLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL2xpYi9wYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9zcmMvbGliL0Fic3RyYWN0Q2hhdENvbXBsZXRpb25SdW5uZXIudHMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9zcmMvbGliL0NoYXRDb21wbGV0aW9uUnVubmVyLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL192ZW5kb3IvcGFydGlhbC1qc29uLXBhcnNlci9wYXJzZXIudHMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9zcmMvbGliL0NoYXRDb21wbGV0aW9uU3RyZWFtLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL2xpYi9DaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lci50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9yZXNvdXJjZXMvYmV0YS9jaGF0L2NvbXBsZXRpb25zLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL3Jlc291cmNlcy9iZXRhL2NoYXQvY2hhdC50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9yZXNvdXJjZXMvYmV0YS9yZWFsdGltZS9zZXNzaW9ucy50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9yZXNvdXJjZXMvYmV0YS9yZWFsdGltZS90cmFuc2NyaXB0aW9uLXNlc3Npb25zLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL3Jlc291cmNlcy9iZXRhL3JlYWx0aW1lL3JlYWx0aW1lLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvbWVzc2FnZXMudHMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9zcmMvcmVzb3VyY2VzL2JldGEvdGhyZWFkcy9ydW5zL3N0ZXBzLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvcnVucy9ydW5zLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvdGhyZWFkcy50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9yZXNvdXJjZXMvYmV0YS9iZXRhLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL3Jlc291cmNlcy9jb21wbGV0aW9ucy50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9yZXNvdXJjZXMvY29udGFpbmVycy9maWxlcy9jb250ZW50LnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL3Jlc291cmNlcy9jb250YWluZXJzL2ZpbGVzL2ZpbGVzLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL3Jlc291cmNlcy9jb250YWluZXJzL2NvbnRhaW5lcnMudHMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9zcmMvcmVzb3VyY2VzL2VtYmVkZGluZ3MudHMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9zcmMvcmVzb3VyY2VzL2V2YWxzL3J1bnMvb3V0cHV0LWl0ZW1zLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL3Jlc291cmNlcy9ldmFscy9ydW5zL3J1bnMudHMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9zcmMvcmVzb3VyY2VzL2V2YWxzL2V2YWxzLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL3Jlc291cmNlcy9maWxlcy50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9yZXNvdXJjZXMvZmluZS10dW5pbmcvbWV0aG9kcy50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9yZXNvdXJjZXMvZmluZS10dW5pbmcvYWxwaGEvZ3JhZGVycy50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9yZXNvdXJjZXMvZmluZS10dW5pbmcvYWxwaGEvYWxwaGEudHMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9zcmMvcmVzb3VyY2VzL2ZpbmUtdHVuaW5nL2NoZWNrcG9pbnRzL3Blcm1pc3Npb25zLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL3Jlc291cmNlcy9maW5lLXR1bmluZy9jaGVja3BvaW50cy9jaGVja3BvaW50cy50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9yZXNvdXJjZXMvZmluZS10dW5pbmcvam9icy9jaGVja3BvaW50cy50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9yZXNvdXJjZXMvZmluZS10dW5pbmcvam9icy9qb2JzLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL3Jlc291cmNlcy9maW5lLXR1bmluZy9maW5lLXR1bmluZy50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9yZXNvdXJjZXMvZ3JhZGVycy9ncmFkZXItbW9kZWxzLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL3Jlc291cmNlcy9ncmFkZXJzL2dyYWRlcnMudHMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9zcmMvcmVzb3VyY2VzL2ltYWdlcy50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9yZXNvdXJjZXMvbW9kZWxzLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL3Jlc291cmNlcy9tb2RlcmF0aW9ucy50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9saWIvUmVzcG9uc2VzUGFyc2VyLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL3Jlc291cmNlcy9yZXNwb25zZXMvaW5wdXQtaXRlbXMudHMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9zcmMvbGliL3Jlc3BvbnNlcy9SZXNwb25zZVN0cmVhbS50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9yZXNvdXJjZXMvcmVzcG9uc2VzL3Jlc3BvbnNlcy50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9yZXNvdXJjZXMvdXBsb2Fkcy9wYXJ0cy50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9yZXNvdXJjZXMvdXBsb2Fkcy91cGxvYWRzLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL2xpYi9VdGlsLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL3Jlc291cmNlcy92ZWN0b3Itc3RvcmVzL2ZpbGVzLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL3Jlc291cmNlcy92ZWN0b3Itc3RvcmVzL2ZpbGUtYmF0Y2hlcy50cyIsICJub2RlX21vZHVsZXMvb3BlbmFpL3NyYy9yZXNvdXJjZXMvdmVjdG9yLXN0b3Jlcy92ZWN0b3Itc3RvcmVzLnRzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvc3JjL2luZGV4LnRzIiwgInNyYy9vcGVuYWktY2xpZW50LnRzIiwgInNyYy9yZXN1bHRzLW1vZGFsLnRzIiwgInNyYy9zZXR0aW5ncy50cyIsICJzcmMvY2FjaGUtbWFuYWdlci50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBNZW51LCBFZGl0b3IsIE1hcmtkb3duVmlldywgTm90aWNlLCBURmlsZSwgTWVudUl0ZW0sIFRBYnN0cmFjdEZpbGUgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBWaXNpb25JbnNpZ2h0c1NldHRpbmdzLCBWaXNpb25BY3Rpb24sIEltYWdlSW5mbywgQW5hbHlzaXNSZXN1bHQgfSBmcm9tICcuL3NyYy90eXBlcyc7XG5pbXBvcnQgeyBJbWFnZUhhbmRsZXIgfSBmcm9tICcuL3NyYy9pbWFnZS1oYW5kbGVyJztcbmltcG9ydCB7IE9wZW5BSUNsaWVudCB9IGZyb20gJy4vc3JjL29wZW5haS1jbGllbnQnO1xuaW1wb3J0IHsgUmVzdWx0c01vZGFsIH0gZnJvbSAnLi9zcmMvcmVzdWx0cy1tb2RhbCc7XG5pbXBvcnQgeyBWaXNpb25JbnNpZ2h0c1NldHRpbmdUYWIgfSBmcm9tICcuL3NyYy9zZXR0aW5ncyc7XG5pbXBvcnQgeyBDYWNoZU1hbmFnZXIgfSBmcm9tICcuL3NyYy9jYWNoZS1tYW5hZ2VyJztcblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogVmlzaW9uSW5zaWdodHNTZXR0aW5ncyA9IHtcbiAgb3BlbmFpQXBpS2V5OiAnJyxcbiAgcHJlZmVycmVkTW9kZWw6ICdncHQtNC4xLW1pbmknLFxuICBlbmFibGVkQWN0aW9uczogW1xuICAgICdzbWFydC1zdW1tYXJ5JyxcbiAgICAnZXh0cmFjdC1mYWN0cycsXG4gICAgJ2dlbmVyYXRlLWRlc2NyaXB0aW9uJyxcbiAgICAnaWRlbnRpZnktdGV4dCcsXG4gICAgJ2FuYWx5emUtc3RydWN0dXJlJyxcbiAgICAncXVpY2staW5zaWdodHMnLFxuICAgICdhbmFseXplLWRhdGEtdml6JyxcbiAgICAnZXh0cmFjdC1tZWV0aW5nLXBhcnRpY2lwYW50cycsXG4gICAgJ2FuYWx5emUtbWVldGluZy1jb250ZW50J1xuICBdLFxuICBkZWZhdWx0SW5zZXJ0aW9uTW9kZTogJ2N1cnNvcicsXG4gIGNhY2hlUmVzdWx0czogdHJ1ZSxcbiAgbWF4Q2FjaGVBZ2U6IDI0LFxuICByYXRlTGltaXREZWxheTogNTAwXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWaXNpb25JbnNpZ2h0c1BsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gIHNldHRpbmdzITogVmlzaW9uSW5zaWdodHNTZXR0aW5ncztcbiAgaW1hZ2VIYW5kbGVyITogSW1hZ2VIYW5kbGVyO1xuICBvcGVuYWlDbGllbnQhOiBPcGVuQUlDbGllbnQ7XG4gIHJlc3VsdHNNb2RhbCE6IFJlc3VsdHNNb2RhbDtcbiAgY2FjaGVNYW5hZ2VyITogQ2FjaGVNYW5hZ2VyO1xuICBwcml2YXRlIGxhc3RSZXF1ZXN0VGltZTogbnVtYmVyID0gMDtcblxuICBhc3luYyBvbmxvYWQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc29sZS5sb2coJ1Zpc2lvbiBJbnNpZ2h0czogTG9hZGluZyBQbHVnaW4uLi4nKTtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXG4gICAgICB0aGlzLmltYWdlSGFuZGxlciA9IG5ldyBJbWFnZUhhbmRsZXIodGhpcy5hcHAsIHRoaXMuc2V0dGluZ3MpO1xuICAgICAgdGhpcy5vcGVuYWlDbGllbnQgPSBuZXcgT3BlbkFJQ2xpZW50KHRoaXMuc2V0dGluZ3MpO1xuICAgICAgdGhpcy5yZXN1bHRzTW9kYWwgPSBuZXcgUmVzdWx0c01vZGFsKHRoaXMuYXBwLCB0aGlzKTtcbiAgICAgIHRoaXMuY2FjaGVNYW5hZ2VyID0gbmV3IENhY2hlTWFuYWdlcih0aGlzKTtcblxuICAgICAgdGhpcy5yZWdpc3RlckNvbnRleHRNZW51cygpO1xuICAgICAgY29uc29sZS5sb2coJ1Zpc2lvbiBJbnNpZ2h0czogQ29udGV4dCBtZW51IGhhbmRsZXJzIHJlZ2lzdGVyZWQuJyk7XG5cbiAgICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgVmlzaW9uSW5zaWdodHNTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XG4gICAgICBjb25zb2xlLmxvZygnVmlzaW9uIEluc2lnaHRzOiBTZXR0aW5ncyB0YWIgYWRkZWQuJyk7XG5cbiAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgIGlkOiAndGVzdC12aXNpb24tYW5hbHlzaXMnLFxuICAgICAgICBuYW1lOiAnVGVzdCBWaXNpb24gQW5hbHlzaXMnLFxuICAgICAgICBjYWxsYmFjazogKCkgPT4gbmV3IE5vdGljZSgnVmlzaW9uIEluc2lnaHRzIHBsdWdpbiBsb2FkZWQgc3VjY2Vzc2Z1bGx5IScpXG4gICAgICB9KTtcbiAgICAgIGNvbnNvbGUubG9nKCdWaXNpb24gSW5zaWdodHM6IFBsdWdpbiBsb2FkZWQgc3VjY2Vzc2Z1bGx5LicpO1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1Zpc2lvbiBJbnNpZ2h0czogRmF0YWwgZXJyb3IgZHVyaW5nIG9ubG9hZDonLCBlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgb251bmxvYWQoKTogdm9pZCB7XG4gICAgY29uc29sZS5sb2coJ1VubG9hZGluZyBWaXNpb24gSW5zaWdodHMgUGx1Z2luJyk7XG4gIH1cblxuICBhc3luYyBsb2FkU2V0dGluZ3MoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XG4gIH1cblxuICBhc3luYyBzYXZlU2V0dGluZ3MoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcblxuICAgIGlmICh0aGlzLm9wZW5haUNsaWVudCkge1xuICAgICAgdGhpcy5vcGVuYWlDbGllbnQudXBkYXRlU2V0dGluZ3ModGhpcy5zZXR0aW5ncyk7XG4gICAgfVxuICAgIGlmICh0aGlzLmltYWdlSGFuZGxlcikge1xuICAgICAgdGhpcy5pbWFnZUhhbmRsZXIudXBkYXRlU2V0dGluZ3ModGhpcy5zZXR0aW5ncyk7XG4gICAgfVxuICB9XG5cbiAgcmVnaXN0ZXJDb250ZXh0TWVudXMoKTogdm9pZCB7XG4gICAgdGhpcy5yZWdpc3RlckV2ZW50KFxuICAgICAgdGhpcy5hcHAud29ya3NwYWNlLm9uKFxuICAgICAgICAnZWRpdG9yLW1lbnUnLFxuICAgICAgICB0aGlzLmhhbmRsZUVkaXRvck1lbnUuYmluZCh0aGlzKVxuICAgICAgKVxuICAgICk7XG5cbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXG4gICAgICB0aGlzLmFwcC53b3Jrc3BhY2Uub24oXG4gICAgICAgICdmaWxlLW1lbnUnLFxuICAgICAgICAobWVudTogTWVudSwgZmlsZTogVEFic3RyYWN0RmlsZSkgPT4ge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGZpbGUgaW5zdGFuY2VvZiBURmlsZSAmJlxuICAgICAgICAgICAgZmlsZS5leHRlbnNpb24ubWF0Y2goL14ocG5nfGpwZ3xqcGVnfGdpZnx3ZWJwfGJtcHx0aWZmKSQvaSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnN0IGltYWdlSW5mbzogSW1hZ2VJbmZvIHwgbnVsbCA9IHRoaXMuaW1hZ2VIYW5kbGVyLmNyZWF0ZUltYWdlSW5mb0Zyb21GaWxlKGZpbGUpO1xuICAgICAgICAgICAgaWYgKGltYWdlSW5mbykge1xuICAgICAgICAgICAgICBjb25zdCBhY3RpdmVWaWV3OiBNYXJrZG93blZpZXcgfCBudWxsID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcbiAgICAgICAgICAgICAgaWYgKGFjdGl2ZVZpZXcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFZpc2lvbk1lbnVJdGVtcyhtZW51LCBpbWFnZUluZm8sIGFjdGl2ZVZpZXcuZWRpdG9yLCBhY3RpdmVWaWV3KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICBhc3luYyBoYW5kbGVFZGl0b3JNZW51KG1lbnU6IE1lbnUsIGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBpbWFnZUluZm86IEltYWdlSW5mbyB8IG51bGwgPSBhd2FpdCB0aGlzLmltYWdlSGFuZGxlci5kZXRlY3RJbWFnZUF0Q3Vyc29yKGVkaXRvciwgdmlldyk7XG4gICAgaWYgKGltYWdlSW5mbykge1xuICAgICAgdGhpcy5hZGRWaXNpb25NZW51SXRlbXMobWVudSwgaW1hZ2VJbmZvLCBlZGl0b3IsIHZpZXcpO1xuICAgIH1cbiAgfVxuXG4gIGFkZFZpc2lvbk1lbnVJdGVtcyhcbiAgICBtZW51OiBNZW51LFxuICAgIGltYWdlSW5mbzogSW1hZ2VJbmZvLFxuICAgIGVkaXRvcjogRWRpdG9yLFxuICAgIHZpZXc6IE1hcmtkb3duVmlld1xuICApOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuc2V0dGluZ3MuZW5hYmxlZEFjdGlvbnMubGVuZ3RoKSByZXR1cm47XG5cbiAgICBtZW51LmFkZFNlcGFyYXRvcigpO1xuXG4gICAgY29uc3QgYWN0aW9uQ29uZmlnczogQXJyYXk8e1xuICAgICAgYWN0aW9uOiBWaXNpb25BY3Rpb247XG4gICAgICB0aXRsZTogc3RyaW5nO1xuICAgICAgaWNvbjogc3RyaW5nO1xuICAgIH0+ID0gW1xuICAgICAgeyBhY3Rpb246ICdzbWFydC1zdW1tYXJ5JywgdGl0bGU6ICdcdUQ4M0RcdURDREQgU21hcnQgU3VtbWFyeScsIGljb246ICdmaWxlLXRleHQnIH0sXG4gICAgICB7IGFjdGlvbjogJ2V4dHJhY3QtZmFjdHMnLCB0aXRsZTogJ1x1RDgzRFx1RENDQSBFeHRyYWN0IEtleSBGYWN0cycsIGljb246ICdsaXN0JyB9LFxuICAgICAgeyBhY3Rpb246ICdnZW5lcmF0ZS1kZXNjcmlwdGlvbicsIHRpdGxlOiAnXHVEODNEXHVEREJDXHVGRTBGIEdlbmVyYXRlIERlc2NyaXB0aW9uJywgaWNvbjogJ2ltYWdlJyB9LFxuICAgICAgeyBhY3Rpb246ICdpZGVudGlmeS10ZXh0JywgdGl0bGU6ICdcdUQ4M0RcdUREMjQgSWRlbnRpZnkgVGV4dCAoT0NSKScsIGljb246ICd0eXBlJyB9LFxuICAgICAgeyBhY3Rpb246ICdhbmFseXplLXN0cnVjdHVyZScsIHRpdGxlOiAnXHVEODNDXHVERkQ3XHVGRTBGIEFuYWx5emUgU3RydWN0dXJlJywgaWNvbjogJ25ldHdvcmsnIH0sXG4gICAgICB7IGFjdGlvbjogJ3F1aWNrLWluc2lnaHRzJywgdGl0bGU6ICdcdUQ4M0RcdURDQTEgUXVpY2sgSW5zaWdodHMnLCBpY29uOiAnbGlnaHRidWxiJyB9LFxuICAgICAgeyBhY3Rpb246ICdhbmFseXplLWRhdGEtdml6JywgdGl0bGU6ICdcdUQ4M0RcdURDQzggQW5hbHl6ZSBEYXRhIFZpc3VhbGl6YXRpb24nLCBpY29uOiAnYmFyLWNoYXJ0JyB9LFxuICAgICAgeyBhY3Rpb246ICdleHRyYWN0LW1lZXRpbmctcGFydGljaXBhbnRzJywgdGl0bGU6ICdcdUQ4M0RcdURDNjUgRXh0cmFjdCBNZWV0aW5nIFBhcnRpY2lwYW50cycsIGljb246ICd1c2VycycgfSxcbiAgICAgIHsgYWN0aW9uOiAnYW5hbHl6ZS1tZWV0aW5nLWNvbnRlbnQnLCB0aXRsZTogJ1x1RDgzQ1x1REZBNSBBbmFseXplIE1lZXRpbmcgQ29udGVudCcsIGljb246ICd2aWRlbycgfVxuICAgIF07XG5cbiAgICBmb3IgKGNvbnN0IGNvbmZpZyBvZiBhY3Rpb25Db25maWdzKSB7XG4gICAgICBpZiAodGhpcy5zZXR0aW5ncy5lbmFibGVkQWN0aW9ucy5pbmNsdWRlcyhjb25maWcuYWN0aW9uKSkge1xuICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW06IE1lbnVJdGVtKSA9PiB7XG4gICAgICAgICAgaXRlbVxuICAgICAgICAgICAgLnNldFRpdGxlKGNvbmZpZy50aXRsZSlcbiAgICAgICAgICAgIC5zZXRJY29uKGNvbmZpZy5pY29uKVxuICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT5cbiAgICAgICAgICAgICAgdGhpcy5leGVjdXRlVmlzaW9uQWN0aW9uKFxuICAgICAgICAgICAgICAgIGNvbmZpZy5hY3Rpb24sXG4gICAgICAgICAgICAgICAgaW1hZ2VJbmZvLFxuICAgICAgICAgICAgICAgIGVkaXRvcixcbiAgICAgICAgICAgICAgICB2aWV3XG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbnUuYWRkU2VwYXJhdG9yKCk7XG4gIH1cblxuICBhc3luYyBleGVjdXRlVmlzaW9uQWN0aW9uKFxuICAgIGFjdGlvbjogVmlzaW9uQWN0aW9uLFxuICAgIGltYWdlSW5mbzogSW1hZ2VJbmZvLFxuICAgIGVkaXRvcjogRWRpdG9yLFxuICAgIHZpZXc6IE1hcmtkb3duVmlld1xuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5lbmZvcmNlUmF0ZUxpbWl0KCk7XG5cbiAgICAgIG5ldyBOb3RpY2UoYEFuYWx5emluZyBpbWFnZSB3aXRoICR7YWN0aW9uLnJlcGxhY2UoLy0vZywgJyAnKX0uLi5gKTtcblxuICAgICAgLy8gRXh0cmFjdCBub3RlIGNvbnRleHQgYXJvdW5kIHRoZSBpbWFnZVxuICAgICAgY29uc3Qgbm90ZUNvbnRleHQgPSB0aGlzLmltYWdlSGFuZGxlci5leHRyYWN0Tm90ZUNvbnRleHQoZWRpdG9yLCB2aWV3LCBpbWFnZUluZm8pO1xuXG4gICAgICBjb25zdCBjYWNoZWRSZXN1bHQ6IHN0cmluZyB8IG51bGwgPSB0aGlzLmNhY2hlTWFuYWdlci5nZXRDYWNoZWRSZXN1bHQoaW1hZ2VJbmZvLCBhY3Rpb24sIG5vdGVDb250ZXh0KTtcbiAgICAgIGlmIChjYWNoZWRSZXN1bHQpIHtcbiAgICAgICAgbmV3IE5vdGljZSgnU2hvd2luZyBjYWNoZWQgcmVzdWx0LicpO1xuICAgICAgICB0aGlzLnNob3dSZXN1bHRzKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNhY2hlZFJlc3VsdCxcbiAgICAgICAgICAgIGltYWdlSW5mbyxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgIGNhY2hlZDogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZWRpdG9yLFxuICAgICAgICAgIHZpZXdcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpbWFnZURhdGE6IEFycmF5QnVmZmVyIHwgc3RyaW5nID0gYXdhaXQgdGhpcy5pbWFnZUhhbmRsZXIucHJlcGFyZUltYWdlRm9yQVBJKGltYWdlSW5mbyk7XG4gICAgICBjb25zdCByZXN1bHQ6IHN0cmluZyA9IGF3YWl0IHRoaXMub3BlbmFpQ2xpZW50LmFuYWx5emVJbWFnZShpbWFnZURhdGEsIGFjdGlvbiwgbm90ZUNvbnRleHQpO1xuXG4gICAgICB0aGlzLmNhY2hlTWFuYWdlci5jYWNoZVJlc3VsdChpbWFnZUluZm8sIGFjdGlvbiwgcmVzdWx0LCBub3RlQ29udGV4dCk7XG5cbiAgICAgIHRoaXMuc2hvd1Jlc3VsdHMoXG4gICAgICAgIHtcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgY29udGVudDogcmVzdWx0LFxuICAgICAgICAgIGltYWdlSW5mbyxcbiAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgICAgY2FjaGVkOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBlZGl0b3IsXG4gICAgICAgIHZpZXdcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcignVmlzaW9uIGFuYWx5c2lzIGVycm9yOicsIGVycm9yKTtcbiAgICAgIG5ldyBOb3RpY2UoYEVycm9yIGFuYWx5emluZyBpbWFnZTogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGVuZm9yY2VSYXRlTGltaXQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3Qgbm93OiBudW1iZXIgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IHRpbWVTaW5jZUxhc3RSZXF1ZXN0OiBudW1iZXIgPSBub3cgLSB0aGlzLmxhc3RSZXF1ZXN0VGltZTtcblxuICAgIGlmICh0aW1lU2luY2VMYXN0UmVxdWVzdCA8IHRoaXMuc2V0dGluZ3MucmF0ZUxpbWl0RGVsYXkpIHtcbiAgICAgIGNvbnN0IHdhaXRUaW1lOiBudW1iZXIgPSB0aGlzLnNldHRpbmdzLnJhdGVMaW1pdERlbGF5IC0gdGltZVNpbmNlTGFzdFJlcXVlc3Q7XG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgd2FpdFRpbWUpKTtcbiAgICB9XG5cbiAgICB0aGlzLmxhc3RSZXF1ZXN0VGltZSA9IERhdGUubm93KCk7XG4gIH1cblxuICBzaG93UmVzdWx0cyhcbiAgICByZXN1bHQ6IEFuYWx5c2lzUmVzdWx0LFxuICAgIGVkaXRvcjogRWRpdG9yLFxuICAgIHZpZXc6IE1hcmtkb3duVmlld1xuICApOiB2b2lkIHtcbiAgICB0aGlzLnJlc3VsdHNNb2RhbC5zaG93KHJlc3VsdCwgZWRpdG9yLCB2aWV3KTtcbiAgfVxufSIsICJpbXBvcnQgeyBBcHAsIFRGaWxlLCBFZGl0b3IsIE1hcmtkb3duVmlldyB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IFZpc2lvbkluc2lnaHRzU2V0dGluZ3MsIEltYWdlSW5mbywgTm90ZUNvbnRleHQgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IGFycmF5QnVmZmVyVG9CYXNlNjQsIGdldE1pbWVUeXBlIH0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBjbGFzcyBJbWFnZUhhbmRsZXIge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwcDogQXBwLCBwcml2YXRlIHNldHRpbmdzOiBWaXNpb25JbnNpZ2h0c1NldHRpbmdzKSB7fVxuXG4gIHVwZGF0ZVNldHRpbmdzKHNldHRpbmdzOiBWaXNpb25JbnNpZ2h0c1NldHRpbmdzKSB7XG4gICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xuICB9XG5cbiAgYXN5bmMgZGV0ZWN0SW1hZ2VBdEN1cnNvcihlZGl0b3I6IEVkaXRvciwgdmlldzogTWFya2Rvd25WaWV3KTogUHJvbWlzZTxJbWFnZUluZm8gfCBudWxsPiB7XG4gICAgY29uc3QgY3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigpO1xuICAgIGNvbnN0IGxpbmUgPSBlZGl0b3IuZ2V0TGluZShjdXJzb3IubGluZSk7XG5cbiAgICAvLyBDb21iaW5lZCByZWdleCBmb3Igd2lraSwgbWFya2Rvd24sIGFuZCBodG1sIGltYWdlc1xuICAgIGNvbnN0IGltYWdlUmVnZXggPSAvKCFcXFtcXFsoW15cXF1dKz8pXFxdXFxdKXwoIVxcW1teXFxdXSo/XFxdXFwoKC4qPylcXCkpfCg8aW1nW14+XStzcmM9W1wiJ10oLio/KVtcIiddW14+XSo+KS9nO1xuXG4gICAgbGV0IG1hdGNoO1xuICAgIHdoaWxlICgobWF0Y2ggPSBpbWFnZVJlZ2V4LmV4ZWMobGluZSkpICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBtYXRjaFRleHQgPSBtYXRjaFswXTtcbiAgICAgIGNvbnN0IHN0YXJ0SW5kZXggPSBtYXRjaC5pbmRleDtcbiAgICAgIGNvbnN0IGVuZEluZGV4ID0gc3RhcnRJbmRleCArIG1hdGNoVGV4dC5sZW5ndGg7XG5cbiAgICAgIC8vIENoZWNrIGlmIGN1cnNvciBpcyB3aXRoaW4gdGhlIGJvdW5kcyBvZiB0aGlzIG1hdGNoXG4gICAgICBpZiAoY3Vyc29yLmNoID49IHN0YXJ0SW5kZXggJiYgY3Vyc29yLmNoIDw9IGVuZEluZGV4KSB7XG4gICAgICAgIC8vIG1hdGNoWzJdIGlzIGZyb20gIVtbLi4uXV1cbiAgICAgICAgLy8gbWF0Y2hbNF0gaXMgZnJvbSAhW10oLi4uKVxuICAgICAgICAvLyBtYXRjaFs2XSBpcyBmcm9tIDxpbWcgc3JjPVwiLi4uXCI+XG4gICAgICAgIGNvbnN0IGltYWdlUGF0aCA9IG1hdGNoWzJdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzZdO1xuICAgICAgICBpZiAoaW1hZ2VQYXRoKSB7XG4gICAgICAgICAgLy8gRm91bmQgdGhlIGltYWdlIGF0IHRoZSBjdXJzb3JcbiAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVJbWFnZUluZm8oZGVjb2RlVVJJQ29tcG9uZW50KGltYWdlUGF0aCksIHZpZXcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBleHRyYWN0Tm90ZUNvbnRleHQoZWRpdG9yOiBFZGl0b3IsIHZpZXc6IE1hcmtkb3duVmlldywgaW1hZ2VJbmZvOiBJbWFnZUluZm8pOiBOb3RlQ29udGV4dCB7XG4gICAgY29uc3Qgbm90ZU5hbWUgPSB2aWV3LmZpbGU/LmJhc2VuYW1lIHx8ICdVbnRpdGxlZCc7XG4gICAgY29uc3QgYWxsVGV4dCA9IGVkaXRvci5nZXRWYWx1ZSgpO1xuXG4gICAgLy8gRmluZCB0aGUgc3BlY2lmaWMgaW1hZ2UgaW4gdGhlIG5vdGUgY29udGVudFxuICAgIGNvbnN0IGltYWdlUGF0dGVybiA9IHRoaXMuY3JlYXRlSW1hZ2VTZWFyY2hQYXR0ZXJuKGltYWdlSW5mbyk7XG4gICAgY29uc3QgbWF0Y2ggPSBhbGxUZXh0Lm1hdGNoKGltYWdlUGF0dGVybik7XG4gICAgXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBjb25zdCBtYXRjaEluZGV4ID0gbWF0Y2guaW5kZXghO1xuICAgICAgY29uc3QgbWF0Y2hMZW5ndGggPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICBcbiAgICAgIC8vIFNwbGl0IGNvbnRlbnQgYXJvdW5kIHRoZSBhY3R1YWwgaW1hZ2VcbiAgICAgIGNvbnN0IHRleHRCZWZvcmUgPSBhbGxUZXh0LnN1YnN0cmluZygwLCBtYXRjaEluZGV4KS50cmltKCk7XG4gICAgICBjb25zdCB0ZXh0QWZ0ZXIgPSBhbGxUZXh0LnN1YnN0cmluZyhtYXRjaEluZGV4ICsgbWF0Y2hMZW5ndGgpLnRyaW0oKTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGV4dEJlZm9yZSxcbiAgICAgICAgdGV4dEFmdGVyLFxuICAgICAgICBub3RlTmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBGYWxsYmFjazogaWYgd2UgY2FuJ3QgZmluZCB0aGUgc3BlY2lmaWMgaW1hZ2UsIHJldHVybiBlbXB0eSBjb250ZXh0XG4gICAgY29uc29sZS53YXJuKCdWaXNpb24gSW5zaWdodHM6IENvdWxkIG5vdCBsb2NhdGUgaW1hZ2UgaW4gbm90ZSBjb250ZW50IGZvciBjb250ZXh0IGV4dHJhY3Rpb24nKTtcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dEJlZm9yZTogJycsXG4gICAgICB0ZXh0QWZ0ZXI6ICcnLFxuICAgICAgbm90ZU5hbWVcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVJbWFnZVNlYXJjaFBhdHRlcm4oaW1hZ2VJbmZvOiBJbWFnZUluZm8pOiBSZWdFeHAge1xuICAgIC8vIENyZWF0ZSBhIHJlZ2V4IHBhdHRlcm4gdG8gZmluZCB0aGlzIHNwZWNpZmljIGltYWdlIGluIHRoZSBtYXJrZG93biBjb250ZW50XG4gICAgLy8gTmVlZCB0byBoYW5kbGUgZGlmZmVyZW50IGltYWdlIGZvcm1hdHM6ICFbW2ltYWdlLnBuZ11dLCAhW10oaW1hZ2UucG5nKSwgPGltZyBzcmM9XCJpbWFnZS5wbmdcIj5cbiAgICBcbiAgICAvLyBFc2NhcGUgc3BlY2lhbCByZWdleCBjaGFyYWN0ZXJzIGluIHRoZSBpbWFnZSBwYXRoL1VSTFxuICAgIGNvbnN0IGVzY2FwZWRQYXRoID0gaW1hZ2VJbmZvLnVybC5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpO1xuICAgIGNvbnN0IGVzY2FwZWRJbWFnZVBhdGggPSBpbWFnZUluZm8ucGF0aC5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpO1xuICAgIFxuICAgIC8vIENyZWF0ZSBwYXR0ZXJucyBmb3IgZGlmZmVyZW50IG1hcmtkb3duIGltYWdlIGZvcm1hdHNcbiAgICBjb25zdCBwYXR0ZXJucyA9IFtcbiAgICAgIGAhXFxcXFtcXFxcWyR7ZXNjYXBlZFBhdGh9XFxcXF1cXFxcXWAsICAgICAgICAgICAgICAgICAgICAvLyAhW1tpbWFnZS5wbmddXVxuICAgICAgYCFcXFxcW1xcXFxbJHtlc2NhcGVkSW1hZ2VQYXRofVxcXFxdXFxcXF1gLCAgICAgICAgICAgICAgIC8vICFbW3BhdGgvaW1hZ2UucG5nXV1cbiAgICAgIGAhXFxcXFtbXlxcXFxdXSo/XFxcXF1cXFxcKCR7ZXNjYXBlZFBhdGh9XFxcXClgLCAgICAgICAgICAgLy8gIVthbHRdKGltYWdlLnBuZylcbiAgICAgIGAhXFxcXFtbXlxcXFxdXSo/XFxcXF1cXFxcKCR7ZXNjYXBlZEltYWdlUGF0aH1cXFxcKWAsICAgICAgLy8gIVthbHRdKHBhdGgvaW1hZ2UucG5nKVxuICAgICAgYDxpbWdbXj5dK3NyYz1bXCInXSR7ZXNjYXBlZFBhdGh9W1wiJ11bXj5dKj5gLCAgICAgIC8vIDxpbWcgc3JjPVwiaW1hZ2UucG5nXCI+XG4gICAgICBgPGltZ1tePl0rc3JjPVtcIiddJHtlc2NhcGVkSW1hZ2VQYXRofVtcIiddW14+XSo+YCAgLy8gPGltZyBzcmM9XCJwYXRoL2ltYWdlLnBuZ1wiPlxuICAgIF07XG4gICAgXG4gICAgLy8gQ29tYmluZSBhbGwgcGF0dGVybnMgd2l0aCBPUiBvcGVyYXRvclxuICAgIHJldHVybiBuZXcgUmVnRXhwKHBhdHRlcm5zLmpvaW4oJ3wnKSwgJ2knKTtcbiAgfVxuXG4gIGNyZWF0ZUltYWdlSW5mb0Zyb21GaWxlKGZpbGU6IFRGaWxlKTogSW1hZ2VJbmZvIHwgbnVsbCB7XG4gICAgaWYgKCFmaWxlKSByZXR1cm4gbnVsbDtcblxuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBmaWxlLnBhdGgsXG4gICAgICB1cmw6IHRoaXMuYXBwLnZhdWx0LmdldFJlc291cmNlUGF0aChmaWxlKSxcbiAgICAgIGlzRXh0ZXJuYWw6IGZhbHNlLFxuICAgICAgZmlsZW5hbWU6IGZpbGUubmFtZSxcbiAgICAgIG1pbWVUeXBlOiBnZXRNaW1lVHlwZShmaWxlLmV4dGVuc2lvbilcbiAgICB9O1xuICB9XG5cbiAgY3JlYXRlSW1hZ2VJbmZvRnJvbVNyYyhzcmM6IHN0cmluZyk6IEltYWdlSW5mbyB8IG51bGwge1xuICAgIGlmICghc3JjKSByZXR1cm4gbnVsbDtcblxuICAgIHRyeSB7XG4gICAgICBpZiAoc3JjLnN0YXJ0c1dpdGgoJ2h0dHAnKSkge1xuICAgICAgICBjb25zdCBmaWxlbmFtZSA9IG5ldyBVUkwoc3JjKS5wYXRobmFtZS5zcGxpdCgnLycpLnBvcCgpIHx8ICd1bmtub3duLWV4dGVybmFsJztcbiAgICAgICAgY29uc3QgZXh0ZW5zaW9uID0gZmlsZW5hbWUuc3BsaXQoJy4nKS5wb3AoKT8udG9Mb3dlckNhc2UoKSB8fCAnJztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwYXRoOiBzcmMsXG4gICAgICAgICAgdXJsOiBzcmMsXG4gICAgICAgICAgaXNFeHRlcm5hbDogdHJ1ZSxcbiAgICAgICAgICBmaWxlbmFtZSxcbiAgICAgICAgICBtaW1lVHlwZTogZ2V0TWltZVR5cGUoZXh0ZW5zaW9uKSxcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAoc3JjLnN0YXJ0c1dpdGgoJ2FwcDovLycpKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoc3JjKTtcbiAgICAgICAgLy8gUGF0aG5hbWUgaXMgbGlrZSAvPHZhdWx0LWlkPi9wYXRoL3RvL2ltYWdlLnBuZy4gV2Ugd2FudCB0aGUgcGFydCBhZnRlciB0aGUgdmF1bHQgaWQuXG4gICAgICAgIGNvbnN0IHBhdGggPSBkZWNvZGVVUklDb21wb25lbnQodXJsLnBhdGhuYW1lKS5zcGxpdCgnLycpLnNsaWNlKDIpLmpvaW4oJy8nKTtcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChwYXRoKTtcbiAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUltYWdlSW5mb0Zyb21GaWxlKGZpbGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJWaXNpb24gSW5zaWdodHM6IEVycm9yIHBhcnNpbmcgaW1hZ2Ugc3JjOlwiLCBzcmMsIGVycm9yKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUltYWdlSW5mbyhpbWFnZVBhdGg6IHN0cmluZywgdmlldzogTWFya2Rvd25WaWV3KTogSW1hZ2VJbmZvIHwgbnVsbCB7XG4gICAgY29uc3QgaXNFeHRlcm5hbCA9IGltYWdlUGF0aC5zdGFydHNXaXRoKCdodHRwOi8vJykgfHwgaW1hZ2VQYXRoLnN0YXJ0c1dpdGgoJ2h0dHBzOi8vJyk7XG5cbiAgICBpZiAoaXNFeHRlcm5hbCkge1xuICAgICAgY29uc3QgZmlsZW5hbWUgPSBpbWFnZVBhdGguc3BsaXQoJy8nKS5wb3AoKT8uc3BsaXQoJz8nKVswXSB8fCAndW5rbm93bi1leHRlcm5hbCc7XG4gICAgICBjb25zdCBleHRlbnNpb24gPSBmaWxlbmFtZS5zcGxpdCgnLicpLnBvcCgpPy50b0xvd2VyQ2FzZSgpIHx8ICcnO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aDogaW1hZ2VQYXRoLFxuICAgICAgICB1cmw6IGltYWdlUGF0aCxcbiAgICAgICAgaXNFeHRlcm5hbDogdHJ1ZSxcbiAgICAgICAgZmlsZW5hbWUsXG4gICAgICAgIG1pbWVUeXBlOiBnZXRNaW1lVHlwZShleHRlbnNpb24pXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNvbnN0IHNvdXJjZVBhdGggPSB2aWV3LmZpbGU/LnBhdGggfHwgJyc7XG4gICAgY29uc3QgZmlsZSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Rmlyc3RMaW5rcGF0aERlc3QoaW1hZ2VQYXRoLCBzb3VyY2VQYXRoKTtcblxuICAgIGlmICghZmlsZSB8fCAhKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBWaXNpb24gSW5zaWdodHM6IENvdWxkIG5vdCByZXNvbHZlIGltYWdlIHBhdGggXCIke2ltYWdlUGF0aH1cIiBmcm9tIHNvdXJjZSBcIiR7c291cmNlUGF0aH1cIi5gKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IGZpbGUucGF0aCxcbiAgICAgIHVybDogaW1hZ2VQYXRoLFxuICAgICAgaXNFeHRlcm5hbDogZmFsc2UsXG4gICAgICBmaWxlbmFtZTogZmlsZS5uYW1lLFxuICAgICAgbWltZVR5cGU6IGdldE1pbWVUeXBlKGZpbGUuZXh0ZW5zaW9uKVxuICAgIH07XG4gIH1cblxuICBhc3luYyBwcmVwYXJlSW1hZ2VGb3JBUEkoaW1hZ2VJbmZvOiBJbWFnZUluZm8pOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGlmIChpbWFnZUluZm8uaXNFeHRlcm5hbCkge1xuICAgICAgcmV0dXJuIGltYWdlSW5mby51cmw7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHZhdWx0IGltYWdlc1xuICAgIGNvbnN0IGZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoaW1hZ2VJbmZvLnBhdGgpO1xuICAgIGlmICghKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW1hZ2UgZmlsZSBub3QgZm91bmQ6ICR7aW1hZ2VJbmZvLnBhdGh9YCk7XG4gICAgfVxuXG4gICAgY29uc3QgYXJyYXlCdWZmZXIgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkQmluYXJ5KGZpbGUpO1xuICAgIGNvbnN0IGJhc2U2NCA9IGFycmF5QnVmZmVyVG9CYXNlNjQoYXJyYXlCdWZmZXIpO1xuICAgIHJldHVybiBgZGF0YToke2ltYWdlSW5mby5taW1lVHlwZX07YmFzZTY0LCR7YmFzZTY0fWA7XG4gIH1cbn0gIiwgImV4cG9ydCBmdW5jdGlvbiBhcnJheUJ1ZmZlclRvQmFzZTY0KGJ1ZmZlcjogQXJyYXlCdWZmZXIpOiBzdHJpbmcge1xuICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XG4gIGxldCBiaW5hcnkgPSAnJztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5ieXRlTGVuZ3RoOyBpKyspIHtcbiAgICBiaW5hcnkgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSk7XG4gIH1cbiAgcmV0dXJuIGJ0b2EoYmluYXJ5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1pbWVUeXBlKGV4dGVuc2lvbjogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgbWltZVR5cGVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgICdwbmcnOiAnaW1hZ2UvcG5nJyxcbiAgICAnanBnJzogJ2ltYWdlL2pwZWcnLFxuICAgICdqcGVnJzogJ2ltYWdlL2pwZWcnLFxuICAgICdnaWYnOiAnaW1hZ2UvZ2lmJyxcbiAgICAnd2VicCc6ICdpbWFnZS93ZWJwJyxcbiAgICAnc3ZnJzogJ2ltYWdlL3N2Zyt4bWwnLFxuICAgICdibXAnOiAnaW1hZ2UvYm1wJyxcbiAgICAndGlmZic6ICdpbWFnZS90aWZmJ1xuICB9O1xuICBcbiAgcmV0dXJuIG1pbWVUeXBlc1tleHRlbnNpb24udG9Mb3dlckNhc2UoKV0gfHwgJ2ltYWdlL2pwZWcnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzaFN0cmluZyhzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIGxldCBoYXNoID0gMDtcbiAgaWYgKHN0ci5sZW5ndGggPT09IDApIHJldHVybiBoYXNoLnRvU3RyaW5nKCk7XG4gIFxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNoYXIgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBjaGFyO1xuICAgIGhhc2ggPSBoYXNoICYgaGFzaDsgLy8gQ29udmVydCB0byAzMi1iaXQgaW50ZWdlclxuICB9XG4gIFxuICByZXR1cm4gTWF0aC5hYnMoaGFzaCkudG9TdHJpbmcoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFRpbWVzdGFtcCh0aW1lc3RhbXA6IG51bWJlcik6IHN0cmluZyB7XG4gIHJldHVybiBuZXcgRGF0ZSh0aW1lc3RhbXApLnRvTG9jYWxlU3RyaW5nKCk7XG59ICIsICJpbXBvcnQgdHlwZSB7IEZvcm1hdCB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdF9mb3JtYXQ6IEZvcm1hdCA9ICdSRkMzOTg2JztcbmV4cG9ydCBjb25zdCBmb3JtYXR0ZXJzOiBSZWNvcmQ8Rm9ybWF0LCAoc3RyOiBQcm9wZXJ0eUtleSkgPT4gc3RyaW5nPiA9IHtcbiAgUkZDMTczODogKHY6IFByb3BlcnR5S2V5KSA9PiBTdHJpbmcodikucmVwbGFjZSgvJTIwL2csICcrJyksXG4gIFJGQzM5ODY6ICh2OiBQcm9wZXJ0eUtleSkgPT4gU3RyaW5nKHYpLFxufTtcbmV4cG9ydCBjb25zdCBSRkMxNzM4ID0gJ1JGQzE3MzgnO1xuZXhwb3J0IGNvbnN0IFJGQzM5ODYgPSAnUkZDMzk4Nic7XG4iLCAiaW1wb3J0IHsgUkZDMTczOCB9IGZyb20gJy4vZm9ybWF0cyc7XG5pbXBvcnQgdHlwZSB7IERlZmF1bHRFbmNvZGVyLCBGb3JtYXQgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmNvbnN0IGlzX2FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuY29uc3QgaGV4X3RhYmxlID0gKCgpID0+IHtcbiAgY29uc3QgYXJyYXkgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICAgIGFycmF5LnB1c2goJyUnICsgKChpIDwgMTYgPyAnMCcgOiAnJykgKyBpLnRvU3RyaW5nKDE2KSkudG9VcHBlckNhc2UoKSk7XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59KSgpO1xuXG5mdW5jdGlvbiBjb21wYWN0X3F1ZXVlPFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+PihxdWV1ZTogQXJyYXk8eyBvYmo6IFQ7IHByb3A6IHN0cmluZyB9Pikge1xuICB3aGlsZSAocXVldWUubGVuZ3RoID4gMSkge1xuICAgIGNvbnN0IGl0ZW0gPSBxdWV1ZS5wb3AoKTtcbiAgICBpZiAoIWl0ZW0pIGNvbnRpbnVlO1xuXG4gICAgY29uc3Qgb2JqID0gaXRlbS5vYmpbaXRlbS5wcm9wXTtcblxuICAgIGlmIChpc19hcnJheShvYmopKSB7XG4gICAgICBjb25zdCBjb21wYWN0ZWQ6IHVua25vd25bXSA9IFtdO1xuXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG9iai5sZW5ndGg7ICsraikge1xuICAgICAgICBpZiAodHlwZW9mIG9ialtqXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBjb21wYWN0ZWQucHVzaChvYmpbal0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGl0ZW0ub2JqW2l0ZW0ucHJvcF0gPSBjb21wYWN0ZWQ7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFycmF5X3RvX29iamVjdChzb3VyY2U6IGFueVtdLCBvcHRpb25zOiB7IHBsYWluT2JqZWN0czogYm9vbGVhbiB9KSB7XG4gIGNvbnN0IG9iaiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBvYmpbaV0gPSBzb3VyY2VbaV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlKFxuICB0YXJnZXQ6IGFueSxcbiAgc291cmNlOiBhbnksXG4gIG9wdGlvbnM6IHsgcGxhaW5PYmplY3RzPzogYm9vbGVhbjsgYWxsb3dQcm90b3R5cGVzPzogYm9vbGVhbiB9ID0ge30sXG4pIHtcbiAgaWYgKCFzb3VyY2UpIHtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdvYmplY3QnKSB7XG4gICAgaWYgKGlzX2FycmF5KHRhcmdldCkpIHtcbiAgICAgIHRhcmdldC5wdXNoKHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh0YXJnZXQgJiYgdHlwZW9mIHRhcmdldCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChcbiAgICAgICAgKG9wdGlvbnMgJiYgKG9wdGlvbnMucGxhaW5PYmplY3RzIHx8IG9wdGlvbnMuYWxsb3dQcm90b3R5cGVzKSkgfHxcbiAgICAgICAgIWhhcy5jYWxsKE9iamVjdC5wcm90b3R5cGUsIHNvdXJjZSlcbiAgICAgICkge1xuICAgICAgICB0YXJnZXRbc291cmNlXSA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbdGFyZ2V0LCBzb3VyY2VdO1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cblxuICBpZiAoIXRhcmdldCB8fCB0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBbdGFyZ2V0XS5jb25jYXQoc291cmNlKTtcbiAgfVxuXG4gIGxldCBtZXJnZVRhcmdldCA9IHRhcmdldDtcbiAgaWYgKGlzX2FycmF5KHRhcmdldCkgJiYgIWlzX2FycmF5KHNvdXJjZSkpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgbWVyZ2VUYXJnZXQgPSBhcnJheV90b19vYmplY3QodGFyZ2V0LCBvcHRpb25zKTtcbiAgfVxuXG4gIGlmIChpc19hcnJheSh0YXJnZXQpICYmIGlzX2FycmF5KHNvdXJjZSkpIHtcbiAgICBzb3VyY2UuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaSkge1xuICAgICAgaWYgKGhhcy5jYWxsKHRhcmdldCwgaSkpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0SXRlbSA9IHRhcmdldFtpXTtcbiAgICAgICAgaWYgKHRhcmdldEl0ZW0gJiYgdHlwZW9mIHRhcmdldEl0ZW0gPT09ICdvYmplY3QnICYmIGl0ZW0gJiYgdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgdGFyZ2V0W2ldID0gbWVyZ2UodGFyZ2V0SXRlbSwgaXRlbSwgb3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0LnB1c2goaXRlbSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtpXSA9IGl0ZW07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBPYmplY3Qua2V5cyhzb3VyY2UpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHNvdXJjZVtrZXldO1xuXG4gICAgaWYgKGhhcy5jYWxsKGFjYywga2V5KSkge1xuICAgICAgYWNjW2tleV0gPSBtZXJnZShhY2Nba2V5XSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY2Nba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCBtZXJnZVRhcmdldCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ25fc2luZ2xlX3NvdXJjZSh0YXJnZXQ6IGFueSwgc291cmNlOiBhbnkpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHNvdXJjZSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuICAgIGFjY1trZXldID0gc291cmNlW2tleV07XG4gICAgcmV0dXJuIGFjYztcbiAgfSwgdGFyZ2V0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZShzdHI6IHN0cmluZywgXzogYW55LCBjaGFyc2V0OiBzdHJpbmcpIHtcbiAgY29uc3Qgc3RyV2l0aG91dFBsdXMgPSBzdHIucmVwbGFjZSgvXFwrL2csICcgJyk7XG4gIGlmIChjaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAvLyB1bmVzY2FwZSBuZXZlciB0aHJvd3MsIG5vIHRyeS4uLmNhdGNoIG5lZWRlZDpcbiAgICByZXR1cm4gc3RyV2l0aG91dFBsdXMucmVwbGFjZSgvJVswLTlhLWZdezJ9L2dpLCB1bmVzY2FwZSk7XG4gIH1cbiAgLy8gdXRmLThcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0cldpdGhvdXRQbHVzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBzdHJXaXRob3V0UGx1cztcbiAgfVxufVxuXG5jb25zdCBsaW1pdCA9IDEwMjQ7XG5cbmV4cG9ydCBjb25zdCBlbmNvZGU6IChcbiAgc3RyOiBhbnksXG4gIGRlZmF1bHRFbmNvZGVyOiBEZWZhdWx0RW5jb2RlcixcbiAgY2hhcnNldDogc3RyaW5nLFxuICB0eXBlOiAna2V5JyB8ICd2YWx1ZScsXG4gIGZvcm1hdDogRm9ybWF0LFxuKSA9PiBzdHJpbmcgPSAoc3RyLCBfZGVmYXVsdEVuY29kZXIsIGNoYXJzZXQsIF9raW5kLCBmb3JtYXQ6IEZvcm1hdCkgPT4ge1xuICAvLyBUaGlzIGNvZGUgd2FzIG9yaWdpbmFsbHkgd3JpdHRlbiBieSBCcmlhbiBXaGl0ZSBmb3IgdGhlIGlvLmpzIGNvcmUgcXVlcnlzdHJpbmcgbGlicmFyeS5cbiAgLy8gSXQgaGFzIGJlZW4gYWRhcHRlZCBoZXJlIGZvciBzdHJpY3RlciBhZGhlcmVuY2UgdG8gUkZDIDM5ODZcbiAgaWYgKHN0ci5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgbGV0IHN0cmluZyA9IHN0cjtcbiAgaWYgKHR5cGVvZiBzdHIgPT09ICdzeW1ib2wnKSB7XG4gICAgc3RyaW5nID0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN0cik7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSBTdHJpbmcoc3RyKTtcbiAgfVxuXG4gIGlmIChjaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICByZXR1cm4gZXNjYXBlKHN0cmluZykucmVwbGFjZSgvJXVbMC05YS1mXXs0fS9naSwgZnVuY3Rpb24gKCQwKSB7XG4gICAgICByZXR1cm4gJyUyNiUyMycgKyBwYXJzZUludCgkMC5zbGljZSgyKSwgMTYpICsgJyUzQic7XG4gICAgfSk7XG4gIH1cblxuICBsZXQgb3V0ID0gJyc7XG4gIGZvciAobGV0IGogPSAwOyBqIDwgc3RyaW5nLmxlbmd0aDsgaiArPSBsaW1pdCkge1xuICAgIGNvbnN0IHNlZ21lbnQgPSBzdHJpbmcubGVuZ3RoID49IGxpbWl0ID8gc3RyaW5nLnNsaWNlKGosIGogKyBsaW1pdCkgOiBzdHJpbmc7XG4gICAgY29uc3QgYXJyID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ21lbnQubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxldCBjID0gc2VnbWVudC5jaGFyQ29kZUF0KGkpO1xuICAgICAgaWYgKFxuICAgICAgICBjID09PSAweDJkIHx8IC8vIC1cbiAgICAgICAgYyA9PT0gMHgyZSB8fCAvLyAuXG4gICAgICAgIGMgPT09IDB4NWYgfHwgLy8gX1xuICAgICAgICBjID09PSAweDdlIHx8IC8vIH5cbiAgICAgICAgKGMgPj0gMHgzMCAmJiBjIDw9IDB4MzkpIHx8IC8vIDAtOVxuICAgICAgICAoYyA+PSAweDQxICYmIGMgPD0gMHg1YSkgfHwgLy8gYS16XG4gICAgICAgIChjID49IDB4NjEgJiYgYyA8PSAweDdhKSB8fCAvLyBBLVpcbiAgICAgICAgKGZvcm1hdCA9PT0gUkZDMTczOCAmJiAoYyA9PT0gMHgyOCB8fCBjID09PSAweDI5KSkgLy8gKCApXG4gICAgICApIHtcbiAgICAgICAgYXJyW2Fyci5sZW5ndGhdID0gc2VnbWVudC5jaGFyQXQoaSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoYyA8IDB4ODApIHtcbiAgICAgICAgYXJyW2Fyci5sZW5ndGhdID0gaGV4X3RhYmxlW2NdO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGMgPCAweDgwMCkge1xuICAgICAgICBhcnJbYXJyLmxlbmd0aF0gPSBoZXhfdGFibGVbMHhjMCB8IChjID4+IDYpXSEgKyBoZXhfdGFibGVbMHg4MCB8IChjICYgMHgzZildO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGMgPCAweGQ4MDAgfHwgYyA+PSAweGUwMDApIHtcbiAgICAgICAgYXJyW2Fyci5sZW5ndGhdID1cbiAgICAgICAgICBoZXhfdGFibGVbMHhlMCB8IChjID4+IDEyKV0hICsgaGV4X3RhYmxlWzB4ODAgfCAoKGMgPj4gNikgJiAweDNmKV0gKyBoZXhfdGFibGVbMHg4MCB8IChjICYgMHgzZildO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaSArPSAxO1xuICAgICAgYyA9IDB4MTAwMDAgKyAoKChjICYgMHgzZmYpIDw8IDEwKSB8IChzZWdtZW50LmNoYXJDb2RlQXQoaSkgJiAweDNmZikpO1xuXG4gICAgICBhcnJbYXJyLmxlbmd0aF0gPVxuICAgICAgICBoZXhfdGFibGVbMHhmMCB8IChjID4+IDE4KV0hICtcbiAgICAgICAgaGV4X3RhYmxlWzB4ODAgfCAoKGMgPj4gMTIpICYgMHgzZildICtcbiAgICAgICAgaGV4X3RhYmxlWzB4ODAgfCAoKGMgPj4gNikgJiAweDNmKV0gK1xuICAgICAgICBoZXhfdGFibGVbMHg4MCB8IChjICYgMHgzZildO1xuICAgIH1cblxuICAgIG91dCArPSBhcnIuam9pbignJyk7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhY3QodmFsdWU6IGFueSkge1xuICBjb25zdCBxdWV1ZSA9IFt7IG9iajogeyBvOiB2YWx1ZSB9LCBwcm9wOiAnbycgfV07XG4gIGNvbnN0IHJlZnMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgKytpKSB7XG4gICAgY29uc3QgaXRlbSA9IHF1ZXVlW2ldO1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCBvYmogPSBpdGVtLm9ialtpdGVtLnByb3BdO1xuXG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBrZXlzLmxlbmd0aDsgKytqKSB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2pdITtcbiAgICAgIGNvbnN0IHZhbCA9IG9ialtrZXldO1xuICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIHZhbCAhPT0gbnVsbCAmJiByZWZzLmluZGV4T2YodmFsKSA9PT0gLTEpIHtcbiAgICAgICAgcXVldWUucHVzaCh7IG9iajogb2JqLCBwcm9wOiBrZXkgfSk7XG4gICAgICAgIHJlZnMucHVzaCh2YWwpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbXBhY3RfcXVldWUocXVldWUpO1xuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzX3JlZ2V4cChvYmo6IGFueSkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNfYnVmZmVyKG9iajogYW55KSB7XG4gIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuICEhKG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iaikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tYmluZShhOiBhbnksIGI6IGFueSkge1xuICByZXR1cm4gW10uY29uY2F0KGEsIGIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWF5YmVfbWFwPFQ+KHZhbDogVFtdLCBmbjogKHY6IFQpID0+IFQpIHtcbiAgaWYgKGlzX2FycmF5KHZhbCkpIHtcbiAgICBjb25zdCBtYXBwZWQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgbWFwcGVkLnB1c2goZm4odmFsW2ldISkpO1xuICAgIH1cbiAgICByZXR1cm4gbWFwcGVkO1xuICB9XG4gIHJldHVybiBmbih2YWwpO1xufVxuIiwgImltcG9ydCB7IGVuY29kZSwgaXNfYnVmZmVyLCBtYXliZV9tYXAgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGRlZmF1bHRfZm9ybWF0LCBmb3JtYXR0ZXJzIH0gZnJvbSAnLi9mb3JtYXRzJztcbmltcG9ydCB0eXBlIHsgTm9uTnVsbGFibGVQcm9wZXJ0aWVzLCBTdHJpbmdpZnlPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmNvbnN0IGFycmF5X3ByZWZpeF9nZW5lcmF0b3JzID0ge1xuICBicmFja2V0cyhwcmVmaXg6IFByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIFN0cmluZyhwcmVmaXgpICsgJ1tdJztcbiAgfSxcbiAgY29tbWE6ICdjb21tYScsXG4gIGluZGljZXMocHJlZml4OiBQcm9wZXJ0eUtleSwga2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gU3RyaW5nKHByZWZpeCkgKyAnWycgKyBrZXkgKyAnXSc7XG4gIH0sXG4gIHJlcGVhdChwcmVmaXg6IFByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIFN0cmluZyhwcmVmaXgpO1xuICB9LFxufTtcblxuY29uc3QgaXNfYXJyYXkgPSBBcnJheS5pc0FycmF5O1xuY29uc3QgcHVzaCA9IEFycmF5LnByb3RvdHlwZS5wdXNoO1xuY29uc3QgcHVzaF90b19hcnJheSA9IGZ1bmN0aW9uIChhcnI6IGFueVtdLCB2YWx1ZV9vcl9hcnJheTogYW55KSB7XG4gIHB1c2guYXBwbHkoYXJyLCBpc19hcnJheSh2YWx1ZV9vcl9hcnJheSkgPyB2YWx1ZV9vcl9hcnJheSA6IFt2YWx1ZV9vcl9hcnJheV0pO1xufTtcblxuY29uc3QgdG9fSVNPID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbmNvbnN0IGRlZmF1bHRzID0ge1xuICBhZGRRdWVyeVByZWZpeDogZmFsc2UsXG4gIGFsbG93RG90czogZmFsc2UsXG4gIGFsbG93RW1wdHlBcnJheXM6IGZhbHNlLFxuICBhcnJheUZvcm1hdDogJ2luZGljZXMnLFxuICBjaGFyc2V0OiAndXRmLTgnLFxuICBjaGFyc2V0U2VudGluZWw6IGZhbHNlLFxuICBkZWxpbWl0ZXI6ICcmJyxcbiAgZW5jb2RlOiB0cnVlLFxuICBlbmNvZGVEb3RJbktleXM6IGZhbHNlLFxuICBlbmNvZGVyOiBlbmNvZGUsXG4gIGVuY29kZVZhbHVlc09ubHk6IGZhbHNlLFxuICBmb3JtYXQ6IGRlZmF1bHRfZm9ybWF0LFxuICBmb3JtYXR0ZXI6IGZvcm1hdHRlcnNbZGVmYXVsdF9mb3JtYXRdLFxuICAvKiogQGRlcHJlY2F0ZWQgKi9cbiAgaW5kaWNlczogZmFsc2UsXG4gIHNlcmlhbGl6ZURhdGUoZGF0ZSkge1xuICAgIHJldHVybiB0b19JU08uY2FsbChkYXRlKTtcbiAgfSxcbiAgc2tpcE51bGxzOiBmYWxzZSxcbiAgc3RyaWN0TnVsbEhhbmRsaW5nOiBmYWxzZSxcbn0gYXMgTm9uTnVsbGFibGVQcm9wZXJ0aWVzPFN0cmluZ2lmeU9wdGlvbnMgJiB7IGZvcm1hdHRlcjogKHR5cGVvZiBmb3JtYXR0ZXJzKVsnUkZDMTczOCddIH0+O1xuXG5mdW5jdGlvbiBpc19ub25fbnVsbGlzaF9wcmltaXRpdmUodjogdW5rbm93bik6IHYgaXMgc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IHN5bWJvbCB8IGJpZ2ludCB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHYgPT09ICdzdHJpbmcnIHx8XG4gICAgdHlwZW9mIHYgPT09ICdudW1iZXInIHx8XG4gICAgdHlwZW9mIHYgPT09ICdib29sZWFuJyB8fFxuICAgIHR5cGVvZiB2ID09PSAnc3ltYm9sJyB8fFxuICAgIHR5cGVvZiB2ID09PSAnYmlnaW50J1xuICApO1xufVxuXG5jb25zdCBzZW50aW5lbCA9IHt9O1xuXG5mdW5jdGlvbiBpbm5lcl9zdHJpbmdpZnkoXG4gIG9iamVjdDogYW55LFxuICBwcmVmaXg6IFByb3BlcnR5S2V5LFxuICBnZW5lcmF0ZUFycmF5UHJlZml4OiBTdHJpbmdpZnlPcHRpb25zWydhcnJheUZvcm1hdCddIHwgKChwcmVmaXg6IHN0cmluZywga2V5OiBzdHJpbmcpID0+IHN0cmluZyksXG4gIGNvbW1hUm91bmRUcmlwOiBib29sZWFuLFxuICBhbGxvd0VtcHR5QXJyYXlzOiBib29sZWFuLFxuICBzdHJpY3ROdWxsSGFuZGxpbmc6IGJvb2xlYW4sXG4gIHNraXBOdWxsczogYm9vbGVhbixcbiAgZW5jb2RlRG90SW5LZXlzOiBib29sZWFuLFxuICBlbmNvZGVyOiBTdHJpbmdpZnlPcHRpb25zWydlbmNvZGVyJ10sXG4gIGZpbHRlcjogU3RyaW5naWZ5T3B0aW9uc1snZmlsdGVyJ10sXG4gIHNvcnQ6IFN0cmluZ2lmeU9wdGlvbnNbJ3NvcnQnXSxcbiAgYWxsb3dEb3RzOiBTdHJpbmdpZnlPcHRpb25zWydhbGxvd0RvdHMnXSxcbiAgc2VyaWFsaXplRGF0ZTogU3RyaW5naWZ5T3B0aW9uc1snc2VyaWFsaXplRGF0ZSddLFxuICBmb3JtYXQ6IFN0cmluZ2lmeU9wdGlvbnNbJ2Zvcm1hdCddLFxuICBmb3JtYXR0ZXI6IFN0cmluZ2lmeU9wdGlvbnNbJ2Zvcm1hdHRlciddLFxuICBlbmNvZGVWYWx1ZXNPbmx5OiBib29sZWFuLFxuICBjaGFyc2V0OiBTdHJpbmdpZnlPcHRpb25zWydjaGFyc2V0J10sXG4gIHNpZGVDaGFubmVsOiBXZWFrTWFwPGFueSwgYW55Pixcbikge1xuICBsZXQgb2JqID0gb2JqZWN0O1xuXG4gIGxldCB0bXBfc2MgPSBzaWRlQ2hhbm5lbDtcbiAgbGV0IHN0ZXAgPSAwO1xuICBsZXQgZmluZF9mbGFnID0gZmFsc2U7XG4gIHdoaWxlICgodG1wX3NjID0gdG1wX3NjLmdldChzZW50aW5lbCkpICE9PSB2b2lkIHVuZGVmaW5lZCAmJiAhZmluZF9mbGFnKSB7XG4gICAgLy8gV2hlcmUgb2JqZWN0IGxhc3QgYXBwZWFyZWQgaW4gdGhlIHJlZiB0cmVlXG4gICAgY29uc3QgcG9zID0gdG1wX3NjLmdldChvYmplY3QpO1xuICAgIHN0ZXAgKz0gMTtcbiAgICBpZiAodHlwZW9mIHBvcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChwb3MgPT09IHN0ZXApIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0N5Y2xpYyBvYmplY3QgdmFsdWUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpbmRfZmxhZyA9IHRydWU7IC8vIEJyZWFrIHdoaWxlXG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdG1wX3NjLmdldChzZW50aW5lbCkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBzdGVwID0gMDtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIGZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9iaiA9IGZpbHRlcihwcmVmaXgsIG9iaik7XG4gIH0gZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgIG9iaiA9IHNlcmlhbGl6ZURhdGU/LihvYmopO1xuICB9IGVsc2UgaWYgKGdlbmVyYXRlQXJyYXlQcmVmaXggPT09ICdjb21tYScgJiYgaXNfYXJyYXkob2JqKSkge1xuICAgIG9iaiA9IG1heWJlX21hcChvYmosIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gc2VyaWFsaXplRGF0ZT8uKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChvYmogPT09IG51bGwpIHtcbiAgICBpZiAoc3RyaWN0TnVsbEhhbmRsaW5nKSB7XG4gICAgICByZXR1cm4gZW5jb2RlciAmJiAhZW5jb2RlVmFsdWVzT25seSA/XG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgIGVuY29kZXIocHJlZml4LCBkZWZhdWx0cy5lbmNvZGVyLCBjaGFyc2V0LCAna2V5JywgZm9ybWF0KVxuICAgICAgICA6IHByZWZpeDtcbiAgICB9XG5cbiAgICBvYmogPSAnJztcbiAgfVxuXG4gIGlmIChpc19ub25fbnVsbGlzaF9wcmltaXRpdmUob2JqKSB8fCBpc19idWZmZXIob2JqKSkge1xuICAgIGlmIChlbmNvZGVyKSB7XG4gICAgICBjb25zdCBrZXlfdmFsdWUgPVxuICAgICAgICBlbmNvZGVWYWx1ZXNPbmx5ID8gcHJlZml4XG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICA6IGVuY29kZXIocHJlZml4LCBkZWZhdWx0cy5lbmNvZGVyLCBjaGFyc2V0LCAna2V5JywgZm9ybWF0KTtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIGZvcm1hdHRlcj8uKGtleV92YWx1ZSkgK1xuICAgICAgICAgICc9JyArXG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgIGZvcm1hdHRlcj8uKGVuY29kZXIob2JqLCBkZWZhdWx0cy5lbmNvZGVyLCBjaGFyc2V0LCAndmFsdWUnLCBmb3JtYXQpKSxcbiAgICAgIF07XG4gICAgfVxuICAgIHJldHVybiBbZm9ybWF0dGVyPy4ocHJlZml4KSArICc9JyArIGZvcm1hdHRlcj8uKFN0cmluZyhvYmopKV07XG4gIH1cblxuICBjb25zdCB2YWx1ZXM6IHN0cmluZ1tdID0gW107XG5cbiAgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfVxuXG4gIGxldCBvYmpfa2V5cztcbiAgaWYgKGdlbmVyYXRlQXJyYXlQcmVmaXggPT09ICdjb21tYScgJiYgaXNfYXJyYXkob2JqKSkge1xuICAgIC8vIHdlIG5lZWQgdG8gam9pbiBlbGVtZW50cyBpblxuICAgIGlmIChlbmNvZGVWYWx1ZXNPbmx5ICYmIGVuY29kZXIpIHtcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdmFsdWVzIG9ubHlcbiAgICAgIG9iaiA9IG1heWJlX21hcChvYmosIGVuY29kZXIpO1xuICAgIH1cbiAgICBvYmpfa2V5cyA9IFt7IHZhbHVlOiBvYmoubGVuZ3RoID4gMCA/IG9iai5qb2luKCcsJykgfHwgbnVsbCA6IHZvaWQgdW5kZWZpbmVkIH1dO1xuICB9IGVsc2UgaWYgKGlzX2FycmF5KGZpbHRlcikpIHtcbiAgICBvYmpfa2V5cyA9IGZpbHRlcjtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICBvYmpfa2V5cyA9IHNvcnQgPyBrZXlzLnNvcnQoc29ydCkgOiBrZXlzO1xuICB9XG5cbiAgY29uc3QgZW5jb2RlZF9wcmVmaXggPSBlbmNvZGVEb3RJbktleXMgPyBTdHJpbmcocHJlZml4KS5yZXBsYWNlKC9cXC4vZywgJyUyRScpIDogU3RyaW5nKHByZWZpeCk7XG5cbiAgY29uc3QgYWRqdXN0ZWRfcHJlZml4ID1cbiAgICBjb21tYVJvdW5kVHJpcCAmJiBpc19hcnJheShvYmopICYmIG9iai5sZW5ndGggPT09IDEgPyBlbmNvZGVkX3ByZWZpeCArICdbXScgOiBlbmNvZGVkX3ByZWZpeDtcblxuICBpZiAoYWxsb3dFbXB0eUFycmF5cyAmJiBpc19hcnJheShvYmopICYmIG9iai5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gYWRqdXN0ZWRfcHJlZml4ICsgJ1tdJztcbiAgfVxuXG4gIGZvciAobGV0IGogPSAwOyBqIDwgb2JqX2tleXMubGVuZ3RoOyArK2opIHtcbiAgICBjb25zdCBrZXkgPSBvYmpfa2V5c1tqXTtcbiAgICBjb25zdCB2YWx1ZSA9XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Yga2V5LnZhbHVlICE9PSAndW5kZWZpbmVkJyA/IGtleS52YWx1ZSA6IG9ialtrZXkgYXMgYW55XTtcblxuICAgIGlmIChza2lwTnVsbHMgJiYgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCBlbmNvZGVkX2tleSA9IGFsbG93RG90cyAmJiBlbmNvZGVEb3RJbktleXMgPyAoa2V5IGFzIGFueSkucmVwbGFjZSgvXFwuL2csICclMkUnKSA6IGtleTtcbiAgICBjb25zdCBrZXlfcHJlZml4ID1cbiAgICAgIGlzX2FycmF5KG9iaikgP1xuICAgICAgICB0eXBlb2YgZ2VuZXJhdGVBcnJheVByZWZpeCA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgICAgZ2VuZXJhdGVBcnJheVByZWZpeChhZGp1c3RlZF9wcmVmaXgsIGVuY29kZWRfa2V5KVxuICAgICAgICA6IGFkanVzdGVkX3ByZWZpeFxuICAgICAgOiBhZGp1c3RlZF9wcmVmaXggKyAoYWxsb3dEb3RzID8gJy4nICsgZW5jb2RlZF9rZXkgOiAnWycgKyBlbmNvZGVkX2tleSArICddJyk7XG5cbiAgICBzaWRlQ2hhbm5lbC5zZXQob2JqZWN0LCBzdGVwKTtcbiAgICBjb25zdCB2YWx1ZVNpZGVDaGFubmVsID0gbmV3IFdlYWtNYXAoKTtcbiAgICB2YWx1ZVNpZGVDaGFubmVsLnNldChzZW50aW5lbCwgc2lkZUNoYW5uZWwpO1xuICAgIHB1c2hfdG9fYXJyYXkoXG4gICAgICB2YWx1ZXMsXG4gICAgICBpbm5lcl9zdHJpbmdpZnkoXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBrZXlfcHJlZml4LFxuICAgICAgICBnZW5lcmF0ZUFycmF5UHJlZml4LFxuICAgICAgICBjb21tYVJvdW5kVHJpcCxcbiAgICAgICAgYWxsb3dFbXB0eUFycmF5cyxcbiAgICAgICAgc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgICAgICBza2lwTnVsbHMsXG4gICAgICAgIGVuY29kZURvdEluS2V5cyxcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBnZW5lcmF0ZUFycmF5UHJlZml4ID09PSAnY29tbWEnICYmIGVuY29kZVZhbHVlc09ubHkgJiYgaXNfYXJyYXkob2JqKSA/IG51bGwgOiBlbmNvZGVyLFxuICAgICAgICBmaWx0ZXIsXG4gICAgICAgIHNvcnQsXG4gICAgICAgIGFsbG93RG90cyxcbiAgICAgICAgc2VyaWFsaXplRGF0ZSxcbiAgICAgICAgZm9ybWF0LFxuICAgICAgICBmb3JtYXR0ZXIsXG4gICAgICAgIGVuY29kZVZhbHVlc09ubHksXG4gICAgICAgIGNoYXJzZXQsXG4gICAgICAgIHZhbHVlU2lkZUNoYW5uZWwsXG4gICAgICApLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdmFsdWVzO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVfc3RyaW5naWZ5X29wdGlvbnMoXG4gIG9wdHM6IFN0cmluZ2lmeU9wdGlvbnMgPSBkZWZhdWx0cyxcbik6IE5vbk51bGxhYmxlUHJvcGVydGllczxPbWl0PFN0cmluZ2lmeU9wdGlvbnMsICdpbmRpY2VzJz4+ICYgeyBpbmRpY2VzPzogYm9vbGVhbiB9IHtcbiAgaWYgKHR5cGVvZiBvcHRzLmFsbG93RW1wdHlBcnJheXMgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvcHRzLmFsbG93RW1wdHlBcnJheXMgIT09ICdib29sZWFuJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2BhbGxvd0VtcHR5QXJyYXlzYCBvcHRpb24gY2FuIG9ubHkgYmUgYHRydWVgIG9yIGBmYWxzZWAsIHdoZW4gcHJvdmlkZWQnKTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0cy5lbmNvZGVEb3RJbktleXMgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvcHRzLmVuY29kZURvdEluS2V5cyAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYGVuY29kZURvdEluS2V5c2Agb3B0aW9uIGNhbiBvbmx5IGJlIGB0cnVlYCBvciBgZmFsc2VgLCB3aGVuIHByb3ZpZGVkJyk7XG4gIH1cblxuICBpZiAob3B0cy5lbmNvZGVyICE9PSBudWxsICYmIHR5cGVvZiBvcHRzLmVuY29kZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvcHRzLmVuY29kZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFbmNvZGVyIGhhcyB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgY29uc3QgY2hhcnNldCA9IG9wdHMuY2hhcnNldCB8fCBkZWZhdWx0cy5jaGFyc2V0O1xuICBpZiAodHlwZW9mIG9wdHMuY2hhcnNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAndXRmLTgnICYmIG9wdHMuY2hhcnNldCAhPT0gJ2lzby04ODU5LTEnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGNoYXJzZXQgb3B0aW9uIG11c3QgYmUgZWl0aGVyIHV0Zi04LCBpc28tODg1OS0xLCBvciB1bmRlZmluZWQnKTtcbiAgfVxuXG4gIGxldCBmb3JtYXQgPSBkZWZhdWx0X2Zvcm1hdDtcbiAgaWYgKHR5cGVvZiBvcHRzLmZvcm1hdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoIWhhcy5jYWxsKGZvcm1hdHRlcnMsIG9wdHMuZm9ybWF0KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBmb3JtYXQgb3B0aW9uIHByb3ZpZGVkLicpO1xuICAgIH1cbiAgICBmb3JtYXQgPSBvcHRzLmZvcm1hdDtcbiAgfVxuICBjb25zdCBmb3JtYXR0ZXIgPSBmb3JtYXR0ZXJzW2Zvcm1hdF07XG5cbiAgbGV0IGZpbHRlciA9IGRlZmF1bHRzLmZpbHRlcjtcbiAgaWYgKHR5cGVvZiBvcHRzLmZpbHRlciA9PT0gJ2Z1bmN0aW9uJyB8fCBpc19hcnJheShvcHRzLmZpbHRlcikpIHtcbiAgICBmaWx0ZXIgPSBvcHRzLmZpbHRlcjtcbiAgfVxuXG4gIGxldCBhcnJheUZvcm1hdDogU3RyaW5naWZ5T3B0aW9uc1snYXJyYXlGb3JtYXQnXTtcbiAgaWYgKG9wdHMuYXJyYXlGb3JtYXQgJiYgb3B0cy5hcnJheUZvcm1hdCBpbiBhcnJheV9wcmVmaXhfZ2VuZXJhdG9ycykge1xuICAgIGFycmF5Rm9ybWF0ID0gb3B0cy5hcnJheUZvcm1hdDtcbiAgfSBlbHNlIGlmICgnaW5kaWNlcycgaW4gb3B0cykge1xuICAgIGFycmF5Rm9ybWF0ID0gb3B0cy5pbmRpY2VzID8gJ2luZGljZXMnIDogJ3JlcGVhdCc7XG4gIH0gZWxzZSB7XG4gICAgYXJyYXlGb3JtYXQgPSBkZWZhdWx0cy5hcnJheUZvcm1hdDtcbiAgfVxuXG4gIGlmICgnY29tbWFSb3VuZFRyaXAnIGluIG9wdHMgJiYgdHlwZW9mIG9wdHMuY29tbWFSb3VuZFRyaXAgIT09ICdib29sZWFuJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Bjb21tYVJvdW5kVHJpcGAgbXVzdCBiZSBhIGJvb2xlYW4sIG9yIGFic2VudCcpO1xuICB9XG5cbiAgY29uc3QgYWxsb3dEb3RzID1cbiAgICB0eXBlb2Ygb3B0cy5hbGxvd0RvdHMgPT09ICd1bmRlZmluZWQnID9cbiAgICAgICEhb3B0cy5lbmNvZGVEb3RJbktleXMgPT09IHRydWUgP1xuICAgICAgICB0cnVlXG4gICAgICA6IGRlZmF1bHRzLmFsbG93RG90c1xuICAgIDogISFvcHRzLmFsbG93RG90cztcblxuICByZXR1cm4ge1xuICAgIGFkZFF1ZXJ5UHJlZml4OiB0eXBlb2Ygb3B0cy5hZGRRdWVyeVByZWZpeCA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5hZGRRdWVyeVByZWZpeCA6IGRlZmF1bHRzLmFkZFF1ZXJ5UHJlZml4LFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBhbGxvd0RvdHM6IGFsbG93RG90cyxcbiAgICBhbGxvd0VtcHR5QXJyYXlzOlxuICAgICAgdHlwZW9mIG9wdHMuYWxsb3dFbXB0eUFycmF5cyA9PT0gJ2Jvb2xlYW4nID8gISFvcHRzLmFsbG93RW1wdHlBcnJheXMgOiBkZWZhdWx0cy5hbGxvd0VtcHR5QXJyYXlzLFxuICAgIGFycmF5Rm9ybWF0OiBhcnJheUZvcm1hdCxcbiAgICBjaGFyc2V0OiBjaGFyc2V0LFxuICAgIGNoYXJzZXRTZW50aW5lbDpcbiAgICAgIHR5cGVvZiBvcHRzLmNoYXJzZXRTZW50aW5lbCA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5jaGFyc2V0U2VudGluZWwgOiBkZWZhdWx0cy5jaGFyc2V0U2VudGluZWwsXG4gICAgY29tbWFSb3VuZFRyaXA6ICEhb3B0cy5jb21tYVJvdW5kVHJpcCxcbiAgICBkZWxpbWl0ZXI6IHR5cGVvZiBvcHRzLmRlbGltaXRlciA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0cy5kZWxpbWl0ZXIgOiBvcHRzLmRlbGltaXRlcixcbiAgICBlbmNvZGU6IHR5cGVvZiBvcHRzLmVuY29kZSA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5lbmNvZGUgOiBkZWZhdWx0cy5lbmNvZGUsXG4gICAgZW5jb2RlRG90SW5LZXlzOlxuICAgICAgdHlwZW9mIG9wdHMuZW5jb2RlRG90SW5LZXlzID09PSAnYm9vbGVhbicgPyBvcHRzLmVuY29kZURvdEluS2V5cyA6IGRlZmF1bHRzLmVuY29kZURvdEluS2V5cyxcbiAgICBlbmNvZGVyOiB0eXBlb2Ygb3B0cy5lbmNvZGVyID09PSAnZnVuY3Rpb24nID8gb3B0cy5lbmNvZGVyIDogZGVmYXVsdHMuZW5jb2RlcixcbiAgICBlbmNvZGVWYWx1ZXNPbmx5OlxuICAgICAgdHlwZW9mIG9wdHMuZW5jb2RlVmFsdWVzT25seSA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5lbmNvZGVWYWx1ZXNPbmx5IDogZGVmYXVsdHMuZW5jb2RlVmFsdWVzT25seSxcbiAgICBmaWx0ZXI6IGZpbHRlcixcbiAgICBmb3JtYXQ6IGZvcm1hdCxcbiAgICBmb3JtYXR0ZXI6IGZvcm1hdHRlcixcbiAgICBzZXJpYWxpemVEYXRlOiB0eXBlb2Ygb3B0cy5zZXJpYWxpemVEYXRlID09PSAnZnVuY3Rpb24nID8gb3B0cy5zZXJpYWxpemVEYXRlIDogZGVmYXVsdHMuc2VyaWFsaXplRGF0ZSxcbiAgICBza2lwTnVsbHM6IHR5cGVvZiBvcHRzLnNraXBOdWxscyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5za2lwTnVsbHMgOiBkZWZhdWx0cy5za2lwTnVsbHMsXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHNvcnQ6IHR5cGVvZiBvcHRzLnNvcnQgPT09ICdmdW5jdGlvbicgPyBvcHRzLnNvcnQgOiBudWxsLFxuICAgIHN0cmljdE51bGxIYW5kbGluZzpcbiAgICAgIHR5cGVvZiBvcHRzLnN0cmljdE51bGxIYW5kbGluZyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5zdHJpY3ROdWxsSGFuZGxpbmcgOiBkZWZhdWx0cy5zdHJpY3ROdWxsSGFuZGxpbmcsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnkob2JqZWN0OiBhbnksIG9wdHM6IFN0cmluZ2lmeU9wdGlvbnMgPSB7fSkge1xuICBsZXQgb2JqID0gb2JqZWN0O1xuICBjb25zdCBvcHRpb25zID0gbm9ybWFsaXplX3N0cmluZ2lmeV9vcHRpb25zKG9wdHMpO1xuXG4gIGxldCBvYmpfa2V5czogUHJvcGVydHlLZXlbXSB8IHVuZGVmaW5lZDtcbiAgbGV0IGZpbHRlcjtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZmlsdGVyID0gb3B0aW9ucy5maWx0ZXI7XG4gICAgb2JqID0gZmlsdGVyKCcnLCBvYmopO1xuICB9IGVsc2UgaWYgKGlzX2FycmF5KG9wdGlvbnMuZmlsdGVyKSkge1xuICAgIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyO1xuICAgIG9ial9rZXlzID0gZmlsdGVyO1xuICB9XG5cbiAgY29uc3Qga2V5czogc3RyaW5nW10gPSBbXTtcblxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgb2JqID09PSBudWxsKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgY29uc3QgZ2VuZXJhdGVBcnJheVByZWZpeCA9IGFycmF5X3ByZWZpeF9nZW5lcmF0b3JzW29wdGlvbnMuYXJyYXlGb3JtYXRdO1xuICBjb25zdCBjb21tYVJvdW5kVHJpcCA9IGdlbmVyYXRlQXJyYXlQcmVmaXggPT09ICdjb21tYScgJiYgb3B0aW9ucy5jb21tYVJvdW5kVHJpcDtcblxuICBpZiAoIW9ial9rZXlzKSB7XG4gICAgb2JqX2tleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuc29ydCkge1xuICAgIG9ial9rZXlzLnNvcnQob3B0aW9ucy5zb3J0KTtcbiAgfVxuXG4gIGNvbnN0IHNpZGVDaGFubmVsID0gbmV3IFdlYWtNYXAoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmpfa2V5cy5sZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IGtleSA9IG9ial9rZXlzW2ldITtcblxuICAgIGlmIChvcHRpb25zLnNraXBOdWxscyAmJiBvYmpba2V5XSA9PT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHB1c2hfdG9fYXJyYXkoXG4gICAgICBrZXlzLFxuICAgICAgaW5uZXJfc3RyaW5naWZ5KFxuICAgICAgICBvYmpba2V5XSxcbiAgICAgICAga2V5LFxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgICAgIGNvbW1hUm91bmRUcmlwLFxuICAgICAgICBvcHRpb25zLmFsbG93RW1wdHlBcnJheXMsXG4gICAgICAgIG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgICAgICBvcHRpb25zLnNraXBOdWxscyxcbiAgICAgICAgb3B0aW9ucy5lbmNvZGVEb3RJbktleXMsXG4gICAgICAgIG9wdGlvbnMuZW5jb2RlID8gb3B0aW9ucy5lbmNvZGVyIDogbnVsbCxcbiAgICAgICAgb3B0aW9ucy5maWx0ZXIsXG4gICAgICAgIG9wdGlvbnMuc29ydCxcbiAgICAgICAgb3B0aW9ucy5hbGxvd0RvdHMsXG4gICAgICAgIG9wdGlvbnMuc2VyaWFsaXplRGF0ZSxcbiAgICAgICAgb3B0aW9ucy5mb3JtYXQsXG4gICAgICAgIG9wdGlvbnMuZm9ybWF0dGVyLFxuICAgICAgICBvcHRpb25zLmVuY29kZVZhbHVlc09ubHksXG4gICAgICAgIG9wdGlvbnMuY2hhcnNldCxcbiAgICAgICAgc2lkZUNoYW5uZWwsXG4gICAgICApLFxuICAgICk7XG4gIH1cblxuICBjb25zdCBqb2luZWQgPSBrZXlzLmpvaW4ob3B0aW9ucy5kZWxpbWl0ZXIpO1xuICBsZXQgcHJlZml4ID0gb3B0aW9ucy5hZGRRdWVyeVByZWZpeCA9PT0gdHJ1ZSA/ICc/JyA6ICcnO1xuXG4gIGlmIChvcHRpb25zLmNoYXJzZXRTZW50aW5lbCkge1xuICAgIGlmIChvcHRpb25zLmNoYXJzZXQgPT09ICdpc28tODg1OS0xJykge1xuICAgICAgLy8gZW5jb2RlVVJJQ29tcG9uZW50KCcmIzEwMDAzOycpLCB0aGUgXCJudW1lcmljIGVudGl0eVwiIHJlcHJlc2VudGF0aW9uIG9mIGEgY2hlY2ttYXJrXG4gICAgICBwcmVmaXggKz0gJ3V0Zjg9JTI2JTIzMTAwMDMlM0ImJztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZW5jb2RlVVJJQ29tcG9uZW50KCdcdTI3MTMnKVxuICAgICAgcHJlZml4ICs9ICd1dGY4PSVFMiU5QyU5MyYnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBqb2luZWQubGVuZ3RoID4gMCA/IHByZWZpeCArIGpvaW5lZCA6ICcnO1xufVxuIiwgImV4cG9ydCBjb25zdCBWRVJTSU9OID0gJzQuMTA0LjAnOyAvLyB4LXJlbGVhc2UtcGxlYXNlLXZlcnNpb25cbiIsICIvKipcbiAqIERpc2NsYWltZXI6IG1vZHVsZXMgaW4gX3NoaW1zIGFyZW4ndCBpbnRlbmRlZCB0byBiZSBpbXBvcnRlZCBieSBTREsgdXNlcnMuXG4gKi9cbmltcG9ydCB7IHR5cGUgUmVxdWVzdE9wdGlvbnMgfSBmcm9tICcuLi9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBTaGltcyB7XG4gIGtpbmQ6IHN0cmluZztcbiAgZmV0Y2g6IGFueTtcbiAgUmVxdWVzdDogYW55O1xuICBSZXNwb25zZTogYW55O1xuICBIZWFkZXJzOiBhbnk7XG4gIEZvcm1EYXRhOiBhbnk7XG4gIEJsb2I6IGFueTtcbiAgRmlsZTogYW55O1xuICBSZWFkYWJsZVN0cmVhbTogYW55O1xuICBnZXRNdWx0aXBhcnRSZXF1ZXN0T3B0aW9uczogPFQgPSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4oXG4gICAgZm9ybTogU2hpbXNbJ0Zvcm1EYXRhJ10sXG4gICAgb3B0czogUmVxdWVzdE9wdGlvbnM8VD4sXG4gICkgPT4gUHJvbWlzZTxSZXF1ZXN0T3B0aW9uczxUPj47XG4gIGdldERlZmF1bHRBZ2VudDogKHVybDogc3RyaW5nKSA9PiBhbnk7XG4gIGZpbGVGcm9tUGF0aDpcbiAgICB8ICgocGF0aDogc3RyaW5nLCBmaWxlbmFtZT86IHN0cmluZywgb3B0aW9ucz86IHt9KSA9PiBQcm9taXNlPFNoaW1zWydGaWxlJ10+KVxuICAgIHwgKChwYXRoOiBzdHJpbmcsIG9wdGlvbnM/OiB7fSkgPT4gUHJvbWlzZTxTaGltc1snRmlsZSddPik7XG4gIGlzRnNSZWFkU3RyZWFtOiAodmFsdWU6IGFueSkgPT4gYm9vbGVhbjtcbn1cblxuZXhwb3J0IGxldCBhdXRvID0gZmFsc2U7XG5leHBvcnQgbGV0IGtpbmQ6IFNoaW1zWydraW5kJ10gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IGZldGNoOiBTaGltc1snZmV0Y2gnXSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgUmVxdWVzdDogU2hpbXNbJ1JlcXVlc3QnXSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgUmVzcG9uc2U6IFNoaW1zWydSZXNwb25zZSddIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBIZWFkZXJzOiBTaGltc1snSGVhZGVycyddIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBGb3JtRGF0YTogU2hpbXNbJ0Zvcm1EYXRhJ10gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IEJsb2I6IFNoaW1zWydCbG9iJ10gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IEZpbGU6IFNoaW1zWydGaWxlJ10gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IFJlYWRhYmxlU3RyZWFtOiBTaGltc1snUmVhZGFibGVTdHJlYW0nXSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgZ2V0TXVsdGlwYXJ0UmVxdWVzdE9wdGlvbnM6IFNoaW1zWydnZXRNdWx0aXBhcnRSZXF1ZXN0T3B0aW9ucyddIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuZXhwb3J0IGxldCBnZXREZWZhdWx0QWdlbnQ6IFNoaW1zWydnZXREZWZhdWx0QWdlbnQnXSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbmV4cG9ydCBsZXQgZmlsZUZyb21QYXRoOiBTaGltc1snZmlsZUZyb21QYXRoJ10gfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5leHBvcnQgbGV0IGlzRnNSZWFkU3RyZWFtOiBTaGltc1snaXNGc1JlYWRTdHJlYW0nXSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldFNoaW1zKHNoaW1zOiBTaGltcywgb3B0aW9uczogeyBhdXRvOiBib29sZWFuIH0gPSB7IGF1dG86IGZhbHNlIH0pIHtcbiAgaWYgKGF1dG8pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgeW91IG11c3QgXFxgaW1wb3J0ICdvcGVuYWkvc2hpbXMvJHtzaGltcy5raW5kfSdcXGAgYmVmb3JlIGltcG9ydGluZyBhbnl0aGluZyBlbHNlIGZyb20gb3BlbmFpYCxcbiAgICApO1xuICB9XG4gIGlmIChraW5kKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBjYW4ndCBcXGBpbXBvcnQgJ29wZW5haS9zaGltcy8ke3NoaW1zLmtpbmR9J1xcYCBhZnRlciBcXGBpbXBvcnQgJ29wZW5haS9zaGltcy8ke2tpbmR9J1xcYGApO1xuICB9XG4gIGF1dG8gPSBvcHRpb25zLmF1dG87XG4gIGtpbmQgPSBzaGltcy5raW5kO1xuICBmZXRjaCA9IHNoaW1zLmZldGNoO1xuICBSZXF1ZXN0ID0gc2hpbXMuUmVxdWVzdDtcbiAgUmVzcG9uc2UgPSBzaGltcy5SZXNwb25zZTtcbiAgSGVhZGVycyA9IHNoaW1zLkhlYWRlcnM7XG4gIEZvcm1EYXRhID0gc2hpbXMuRm9ybURhdGE7XG4gIEJsb2IgPSBzaGltcy5CbG9iO1xuICBGaWxlID0gc2hpbXMuRmlsZTtcbiAgUmVhZGFibGVTdHJlYW0gPSBzaGltcy5SZWFkYWJsZVN0cmVhbTtcbiAgZ2V0TXVsdGlwYXJ0UmVxdWVzdE9wdGlvbnMgPSBzaGltcy5nZXRNdWx0aXBhcnRSZXF1ZXN0T3B0aW9ucztcbiAgZ2V0RGVmYXVsdEFnZW50ID0gc2hpbXMuZ2V0RGVmYXVsdEFnZW50O1xuICBmaWxlRnJvbVBhdGggPSBzaGltcy5maWxlRnJvbVBhdGg7XG4gIGlzRnNSZWFkU3RyZWFtID0gc2hpbXMuaXNGc1JlYWRTdHJlYW07XG59XG4iLCAiLyoqXG4gKiBEaXNjbGFpbWVyOiBtb2R1bGVzIGluIF9zaGltcyBhcmVuJ3QgaW50ZW5kZWQgdG8gYmUgaW1wb3J0ZWQgYnkgU0RLIHVzZXJzLlxuICovXG5leHBvcnQgY2xhc3MgTXVsdGlwYXJ0Qm9keSB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBib2R5OiBhbnkpIHt9XG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnTXVsdGlwYXJ0Qm9keSc7XG4gIH1cbn1cbiIsICIvKipcbiAqIERpc2NsYWltZXI6IG1vZHVsZXMgaW4gX3NoaW1zIGFyZW4ndCBpbnRlbmRlZCB0byBiZSBpbXBvcnRlZCBieSBTREsgdXNlcnMuXG4gKi9cbmltcG9ydCB7IE11bHRpcGFydEJvZHkgfSBmcm9tICcuL011bHRpcGFydEJvZHknO1xuaW1wb3J0IHsgdHlwZSBSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJy4uL2NvcmUnO1xuaW1wb3J0IHsgdHlwZSBTaGltcyB9IGZyb20gJy4vcmVnaXN0cnknO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UnVudGltZSh7IG1hbnVhbGx5SW1wb3J0ZWQgfTogeyBtYW51YWxseUltcG9ydGVkPzogYm9vbGVhbiB9ID0ge30pOiBTaGltcyB7XG4gIGNvbnN0IHJlY29tbWVuZGF0aW9uID1cbiAgICBtYW51YWxseUltcG9ydGVkID9cbiAgICAgIGBZb3UgbWF5IG5lZWQgdG8gdXNlIHBvbHlmaWxsc2BcbiAgICA6IGBBZGQgb25lIG9mIHRoZXNlIGltcG9ydHMgYmVmb3JlIHlvdXIgZmlyc3QgXFxgaW1wb3J0IFx1MjAyNiBmcm9tICdvcGVuYWknXFxgOlxuLSBcXGBpbXBvcnQgJ29wZW5haS9zaGltcy9ub2RlJ1xcYCAoaWYgeW91J3JlIHJ1bm5pbmcgb24gTm9kZSlcbi0gXFxgaW1wb3J0ICdvcGVuYWkvc2hpbXMvd2ViJ1xcYCAob3RoZXJ3aXNlKVxuYDtcblxuICBsZXQgX2ZldGNoLCBfUmVxdWVzdCwgX1Jlc3BvbnNlLCBfSGVhZGVycztcbiAgdHJ5IHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgX2ZldGNoID0gZmV0Y2g7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIF9SZXF1ZXN0ID0gUmVxdWVzdDtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgX1Jlc3BvbnNlID0gUmVzcG9uc2U7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIF9IZWFkZXJzID0gSGVhZGVycztcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgdGhpcyBlbnZpcm9ubWVudCBpcyBtaXNzaW5nIHRoZSBmb2xsb3dpbmcgV2ViIEZldGNoIEFQSSB0eXBlOiAke1xuICAgICAgICAoZXJyb3IgYXMgYW55KS5tZXNzYWdlXG4gICAgICB9LiAke3JlY29tbWVuZGF0aW9ufWAsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAga2luZDogJ3dlYicsXG4gICAgZmV0Y2g6IF9mZXRjaCxcbiAgICBSZXF1ZXN0OiBfUmVxdWVzdCxcbiAgICBSZXNwb25zZTogX1Jlc3BvbnNlLFxuICAgIEhlYWRlcnM6IF9IZWFkZXJzLFxuICAgIEZvcm1EYXRhOlxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJyA/IEZvcm1EYXRhIDogKFxuICAgICAgICBjbGFzcyBGb3JtRGF0YSB7XG4gICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICBgZmlsZSB1cGxvYWRzIGFyZW4ndCBzdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudCB5ZXQgYXMgJ0Zvcm1EYXRhJyBpcyB1bmRlZmluZWQuICR7cmVjb21tZW5kYXRpb259YCxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApLFxuICAgIEJsb2I6XG4gICAgICB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgPyBCbG9iIDogKFxuICAgICAgICBjbGFzcyBCbG9iIHtcbiAgICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgYGZpbGUgdXBsb2FkcyBhcmVuJ3Qgc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnQgeWV0IGFzICdCbG9iJyBpcyB1bmRlZmluZWQuICR7cmVjb21tZW5kYXRpb259YCxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApLFxuICAgIEZpbGU6XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0eXBlb2YgRmlsZSAhPT0gJ3VuZGVmaW5lZCcgPyBGaWxlIDogKFxuICAgICAgICBjbGFzcyBGaWxlIHtcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgIGBmaWxlIHVwbG9hZHMgYXJlbid0IHN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50IHlldCBhcyAnRmlsZScgaXMgdW5kZWZpbmVkLiAke3JlY29tbWVuZGF0aW9ufWAsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKSxcbiAgICBSZWFkYWJsZVN0cmVhbTpcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIHR5cGVvZiBSZWFkYWJsZVN0cmVhbSAhPT0gJ3VuZGVmaW5lZCcgPyBSZWFkYWJsZVN0cmVhbSA6IChcbiAgICAgICAgY2xhc3MgUmVhZGFibGVTdHJlYW0ge1xuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgYHN0cmVhbWluZyBpc24ndCBzdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudCB5ZXQgYXMgJ1JlYWRhYmxlU3RyZWFtJyBpcyB1bmRlZmluZWQuICR7cmVjb21tZW5kYXRpb259YCxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApLFxuICAgIGdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zOiBhc3luYyA8VCA9IFJlY29yZDxzdHJpbmcsIHVua25vd24+PihcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGZvcm06IEZvcm1EYXRhLFxuICAgICAgb3B0czogUmVxdWVzdE9wdGlvbnM8VD4sXG4gICAgKTogUHJvbWlzZTxSZXF1ZXN0T3B0aW9uczxUPj4gPT4gKHtcbiAgICAgIC4uLm9wdHMsXG4gICAgICBib2R5OiBuZXcgTXVsdGlwYXJ0Qm9keShmb3JtKSBhcyBhbnksXG4gICAgfSksXG4gICAgZ2V0RGVmYXVsdEFnZW50OiAodXJsOiBzdHJpbmcpID0+IHVuZGVmaW5lZCxcbiAgICBmaWxlRnJvbVBhdGg6ICgpID0+IHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RoZSBgZmlsZUZyb21QYXRoYCBmdW5jdGlvbiBpcyBvbmx5IHN1cHBvcnRlZCBpbiBOb2RlLiBTZWUgdGhlIFJFQURNRSBmb3IgbW9yZSBkZXRhaWxzOiBodHRwczovL3d3dy5naXRodWIuY29tL29wZW5haS9vcGVuYWktbm9kZSNmaWxlLXVwbG9hZHMnLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGlzRnNSZWFkU3RyZWFtOiAodmFsdWU6IGFueSkgPT4gZmFsc2UsXG4gIH07XG59XG4iLCAiLyoqXG4gKiBEaXNjbGFpbWVyOiBtb2R1bGVzIGluIF9zaGltcyBhcmVuJ3QgaW50ZW5kZWQgdG8gYmUgaW1wb3J0ZWQgYnkgU0RLIHVzZXJzLlxuICovXG5pbXBvcnQgKiBhcyBzaGltcyBmcm9tICcuL3JlZ2lzdHJ5Lm1qcyc7XG5pbXBvcnQgKiBhcyBhdXRvIGZyb20gJ29wZW5haS9fc2hpbXMvYXV0by9ydW50aW1lJztcbmV4cG9ydCBjb25zdCBpbml0ID0gKCkgPT4ge1xuICBpZiAoIXNoaW1zLmtpbmQpIHNoaW1zLnNldFNoaW1zKGF1dG8uZ2V0UnVudGltZSgpLCB7IGF1dG86IHRydWUgfSk7XG59O1xuZXhwb3J0ICogZnJvbSAnLi9yZWdpc3RyeS5tanMnO1xuXG5pbml0KCk7XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgY2FzdFRvRXJyb3IsIEhlYWRlcnMgfSBmcm9tICcuL2NvcmUnO1xuXG5leHBvcnQgY2xhc3MgT3BlbkFJRXJyb3IgZXh0ZW5kcyBFcnJvciB7fVxuXG5leHBvcnQgY2xhc3MgQVBJRXJyb3I8XG4gIFRTdGF0dXMgZXh0ZW5kcyBudW1iZXIgfCB1bmRlZmluZWQgPSBudW1iZXIgfCB1bmRlZmluZWQsXG4gIFRIZWFkZXJzIGV4dGVuZHMgSGVhZGVycyB8IHVuZGVmaW5lZCA9IEhlYWRlcnMgfCB1bmRlZmluZWQsXG4gIFRFcnJvciBleHRlbmRzIE9iamVjdCB8IHVuZGVmaW5lZCA9IE9iamVjdCB8IHVuZGVmaW5lZCxcbj4gZXh0ZW5kcyBPcGVuQUlFcnJvciB7XG4gIC8qKiBIVFRQIHN0YXR1cyBmb3IgdGhlIHJlc3BvbnNlIHRoYXQgY2F1c2VkIHRoZSBlcnJvciAqL1xuICByZWFkb25seSBzdGF0dXM6IFRTdGF0dXM7XG4gIC8qKiBIVFRQIGhlYWRlcnMgZm9yIHRoZSByZXNwb25zZSB0aGF0IGNhdXNlZCB0aGUgZXJyb3IgKi9cbiAgcmVhZG9ubHkgaGVhZGVyczogVEhlYWRlcnM7XG4gIC8qKiBKU09OIGJvZHkgb2YgdGhlIHJlc3BvbnNlIHRoYXQgY2F1c2VkIHRoZSBlcnJvciAqL1xuICByZWFkb25seSBlcnJvcjogVEVycm9yO1xuXG4gIHJlYWRvbmx5IGNvZGU6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQ7XG4gIHJlYWRvbmx5IHBhcmFtOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkO1xuICByZWFkb25seSB0eXBlOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgcmVhZG9ubHkgcmVxdWVzdF9pZDogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3RvcihzdGF0dXM6IFRTdGF0dXMsIGVycm9yOiBURXJyb3IsIG1lc3NhZ2U6IHN0cmluZyB8IHVuZGVmaW5lZCwgaGVhZGVyczogVEhlYWRlcnMpIHtcbiAgICBzdXBlcihgJHtBUElFcnJvci5tYWtlTWVzc2FnZShzdGF0dXMsIGVycm9yLCBtZXNzYWdlKX1gKTtcbiAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xuICAgIHRoaXMucmVxdWVzdF9pZCA9IGhlYWRlcnM/LlsneC1yZXF1ZXN0LWlkJ107XG4gICAgdGhpcy5lcnJvciA9IGVycm9yO1xuXG4gICAgY29uc3QgZGF0YSA9IGVycm9yIGFzIFJlY29yZDxzdHJpbmcsIGFueT47XG4gICAgdGhpcy5jb2RlID0gZGF0YT8uWydjb2RlJ107XG4gICAgdGhpcy5wYXJhbSA9IGRhdGE/LlsncGFyYW0nXTtcbiAgICB0aGlzLnR5cGUgPSBkYXRhPy5bJ3R5cGUnXTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIG1ha2VNZXNzYWdlKHN0YXR1czogbnVtYmVyIHwgdW5kZWZpbmVkLCBlcnJvcjogYW55LCBtZXNzYWdlOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBtc2cgPVxuICAgICAgZXJyb3I/Lm1lc3NhZ2UgP1xuICAgICAgICB0eXBlb2YgZXJyb3IubWVzc2FnZSA9PT0gJ3N0cmluZycgP1xuICAgICAgICAgIGVycm9yLm1lc3NhZ2VcbiAgICAgICAgOiBKU09OLnN0cmluZ2lmeShlcnJvci5tZXNzYWdlKVxuICAgICAgOiBlcnJvciA/IEpTT04uc3RyaW5naWZ5KGVycm9yKVxuICAgICAgOiBtZXNzYWdlO1xuXG4gICAgaWYgKHN0YXR1cyAmJiBtc2cpIHtcbiAgICAgIHJldHVybiBgJHtzdGF0dXN9ICR7bXNnfWA7XG4gICAgfVxuICAgIGlmIChzdGF0dXMpIHtcbiAgICAgIHJldHVybiBgJHtzdGF0dXN9IHN0YXR1cyBjb2RlIChubyBib2R5KWA7XG4gICAgfVxuICAgIGlmIChtc2cpIHtcbiAgICAgIHJldHVybiBtc2c7XG4gICAgfVxuICAgIHJldHVybiAnKG5vIHN0YXR1cyBjb2RlIG9yIGJvZHkpJztcbiAgfVxuXG4gIHN0YXRpYyBnZW5lcmF0ZShcbiAgICBzdGF0dXM6IG51bWJlciB8IHVuZGVmaW5lZCxcbiAgICBlcnJvclJlc3BvbnNlOiBPYmplY3QgfCB1bmRlZmluZWQsXG4gICAgbWVzc2FnZTogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgIGhlYWRlcnM6IEhlYWRlcnMgfCB1bmRlZmluZWQsXG4gICk6IEFQSUVycm9yIHtcbiAgICBpZiAoIXN0YXR1cyB8fCAhaGVhZGVycykge1xuICAgICAgcmV0dXJuIG5ldyBBUElDb25uZWN0aW9uRXJyb3IoeyBtZXNzYWdlLCBjYXVzZTogY2FzdFRvRXJyb3IoZXJyb3JSZXNwb25zZSkgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgZXJyb3IgPSAoZXJyb3JSZXNwb25zZSBhcyBSZWNvcmQ8c3RyaW5nLCBhbnk+KT8uWydlcnJvciddO1xuXG4gICAgaWYgKHN0YXR1cyA9PT0gNDAwKSB7XG4gICAgICByZXR1cm4gbmV3IEJhZFJlcXVlc3RFcnJvcihzdGF0dXMsIGVycm9yLCBtZXNzYWdlLCBoZWFkZXJzKTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSA0MDEpIHtcbiAgICAgIHJldHVybiBuZXcgQXV0aGVudGljYXRpb25FcnJvcihzdGF0dXMsIGVycm9yLCBtZXNzYWdlLCBoZWFkZXJzKTtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzID09PSA0MDMpIHtcbiAgICAgIHJldHVybiBuZXcgUGVybWlzc2lvbkRlbmllZEVycm9yKHN0YXR1cywgZXJyb3IsIG1lc3NhZ2UsIGhlYWRlcnMpO1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMgPT09IDQwNCkge1xuICAgICAgcmV0dXJuIG5ldyBOb3RGb3VuZEVycm9yKHN0YXR1cywgZXJyb3IsIG1lc3NhZ2UsIGhlYWRlcnMpO1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMgPT09IDQwOSkge1xuICAgICAgcmV0dXJuIG5ldyBDb25mbGljdEVycm9yKHN0YXR1cywgZXJyb3IsIG1lc3NhZ2UsIGhlYWRlcnMpO1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMgPT09IDQyMikge1xuICAgICAgcmV0dXJuIG5ldyBVbnByb2Nlc3NhYmxlRW50aXR5RXJyb3Ioc3RhdHVzLCBlcnJvciwgbWVzc2FnZSwgaGVhZGVycyk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXR1cyA9PT0gNDI5KSB7XG4gICAgICByZXR1cm4gbmV3IFJhdGVMaW1pdEVycm9yKHN0YXR1cywgZXJyb3IsIG1lc3NhZ2UsIGhlYWRlcnMpO1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMgPj0gNTAwKSB7XG4gICAgICByZXR1cm4gbmV3IEludGVybmFsU2VydmVyRXJyb3Ioc3RhdHVzLCBlcnJvciwgbWVzc2FnZSwgaGVhZGVycyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBUElFcnJvcihzdGF0dXMsIGVycm9yLCBtZXNzYWdlLCBoZWFkZXJzKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQVBJVXNlckFib3J0RXJyb3IgZXh0ZW5kcyBBUElFcnJvcjx1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkPiB7XG4gIGNvbnN0cnVjdG9yKHsgbWVzc2FnZSB9OiB7IG1lc3NhZ2U/OiBzdHJpbmcgfSA9IHt9KSB7XG4gICAgc3VwZXIodW5kZWZpbmVkLCB1bmRlZmluZWQsIG1lc3NhZ2UgfHwgJ1JlcXVlc3Qgd2FzIGFib3J0ZWQuJywgdW5kZWZpbmVkKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQVBJQ29ubmVjdGlvbkVycm9yIGV4dGVuZHMgQVBJRXJyb3I8dW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZD4ge1xuICBjb25zdHJ1Y3Rvcih7IG1lc3NhZ2UsIGNhdXNlIH06IHsgbWVzc2FnZT86IHN0cmluZyB8IHVuZGVmaW5lZDsgY2F1c2U/OiBFcnJvciB8IHVuZGVmaW5lZCB9KSB7XG4gICAgc3VwZXIodW5kZWZpbmVkLCB1bmRlZmluZWQsIG1lc3NhZ2UgfHwgJ0Nvbm5lY3Rpb24gZXJyb3IuJywgdW5kZWZpbmVkKTtcbiAgICAvLyBpbiBzb21lIGVudmlyb25tZW50cyB0aGUgJ2NhdXNlJyBwcm9wZXJ0eSBpcyBhbHJlYWR5IGRlY2xhcmVkXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlmIChjYXVzZSkgdGhpcy5jYXVzZSA9IGNhdXNlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBUElDb25uZWN0aW9uVGltZW91dEVycm9yIGV4dGVuZHMgQVBJQ29ubmVjdGlvbkVycm9yIHtcbiAgY29uc3RydWN0b3IoeyBtZXNzYWdlIH06IHsgbWVzc2FnZT86IHN0cmluZyB9ID0ge30pIHtcbiAgICBzdXBlcih7IG1lc3NhZ2U6IG1lc3NhZ2UgPz8gJ1JlcXVlc3QgdGltZWQgb3V0LicgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJhZFJlcXVlc3RFcnJvciBleHRlbmRzIEFQSUVycm9yPDQwMCwgSGVhZGVycz4ge31cblxuZXhwb3J0IGNsYXNzIEF1dGhlbnRpY2F0aW9uRXJyb3IgZXh0ZW5kcyBBUElFcnJvcjw0MDEsIEhlYWRlcnM+IHt9XG5cbmV4cG9ydCBjbGFzcyBQZXJtaXNzaW9uRGVuaWVkRXJyb3IgZXh0ZW5kcyBBUElFcnJvcjw0MDMsIEhlYWRlcnM+IHt9XG5cbmV4cG9ydCBjbGFzcyBOb3RGb3VuZEVycm9yIGV4dGVuZHMgQVBJRXJyb3I8NDA0LCBIZWFkZXJzPiB7fVxuXG5leHBvcnQgY2xhc3MgQ29uZmxpY3RFcnJvciBleHRlbmRzIEFQSUVycm9yPDQwOSwgSGVhZGVycz4ge31cblxuZXhwb3J0IGNsYXNzIFVucHJvY2Vzc2FibGVFbnRpdHlFcnJvciBleHRlbmRzIEFQSUVycm9yPDQyMiwgSGVhZGVycz4ge31cblxuZXhwb3J0IGNsYXNzIFJhdGVMaW1pdEVycm9yIGV4dGVuZHMgQVBJRXJyb3I8NDI5LCBIZWFkZXJzPiB7fVxuXG5leHBvcnQgY2xhc3MgSW50ZXJuYWxTZXJ2ZXJFcnJvciBleHRlbmRzIEFQSUVycm9yPG51bWJlciwgSGVhZGVycz4ge31cblxuZXhwb3J0IGNsYXNzIExlbmd0aEZpbmlzaFJlYXNvbkVycm9yIGV4dGVuZHMgT3BlbkFJRXJyb3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihgQ291bGQgbm90IHBhcnNlIHJlc3BvbnNlIGNvbnRlbnQgYXMgdGhlIGxlbmd0aCBsaW1pdCB3YXMgcmVhY2hlZGApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb250ZW50RmlsdGVyRmluaXNoUmVhc29uRXJyb3IgZXh0ZW5kcyBPcGVuQUlFcnJvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKGBDb3VsZCBub3QgcGFyc2UgcmVzcG9uc2UgY29udGVudCBhcyB0aGUgcmVxdWVzdCB3YXMgcmVqZWN0ZWQgYnkgdGhlIGNvbnRlbnQgZmlsdGVyYCk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBPcGVuQUlFcnJvciB9IGZyb20gJy4uLy4uL2Vycm9yJztcblxuZXhwb3J0IHR5cGUgQnl0ZXMgPSBzdHJpbmcgfCBBcnJheUJ1ZmZlciB8IFVpbnQ4QXJyYXkgfCBCdWZmZXIgfCBudWxsIHwgdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgcmUtaW1wbGVtZW50YXRpb24gb2YgaHR0cHgncyBgTGluZURlY29kZXJgIGluIFB5dGhvbiB0aGF0IGhhbmRsZXMgaW5jcmVtZW50YWxseVxuICogcmVhZGluZyBsaW5lcyBmcm9tIHRleHQuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL2VuY29kZS9odHRweC9ibG9iLzkyMDMzM2VhOTgxMThlOWNmNjE3ZjI0NjkwNWQ3YjIwMjUxMDk0MWMvaHR0cHgvX2RlY29kZXJzLnB5I0wyNThcbiAqL1xuZXhwb3J0IGNsYXNzIExpbmVEZWNvZGVyIHtcbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIHN0YXRpYyBORVdMSU5FX0NIQVJTID0gbmV3IFNldChbJ1xcbicsICdcXHInXSk7XG4gIHN0YXRpYyBORVdMSU5FX1JFR0VYUCA9IC9cXHJcXG58W1xcblxccl0vZztcblxuICBidWZmZXI6IFVpbnQ4QXJyYXk7XG4gICNjYXJyaWFnZVJldHVybkluZGV4OiBudW1iZXIgfCBudWxsO1xuICB0ZXh0RGVjb2RlcjogYW55OyAvLyBUZXh0RGVjb2RlciBmb3VuZCBpbiBicm93c2Vyczsgbm90IHR5cGVkIHRvIGF2b2lkIHB1bGxpbmcgaW4gZWl0aGVyIFwiZG9tXCIgb3IgXCJub2RlXCIgdHlwZXMuXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5idWZmZXIgPSBuZXcgVWludDhBcnJheSgpO1xuICAgIHRoaXMuI2NhcnJpYWdlUmV0dXJuSW5kZXggPSBudWxsO1xuICB9XG5cbiAgZGVjb2RlKGNodW5rOiBCeXRlcyk6IHN0cmluZ1tdIHtcbiAgICBpZiAoY2h1bmsgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGNvbnN0IGJpbmFyeUNodW5rID1cbiAgICAgIGNodW5rIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgPyBuZXcgVWludDhBcnJheShjaHVuaylcbiAgICAgIDogdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJyA/IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShjaHVuaylcbiAgICAgIDogY2h1bms7XG5cbiAgICBsZXQgbmV3RGF0YSA9IG5ldyBVaW50OEFycmF5KHRoaXMuYnVmZmVyLmxlbmd0aCArIGJpbmFyeUNodW5rLmxlbmd0aCk7XG4gICAgbmV3RGF0YS5zZXQodGhpcy5idWZmZXIpO1xuICAgIG5ld0RhdGEuc2V0KGJpbmFyeUNodW5rLCB0aGlzLmJ1ZmZlci5sZW5ndGgpO1xuICAgIHRoaXMuYnVmZmVyID0gbmV3RGF0YTtcblxuICAgIGNvbnN0IGxpbmVzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGxldCBwYXR0ZXJuSW5kZXg7XG4gICAgd2hpbGUgKChwYXR0ZXJuSW5kZXggPSBmaW5kTmV3bGluZUluZGV4KHRoaXMuYnVmZmVyLCB0aGlzLiNjYXJyaWFnZVJldHVybkluZGV4KSkgIT0gbnVsbCkge1xuICAgICAgaWYgKHBhdHRlcm5JbmRleC5jYXJyaWFnZSAmJiB0aGlzLiNjYXJyaWFnZVJldHVybkluZGV4ID09IG51bGwpIHtcbiAgICAgICAgLy8gc2tpcCB1bnRpbCB3ZSBlaXRoZXIgZ2V0IGEgY29ycmVzcG9uZGluZyBgXFxuYCwgYSBuZXcgYFxccmAgb3Igbm90aGluZ1xuICAgICAgICB0aGlzLiNjYXJyaWFnZVJldHVybkluZGV4ID0gcGF0dGVybkluZGV4LmluZGV4O1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gd2UgZ290IGRvdWJsZSBcXHIgb3IgXFxydGV4dFxcblxuICAgICAgaWYgKFxuICAgICAgICB0aGlzLiNjYXJyaWFnZVJldHVybkluZGV4ICE9IG51bGwgJiZcbiAgICAgICAgKHBhdHRlcm5JbmRleC5pbmRleCAhPT0gdGhpcy4jY2FycmlhZ2VSZXR1cm5JbmRleCArIDEgfHwgcGF0dGVybkluZGV4LmNhcnJpYWdlKVxuICAgICAgKSB7XG4gICAgICAgIGxpbmVzLnB1c2godGhpcy5kZWNvZGVUZXh0KHRoaXMuYnVmZmVyLnNsaWNlKDAsIHRoaXMuI2NhcnJpYWdlUmV0dXJuSW5kZXggLSAxKSkpO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IHRoaXMuYnVmZmVyLnNsaWNlKHRoaXMuI2NhcnJpYWdlUmV0dXJuSW5kZXgpO1xuICAgICAgICB0aGlzLiNjYXJyaWFnZVJldHVybkluZGV4ID0gbnVsbDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGVuZEluZGV4ID1cbiAgICAgICAgdGhpcy4jY2FycmlhZ2VSZXR1cm5JbmRleCAhPT0gbnVsbCA/IHBhdHRlcm5JbmRleC5wcmVjZWRpbmcgLSAxIDogcGF0dGVybkluZGV4LnByZWNlZGluZztcblxuICAgICAgY29uc3QgbGluZSA9IHRoaXMuZGVjb2RlVGV4dCh0aGlzLmJ1ZmZlci5zbGljZSgwLCBlbmRJbmRleCkpO1xuICAgICAgbGluZXMucHVzaChsaW5lKTtcblxuICAgICAgdGhpcy5idWZmZXIgPSB0aGlzLmJ1ZmZlci5zbGljZShwYXR0ZXJuSW5kZXguaW5kZXgpO1xuICAgICAgdGhpcy4jY2FycmlhZ2VSZXR1cm5JbmRleCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpbmVzO1xuICB9XG5cbiAgZGVjb2RlVGV4dChieXRlczogQnl0ZXMpOiBzdHJpbmcge1xuICAgIGlmIChieXRlcyA9PSBudWxsKSByZXR1cm4gJyc7XG4gICAgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpIHJldHVybiBieXRlcztcblxuICAgIC8vIE5vZGU6XG4gICAgaWYgKHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAoYnl0ZXMgaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIGJ5dGVzLnRvU3RyaW5nKCk7XG4gICAgICB9XG4gICAgICBpZiAoYnl0ZXMgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIHJldHVybiBCdWZmZXIuZnJvbShieXRlcykudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKFxuICAgICAgICBgVW5leHBlY3RlZDogcmVjZWl2ZWQgbm9uLVVpbnQ4QXJyYXkgKCR7Ynl0ZXMuY29uc3RydWN0b3IubmFtZX0pIHN0cmVhbSBjaHVuayBpbiBhbiBlbnZpcm9ubWVudCB3aXRoIGEgZ2xvYmFsIFwiQnVmZmVyXCIgZGVmaW5lZCwgd2hpY2ggdGhpcyBsaWJyYXJ5IGFzc3VtZXMgdG8gYmUgTm9kZS4gUGxlYXNlIHJlcG9ydCB0aGlzIGVycm9yLmAsXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIEJyb3dzZXJcbiAgICBpZiAodHlwZW9mIFRleHREZWNvZGVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKGJ5dGVzIGluc3RhbmNlb2YgVWludDhBcnJheSB8fCBieXRlcyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICAgIHRoaXMudGV4dERlY29kZXIgPz89IG5ldyBUZXh0RGVjb2RlcigndXRmOCcpO1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0RGVjb2Rlci5kZWNvZGUoYnl0ZXMpO1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoXG4gICAgICAgIGBVbmV4cGVjdGVkOiByZWNlaXZlZCBub24tVWludDhBcnJheS9BcnJheUJ1ZmZlciAoJHtcbiAgICAgICAgICAoYnl0ZXMgYXMgYW55KS5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgICAgIH0pIGluIGEgd2ViIHBsYXRmb3JtLiBQbGVhc2UgcmVwb3J0IHRoaXMgZXJyb3IuYCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKFxuICAgICAgYFVuZXhwZWN0ZWQ6IG5laXRoZXIgQnVmZmVyIG5vciBUZXh0RGVjb2RlciBhcmUgYXZhaWxhYmxlIGFzIGdsb2JhbHMuIFBsZWFzZSByZXBvcnQgdGhpcyBlcnJvci5gLFxuICAgICk7XG4gIH1cblxuICBmbHVzaCgpOiBzdHJpbmdbXSB7XG4gICAgaWYgKCF0aGlzLmJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZGVjb2RlKCdcXG4nKTtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gc2VhcmNoZXMgdGhlIGJ1ZmZlciBmb3IgdGhlIGVuZCBwYXR0ZXJucywgKFxcciBvciBcXG4pXG4gKiBhbmQgcmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgaW5kZXggcHJlY2VkaW5nIHRoZSBtYXRjaGVkIG5ld2xpbmUgYW5kIHRoZVxuICogaW5kZXggYWZ0ZXIgdGhlIG5ld2xpbmUgY2hhci4gYG51bGxgIGlzIHJldHVybmVkIGlmIG5vIG5ldyBsaW5lIGlzIGZvdW5kLlxuICpcbiAqIGBgYHRzXG4gKiBmaW5kTmV3TGluZUluZGV4KCdhYmNcXG5kZWYnKSAtPiB7IHByZWNlZGluZzogMiwgaW5kZXg6IDMgfVxuICogYGBgXG4gKi9cbmZ1bmN0aW9uIGZpbmROZXdsaW5lSW5kZXgoXG4gIGJ1ZmZlcjogVWludDhBcnJheSxcbiAgc3RhcnRJbmRleDogbnVtYmVyIHwgbnVsbCxcbik6IHsgcHJlY2VkaW5nOiBudW1iZXI7IGluZGV4OiBudW1iZXI7IGNhcnJpYWdlOiBib29sZWFuIH0gfCBudWxsIHtcbiAgY29uc3QgbmV3bGluZSA9IDB4MGE7IC8vIFxcblxuICBjb25zdCBjYXJyaWFnZSA9IDB4MGQ7IC8vIFxcclxuXG4gIGZvciAobGV0IGkgPSBzdGFydEluZGV4ID8/IDA7IGkgPCBidWZmZXIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYnVmZmVyW2ldID09PSBuZXdsaW5lKSB7XG4gICAgICByZXR1cm4geyBwcmVjZWRpbmc6IGksIGluZGV4OiBpICsgMSwgY2FycmlhZ2U6IGZhbHNlIH07XG4gICAgfVxuXG4gICAgaWYgKGJ1ZmZlcltpXSA9PT0gY2FycmlhZ2UpIHtcbiAgICAgIHJldHVybiB7IHByZWNlZGluZzogaSwgaW5kZXg6IGkgKyAxLCBjYXJyaWFnZTogdHJ1ZSB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmluZERvdWJsZU5ld2xpbmVJbmRleChidWZmZXI6IFVpbnQ4QXJyYXkpOiBudW1iZXIge1xuICAvLyBUaGlzIGZ1bmN0aW9uIHNlYXJjaGVzIHRoZSBidWZmZXIgZm9yIHRoZSBlbmQgcGF0dGVybnMgKFxcclxcciwgXFxuXFxuLCBcXHJcXG5cXHJcXG4pXG4gIC8vIGFuZCByZXR1cm5zIHRoZSBpbmRleCByaWdodCBhZnRlciB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBhbnkgcGF0dGVybixcbiAgLy8gb3IgLTEgaWYgbm9uZSBvZiB0aGUgcGF0dGVybnMgYXJlIGZvdW5kLlxuICBjb25zdCBuZXdsaW5lID0gMHgwYTsgLy8gXFxuXG4gIGNvbnN0IGNhcnJpYWdlID0gMHgwZDsgLy8gXFxyXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXIubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgaWYgKGJ1ZmZlcltpXSA9PT0gbmV3bGluZSAmJiBidWZmZXJbaSArIDFdID09PSBuZXdsaW5lKSB7XG4gICAgICAvLyBcXG5cXG5cbiAgICAgIHJldHVybiBpICsgMjtcbiAgICB9XG4gICAgaWYgKGJ1ZmZlcltpXSA9PT0gY2FycmlhZ2UgJiYgYnVmZmVyW2kgKyAxXSA9PT0gY2FycmlhZ2UpIHtcbiAgICAgIC8vIFxcclxcclxuICAgICAgcmV0dXJuIGkgKyAyO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICBidWZmZXJbaV0gPT09IGNhcnJpYWdlICYmXG4gICAgICBidWZmZXJbaSArIDFdID09PSBuZXdsaW5lICYmXG4gICAgICBpICsgMyA8IGJ1ZmZlci5sZW5ndGggJiZcbiAgICAgIGJ1ZmZlcltpICsgMl0gPT09IGNhcnJpYWdlICYmXG4gICAgICBidWZmZXJbaSArIDNdID09PSBuZXdsaW5lXG4gICAgKSB7XG4gICAgICAvLyBcXHJcXG5cXHJcXG5cbiAgICAgIHJldHVybiBpICsgNDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTE7XG59XG4iLCAiLyoqXG4gKiBNb3N0IGJyb3dzZXJzIGRvbid0IHlldCBoYXZlIGFzeW5jIGl0ZXJhYmxlIHN1cHBvcnQgZm9yIFJlYWRhYmxlU3RyZWFtLFxuICogYW5kIE5vZGUgaGFzIGEgdmVyeSBkaWZmZXJlbnQgd2F5IG9mIHJlYWRpbmcgYnl0ZXMgZnJvbSBpdHMgXCJSZWFkYWJsZVN0cmVhbVwiLlxuICpcbiAqIFRoaXMgcG9seWZpbGwgd2FzIHB1bGxlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9NYXR0aWFzQnVlbGVucy93ZWItc3RyZWFtcy1wb2x5ZmlsbC9wdWxsLzEyMiNpc3N1ZWNvbW1lbnQtMTYyNzM1NDQ5MFxuICovXG5leHBvcnQgZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1Ub0FzeW5jSXRlcmFibGU8VD4oc3RyZWFtOiBhbnkpOiBBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VD4ge1xuICBpZiAoc3RyZWFtW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSkgcmV0dXJuIHN0cmVhbTtcblxuICBjb25zdCByZWFkZXIgPSBzdHJlYW0uZ2V0UmVhZGVyKCk7XG4gIHJldHVybiB7XG4gICAgYXN5bmMgbmV4dCgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlYWRlci5yZWFkKCk7XG4gICAgICAgIGlmIChyZXN1bHQ/LmRvbmUpIHJlYWRlci5yZWxlYXNlTG9jaygpOyAvLyByZWxlYXNlIGxvY2sgd2hlbiBzdHJlYW0gYmVjb21lcyBjbG9zZWRcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7IC8vIHJlbGVhc2UgbG9jayB3aGVuIHN0cmVhbSBiZWNvbWVzIGVycm9yZWRcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFzeW5jIHJldHVybigpIHtcbiAgICAgIGNvbnN0IGNhbmNlbFByb21pc2UgPSByZWFkZXIuY2FuY2VsKCk7XG4gICAgICByZWFkZXIucmVsZWFzZUxvY2soKTtcbiAgICAgIGF3YWl0IGNhbmNlbFByb21pc2U7XG4gICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogdW5kZWZpbmVkIH07XG4gICAgfSxcbiAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgfTtcbn1cbiIsICJpbXBvcnQgeyBSZWFkYWJsZVN0cmVhbSwgdHlwZSBSZXNwb25zZSB9IGZyb20gJy4vX3NoaW1zL2luZGV4JztcbmltcG9ydCB7IE9wZW5BSUVycm9yIH0gZnJvbSAnLi9lcnJvcic7XG5pbXBvcnQgeyBmaW5kRG91YmxlTmV3bGluZUluZGV4LCBMaW5lRGVjb2RlciB9IGZyb20gJy4vaW50ZXJuYWwvZGVjb2RlcnMvbGluZSc7XG5pbXBvcnQgeyBSZWFkYWJsZVN0cmVhbVRvQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4vaW50ZXJuYWwvc3RyZWFtLXV0aWxzJztcblxuaW1wb3J0IHsgY3JlYXRlUmVzcG9uc2VIZWFkZXJzIH0gZnJvbSAnLi9jb3JlJztcbmltcG9ydCB7IEFQSUVycm9yIH0gZnJvbSAnLi9lcnJvcic7XG5cbnR5cGUgQnl0ZXMgPSBzdHJpbmcgfCBBcnJheUJ1ZmZlciB8IFVpbnQ4QXJyYXkgfCBCdWZmZXIgfCBudWxsIHwgdW5kZWZpbmVkO1xuXG5leHBvcnQgdHlwZSBTZXJ2ZXJTZW50RXZlbnQgPSB7XG4gIGV2ZW50OiBzdHJpbmcgfCBudWxsO1xuICBkYXRhOiBzdHJpbmc7XG4gIHJhdzogc3RyaW5nW107XG59O1xuXG5leHBvcnQgY2xhc3MgU3RyZWFtPEl0ZW0+IGltcGxlbWVudHMgQXN5bmNJdGVyYWJsZTxJdGVtPiB7XG4gIGNvbnRyb2xsZXI6IEFib3J0Q29udHJvbGxlcjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGl0ZXJhdG9yOiAoKSA9PiBBc3luY0l0ZXJhdG9yPEl0ZW0+LFxuICAgIGNvbnRyb2xsZXI6IEFib3J0Q29udHJvbGxlcixcbiAgKSB7XG4gICAgdGhpcy5jb250cm9sbGVyID0gY29udHJvbGxlcjtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tU1NFUmVzcG9uc2U8SXRlbT4ocmVzcG9uc2U6IFJlc3BvbnNlLCBjb250cm9sbGVyOiBBYm9ydENvbnRyb2xsZXIpOiBTdHJlYW08SXRlbT4ge1xuICAgIGxldCBjb25zdW1lZCA9IGZhbHNlO1xuXG4gICAgYXN5bmMgZnVuY3Rpb24qIGl0ZXJhdG9yKCk6IEFzeW5jSXRlcmF0b3I8SXRlbSwgYW55LCB1bmRlZmluZWQ+IHtcbiAgICAgIGlmIChjb25zdW1lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBpdGVyYXRlIG92ZXIgYSBjb25zdW1lZCBzdHJlYW0sIHVzZSBgLnRlZSgpYCB0byBzcGxpdCB0aGUgc3RyZWFtLicpO1xuICAgICAgfVxuICAgICAgY29uc3VtZWQgPSB0cnVlO1xuICAgICAgbGV0IGRvbmUgPSBmYWxzZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciBhd2FpdCAoY29uc3Qgc3NlIG9mIF9pdGVyU1NFTWVzc2FnZXMocmVzcG9uc2UsIGNvbnRyb2xsZXIpKSB7XG4gICAgICAgICAgaWYgKGRvbmUpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgaWYgKHNzZS5kYXRhLnN0YXJ0c1dpdGgoJ1tET05FXScpKSB7XG4gICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHNzZS5ldmVudCA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgc3NlLmV2ZW50LnN0YXJ0c1dpdGgoJ3Jlc3BvbnNlLicpIHx8XG4gICAgICAgICAgICBzc2UuZXZlbnQuc3RhcnRzV2l0aCgndHJhbnNjcmlwdC4nKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgbGV0IGRhdGE7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKHNzZS5kYXRhKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgQ291bGQgbm90IHBhcnNlIG1lc3NhZ2UgaW50byBKU09OOmAsIHNzZS5kYXRhKTtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRnJvbSBjaHVuazpgLCBzc2UucmF3KTtcbiAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5lcnJvcikge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgQVBJRXJyb3IodW5kZWZpbmVkLCBkYXRhLmVycm9yLCB1bmRlZmluZWQsIGNyZWF0ZVJlc3BvbnNlSGVhZGVycyhyZXNwb25zZS5oZWFkZXJzKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHlpZWxkIGRhdGE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBkYXRhO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2Uoc3NlLmRhdGEpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBDb3VsZCBub3QgcGFyc2UgbWVzc2FnZSBpbnRvIEpTT046YCwgc3NlLmRhdGEpO1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBGcm9tIGNodW5rOmAsIHNzZS5yYXcpO1xuICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVE9ETzogSXMgdGhpcyB3aGVyZSB0aGUgZXJyb3Igc2hvdWxkIGJlIHRocm93bj9cbiAgICAgICAgICAgIGlmIChzc2UuZXZlbnQgPT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgQVBJRXJyb3IodW5kZWZpbmVkLCBkYXRhLmVycm9yLCBkYXRhLm1lc3NhZ2UsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB5aWVsZCB7IGV2ZW50OiBzc2UuZXZlbnQsIGRhdGE6IGRhdGEgfSBhcyBhbnk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBJZiB0aGUgdXNlciBjYWxscyBgc3RyZWFtLmNvbnRyb2xsZXIuYWJvcnQoKWAsIHdlIHNob3VsZCBleGl0IHdpdGhvdXQgdGhyb3dpbmcuXG4gICAgICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3IgJiYgZS5uYW1lID09PSAnQWJvcnRFcnJvcicpIHJldHVybjtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIC8vIElmIHRoZSB1c2VyIGBicmVha2BzLCBhYm9ydCB0aGUgb25nb2luZyByZXF1ZXN0LlxuICAgICAgICBpZiAoIWRvbmUpIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFN0cmVhbShpdGVyYXRvciwgY29udHJvbGxlcik7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgU3RyZWFtIGZyb20gYSBuZXdsaW5lLXNlcGFyYXRlZCBSZWFkYWJsZVN0cmVhbVxuICAgKiB3aGVyZSBlYWNoIGl0ZW0gaXMgYSBKU09OIHZhbHVlLlxuICAgKi9cbiAgc3RhdGljIGZyb21SZWFkYWJsZVN0cmVhbTxJdGVtPihyZWFkYWJsZVN0cmVhbTogUmVhZGFibGVTdHJlYW0sIGNvbnRyb2xsZXI6IEFib3J0Q29udHJvbGxlcik6IFN0cmVhbTxJdGVtPiB7XG4gICAgbGV0IGNvbnN1bWVkID0gZmFsc2U7XG5cbiAgICBhc3luYyBmdW5jdGlvbiogaXRlckxpbmVzKCk6IEFzeW5jR2VuZXJhdG9yPHN0cmluZywgdm9pZCwgdW5rbm93bj4ge1xuICAgICAgY29uc3QgbGluZURlY29kZXIgPSBuZXcgTGluZURlY29kZXIoKTtcblxuICAgICAgY29uc3QgaXRlciA9IFJlYWRhYmxlU3RyZWFtVG9Bc3luY0l0ZXJhYmxlPEJ5dGVzPihyZWFkYWJsZVN0cmVhbSk7XG4gICAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIGl0ZXIpIHtcbiAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVEZWNvZGVyLmRlY29kZShjaHVuaykpIHtcbiAgICAgICAgICB5aWVsZCBsaW5lO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lRGVjb2Rlci5mbHVzaCgpKSB7XG4gICAgICAgIHlpZWxkIGxpbmU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24qIGl0ZXJhdG9yKCk6IEFzeW5jSXRlcmF0b3I8SXRlbSwgYW55LCB1bmRlZmluZWQ+IHtcbiAgICAgIGlmIChjb25zdW1lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBpdGVyYXRlIG92ZXIgYSBjb25zdW1lZCBzdHJlYW0sIHVzZSBgLnRlZSgpYCB0byBzcGxpdCB0aGUgc3RyZWFtLicpO1xuICAgICAgfVxuICAgICAgY29uc3VtZWQgPSB0cnVlO1xuICAgICAgbGV0IGRvbmUgPSBmYWxzZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZvciBhd2FpdCAoY29uc3QgbGluZSBvZiBpdGVyTGluZXMoKSkge1xuICAgICAgICAgIGlmIChkb25lKSBjb250aW51ZTtcbiAgICAgICAgICBpZiAobGluZSkgeWllbGQgSlNPTi5wYXJzZShsaW5lKTtcbiAgICAgICAgfVxuICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gSWYgdGhlIHVzZXIgY2FsbHMgYHN0cmVhbS5jb250cm9sbGVyLmFib3J0KClgLCB3ZSBzaG91bGQgZXhpdCB3aXRob3V0IHRocm93aW5nLlxuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEVycm9yICYmIGUubmFtZSA9PT0gJ0Fib3J0RXJyb3InKSByZXR1cm47XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICAvLyBJZiB0aGUgdXNlciBgYnJlYWtgcywgYWJvcnQgdGhlIG9uZ29pbmcgcmVxdWVzdC5cbiAgICAgICAgaWYgKCFkb25lKSBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBTdHJlYW0oaXRlcmF0b3IsIGNvbnRyb2xsZXIpO1xuICB9XG5cbiAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpOiBBc3luY0l0ZXJhdG9yPEl0ZW0+IHtcbiAgICByZXR1cm4gdGhpcy5pdGVyYXRvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyB0aGUgc3RyZWFtIGludG8gdHdvIHN0cmVhbXMgd2hpY2ggY2FuIGJlXG4gICAqIGluZGVwZW5kZW50bHkgcmVhZCBmcm9tIGF0IGRpZmZlcmVudCBzcGVlZHMuXG4gICAqL1xuICB0ZWUoKTogW1N0cmVhbTxJdGVtPiwgU3RyZWFtPEl0ZW0+XSB7XG4gICAgY29uc3QgbGVmdDogQXJyYXk8UHJvbWlzZTxJdGVyYXRvclJlc3VsdDxJdGVtPj4+ID0gW107XG4gICAgY29uc3QgcmlnaHQ6IEFycmF5PFByb21pc2U8SXRlcmF0b3JSZXN1bHQ8SXRlbT4+PiA9IFtdO1xuICAgIGNvbnN0IGl0ZXJhdG9yID0gdGhpcy5pdGVyYXRvcigpO1xuXG4gICAgY29uc3QgdGVlSXRlcmF0b3IgPSAocXVldWU6IEFycmF5PFByb21pc2U8SXRlcmF0b3JSZXN1bHQ8SXRlbT4+Pik6IEFzeW5jSXRlcmF0b3I8SXRlbT4gPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgIGxlZnQucHVzaChyZXN1bHQpO1xuICAgICAgICAgICAgcmlnaHQucHVzaChyZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcXVldWUuc2hpZnQoKSE7XG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH07XG5cbiAgICByZXR1cm4gW1xuICAgICAgbmV3IFN0cmVhbSgoKSA9PiB0ZWVJdGVyYXRvcihsZWZ0KSwgdGhpcy5jb250cm9sbGVyKSxcbiAgICAgIG5ldyBTdHJlYW0oKCkgPT4gdGVlSXRlcmF0b3IocmlnaHQpLCB0aGlzLmNvbnRyb2xsZXIpLFxuICAgIF07XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgdGhpcyBzdHJlYW0gdG8gYSBuZXdsaW5lLXNlcGFyYXRlZCBSZWFkYWJsZVN0cmVhbSBvZlxuICAgKiBKU09OIHN0cmluZ2lmaWVkIHZhbHVlcyBpbiB0aGUgc3RyZWFtXG4gICAqIHdoaWNoIGNhbiBiZSB0dXJuZWQgYmFjayBpbnRvIGEgU3RyZWFtIHdpdGggYFN0cmVhbS5mcm9tUmVhZGFibGVTdHJlYW0oKWAuXG4gICAqL1xuICB0b1JlYWRhYmxlU3RyZWFtKCk6IFJlYWRhYmxlU3RyZWFtIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBsZXQgaXRlcjogQXN5bmNJdGVyYXRvcjxJdGVtPjtcbiAgICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG5cbiAgICByZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICAgIGFzeW5jIHN0YXJ0KCkge1xuICAgICAgICBpdGVyID0gc2VsZltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICAgIH0sXG4gICAgICBhc3luYyBwdWxsKGN0cmw6IGFueSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHsgdmFsdWUsIGRvbmUgfSA9IGF3YWl0IGl0ZXIubmV4dCgpO1xuICAgICAgICAgIGlmIChkb25lKSByZXR1cm4gY3RybC5jbG9zZSgpO1xuXG4gICAgICAgICAgY29uc3QgYnl0ZXMgPSBlbmNvZGVyLmVuY29kZShKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnXFxuJyk7XG5cbiAgICAgICAgICBjdHJsLmVucXVldWUoYnl0ZXMpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjdHJsLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBhc3luYyBjYW5jZWwoKSB7XG4gICAgICAgIGF3YWl0IGl0ZXIucmV0dXJuPy4oKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uKiBfaXRlclNTRU1lc3NhZ2VzKFxuICByZXNwb25zZTogUmVzcG9uc2UsXG4gIGNvbnRyb2xsZXI6IEFib3J0Q29udHJvbGxlcixcbik6IEFzeW5jR2VuZXJhdG9yPFNlcnZlclNlbnRFdmVudCwgdm9pZCwgdW5rbm93bj4ge1xuICBpZiAoIXJlc3BvbnNlLmJvZHkpIHtcbiAgICBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBBdHRlbXB0ZWQgdG8gaXRlcmF0ZSBvdmVyIGEgcmVzcG9uc2Ugd2l0aCBubyBib2R5YCk7XG4gIH1cblxuICBjb25zdCBzc2VEZWNvZGVyID0gbmV3IFNTRURlY29kZXIoKTtcbiAgY29uc3QgbGluZURlY29kZXIgPSBuZXcgTGluZURlY29kZXIoKTtcblxuICBjb25zdCBpdGVyID0gUmVhZGFibGVTdHJlYW1Ub0FzeW5jSXRlcmFibGU8Qnl0ZXM+KHJlc3BvbnNlLmJvZHkpO1xuICBmb3IgYXdhaXQgKGNvbnN0IHNzZUNodW5rIG9mIGl0ZXJTU0VDaHVua3MoaXRlcikpIHtcbiAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZURlY29kZXIuZGVjb2RlKHNzZUNodW5rKSkge1xuICAgICAgY29uc3Qgc3NlID0gc3NlRGVjb2Rlci5kZWNvZGUobGluZSk7XG4gICAgICBpZiAoc3NlKSB5aWVsZCBzc2U7XG4gICAgfVxuICB9XG5cbiAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVEZWNvZGVyLmZsdXNoKCkpIHtcbiAgICBjb25zdCBzc2UgPSBzc2VEZWNvZGVyLmRlY29kZShsaW5lKTtcbiAgICBpZiAoc3NlKSB5aWVsZCBzc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBHaXZlbiBhbiBhc3luYyBpdGVyYWJsZSBpdGVyYXRvciwgaXRlcmF0ZXMgb3ZlciBpdCBhbmQgeWllbGRzIGZ1bGxcbiAqIFNTRSBjaHVua3MsIGkuZS4geWllbGRzIHdoZW4gYSBkb3VibGUgbmV3LWxpbmUgaXMgZW5jb3VudGVyZWQuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uKiBpdGVyU1NFQ2h1bmtzKGl0ZXJhdG9yOiBBc3luY0l0ZXJhYmxlSXRlcmF0b3I8Qnl0ZXM+KTogQXN5bmNHZW5lcmF0b3I8VWludDhBcnJheT4ge1xuICBsZXQgZGF0YSA9IG5ldyBVaW50OEFycmF5KCk7XG5cbiAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiBpdGVyYXRvcikge1xuICAgIGlmIChjaHVuayA9PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb25zdCBiaW5hcnlDaHVuayA9XG4gICAgICBjaHVuayBpbnN0YW5jZW9mIEFycmF5QnVmZmVyID8gbmV3IFVpbnQ4QXJyYXkoY2h1bmspXG4gICAgICA6IHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycgPyBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoY2h1bmspXG4gICAgICA6IGNodW5rO1xuXG4gICAgbGV0IG5ld0RhdGEgPSBuZXcgVWludDhBcnJheShkYXRhLmxlbmd0aCArIGJpbmFyeUNodW5rLmxlbmd0aCk7XG4gICAgbmV3RGF0YS5zZXQoZGF0YSk7XG4gICAgbmV3RGF0YS5zZXQoYmluYXJ5Q2h1bmssIGRhdGEubGVuZ3RoKTtcbiAgICBkYXRhID0gbmV3RGF0YTtcblxuICAgIGxldCBwYXR0ZXJuSW5kZXg7XG4gICAgd2hpbGUgKChwYXR0ZXJuSW5kZXggPSBmaW5kRG91YmxlTmV3bGluZUluZGV4KGRhdGEpKSAhPT0gLTEpIHtcbiAgICAgIHlpZWxkIGRhdGEuc2xpY2UoMCwgcGF0dGVybkluZGV4KTtcbiAgICAgIGRhdGEgPSBkYXRhLnNsaWNlKHBhdHRlcm5JbmRleCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRhdGEubGVuZ3RoID4gMCkge1xuICAgIHlpZWxkIGRhdGE7XG4gIH1cbn1cblxuY2xhc3MgU1NFRGVjb2RlciB7XG4gIHByaXZhdGUgZGF0YTogc3RyaW5nW107XG4gIHByaXZhdGUgZXZlbnQ6IHN0cmluZyB8IG51bGw7XG4gIHByaXZhdGUgY2h1bmtzOiBzdHJpbmdbXTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmV2ZW50ID0gbnVsbDtcbiAgICB0aGlzLmRhdGEgPSBbXTtcbiAgICB0aGlzLmNodW5rcyA9IFtdO1xuICB9XG5cbiAgZGVjb2RlKGxpbmU6IHN0cmluZykge1xuICAgIGlmIChsaW5lLmVuZHNXaXRoKCdcXHInKSkge1xuICAgICAgbGluZSA9IGxpbmUuc3Vic3RyaW5nKDAsIGxpbmUubGVuZ3RoIC0gMSk7XG4gICAgfVxuXG4gICAgaWYgKCFsaW5lKSB7XG4gICAgICAvLyBlbXB0eSBsaW5lIGFuZCB3ZSBkaWRuJ3QgcHJldmlvdXNseSBlbmNvdW50ZXIgYW55IG1lc3NhZ2VzXG4gICAgICBpZiAoIXRoaXMuZXZlbnQgJiYgIXRoaXMuZGF0YS5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gICAgICBjb25zdCBzc2U6IFNlcnZlclNlbnRFdmVudCA9IHtcbiAgICAgICAgZXZlbnQ6IHRoaXMuZXZlbnQsXG4gICAgICAgIGRhdGE6IHRoaXMuZGF0YS5qb2luKCdcXG4nKSxcbiAgICAgICAgcmF3OiB0aGlzLmNodW5rcyxcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZXZlbnQgPSBudWxsO1xuICAgICAgdGhpcy5kYXRhID0gW107XG4gICAgICB0aGlzLmNodW5rcyA9IFtdO1xuXG4gICAgICByZXR1cm4gc3NlO1xuICAgIH1cblxuICAgIHRoaXMuY2h1bmtzLnB1c2gobGluZSk7XG5cbiAgICBpZiAobGluZS5zdGFydHNXaXRoKCc6JykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGxldCBbZmllbGRuYW1lLCBfLCB2YWx1ZV0gPSBwYXJ0aXRpb24obGluZSwgJzonKTtcblxuICAgIGlmICh2YWx1ZS5zdGFydHNXaXRoKCcgJykpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKDEpO1xuICAgIH1cblxuICAgIGlmIChmaWVsZG5hbWUgPT09ICdldmVudCcpIHtcbiAgICAgIHRoaXMuZXZlbnQgPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKGZpZWxkbmFtZSA9PT0gJ2RhdGEnKSB7XG4gICAgICB0aGlzLmRhdGEucHVzaCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFydGl0aW9uKHN0cjogc3RyaW5nLCBkZWxpbWl0ZXI6IHN0cmluZyk6IFtzdHJpbmcsIHN0cmluZywgc3RyaW5nXSB7XG4gIGNvbnN0IGluZGV4ID0gc3RyLmluZGV4T2YoZGVsaW1pdGVyKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIHJldHVybiBbc3RyLnN1YnN0cmluZygwLCBpbmRleCksIGRlbGltaXRlciwgc3RyLnN1YnN0cmluZyhpbmRleCArIGRlbGltaXRlci5sZW5ndGgpXTtcbiAgfVxuXG4gIHJldHVybiBbc3RyLCAnJywgJyddO1xufVxuIiwgImltcG9ydCB7IHR5cGUgUmVxdWVzdE9wdGlvbnMgfSBmcm9tICcuL2NvcmUnO1xuaW1wb3J0IHtcbiAgRm9ybURhdGEsXG4gIEZpbGUsXG4gIHR5cGUgQmxvYixcbiAgdHlwZSBGaWxlUHJvcGVydHlCYWcsXG4gIGdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zLFxuICB0eXBlIEZzUmVhZFN0cmVhbSxcbiAgaXNGc1JlYWRTdHJlYW0sXG59IGZyb20gJy4vX3NoaW1zL2luZGV4JztcbmltcG9ydCB7IE11bHRpcGFydEJvZHkgfSBmcm9tICcuL19zaGltcy9NdWx0aXBhcnRCb2R5JztcbmV4cG9ydCB7IGZpbGVGcm9tUGF0aCB9IGZyb20gJy4vX3NoaW1zL2luZGV4JztcblxudHlwZSBCbG9iTGlrZVBhcnQgPSBzdHJpbmcgfCBBcnJheUJ1ZmZlciB8IEFycmF5QnVmZmVyVmlldyB8IEJsb2JMaWtlIHwgVWludDhBcnJheSB8IERhdGFWaWV3O1xuZXhwb3J0IHR5cGUgQmxvYlBhcnQgPSBzdHJpbmcgfCBBcnJheUJ1ZmZlciB8IEFycmF5QnVmZmVyVmlldyB8IEJsb2IgfCBVaW50OEFycmF5IHwgRGF0YVZpZXc7XG5cbi8qKlxuICogVHlwaWNhbGx5LCB0aGlzIGlzIGEgbmF0aXZlIFwiRmlsZVwiIGNsYXNzLlxuICpcbiAqIFdlIHByb3ZpZGUgdGhlIHtAbGluayB0b0ZpbGV9IHV0aWxpdHkgdG8gY29udmVydCBhIHZhcmlldHkgb2Ygb2JqZWN0c1xuICogaW50byB0aGUgRmlsZSBjbGFzcy5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGEgZmV0Y2ggUmVzcG9uc2UsIG9yIGluIE5vZGUsXG4gKiB0aGUgcmVzdWx0IG9mIGZzLmNyZWF0ZVJlYWRTdHJlYW0oKS5cbiAqL1xuZXhwb3J0IHR5cGUgVXBsb2FkYWJsZSA9IEZpbGVMaWtlIHwgUmVzcG9uc2VMaWtlIHwgRnNSZWFkU3RyZWFtO1xuXG4vKipcbiAqIEludGVuZGVkIHRvIG1hdGNoIHdlYi5CbG9iLCBub2RlLkJsb2IsIG5vZGUtZmV0Y2guQmxvYiwgZXRjLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJsb2JMaWtlIHtcbiAgLyoqIFtNRE4gUmVmZXJlbmNlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvQmxvYi9zaXplKSAqL1xuICByZWFkb25seSBzaXplOiBudW1iZXI7XG4gIC8qKiBbTUROIFJlZmVyZW5jZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvQVBJL0Jsb2IvdHlwZSkgKi9cbiAgcmVhZG9ubHkgdHlwZTogc3RyaW5nO1xuICAvKiogW01ETiBSZWZlcmVuY2VdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0FQSS9CbG9iL3RleHQpICovXG4gIHRleHQoKTogUHJvbWlzZTxzdHJpbmc+O1xuICAvKiogW01ETiBSZWZlcmVuY2VdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0FQSS9CbG9iL3NsaWNlKSAqL1xuICBzbGljZShzdGFydD86IG51bWJlciwgZW5kPzogbnVtYmVyKTogQmxvYkxpa2U7XG4gIC8vIHVuZm9ydHVuYXRlbHkgQHR5cGVzL25vZGUtZmV0Y2hAXjIuNi40IGRvZXNuJ3QgdHlwZSB0aGUgYXJyYXlCdWZmZXIgbWV0aG9kXG59XG5cbi8qKlxuICogSW50ZW5kZWQgdG8gbWF0Y2ggd2ViLkZpbGUsIG5vZGUuRmlsZSwgbm9kZS1mZXRjaC5GaWxlLCBldGMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZUxpa2UgZXh0ZW5kcyBCbG9iTGlrZSB7XG4gIC8qKiBbTUROIFJlZmVyZW5jZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZG9jcy9XZWIvQVBJL0ZpbGUvbGFzdE1vZGlmaWVkKSAqL1xuICByZWFkb25seSBsYXN0TW9kaWZpZWQ6IG51bWJlcjtcbiAgLyoqIFtNRE4gUmVmZXJlbmNlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvRmlsZS9uYW1lKSAqL1xuICByZWFkb25seSBuYW1lOiBzdHJpbmc7XG59XG5cbi8qKlxuICogSW50ZW5kZWQgdG8gbWF0Y2ggd2ViLlJlc3BvbnNlLCBub2RlLlJlc3BvbnNlLCBub2RlLWZldGNoLlJlc3BvbnNlLCBldGMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VMaWtlIHtcbiAgdXJsOiBzdHJpbmc7XG4gIGJsb2IoKTogUHJvbWlzZTxCbG9iTGlrZT47XG59XG5cbmV4cG9ydCBjb25zdCBpc1Jlc3BvbnNlTGlrZSA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgUmVzcG9uc2VMaWtlID0+XG4gIHZhbHVlICE9IG51bGwgJiZcbiAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICB0eXBlb2YgdmFsdWUudXJsID09PSAnc3RyaW5nJyAmJlxuICB0eXBlb2YgdmFsdWUuYmxvYiA9PT0gJ2Z1bmN0aW9uJztcblxuZXhwb3J0IGNvbnN0IGlzRmlsZUxpa2UgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIEZpbGVMaWtlID0+XG4gIHZhbHVlICE9IG51bGwgJiZcbiAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICB0eXBlb2YgdmFsdWUubmFtZSA9PT0gJ3N0cmluZycgJiZcbiAgdHlwZW9mIHZhbHVlLmxhc3RNb2RpZmllZCA9PT0gJ251bWJlcicgJiZcbiAgaXNCbG9iTGlrZSh2YWx1ZSk7XG5cbi8qKlxuICogVGhlIEJsb2JMaWtlIHR5cGUgb21pdHMgYXJyYXlCdWZmZXIoKSBiZWNhdXNlIEB0eXBlcy9ub2RlLWZldGNoQF4yLjYuNCBsYWNrcyBpdDsgYnV0IHRoaXMgY2hlY2tcbiAqIGFkZHMgdGhlIGFycmF5QnVmZmVyKCkgbWV0aG9kIHR5cGUgYmVjYXVzZSBpdCBpcyBhdmFpbGFibGUgYW5kIHVzZWQgYXQgcnVudGltZVxuICovXG5leHBvcnQgY29uc3QgaXNCbG9iTGlrZSA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgQmxvYkxpa2UgJiB7IGFycmF5QnVmZmVyKCk6IFByb21pc2U8QXJyYXlCdWZmZXI+IH0gPT5cbiAgdmFsdWUgIT0gbnVsbCAmJlxuICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gIHR5cGVvZiB2YWx1ZS5zaXplID09PSAnbnVtYmVyJyAmJlxuICB0eXBlb2YgdmFsdWUudHlwZSA9PT0gJ3N0cmluZycgJiZcbiAgdHlwZW9mIHZhbHVlLnRleHQgPT09ICdmdW5jdGlvbicgJiZcbiAgdHlwZW9mIHZhbHVlLnNsaWNlID09PSAnZnVuY3Rpb24nICYmXG4gIHR5cGVvZiB2YWx1ZS5hcnJheUJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJztcblxuZXhwb3J0IGNvbnN0IGlzVXBsb2FkYWJsZSA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgVXBsb2FkYWJsZSA9PiB7XG4gIHJldHVybiBpc0ZpbGVMaWtlKHZhbHVlKSB8fCBpc1Jlc3BvbnNlTGlrZSh2YWx1ZSkgfHwgaXNGc1JlYWRTdHJlYW0odmFsdWUpO1xufTtcblxuZXhwb3J0IHR5cGUgVG9GaWxlSW5wdXQgPSBVcGxvYWRhYmxlIHwgRXhjbHVkZTxCbG9iTGlrZVBhcnQsIHN0cmluZz4gfCBBc3luY0l0ZXJhYmxlPEJsb2JMaWtlUGFydD47XG5cbi8qKlxuICogSGVscGVyIGZvciBjcmVhdGluZyBhIHtAbGluayBGaWxlfSB0byBwYXNzIHRvIGFuIFNESyB1cGxvYWQgbWV0aG9kIGZyb20gYSB2YXJpZXR5IG9mIGRpZmZlcmVudCBkYXRhIGZvcm1hdHNcbiAqIEBwYXJhbSB2YWx1ZSB0aGUgcmF3IGNvbnRlbnQgb2YgdGhlIGZpbGUuICBDYW4gYmUgYW4ge0BsaW5rIFVwbG9hZGFibGV9LCB7QGxpbmsgQmxvYkxpa2VQYXJ0fSwgb3Ige0BsaW5rIEFzeW5jSXRlcmFibGV9IG9mIHtAbGluayBCbG9iTGlrZVBhcnR9c1xuICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIHRoZSBuYW1lIG9mIHRoZSBmaWxlLiBJZiBvbWl0dGVkLCB0b0ZpbGUgd2lsbCB0cnkgdG8gZGV0ZXJtaW5lIGEgZmlsZSBuYW1lIGZyb20gYml0cyBpZiBwb3NzaWJsZVxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zIGFkZGl0aW9uYWwgcHJvcGVydGllc1xuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRpb25zLnR5cGUgdGhlIE1JTUUgdHlwZSBvZiB0aGUgY29udGVudFxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRpb25zLmxhc3RNb2RpZmllZCB0aGUgbGFzdCBtb2RpZmllZCB0aW1lc3RhbXBcbiAqIEByZXR1cm5zIGEge0BsaW5rIEZpbGV9IHdpdGggdGhlIGdpdmVuIHByb3BlcnRpZXNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRvRmlsZShcbiAgdmFsdWU6IFRvRmlsZUlucHV0IHwgUHJvbWlzZUxpa2U8VG9GaWxlSW5wdXQ+LFxuICBuYW1lPzogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCxcbiAgb3B0aW9ucz86IEZpbGVQcm9wZXJ0eUJhZyB8IHVuZGVmaW5lZCxcbik6IFByb21pc2U8RmlsZUxpa2U+IHtcbiAgLy8gSWYgaXQncyBhIHByb21pc2UsIHJlc29sdmUgaXQuXG4gIHZhbHVlID0gYXdhaXQgdmFsdWU7XG5cbiAgLy8gSWYgd2UndmUgYmVlbiBnaXZlbiBhIGBGaWxlYCB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nXG4gIGlmIChpc0ZpbGVMaWtlKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGlmIChpc1Jlc3BvbnNlTGlrZSh2YWx1ZSkpIHtcbiAgICBjb25zdCBibG9iID0gYXdhaXQgdmFsdWUuYmxvYigpO1xuICAgIG5hbWUgfHw9IG5ldyBVUkwodmFsdWUudXJsKS5wYXRobmFtZS5zcGxpdCgvW1xcXFwvXS8pLnBvcCgpID8/ICd1bmtub3duX2ZpbGUnO1xuXG4gICAgLy8gd2UgbmVlZCB0byBjb252ZXJ0IHRoZSBgQmxvYmAgaW50byBhbiBhcnJheSBidWZmZXIgYmVjYXVzZSB0aGUgYEJsb2JgIGNsYXNzXG4gICAgLy8gdGhhdCBgbm9kZS1mZXRjaGAgZGVmaW5lcyBpcyBpbmNvbXBhdGlibGUgd2l0aCB0aGUgd2ViIHN0YW5kYXJkIHdoaWNoIHJlc3VsdHNcbiAgICAvLyBpbiBgbmV3IEZpbGVgIGludGVycHJldGluZyBpdCBhcyBhIHN0cmluZyBpbnN0ZWFkIG9mIGJpbmFyeSBkYXRhLlxuICAgIGNvbnN0IGRhdGEgPSBpc0Jsb2JMaWtlKGJsb2IpID8gWyhhd2FpdCBibG9iLmFycmF5QnVmZmVyKCkpIGFzIGFueV0gOiBbYmxvYl07XG5cbiAgICByZXR1cm4gbmV3IEZpbGUoZGF0YSwgbmFtZSwgb3B0aW9ucyk7XG4gIH1cblxuICBjb25zdCBiaXRzID0gYXdhaXQgZ2V0Qnl0ZXModmFsdWUpO1xuXG4gIG5hbWUgfHw9IGdldE5hbWUodmFsdWUpID8/ICd1bmtub3duX2ZpbGUnO1xuXG4gIGlmICghb3B0aW9ucz8udHlwZSkge1xuICAgIGNvbnN0IHR5cGUgPSAoYml0c1swXSBhcyBhbnkpPy50eXBlO1xuICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG9wdGlvbnMgPSB7IC4uLm9wdGlvbnMsIHR5cGUgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IEZpbGUoYml0cywgbmFtZSwgb3B0aW9ucyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEJ5dGVzKHZhbHVlOiBUb0ZpbGVJbnB1dCk6IFByb21pc2U8QXJyYXk8QmxvYlBhcnQ+PiB7XG4gIGxldCBwYXJ0czogQXJyYXk8QmxvYlBhcnQ+ID0gW107XG4gIGlmIChcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8XG4gICAgQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSB8fCAvLyBpbmNsdWRlcyBVaW50OEFycmF5LCBCdWZmZXIsIGV0Yy5cbiAgICB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyXG4gICkge1xuICAgIHBhcnRzLnB1c2godmFsdWUpO1xuICB9IGVsc2UgaWYgKGlzQmxvYkxpa2UodmFsdWUpKSB7XG4gICAgcGFydHMucHVzaChhd2FpdCB2YWx1ZS5hcnJheUJ1ZmZlcigpKTtcbiAgfSBlbHNlIGlmIChcbiAgICBpc0FzeW5jSXRlcmFibGVJdGVyYXRvcih2YWx1ZSkgLy8gaW5jbHVkZXMgUmVhZGFibGUsIFJlYWRhYmxlU3RyZWFtLCBldGMuXG4gICkge1xuICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgdmFsdWUpIHtcbiAgICAgIHBhcnRzLnB1c2goY2h1bmsgYXMgQmxvYlBhcnQpOyAvLyBUT0RPLCBjb25zaWRlciB2YWxpZGF0aW5nP1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgVW5leHBlY3RlZCBkYXRhIHR5cGU6ICR7dHlwZW9mIHZhbHVlfTsgY29uc3RydWN0b3I6ICR7dmFsdWU/LmNvbnN0cnVjdG9yXG4gICAgICAgID8ubmFtZX07IHByb3BzOiAke3Byb3BzRm9yRXJyb3IodmFsdWUpfWAsXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBwYXJ0cztcbn1cblxuZnVuY3Rpb24gcHJvcHNGb3JFcnJvcih2YWx1ZTogYW55KTogc3RyaW5nIHtcbiAgY29uc3QgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIHJldHVybiBgWyR7cHJvcHMubWFwKChwKSA9PiBgXCIke3B9XCJgKS5qb2luKCcsICcpfV1gO1xufVxuXG5mdW5jdGlvbiBnZXROYW1lKHZhbHVlOiBhbnkpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICByZXR1cm4gKFxuICAgIGdldFN0cmluZ0Zyb21NYXliZUJ1ZmZlcih2YWx1ZS5uYW1lKSB8fFxuICAgIGdldFN0cmluZ0Zyb21NYXliZUJ1ZmZlcih2YWx1ZS5maWxlbmFtZSkgfHxcbiAgICAvLyBGb3IgZnMuUmVhZFN0cmVhbVxuICAgIGdldFN0cmluZ0Zyb21NYXliZUJ1ZmZlcih2YWx1ZS5wYXRoKT8uc3BsaXQoL1tcXFxcL10vKS5wb3AoKVxuICApO1xufVxuXG5jb25zdCBnZXRTdHJpbmdGcm9tTWF5YmVCdWZmZXIgPSAoeDogc3RyaW5nIHwgQnVmZmVyIHwgdW5rbm93bik6IHN0cmluZyB8IHVuZGVmaW5lZCA9PiB7XG4gIGlmICh0eXBlb2YgeCA9PT0gJ3N0cmluZycpIHJldHVybiB4O1xuICBpZiAodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgeCBpbnN0YW5jZW9mIEJ1ZmZlcikgcmV0dXJuIFN0cmluZyh4KTtcbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbmNvbnN0IGlzQXN5bmNJdGVyYWJsZUl0ZXJhdG9yID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBBc3luY0l0ZXJhYmxlSXRlcmF0b3I8dW5rbm93bj4gPT5cbiAgdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPT09ICdmdW5jdGlvbic7XG5cbmV4cG9ydCBjb25zdCBpc011bHRpcGFydEJvZHkgPSAoYm9keTogYW55KTogYm9keSBpcyBNdWx0aXBhcnRCb2R5ID0+XG4gIGJvZHkgJiYgdHlwZW9mIGJvZHkgPT09ICdvYmplY3QnICYmIGJvZHkuYm9keSAmJiBib2R5W1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNdWx0aXBhcnRCb2R5JztcblxuLyoqXG4gKiBSZXR1cm5zIGEgbXVsdGlwYXJ0L2Zvcm0tZGF0YSByZXF1ZXN0IGlmIGFueSBwYXJ0IG9mIHRoZSBnaXZlbiByZXF1ZXN0IGJvZHkgY29udGFpbnMgYSBGaWxlIC8gQmxvYiB2YWx1ZS5cbiAqIE90aGVyd2lzZSByZXR1cm5zIHRoZSByZXF1ZXN0IGFzIGlzLlxuICovXG5leHBvcnQgY29uc3QgbWF5YmVNdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMgPSBhc3luYyA8VCA9IFJlY29yZDxzdHJpbmcsIHVua25vd24+PihcbiAgb3B0czogUmVxdWVzdE9wdGlvbnM8VD4sXG4pOiBQcm9taXNlPFJlcXVlc3RPcHRpb25zPFQgfCBNdWx0aXBhcnRCb2R5Pj4gPT4ge1xuICBpZiAoIWhhc1VwbG9hZGFibGVWYWx1ZShvcHRzLmJvZHkpKSByZXR1cm4gb3B0cztcblxuICBjb25zdCBmb3JtID0gYXdhaXQgY3JlYXRlRm9ybShvcHRzLmJvZHkpO1xuICByZXR1cm4gZ2V0TXVsdGlwYXJ0UmVxdWVzdE9wdGlvbnMoZm9ybSwgb3B0cyk7XG59O1xuXG5leHBvcnQgY29uc3QgbXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zID0gYXN5bmMgPFQgPSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4oXG4gIG9wdHM6IFJlcXVlc3RPcHRpb25zPFQ+LFxuKTogUHJvbWlzZTxSZXF1ZXN0T3B0aW9uczxUIHwgTXVsdGlwYXJ0Qm9keT4+ID0+IHtcbiAgY29uc3QgZm9ybSA9IGF3YWl0IGNyZWF0ZUZvcm0ob3B0cy5ib2R5KTtcbiAgcmV0dXJuIGdldE11bHRpcGFydFJlcXVlc3RPcHRpb25zKGZvcm0sIG9wdHMpO1xufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUZvcm0gPSBhc3luYyA8VCA9IFJlY29yZDxzdHJpbmcsIHVua25vd24+Pihib2R5OiBUIHwgdW5kZWZpbmVkKTogUHJvbWlzZTxGb3JtRGF0YT4gPT4ge1xuICBjb25zdCBmb3JtID0gbmV3IEZvcm1EYXRhKCk7XG4gIGF3YWl0IFByb21pc2UuYWxsKE9iamVjdC5lbnRyaWVzKGJvZHkgfHwge30pLm1hcCgoW2tleSwgdmFsdWVdKSA9PiBhZGRGb3JtVmFsdWUoZm9ybSwga2V5LCB2YWx1ZSkpKTtcbiAgcmV0dXJuIGZvcm07XG59O1xuXG5jb25zdCBoYXNVcGxvYWRhYmxlVmFsdWUgPSAodmFsdWU6IHVua25vd24pOiBib29sZWFuID0+IHtcbiAgaWYgKGlzVXBsb2FkYWJsZSh2YWx1ZSkpIHJldHVybiB0cnVlO1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHJldHVybiB2YWx1ZS5zb21lKGhhc1VwbG9hZGFibGVWYWx1ZSk7XG4gIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgZm9yIChjb25zdCBrIGluIHZhbHVlKSB7XG4gICAgICBpZiAoaGFzVXBsb2FkYWJsZVZhbHVlKCh2YWx1ZSBhcyBhbnkpW2tdKSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmNvbnN0IGFkZEZvcm1WYWx1ZSA9IGFzeW5jIChmb3JtOiBGb3JtRGF0YSwga2V5OiBzdHJpbmcsIHZhbHVlOiB1bmtub3duKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIGBSZWNlaXZlZCBudWxsIGZvciBcIiR7a2V5fVwiOyB0byBwYXNzIG51bGwgaW4gRm9ybURhdGEsIHlvdSBtdXN0IHVzZSB0aGUgc3RyaW5nICdudWxsJ2AsXG4gICAgKTtcbiAgfVxuXG4gIC8vIFRPRE86IG1ha2UgbmVzdGVkIGZvcm1hdHMgY29uZmlndXJhYmxlXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICBmb3JtLmFwcGVuZChrZXksIFN0cmluZyh2YWx1ZSkpO1xuICB9IGVsc2UgaWYgKGlzVXBsb2FkYWJsZSh2YWx1ZSkpIHtcbiAgICBjb25zdCBmaWxlID0gYXdhaXQgdG9GaWxlKHZhbHVlKTtcbiAgICBmb3JtLmFwcGVuZChrZXksIGZpbGUgYXMgRmlsZSk7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhd2FpdCBQcm9taXNlLmFsbCh2YWx1ZS5tYXAoKGVudHJ5KSA9PiBhZGRGb3JtVmFsdWUoZm9ybSwga2V5ICsgJ1tdJywgZW50cnkpKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgT2JqZWN0LmVudHJpZXModmFsdWUpLm1hcCgoW25hbWUsIHByb3BdKSA9PiBhZGRGb3JtVmFsdWUoZm9ybSwgYCR7a2V5fVske25hbWV9XWAsIHByb3ApKSxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICBgSW52YWxpZCB2YWx1ZSBnaXZlbiB0byBmb3JtLCBleHBlY3RlZCBhIHN0cmluZywgbnVtYmVyLCBib29sZWFuLCBvYmplY3QsIEFycmF5LCBGaWxlIG9yIEJsb2IgYnV0IGdvdCAke3ZhbHVlfSBpbnN0ZWFkYCxcbiAgICApO1xuICB9XG59O1xuIiwgImltcG9ydCB7IFZFUlNJT04gfSBmcm9tICcuL3ZlcnNpb24nO1xuaW1wb3J0IHsgU3RyZWFtIH0gZnJvbSAnLi9zdHJlYW1pbmcnO1xuaW1wb3J0IHtcbiAgT3BlbkFJRXJyb3IsXG4gIEFQSUVycm9yLFxuICBBUElDb25uZWN0aW9uRXJyb3IsXG4gIEFQSUNvbm5lY3Rpb25UaW1lb3V0RXJyb3IsXG4gIEFQSVVzZXJBYm9ydEVycm9yLFxufSBmcm9tICcuL2Vycm9yJztcbmltcG9ydCB7XG4gIGtpbmQgYXMgc2hpbXNLaW5kLFxuICB0eXBlIFJlYWRhYmxlLFxuICBnZXREZWZhdWx0QWdlbnQsXG4gIHR5cGUgQWdlbnQsXG4gIGZldGNoLFxuICB0eXBlIFJlcXVlc3RJbmZvLFxuICB0eXBlIFJlcXVlc3RJbml0LFxuICB0eXBlIFJlc3BvbnNlLFxuICB0eXBlIEhlYWRlcnNJbml0LFxuICBpbml0LFxufSBmcm9tICcuL19zaGltcy9pbmRleCc7XG5cbi8vIHRyeSBydW5uaW5nIHNpZGUgZWZmZWN0cyBvdXRzaWRlIG9mIF9zaGltcy9pbmRleCB0byB3b3JrYXJvdW5kIGh0dHBzOi8vZ2l0aHViLmNvbS92ZXJjZWwvbmV4dC5qcy9pc3N1ZXMvNzY4ODFcbmluaXQoKTtcblxuZXhwb3J0IHsgdHlwZSBSZXNwb25zZSB9O1xuaW1wb3J0IHsgQmxvYkxpa2UsIGlzQmxvYkxpa2UsIGlzTXVsdGlwYXJ0Qm9keSB9IGZyb20gJy4vdXBsb2Fkcyc7XG5leHBvcnQge1xuICBtYXliZU11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyxcbiAgbXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zLFxuICBjcmVhdGVGb3JtLFxuICB0eXBlIFVwbG9hZGFibGUsXG59IGZyb20gJy4vdXBsb2Fkcyc7XG5cbmV4cG9ydCB0eXBlIEZldGNoID0gKHVybDogUmVxdWVzdEluZm8sIGluaXQ/OiBSZXF1ZXN0SW5pdCkgPT4gUHJvbWlzZTxSZXNwb25zZT47XG5cbi8qKlxuICogQW4gYWxpYXMgdG8gdGhlIGJ1aWx0aW4gYEFycmF5YCB0eXBlIHNvIHdlIGNhblxuICogZWFzaWx5IGFsaWFzIGl0IGluIGltcG9ydCBzdGF0ZW1lbnRzIGlmIHRoZXJlIGFyZSBuYW1lIGNsYXNoZXMuXG4gKi9cbnR5cGUgX0FycmF5PFQ+ID0gQXJyYXk8VD47XG5cbi8qKlxuICogQW4gYWxpYXMgdG8gdGhlIGJ1aWx0aW4gYFJlY29yZGAgdHlwZSBzbyB3ZSBjYW5cbiAqIGVhc2lseSBhbGlhcyBpdCBpbiBpbXBvcnQgc3RhdGVtZW50cyBpZiB0aGVyZSBhcmUgbmFtZSBjbGFzaGVzLlxuICovXG50eXBlIF9SZWNvcmQ8SyBleHRlbmRzIGtleW9mIGFueSwgVD4gPSBSZWNvcmQ8SywgVD47XG5cbmV4cG9ydCB0eXBlIHsgX0FycmF5IGFzIEFycmF5LCBfUmVjb3JkIGFzIFJlY29yZCB9O1xuXG50eXBlIFByb21pc2VPclZhbHVlPFQ+ID0gVCB8IFByb21pc2U8VD47XG5cbnR5cGUgQVBJUmVzcG9uc2VQcm9wcyA9IHtcbiAgcmVzcG9uc2U6IFJlc3BvbnNlO1xuICBvcHRpb25zOiBGaW5hbFJlcXVlc3RPcHRpb25zO1xuICBjb250cm9sbGVyOiBBYm9ydENvbnRyb2xsZXI7XG59O1xuXG5hc3luYyBmdW5jdGlvbiBkZWZhdWx0UGFyc2VSZXNwb25zZTxUPihwcm9wczogQVBJUmVzcG9uc2VQcm9wcyk6IFByb21pc2U8V2l0aFJlcXVlc3RJRDxUPj4ge1xuICBjb25zdCB7IHJlc3BvbnNlIH0gPSBwcm9wcztcbiAgaWYgKHByb3BzLm9wdGlvbnMuc3RyZWFtKSB7XG4gICAgZGVidWcoJ3Jlc3BvbnNlJywgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS51cmwsIHJlc3BvbnNlLmhlYWRlcnMsIHJlc3BvbnNlLmJvZHkpO1xuXG4gICAgLy8gTm90ZTogdGhlcmUgaXMgYW4gaW52YXJpYW50IGhlcmUgdGhhdCBpc24ndCByZXByZXNlbnRlZCBpbiB0aGUgdHlwZSBzeXN0ZW1cbiAgICAvLyB0aGF0IGlmIHlvdSBzZXQgYHN0cmVhbTogdHJ1ZWAgdGhlIHJlc3BvbnNlIHR5cGUgbXVzdCBhbHNvIGJlIGBTdHJlYW08VD5gXG5cbiAgICBpZiAocHJvcHMub3B0aW9ucy5fX3N0cmVhbUNsYXNzKSB7XG4gICAgICByZXR1cm4gcHJvcHMub3B0aW9ucy5fX3N0cmVhbUNsYXNzLmZyb21TU0VSZXNwb25zZShyZXNwb25zZSwgcHJvcHMuY29udHJvbGxlcikgYXMgYW55O1xuICAgIH1cblxuICAgIHJldHVybiBTdHJlYW0uZnJvbVNTRVJlc3BvbnNlKHJlc3BvbnNlLCBwcm9wcy5jb250cm9sbGVyKSBhcyBhbnk7XG4gIH1cblxuICAvLyBmZXRjaCByZWZ1c2VzIHRvIHJlYWQgdGhlIGJvZHkgd2hlbiB0aGUgc3RhdHVzIGNvZGUgaXMgMjA0LlxuICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDQpIHtcbiAgICByZXR1cm4gbnVsbCBhcyBXaXRoUmVxdWVzdElEPFQ+O1xuICB9XG5cbiAgaWYgKHByb3BzLm9wdGlvbnMuX19iaW5hcnlSZXNwb25zZSkge1xuICAgIHJldHVybiByZXNwb25zZSBhcyB1bmtub3duIGFzIFdpdGhSZXF1ZXN0SUQ8VD47XG4gIH1cblxuICBjb25zdCBjb250ZW50VHlwZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKTtcbiAgY29uc3QgbWVkaWFUeXBlID0gY29udGVudFR5cGU/LnNwbGl0KCc7JylbMF0/LnRyaW0oKTtcbiAgY29uc3QgaXNKU09OID0gbWVkaWFUeXBlPy5pbmNsdWRlcygnYXBwbGljYXRpb24vanNvbicpIHx8IG1lZGlhVHlwZT8uZW5kc1dpdGgoJytqc29uJyk7XG4gIGlmIChpc0pTT04pIHtcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gICAgZGVidWcoJ3Jlc3BvbnNlJywgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS51cmwsIHJlc3BvbnNlLmhlYWRlcnMsIGpzb24pO1xuXG4gICAgcmV0dXJuIF9hZGRSZXF1ZXN0SUQoanNvbiwgcmVzcG9uc2UpO1xuICB9XG5cbiAgY29uc3QgdGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgZGVidWcoJ3Jlc3BvbnNlJywgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS51cmwsIHJlc3BvbnNlLmhlYWRlcnMsIHRleHQpO1xuXG4gIC8vIFRPRE8gaGFuZGxlIGJsb2IsIGFycmF5YnVmZmVyLCBvdGhlciBjb250ZW50IHR5cGVzLCBldGMuXG4gIHJldHVybiB0ZXh0IGFzIHVua25vd24gYXMgV2l0aFJlcXVlc3RJRDxUPjtcbn1cblxudHlwZSBXaXRoUmVxdWVzdElEPFQ+ID1cbiAgVCBleHRlbmRzIEFycmF5PGFueT4gfCBSZXNwb25zZSB8IEFic3RyYWN0UGFnZTxhbnk+ID8gVFxuICA6IFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+ID8gVCAmIHsgX3JlcXVlc3RfaWQ/OiBzdHJpbmcgfCBudWxsIH1cbiAgOiBUO1xuXG5mdW5jdGlvbiBfYWRkUmVxdWVzdElEPFQ+KHZhbHVlOiBULCByZXNwb25zZTogUmVzcG9uc2UpOiBXaXRoUmVxdWVzdElEPFQ+IHtcbiAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlIGFzIFdpdGhSZXF1ZXN0SUQ8VD47XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbHVlLCAnX3JlcXVlc3RfaWQnLCB7XG4gICAgdmFsdWU6IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCd4LXJlcXVlc3QtaWQnKSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgfSkgYXMgV2l0aFJlcXVlc3RJRDxUPjtcbn1cblxuLyoqXG4gKiBBIHN1YmNsYXNzIG9mIGBQcm9taXNlYCBwcm92aWRpbmcgYWRkaXRpb25hbCBoZWxwZXIgbWV0aG9kc1xuICogZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIFNESy5cbiAqL1xuZXhwb3J0IGNsYXNzIEFQSVByb21pc2U8VD4gZXh0ZW5kcyBQcm9taXNlPFdpdGhSZXF1ZXN0SUQ8VD4+IHtcbiAgcHJpdmF0ZSBwYXJzZWRQcm9taXNlOiBQcm9taXNlPFdpdGhSZXF1ZXN0SUQ8VD4+IHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVzcG9uc2VQcm9taXNlOiBQcm9taXNlPEFQSVJlc3BvbnNlUHJvcHM+LFxuICAgIHByaXZhdGUgcGFyc2VSZXNwb25zZTogKFxuICAgICAgcHJvcHM6IEFQSVJlc3BvbnNlUHJvcHMsXG4gICAgKSA9PiBQcm9taXNlT3JWYWx1ZTxXaXRoUmVxdWVzdElEPFQ+PiA9IGRlZmF1bHRQYXJzZVJlc3BvbnNlLFxuICApIHtcbiAgICBzdXBlcigocmVzb2x2ZSkgPT4ge1xuICAgICAgLy8gdGhpcyBpcyBtYXliZSBhIGJpdCB3ZWlyZCBidXQgdGhpcyBoYXMgdG8gYmUgYSBuby1vcCB0byBub3QgaW1wbGljaXRseVxuICAgICAgLy8gcGFyc2UgdGhlIHJlc3BvbnNlIGJvZHk7IGluc3RlYWQgLnRoZW4sIC5jYXRjaCwgLmZpbmFsbHkgYXJlIG92ZXJyaWRkZW5cbiAgICAgIC8vIHRvIHBhcnNlIHRoZSByZXNwb25zZVxuICAgICAgcmVzb2x2ZShudWxsIGFzIGFueSk7XG4gICAgfSk7XG4gIH1cblxuICBfdGhlblVud3JhcDxVPih0cmFuc2Zvcm06IChkYXRhOiBULCBwcm9wczogQVBJUmVzcG9uc2VQcm9wcykgPT4gVSk6IEFQSVByb21pc2U8VT4ge1xuICAgIHJldHVybiBuZXcgQVBJUHJvbWlzZSh0aGlzLnJlc3BvbnNlUHJvbWlzZSwgYXN5bmMgKHByb3BzKSA9PlxuICAgICAgX2FkZFJlcXVlc3RJRCh0cmFuc2Zvcm0oYXdhaXQgdGhpcy5wYXJzZVJlc3BvbnNlKHByb3BzKSwgcHJvcHMpLCBwcm9wcy5yZXNwb25zZSksXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSByYXcgYFJlc3BvbnNlYCBpbnN0YW5jZSBpbnN0ZWFkIG9mIHBhcnNpbmcgdGhlIHJlc3BvbnNlXG4gICAqIGRhdGEuXG4gICAqXG4gICAqIElmIHlvdSB3YW50IHRvIHBhcnNlIHRoZSByZXNwb25zZSBib2R5IGJ1dCBzdGlsbCBnZXQgdGhlIGBSZXNwb25zZWBcbiAgICogaW5zdGFuY2UsIHlvdSBjYW4gdXNlIHtAbGluayB3aXRoUmVzcG9uc2UoKX0uXG4gICAqXG4gICAqIFx1RDgzRFx1REM0QiBHZXR0aW5nIHRoZSB3cm9uZyBUeXBlU2NyaXB0IHR5cGUgZm9yIGBSZXNwb25zZWA/XG4gICAqIFRyeSBzZXR0aW5nIGBcIm1vZHVsZVJlc29sdXRpb25cIjogXCJOb2RlTmV4dFwiYCBpZiB5b3UgY2FuLFxuICAgKiBvciBhZGQgb25lIG9mIHRoZXNlIGltcG9ydHMgYmVmb3JlIHlvdXIgZmlyc3QgYGltcG9ydCBcdTIwMjYgZnJvbSAnb3BlbmFpJ2A6XG4gICAqIC0gYGltcG9ydCAnb3BlbmFpL3NoaW1zL25vZGUnYCAoaWYgeW91J3JlIHJ1bm5pbmcgb24gTm9kZSlcbiAgICogLSBgaW1wb3J0ICdvcGVuYWkvc2hpbXMvd2ViJ2AgKG90aGVyd2lzZSlcbiAgICovXG4gIGFzUmVzcG9uc2UoKTogUHJvbWlzZTxSZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLnJlc3BvbnNlUHJvbWlzZS50aGVuKChwKSA9PiBwLnJlc3BvbnNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBwYXJzZWQgcmVzcG9uc2UgZGF0YSwgdGhlIHJhdyBgUmVzcG9uc2VgIGluc3RhbmNlIGFuZCB0aGUgSUQgb2YgdGhlIHJlcXVlc3QsXG4gICAqIHJldHVybmVkIHZpYSB0aGUgWC1SZXF1ZXN0LUlEIGhlYWRlciB3aGljaCBpcyB1c2VmdWwgZm9yIGRlYnVnZ2luZyByZXF1ZXN0cyBhbmQgcmVwb3J0aW5nXG4gICAqIGlzc3VlcyB0byBPcGVuQUkuXG4gICAqXG4gICAqIElmIHlvdSBqdXN0IHdhbnQgdG8gZ2V0IHRoZSByYXcgYFJlc3BvbnNlYCBpbnN0YW5jZSB3aXRob3V0IHBhcnNpbmcgaXQsXG4gICAqIHlvdSBjYW4gdXNlIHtAbGluayBhc1Jlc3BvbnNlKCl9LlxuICAgKlxuICAgKlxuICAgKiBcdUQ4M0RcdURDNEIgR2V0dGluZyB0aGUgd3JvbmcgVHlwZVNjcmlwdCB0eXBlIGZvciBgUmVzcG9uc2VgP1xuICAgKiBUcnkgc2V0dGluZyBgXCJtb2R1bGVSZXNvbHV0aW9uXCI6IFwiTm9kZU5leHRcImAgaWYgeW91IGNhbixcbiAgICogb3IgYWRkIG9uZSBvZiB0aGVzZSBpbXBvcnRzIGJlZm9yZSB5b3VyIGZpcnN0IGBpbXBvcnQgXHUyMDI2IGZyb20gJ29wZW5haSdgOlxuICAgKiAtIGBpbXBvcnQgJ29wZW5haS9zaGltcy9ub2RlJ2AgKGlmIHlvdSdyZSBydW5uaW5nIG9uIE5vZGUpXG4gICAqIC0gYGltcG9ydCAnb3BlbmFpL3NoaW1zL3dlYidgIChvdGhlcndpc2UpXG4gICAqL1xuICBhc3luYyB3aXRoUmVzcG9uc2UoKTogUHJvbWlzZTx7IGRhdGE6IFQ7IHJlc3BvbnNlOiBSZXNwb25zZTsgcmVxdWVzdF9pZDogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCB9PiB7XG4gICAgY29uc3QgW2RhdGEsIHJlc3BvbnNlXSA9IGF3YWl0IFByb21pc2UuYWxsKFt0aGlzLnBhcnNlKCksIHRoaXMuYXNSZXNwb25zZSgpXSk7XG4gICAgcmV0dXJuIHsgZGF0YSwgcmVzcG9uc2UsIHJlcXVlc3RfaWQ6IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCd4LXJlcXVlc3QtaWQnKSB9O1xuICB9XG5cbiAgcHJpdmF0ZSBwYXJzZSgpOiBQcm9taXNlPFdpdGhSZXF1ZXN0SUQ8VD4+IHtcbiAgICBpZiAoIXRoaXMucGFyc2VkUHJvbWlzZSkge1xuICAgICAgdGhpcy5wYXJzZWRQcm9taXNlID0gdGhpcy5yZXNwb25zZVByb21pc2UudGhlbih0aGlzLnBhcnNlUmVzcG9uc2UpIGFzIGFueSBhcyBQcm9taXNlPFdpdGhSZXF1ZXN0SUQ8VD4+O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wYXJzZWRQcm9taXNlO1xuICB9XG5cbiAgb3ZlcnJpZGUgdGhlbjxUUmVzdWx0MSA9IFdpdGhSZXF1ZXN0SUQ8VD4sIFRSZXN1bHQyID0gbmV2ZXI+KFxuICAgIG9uZnVsZmlsbGVkPzogKCh2YWx1ZTogV2l0aFJlcXVlc3RJRDxUPikgPT4gVFJlc3VsdDEgfCBQcm9taXNlTGlrZTxUUmVzdWx0MT4pIHwgdW5kZWZpbmVkIHwgbnVsbCxcbiAgICBvbnJlamVjdGVkPzogKChyZWFzb246IGFueSkgPT4gVFJlc3VsdDIgfCBQcm9taXNlTGlrZTxUUmVzdWx0Mj4pIHwgdW5kZWZpbmVkIHwgbnVsbCxcbiAgKTogUHJvbWlzZTxUUmVzdWx0MSB8IFRSZXN1bHQyPiB7XG4gICAgcmV0dXJuIHRoaXMucGFyc2UoKS50aGVuKG9uZnVsZmlsbGVkLCBvbnJlamVjdGVkKTtcbiAgfVxuXG4gIG92ZXJyaWRlIGNhdGNoPFRSZXN1bHQgPSBuZXZlcj4oXG4gICAgb25yZWplY3RlZD86ICgocmVhc29uOiBhbnkpID0+IFRSZXN1bHQgfCBQcm9taXNlTGlrZTxUUmVzdWx0PikgfCB1bmRlZmluZWQgfCBudWxsLFxuICApOiBQcm9taXNlPFdpdGhSZXF1ZXN0SUQ8VD4gfCBUUmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMucGFyc2UoKS5jYXRjaChvbnJlamVjdGVkKTtcbiAgfVxuXG4gIG92ZXJyaWRlIGZpbmFsbHkob25maW5hbGx5PzogKCgpID0+IHZvaWQpIHwgdW5kZWZpbmVkIHwgbnVsbCk6IFByb21pc2U8V2l0aFJlcXVlc3RJRDxUPj4ge1xuICAgIHJldHVybiB0aGlzLnBhcnNlKCkuZmluYWxseShvbmZpbmFsbHkpO1xuICB9XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBUElDbGllbnQge1xuICBiYXNlVVJMOiBzdHJpbmc7XG4gIG1heFJldHJpZXM6IG51bWJlcjtcbiAgdGltZW91dDogbnVtYmVyO1xuICBodHRwQWdlbnQ6IEFnZW50IHwgdW5kZWZpbmVkO1xuXG4gIHByaXZhdGUgZmV0Y2g6IEZldGNoO1xuICBwcm90ZWN0ZWQgaWRlbXBvdGVuY3lIZWFkZXI/OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3Ioe1xuICAgIGJhc2VVUkwsXG4gICAgbWF4UmV0cmllcyA9IDIsXG4gICAgdGltZW91dCA9IDYwMDAwMCwgLy8gMTAgbWludXRlc1xuICAgIGh0dHBBZ2VudCxcbiAgICBmZXRjaDogb3ZlcnJpZGRlbkZldGNoLFxuICB9OiB7XG4gICAgYmFzZVVSTDogc3RyaW5nO1xuICAgIG1heFJldHJpZXM/OiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gICAgdGltZW91dDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAgIGh0dHBBZ2VudDogQWdlbnQgfCB1bmRlZmluZWQ7XG4gICAgZmV0Y2g6IEZldGNoIHwgdW5kZWZpbmVkO1xuICB9KSB7XG4gICAgdGhpcy5iYXNlVVJMID0gYmFzZVVSTDtcbiAgICB0aGlzLm1heFJldHJpZXMgPSB2YWxpZGF0ZVBvc2l0aXZlSW50ZWdlcignbWF4UmV0cmllcycsIG1heFJldHJpZXMpO1xuICAgIHRoaXMudGltZW91dCA9IHZhbGlkYXRlUG9zaXRpdmVJbnRlZ2VyKCd0aW1lb3V0JywgdGltZW91dCk7XG4gICAgdGhpcy5odHRwQWdlbnQgPSBodHRwQWdlbnQ7XG5cbiAgICB0aGlzLmZldGNoID0gb3ZlcnJpZGRlbkZldGNoID8/IGZldGNoO1xuICB9XG5cbiAgcHJvdGVjdGVkIGF1dGhIZWFkZXJzKG9wdHM6IEZpbmFsUmVxdWVzdE9wdGlvbnMpOiBIZWFkZXJzIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhpcyB0byBhZGQgeW91ciBvd24gZGVmYXVsdCBoZWFkZXJzLCBmb3IgZXhhbXBsZTpcbiAgICpcbiAgICogIHtcbiAgICogICAgLi4uc3VwZXIuZGVmYXVsdEhlYWRlcnMoKSxcbiAgICogICAgQXV0aG9yaXphdGlvbjogJ0JlYXJlciAxMjMnLFxuICAgKiAgfVxuICAgKi9cbiAgcHJvdGVjdGVkIGRlZmF1bHRIZWFkZXJzKG9wdHM6IEZpbmFsUmVxdWVzdE9wdGlvbnMpOiBIZWFkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgJ1VzZXItQWdlbnQnOiB0aGlzLmdldFVzZXJBZ2VudCgpLFxuICAgICAgLi4uZ2V0UGxhdGZvcm1IZWFkZXJzKCksXG4gICAgICAuLi50aGlzLmF1dGhIZWFkZXJzKG9wdHMpLFxuICAgIH07XG4gIH1cblxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgZGVmYXVsdFF1ZXJ5KCk6IERlZmF1bHRRdWVyeSB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhpcyB0byBhZGQgeW91ciBvd24gaGVhZGVycyB2YWxpZGF0aW9uOlxuICAgKi9cbiAgcHJvdGVjdGVkIHZhbGlkYXRlSGVhZGVycyhoZWFkZXJzOiBIZWFkZXJzLCBjdXN0b21IZWFkZXJzOiBIZWFkZXJzKSB7fVxuXG4gIHByb3RlY3RlZCBkZWZhdWx0SWRlbXBvdGVuY3lLZXkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYHN0YWlubGVzcy1ub2RlLXJldHJ5LSR7dXVpZDQoKX1gO1xuICB9XG5cbiAgZ2V0PFJlcSwgUnNwPihwYXRoOiBzdHJpbmcsIG9wdHM/OiBQcm9taXNlT3JWYWx1ZTxSZXF1ZXN0T3B0aW9uczxSZXE+Pik6IEFQSVByb21pc2U8UnNwPiB7XG4gICAgcmV0dXJuIHRoaXMubWV0aG9kUmVxdWVzdCgnZ2V0JywgcGF0aCwgb3B0cyk7XG4gIH1cblxuICBwb3N0PFJlcSwgUnNwPihwYXRoOiBzdHJpbmcsIG9wdHM/OiBQcm9taXNlT3JWYWx1ZTxSZXF1ZXN0T3B0aW9uczxSZXE+Pik6IEFQSVByb21pc2U8UnNwPiB7XG4gICAgcmV0dXJuIHRoaXMubWV0aG9kUmVxdWVzdCgncG9zdCcsIHBhdGgsIG9wdHMpO1xuICB9XG5cbiAgcGF0Y2g8UmVxLCBSc3A+KHBhdGg6IHN0cmluZywgb3B0cz86IFByb21pc2VPclZhbHVlPFJlcXVlc3RPcHRpb25zPFJlcT4+KTogQVBJUHJvbWlzZTxSc3A+IHtcbiAgICByZXR1cm4gdGhpcy5tZXRob2RSZXF1ZXN0KCdwYXRjaCcsIHBhdGgsIG9wdHMpO1xuICB9XG5cbiAgcHV0PFJlcSwgUnNwPihwYXRoOiBzdHJpbmcsIG9wdHM/OiBQcm9taXNlT3JWYWx1ZTxSZXF1ZXN0T3B0aW9uczxSZXE+Pik6IEFQSVByb21pc2U8UnNwPiB7XG4gICAgcmV0dXJuIHRoaXMubWV0aG9kUmVxdWVzdCgncHV0JywgcGF0aCwgb3B0cyk7XG4gIH1cblxuICBkZWxldGU8UmVxLCBSc3A+KHBhdGg6IHN0cmluZywgb3B0cz86IFByb21pc2VPclZhbHVlPFJlcXVlc3RPcHRpb25zPFJlcT4+KTogQVBJUHJvbWlzZTxSc3A+IHtcbiAgICByZXR1cm4gdGhpcy5tZXRob2RSZXF1ZXN0KCdkZWxldGUnLCBwYXRoLCBvcHRzKTtcbiAgfVxuXG4gIHByaXZhdGUgbWV0aG9kUmVxdWVzdDxSZXEsIFJzcD4oXG4gICAgbWV0aG9kOiBIVFRQTWV0aG9kLFxuICAgIHBhdGg6IHN0cmluZyxcbiAgICBvcHRzPzogUHJvbWlzZU9yVmFsdWU8UmVxdWVzdE9wdGlvbnM8UmVxPj4sXG4gICk6IEFQSVByb21pc2U8UnNwPiB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChcbiAgICAgIFByb21pc2UucmVzb2x2ZShvcHRzKS50aGVuKGFzeW5jIChvcHRzKSA9PiB7XG4gICAgICAgIGNvbnN0IGJvZHkgPVxuICAgICAgICAgIG9wdHMgJiYgaXNCbG9iTGlrZShvcHRzPy5ib2R5KSA/IG5ldyBEYXRhVmlldyhhd2FpdCBvcHRzLmJvZHkuYXJyYXlCdWZmZXIoKSlcbiAgICAgICAgICA6IG9wdHM/LmJvZHkgaW5zdGFuY2VvZiBEYXRhVmlldyA/IG9wdHMuYm9keVxuICAgICAgICAgIDogb3B0cz8uYm9keSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyID8gbmV3IERhdGFWaWV3KG9wdHMuYm9keSlcbiAgICAgICAgICA6IG9wdHMgJiYgQXJyYXlCdWZmZXIuaXNWaWV3KG9wdHM/LmJvZHkpID8gbmV3IERhdGFWaWV3KG9wdHMuYm9keS5idWZmZXIpXG4gICAgICAgICAgOiBvcHRzPy5ib2R5O1xuICAgICAgICByZXR1cm4geyBtZXRob2QsIHBhdGgsIC4uLm9wdHMsIGJvZHkgfTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBnZXRBUElMaXN0PEl0ZW0sIFBhZ2VDbGFzcyBleHRlbmRzIEFic3RyYWN0UGFnZTxJdGVtPiA9IEFic3RyYWN0UGFnZTxJdGVtPj4oXG4gICAgcGF0aDogc3RyaW5nLFxuICAgIFBhZ2U6IG5ldyAoLi4uYXJnczogYW55W10pID0+IFBhZ2VDbGFzcyxcbiAgICBvcHRzPzogUmVxdWVzdE9wdGlvbnM8YW55PixcbiAgKTogUGFnZVByb21pc2U8UGFnZUNsYXNzLCBJdGVtPiB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdEFQSUxpc3QoUGFnZSwgeyBtZXRob2Q6ICdnZXQnLCBwYXRoLCAuLi5vcHRzIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBjYWxjdWxhdGVDb250ZW50TGVuZ3RoKGJvZHk6IHVua25vd24pOiBzdHJpbmcgfCBudWxsIHtcbiAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5ieXRlTGVuZ3RoKGJvZHksICd1dGY4JykudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBUZXh0RW5jb2RlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICAgICAgICBjb25zdCBlbmNvZGVkID0gZW5jb2Rlci5lbmNvZGUoYm9keSk7XG4gICAgICAgIHJldHVybiBlbmNvZGVkLmxlbmd0aC50b1N0cmluZygpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGJvZHkpKSB7XG4gICAgICByZXR1cm4gYm9keS5ieXRlTGVuZ3RoLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBidWlsZFJlcXVlc3Q8UmVxPihcbiAgICBpbnB1dE9wdGlvbnM6IEZpbmFsUmVxdWVzdE9wdGlvbnM8UmVxPixcbiAgICB7IHJldHJ5Q291bnQgPSAwIH06IHsgcmV0cnlDb3VudD86IG51bWJlciB9ID0ge30sXG4gICk6IHsgcmVxOiBSZXF1ZXN0SW5pdDsgdXJsOiBzdHJpbmc7IHRpbWVvdXQ6IG51bWJlciB9IHtcbiAgICBjb25zdCBvcHRpb25zID0geyAuLi5pbnB1dE9wdGlvbnMgfTtcbiAgICBjb25zdCB7IG1ldGhvZCwgcGF0aCwgcXVlcnksIGhlYWRlcnM6IGhlYWRlcnMgPSB7fSB9ID0gb3B0aW9ucztcblxuICAgIGNvbnN0IGJvZHkgPVxuICAgICAgQXJyYXlCdWZmZXIuaXNWaWV3KG9wdGlvbnMuYm9keSkgfHwgKG9wdGlvbnMuX19iaW5hcnlSZXF1ZXN0ICYmIHR5cGVvZiBvcHRpb25zLmJvZHkgPT09ICdzdHJpbmcnKSA/XG4gICAgICAgIG9wdGlvbnMuYm9keVxuICAgICAgOiBpc011bHRpcGFydEJvZHkob3B0aW9ucy5ib2R5KSA/IG9wdGlvbnMuYm9keS5ib2R5XG4gICAgICA6IG9wdGlvbnMuYm9keSA/IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMuYm9keSwgbnVsbCwgMilcbiAgICAgIDogbnVsbDtcbiAgICBjb25zdCBjb250ZW50TGVuZ3RoID0gdGhpcy5jYWxjdWxhdGVDb250ZW50TGVuZ3RoKGJvZHkpO1xuXG4gICAgY29uc3QgdXJsID0gdGhpcy5idWlsZFVSTChwYXRoISwgcXVlcnkpO1xuICAgIGlmICgndGltZW91dCcgaW4gb3B0aW9ucykgdmFsaWRhdGVQb3NpdGl2ZUludGVnZXIoJ3RpbWVvdXQnLCBvcHRpb25zLnRpbWVvdXQpO1xuICAgIG9wdGlvbnMudGltZW91dCA9IG9wdGlvbnMudGltZW91dCA/PyB0aGlzLnRpbWVvdXQ7XG4gICAgY29uc3QgaHR0cEFnZW50ID0gb3B0aW9ucy5odHRwQWdlbnQgPz8gdGhpcy5odHRwQWdlbnQgPz8gZ2V0RGVmYXVsdEFnZW50KHVybCk7XG4gICAgY29uc3QgbWluQWdlbnRUaW1lb3V0ID0gb3B0aW9ucy50aW1lb3V0ICsgMTAwMDtcbiAgICBpZiAoXG4gICAgICB0eXBlb2YgKGh0dHBBZ2VudCBhcyBhbnkpPy5vcHRpb25zPy50aW1lb3V0ID09PSAnbnVtYmVyJyAmJlxuICAgICAgbWluQWdlbnRUaW1lb3V0ID4gKChodHRwQWdlbnQgYXMgYW55KS5vcHRpb25zLnRpbWVvdXQgPz8gMClcbiAgICApIHtcbiAgICAgIC8vIEFsbG93IGFueSBnaXZlbiByZXF1ZXN0IHRvIGJ1bXAgb3VyIGFnZW50IGFjdGl2ZSBzb2NrZXQgdGltZW91dC5cbiAgICAgIC8vIFRoaXMgbWF5IHNlZW0gc3RyYW5nZSwgYnV0IGxlYWtpbmcgYWN0aXZlIHNvY2tldHMgc2hvdWxkIGJlIHJhcmUgYW5kIG5vdCBwYXJ0aWN1bGFybHkgcHJvYmxlbWF0aWMsXG4gICAgICAvLyBhbmQgd2l0aG91dCBtdXRhdGluZyBhZ2VudCB3ZSB3b3VsZCBuZWVkIHRvIGNyZWF0ZSBtb3JlIG9mIHRoZW0uXG4gICAgICAvLyBUaGlzIHRyYWRlb2ZmIG9wdGltaXplcyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICAoaHR0cEFnZW50IGFzIGFueSkub3B0aW9ucy50aW1lb3V0ID0gbWluQWdlbnRUaW1lb3V0O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlkZW1wb3RlbmN5SGVhZGVyICYmIG1ldGhvZCAhPT0gJ2dldCcpIHtcbiAgICAgIGlmICghaW5wdXRPcHRpb25zLmlkZW1wb3RlbmN5S2V5KSBpbnB1dE9wdGlvbnMuaWRlbXBvdGVuY3lLZXkgPSB0aGlzLmRlZmF1bHRJZGVtcG90ZW5jeUtleSgpO1xuICAgICAgaGVhZGVyc1t0aGlzLmlkZW1wb3RlbmN5SGVhZGVyXSA9IGlucHV0T3B0aW9ucy5pZGVtcG90ZW5jeUtleTtcbiAgICB9XG5cbiAgICBjb25zdCByZXFIZWFkZXJzID0gdGhpcy5idWlsZEhlYWRlcnMoeyBvcHRpb25zLCBoZWFkZXJzLCBjb250ZW50TGVuZ3RoLCByZXRyeUNvdW50IH0pO1xuXG4gICAgY29uc3QgcmVxOiBSZXF1ZXN0SW5pdCA9IHtcbiAgICAgIG1ldGhvZCxcbiAgICAgIC4uLihib2R5ICYmIHsgYm9keTogYm9keSBhcyBhbnkgfSksXG4gICAgICBoZWFkZXJzOiByZXFIZWFkZXJzLFxuICAgICAgLi4uKGh0dHBBZ2VudCAmJiB7IGFnZW50OiBodHRwQWdlbnQgfSksXG4gICAgICAvLyBAdHMtaWdub3JlIG5vZGUtZmV0Y2ggdXNlcyBhIGN1c3RvbSBBYm9ydFNpZ25hbCB0eXBlIHRoYXQgaXNcbiAgICAgIC8vIG5vdCBjb21wYXRpYmxlIHdpdGggc3RhbmRhcmQgd2ViIHR5cGVzXG4gICAgICBzaWduYWw6IG9wdGlvbnMuc2lnbmFsID8/IG51bGwsXG4gICAgfTtcblxuICAgIHJldHVybiB7IHJlcSwgdXJsLCB0aW1lb3V0OiBvcHRpb25zLnRpbWVvdXQgfTtcbiAgfVxuXG4gIHByaXZhdGUgYnVpbGRIZWFkZXJzKHtcbiAgICBvcHRpb25zLFxuICAgIGhlYWRlcnMsXG4gICAgY29udGVudExlbmd0aCxcbiAgICByZXRyeUNvdW50LFxuICB9OiB7XG4gICAgb3B0aW9uczogRmluYWxSZXF1ZXN0T3B0aW9ucztcbiAgICBoZWFkZXJzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkPjtcbiAgICBjb250ZW50TGVuZ3RoOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkO1xuICAgIHJldHJ5Q291bnQ6IG51bWJlcjtcbiAgfSk6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4ge1xuICAgIGNvbnN0IHJlcUhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcbiAgICBpZiAoY29udGVudExlbmd0aCkge1xuICAgICAgcmVxSGVhZGVyc1snY29udGVudC1sZW5ndGgnXSA9IGNvbnRlbnRMZW5ndGg7XG4gICAgfVxuXG4gICAgY29uc3QgZGVmYXVsdEhlYWRlcnMgPSB0aGlzLmRlZmF1bHRIZWFkZXJzKG9wdGlvbnMpO1xuICAgIGFwcGx5SGVhZGVyc011dChyZXFIZWFkZXJzLCBkZWZhdWx0SGVhZGVycyk7XG4gICAgYXBwbHlIZWFkZXJzTXV0KHJlcUhlYWRlcnMsIGhlYWRlcnMpO1xuXG4gICAgLy8gbGV0IGJ1aWx0aW4gZmV0Y2ggc2V0IHRoZSBDb250ZW50LVR5cGUgZm9yIG11bHRpcGFydCBib2RpZXNcbiAgICBpZiAoaXNNdWx0aXBhcnRCb2R5KG9wdGlvbnMuYm9keSkgJiYgc2hpbXNLaW5kICE9PSAnbm9kZScpIHtcbiAgICAgIGRlbGV0ZSByZXFIZWFkZXJzWydjb250ZW50LXR5cGUnXTtcbiAgICB9XG5cbiAgICAvLyBEb24ndCBzZXQgdGhlc2VzIGhlYWRlcnMgaWYgdGhleSB3ZXJlIGFscmVhZHkgc2V0IG9yIHJlbW92ZWQgdGhyb3VnaCBkZWZhdWx0IGhlYWRlcnMgb3IgYnkgdGhlIGNhbGxlci5cbiAgICAvLyBXZSBjaGVjayBgZGVmYXVsdEhlYWRlcnNgIGFuZCBgaGVhZGVyc2AsIHdoaWNoIGNhbiBjb250YWluIG51bGxzLCBpbnN0ZWFkIG9mIGByZXFIZWFkZXJzYCB0byBhY2NvdW50XG4gICAgLy8gZm9yIHRoZSByZW1vdmFsIGNhc2UuXG4gICAgaWYgKFxuICAgICAgZ2V0SGVhZGVyKGRlZmF1bHRIZWFkZXJzLCAneC1zdGFpbmxlc3MtcmV0cnktY291bnQnKSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICBnZXRIZWFkZXIoaGVhZGVycywgJ3gtc3RhaW5sZXNzLXJldHJ5LWNvdW50JykgPT09IHVuZGVmaW5lZFxuICAgICkge1xuICAgICAgcmVxSGVhZGVyc1sneC1zdGFpbmxlc3MtcmV0cnktY291bnQnXSA9IFN0cmluZyhyZXRyeUNvdW50KTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgZ2V0SGVhZGVyKGRlZmF1bHRIZWFkZXJzLCAneC1zdGFpbmxlc3MtdGltZW91dCcpID09PSB1bmRlZmluZWQgJiZcbiAgICAgIGdldEhlYWRlcihoZWFkZXJzLCAneC1zdGFpbmxlc3MtdGltZW91dCcpID09PSB1bmRlZmluZWQgJiZcbiAgICAgIG9wdGlvbnMudGltZW91dFxuICAgICkge1xuICAgICAgcmVxSGVhZGVyc1sneC1zdGFpbmxlc3MtdGltZW91dCddID0gU3RyaW5nKE1hdGgudHJ1bmMob3B0aW9ucy50aW1lb3V0IC8gMTAwMCkpO1xuICAgIH1cblxuICAgIHRoaXMudmFsaWRhdGVIZWFkZXJzKHJlcUhlYWRlcnMsIGhlYWRlcnMpO1xuXG4gICAgcmV0dXJuIHJlcUhlYWRlcnM7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBhcyBhIGNhbGxiYWNrIGZvciBtdXRhdGluZyB0aGUgZ2l2ZW4gYEZpbmFsUmVxdWVzdE9wdGlvbnNgIG9iamVjdC5cbiAgICovXG4gIHByb3RlY3RlZCBhc3luYyBwcmVwYXJlT3B0aW9ucyhvcHRpb25zOiBGaW5hbFJlcXVlc3RPcHRpb25zKTogUHJvbWlzZTx2b2lkPiB7fVxuXG4gIC8qKlxuICAgKiBVc2VkIGFzIGEgY2FsbGJhY2sgZm9yIG11dGF0aW5nIHRoZSBnaXZlbiBgUmVxdWVzdEluaXRgIG9iamVjdC5cbiAgICpcbiAgICogVGhpcyBpcyB1c2VmdWwgZm9yIGNhc2VzIHdoZXJlIHlvdSB3YW50IHRvIGFkZCBjZXJ0YWluIGhlYWRlcnMgYmFzZWQgb2ZmIG9mXG4gICAqIHRoZSByZXF1ZXN0IHByb3BlcnRpZXMsIGUuZy4gYG1ldGhvZGAgb3IgYHVybGAuXG4gICAqL1xuICBwcm90ZWN0ZWQgYXN5bmMgcHJlcGFyZVJlcXVlc3QoXG4gICAgcmVxdWVzdDogUmVxdWVzdEluaXQsXG4gICAgeyB1cmwsIG9wdGlvbnMgfTogeyB1cmw6IHN0cmluZzsgb3B0aW9uczogRmluYWxSZXF1ZXN0T3B0aW9ucyB9LFxuICApOiBQcm9taXNlPHZvaWQ+IHt9XG5cbiAgcHJvdGVjdGVkIHBhcnNlSGVhZGVycyhoZWFkZXJzOiBIZWFkZXJzSW5pdCB8IG51bGwgfCB1bmRlZmluZWQpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHtcbiAgICByZXR1cm4gKFxuICAgICAgIWhlYWRlcnMgPyB7fVxuICAgICAgOiBTeW1ib2wuaXRlcmF0b3IgaW4gaGVhZGVycyA/XG4gICAgICAgIE9iamVjdC5mcm9tRW50cmllcyhBcnJheS5mcm9tKGhlYWRlcnMgYXMgSXRlcmFibGU8c3RyaW5nW10+KS5tYXAoKGhlYWRlcikgPT4gWy4uLmhlYWRlcl0pKVxuICAgICAgOiB7IC4uLihoZWFkZXJzIGFzIGFueSBhcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KSB9XG4gICAgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBtYWtlU3RhdHVzRXJyb3IoXG4gICAgc3RhdHVzOiBudW1iZXIgfCB1bmRlZmluZWQsXG4gICAgZXJyb3I6IE9iamVjdCB8IHVuZGVmaW5lZCxcbiAgICBtZXNzYWdlOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgaGVhZGVyczogSGVhZGVycyB8IHVuZGVmaW5lZCxcbiAgKTogQVBJRXJyb3Ige1xuICAgIHJldHVybiBBUElFcnJvci5nZW5lcmF0ZShzdGF0dXMsIGVycm9yLCBtZXNzYWdlLCBoZWFkZXJzKTtcbiAgfVxuXG4gIHJlcXVlc3Q8UmVxLCBSc3A+KFxuICAgIG9wdGlvbnM6IFByb21pc2VPclZhbHVlPEZpbmFsUmVxdWVzdE9wdGlvbnM8UmVxPj4sXG4gICAgcmVtYWluaW5nUmV0cmllczogbnVtYmVyIHwgbnVsbCA9IG51bGwsXG4gICk6IEFQSVByb21pc2U8UnNwPiB7XG4gICAgcmV0dXJuIG5ldyBBUElQcm9taXNlKHRoaXMubWFrZVJlcXVlc3Qob3B0aW9ucywgcmVtYWluaW5nUmV0cmllcykpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBtYWtlUmVxdWVzdDxSZXE+KFxuICAgIG9wdGlvbnNJbnB1dDogUHJvbWlzZU9yVmFsdWU8RmluYWxSZXF1ZXN0T3B0aW9uczxSZXE+PixcbiAgICByZXRyaWVzUmVtYWluaW5nOiBudW1iZXIgfCBudWxsLFxuICApOiBQcm9taXNlPEFQSVJlc3BvbnNlUHJvcHM+IHtcbiAgICBjb25zdCBvcHRpb25zID0gYXdhaXQgb3B0aW9uc0lucHV0O1xuICAgIGNvbnN0IG1heFJldHJpZXMgPSBvcHRpb25zLm1heFJldHJpZXMgPz8gdGhpcy5tYXhSZXRyaWVzO1xuICAgIGlmIChyZXRyaWVzUmVtYWluaW5nID09IG51bGwpIHtcbiAgICAgIHJldHJpZXNSZW1haW5pbmcgPSBtYXhSZXRyaWVzO1xuICAgIH1cblxuICAgIGF3YWl0IHRoaXMucHJlcGFyZU9wdGlvbnMob3B0aW9ucyk7XG5cbiAgICBjb25zdCB7IHJlcSwgdXJsLCB0aW1lb3V0IH0gPSB0aGlzLmJ1aWxkUmVxdWVzdChvcHRpb25zLCB7IHJldHJ5Q291bnQ6IG1heFJldHJpZXMgLSByZXRyaWVzUmVtYWluaW5nIH0pO1xuXG4gICAgYXdhaXQgdGhpcy5wcmVwYXJlUmVxdWVzdChyZXEsIHsgdXJsLCBvcHRpb25zIH0pO1xuXG4gICAgZGVidWcoJ3JlcXVlc3QnLCB1cmwsIG9wdGlvbnMsIHJlcS5oZWFkZXJzKTtcblxuICAgIGlmIChvcHRpb25zLnNpZ25hbD8uYWJvcnRlZCkge1xuICAgICAgdGhyb3cgbmV3IEFQSVVzZXJBYm9ydEVycm9yKCk7XG4gICAgfVxuXG4gICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuZmV0Y2hXaXRoVGltZW91dCh1cmwsIHJlcSwgdGltZW91dCwgY29udHJvbGxlcikuY2F0Y2goY2FzdFRvRXJyb3IpO1xuXG4gICAgaWYgKHJlc3BvbnNlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIGlmIChvcHRpb25zLnNpZ25hbD8uYWJvcnRlZCkge1xuICAgICAgICB0aHJvdyBuZXcgQVBJVXNlckFib3J0RXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXRyaWVzUmVtYWluaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJldHJ5UmVxdWVzdChvcHRpb25zLCByZXRyaWVzUmVtYWluaW5nKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXNwb25zZS5uYW1lID09PSAnQWJvcnRFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEFQSUNvbm5lY3Rpb25UaW1lb3V0RXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBBUElDb25uZWN0aW9uRXJyb3IoeyBjYXVzZTogcmVzcG9uc2UgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzcG9uc2VIZWFkZXJzID0gY3JlYXRlUmVzcG9uc2VIZWFkZXJzKHJlc3BvbnNlLmhlYWRlcnMpO1xuXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgaWYgKHJldHJpZXNSZW1haW5pbmcgJiYgdGhpcy5zaG91bGRSZXRyeShyZXNwb25zZSkpIHtcbiAgICAgICAgY29uc3QgcmV0cnlNZXNzYWdlID0gYHJldHJ5aW5nLCAke3JldHJpZXNSZW1haW5pbmd9IGF0dGVtcHRzIHJlbWFpbmluZ2A7XG4gICAgICAgIGRlYnVnKGByZXNwb25zZSAoZXJyb3I7ICR7cmV0cnlNZXNzYWdlfSlgLCByZXNwb25zZS5zdGF0dXMsIHVybCwgcmVzcG9uc2VIZWFkZXJzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV0cnlSZXF1ZXN0KG9wdGlvbnMsIHJldHJpZXNSZW1haW5pbmcsIHJlc3BvbnNlSGVhZGVycyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGVyclRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCkuY2F0Y2goKGUpID0+IGNhc3RUb0Vycm9yKGUpLm1lc3NhZ2UpO1xuICAgICAgY29uc3QgZXJySlNPTiA9IHNhZmVKU09OKGVyclRleHQpO1xuICAgICAgY29uc3QgZXJyTWVzc2FnZSA9IGVyckpTT04gPyB1bmRlZmluZWQgOiBlcnJUZXh0O1xuICAgICAgY29uc3QgcmV0cnlNZXNzYWdlID0gcmV0cmllc1JlbWFpbmluZyA/IGAoZXJyb3I7IG5vIG1vcmUgcmV0cmllcyBsZWZ0KWAgOiBgKGVycm9yOyBub3QgcmV0cnlhYmxlKWA7XG5cbiAgICAgIGRlYnVnKGByZXNwb25zZSAoZXJyb3I7ICR7cmV0cnlNZXNzYWdlfSlgLCByZXNwb25zZS5zdGF0dXMsIHVybCwgcmVzcG9uc2VIZWFkZXJzLCBlcnJNZXNzYWdlKTtcblxuICAgICAgY29uc3QgZXJyID0gdGhpcy5tYWtlU3RhdHVzRXJyb3IocmVzcG9uc2Uuc3RhdHVzLCBlcnJKU09OLCBlcnJNZXNzYWdlLCByZXNwb25zZUhlYWRlcnMpO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cblxuICAgIHJldHVybiB7IHJlc3BvbnNlLCBvcHRpb25zLCBjb250cm9sbGVyIH07XG4gIH1cblxuICByZXF1ZXN0QVBJTGlzdDxJdGVtID0gdW5rbm93biwgUGFnZUNsYXNzIGV4dGVuZHMgQWJzdHJhY3RQYWdlPEl0ZW0+ID0gQWJzdHJhY3RQYWdlPEl0ZW0+PihcbiAgICBQYWdlOiBuZXcgKC4uLmFyZ3M6IENvbnN0cnVjdG9yUGFyYW1ldGVyczx0eXBlb2YgQWJzdHJhY3RQYWdlPikgPT4gUGFnZUNsYXNzLFxuICAgIG9wdGlvbnM6IEZpbmFsUmVxdWVzdE9wdGlvbnMsXG4gICk6IFBhZ2VQcm9taXNlPFBhZ2VDbGFzcywgSXRlbT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLm1ha2VSZXF1ZXN0KG9wdGlvbnMsIG51bGwpO1xuICAgIHJldHVybiBuZXcgUGFnZVByb21pc2U8UGFnZUNsYXNzLCBJdGVtPih0aGlzLCByZXF1ZXN0LCBQYWdlKTtcbiAgfVxuXG4gIGJ1aWxkVVJMPFJlcT4ocGF0aDogc3RyaW5nLCBxdWVyeTogUmVxIHwgbnVsbCB8IHVuZGVmaW5lZCk6IHN0cmluZyB7XG4gICAgY29uc3QgdXJsID1cbiAgICAgIGlzQWJzb2x1dGVVUkwocGF0aCkgP1xuICAgICAgICBuZXcgVVJMKHBhdGgpXG4gICAgICA6IG5ldyBVUkwodGhpcy5iYXNlVVJMICsgKHRoaXMuYmFzZVVSTC5lbmRzV2l0aCgnLycpICYmIHBhdGguc3RhcnRzV2l0aCgnLycpID8gcGF0aC5zbGljZSgxKSA6IHBhdGgpKTtcblxuICAgIGNvbnN0IGRlZmF1bHRRdWVyeSA9IHRoaXMuZGVmYXVsdFF1ZXJ5KCk7XG4gICAgaWYgKCFpc0VtcHR5T2JqKGRlZmF1bHRRdWVyeSkpIHtcbiAgICAgIHF1ZXJ5ID0geyAuLi5kZWZhdWx0UXVlcnksIC4uLnF1ZXJ5IH0gYXMgUmVxO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcXVlcnkgPT09ICdvYmplY3QnICYmIHF1ZXJ5ICYmICFBcnJheS5pc0FycmF5KHF1ZXJ5KSkge1xuICAgICAgdXJsLnNlYXJjaCA9IHRoaXMuc3RyaW5naWZ5UXVlcnkocXVlcnkgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4pO1xuICAgIH1cblxuICAgIHJldHVybiB1cmwudG9TdHJpbmcoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzdHJpbmdpZnlRdWVyeShxdWVyeTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4pOiBzdHJpbmcge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhxdWVyeSlcbiAgICAgIC5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgICAubWFwKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgICAgIHJldHVybiBgJHtlbmNvZGVVUklDb21wb25lbnQoa2V5KX09JHtlbmNvZGVVUklDb21wb25lbnQodmFsdWUpfWA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGAke2VuY29kZVVSSUNvbXBvbmVudChrZXkpfT1gO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihcbiAgICAgICAgICBgQ2Fubm90IHN0cmluZ2lmeSB0eXBlICR7dHlwZW9mIHZhbHVlfTsgRXhwZWN0ZWQgc3RyaW5nLCBudW1iZXIsIGJvb2xlYW4sIG9yIG51bGwuIElmIHlvdSBuZWVkIHRvIHBhc3MgbmVzdGVkIHF1ZXJ5IHBhcmFtZXRlcnMsIHlvdSBjYW4gbWFudWFsbHkgZW5jb2RlIHRoZW0sIGUuZy4geyBxdWVyeTogeyAnZm9vW2tleTFdJzogdmFsdWUxLCAnZm9vW2tleTJdJzogdmFsdWUyIH0gfSwgYW5kIHBsZWFzZSBvcGVuIGEgR2l0SHViIGlzc3VlIHJlcXVlc3RpbmcgYmV0dGVyIHN1cHBvcnQgZm9yIHlvdXIgdXNlIGNhc2UuYCxcbiAgICAgICAgKTtcbiAgICAgIH0pXG4gICAgICAuam9pbignJicpO1xuICB9XG5cbiAgYXN5bmMgZmV0Y2hXaXRoVGltZW91dChcbiAgICB1cmw6IFJlcXVlc3RJbmZvLFxuICAgIGluaXQ6IFJlcXVlc3RJbml0IHwgdW5kZWZpbmVkLFxuICAgIG1zOiBudW1iZXIsXG4gICAgY29udHJvbGxlcjogQWJvcnRDb250cm9sbGVyLFxuICApOiBQcm9taXNlPFJlc3BvbnNlPiB7XG4gICAgY29uc3QgeyBzaWduYWwsIC4uLm9wdGlvbnMgfSA9IGluaXQgfHwge307XG4gICAgaWYgKHNpZ25hbCkgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgKCkgPT4gY29udHJvbGxlci5hYm9ydCgpKTtcblxuICAgIGNvbnN0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IGNvbnRyb2xsZXIuYWJvcnQoKSwgbXMpO1xuXG4gICAgY29uc3QgZmV0Y2hPcHRpb25zID0ge1xuICAgICAgc2lnbmFsOiBjb250cm9sbGVyLnNpZ25hbCBhcyBhbnksXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH07XG4gICAgaWYgKGZldGNoT3B0aW9ucy5tZXRob2QpIHtcbiAgICAgIC8vIEN1c3RvbSBtZXRob2RzIGxpa2UgJ3BhdGNoJyBuZWVkIHRvIGJlIHVwcGVyY2FzZWRcbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL3VuZGljaS9pc3N1ZXMvMjI5NFxuICAgICAgZmV0Y2hPcHRpb25zLm1ldGhvZCA9IGZldGNoT3B0aW9ucy5tZXRob2QudG9VcHBlckNhc2UoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgLy8gdXNlIHVuZGVmaW5lZCB0aGlzIGJpbmRpbmc7IGZldGNoIGVycm9ycyBpZiBib3VuZCB0byBzb21ldGhpbmcgZWxzZSBpbiBicm93c2VyL2Nsb3VkZmxhcmVcbiAgICAgIHRoaXMuZmV0Y2guY2FsbCh1bmRlZmluZWQsIHVybCwgZmV0Y2hPcHRpb25zKS5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBzaG91bGRSZXRyeShyZXNwb25zZTogUmVzcG9uc2UpOiBib29sZWFuIHtcbiAgICAvLyBOb3RlIHRoaXMgaXMgbm90IGEgc3RhbmRhcmQgaGVhZGVyLlxuICAgIGNvbnN0IHNob3VsZFJldHJ5SGVhZGVyID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoJ3gtc2hvdWxkLXJldHJ5Jyk7XG5cbiAgICAvLyBJZiB0aGUgc2VydmVyIGV4cGxpY2l0bHkgc2F5cyB3aGV0aGVyIG9yIG5vdCB0byByZXRyeSwgb2JleS5cbiAgICBpZiAoc2hvdWxkUmV0cnlIZWFkZXIgPT09ICd0cnVlJykgcmV0dXJuIHRydWU7XG4gICAgaWYgKHNob3VsZFJldHJ5SGVhZGVyID09PSAnZmFsc2UnKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBSZXRyeSBvbiByZXF1ZXN0IHRpbWVvdXRzLlxuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwOCkgcmV0dXJuIHRydWU7XG5cbiAgICAvLyBSZXRyeSBvbiBsb2NrIHRpbWVvdXRzLlxuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwOSkgcmV0dXJuIHRydWU7XG5cbiAgICAvLyBSZXRyeSBvbiByYXRlIGxpbWl0cy5cbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MjkpIHJldHVybiB0cnVlO1xuXG4gICAgLy8gUmV0cnkgaW50ZXJuYWwgZXJyb3JzLlxuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPj0gNTAwKSByZXR1cm4gdHJ1ZTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcmV0cnlSZXF1ZXN0KFxuICAgIG9wdGlvbnM6IEZpbmFsUmVxdWVzdE9wdGlvbnMsXG4gICAgcmV0cmllc1JlbWFpbmluZzogbnVtYmVyLFxuICAgIHJlc3BvbnNlSGVhZGVycz86IEhlYWRlcnMgfCB1bmRlZmluZWQsXG4gICk6IFByb21pc2U8QVBJUmVzcG9uc2VQcm9wcz4ge1xuICAgIGxldCB0aW1lb3V0TWlsbGlzOiBudW1iZXIgfCB1bmRlZmluZWQ7XG5cbiAgICAvLyBOb3RlIHRoZSBgcmV0cnktYWZ0ZXItbXNgIGhlYWRlciBtYXkgbm90IGJlIHN0YW5kYXJkLCBidXQgaXMgYSBnb29kIGlkZWEgYW5kIHdlJ2QgbGlrZSBwcm9hY3RpdmUgc3VwcG9ydCBmb3IgaXQuXG4gICAgY29uc3QgcmV0cnlBZnRlck1pbGxpc0hlYWRlciA9IHJlc3BvbnNlSGVhZGVycz8uWydyZXRyeS1hZnRlci1tcyddO1xuICAgIGlmIChyZXRyeUFmdGVyTWlsbGlzSGVhZGVyKSB7XG4gICAgICBjb25zdCB0aW1lb3V0TXMgPSBwYXJzZUZsb2F0KHJldHJ5QWZ0ZXJNaWxsaXNIZWFkZXIpO1xuICAgICAgaWYgKCFOdW1iZXIuaXNOYU4odGltZW91dE1zKSkge1xuICAgICAgICB0aW1lb3V0TWlsbGlzID0gdGltZW91dE1zO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFib3V0IHRoZSBSZXRyeS1BZnRlciBoZWFkZXI6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvSGVhZGVycy9SZXRyeS1BZnRlclxuICAgIGNvbnN0IHJldHJ5QWZ0ZXJIZWFkZXIgPSByZXNwb25zZUhlYWRlcnM/LlsncmV0cnktYWZ0ZXInXTtcbiAgICBpZiAocmV0cnlBZnRlckhlYWRlciAmJiAhdGltZW91dE1pbGxpcykge1xuICAgICAgY29uc3QgdGltZW91dFNlY29uZHMgPSBwYXJzZUZsb2F0KHJldHJ5QWZ0ZXJIZWFkZXIpO1xuICAgICAgaWYgKCFOdW1iZXIuaXNOYU4odGltZW91dFNlY29uZHMpKSB7XG4gICAgICAgIHRpbWVvdXRNaWxsaXMgPSB0aW1lb3V0U2Vjb25kcyAqIDEwMDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aW1lb3V0TWlsbGlzID0gRGF0ZS5wYXJzZShyZXRyeUFmdGVySGVhZGVyKSAtIERhdGUubm93KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIEFQSSBhc2tzIHVzIHRvIHdhaXQgYSBjZXJ0YWluIGFtb3VudCBvZiB0aW1lIChhbmQgaXQncyBhIHJlYXNvbmFibGUgYW1vdW50KSxcbiAgICAvLyBqdXN0IGRvIHdoYXQgaXQgc2F5cywgYnV0IG90aGVyd2lzZSBjYWxjdWxhdGUgYSBkZWZhdWx0XG4gICAgaWYgKCEodGltZW91dE1pbGxpcyAmJiAwIDw9IHRpbWVvdXRNaWxsaXMgJiYgdGltZW91dE1pbGxpcyA8IDYwICogMTAwMCkpIHtcbiAgICAgIGNvbnN0IG1heFJldHJpZXMgPSBvcHRpb25zLm1heFJldHJpZXMgPz8gdGhpcy5tYXhSZXRyaWVzO1xuICAgICAgdGltZW91dE1pbGxpcyA9IHRoaXMuY2FsY3VsYXRlRGVmYXVsdFJldHJ5VGltZW91dE1pbGxpcyhyZXRyaWVzUmVtYWluaW5nLCBtYXhSZXRyaWVzKTtcbiAgICB9XG4gICAgYXdhaXQgc2xlZXAodGltZW91dE1pbGxpcyk7XG5cbiAgICByZXR1cm4gdGhpcy5tYWtlUmVxdWVzdChvcHRpb25zLCByZXRyaWVzUmVtYWluaW5nIC0gMSk7XG4gIH1cblxuICBwcml2YXRlIGNhbGN1bGF0ZURlZmF1bHRSZXRyeVRpbWVvdXRNaWxsaXMocmV0cmllc1JlbWFpbmluZzogbnVtYmVyLCBtYXhSZXRyaWVzOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IGluaXRpYWxSZXRyeURlbGF5ID0gMC41O1xuICAgIGNvbnN0IG1heFJldHJ5RGVsYXkgPSA4LjA7XG5cbiAgICBjb25zdCBudW1SZXRyaWVzID0gbWF4UmV0cmllcyAtIHJldHJpZXNSZW1haW5pbmc7XG5cbiAgICAvLyBBcHBseSBleHBvbmVudGlhbCBiYWNrb2ZmLCBidXQgbm90IG1vcmUgdGhhbiB0aGUgbWF4LlxuICAgIGNvbnN0IHNsZWVwU2Vjb25kcyA9IE1hdGgubWluKGluaXRpYWxSZXRyeURlbGF5ICogTWF0aC5wb3coMiwgbnVtUmV0cmllcyksIG1heFJldHJ5RGVsYXkpO1xuXG4gICAgLy8gQXBwbHkgc29tZSBqaXR0ZXIsIHRha2UgdXAgdG8gYXQgbW9zdCAyNSBwZXJjZW50IG9mIHRoZSByZXRyeSB0aW1lLlxuICAgIGNvbnN0IGppdHRlciA9IDEgLSBNYXRoLnJhbmRvbSgpICogMC4yNTtcblxuICAgIHJldHVybiBzbGVlcFNlY29uZHMgKiBqaXR0ZXIgKiAxMDAwO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRVc2VyQWdlbnQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfS9KUyAke1ZFUlNJT059YDtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBQYWdlSW5mbyA9IHsgdXJsOiBVUkwgfSB8IHsgcGFyYW1zOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB8IG51bGwgfTtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0UGFnZTxJdGVtPiBpbXBsZW1lbnRzIEFzeW5jSXRlcmFibGU8SXRlbT4ge1xuICAjY2xpZW50OiBBUElDbGllbnQ7XG4gIHByb3RlY3RlZCBvcHRpb25zOiBGaW5hbFJlcXVlc3RPcHRpb25zO1xuXG4gIHByb3RlY3RlZCByZXNwb25zZTogUmVzcG9uc2U7XG4gIHByb3RlY3RlZCBib2R5OiB1bmtub3duO1xuXG4gIGNvbnN0cnVjdG9yKGNsaWVudDogQVBJQ2xpZW50LCByZXNwb25zZTogUmVzcG9uc2UsIGJvZHk6IHVua25vd24sIG9wdGlvbnM6IEZpbmFsUmVxdWVzdE9wdGlvbnMpIHtcbiAgICB0aGlzLiNjbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgdGhpcy5ib2R5ID0gYm9keTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgbmV4dFBhZ2VJbmZvIGluc3RlYWRcbiAgICovXG4gIGFic3RyYWN0IG5leHRQYWdlUGFyYW1zKCk6IFBhcnRpYWw8UmVjb3JkPHN0cmluZywgdW5rbm93bj4+IHwgbnVsbDtcbiAgYWJzdHJhY3QgbmV4dFBhZ2VJbmZvKCk6IFBhZ2VJbmZvIHwgbnVsbDtcblxuICBhYnN0cmFjdCBnZXRQYWdpbmF0ZWRJdGVtcygpOiBJdGVtW107XG5cbiAgaGFzTmV4dFBhZ2UoKTogYm9vbGVhbiB7XG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLmdldFBhZ2luYXRlZEl0ZW1zKCk7XG4gICAgaWYgKCFpdGVtcy5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5uZXh0UGFnZUluZm8oKSAhPSBudWxsO1xuICB9XG5cbiAgYXN5bmMgZ2V0TmV4dFBhZ2UoKTogUHJvbWlzZTx0aGlzPiB7XG4gICAgY29uc3QgbmV4dEluZm8gPSB0aGlzLm5leHRQYWdlSW5mbygpO1xuICAgIGlmICghbmV4dEluZm8pIHtcbiAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihcbiAgICAgICAgJ05vIG5leHQgcGFnZSBleHBlY3RlZDsgcGxlYXNlIGNoZWNrIGAuaGFzTmV4dFBhZ2UoKWAgYmVmb3JlIGNhbGxpbmcgYC5nZXROZXh0UGFnZSgpYC4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgbmV4dE9wdGlvbnMgPSB7IC4uLnRoaXMub3B0aW9ucyB9O1xuICAgIGlmICgncGFyYW1zJyBpbiBuZXh0SW5mbyAmJiB0eXBlb2YgbmV4dE9wdGlvbnMucXVlcnkgPT09ICdvYmplY3QnKSB7XG4gICAgICBuZXh0T3B0aW9ucy5xdWVyeSA9IHsgLi4ubmV4dE9wdGlvbnMucXVlcnksIC4uLm5leHRJbmZvLnBhcmFtcyB9O1xuICAgIH0gZWxzZSBpZiAoJ3VybCcgaW4gbmV4dEluZm8pIHtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IFsuLi5PYmplY3QuZW50cmllcyhuZXh0T3B0aW9ucy5xdWVyeSB8fCB7fSksIC4uLm5leHRJbmZvLnVybC5zZWFyY2hQYXJhbXMuZW50cmllcygpXTtcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHBhcmFtcykge1xuICAgICAgICBuZXh0SW5mby51cmwuc2VhcmNoUGFyYW1zLnNldChrZXksIHZhbHVlIGFzIGFueSk7XG4gICAgICB9XG4gICAgICBuZXh0T3B0aW9ucy5xdWVyeSA9IHVuZGVmaW5lZDtcbiAgICAgIG5leHRPcHRpb25zLnBhdGggPSBuZXh0SW5mby51cmwudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuI2NsaWVudC5yZXF1ZXN0QVBJTGlzdCh0aGlzLmNvbnN0cnVjdG9yIGFzIGFueSwgbmV4dE9wdGlvbnMpO1xuICB9XG5cbiAgYXN5bmMgKml0ZXJQYWdlcygpOiBBc3luY0dlbmVyYXRvcjx0aGlzPiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby10aGlzLWFsaWFzXG4gICAgbGV0IHBhZ2U6IHRoaXMgPSB0aGlzO1xuICAgIHlpZWxkIHBhZ2U7XG4gICAgd2hpbGUgKHBhZ2UuaGFzTmV4dFBhZ2UoKSkge1xuICAgICAgcGFnZSA9IGF3YWl0IHBhZ2UuZ2V0TmV4dFBhZ2UoKTtcbiAgICAgIHlpZWxkIHBhZ2U7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTogQXN5bmNHZW5lcmF0b3I8SXRlbT4ge1xuICAgIGZvciBhd2FpdCAoY29uc3QgcGFnZSBvZiB0aGlzLml0ZXJQYWdlcygpKSB7XG4gICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgcGFnZS5nZXRQYWdpbmF0ZWRJdGVtcygpKSB7XG4gICAgICAgIHlpZWxkIGl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVGhpcyBzdWJjbGFzcyBvZiBQcm9taXNlIHdpbGwgcmVzb2x2ZSB0byBhbiBpbnN0YW50aWF0ZWQgUGFnZSBvbmNlIHRoZSByZXF1ZXN0IGNvbXBsZXRlcy5cbiAqXG4gKiBJdCBhbHNvIGltcGxlbWVudHMgQXN5bmNJdGVyYWJsZSB0byBhbGxvdyBhdXRvLXBhZ2luYXRpbmcgaXRlcmF0aW9uIG9uIGFuIHVuYXdhaXRlZCBsaXN0IGNhbGwsIGVnOlxuICpcbiAqICAgIGZvciBhd2FpdCAoY29uc3QgaXRlbSBvZiBjbGllbnQuaXRlbXMubGlzdCgpKSB7XG4gKiAgICAgIGNvbnNvbGUubG9nKGl0ZW0pXG4gKiAgICB9XG4gKi9cbmV4cG9ydCBjbGFzcyBQYWdlUHJvbWlzZTxcbiAgICBQYWdlQ2xhc3MgZXh0ZW5kcyBBYnN0cmFjdFBhZ2U8SXRlbT4sXG4gICAgSXRlbSA9IFJldHVyblR5cGU8UGFnZUNsYXNzWydnZXRQYWdpbmF0ZWRJdGVtcyddPltudW1iZXJdLFxuICA+XG4gIGV4dGVuZHMgQVBJUHJvbWlzZTxQYWdlQ2xhc3M+XG4gIGltcGxlbWVudHMgQXN5bmNJdGVyYWJsZTxJdGVtPlxue1xuICBjb25zdHJ1Y3RvcihcbiAgICBjbGllbnQ6IEFQSUNsaWVudCxcbiAgICByZXF1ZXN0OiBQcm9taXNlPEFQSVJlc3BvbnNlUHJvcHM+LFxuICAgIFBhZ2U6IG5ldyAoLi4uYXJnczogQ29uc3RydWN0b3JQYXJhbWV0ZXJzPHR5cGVvZiBBYnN0cmFjdFBhZ2U+KSA9PiBQYWdlQ2xhc3MsXG4gICkge1xuICAgIHN1cGVyKFxuICAgICAgcmVxdWVzdCxcbiAgICAgIGFzeW5jIChwcm9wcykgPT5cbiAgICAgICAgbmV3IFBhZ2UoXG4gICAgICAgICAgY2xpZW50LFxuICAgICAgICAgIHByb3BzLnJlc3BvbnNlLFxuICAgICAgICAgIGF3YWl0IGRlZmF1bHRQYXJzZVJlc3BvbnNlKHByb3BzKSxcbiAgICAgICAgICBwcm9wcy5vcHRpb25zLFxuICAgICAgICApIGFzIFdpdGhSZXF1ZXN0SUQ8UGFnZUNsYXNzPixcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEFsbG93IGF1dG8tcGFnaW5hdGluZyBpdGVyYXRpb24gb24gYW4gdW5hd2FpdGVkIGxpc3QgY2FsbCwgZWc6XG4gICAqXG4gICAqICAgIGZvciBhd2FpdCAoY29uc3QgaXRlbSBvZiBjbGllbnQuaXRlbXMubGlzdCgpKSB7XG4gICAqICAgICAgY29uc29sZS5sb2coaXRlbSlcbiAgICogICAgfVxuICAgKi9cbiAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTogQXN5bmNHZW5lcmF0b3I8SXRlbT4ge1xuICAgIGNvbnN0IHBhZ2UgPSBhd2FpdCB0aGlzO1xuICAgIGZvciBhd2FpdCAoY29uc3QgaXRlbSBvZiBwYWdlKSB7XG4gICAgICB5aWVsZCBpdGVtO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlUmVzcG9uc2VIZWFkZXJzID0gKFxuICBoZWFkZXJzOiBBd2FpdGVkPFJldHVyblR5cGU8RmV0Y2g+PlsnaGVhZGVycyddLFxuKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9PiB7XG4gIHJldHVybiBuZXcgUHJveHkoXG4gICAgT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgaGVhZGVycy5lbnRyaWVzKCksXG4gICAgKSxcbiAgICB7XG4gICAgICBnZXQodGFyZ2V0LCBuYW1lKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IG5hbWUudG9TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIHRhcmdldFtrZXkudG9Mb3dlckNhc2UoKV0gfHwgdGFyZ2V0W2tleV07XG4gICAgICB9LFxuICAgIH0sXG4gICk7XG59O1xuXG50eXBlIEhUVFBNZXRob2QgPSAnZ2V0JyB8ICdwb3N0JyB8ICdwdXQnIHwgJ3BhdGNoJyB8ICdkZWxldGUnO1xuXG5leHBvcnQgdHlwZSBSZXF1ZXN0Q2xpZW50ID0geyBmZXRjaDogRmV0Y2ggfTtcbmV4cG9ydCB0eXBlIEhlYWRlcnMgPSBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkPjtcbmV4cG9ydCB0eXBlIERlZmF1bHRRdWVyeSA9IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IHVuZGVmaW5lZD47XG5leHBvcnQgdHlwZSBLZXlzRW51bTxUPiA9IHsgW1AgaW4ga2V5b2YgUmVxdWlyZWQ8VD5dOiB0cnVlIH07XG5cbmV4cG9ydCB0eXBlIFJlcXVlc3RPcHRpb25zPFxuICBSZXEgPSB1bmtub3duIHwgUmVjb3JkPHN0cmluZywgdW5rbm93bj4gfCBSZWFkYWJsZSB8IEJsb2JMaWtlIHwgQXJyYXlCdWZmZXJWaWV3IHwgQXJyYXlCdWZmZXIsXG4+ID0ge1xuICBtZXRob2Q/OiBIVFRQTWV0aG9kO1xuICBwYXRoPzogc3RyaW5nO1xuICBxdWVyeT86IFJlcSB8IHVuZGVmaW5lZDtcbiAgYm9keT86IFJlcSB8IG51bGwgfCB1bmRlZmluZWQ7XG4gIGhlYWRlcnM/OiBIZWFkZXJzIHwgdW5kZWZpbmVkO1xuXG4gIG1heFJldHJpZXM/OiBudW1iZXI7XG4gIHN0cmVhbT86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG4gIHRpbWVvdXQ/OiBudW1iZXI7XG4gIGh0dHBBZ2VudD86IEFnZW50O1xuICBzaWduYWw/OiBBYm9ydFNpZ25hbCB8IHVuZGVmaW5lZCB8IG51bGw7XG4gIGlkZW1wb3RlbmN5S2V5Pzogc3RyaW5nO1xuXG4gIF9fbWV0YWRhdGE/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgX19iaW5hcnlSZXF1ZXN0PzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgX19iaW5hcnlSZXNwb25zZT86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG4gIF9fc3RyZWFtQ2xhc3M/OiB0eXBlb2YgU3RyZWFtO1xufTtcblxuLy8gVGhpcyBpcyByZXF1aXJlZCBzbyB0aGF0IHdlIGNhbiBkZXRlcm1pbmUgaWYgYSBnaXZlbiBvYmplY3QgbWF0Y2hlcyB0aGUgUmVxdWVzdE9wdGlvbnNcbi8vIHR5cGUgYXQgcnVudGltZS4gV2hpbGUgdGhpcyByZXF1aXJlcyBkdXBsaWNhdGlvbiwgaXQgaXMgZW5mb3JjZWQgYnkgdGhlIFR5cGVTY3JpcHRcbi8vIGNvbXBpbGVyIHN1Y2ggdGhhdCBhbnkgbWlzc2luZyAvIGV4dHJhbmVvdXMga2V5cyB3aWxsIGNhdXNlIGFuIGVycm9yLlxuY29uc3QgcmVxdWVzdE9wdGlvbnNLZXlzOiBLZXlzRW51bTxSZXF1ZXN0T3B0aW9ucz4gPSB7XG4gIG1ldGhvZDogdHJ1ZSxcbiAgcGF0aDogdHJ1ZSxcbiAgcXVlcnk6IHRydWUsXG4gIGJvZHk6IHRydWUsXG4gIGhlYWRlcnM6IHRydWUsXG5cbiAgbWF4UmV0cmllczogdHJ1ZSxcbiAgc3RyZWFtOiB0cnVlLFxuICB0aW1lb3V0OiB0cnVlLFxuICBodHRwQWdlbnQ6IHRydWUsXG4gIHNpZ25hbDogdHJ1ZSxcbiAgaWRlbXBvdGVuY3lLZXk6IHRydWUsXG5cbiAgX19tZXRhZGF0YTogdHJ1ZSxcbiAgX19iaW5hcnlSZXF1ZXN0OiB0cnVlLFxuICBfX2JpbmFyeVJlc3BvbnNlOiB0cnVlLFxuICBfX3N0cmVhbUNsYXNzOiB0cnVlLFxufTtcblxuZXhwb3J0IGNvbnN0IGlzUmVxdWVzdE9wdGlvbnMgPSAob2JqOiB1bmtub3duKTogb2JqIGlzIFJlcXVlc3RPcHRpb25zID0+IHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJlxuICAgIG9iaiAhPT0gbnVsbCAmJlxuICAgICFpc0VtcHR5T2JqKG9iaikgJiZcbiAgICBPYmplY3Qua2V5cyhvYmopLmV2ZXJ5KChrKSA9PiBoYXNPd24ocmVxdWVzdE9wdGlvbnNLZXlzLCBrKSlcbiAgKTtcbn07XG5cbmV4cG9ydCB0eXBlIEZpbmFsUmVxdWVzdE9wdGlvbnM8UmVxID0gdW5rbm93biB8IFJlY29yZDxzdHJpbmcsIHVua25vd24+IHwgUmVhZGFibGUgfCBEYXRhVmlldz4gPVxuICBSZXF1ZXN0T3B0aW9uczxSZXE+ICYge1xuICAgIG1ldGhvZDogSFRUUE1ldGhvZDtcbiAgICBwYXRoOiBzdHJpbmc7XG4gIH07XG5cbmRlY2xhcmUgY29uc3QgRGVubzogYW55O1xuZGVjbGFyZSBjb25zdCBFZGdlUnVudGltZTogYW55O1xudHlwZSBBcmNoID0gJ3gzMicgfCAneDY0JyB8ICdhcm0nIHwgJ2FybTY0JyB8IGBvdGhlcjoke3N0cmluZ31gIHwgJ3Vua25vd24nO1xudHlwZSBQbGF0Zm9ybU5hbWUgPVxuICB8ICdNYWNPUydcbiAgfCAnTGludXgnXG4gIHwgJ1dpbmRvd3MnXG4gIHwgJ0ZyZWVCU0QnXG4gIHwgJ09wZW5CU0QnXG4gIHwgJ2lPUydcbiAgfCAnQW5kcm9pZCdcbiAgfCBgT3RoZXI6JHtzdHJpbmd9YFxuICB8ICdVbmtub3duJztcbnR5cGUgQnJvd3NlciA9ICdpZScgfCAnZWRnZScgfCAnY2hyb21lJyB8ICdmaXJlZm94JyB8ICdzYWZhcmknO1xudHlwZSBQbGF0Zm9ybVByb3BlcnRpZXMgPSB7XG4gICdYLVN0YWlubGVzcy1MYW5nJzogJ2pzJztcbiAgJ1gtU3RhaW5sZXNzLVBhY2thZ2UtVmVyc2lvbic6IHN0cmluZztcbiAgJ1gtU3RhaW5sZXNzLU9TJzogUGxhdGZvcm1OYW1lO1xuICAnWC1TdGFpbmxlc3MtQXJjaCc6IEFyY2g7XG4gICdYLVN0YWlubGVzcy1SdW50aW1lJzogJ25vZGUnIHwgJ2Rlbm8nIHwgJ2VkZ2UnIHwgYGJyb3dzZXI6JHtCcm93c2VyfWAgfCAndW5rbm93bic7XG4gICdYLVN0YWlubGVzcy1SdW50aW1lLVZlcnNpb24nOiBzdHJpbmc7XG59O1xuY29uc3QgZ2V0UGxhdGZvcm1Qcm9wZXJ0aWVzID0gKCk6IFBsYXRmb3JtUHJvcGVydGllcyA9PiB7XG4gIGlmICh0eXBlb2YgRGVubyAhPT0gJ3VuZGVmaW5lZCcgJiYgRGVuby5idWlsZCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICdYLVN0YWlubGVzcy1MYW5nJzogJ2pzJyxcbiAgICAgICdYLVN0YWlubGVzcy1QYWNrYWdlLVZlcnNpb24nOiBWRVJTSU9OLFxuICAgICAgJ1gtU3RhaW5sZXNzLU9TJzogbm9ybWFsaXplUGxhdGZvcm0oRGVuby5idWlsZC5vcyksXG4gICAgICAnWC1TdGFpbmxlc3MtQXJjaCc6IG5vcm1hbGl6ZUFyY2goRGVuby5idWlsZC5hcmNoKSxcbiAgICAgICdYLVN0YWlubGVzcy1SdW50aW1lJzogJ2Rlbm8nLFxuICAgICAgJ1gtU3RhaW5sZXNzLVJ1bnRpbWUtVmVyc2lvbic6XG4gICAgICAgIHR5cGVvZiBEZW5vLnZlcnNpb24gPT09ICdzdHJpbmcnID8gRGVuby52ZXJzaW9uIDogRGVuby52ZXJzaW9uPy5kZW5vID8/ICd1bmtub3duJyxcbiAgICB9O1xuICB9XG4gIGlmICh0eXBlb2YgRWRnZVJ1bnRpbWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICdYLVN0YWlubGVzcy1MYW5nJzogJ2pzJyxcbiAgICAgICdYLVN0YWlubGVzcy1QYWNrYWdlLVZlcnNpb24nOiBWRVJTSU9OLFxuICAgICAgJ1gtU3RhaW5sZXNzLU9TJzogJ1Vua25vd24nLFxuICAgICAgJ1gtU3RhaW5sZXNzLUFyY2gnOiBgb3RoZXI6JHtFZGdlUnVudGltZX1gLFxuICAgICAgJ1gtU3RhaW5sZXNzLVJ1bnRpbWUnOiAnZWRnZScsXG4gICAgICAnWC1TdGFpbmxlc3MtUnVudGltZS1WZXJzaW9uJzogcHJvY2Vzcy52ZXJzaW9uLFxuICAgIH07XG4gIH1cbiAgLy8gQ2hlY2sgaWYgTm9kZS5qc1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyA/IHByb2Nlc3MgOiAwKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICdYLVN0YWlubGVzcy1MYW5nJzogJ2pzJyxcbiAgICAgICdYLVN0YWlubGVzcy1QYWNrYWdlLVZlcnNpb24nOiBWRVJTSU9OLFxuICAgICAgJ1gtU3RhaW5sZXNzLU9TJzogbm9ybWFsaXplUGxhdGZvcm0ocHJvY2Vzcy5wbGF0Zm9ybSksXG4gICAgICAnWC1TdGFpbmxlc3MtQXJjaCc6IG5vcm1hbGl6ZUFyY2gocHJvY2Vzcy5hcmNoKSxcbiAgICAgICdYLVN0YWlubGVzcy1SdW50aW1lJzogJ25vZGUnLFxuICAgICAgJ1gtU3RhaW5sZXNzLVJ1bnRpbWUtVmVyc2lvbic6IHByb2Nlc3MudmVyc2lvbixcbiAgICB9O1xuICB9XG5cbiAgY29uc3QgYnJvd3NlckluZm8gPSBnZXRCcm93c2VySW5mbygpO1xuICBpZiAoYnJvd3NlckluZm8pIHtcbiAgICByZXR1cm4ge1xuICAgICAgJ1gtU3RhaW5sZXNzLUxhbmcnOiAnanMnLFxuICAgICAgJ1gtU3RhaW5sZXNzLVBhY2thZ2UtVmVyc2lvbic6IFZFUlNJT04sXG4gICAgICAnWC1TdGFpbmxlc3MtT1MnOiAnVW5rbm93bicsXG4gICAgICAnWC1TdGFpbmxlc3MtQXJjaCc6ICd1bmtub3duJyxcbiAgICAgICdYLVN0YWlubGVzcy1SdW50aW1lJzogYGJyb3dzZXI6JHticm93c2VySW5mby5icm93c2VyfWAsXG4gICAgICAnWC1TdGFpbmxlc3MtUnVudGltZS1WZXJzaW9uJzogYnJvd3NlckluZm8udmVyc2lvbixcbiAgICB9O1xuICB9XG5cbiAgLy8gVE9ETyBhZGQgc3VwcG9ydCBmb3IgQ2xvdWRmbGFyZSB3b3JrZXJzLCBldGMuXG4gIHJldHVybiB7XG4gICAgJ1gtU3RhaW5sZXNzLUxhbmcnOiAnanMnLFxuICAgICdYLVN0YWlubGVzcy1QYWNrYWdlLVZlcnNpb24nOiBWRVJTSU9OLFxuICAgICdYLVN0YWlubGVzcy1PUyc6ICdVbmtub3duJyxcbiAgICAnWC1TdGFpbmxlc3MtQXJjaCc6ICd1bmtub3duJyxcbiAgICAnWC1TdGFpbmxlc3MtUnVudGltZSc6ICd1bmtub3duJyxcbiAgICAnWC1TdGFpbmxlc3MtUnVudGltZS1WZXJzaW9uJzogJ3Vua25vd24nLFxuICB9O1xufTtcblxudHlwZSBCcm93c2VySW5mbyA9IHtcbiAgYnJvd3NlcjogQnJvd3NlcjtcbiAgdmVyc2lvbjogc3RyaW5nO1xufTtcblxuZGVjbGFyZSBjb25zdCBuYXZpZ2F0b3I6IHsgdXNlckFnZW50OiBzdHJpbmcgfSB8IHVuZGVmaW5lZDtcblxuLy8gTm90ZTogbW9kaWZpZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vSlMtRGV2VG9vbHMvaG9zdC1lbnZpcm9ubWVudC9ibG9iL2IxYWI3OWVjZGUzN2RiNWQ2ZTE2M2MwNTBlNTRmZTdkMjg3ZDdjOTIvc3JjL2lzb21vcnBoaWMuYnJvd3Nlci50c1xuZnVuY3Rpb24gZ2V0QnJvd3NlckluZm8oKTogQnJvd3NlckluZm8gfCBudWxsIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICd1bmRlZmluZWQnIHx8ICFuYXZpZ2F0b3IpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIE5PVEU6IFRoZSBvcmRlciBtYXR0ZXJzIGhlcmUhXG4gIGNvbnN0IGJyb3dzZXJQYXR0ZXJucyA9IFtcbiAgICB7IGtleTogJ2VkZ2UnIGFzIGNvbnN0LCBwYXR0ZXJuOiAvRWRnZSg/OlxcVysoXFxkKylcXC4oXFxkKykoPzpcXC4oXFxkKykpPyk/LyB9LFxuICAgIHsga2V5OiAnaWUnIGFzIGNvbnN0LCBwYXR0ZXJuOiAvTVNJRSg/OlxcVysoXFxkKylcXC4oXFxkKykoPzpcXC4oXFxkKykpPyk/LyB9LFxuICAgIHsga2V5OiAnaWUnIGFzIGNvbnN0LCBwYXR0ZXJuOiAvVHJpZGVudCg/Oi4qcnZcXDooXFxkKylcXC4oXFxkKykoPzpcXC4oXFxkKykpPyk/LyB9LFxuICAgIHsga2V5OiAnY2hyb21lJyBhcyBjb25zdCwgcGF0dGVybjogL0Nocm9tZSg/OlxcVysoXFxkKylcXC4oXFxkKykoPzpcXC4oXFxkKykpPyk/LyB9LFxuICAgIHsga2V5OiAnZmlyZWZveCcgYXMgY29uc3QsIHBhdHRlcm46IC9GaXJlZm94KD86XFxXKyhcXGQrKVxcLihcXGQrKSg/OlxcLihcXGQrKSk/KT8vIH0sXG4gICAgeyBrZXk6ICdzYWZhcmknIGFzIGNvbnN0LCBwYXR0ZXJuOiAvKD86VmVyc2lvblxcVysoXFxkKylcXC4oXFxkKykoPzpcXC4oXFxkKykpPyk/KD86XFxXK01vYmlsZVxcUyopP1xcVytTYWZhcmkvIH0sXG4gIF07XG5cbiAgLy8gRmluZCB0aGUgRklSU1QgbWF0Y2hpbmcgYnJvd3NlclxuICBmb3IgKGNvbnN0IHsga2V5LCBwYXR0ZXJuIH0gb2YgYnJvd3NlclBhdHRlcm5zKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBwYXR0ZXJuLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBjb25zdCBtYWpvciA9IG1hdGNoWzFdIHx8IDA7XG4gICAgICBjb25zdCBtaW5vciA9IG1hdGNoWzJdIHx8IDA7XG4gICAgICBjb25zdCBwYXRjaCA9IG1hdGNoWzNdIHx8IDA7XG5cbiAgICAgIHJldHVybiB7IGJyb3dzZXI6IGtleSwgdmVyc2lvbjogYCR7bWFqb3J9LiR7bWlub3J9LiR7cGF0Y2h9YCB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5jb25zdCBub3JtYWxpemVBcmNoID0gKGFyY2g6IHN0cmluZyk6IEFyY2ggPT4ge1xuICAvLyBOb2RlIGRvY3M6XG4gIC8vIC0gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9wcm9jZXNzLmh0bWwjcHJvY2Vzc2FyY2hcbiAgLy8gRGVubyBkb2NzOlxuICAvLyAtIGh0dHBzOi8vZG9jLmRlbm8ubGFuZC9kZW5vL3N0YWJsZS9+L0Rlbm8uYnVpbGRcbiAgaWYgKGFyY2ggPT09ICd4MzInKSByZXR1cm4gJ3gzMic7XG4gIGlmIChhcmNoID09PSAneDg2XzY0JyB8fCBhcmNoID09PSAneDY0JykgcmV0dXJuICd4NjQnO1xuICBpZiAoYXJjaCA9PT0gJ2FybScpIHJldHVybiAnYXJtJztcbiAgaWYgKGFyY2ggPT09ICdhYXJjaDY0JyB8fCBhcmNoID09PSAnYXJtNjQnKSByZXR1cm4gJ2FybTY0JztcbiAgaWYgKGFyY2gpIHJldHVybiBgb3RoZXI6JHthcmNofWA7XG4gIHJldHVybiAndW5rbm93bic7XG59O1xuXG5jb25zdCBub3JtYWxpemVQbGF0Zm9ybSA9IChwbGF0Zm9ybTogc3RyaW5nKTogUGxhdGZvcm1OYW1lID0+IHtcbiAgLy8gTm9kZSBwbGF0Zm9ybXM6XG4gIC8vIC0gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9wcm9jZXNzLmh0bWwjcHJvY2Vzc3BsYXRmb3JtXG4gIC8vIERlbm8gcGxhdGZvcm1zOlxuICAvLyAtIGh0dHBzOi8vZG9jLmRlbm8ubGFuZC9kZW5vL3N0YWJsZS9+L0Rlbm8uYnVpbGRcbiAgLy8gLSBodHRwczovL2dpdGh1Yi5jb20vZGVub2xhbmQvZGVuby9pc3N1ZXMvMTQ3OTlcblxuICBwbGF0Zm9ybSA9IHBsYXRmb3JtLnRvTG93ZXJDYXNlKCk7XG5cbiAgLy8gTk9URTogdGhpcyBpT1MgY2hlY2sgaXMgdW50ZXN0ZWQgYW5kIG1heSBub3Qgd29ya1xuICAvLyBOb2RlIGRvZXMgbm90IHdvcmsgbmF0aXZlbHkgb24gSU9TLCB0aGVyZSBpcyBhIGZvcmsgYXRcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy1tb2JpbGUvbm9kZWpzLW1vYmlsZVxuICAvLyBob3dldmVyIGl0IGlzIHVua25vd24gYXQgdGhlIHRpbWUgb2Ygd3JpdGluZyBob3cgdG8gZGV0ZWN0IGlmIGl0IGlzIHJ1bm5pbmdcbiAgaWYgKHBsYXRmb3JtLmluY2x1ZGVzKCdpb3MnKSkgcmV0dXJuICdpT1MnO1xuICBpZiAocGxhdGZvcm0gPT09ICdhbmRyb2lkJykgcmV0dXJuICdBbmRyb2lkJztcbiAgaWYgKHBsYXRmb3JtID09PSAnZGFyd2luJykgcmV0dXJuICdNYWNPUyc7XG4gIGlmIChwbGF0Zm9ybSA9PT0gJ3dpbjMyJykgcmV0dXJuICdXaW5kb3dzJztcbiAgaWYgKHBsYXRmb3JtID09PSAnZnJlZWJzZCcpIHJldHVybiAnRnJlZUJTRCc7XG4gIGlmIChwbGF0Zm9ybSA9PT0gJ29wZW5ic2QnKSByZXR1cm4gJ09wZW5CU0QnO1xuICBpZiAocGxhdGZvcm0gPT09ICdsaW51eCcpIHJldHVybiAnTGludXgnO1xuICBpZiAocGxhdGZvcm0pIHJldHVybiBgT3RoZXI6JHtwbGF0Zm9ybX1gO1xuICByZXR1cm4gJ1Vua25vd24nO1xufTtcblxubGV0IF9wbGF0Zm9ybUhlYWRlcnM6IFBsYXRmb3JtUHJvcGVydGllcztcbmNvbnN0IGdldFBsYXRmb3JtSGVhZGVycyA9ICgpID0+IHtcbiAgcmV0dXJuIChfcGxhdGZvcm1IZWFkZXJzID8/PSBnZXRQbGF0Zm9ybVByb3BlcnRpZXMoKSk7XG59O1xuXG5leHBvcnQgY29uc3Qgc2FmZUpTT04gPSAodGV4dDogc3RyaW5nKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UodGV4dCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsLXNjaGVtZS1zdHJpbmdcbmNvbnN0IHN0YXJ0c1dpdGhTY2hlbWVSZWdleHAgPSAvXlthLXpdW2EtejAtOSsuLV0qOi9pO1xuY29uc3QgaXNBYnNvbHV0ZVVSTCA9ICh1cmw6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICByZXR1cm4gc3RhcnRzV2l0aFNjaGVtZVJlZ2V4cC50ZXN0KHVybCk7XG59O1xuXG5leHBvcnQgY29uc3Qgc2xlZXAgPSAobXM6IG51bWJlcikgPT4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcblxuY29uc3QgdmFsaWRhdGVQb3NpdGl2ZUludGVnZXIgPSAobmFtZTogc3RyaW5nLCBuOiB1bmtub3duKTogbnVtYmVyID0+IHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCAhTnVtYmVyLmlzSW50ZWdlcihuKSkge1xuICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihgJHtuYW1lfSBtdXN0IGJlIGFuIGludGVnZXJgKTtcbiAgfVxuICBpZiAobiA8IDApIHtcbiAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYCR7bmFtZX0gbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXJgKTtcbiAgfVxuICByZXR1cm4gbjtcbn07XG5cbmV4cG9ydCBjb25zdCBjYXN0VG9FcnJvciA9IChlcnI6IGFueSk6IEVycm9yID0+IHtcbiAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gZXJyO1xuICBpZiAodHlwZW9mIGVyciA9PT0gJ29iamVjdCcgJiYgZXJyICE9PSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoSlNPTi5zdHJpbmdpZnkoZXJyKSk7XG4gICAgfSBjYXRjaCB7fVxuICB9XG4gIHJldHVybiBuZXcgRXJyb3IoZXJyKTtcbn07XG5cbmV4cG9ydCBjb25zdCBlbnN1cmVQcmVzZW50ID0gPFQ+KHZhbHVlOiBUIHwgbnVsbCB8IHVuZGVmaW5lZCk6IFQgPT4ge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBFeHBlY3RlZCBhIHZhbHVlIHRvIGJlIGdpdmVuIGJ1dCByZWNlaXZlZCAke3ZhbHVlfSBpbnN0ZWFkLmApO1xuICByZXR1cm4gdmFsdWU7XG59O1xuXG4vKipcbiAqIFJlYWQgYW4gZW52aXJvbm1lbnQgdmFyaWFibGUuXG4gKlxuICogVHJpbXMgYmVnaW5uaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLlxuICpcbiAqIFdpbGwgcmV0dXJuIHVuZGVmaW5lZCBpZiB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUgZG9lc24ndCBleGlzdCBvciBjYW5ub3QgYmUgYWNjZXNzZWQuXG4gKi9cbmV4cG9ydCBjb25zdCByZWFkRW52ID0gKGVudjogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkID0+IHtcbiAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBwcm9jZXNzLmVudj8uW2Vudl0/LnRyaW0oKSA/PyB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBEZW5vICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBEZW5vLmVudj8uZ2V0Py4oZW52KT8udHJpbSgpO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgY29uc3QgY29lcmNlSW50ZWdlciA9ICh2YWx1ZTogdW5rbm93bik6IG51bWJlciA9PiB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSk7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcblxuICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYENvdWxkIG5vdCBjb2VyY2UgJHt2YWx1ZX0gKHR5cGU6ICR7dHlwZW9mIHZhbHVlfSkgaW50byBhIG51bWJlcmApO1xufTtcblxuZXhwb3J0IGNvbnN0IGNvZXJjZUZsb2F0ID0gKHZhbHVlOiB1bmtub3duKTogbnVtYmVyID0+IHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHJldHVybiB2YWx1ZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcblxuICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYENvdWxkIG5vdCBjb2VyY2UgJHt2YWx1ZX0gKHR5cGU6ICR7dHlwZW9mIHZhbHVlfSkgaW50byBhIG51bWJlcmApO1xufTtcblxuZXhwb3J0IGNvbnN0IGNvZXJjZUJvb2xlYW4gPSAodmFsdWU6IHVua25vd24pOiBib29sZWFuID0+IHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gdmFsdWU7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSByZXR1cm4gdmFsdWUgPT09ICd0cnVlJztcbiAgcmV0dXJuIEJvb2xlYW4odmFsdWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IG1heWJlQ29lcmNlSW50ZWdlciA9ICh2YWx1ZTogdW5rbm93bik6IG51bWJlciB8IHVuZGVmaW5lZCA9PiB7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gY29lcmNlSW50ZWdlcih2YWx1ZSk7XG59O1xuXG5leHBvcnQgY29uc3QgbWF5YmVDb2VyY2VGbG9hdCA9ICh2YWx1ZTogdW5rbm93bik6IG51bWJlciB8IHVuZGVmaW5lZCA9PiB7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gY29lcmNlRmxvYXQodmFsdWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IG1heWJlQ29lcmNlQm9vbGVhbiA9ICh2YWx1ZTogdW5rbm93bik6IGJvb2xlYW4gfCB1bmRlZmluZWQgPT4ge1xuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIGNvZXJjZUJvb2xlYW4odmFsdWUpO1xufTtcblxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM0NDkxMjg3XG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eU9iaihvYmo6IE9iamVjdCB8IG51bGwgfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgaWYgKCFvYmopIHJldHVybiB0cnVlO1xuICBmb3IgKGNvbnN0IF9rIGluIG9iaikgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gaHR0cHM6Ly9lc2xpbnQub3JnL2RvY3MvbGF0ZXN0L3J1bGVzL25vLXByb3RvdHlwZS1idWlsdGluc1xuZXhwb3J0IGZ1bmN0aW9uIGhhc093bihvYmo6IE9iamVjdCwga2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59XG5cbi8qKlxuICogQ29waWVzIGhlYWRlcnMgZnJvbSBcIm5ld0hlYWRlcnNcIiBvbnRvIFwidGFyZ2V0SGVhZGVyc1wiLFxuICogdXNpbmcgbG93ZXItY2FzZSBmb3IgYWxsIHByb3BlcnRpZXMsXG4gKiBpZ25vcmluZyBhbnkga2V5cyB3aXRoIHVuZGVmaW5lZCB2YWx1ZXMsXG4gKiBhbmQgZGVsZXRpbmcgYW55IGtleXMgd2l0aCBudWxsIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gYXBwbHlIZWFkZXJzTXV0KHRhcmdldEhlYWRlcnM6IEhlYWRlcnMsIG5ld0hlYWRlcnM6IEhlYWRlcnMpOiB2b2lkIHtcbiAgZm9yIChjb25zdCBrIGluIG5ld0hlYWRlcnMpIHtcbiAgICBpZiAoIWhhc093bihuZXdIZWFkZXJzLCBrKSkgY29udGludWU7XG4gICAgY29uc3QgbG93ZXJLZXkgPSBrLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKCFsb3dlcktleSkgY29udGludWU7XG5cbiAgICBjb25zdCB2YWwgPSBuZXdIZWFkZXJzW2tdO1xuXG4gICAgaWYgKHZhbCA9PT0gbnVsbCkge1xuICAgICAgZGVsZXRlIHRhcmdldEhlYWRlcnNbbG93ZXJLZXldO1xuICAgIH0gZWxzZSBpZiAodmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRhcmdldEhlYWRlcnNbbG93ZXJLZXldID0gdmFsO1xuICAgIH1cbiAgfVxufVxuXG5jb25zdCBTRU5TSVRJVkVfSEVBREVSUyA9IG5ldyBTZXQoWydhdXRob3JpemF0aW9uJywgJ2FwaS1rZXknXSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWJ1ZyhhY3Rpb246IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcbiAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzPy5lbnY/LlsnREVCVUcnXSA9PT0gJ3RydWUnKSB7XG4gICAgY29uc3QgbW9kaWZpZWRBcmdzID0gYXJncy5tYXAoKGFyZykgPT4ge1xuICAgICAgaWYgKCFhcmcpIHtcbiAgICAgICAgcmV0dXJuIGFyZztcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgZm9yIHNlbnNpdGl2ZSBoZWFkZXJzIGluIHJlcXVlc3QgYm9keSAnaGVhZGVycycgb2JqZWN0XG4gICAgICBpZiAoYXJnWydoZWFkZXJzJ10pIHtcbiAgICAgICAgLy8gY2xvbmUgc28gd2UgZG9uJ3QgbXV0YXRlXG4gICAgICAgIGNvbnN0IG1vZGlmaWVkQXJnID0geyAuLi5hcmcsIGhlYWRlcnM6IHsgLi4uYXJnWydoZWFkZXJzJ10gfSB9O1xuXG4gICAgICAgIGZvciAoY29uc3QgaGVhZGVyIGluIGFyZ1snaGVhZGVycyddKSB7XG4gICAgICAgICAgaWYgKFNFTlNJVElWRV9IRUFERVJTLmhhcyhoZWFkZXIudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgIG1vZGlmaWVkQXJnWydoZWFkZXJzJ11baGVhZGVyXSA9ICdSRURBQ1RFRCc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1vZGlmaWVkQXJnO1xuICAgICAgfVxuXG4gICAgICBsZXQgbW9kaWZpZWRBcmcgPSBudWxsO1xuXG4gICAgICAvLyBDaGVjayBmb3Igc2Vuc2l0aXZlIGhlYWRlcnMgaW4gaGVhZGVycyBvYmplY3RcbiAgICAgIGZvciAoY29uc3QgaGVhZGVyIGluIGFyZykge1xuICAgICAgICBpZiAoU0VOU0lUSVZFX0hFQURFUlMuaGFzKGhlYWRlci50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgIC8vIGF2b2lkIG1ha2luZyBhIGNvcHkgdW50aWwgd2UgbmVlZCB0b1xuICAgICAgICAgIG1vZGlmaWVkQXJnID8/PSB7IC4uLmFyZyB9O1xuICAgICAgICAgIG1vZGlmaWVkQXJnW2hlYWRlcl0gPSAnUkVEQUNURUQnO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtb2RpZmllZEFyZyA/PyBhcmc7XG4gICAgfSk7XG4gICAgY29uc29sZS5sb2coYE9wZW5BSTpERUJVRzoke2FjdGlvbn1gLCAuLi5tb2RpZmllZEFyZ3MpO1xuICB9XG59XG5cbi8qKlxuICogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIxMTc1MjNcbiAqL1xuY29uc3QgdXVpZDQgPSAoKSA9PiB7XG4gIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIChjKSA9PiB7XG4gICAgY29uc3QgciA9IChNYXRoLnJhbmRvbSgpICogMTYpIHwgMDtcbiAgICBjb25zdCB2ID0gYyA9PT0gJ3gnID8gciA6IChyICYgMHgzKSB8IDB4ODtcbiAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzUnVubmluZ0luQnJvd3NlciA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGVhZGVyc1Byb3RvY29sIHtcbiAgZ2V0OiAoaGVhZGVyOiBzdHJpbmcpID0+IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQ7XG59XG5leHBvcnQgdHlwZSBIZWFkZXJzTGlrZSA9IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IHN0cmluZ1tdIHwgdW5kZWZpbmVkPiB8IEhlYWRlcnNQcm90b2NvbDtcblxuZXhwb3J0IGNvbnN0IGlzSGVhZGVyc1Byb3RvY29sID0gKGhlYWRlcnM6IGFueSk6IGhlYWRlcnMgaXMgSGVhZGVyc1Byb3RvY29sID0+IHtcbiAgcmV0dXJuIHR5cGVvZiBoZWFkZXJzPy5nZXQgPT09ICdmdW5jdGlvbic7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UmVxdWlyZWRIZWFkZXIgPSAoaGVhZGVyczogSGVhZGVyc0xpa2UgfCBIZWFkZXJzLCBoZWFkZXI6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIGNvbnN0IGZvdW5kSGVhZGVyID0gZ2V0SGVhZGVyKGhlYWRlcnMsIGhlYWRlcik7XG4gIGlmIChmb3VuZEhlYWRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCAke2hlYWRlcn0gaGVhZGVyYCk7XG4gIH1cbiAgcmV0dXJuIGZvdW5kSGVhZGVyO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEhlYWRlciA9IChoZWFkZXJzOiBIZWFkZXJzTGlrZSB8IEhlYWRlcnMsIGhlYWRlcjogc3RyaW5nKTogc3RyaW5nIHwgdW5kZWZpbmVkID0+IHtcbiAgY29uc3QgbG93ZXJDYXNlZEhlYWRlciA9IGhlYWRlci50b0xvd2VyQ2FzZSgpO1xuICBpZiAoaXNIZWFkZXJzUHJvdG9jb2woaGVhZGVycykpIHtcbiAgICAvLyB0byBkZWFsIHdpdGggdGhlIGNhc2Ugd2hlcmUgdGhlIGhlYWRlciBsb29rcyBsaWtlIFN0YWlubGVzcy1FdmVudC1JZFxuICAgIGNvbnN0IGludGVyY2Fwc0hlYWRlciA9XG4gICAgICBoZWFkZXJbMF0/LnRvVXBwZXJDYXNlKCkgK1xuICAgICAgaGVhZGVyLnN1YnN0cmluZygxKS5yZXBsYWNlKC8oW15cXHddKShcXHcpL2csIChfbSwgZzEsIGcyKSA9PiBnMSArIGcyLnRvVXBwZXJDYXNlKCkpO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIFtoZWFkZXIsIGxvd2VyQ2FzZWRIZWFkZXIsIGhlYWRlci50b1VwcGVyQ2FzZSgpLCBpbnRlcmNhcHNIZWFkZXJdKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGhlYWRlcnMuZ2V0KGtleSk7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGhlYWRlcnMpKSB7XG4gICAgaWYgKGtleS50b0xvd2VyQ2FzZSgpID09PSBsb3dlckNhc2VkSGVhZGVyKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA8PSAxKSByZXR1cm4gdmFsdWVbMF07XG4gICAgICAgIGNvbnNvbGUud2FybihgUmVjZWl2ZWQgJHt2YWx1ZS5sZW5ndGh9IGVudHJpZXMgZm9yIHRoZSAke2hlYWRlcn0gaGVhZGVyLCB1c2luZyB0aGUgZmlyc3QgZW50cnkuYCk7XG4gICAgICAgIHJldHVybiB2YWx1ZVswXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuLyoqXG4gKiBFbmNvZGVzIGEgc3RyaW5nIHRvIEJhc2U2NCBmb3JtYXQuXG4gKi9cbmV4cG9ydCBjb25zdCB0b0Jhc2U2NCA9IChzdHI6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQpOiBzdHJpbmcgPT4ge1xuICBpZiAoIXN0cikgcmV0dXJuICcnO1xuICBpZiAodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oc3RyKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGJ0b2Eoc3RyKTtcbiAgfVxuXG4gIHRocm93IG5ldyBPcGVuQUlFcnJvcignQ2Fubm90IGdlbmVyYXRlIGI2NCBzdHJpbmc7IEV4cGVjdGVkIGBCdWZmZXJgIG9yIGBidG9hYCB0byBiZSBkZWZpbmVkJyk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgQmFzZTY0IGVuY29kZWQgc3RyaW5nIHRvIGEgRmxvYXQzMkFycmF5LlxuICogQHBhcmFtIGJhc2U2NFN0ciAtIFRoZSBCYXNlNjQgZW5jb2RlZCBzdHJpbmcuXG4gKiBAcmV0dXJucyBBbiBBcnJheSBvZiBudW1iZXJzIGludGVycHJldGVkIGFzIEZsb2F0MzIgdmFsdWVzLlxuICovXG5leHBvcnQgY29uc3QgdG9GbG9hdDMyQXJyYXkgPSAoYmFzZTY0U3RyOiBzdHJpbmcpOiBBcnJheTxudW1iZXI+ID0+IHtcbiAgaWYgKHR5cGVvZiBCdWZmZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gZm9yIE5vZGUuanMgZW52aXJvbm1lbnRcbiAgICBjb25zdCBidWYgPSBCdWZmZXIuZnJvbShiYXNlNjRTdHIsICdiYXNlNjQnKTtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShcbiAgICAgIG5ldyBGbG9hdDMyQXJyYXkoYnVmLmJ1ZmZlciwgYnVmLmJ5dGVPZmZzZXQsIGJ1Zi5sZW5ndGggLyBGbG9hdDMyQXJyYXkuQllURVNfUEVSX0VMRU1FTlQpLFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gZm9yIGxlZ2FjeSB3ZWIgcGxhdGZvcm0gQVBJc1xuICAgIGNvbnN0IGJpbmFyeVN0ciA9IGF0b2IoYmFzZTY0U3RyKTtcbiAgICBjb25zdCBsZW4gPSBiaW5hcnlTdHIubGVuZ3RoO1xuICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkobGVuKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBieXRlc1tpXSA9IGJpbmFyeVN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgICByZXR1cm4gQXJyYXkuZnJvbShuZXcgRmxvYXQzMkFycmF5KGJ5dGVzLmJ1ZmZlcikpO1xuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gaXNPYmoob2JqOiB1bmtub3duKTogb2JqIGlzIFJlY29yZDxzdHJpbmcsIHVua25vd24+IHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KG9iaik7XG59XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQWJzdHJhY3RQYWdlLCBSZXNwb25zZSwgQVBJQ2xpZW50LCBGaW5hbFJlcXVlc3RPcHRpb25zLCBQYWdlSW5mbyB9IGZyb20gJy4vY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFnZVJlc3BvbnNlPEl0ZW0+IHtcbiAgZGF0YTogQXJyYXk8SXRlbT47XG5cbiAgb2JqZWN0OiBzdHJpbmc7XG59XG5cbi8qKlxuICogTm90ZTogbm8gcGFnaW5hdGlvbiBhY3R1YWxseSBvY2N1cnMgeWV0LCB0aGlzIGlzIGZvciBmb3J3YXJkcy1jb21wYXRpYmlsaXR5LlxuICovXG5leHBvcnQgY2xhc3MgUGFnZTxJdGVtPiBleHRlbmRzIEFic3RyYWN0UGFnZTxJdGVtPiBpbXBsZW1lbnRzIFBhZ2VSZXNwb25zZTxJdGVtPiB7XG4gIGRhdGE6IEFycmF5PEl0ZW0+O1xuXG4gIG9iamVjdDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGNsaWVudDogQVBJQ2xpZW50LCByZXNwb25zZTogUmVzcG9uc2UsIGJvZHk6IFBhZ2VSZXNwb25zZTxJdGVtPiwgb3B0aW9uczogRmluYWxSZXF1ZXN0T3B0aW9ucykge1xuICAgIHN1cGVyKGNsaWVudCwgcmVzcG9uc2UsIGJvZHksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5kYXRhID0gYm9keS5kYXRhIHx8IFtdO1xuICAgIHRoaXMub2JqZWN0ID0gYm9keS5vYmplY3Q7XG4gIH1cblxuICBnZXRQYWdpbmF0ZWRJdGVtcygpOiBJdGVtW10ge1xuICAgIHJldHVybiB0aGlzLmRhdGEgPz8gW107XG4gIH1cblxuICAvLyBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGBuZXh0UGFnZUluZm8oKWAgaW5zdGVhZFxuICAvKipcbiAgICogVGhpcyBwYWdlIHJlcHJlc2VudHMgYSByZXNwb25zZSB0aGF0IGlzbid0IGFjdHVhbGx5IHBhZ2luYXRlZCBhdCB0aGUgQVBJIGxldmVsXG4gICAqIHNvIHRoZXJlIHdpbGwgbmV2ZXIgYmUgYW55IG5leHQgcGFnZSBwYXJhbXMuXG4gICAqL1xuICBuZXh0UGFnZVBhcmFtcygpOiBudWxsIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIG5leHRQYWdlSW5mbygpOiBudWxsIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEN1cnNvclBhZ2VSZXNwb25zZTxJdGVtPiB7XG4gIGRhdGE6IEFycmF5PEl0ZW0+O1xuXG4gIGhhc19tb3JlOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEN1cnNvclBhZ2VQYXJhbXMge1xuICBhZnRlcj86IHN0cmluZztcblxuICBsaW1pdD86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIEN1cnNvclBhZ2U8SXRlbSBleHRlbmRzIHsgaWQ6IHN0cmluZyB9PlxuICBleHRlbmRzIEFic3RyYWN0UGFnZTxJdGVtPlxuICBpbXBsZW1lbnRzIEN1cnNvclBhZ2VSZXNwb25zZTxJdGVtPlxue1xuICBkYXRhOiBBcnJheTxJdGVtPjtcblxuICBoYXNfbW9yZTogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBjbGllbnQ6IEFQSUNsaWVudCxcbiAgICByZXNwb25zZTogUmVzcG9uc2UsXG4gICAgYm9keTogQ3Vyc29yUGFnZVJlc3BvbnNlPEl0ZW0+LFxuICAgIG9wdGlvbnM6IEZpbmFsUmVxdWVzdE9wdGlvbnMsXG4gICkge1xuICAgIHN1cGVyKGNsaWVudCwgcmVzcG9uc2UsIGJvZHksIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5kYXRhID0gYm9keS5kYXRhIHx8IFtdO1xuICAgIHRoaXMuaGFzX21vcmUgPSBib2R5Lmhhc19tb3JlIHx8IGZhbHNlO1xuICB9XG5cbiAgZ2V0UGFnaW5hdGVkSXRlbXMoKTogSXRlbVtdIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhID8/IFtdO1xuICB9XG5cbiAgb3ZlcnJpZGUgaGFzTmV4dFBhZ2UoKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuaGFzX21vcmUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1cGVyLmhhc05leHRQYWdlKCk7XG4gIH1cblxuICAvLyBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGBuZXh0UGFnZUluZm8oKWAgaW5zdGVhZFxuICBuZXh0UGFnZVBhcmFtcygpOiBQYXJ0aWFsPEN1cnNvclBhZ2VQYXJhbXM+IHwgbnVsbCB7XG4gICAgY29uc3QgaW5mbyA9IHRoaXMubmV4dFBhZ2VJbmZvKCk7XG4gICAgaWYgKCFpbmZvKSByZXR1cm4gbnVsbDtcbiAgICBpZiAoJ3BhcmFtcycgaW4gaW5mbykgcmV0dXJuIGluZm8ucGFyYW1zO1xuICAgIGNvbnN0IHBhcmFtcyA9IE9iamVjdC5mcm9tRW50cmllcyhpbmZvLnVybC5zZWFyY2hQYXJhbXMpO1xuICAgIGlmICghT2JqZWN0LmtleXMocGFyYW1zKS5sZW5ndGgpIHJldHVybiBudWxsO1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cblxuICBuZXh0UGFnZUluZm8oKTogUGFnZUluZm8gfCBudWxsIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5nZXRQYWdpbmF0ZWRJdGVtcygpO1xuICAgIGlmICghZGF0YS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGlkID0gZGF0YVtkYXRhLmxlbmd0aCAtIDFdPy5pZDtcbiAgICBpZiAoIWlkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4geyBwYXJhbXM6IHsgYWZ0ZXI6IGlkIH0gfTtcbiAgfVxufVxuIiwgIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5cbmltcG9ydCB0eXBlIHsgT3BlbkFJIH0gZnJvbSAnLi9pbmRleCc7XG5cbmV4cG9ydCBjbGFzcyBBUElSZXNvdXJjZSB7XG4gIHByb3RlY3RlZCBfY2xpZW50OiBPcGVuQUk7XG5cbiAgY29uc3RydWN0b3IoY2xpZW50OiBPcGVuQUkpIHtcbiAgICB0aGlzLl9jbGllbnQgPSBjbGllbnQ7XG4gIH1cbn1cbiIsICIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJy4uLy4uLy4uL3Jlc291cmNlJztcbmltcG9ydCB7IGlzUmVxdWVzdE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9jb3JlJztcbmltcG9ydCAqIGFzIENvcmUgZnJvbSAnLi4vLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyBDb21wbGV0aW9uc0FQSSBmcm9tICcuL2NvbXBsZXRpb25zJztcbmltcG9ydCB7IENoYXRDb21wbGV0aW9uU3RvcmVNZXNzYWdlc1BhZ2UgfSBmcm9tICcuL2NvbXBsZXRpb25zJztcbmltcG9ydCB7IHR5cGUgQ3Vyc29yUGFnZVBhcmFtcyB9IGZyb20gJy4uLy4uLy4uL3BhZ2luYXRpb24nO1xuXG5leHBvcnQgY2xhc3MgTWVzc2FnZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBHZXQgdGhlIG1lc3NhZ2VzIGluIGEgc3RvcmVkIGNoYXQgY29tcGxldGlvbi4gT25seSBDaGF0IENvbXBsZXRpb25zIHRoYXQgaGF2ZVxuICAgKiBiZWVuIGNyZWF0ZWQgd2l0aCB0aGUgYHN0b3JlYCBwYXJhbWV0ZXIgc2V0IHRvIGB0cnVlYCB3aWxsIGJlIHJldHVybmVkLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0c1xuICAgKiAvLyBBdXRvbWF0aWNhbGx5IGZldGNoZXMgbW9yZSBwYWdlcyBhcyBuZWVkZWQuXG4gICAqIGZvciBhd2FpdCAoY29uc3QgY2hhdENvbXBsZXRpb25TdG9yZU1lc3NhZ2Ugb2YgY2xpZW50LmNoYXQuY29tcGxldGlvbnMubWVzc2FnZXMubGlzdChcbiAgICogICAnY29tcGxldGlvbl9pZCcsXG4gICAqICkpIHtcbiAgICogICAvLyAuLi5cbiAgICogfVxuICAgKiBgYGBcbiAgICovXG4gIGxpc3QoXG4gICAgY29tcGxldGlvbklkOiBzdHJpbmcsXG4gICAgcXVlcnk/OiBNZXNzYWdlTGlzdFBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5QYWdlUHJvbWlzZTxDaGF0Q29tcGxldGlvblN0b3JlTWVzc2FnZXNQYWdlLCBDb21wbGV0aW9uc0FQSS5DaGF0Q29tcGxldGlvblN0b3JlTWVzc2FnZT47XG4gIGxpc3QoXG4gICAgY29tcGxldGlvbklkOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuUGFnZVByb21pc2U8Q2hhdENvbXBsZXRpb25TdG9yZU1lc3NhZ2VzUGFnZSwgQ29tcGxldGlvbnNBUEkuQ2hhdENvbXBsZXRpb25TdG9yZU1lc3NhZ2U+O1xuICBsaXN0KFxuICAgIGNvbXBsZXRpb25JZDogc3RyaW5nLFxuICAgIHF1ZXJ5OiBNZXNzYWdlTGlzdFBhcmFtcyB8IENvcmUuUmVxdWVzdE9wdGlvbnMgPSB7fSxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5QYWdlUHJvbWlzZTxDaGF0Q29tcGxldGlvblN0b3JlTWVzc2FnZXNQYWdlLCBDb21wbGV0aW9uc0FQSS5DaGF0Q29tcGxldGlvblN0b3JlTWVzc2FnZT4ge1xuICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xuICAgICAgcmV0dXJuIHRoaXMubGlzdChjb21wbGV0aW9uSWQsIHt9LCBxdWVyeSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdChcbiAgICAgIGAvY2hhdC9jb21wbGV0aW9ucy8ke2NvbXBsZXRpb25JZH0vbWVzc2FnZXNgLFxuICAgICAgQ2hhdENvbXBsZXRpb25TdG9yZU1lc3NhZ2VzUGFnZSxcbiAgICAgIHsgcXVlcnksIC4uLm9wdGlvbnMgfSxcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZUxpc3RQYXJhbXMgZXh0ZW5kcyBDdXJzb3JQYWdlUGFyYW1zIHtcbiAgLyoqXG4gICAqIFNvcnQgb3JkZXIgZm9yIG1lc3NhZ2VzIGJ5IHRpbWVzdGFtcC4gVXNlIGBhc2NgIGZvciBhc2NlbmRpbmcgb3JkZXIgb3IgYGRlc2NgXG4gICAqIGZvciBkZXNjZW5kaW5nIG9yZGVyLiBEZWZhdWx0cyB0byBgYXNjYC5cbiAgICovXG4gIG9yZGVyPzogJ2FzYycgfCAnZGVzYyc7XG59XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBNZXNzYWdlcyB7XG4gIGV4cG9ydCB7IHR5cGUgTWVzc2FnZUxpc3RQYXJhbXMgYXMgTWVzc2FnZUxpc3RQYXJhbXMgfTtcbn1cblxuZXhwb3J0IHsgQ2hhdENvbXBsZXRpb25TdG9yZU1lc3NhZ2VzUGFnZSB9O1xuIiwgIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnLi4vLi4vLi4vcmVzb3VyY2UnO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgQVBJUHJvbWlzZSB9IGZyb20gJy4uLy4uLy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tICcuLi8uLi8uLi9jb3JlJztcbmltcG9ydCAqIGFzIENvbXBsZXRpb25zQ29tcGxldGlvbnNBUEkgZnJvbSAnLi9jb21wbGV0aW9ucyc7XG5pbXBvcnQgKiBhcyBDb21wbGV0aW9uc0FQSSBmcm9tICcuLi8uLi9jb21wbGV0aW9ucyc7XG5pbXBvcnQgKiBhcyBTaGFyZWQgZnJvbSAnLi4vLi4vc2hhcmVkJztcbmltcG9ydCAqIGFzIE1lc3NhZ2VzQVBJIGZyb20gJy4vbWVzc2FnZXMnO1xuaW1wb3J0IHsgTWVzc2FnZUxpc3RQYXJhbXMsIE1lc3NhZ2VzIH0gZnJvbSAnLi9tZXNzYWdlcyc7XG5pbXBvcnQgeyBDdXJzb3JQYWdlLCB0eXBlIEN1cnNvclBhZ2VQYXJhbXMgfSBmcm9tICcuLi8uLi8uLi9wYWdpbmF0aW9uJztcbmltcG9ydCB7IFN0cmVhbSB9IGZyb20gJy4uLy4uLy4uL3N0cmVhbWluZyc7XG5cbmV4cG9ydCBjbGFzcyBDb21wbGV0aW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgbWVzc2FnZXM6IE1lc3NhZ2VzQVBJLk1lc3NhZ2VzID0gbmV3IE1lc3NhZ2VzQVBJLk1lc3NhZ2VzKHRoaXMuX2NsaWVudCk7XG5cbiAgLyoqXG4gICAqICoqU3RhcnRpbmcgYSBuZXcgcHJvamVjdD8qKiBXZSByZWNvbW1lbmQgdHJ5aW5nXG4gICAqIFtSZXNwb25zZXNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvcmVzcG9uc2VzKSB0byB0YWtlXG4gICAqIGFkdmFudGFnZSBvZiB0aGUgbGF0ZXN0IE9wZW5BSSBwbGF0Zm9ybSBmZWF0dXJlcy4gQ29tcGFyZVxuICAgKiBbQ2hhdCBDb21wbGV0aW9ucyB3aXRoIFJlc3BvbnNlc10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3Jlc3BvbnNlcy12cy1jaGF0LWNvbXBsZXRpb25zP2FwaS1tb2RlPXJlc3BvbnNlcykuXG4gICAqXG4gICAqIC0tLVxuICAgKlxuICAgKiBDcmVhdGVzIGEgbW9kZWwgcmVzcG9uc2UgZm9yIHRoZSBnaXZlbiBjaGF0IGNvbnZlcnNhdGlvbi4gTGVhcm4gbW9yZSBpbiB0aGVcbiAgICogW3RleHQgZ2VuZXJhdGlvbl0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3RleHQtZ2VuZXJhdGlvbiksXG4gICAqIFt2aXNpb25dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy92aXNpb24pLCBhbmRcbiAgICogW2F1ZGlvXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvYXVkaW8pIGd1aWRlcy5cbiAgICpcbiAgICogUGFyYW1ldGVyIHN1cHBvcnQgY2FuIGRpZmZlciBkZXBlbmRpbmcgb24gdGhlIG1vZGVsIHVzZWQgdG8gZ2VuZXJhdGUgdGhlXG4gICAqIHJlc3BvbnNlLCBwYXJ0aWN1bGFybHkgZm9yIG5ld2VyIHJlYXNvbmluZyBtb2RlbHMuIFBhcmFtZXRlcnMgdGhhdCBhcmUgb25seVxuICAgKiBzdXBwb3J0ZWQgZm9yIHJlYXNvbmluZyBtb2RlbHMgYXJlIG5vdGVkIGJlbG93LiBGb3IgdGhlIGN1cnJlbnQgc3RhdGUgb2ZcbiAgICogdW5zdXBwb3J0ZWQgcGFyYW1ldGVycyBpbiByZWFzb25pbmcgbW9kZWxzLFxuICAgKiBbcmVmZXIgdG8gdGhlIHJlYXNvbmluZyBndWlkZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3JlYXNvbmluZykuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHRzXG4gICAqIGNvbnN0IGNoYXRDb21wbGV0aW9uID0gYXdhaXQgY2xpZW50LmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKFxuICAgKiAgIHtcbiAgICogICAgIG1lc3NhZ2VzOiBbeyBjb250ZW50OiAnc3RyaW5nJywgcm9sZTogJ2RldmVsb3BlcicgfV0sXG4gICAqICAgICBtb2RlbDogJ2dwdC00bycsXG4gICAqICAgfSxcbiAgICogKTtcbiAgICogYGBgXG4gICAqL1xuICBjcmVhdGUoXG4gICAgYm9keTogQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IEFQSVByb21pc2U8Q2hhdENvbXBsZXRpb24+O1xuICBjcmVhdGUoXG4gICAgYm9keTogQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXNTdHJlYW1pbmcsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IEFQSVByb21pc2U8U3RyZWFtPENoYXRDb21wbGV0aW9uQ2h1bms+PjtcbiAgY3JlYXRlKFxuICAgIGJvZHk6IENoYXRDb21wbGV0aW9uQ3JlYXRlUGFyYW1zQmFzZSxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQVBJUHJvbWlzZTxTdHJlYW08Q2hhdENvbXBsZXRpb25DaHVuaz4gfCBDaGF0Q29tcGxldGlvbj47XG4gIGNyZWF0ZShcbiAgICBib2R5OiBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQVBJUHJvbWlzZTxDaGF0Q29tcGxldGlvbj4gfCBBUElQcm9taXNlPFN0cmVhbTxDaGF0Q29tcGxldGlvbkNodW5rPj4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2NoYXQvY29tcGxldGlvbnMnLCB7IGJvZHksIC4uLm9wdGlvbnMsIHN0cmVhbTogYm9keS5zdHJlYW0gPz8gZmFsc2UgfSkgYXNcbiAgICAgIHwgQVBJUHJvbWlzZTxDaGF0Q29tcGxldGlvbj5cbiAgICAgIHwgQVBJUHJvbWlzZTxTdHJlYW08Q2hhdENvbXBsZXRpb25DaHVuaz4+O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIHN0b3JlZCBjaGF0IGNvbXBsZXRpb24uIE9ubHkgQ2hhdCBDb21wbGV0aW9ucyB0aGF0IGhhdmUgYmVlbiBjcmVhdGVkIHdpdGhcbiAgICogdGhlIGBzdG9yZWAgcGFyYW1ldGVyIHNldCB0byBgdHJ1ZWAgd2lsbCBiZSByZXR1cm5lZC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHNcbiAgICogY29uc3QgY2hhdENvbXBsZXRpb24gPVxuICAgKiAgIGF3YWl0IGNsaWVudC5jaGF0LmNvbXBsZXRpb25zLnJldHJpZXZlKCdjb21wbGV0aW9uX2lkJyk7XG4gICAqIGBgYFxuICAgKi9cbiAgcmV0cmlldmUoY29tcGxldGlvbklkOiBzdHJpbmcsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5BUElQcm9taXNlPENoYXRDb21wbGV0aW9uPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC9jaGF0L2NvbXBsZXRpb25zLyR7Y29tcGxldGlvbklkfWAsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vZGlmeSBhIHN0b3JlZCBjaGF0IGNvbXBsZXRpb24uIE9ubHkgQ2hhdCBDb21wbGV0aW9ucyB0aGF0IGhhdmUgYmVlbiBjcmVhdGVkXG4gICAqIHdpdGggdGhlIGBzdG9yZWAgcGFyYW1ldGVyIHNldCB0byBgdHJ1ZWAgY2FuIGJlIG1vZGlmaWVkLiBDdXJyZW50bHksIHRoZSBvbmx5XG4gICAqIHN1cHBvcnRlZCBtb2RpZmljYXRpb24gaXMgdG8gdXBkYXRlIHRoZSBgbWV0YWRhdGFgIGZpZWxkLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0c1xuICAgKiBjb25zdCBjaGF0Q29tcGxldGlvbiA9IGF3YWl0IGNsaWVudC5jaGF0LmNvbXBsZXRpb25zLnVwZGF0ZShcbiAgICogICAnY29tcGxldGlvbl9pZCcsXG4gICAqICAgeyBtZXRhZGF0YTogeyBmb286ICdzdHJpbmcnIH0gfSxcbiAgICogKTtcbiAgICogYGBgXG4gICAqL1xuICB1cGRhdGUoXG4gICAgY29tcGxldGlvbklkOiBzdHJpbmcsXG4gICAgYm9keTogQ2hhdENvbXBsZXRpb25VcGRhdGVQYXJhbXMsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuQVBJUHJvbWlzZTxDaGF0Q29tcGxldGlvbj4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL2NoYXQvY29tcGxldGlvbnMvJHtjb21wbGV0aW9uSWR9YCwgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3Qgc3RvcmVkIENoYXQgQ29tcGxldGlvbnMuIE9ubHkgQ2hhdCBDb21wbGV0aW9ucyB0aGF0IGhhdmUgYmVlbiBzdG9yZWQgd2l0aFxuICAgKiB0aGUgYHN0b3JlYCBwYXJhbWV0ZXIgc2V0IHRvIGB0cnVlYCB3aWxsIGJlIHJldHVybmVkLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0c1xuICAgKiAvLyBBdXRvbWF0aWNhbGx5IGZldGNoZXMgbW9yZSBwYWdlcyBhcyBuZWVkZWQuXG4gICAqIGZvciBhd2FpdCAoY29uc3QgY2hhdENvbXBsZXRpb24gb2YgY2xpZW50LmNoYXQuY29tcGxldGlvbnMubGlzdCgpKSB7XG4gICAqICAgLy8gLi4uXG4gICAqIH1cbiAgICogYGBgXG4gICAqL1xuICBsaXN0KFxuICAgIHF1ZXJ5PzogQ2hhdENvbXBsZXRpb25MaXN0UGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLlBhZ2VQcm9taXNlPENoYXRDb21wbGV0aW9uc1BhZ2UsIENoYXRDb21wbGV0aW9uPjtcbiAgbGlzdChvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IENvcmUuUGFnZVByb21pc2U8Q2hhdENvbXBsZXRpb25zUGFnZSwgQ2hhdENvbXBsZXRpb24+O1xuICBsaXN0KFxuICAgIHF1ZXJ5OiBDaGF0Q29tcGxldGlvbkxpc3RQYXJhbXMgfCBDb3JlLlJlcXVlc3RPcHRpb25zID0ge30sXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuUGFnZVByb21pc2U8Q2hhdENvbXBsZXRpb25zUGFnZSwgQ2hhdENvbXBsZXRpb24+IHtcbiAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmxpc3Qoe30sIHF1ZXJ5KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KCcvY2hhdC9jb21wbGV0aW9ucycsIENoYXRDb21wbGV0aW9uc1BhZ2UsIHsgcXVlcnksIC4uLm9wdGlvbnMgfSk7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgc3RvcmVkIGNoYXQgY29tcGxldGlvbi4gT25seSBDaGF0IENvbXBsZXRpb25zIHRoYXQgaGF2ZSBiZWVuIGNyZWF0ZWRcbiAgICogd2l0aCB0aGUgYHN0b3JlYCBwYXJhbWV0ZXIgc2V0IHRvIGB0cnVlYCBjYW4gYmUgZGVsZXRlZC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHNcbiAgICogY29uc3QgY2hhdENvbXBsZXRpb25EZWxldGVkID1cbiAgICogICBhd2FpdCBjbGllbnQuY2hhdC5jb21wbGV0aW9ucy5kZWwoJ2NvbXBsZXRpb25faWQnKTtcbiAgICogYGBgXG4gICAqL1xuICBkZWwoY29tcGxldGlvbklkOiBzdHJpbmcsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5BUElQcm9taXNlPENoYXRDb21wbGV0aW9uRGVsZXRlZD4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQuZGVsZXRlKGAvY2hhdC9jb21wbGV0aW9ucy8ke2NvbXBsZXRpb25JZH1gLCBvcHRpb25zKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2hhdENvbXBsZXRpb25zUGFnZSBleHRlbmRzIEN1cnNvclBhZ2U8Q2hhdENvbXBsZXRpb24+IHt9XG5cbmV4cG9ydCBjbGFzcyBDaGF0Q29tcGxldGlvblN0b3JlTWVzc2FnZXNQYWdlIGV4dGVuZHMgQ3Vyc29yUGFnZTxDaGF0Q29tcGxldGlvblN0b3JlTWVzc2FnZT4ge31cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY2hhdCBjb21wbGV0aW9uIHJlc3BvbnNlIHJldHVybmVkIGJ5IG1vZGVsLCBiYXNlZCBvbiB0aGUgcHJvdmlkZWRcbiAqIGlucHV0LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENoYXRDb21wbGV0aW9uIHtcbiAgLyoqXG4gICAqIEEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBjaGF0IGNvbXBsZXRpb24uXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBIGxpc3Qgb2YgY2hhdCBjb21wbGV0aW9uIGNob2ljZXMuIENhbiBiZSBtb3JlIHRoYW4gb25lIGlmIGBuYCBpcyBncmVhdGVyXG4gICAqIHRoYW4gMS5cbiAgICovXG4gIGNob2ljZXM6IEFycmF5PENoYXRDb21wbGV0aW9uLkNob2ljZT47XG5cbiAgLyoqXG4gICAqIFRoZSBVbml4IHRpbWVzdGFtcCAoaW4gc2Vjb25kcykgb2Ygd2hlbiB0aGUgY2hhdCBjb21wbGV0aW9uIHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgbW9kZWwgdXNlZCBmb3IgdGhlIGNoYXQgY29tcGxldGlvbi5cbiAgICovXG4gIG1vZGVsOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBvYmplY3QgdHlwZSwgd2hpY2ggaXMgYWx3YXlzIGBjaGF0LmNvbXBsZXRpb25gLlxuICAgKi9cbiAgb2JqZWN0OiAnY2hhdC5jb21wbGV0aW9uJztcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSBsYXRlbmN5IHRpZXIgdG8gdXNlIGZvciBwcm9jZXNzaW5nIHRoZSByZXF1ZXN0LiBUaGlzIHBhcmFtZXRlciBpc1xuICAgKiByZWxldmFudCBmb3IgY3VzdG9tZXJzIHN1YnNjcmliZWQgdG8gdGhlIHNjYWxlIHRpZXIgc2VydmljZTpcbiAgICpcbiAgICogLSBJZiBzZXQgdG8gJ2F1dG8nLCBhbmQgdGhlIFByb2plY3QgaXMgU2NhbGUgdGllciBlbmFibGVkLCB0aGUgc3lzdGVtIHdpbGxcbiAgICogICB1dGlsaXplIHNjYWxlIHRpZXIgY3JlZGl0cyB1bnRpbCB0aGV5IGFyZSBleGhhdXN0ZWQuXG4gICAqIC0gSWYgc2V0IHRvICdhdXRvJywgYW5kIHRoZSBQcm9qZWN0IGlzIG5vdCBTY2FsZSB0aWVyIGVuYWJsZWQsIHRoZSByZXF1ZXN0IHdpbGxcbiAgICogICBiZSBwcm9jZXNzZWQgdXNpbmcgdGhlIGRlZmF1bHQgc2VydmljZSB0aWVyIHdpdGggYSBsb3dlciB1cHRpbWUgU0xBIGFuZCBub1xuICAgKiAgIGxhdGVuY3kgZ3VhcmVudGVlLlxuICAgKiAtIElmIHNldCB0byAnZGVmYXVsdCcsIHRoZSByZXF1ZXN0IHdpbGwgYmUgcHJvY2Vzc2VkIHVzaW5nIHRoZSBkZWZhdWx0IHNlcnZpY2VcbiAgICogICB0aWVyIHdpdGggYSBsb3dlciB1cHRpbWUgU0xBIGFuZCBubyBsYXRlbmN5IGd1YXJlbnRlZS5cbiAgICogLSBJZiBzZXQgdG8gJ2ZsZXgnLCB0aGUgcmVxdWVzdCB3aWxsIGJlIHByb2Nlc3NlZCB3aXRoIHRoZSBGbGV4IFByb2Nlc3NpbmdcbiAgICogICBzZXJ2aWNlIHRpZXIuXG4gICAqICAgW0xlYXJuIG1vcmVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9mbGV4LXByb2Nlc3NpbmcpLlxuICAgKiAtIFdoZW4gbm90IHNldCwgdGhlIGRlZmF1bHQgYmVoYXZpb3IgaXMgJ2F1dG8nLlxuICAgKlxuICAgKiBXaGVuIHRoaXMgcGFyYW1ldGVyIGlzIHNldCwgdGhlIHJlc3BvbnNlIGJvZHkgd2lsbCBpbmNsdWRlIHRoZSBgc2VydmljZV90aWVyYFxuICAgKiB1dGlsaXplZC5cbiAgICovXG4gIHNlcnZpY2VfdGllcj86ICdhdXRvJyB8ICdkZWZhdWx0JyB8ICdmbGV4JyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoaXMgZmluZ2VycHJpbnQgcmVwcmVzZW50cyB0aGUgYmFja2VuZCBjb25maWd1cmF0aW9uIHRoYXQgdGhlIG1vZGVsIHJ1bnMgd2l0aC5cbiAgICpcbiAgICogQ2FuIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCB0aGUgYHNlZWRgIHJlcXVlc3QgcGFyYW1ldGVyIHRvIHVuZGVyc3RhbmQgd2hlblxuICAgKiBiYWNrZW5kIGNoYW5nZXMgaGF2ZSBiZWVuIG1hZGUgdGhhdCBtaWdodCBpbXBhY3QgZGV0ZXJtaW5pc20uXG4gICAqL1xuICBzeXN0ZW1fZmluZ2VycHJpbnQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFVzYWdlIHN0YXRpc3RpY3MgZm9yIHRoZSBjb21wbGV0aW9uIHJlcXVlc3QuXG4gICAqL1xuICB1c2FnZT86IENvbXBsZXRpb25zQVBJLkNvbXBsZXRpb25Vc2FnZTtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBDaGF0Q29tcGxldGlvbiB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgQ2hvaWNlIHtcbiAgICAvKipcbiAgICAgKiBUaGUgcmVhc29uIHRoZSBtb2RlbCBzdG9wcGVkIGdlbmVyYXRpbmcgdG9rZW5zLiBUaGlzIHdpbGwgYmUgYHN0b3BgIGlmIHRoZSBtb2RlbFxuICAgICAqIGhpdCBhIG5hdHVyYWwgc3RvcCBwb2ludCBvciBhIHByb3ZpZGVkIHN0b3Agc2VxdWVuY2UsIGBsZW5ndGhgIGlmIHRoZSBtYXhpbXVtXG4gICAgICogbnVtYmVyIG9mIHRva2VucyBzcGVjaWZpZWQgaW4gdGhlIHJlcXVlc3Qgd2FzIHJlYWNoZWQsIGBjb250ZW50X2ZpbHRlcmAgaWZcbiAgICAgKiBjb250ZW50IHdhcyBvbWl0dGVkIGR1ZSB0byBhIGZsYWcgZnJvbSBvdXIgY29udGVudCBmaWx0ZXJzLCBgdG9vbF9jYWxsc2AgaWYgdGhlXG4gICAgICogbW9kZWwgY2FsbGVkIGEgdG9vbCwgb3IgYGZ1bmN0aW9uX2NhbGxgIChkZXByZWNhdGVkKSBpZiB0aGUgbW9kZWwgY2FsbGVkIGFcbiAgICAgKiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmaW5pc2hfcmVhc29uOiAnc3RvcCcgfCAnbGVuZ3RoJyB8ICd0b29sX2NhbGxzJyB8ICdjb250ZW50X2ZpbHRlcicgfCAnZnVuY3Rpb25fY2FsbCc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW5kZXggb2YgdGhlIGNob2ljZSBpbiB0aGUgbGlzdCBvZiBjaG9pY2VzLlxuICAgICAqL1xuICAgIGluZGV4OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBMb2cgcHJvYmFiaWxpdHkgaW5mb3JtYXRpb24gZm9yIHRoZSBjaG9pY2UuXG4gICAgICovXG4gICAgbG9ncHJvYnM6IENob2ljZS5Mb2dwcm9icyB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBBIGNoYXQgY29tcGxldGlvbiBtZXNzYWdlIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwuXG4gICAgICovXG4gICAgbWVzc2FnZTogQ29tcGxldGlvbnNDb21wbGV0aW9uc0FQSS5DaGF0Q29tcGxldGlvbk1lc3NhZ2U7XG4gIH1cblxuICBleHBvcnQgbmFtZXNwYWNlIENob2ljZSB7XG4gICAgLyoqXG4gICAgICogTG9nIHByb2JhYmlsaXR5IGluZm9ybWF0aW9uIGZvciB0aGUgY2hvaWNlLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgTG9ncHJvYnMge1xuICAgICAgLyoqXG4gICAgICAgKiBBIGxpc3Qgb2YgbWVzc2FnZSBjb250ZW50IHRva2VucyB3aXRoIGxvZyBwcm9iYWJpbGl0eSBpbmZvcm1hdGlvbi5cbiAgICAgICAqL1xuICAgICAgY29udGVudDogQXJyYXk8Q29tcGxldGlvbnNDb21wbGV0aW9uc0FQSS5DaGF0Q29tcGxldGlvblRva2VuTG9ncHJvYj4gfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIEEgbGlzdCBvZiBtZXNzYWdlIHJlZnVzYWwgdG9rZW5zIHdpdGggbG9nIHByb2JhYmlsaXR5IGluZm9ybWF0aW9uLlxuICAgICAgICovXG4gICAgICByZWZ1c2FsOiBBcnJheTxDb21wbGV0aW9uc0NvbXBsZXRpb25zQVBJLkNoYXRDb21wbGV0aW9uVG9rZW5Mb2dwcm9iPiB8IG51bGw7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogTWVzc2FnZXMgc2VudCBieSB0aGUgbW9kZWwgaW4gcmVzcG9uc2UgdG8gdXNlciBtZXNzYWdlcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDaGF0Q29tcGxldGlvbkFzc2lzdGFudE1lc3NhZ2VQYXJhbSB7XG4gIC8qKlxuICAgKiBUaGUgcm9sZSBvZiB0aGUgbWVzc2FnZXMgYXV0aG9yLCBpbiB0aGlzIGNhc2UgYGFzc2lzdGFudGAuXG4gICAqL1xuICByb2xlOiAnYXNzaXN0YW50JztcblxuICAvKipcbiAgICogRGF0YSBhYm91dCBhIHByZXZpb3VzIGF1ZGlvIHJlc3BvbnNlIGZyb20gdGhlIG1vZGVsLlxuICAgKiBbTGVhcm4gbW9yZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL2F1ZGlvKS5cbiAgICovXG4gIGF1ZGlvPzogQ2hhdENvbXBsZXRpb25Bc3Npc3RhbnRNZXNzYWdlUGFyYW0uQXVkaW8gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudHMgb2YgdGhlIGFzc2lzdGFudCBtZXNzYWdlLiBSZXF1aXJlZCB1bmxlc3MgYHRvb2xfY2FsbHNgIG9yXG4gICAqIGBmdW5jdGlvbl9jYWxsYCBpcyBzcGVjaWZpZWQuXG4gICAqL1xuICBjb250ZW50Pzogc3RyaW5nIHwgQXJyYXk8Q2hhdENvbXBsZXRpb25Db250ZW50UGFydFRleHQgfCBDaGF0Q29tcGxldGlvbkNvbnRlbnRQYXJ0UmVmdXNhbD4gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBEZXByZWNhdGVkIGFuZCByZXBsYWNlZCBieSBgdG9vbF9jYWxsc2AuIFRoZSBuYW1lIGFuZCBhcmd1bWVudHMgb2YgYVxuICAgKiBmdW5jdGlvbiB0aGF0IHNob3VsZCBiZSBjYWxsZWQsIGFzIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwuXG4gICAqL1xuICBmdW5jdGlvbl9jYWxsPzogQ2hhdENvbXBsZXRpb25Bc3Npc3RhbnRNZXNzYWdlUGFyYW0uRnVuY3Rpb25DYWxsIHwgbnVsbDtcblxuICAvKipcbiAgICogQW4gb3B0aW9uYWwgbmFtZSBmb3IgdGhlIHBhcnRpY2lwYW50LiBQcm92aWRlcyB0aGUgbW9kZWwgaW5mb3JtYXRpb24gdG9cbiAgICogZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIHBhcnRpY2lwYW50cyBvZiB0aGUgc2FtZSByb2xlLlxuICAgKi9cbiAgbmFtZT86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHJlZnVzYWwgbWVzc2FnZSBieSB0aGUgYXNzaXN0YW50LlxuICAgKi9cbiAgcmVmdXNhbD86IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSB0b29sIGNhbGxzIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwsIHN1Y2ggYXMgZnVuY3Rpb24gY2FsbHMuXG4gICAqL1xuICB0b29sX2NhbGxzPzogQXJyYXk8Q2hhdENvbXBsZXRpb25NZXNzYWdlVG9vbENhbGw+O1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIENoYXRDb21wbGV0aW9uQXNzaXN0YW50TWVzc2FnZVBhcmFtIHtcbiAgLyoqXG4gICAqIERhdGEgYWJvdXQgYSBwcmV2aW91cyBhdWRpbyByZXNwb25zZSBmcm9tIHRoZSBtb2RlbC5cbiAgICogW0xlYXJuIG1vcmVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9hdWRpbykuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIEF1ZGlvIHtcbiAgICAvKipcbiAgICAgKiBVbmlxdWUgaWRlbnRpZmllciBmb3IgYSBwcmV2aW91cyBhdWRpbyByZXNwb25zZSBmcm9tIHRoZSBtb2RlbC5cbiAgICAgKi9cbiAgICBpZDogc3RyaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQgYW5kIHJlcGxhY2VkIGJ5IGB0b29sX2NhbGxzYC4gVGhlIG5hbWUgYW5kIGFyZ3VtZW50cyBvZiBhXG4gICAqIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCwgYXMgZ2VuZXJhdGVkIGJ5IHRoZSBtb2RlbC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgRnVuY3Rpb25DYWxsIHtcbiAgICAvKipcbiAgICAgKiBUaGUgYXJndW1lbnRzIHRvIGNhbGwgdGhlIGZ1bmN0aW9uIHdpdGgsIGFzIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwgaW4gSlNPTlxuICAgICAqIGZvcm1hdC4gTm90ZSB0aGF0IHRoZSBtb2RlbCBkb2VzIG5vdCBhbHdheXMgZ2VuZXJhdGUgdmFsaWQgSlNPTiwgYW5kIG1heVxuICAgICAqIGhhbGx1Y2luYXRlIHBhcmFtZXRlcnMgbm90IGRlZmluZWQgYnkgeW91ciBmdW5jdGlvbiBzY2hlbWEuIFZhbGlkYXRlIHRoZVxuICAgICAqIGFyZ3VtZW50cyBpbiB5b3VyIGNvZGUgYmVmb3JlIGNhbGxpbmcgeW91ciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBhcmd1bWVudHM6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbiB0byBjYWxsLlxuICAgICAqL1xuICAgIG5hbWU6IHN0cmluZztcbiAgfVxufVxuXG4vKipcbiAqIElmIHRoZSBhdWRpbyBvdXRwdXQgbW9kYWxpdHkgaXMgcmVxdWVzdGVkLCB0aGlzIG9iamVjdCBjb250YWlucyBkYXRhIGFib3V0IHRoZVxuICogYXVkaW8gcmVzcG9uc2UgZnJvbSB0aGUgbW9kZWwuXG4gKiBbTGVhcm4gbW9yZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL2F1ZGlvKS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDaGF0Q29tcGxldGlvbkF1ZGlvIHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIGF1ZGlvIHJlc3BvbnNlLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogQmFzZTY0IGVuY29kZWQgYXVkaW8gYnl0ZXMgZ2VuZXJhdGVkIGJ5IHRoZSBtb2RlbCwgaW4gdGhlIGZvcm1hdCBzcGVjaWZpZWQgaW5cbiAgICogdGhlIHJlcXVlc3QuXG4gICAqL1xuICBkYXRhOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBVbml4IHRpbWVzdGFtcCAoaW4gc2Vjb25kcykgZm9yIHdoZW4gdGhpcyBhdWRpbyByZXNwb25zZSB3aWxsIG5vIGxvbmdlciBiZVxuICAgKiBhY2Nlc3NpYmxlIG9uIHRoZSBzZXJ2ZXIgZm9yIHVzZSBpbiBtdWx0aS10dXJuIGNvbnZlcnNhdGlvbnMuXG4gICAqL1xuICBleHBpcmVzX2F0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRyYW5zY3JpcHQgb2YgdGhlIGF1ZGlvIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwuXG4gICAqL1xuICB0cmFuc2NyaXB0OiBzdHJpbmc7XG59XG5cbi8qKlxuICogUGFyYW1ldGVycyBmb3IgYXVkaW8gb3V0cHV0LiBSZXF1aXJlZCB3aGVuIGF1ZGlvIG91dHB1dCBpcyByZXF1ZXN0ZWQgd2l0aFxuICogYG1vZGFsaXRpZXM6IFtcImF1ZGlvXCJdYC5cbiAqIFtMZWFybiBtb3JlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvYXVkaW8pLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENoYXRDb21wbGV0aW9uQXVkaW9QYXJhbSB7XG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIG91dHB1dCBhdWRpbyBmb3JtYXQuIE11c3QgYmUgb25lIG9mIGB3YXZgLCBgbXAzYCwgYGZsYWNgLCBgb3B1c2AsXG4gICAqIG9yIGBwY20xNmAuXG4gICAqL1xuICBmb3JtYXQ6ICd3YXYnIHwgJ2FhYycgfCAnbXAzJyB8ICdmbGFjJyB8ICdvcHVzJyB8ICdwY20xNic7XG5cbiAgLyoqXG4gICAqIFRoZSB2b2ljZSB0aGUgbW9kZWwgdXNlcyB0byByZXNwb25kLiBTdXBwb3J0ZWQgdm9pY2VzIGFyZSBgYWxsb3lgLCBgYXNoYCxcbiAgICogYGJhbGxhZGAsIGBjb3JhbGAsIGBlY2hvYCwgYGZhYmxlYCwgYG5vdmFgLCBgb255eGAsIGBzYWdlYCwgYW5kIGBzaGltbWVyYC5cbiAgICovXG4gIHZvaWNlOlxuICAgIHwgKHN0cmluZyAmIHt9KVxuICAgIHwgJ2FsbG95J1xuICAgIHwgJ2FzaCdcbiAgICB8ICdiYWxsYWQnXG4gICAgfCAnY29yYWwnXG4gICAgfCAnZWNobydcbiAgICB8ICdmYWJsZSdcbiAgICB8ICdvbnl4J1xuICAgIHwgJ25vdmEnXG4gICAgfCAnc2FnZSdcbiAgICB8ICdzaGltbWVyJ1xuICAgIHwgJ3ZlcnNlJztcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgc3RyZWFtZWQgY2h1bmsgb2YgYSBjaGF0IGNvbXBsZXRpb24gcmVzcG9uc2UgcmV0dXJuZWQgYnkgdGhlIG1vZGVsLFxuICogYmFzZWQgb24gdGhlIHByb3ZpZGVkIGlucHV0LlxuICogW0xlYXJuIG1vcmVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9zdHJlYW1pbmctcmVzcG9uc2VzKS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDaGF0Q29tcGxldGlvbkNodW5rIHtcbiAgLyoqXG4gICAqIEEgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBjaGF0IGNvbXBsZXRpb24uIEVhY2ggY2h1bmsgaGFzIHRoZSBzYW1lIElELlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogQSBsaXN0IG9mIGNoYXQgY29tcGxldGlvbiBjaG9pY2VzLiBDYW4gY29udGFpbiBtb3JlIHRoYW4gb25lIGVsZW1lbnRzIGlmIGBuYCBpc1xuICAgKiBncmVhdGVyIHRoYW4gMS4gQ2FuIGFsc28gYmUgZW1wdHkgZm9yIHRoZSBsYXN0IGNodW5rIGlmIHlvdSBzZXRcbiAgICogYHN0cmVhbV9vcHRpb25zOiB7XCJpbmNsdWRlX3VzYWdlXCI6IHRydWV9YC5cbiAgICovXG4gIGNob2ljZXM6IEFycmF5PENoYXRDb21wbGV0aW9uQ2h1bmsuQ2hvaWNlPjtcblxuICAvKipcbiAgICogVGhlIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSBvZiB3aGVuIHRoZSBjaGF0IGNvbXBsZXRpb24gd2FzIGNyZWF0ZWQuIEVhY2hcbiAgICogY2h1bmsgaGFzIHRoZSBzYW1lIHRpbWVzdGFtcC5cbiAgICovXG4gIGNyZWF0ZWQ6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG1vZGVsIHRvIGdlbmVyYXRlIHRoZSBjb21wbGV0aW9uLlxuICAgKi9cbiAgbW9kZWw6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG9iamVjdCB0eXBlLCB3aGljaCBpcyBhbHdheXMgYGNoYXQuY29tcGxldGlvbi5jaHVua2AuXG4gICAqL1xuICBvYmplY3Q6ICdjaGF0LmNvbXBsZXRpb24uY2h1bmsnO1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGxhdGVuY3kgdGllciB0byB1c2UgZm9yIHByb2Nlc3NpbmcgdGhlIHJlcXVlc3QuIFRoaXMgcGFyYW1ldGVyIGlzXG4gICAqIHJlbGV2YW50IGZvciBjdXN0b21lcnMgc3Vic2NyaWJlZCB0byB0aGUgc2NhbGUgdGllciBzZXJ2aWNlOlxuICAgKlxuICAgKiAtIElmIHNldCB0byAnYXV0bycsIGFuZCB0aGUgUHJvamVjdCBpcyBTY2FsZSB0aWVyIGVuYWJsZWQsIHRoZSBzeXN0ZW0gd2lsbFxuICAgKiAgIHV0aWxpemUgc2NhbGUgdGllciBjcmVkaXRzIHVudGlsIHRoZXkgYXJlIGV4aGF1c3RlZC5cbiAgICogLSBJZiBzZXQgdG8gJ2F1dG8nLCBhbmQgdGhlIFByb2plY3QgaXMgbm90IFNjYWxlIHRpZXIgZW5hYmxlZCwgdGhlIHJlcXVlc3Qgd2lsbFxuICAgKiAgIGJlIHByb2Nlc3NlZCB1c2luZyB0aGUgZGVmYXVsdCBzZXJ2aWNlIHRpZXIgd2l0aCBhIGxvd2VyIHVwdGltZSBTTEEgYW5kIG5vXG4gICAqICAgbGF0ZW5jeSBndWFyZW50ZWUuXG4gICAqIC0gSWYgc2V0IHRvICdkZWZhdWx0JywgdGhlIHJlcXVlc3Qgd2lsbCBiZSBwcm9jZXNzZWQgdXNpbmcgdGhlIGRlZmF1bHQgc2VydmljZVxuICAgKiAgIHRpZXIgd2l0aCBhIGxvd2VyIHVwdGltZSBTTEEgYW5kIG5vIGxhdGVuY3kgZ3VhcmVudGVlLlxuICAgKiAtIElmIHNldCB0byAnZmxleCcsIHRoZSByZXF1ZXN0IHdpbGwgYmUgcHJvY2Vzc2VkIHdpdGggdGhlIEZsZXggUHJvY2Vzc2luZ1xuICAgKiAgIHNlcnZpY2UgdGllci5cbiAgICogICBbTGVhcm4gbW9yZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL2ZsZXgtcHJvY2Vzc2luZykuXG4gICAqIC0gV2hlbiBub3Qgc2V0LCB0aGUgZGVmYXVsdCBiZWhhdmlvciBpcyAnYXV0bycuXG4gICAqXG4gICAqIFdoZW4gdGhpcyBwYXJhbWV0ZXIgaXMgc2V0LCB0aGUgcmVzcG9uc2UgYm9keSB3aWxsIGluY2x1ZGUgdGhlIGBzZXJ2aWNlX3RpZXJgXG4gICAqIHV0aWxpemVkLlxuICAgKi9cbiAgc2VydmljZV90aWVyPzogJ2F1dG8nIHwgJ2RlZmF1bHQnIHwgJ2ZsZXgnIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhpcyBmaW5nZXJwcmludCByZXByZXNlbnRzIHRoZSBiYWNrZW5kIGNvbmZpZ3VyYXRpb24gdGhhdCB0aGUgbW9kZWwgcnVucyB3aXRoLlxuICAgKiBDYW4gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHRoZSBgc2VlZGAgcmVxdWVzdCBwYXJhbWV0ZXIgdG8gdW5kZXJzdGFuZCB3aGVuXG4gICAqIGJhY2tlbmQgY2hhbmdlcyBoYXZlIGJlZW4gbWFkZSB0aGF0IG1pZ2h0IGltcGFjdCBkZXRlcm1pbmlzbS5cbiAgICovXG4gIHN5c3RlbV9maW5nZXJwcmludD86IHN0cmluZztcblxuICAvKipcbiAgICogQW4gb3B0aW9uYWwgZmllbGQgdGhhdCB3aWxsIG9ubHkgYmUgcHJlc2VudCB3aGVuIHlvdSBzZXRcbiAgICogYHN0cmVhbV9vcHRpb25zOiB7XCJpbmNsdWRlX3VzYWdlXCI6IHRydWV9YCBpbiB5b3VyIHJlcXVlc3QuIFdoZW4gcHJlc2VudCwgaXRcbiAgICogY29udGFpbnMgYSBudWxsIHZhbHVlICoqZXhjZXB0IGZvciB0aGUgbGFzdCBjaHVuayoqIHdoaWNoIGNvbnRhaW5zIHRoZSB0b2tlblxuICAgKiB1c2FnZSBzdGF0aXN0aWNzIGZvciB0aGUgZW50aXJlIHJlcXVlc3QuXG4gICAqXG4gICAqICoqTk9URToqKiBJZiB0aGUgc3RyZWFtIGlzIGludGVycnVwdGVkIG9yIGNhbmNlbGxlZCwgeW91IG1heSBub3QgcmVjZWl2ZSB0aGVcbiAgICogZmluYWwgdXNhZ2UgY2h1bmsgd2hpY2ggY29udGFpbnMgdGhlIHRvdGFsIHRva2VuIHVzYWdlIGZvciB0aGUgcmVxdWVzdC5cbiAgICovXG4gIHVzYWdlPzogQ29tcGxldGlvbnNBUEkuQ29tcGxldGlvblVzYWdlIHwgbnVsbDtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBDaGF0Q29tcGxldGlvbkNodW5rIHtcbiAgZXhwb3J0IGludGVyZmFjZSBDaG9pY2Uge1xuICAgIC8qKlxuICAgICAqIEEgY2hhdCBjb21wbGV0aW9uIGRlbHRhIGdlbmVyYXRlZCBieSBzdHJlYW1lZCBtb2RlbCByZXNwb25zZXMuXG4gICAgICovXG4gICAgZGVsdGE6IENob2ljZS5EZWx0YTtcblxuICAgIC8qKlxuICAgICAqIFRoZSByZWFzb24gdGhlIG1vZGVsIHN0b3BwZWQgZ2VuZXJhdGluZyB0b2tlbnMuIFRoaXMgd2lsbCBiZSBgc3RvcGAgaWYgdGhlIG1vZGVsXG4gICAgICogaGl0IGEgbmF0dXJhbCBzdG9wIHBvaW50IG9yIGEgcHJvdmlkZWQgc3RvcCBzZXF1ZW5jZSwgYGxlbmd0aGAgaWYgdGhlIG1heGltdW1cbiAgICAgKiBudW1iZXIgb2YgdG9rZW5zIHNwZWNpZmllZCBpbiB0aGUgcmVxdWVzdCB3YXMgcmVhY2hlZCwgYGNvbnRlbnRfZmlsdGVyYCBpZlxuICAgICAqIGNvbnRlbnQgd2FzIG9taXR0ZWQgZHVlIHRvIGEgZmxhZyBmcm9tIG91ciBjb250ZW50IGZpbHRlcnMsIGB0b29sX2NhbGxzYCBpZiB0aGVcbiAgICAgKiBtb2RlbCBjYWxsZWQgYSB0b29sLCBvciBgZnVuY3Rpb25fY2FsbGAgKGRlcHJlY2F0ZWQpIGlmIHRoZSBtb2RlbCBjYWxsZWQgYVxuICAgICAqIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZpbmlzaF9yZWFzb246ICdzdG9wJyB8ICdsZW5ndGgnIHwgJ3Rvb2xfY2FsbHMnIHwgJ2NvbnRlbnRfZmlsdGVyJyB8ICdmdW5jdGlvbl9jYWxsJyB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW5kZXggb2YgdGhlIGNob2ljZSBpbiB0aGUgbGlzdCBvZiBjaG9pY2VzLlxuICAgICAqL1xuICAgIGluZGV4OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBMb2cgcHJvYmFiaWxpdHkgaW5mb3JtYXRpb24gZm9yIHRoZSBjaG9pY2UuXG4gICAgICovXG4gICAgbG9ncHJvYnM/OiBDaG9pY2UuTG9ncHJvYnMgfCBudWxsO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBDaG9pY2Uge1xuICAgIC8qKlxuICAgICAqIEEgY2hhdCBjb21wbGV0aW9uIGRlbHRhIGdlbmVyYXRlZCBieSBzdHJlYW1lZCBtb2RlbCByZXNwb25zZXMuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBEZWx0YSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBjb250ZW50cyBvZiB0aGUgY2h1bmsgbWVzc2FnZS5cbiAgICAgICAqL1xuICAgICAgY29udGVudD86IHN0cmluZyB8IG51bGw7XG5cbiAgICAgIC8qKlxuICAgICAgICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBhbmQgcmVwbGFjZWQgYnkgYHRvb2xfY2FsbHNgLiBUaGUgbmFtZSBhbmQgYXJndW1lbnRzIG9mIGFcbiAgICAgICAqIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCwgYXMgZ2VuZXJhdGVkIGJ5IHRoZSBtb2RlbC5cbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb25fY2FsbD86IERlbHRhLkZ1bmN0aW9uQ2FsbDtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgcmVmdXNhbCBtZXNzYWdlIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwuXG4gICAgICAgKi9cbiAgICAgIHJlZnVzYWw/OiBzdHJpbmcgfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSByb2xlIG9mIHRoZSBhdXRob3Igb2YgdGhpcyBtZXNzYWdlLlxuICAgICAgICovXG4gICAgICByb2xlPzogJ2RldmVsb3BlcicgfCAnc3lzdGVtJyB8ICd1c2VyJyB8ICdhc3Npc3RhbnQnIHwgJ3Rvb2wnO1xuXG4gICAgICB0b29sX2NhbGxzPzogQXJyYXk8RGVsdGEuVG9vbENhbGw+O1xuICAgIH1cblxuICAgIGV4cG9ydCBuYW1lc3BhY2UgRGVsdGEge1xuICAgICAgLyoqXG4gICAgICAgKiBAZGVwcmVjYXRlZCBEZXByZWNhdGVkIGFuZCByZXBsYWNlZCBieSBgdG9vbF9jYWxsc2AuIFRoZSBuYW1lIGFuZCBhcmd1bWVudHMgb2YgYVxuICAgICAgICogZnVuY3Rpb24gdGhhdCBzaG91bGQgYmUgY2FsbGVkLCBhcyBnZW5lcmF0ZWQgYnkgdGhlIG1vZGVsLlxuICAgICAgICovXG4gICAgICBleHBvcnQgaW50ZXJmYWNlIEZ1bmN0aW9uQ2FsbCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYXJndW1lbnRzIHRvIGNhbGwgdGhlIGZ1bmN0aW9uIHdpdGgsIGFzIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwgaW4gSlNPTlxuICAgICAgICAgKiBmb3JtYXQuIE5vdGUgdGhhdCB0aGUgbW9kZWwgZG9lcyBub3QgYWx3YXlzIGdlbmVyYXRlIHZhbGlkIEpTT04sIGFuZCBtYXlcbiAgICAgICAgICogaGFsbHVjaW5hdGUgcGFyYW1ldGVycyBub3QgZGVmaW5lZCBieSB5b3VyIGZ1bmN0aW9uIHNjaGVtYS4gVmFsaWRhdGUgdGhlXG4gICAgICAgICAqIGFyZ3VtZW50cyBpbiB5b3VyIGNvZGUgYmVmb3JlIGNhbGxpbmcgeW91ciBmdW5jdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIGFyZ3VtZW50cz86IHN0cmluZztcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uIHRvIGNhbGwuXG4gICAgICAgICAqL1xuICAgICAgICBuYW1lPzogc3RyaW5nO1xuICAgICAgfVxuXG4gICAgICBleHBvcnQgaW50ZXJmYWNlIFRvb2xDYWxsIHtcbiAgICAgICAgaW5kZXg6IG51bWJlcjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIElEIG9mIHRoZSB0b29sIGNhbGwuXG4gICAgICAgICAqL1xuICAgICAgICBpZD86IHN0cmluZztcblxuICAgICAgICBmdW5jdGlvbj86IFRvb2xDYWxsLkZ1bmN0aW9uO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdHlwZSBvZiB0aGUgdG9vbC4gQ3VycmVudGx5LCBvbmx5IGBmdW5jdGlvbmAgaXMgc3VwcG9ydGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdHlwZT86ICdmdW5jdGlvbic7XG4gICAgICB9XG5cbiAgICAgIGV4cG9ydCBuYW1lc3BhY2UgVG9vbENhbGwge1xuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIEZ1bmN0aW9uIHtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBUaGUgYXJndW1lbnRzIHRvIGNhbGwgdGhlIGZ1bmN0aW9uIHdpdGgsIGFzIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwgaW4gSlNPTlxuICAgICAgICAgICAqIGZvcm1hdC4gTm90ZSB0aGF0IHRoZSBtb2RlbCBkb2VzIG5vdCBhbHdheXMgZ2VuZXJhdGUgdmFsaWQgSlNPTiwgYW5kIG1heVxuICAgICAgICAgICAqIGhhbGx1Y2luYXRlIHBhcmFtZXRlcnMgbm90IGRlZmluZWQgYnkgeW91ciBmdW5jdGlvbiBzY2hlbWEuIFZhbGlkYXRlIHRoZVxuICAgICAgICAgICAqIGFyZ3VtZW50cyBpbiB5b3VyIGNvZGUgYmVmb3JlIGNhbGxpbmcgeW91ciBmdW5jdGlvbi5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBhcmd1bWVudHM/OiBzdHJpbmc7XG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24gdG8gY2FsbC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBuYW1lPzogc3RyaW5nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9nIHByb2JhYmlsaXR5IGluZm9ybWF0aW9uIGZvciB0aGUgY2hvaWNlLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgTG9ncHJvYnMge1xuICAgICAgLyoqXG4gICAgICAgKiBBIGxpc3Qgb2YgbWVzc2FnZSBjb250ZW50IHRva2VucyB3aXRoIGxvZyBwcm9iYWJpbGl0eSBpbmZvcm1hdGlvbi5cbiAgICAgICAqL1xuICAgICAgY29udGVudDogQXJyYXk8Q29tcGxldGlvbnNDb21wbGV0aW9uc0FQSS5DaGF0Q29tcGxldGlvblRva2VuTG9ncHJvYj4gfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIEEgbGlzdCBvZiBtZXNzYWdlIHJlZnVzYWwgdG9rZW5zIHdpdGggbG9nIHByb2JhYmlsaXR5IGluZm9ybWF0aW9uLlxuICAgICAgICovXG4gICAgICByZWZ1c2FsOiBBcnJheTxDb21wbGV0aW9uc0NvbXBsZXRpb25zQVBJLkNoYXRDb21wbGV0aW9uVG9rZW5Mb2dwcm9iPiB8IG51bGw7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogTGVhcm4gYWJvdXRcbiAqIFt0ZXh0IGlucHV0c10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3RleHQtZ2VuZXJhdGlvbikuXG4gKi9cbmV4cG9ydCB0eXBlIENoYXRDb21wbGV0aW9uQ29udGVudFBhcnQgPVxuICB8IENoYXRDb21wbGV0aW9uQ29udGVudFBhcnRUZXh0XG4gIHwgQ2hhdENvbXBsZXRpb25Db250ZW50UGFydEltYWdlXG4gIHwgQ2hhdENvbXBsZXRpb25Db250ZW50UGFydElucHV0QXVkaW9cbiAgfCBDaGF0Q29tcGxldGlvbkNvbnRlbnRQYXJ0LkZpbGU7XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ2hhdENvbXBsZXRpb25Db250ZW50UGFydCB7XG4gIC8qKlxuICAgKiBMZWFybiBhYm91dCBbZmlsZSBpbnB1dHNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy90ZXh0KSBmb3IgdGV4dFxuICAgKiBnZW5lcmF0aW9uLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBGaWxlIHtcbiAgICBmaWxlOiBGaWxlLkZpbGU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgY29udGVudCBwYXJ0LiBBbHdheXMgYGZpbGVgLlxuICAgICAqL1xuICAgIHR5cGU6ICdmaWxlJztcbiAgfVxuXG4gIGV4cG9ydCBuYW1lc3BhY2UgRmlsZSB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBGaWxlIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIGJhc2U2NCBlbmNvZGVkIGZpbGUgZGF0YSwgdXNlZCB3aGVuIHBhc3NpbmcgdGhlIGZpbGUgdG8gdGhlIG1vZGVsIGFzIGFcbiAgICAgICAqIHN0cmluZy5cbiAgICAgICAqL1xuICAgICAgZmlsZV9kYXRhPzogc3RyaW5nO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBJRCBvZiBhbiB1cGxvYWRlZCBmaWxlIHRvIHVzZSBhcyBpbnB1dC5cbiAgICAgICAqL1xuICAgICAgZmlsZV9pZD86IHN0cmluZztcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZmlsZSwgdXNlZCB3aGVuIHBhc3NpbmcgdGhlIGZpbGUgdG8gdGhlIG1vZGVsIGFzIGEgc3RyaW5nLlxuICAgICAgICovXG4gICAgICBmaWxlbmFtZT86IHN0cmluZztcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBMZWFybiBhYm91dCBbaW1hZ2UgaW5wdXRzXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvdmlzaW9uKS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDaGF0Q29tcGxldGlvbkNvbnRlbnRQYXJ0SW1hZ2Uge1xuICBpbWFnZV91cmw6IENoYXRDb21wbGV0aW9uQ29udGVudFBhcnRJbWFnZS5JbWFnZVVSTDtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGNvbnRlbnQgcGFydC5cbiAgICovXG4gIHR5cGU6ICdpbWFnZV91cmwnO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIENoYXRDb21wbGV0aW9uQ29udGVudFBhcnRJbWFnZSB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgSW1hZ2VVUkwge1xuICAgIC8qKlxuICAgICAqIEVpdGhlciBhIFVSTCBvZiB0aGUgaW1hZ2Ugb3IgdGhlIGJhc2U2NCBlbmNvZGVkIGltYWdlIGRhdGEuXG4gICAgICovXG4gICAgdXJsOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGRldGFpbCBsZXZlbCBvZiB0aGUgaW1hZ2UuIExlYXJuIG1vcmUgaW4gdGhlXG4gICAgICogW1Zpc2lvbiBndWlkZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3Zpc2lvbiNsb3ctb3ItaGlnaC1maWRlbGl0eS1pbWFnZS11bmRlcnN0YW5kaW5nKS5cbiAgICAgKi9cbiAgICBkZXRhaWw/OiAnYXV0bycgfCAnbG93JyB8ICdoaWdoJztcbiAgfVxufVxuXG4vKipcbiAqIExlYXJuIGFib3V0IFthdWRpbyBpbnB1dHNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9hdWRpbykuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhdENvbXBsZXRpb25Db250ZW50UGFydElucHV0QXVkaW8ge1xuICBpbnB1dF9hdWRpbzogQ2hhdENvbXBsZXRpb25Db250ZW50UGFydElucHV0QXVkaW8uSW5wdXRBdWRpbztcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGNvbnRlbnQgcGFydC4gQWx3YXlzIGBpbnB1dF9hdWRpb2AuXG4gICAqL1xuICB0eXBlOiAnaW5wdXRfYXVkaW8nO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIENoYXRDb21wbGV0aW9uQ29udGVudFBhcnRJbnB1dEF1ZGlvIHtcbiAgZXhwb3J0IGludGVyZmFjZSBJbnB1dEF1ZGlvIHtcbiAgICAvKipcbiAgICAgKiBCYXNlNjQgZW5jb2RlZCBhdWRpbyBkYXRhLlxuICAgICAqL1xuICAgIGRhdGE6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBmb3JtYXQgb2YgdGhlIGVuY29kZWQgYXVkaW8gZGF0YS4gQ3VycmVudGx5IHN1cHBvcnRzIFwid2F2XCIgYW5kIFwibXAzXCIuXG4gICAgICovXG4gICAgZm9ybWF0OiAnd2F2JyB8ICdtcDMnO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhdENvbXBsZXRpb25Db250ZW50UGFydFJlZnVzYWwge1xuICAvKipcbiAgICogVGhlIHJlZnVzYWwgbWVzc2FnZSBnZW5lcmF0ZWQgYnkgdGhlIG1vZGVsLlxuICAgKi9cbiAgcmVmdXNhbDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgY29udGVudCBwYXJ0LlxuICAgKi9cbiAgdHlwZTogJ3JlZnVzYWwnO1xufVxuXG4vKipcbiAqIExlYXJuIGFib3V0XG4gKiBbdGV4dCBpbnB1dHNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy90ZXh0LWdlbmVyYXRpb24pLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENoYXRDb21wbGV0aW9uQ29udGVudFBhcnRUZXh0IHtcbiAgLyoqXG4gICAqIFRoZSB0ZXh0IGNvbnRlbnQuXG4gICAqL1xuICB0ZXh0OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBjb250ZW50IHBhcnQuXG4gICAqL1xuICB0eXBlOiAndGV4dCc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhdENvbXBsZXRpb25EZWxldGVkIHtcbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgY2hhdCBjb21wbGV0aW9uIHRoYXQgd2FzIGRlbGV0ZWQuXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBjaGF0IGNvbXBsZXRpb24gd2FzIGRlbGV0ZWQuXG4gICAqL1xuICBkZWxldGVkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiBvYmplY3QgYmVpbmcgZGVsZXRlZC5cbiAgICovXG4gIG9iamVjdDogJ2NoYXQuY29tcGxldGlvbi5kZWxldGVkJztcbn1cblxuLyoqXG4gKiBEZXZlbG9wZXItcHJvdmlkZWQgaW5zdHJ1Y3Rpb25zIHRoYXQgdGhlIG1vZGVsIHNob3VsZCBmb2xsb3csIHJlZ2FyZGxlc3Mgb2ZcbiAqIG1lc3NhZ2VzIHNlbnQgYnkgdGhlIHVzZXIuIFdpdGggbzEgbW9kZWxzIGFuZCBuZXdlciwgYGRldmVsb3BlcmAgbWVzc2FnZXNcbiAqIHJlcGxhY2UgdGhlIHByZXZpb3VzIGBzeXN0ZW1gIG1lc3NhZ2VzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENoYXRDb21wbGV0aW9uRGV2ZWxvcGVyTWVzc2FnZVBhcmFtIHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50cyBvZiB0aGUgZGV2ZWxvcGVyIG1lc3NhZ2UuXG4gICAqL1xuICBjb250ZW50OiBzdHJpbmcgfCBBcnJheTxDaGF0Q29tcGxldGlvbkNvbnRlbnRQYXJ0VGV4dD47XG5cbiAgLyoqXG4gICAqIFRoZSByb2xlIG9mIHRoZSBtZXNzYWdlcyBhdXRob3IsIGluIHRoaXMgY2FzZSBgZGV2ZWxvcGVyYC5cbiAgICovXG4gIHJvbGU6ICdkZXZlbG9wZXInO1xuXG4gIC8qKlxuICAgKiBBbiBvcHRpb25hbCBuYW1lIGZvciB0aGUgcGFydGljaXBhbnQuIFByb3ZpZGVzIHRoZSBtb2RlbCBpbmZvcm1hdGlvbiB0b1xuICAgKiBkaWZmZXJlbnRpYXRlIGJldHdlZW4gcGFydGljaXBhbnRzIG9mIHRoZSBzYW1lIHJvbGUuXG4gICAqL1xuICBuYW1lPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIFNwZWNpZnlpbmcgYSBwYXJ0aWN1bGFyIGZ1bmN0aW9uIHZpYSBge1wibmFtZVwiOiBcIm15X2Z1bmN0aW9uXCJ9YCBmb3JjZXMgdGhlIG1vZGVsXG4gKiB0byBjYWxsIHRoYXQgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhdENvbXBsZXRpb25GdW5jdGlvbkNhbGxPcHRpb24ge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uIHRvIGNhbGwuXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDaGF0Q29tcGxldGlvbkZ1bmN0aW9uTWVzc2FnZVBhcmFtIHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50cyBvZiB0aGUgZnVuY3Rpb24gbWVzc2FnZS5cbiAgICovXG4gIGNvbnRlbnQ6IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbiB0byBjYWxsLlxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgcm9sZSBvZiB0aGUgbWVzc2FnZXMgYXV0aG9yLCBpbiB0aGlzIGNhc2UgYGZ1bmN0aW9uYC5cbiAgICovXG4gIHJvbGU6ICdmdW5jdGlvbic7XG59XG5cbi8qKlxuICogQSBjaGF0IGNvbXBsZXRpb24gbWVzc2FnZSBnZW5lcmF0ZWQgYnkgdGhlIG1vZGVsLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENoYXRDb21wbGV0aW9uTWVzc2FnZSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudHMgb2YgdGhlIG1lc3NhZ2UuXG4gICAqL1xuICBjb250ZW50OiBzdHJpbmcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgcmVmdXNhbCBtZXNzYWdlIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwuXG4gICAqL1xuICByZWZ1c2FsOiBzdHJpbmcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgcm9sZSBvZiB0aGUgYXV0aG9yIG9mIHRoaXMgbWVzc2FnZS5cbiAgICovXG4gIHJvbGU6ICdhc3Npc3RhbnQnO1xuXG4gIC8qKlxuICAgKiBBbm5vdGF0aW9ucyBmb3IgdGhlIG1lc3NhZ2UsIHdoZW4gYXBwbGljYWJsZSwgYXMgd2hlbiB1c2luZyB0aGVcbiAgICogW3dlYiBzZWFyY2ggdG9vbF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3Rvb2xzLXdlYi1zZWFyY2g/YXBpLW1vZGU9Y2hhdCkuXG4gICAqL1xuICBhbm5vdGF0aW9ucz86IEFycmF5PENoYXRDb21wbGV0aW9uTWVzc2FnZS5Bbm5vdGF0aW9uPjtcblxuICAvKipcbiAgICogSWYgdGhlIGF1ZGlvIG91dHB1dCBtb2RhbGl0eSBpcyByZXF1ZXN0ZWQsIHRoaXMgb2JqZWN0IGNvbnRhaW5zIGRhdGEgYWJvdXQgdGhlXG4gICAqIGF1ZGlvIHJlc3BvbnNlIGZyb20gdGhlIG1vZGVsLlxuICAgKiBbTGVhcm4gbW9yZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL2F1ZGlvKS5cbiAgICovXG4gIGF1ZGlvPzogQ2hhdENvbXBsZXRpb25BdWRpbyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQgYW5kIHJlcGxhY2VkIGJ5IGB0b29sX2NhbGxzYC4gVGhlIG5hbWUgYW5kIGFyZ3VtZW50cyBvZiBhXG4gICAqIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCwgYXMgZ2VuZXJhdGVkIGJ5IHRoZSBtb2RlbC5cbiAgICovXG4gIGZ1bmN0aW9uX2NhbGw/OiBDaGF0Q29tcGxldGlvbk1lc3NhZ2UuRnVuY3Rpb25DYWxsIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIHRvb2wgY2FsbHMgZ2VuZXJhdGVkIGJ5IHRoZSBtb2RlbCwgc3VjaCBhcyBmdW5jdGlvbiBjYWxscy5cbiAgICovXG4gIHRvb2xfY2FsbHM/OiBBcnJheTxDaGF0Q29tcGxldGlvbk1lc3NhZ2VUb29sQ2FsbD47XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ2hhdENvbXBsZXRpb25NZXNzYWdlIHtcbiAgLyoqXG4gICAqIEEgVVJMIGNpdGF0aW9uIHdoZW4gdXNpbmcgd2ViIHNlYXJjaC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgQW5ub3RhdGlvbiB7XG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIFVSTCBjaXRhdGlvbi4gQWx3YXlzIGB1cmxfY2l0YXRpb25gLlxuICAgICAqL1xuICAgIHR5cGU6ICd1cmxfY2l0YXRpb24nO1xuXG4gICAgLyoqXG4gICAgICogQSBVUkwgY2l0YXRpb24gd2hlbiB1c2luZyB3ZWIgc2VhcmNoLlxuICAgICAqL1xuICAgIHVybF9jaXRhdGlvbjogQW5ub3RhdGlvbi5VUkxDaXRhdGlvbjtcbiAgfVxuXG4gIGV4cG9ydCBuYW1lc3BhY2UgQW5ub3RhdGlvbiB7XG4gICAgLyoqXG4gICAgICogQSBVUkwgY2l0YXRpb24gd2hlbiB1c2luZyB3ZWIgc2VhcmNoLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgVVJMQ2l0YXRpb24ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgaW5kZXggb2YgdGhlIGxhc3QgY2hhcmFjdGVyIG9mIHRoZSBVUkwgY2l0YXRpb24gaW4gdGhlIG1lc3NhZ2UuXG4gICAgICAgKi9cbiAgICAgIGVuZF9pbmRleDogbnVtYmVyO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBpbmRleCBvZiB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIHRoZSBVUkwgY2l0YXRpb24gaW4gdGhlIG1lc3NhZ2UuXG4gICAgICAgKi9cbiAgICAgIHN0YXJ0X2luZGV4OiBudW1iZXI7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHRpdGxlIG9mIHRoZSB3ZWIgcmVzb3VyY2UuXG4gICAgICAgKi9cbiAgICAgIHRpdGxlOiBzdHJpbmc7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIFVSTCBvZiB0aGUgd2ViIHJlc291cmNlLlxuICAgICAgICovXG4gICAgICB1cmw6IHN0cmluZztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBhbmQgcmVwbGFjZWQgYnkgYHRvb2xfY2FsbHNgLiBUaGUgbmFtZSBhbmQgYXJndW1lbnRzIG9mIGFcbiAgICogZnVuY3Rpb24gdGhhdCBzaG91bGQgYmUgY2FsbGVkLCBhcyBnZW5lcmF0ZWQgYnkgdGhlIG1vZGVsLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBGdW5jdGlvbkNhbGwge1xuICAgIC8qKlxuICAgICAqIFRoZSBhcmd1bWVudHMgdG8gY2FsbCB0aGUgZnVuY3Rpb24gd2l0aCwgYXMgZ2VuZXJhdGVkIGJ5IHRoZSBtb2RlbCBpbiBKU09OXG4gICAgICogZm9ybWF0LiBOb3RlIHRoYXQgdGhlIG1vZGVsIGRvZXMgbm90IGFsd2F5cyBnZW5lcmF0ZSB2YWxpZCBKU09OLCBhbmQgbWF5XG4gICAgICogaGFsbHVjaW5hdGUgcGFyYW1ldGVycyBub3QgZGVmaW5lZCBieSB5b3VyIGZ1bmN0aW9uIHNjaGVtYS4gVmFsaWRhdGUgdGhlXG4gICAgICogYXJndW1lbnRzIGluIHlvdXIgY29kZSBiZWZvcmUgY2FsbGluZyB5b3VyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGFyZ3VtZW50czogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uIHRvIGNhbGwuXG4gICAgICovXG4gICAgbmFtZTogc3RyaW5nO1xuICB9XG59XG5cbi8qKlxuICogRGV2ZWxvcGVyLXByb3ZpZGVkIGluc3RydWN0aW9ucyB0aGF0IHRoZSBtb2RlbCBzaG91bGQgZm9sbG93LCByZWdhcmRsZXNzIG9mXG4gKiBtZXNzYWdlcyBzZW50IGJ5IHRoZSB1c2VyLiBXaXRoIG8xIG1vZGVscyBhbmQgbmV3ZXIsIGBkZXZlbG9wZXJgIG1lc3NhZ2VzXG4gKiByZXBsYWNlIHRoZSBwcmV2aW91cyBgc3lzdGVtYCBtZXNzYWdlcy5cbiAqL1xuZXhwb3J0IHR5cGUgQ2hhdENvbXBsZXRpb25NZXNzYWdlUGFyYW0gPVxuICB8IENoYXRDb21wbGV0aW9uRGV2ZWxvcGVyTWVzc2FnZVBhcmFtXG4gIHwgQ2hhdENvbXBsZXRpb25TeXN0ZW1NZXNzYWdlUGFyYW1cbiAgfCBDaGF0Q29tcGxldGlvblVzZXJNZXNzYWdlUGFyYW1cbiAgfCBDaGF0Q29tcGxldGlvbkFzc2lzdGFudE1lc3NhZ2VQYXJhbVxuICB8IENoYXRDb21wbGV0aW9uVG9vbE1lc3NhZ2VQYXJhbVxuICB8IENoYXRDb21wbGV0aW9uRnVuY3Rpb25NZXNzYWdlUGFyYW07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhdENvbXBsZXRpb25NZXNzYWdlVG9vbENhbGwge1xuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSB0b29sIGNhbGwuXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZnVuY3Rpb24gdGhhdCB0aGUgbW9kZWwgY2FsbGVkLlxuICAgKi9cbiAgZnVuY3Rpb246IENoYXRDb21wbGV0aW9uTWVzc2FnZVRvb2xDYWxsLkZ1bmN0aW9uO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgdG9vbC4gQ3VycmVudGx5LCBvbmx5IGBmdW5jdGlvbmAgaXMgc3VwcG9ydGVkLlxuICAgKi9cbiAgdHlwZTogJ2Z1bmN0aW9uJztcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBDaGF0Q29tcGxldGlvbk1lc3NhZ2VUb29sQ2FsbCB7XG4gIC8qKlxuICAgKiBUaGUgZnVuY3Rpb24gdGhhdCB0aGUgbW9kZWwgY2FsbGVkLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBGdW5jdGlvbiB7XG4gICAgLyoqXG4gICAgICogVGhlIGFyZ3VtZW50cyB0byBjYWxsIHRoZSBmdW5jdGlvbiB3aXRoLCBhcyBnZW5lcmF0ZWQgYnkgdGhlIG1vZGVsIGluIEpTT05cbiAgICAgKiBmb3JtYXQuIE5vdGUgdGhhdCB0aGUgbW9kZWwgZG9lcyBub3QgYWx3YXlzIGdlbmVyYXRlIHZhbGlkIEpTT04sIGFuZCBtYXlcbiAgICAgKiBoYWxsdWNpbmF0ZSBwYXJhbWV0ZXJzIG5vdCBkZWZpbmVkIGJ5IHlvdXIgZnVuY3Rpb24gc2NoZW1hLiBWYWxpZGF0ZSB0aGVcbiAgICAgKiBhcmd1bWVudHMgaW4geW91ciBjb2RlIGJlZm9yZSBjYWxsaW5nIHlvdXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgYXJndW1lbnRzOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24gdG8gY2FsbC5cbiAgICAgKi9cbiAgICBuYW1lOiBzdHJpbmc7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgQ2hhdENvbXBsZXRpb25Nb2RhbGl0eSA9ICd0ZXh0JyB8ICdhdWRpbyc7XG5cbi8qKlxuICogU3BlY2lmaWVzIGEgdG9vbCB0aGUgbW9kZWwgc2hvdWxkIHVzZS4gVXNlIHRvIGZvcmNlIHRoZSBtb2RlbCB0byBjYWxsIGEgc3BlY2lmaWNcbiAqIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENoYXRDb21wbGV0aW9uTmFtZWRUb29sQ2hvaWNlIHtcbiAgZnVuY3Rpb246IENoYXRDb21wbGV0aW9uTmFtZWRUb29sQ2hvaWNlLkZ1bmN0aW9uO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgdG9vbC4gQ3VycmVudGx5LCBvbmx5IGBmdW5jdGlvbmAgaXMgc3VwcG9ydGVkLlxuICAgKi9cbiAgdHlwZTogJ2Z1bmN0aW9uJztcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBDaGF0Q29tcGxldGlvbk5hbWVkVG9vbENob2ljZSB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgRnVuY3Rpb24ge1xuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbiB0byBjYWxsLlxuICAgICAqL1xuICAgIG5hbWU6IHN0cmluZztcbiAgfVxufVxuXG4vKipcbiAqIFN0YXRpYyBwcmVkaWN0ZWQgb3V0cHV0IGNvbnRlbnQsIHN1Y2ggYXMgdGhlIGNvbnRlbnQgb2YgYSB0ZXh0IGZpbGUgdGhhdCBpc1xuICogYmVpbmcgcmVnZW5lcmF0ZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhdENvbXBsZXRpb25QcmVkaWN0aW9uQ29udGVudCB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudCB0aGF0IHNob3VsZCBiZSBtYXRjaGVkIHdoZW4gZ2VuZXJhdGluZyBhIG1vZGVsIHJlc3BvbnNlLiBJZlxuICAgKiBnZW5lcmF0ZWQgdG9rZW5zIHdvdWxkIG1hdGNoIHRoaXMgY29udGVudCwgdGhlIGVudGlyZSBtb2RlbCByZXNwb25zZSBjYW4gYmVcbiAgICogcmV0dXJuZWQgbXVjaCBtb3JlIHF1aWNrbHkuXG4gICAqL1xuICBjb250ZW50OiBzdHJpbmcgfCBBcnJheTxDaGF0Q29tcGxldGlvbkNvbnRlbnRQYXJ0VGV4dD47XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBwcmVkaWN0ZWQgY29udGVudCB5b3Ugd2FudCB0byBwcm92aWRlLiBUaGlzIHR5cGUgaXMgY3VycmVudGx5XG4gICAqIGFsd2F5cyBgY29udGVudGAuXG4gICAqL1xuICB0eXBlOiAnY29udGVudCc7XG59XG5cbi8qKlxuICogVGhlIHJvbGUgb2YgdGhlIGF1dGhvciBvZiBhIG1lc3NhZ2VcbiAqL1xuZXhwb3J0IHR5cGUgQ2hhdENvbXBsZXRpb25Sb2xlID0gJ2RldmVsb3BlcicgfCAnc3lzdGVtJyB8ICd1c2VyJyB8ICdhc3Npc3RhbnQnIHwgJ3Rvb2wnIHwgJ2Z1bmN0aW9uJztcblxuLyoqXG4gKiBBIGNoYXQgY29tcGxldGlvbiBtZXNzYWdlIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhdENvbXBsZXRpb25TdG9yZU1lc3NhZ2UgZXh0ZW5kcyBDaGF0Q29tcGxldGlvbk1lc3NhZ2Uge1xuICAvKipcbiAgICogVGhlIGlkZW50aWZpZXIgb2YgdGhlIGNoYXQgbWVzc2FnZS5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG59XG5cbi8qKlxuICogT3B0aW9ucyBmb3Igc3RyZWFtaW5nIHJlc3BvbnNlLiBPbmx5IHNldCB0aGlzIHdoZW4geW91IHNldCBgc3RyZWFtOiB0cnVlYC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDaGF0Q29tcGxldGlvblN0cmVhbU9wdGlvbnMge1xuICAvKipcbiAgICogSWYgc2V0LCBhbiBhZGRpdGlvbmFsIGNodW5rIHdpbGwgYmUgc3RyZWFtZWQgYmVmb3JlIHRoZSBgZGF0YTogW0RPTkVdYCBtZXNzYWdlLlxuICAgKiBUaGUgYHVzYWdlYCBmaWVsZCBvbiB0aGlzIGNodW5rIHNob3dzIHRoZSB0b2tlbiB1c2FnZSBzdGF0aXN0aWNzIGZvciB0aGUgZW50aXJlXG4gICAqIHJlcXVlc3QsIGFuZCB0aGUgYGNob2ljZXNgIGZpZWxkIHdpbGwgYWx3YXlzIGJlIGFuIGVtcHR5IGFycmF5LlxuICAgKlxuICAgKiBBbGwgb3RoZXIgY2h1bmtzIHdpbGwgYWxzbyBpbmNsdWRlIGEgYHVzYWdlYCBmaWVsZCwgYnV0IHdpdGggYSBudWxsIHZhbHVlLlxuICAgKiAqKk5PVEU6KiogSWYgdGhlIHN0cmVhbSBpcyBpbnRlcnJ1cHRlZCwgeW91IG1heSBub3QgcmVjZWl2ZSB0aGUgZmluYWwgdXNhZ2VcbiAgICogY2h1bmsgd2hpY2ggY29udGFpbnMgdGhlIHRvdGFsIHRva2VuIHVzYWdlIGZvciB0aGUgcmVxdWVzdC5cbiAgICovXG4gIGluY2x1ZGVfdXNhZ2U/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIERldmVsb3Blci1wcm92aWRlZCBpbnN0cnVjdGlvbnMgdGhhdCB0aGUgbW9kZWwgc2hvdWxkIGZvbGxvdywgcmVnYXJkbGVzcyBvZlxuICogbWVzc2FnZXMgc2VudCBieSB0aGUgdXNlci4gV2l0aCBvMSBtb2RlbHMgYW5kIG5ld2VyLCB1c2UgYGRldmVsb3BlcmAgbWVzc2FnZXNcbiAqIGZvciB0aGlzIHB1cnBvc2UgaW5zdGVhZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDaGF0Q29tcGxldGlvblN5c3RlbU1lc3NhZ2VQYXJhbSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudHMgb2YgdGhlIHN5c3RlbSBtZXNzYWdlLlxuICAgKi9cbiAgY29udGVudDogc3RyaW5nIHwgQXJyYXk8Q2hhdENvbXBsZXRpb25Db250ZW50UGFydFRleHQ+O1xuXG4gIC8qKlxuICAgKiBUaGUgcm9sZSBvZiB0aGUgbWVzc2FnZXMgYXV0aG9yLCBpbiB0aGlzIGNhc2UgYHN5c3RlbWAuXG4gICAqL1xuICByb2xlOiAnc3lzdGVtJztcblxuICAvKipcbiAgICogQW4gb3B0aW9uYWwgbmFtZSBmb3IgdGhlIHBhcnRpY2lwYW50LiBQcm92aWRlcyB0aGUgbW9kZWwgaW5mb3JtYXRpb24gdG9cbiAgICogZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIHBhcnRpY2lwYW50cyBvZiB0aGUgc2FtZSByb2xlLlxuICAgKi9cbiAgbmFtZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaGF0Q29tcGxldGlvblRva2VuTG9ncHJvYiB7XG4gIC8qKlxuICAgKiBUaGUgdG9rZW4uXG4gICAqL1xuICB0b2tlbjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBIGxpc3Qgb2YgaW50ZWdlcnMgcmVwcmVzZW50aW5nIHRoZSBVVEYtOCBieXRlcyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdG9rZW4uXG4gICAqIFVzZWZ1bCBpbiBpbnN0YW5jZXMgd2hlcmUgY2hhcmFjdGVycyBhcmUgcmVwcmVzZW50ZWQgYnkgbXVsdGlwbGUgdG9rZW5zIGFuZFxuICAgKiB0aGVpciBieXRlIHJlcHJlc2VudGF0aW9ucyBtdXN0IGJlIGNvbWJpbmVkIHRvIGdlbmVyYXRlIHRoZSBjb3JyZWN0IHRleHRcbiAgICogcmVwcmVzZW50YXRpb24uIENhbiBiZSBgbnVsbGAgaWYgdGhlcmUgaXMgbm8gYnl0ZXMgcmVwcmVzZW50YXRpb24gZm9yIHRoZSB0b2tlbi5cbiAgICovXG4gIGJ5dGVzOiBBcnJheTxudW1iZXI+IHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIGxvZyBwcm9iYWJpbGl0eSBvZiB0aGlzIHRva2VuLCBpZiBpdCBpcyB3aXRoaW4gdGhlIHRvcCAyMCBtb3N0IGxpa2VseVxuICAgKiB0b2tlbnMuIE90aGVyd2lzZSwgdGhlIHZhbHVlIGAtOTk5OS4wYCBpcyB1c2VkIHRvIHNpZ25pZnkgdGhhdCB0aGUgdG9rZW4gaXMgdmVyeVxuICAgKiB1bmxpa2VseS5cbiAgICovXG4gIGxvZ3Byb2I6IG51bWJlcjtcblxuICAvKipcbiAgICogTGlzdCBvZiB0aGUgbW9zdCBsaWtlbHkgdG9rZW5zIGFuZCB0aGVpciBsb2cgcHJvYmFiaWxpdHksIGF0IHRoaXMgdG9rZW5cbiAgICogcG9zaXRpb24uIEluIHJhcmUgY2FzZXMsIHRoZXJlIG1heSBiZSBmZXdlciB0aGFuIHRoZSBudW1iZXIgb2YgcmVxdWVzdGVkXG4gICAqIGB0b3BfbG9ncHJvYnNgIHJldHVybmVkLlxuICAgKi9cbiAgdG9wX2xvZ3Byb2JzOiBBcnJheTxDaGF0Q29tcGxldGlvblRva2VuTG9ncHJvYi5Ub3BMb2dwcm9iPjtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBDaGF0Q29tcGxldGlvblRva2VuTG9ncHJvYiB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgVG9wTG9ncHJvYiB7XG4gICAgLyoqXG4gICAgICogVGhlIHRva2VuLlxuICAgICAqL1xuICAgIHRva2VuOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBIGxpc3Qgb2YgaW50ZWdlcnMgcmVwcmVzZW50aW5nIHRoZSBVVEYtOCBieXRlcyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdG9rZW4uXG4gICAgICogVXNlZnVsIGluIGluc3RhbmNlcyB3aGVyZSBjaGFyYWN0ZXJzIGFyZSByZXByZXNlbnRlZCBieSBtdWx0aXBsZSB0b2tlbnMgYW5kXG4gICAgICogdGhlaXIgYnl0ZSByZXByZXNlbnRhdGlvbnMgbXVzdCBiZSBjb21iaW5lZCB0byBnZW5lcmF0ZSB0aGUgY29ycmVjdCB0ZXh0XG4gICAgICogcmVwcmVzZW50YXRpb24uIENhbiBiZSBgbnVsbGAgaWYgdGhlcmUgaXMgbm8gYnl0ZXMgcmVwcmVzZW50YXRpb24gZm9yIHRoZSB0b2tlbi5cbiAgICAgKi9cbiAgICBieXRlczogQXJyYXk8bnVtYmVyPiB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbG9nIHByb2JhYmlsaXR5IG9mIHRoaXMgdG9rZW4sIGlmIGl0IGlzIHdpdGhpbiB0aGUgdG9wIDIwIG1vc3QgbGlrZWx5XG4gICAgICogdG9rZW5zLiBPdGhlcndpc2UsIHRoZSB2YWx1ZSBgLTk5OTkuMGAgaXMgdXNlZCB0byBzaWduaWZ5IHRoYXQgdGhlIHRva2VuIGlzIHZlcnlcbiAgICAgKiB1bmxpa2VseS5cbiAgICAgKi9cbiAgICBsb2dwcm9iOiBudW1iZXI7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaGF0Q29tcGxldGlvblRvb2wge1xuICBmdW5jdGlvbjogU2hhcmVkLkZ1bmN0aW9uRGVmaW5pdGlvbjtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIHRvb2wuIEN1cnJlbnRseSwgb25seSBgZnVuY3Rpb25gIGlzIHN1cHBvcnRlZC5cbiAgICovXG4gIHR5cGU6ICdmdW5jdGlvbic7XG59XG5cbi8qKlxuICogQ29udHJvbHMgd2hpY2ggKGlmIGFueSkgdG9vbCBpcyBjYWxsZWQgYnkgdGhlIG1vZGVsLiBgbm9uZWAgbWVhbnMgdGhlIG1vZGVsIHdpbGxcbiAqIG5vdCBjYWxsIGFueSB0b29sIGFuZCBpbnN0ZWFkIGdlbmVyYXRlcyBhIG1lc3NhZ2UuIGBhdXRvYCBtZWFucyB0aGUgbW9kZWwgY2FuXG4gKiBwaWNrIGJldHdlZW4gZ2VuZXJhdGluZyBhIG1lc3NhZ2Ugb3IgY2FsbGluZyBvbmUgb3IgbW9yZSB0b29scy4gYHJlcXVpcmVkYCBtZWFuc1xuICogdGhlIG1vZGVsIG11c3QgY2FsbCBvbmUgb3IgbW9yZSB0b29scy4gU3BlY2lmeWluZyBhIHBhcnRpY3VsYXIgdG9vbCB2aWFcbiAqIGB7XCJ0eXBlXCI6IFwiZnVuY3Rpb25cIiwgXCJmdW5jdGlvblwiOiB7XCJuYW1lXCI6IFwibXlfZnVuY3Rpb25cIn19YCBmb3JjZXMgdGhlIG1vZGVsIHRvXG4gKiBjYWxsIHRoYXQgdG9vbC5cbiAqXG4gKiBgbm9uZWAgaXMgdGhlIGRlZmF1bHQgd2hlbiBubyB0b29scyBhcmUgcHJlc2VudC4gYGF1dG9gIGlzIHRoZSBkZWZhdWx0IGlmIHRvb2xzXG4gKiBhcmUgcHJlc2VudC5cbiAqL1xuZXhwb3J0IHR5cGUgQ2hhdENvbXBsZXRpb25Ub29sQ2hvaWNlT3B0aW9uID0gJ25vbmUnIHwgJ2F1dG8nIHwgJ3JlcXVpcmVkJyB8IENoYXRDb21wbGV0aW9uTmFtZWRUb29sQ2hvaWNlO1xuXG5leHBvcnQgaW50ZXJmYWNlIENoYXRDb21wbGV0aW9uVG9vbE1lc3NhZ2VQYXJhbSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGVudHMgb2YgdGhlIHRvb2wgbWVzc2FnZS5cbiAgICovXG4gIGNvbnRlbnQ6IHN0cmluZyB8IEFycmF5PENoYXRDb21wbGV0aW9uQ29udGVudFBhcnRUZXh0PjtcblxuICAvKipcbiAgICogVGhlIHJvbGUgb2YgdGhlIG1lc3NhZ2VzIGF1dGhvciwgaW4gdGhpcyBjYXNlIGB0b29sYC5cbiAgICovXG4gIHJvbGU6ICd0b29sJztcblxuICAvKipcbiAgICogVG9vbCBjYWxsIHRoYXQgdGhpcyBtZXNzYWdlIGlzIHJlc3BvbmRpbmcgdG8uXG4gICAqL1xuICB0b29sX2NhbGxfaWQ6IHN0cmluZztcbn1cblxuLyoqXG4gKiBNZXNzYWdlcyBzZW50IGJ5IGFuIGVuZCB1c2VyLCBjb250YWluaW5nIHByb21wdHMgb3IgYWRkaXRpb25hbCBjb250ZXh0XG4gKiBpbmZvcm1hdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDaGF0Q29tcGxldGlvblVzZXJNZXNzYWdlUGFyYW0ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnRzIG9mIHRoZSB1c2VyIG1lc3NhZ2UuXG4gICAqL1xuICBjb250ZW50OiBzdHJpbmcgfCBBcnJheTxDaGF0Q29tcGxldGlvbkNvbnRlbnRQYXJ0PjtcblxuICAvKipcbiAgICogVGhlIHJvbGUgb2YgdGhlIG1lc3NhZ2VzIGF1dGhvciwgaW4gdGhpcyBjYXNlIGB1c2VyYC5cbiAgICovXG4gIHJvbGU6ICd1c2VyJztcblxuICAvKipcbiAgICogQW4gb3B0aW9uYWwgbmFtZSBmb3IgdGhlIHBhcnRpY2lwYW50LiBQcm92aWRlcyB0aGUgbW9kZWwgaW5mb3JtYXRpb24gdG9cbiAgICogZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIHBhcnRpY2lwYW50cyBvZiB0aGUgc2FtZSByb2xlLlxuICAgKi9cbiAgbmFtZT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBDaGF0Q29tcGxldGlvbk1lc3NhZ2VQYXJhbSBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkXG4gKi9cbmV4cG9ydCB0eXBlIENyZWF0ZUNoYXRDb21wbGV0aW9uUmVxdWVzdE1lc3NhZ2UgPSBDaGF0Q29tcGxldGlvbk1lc3NhZ2VQYXJhbTtcblxuZXhwb3J0IHR5cGUgQ2hhdENvbXBsZXRpb25SZWFzb25pbmdFZmZvcnQgPSBTaGFyZWQuUmVhc29uaW5nRWZmb3J0IHwgbnVsbDtcblxuZXhwb3J0IHR5cGUgQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXMgPVxuICB8IENoYXRDb21wbGV0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nXG4gIHwgQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXNTdHJlYW1pbmc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXNCYXNlIHtcbiAgLyoqXG4gICAqIEEgbGlzdCBvZiBtZXNzYWdlcyBjb21wcmlzaW5nIHRoZSBjb252ZXJzYXRpb24gc28gZmFyLiBEZXBlbmRpbmcgb24gdGhlXG4gICAqIFttb2RlbF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvbW9kZWxzKSB5b3UgdXNlLCBkaWZmZXJlbnQgbWVzc2FnZVxuICAgKiB0eXBlcyAobW9kYWxpdGllcykgYXJlIHN1cHBvcnRlZCwgbGlrZVxuICAgKiBbdGV4dF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3RleHQtZ2VuZXJhdGlvbiksXG4gICAqIFtpbWFnZXNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy92aXNpb24pLCBhbmRcbiAgICogW2F1ZGlvXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvYXVkaW8pLlxuICAgKi9cbiAgbWVzc2FnZXM6IEFycmF5PENoYXRDb21wbGV0aW9uTWVzc2FnZVBhcmFtPjtcblxuICAvKipcbiAgICogTW9kZWwgSUQgdXNlZCB0byBnZW5lcmF0ZSB0aGUgcmVzcG9uc2UsIGxpa2UgYGdwdC00b2Agb3IgYG8zYC4gT3BlbkFJIG9mZmVycyBhXG4gICAqIHdpZGUgcmFuZ2Ugb2YgbW9kZWxzIHdpdGggZGlmZmVyZW50IGNhcGFiaWxpdGllcywgcGVyZm9ybWFuY2UgY2hhcmFjdGVyaXN0aWNzLFxuICAgKiBhbmQgcHJpY2UgcG9pbnRzLiBSZWZlciB0byB0aGVcbiAgICogW21vZGVsIGd1aWRlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9tb2RlbHMpIHRvIGJyb3dzZSBhbmQgY29tcGFyZVxuICAgKiBhdmFpbGFibGUgbW9kZWxzLlxuICAgKi9cbiAgbW9kZWw6IChzdHJpbmcgJiB7fSkgfCBTaGFyZWQuQ2hhdE1vZGVsO1xuXG4gIC8qKlxuICAgKiBQYXJhbWV0ZXJzIGZvciBhdWRpbyBvdXRwdXQuIFJlcXVpcmVkIHdoZW4gYXVkaW8gb3V0cHV0IGlzIHJlcXVlc3RlZCB3aXRoXG4gICAqIGBtb2RhbGl0aWVzOiBbXCJhdWRpb1wiXWAuXG4gICAqIFtMZWFybiBtb3JlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvYXVkaW8pLlxuICAgKi9cbiAgYXVkaW8/OiBDaGF0Q29tcGxldGlvbkF1ZGlvUGFyYW0gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBOdW1iZXIgYmV0d2VlbiAtMi4wIGFuZCAyLjAuIFBvc2l0aXZlIHZhbHVlcyBwZW5hbGl6ZSBuZXcgdG9rZW5zIGJhc2VkIG9uIHRoZWlyXG4gICAqIGV4aXN0aW5nIGZyZXF1ZW5jeSBpbiB0aGUgdGV4dCBzbyBmYXIsIGRlY3JlYXNpbmcgdGhlIG1vZGVsJ3MgbGlrZWxpaG9vZCB0b1xuICAgKiByZXBlYXQgdGhlIHNhbWUgbGluZSB2ZXJiYXRpbS5cbiAgICovXG4gIGZyZXF1ZW5jeV9wZW5hbHR5PzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBpbiBmYXZvciBvZiBgdG9vbF9jaG9pY2VgLlxuICAgKlxuICAgKiBDb250cm9scyB3aGljaCAoaWYgYW55KSBmdW5jdGlvbiBpcyBjYWxsZWQgYnkgdGhlIG1vZGVsLlxuICAgKlxuICAgKiBgbm9uZWAgbWVhbnMgdGhlIG1vZGVsIHdpbGwgbm90IGNhbGwgYSBmdW5jdGlvbiBhbmQgaW5zdGVhZCBnZW5lcmF0ZXMgYSBtZXNzYWdlLlxuICAgKlxuICAgKiBgYXV0b2AgbWVhbnMgdGhlIG1vZGVsIGNhbiBwaWNrIGJldHdlZW4gZ2VuZXJhdGluZyBhIG1lc3NhZ2Ugb3IgY2FsbGluZyBhXG4gICAqIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBTcGVjaWZ5aW5nIGEgcGFydGljdWxhciBmdW5jdGlvbiB2aWEgYHtcIm5hbWVcIjogXCJteV9mdW5jdGlvblwifWAgZm9yY2VzIHRoZSBtb2RlbFxuICAgKiB0byBjYWxsIHRoYXQgZnVuY3Rpb24uXG4gICAqXG4gICAqIGBub25lYCBpcyB0aGUgZGVmYXVsdCB3aGVuIG5vIGZ1bmN0aW9ucyBhcmUgcHJlc2VudC4gYGF1dG9gIGlzIHRoZSBkZWZhdWx0IGlmXG4gICAqIGZ1bmN0aW9ucyBhcmUgcHJlc2VudC5cbiAgICovXG4gIGZ1bmN0aW9uX2NhbGw/OiAnbm9uZScgfCAnYXV0bycgfCBDaGF0Q29tcGxldGlvbkZ1bmN0aW9uQ2FsbE9wdGlvbjtcblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBpbiBmYXZvciBvZiBgdG9vbHNgLlxuICAgKlxuICAgKiBBIGxpc3Qgb2YgZnVuY3Rpb25zIHRoZSBtb2RlbCBtYXkgZ2VuZXJhdGUgSlNPTiBpbnB1dHMgZm9yLlxuICAgKi9cbiAgZnVuY3Rpb25zPzogQXJyYXk8Q2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXMuRnVuY3Rpb24+O1xuXG4gIC8qKlxuICAgKiBNb2RpZnkgdGhlIGxpa2VsaWhvb2Qgb2Ygc3BlY2lmaWVkIHRva2VucyBhcHBlYXJpbmcgaW4gdGhlIGNvbXBsZXRpb24uXG4gICAqXG4gICAqIEFjY2VwdHMgYSBKU09OIG9iamVjdCB0aGF0IG1hcHMgdG9rZW5zIChzcGVjaWZpZWQgYnkgdGhlaXIgdG9rZW4gSUQgaW4gdGhlXG4gICAqIHRva2VuaXplcikgdG8gYW4gYXNzb2NpYXRlZCBiaWFzIHZhbHVlIGZyb20gLTEwMCB0byAxMDAuIE1hdGhlbWF0aWNhbGx5LCB0aGVcbiAgICogYmlhcyBpcyBhZGRlZCB0byB0aGUgbG9naXRzIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwgcHJpb3IgdG8gc2FtcGxpbmcuIFRoZSBleGFjdFxuICAgKiBlZmZlY3Qgd2lsbCB2YXJ5IHBlciBtb2RlbCwgYnV0IHZhbHVlcyBiZXR3ZWVuIC0xIGFuZCAxIHNob3VsZCBkZWNyZWFzZSBvclxuICAgKiBpbmNyZWFzZSBsaWtlbGlob29kIG9mIHNlbGVjdGlvbjsgdmFsdWVzIGxpa2UgLTEwMCBvciAxMDAgc2hvdWxkIHJlc3VsdCBpbiBhIGJhblxuICAgKiBvciBleGNsdXNpdmUgc2VsZWN0aW9uIG9mIHRoZSByZWxldmFudCB0b2tlbi5cbiAgICovXG4gIGxvZ2l0X2JpYXM/OiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+IHwgbnVsbDtcblxuICAvKipcbiAgICogV2hldGhlciB0byByZXR1cm4gbG9nIHByb2JhYmlsaXRpZXMgb2YgdGhlIG91dHB1dCB0b2tlbnMgb3Igbm90LiBJZiB0cnVlLFxuICAgKiByZXR1cm5zIHRoZSBsb2cgcHJvYmFiaWxpdGllcyBvZiBlYWNoIG91dHB1dCB0b2tlbiByZXR1cm5lZCBpbiB0aGUgYGNvbnRlbnRgIG9mXG4gICAqIGBtZXNzYWdlYC5cbiAgICovXG4gIGxvZ3Byb2JzPzogYm9vbGVhbiB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEFuIHVwcGVyIGJvdW5kIGZvciB0aGUgbnVtYmVyIG9mIHRva2VucyB0aGF0IGNhbiBiZSBnZW5lcmF0ZWQgZm9yIGEgY29tcGxldGlvbixcbiAgICogaW5jbHVkaW5nIHZpc2libGUgb3V0cHV0IHRva2VucyBhbmRcbiAgICogW3JlYXNvbmluZyB0b2tlbnNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9yZWFzb25pbmcpLlxuICAgKi9cbiAgbWF4X2NvbXBsZXRpb25fdG9rZW5zPzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgVGhlIG1heGltdW0gbnVtYmVyIG9mIFt0b2tlbnNdKC90b2tlbml6ZXIpIHRoYXQgY2FuIGJlIGdlbmVyYXRlZCBpblxuICAgKiB0aGUgY2hhdCBjb21wbGV0aW9uLiBUaGlzIHZhbHVlIGNhbiBiZSB1c2VkIHRvIGNvbnRyb2xcbiAgICogW2Nvc3RzXShodHRwczovL29wZW5haS5jb20vYXBpL3ByaWNpbmcvKSBmb3IgdGV4dCBnZW5lcmF0ZWQgdmlhIEFQSS5cbiAgICpcbiAgICogVGhpcyB2YWx1ZSBpcyBub3cgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBgbWF4X2NvbXBsZXRpb25fdG9rZW5zYCwgYW5kIGlzIG5vdFxuICAgKiBjb21wYXRpYmxlIHdpdGhcbiAgICogW28tc2VyaWVzIG1vZGVsc10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3JlYXNvbmluZykuXG4gICAqL1xuICBtYXhfdG9rZW5zPzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdCwgYW5kXG4gICAqIHF1ZXJ5aW5nIGZvciBvYmplY3RzIHZpYSBBUEkgb3IgdGhlIGRhc2hib2FyZC5cbiAgICpcbiAgICogS2V5cyBhcmUgc3RyaW5ncyB3aXRoIGEgbWF4aW11bSBsZW5ndGggb2YgNjQgY2hhcmFjdGVycy4gVmFsdWVzIGFyZSBzdHJpbmdzIHdpdGhcbiAgICogYSBtYXhpbXVtIGxlbmd0aCBvZiA1MTIgY2hhcmFjdGVycy5cbiAgICovXG4gIG1ldGFkYXRhPzogU2hhcmVkLk1ldGFkYXRhIHwgbnVsbDtcblxuICAvKipcbiAgICogT3V0cHV0IHR5cGVzIHRoYXQgeW91IHdvdWxkIGxpa2UgdGhlIG1vZGVsIHRvIGdlbmVyYXRlLiBNb3N0IG1vZGVscyBhcmUgY2FwYWJsZVxuICAgKiBvZiBnZW5lcmF0aW5nIHRleHQsIHdoaWNoIGlzIHRoZSBkZWZhdWx0OlxuICAgKlxuICAgKiBgW1widGV4dFwiXWBcbiAgICpcbiAgICogVGhlIGBncHQtNG8tYXVkaW8tcHJldmlld2AgbW9kZWwgY2FuIGFsc28gYmUgdXNlZCB0b1xuICAgKiBbZ2VuZXJhdGUgYXVkaW9dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9hdWRpbykuIFRvIHJlcXVlc3QgdGhhdFxuICAgKiB0aGlzIG1vZGVsIGdlbmVyYXRlIGJvdGggdGV4dCBhbmQgYXVkaW8gcmVzcG9uc2VzLCB5b3UgY2FuIHVzZTpcbiAgICpcbiAgICogYFtcInRleHRcIiwgXCJhdWRpb1wiXWBcbiAgICovXG4gIG1vZGFsaXRpZXM/OiBBcnJheTwndGV4dCcgfCAnYXVkaW8nPiB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEhvdyBtYW55IGNoYXQgY29tcGxldGlvbiBjaG9pY2VzIHRvIGdlbmVyYXRlIGZvciBlYWNoIGlucHV0IG1lc3NhZ2UuIE5vdGUgdGhhdFxuICAgKiB5b3Ugd2lsbCBiZSBjaGFyZ2VkIGJhc2VkIG9uIHRoZSBudW1iZXIgb2YgZ2VuZXJhdGVkIHRva2VucyBhY3Jvc3MgYWxsIG9mIHRoZVxuICAgKiBjaG9pY2VzLiBLZWVwIGBuYCBhcyBgMWAgdG8gbWluaW1pemUgY29zdHMuXG4gICAqL1xuICBuPzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogV2hldGhlciB0byBlbmFibGVcbiAgICogW3BhcmFsbGVsIGZ1bmN0aW9uIGNhbGxpbmddKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9mdW5jdGlvbi1jYWxsaW5nI2NvbmZpZ3VyaW5nLXBhcmFsbGVsLWZ1bmN0aW9uLWNhbGxpbmcpXG4gICAqIGR1cmluZyB0b29sIHVzZS5cbiAgICovXG4gIHBhcmFsbGVsX3Rvb2xfY2FsbHM/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBTdGF0aWMgcHJlZGljdGVkIG91dHB1dCBjb250ZW50LCBzdWNoIGFzIHRoZSBjb250ZW50IG9mIGEgdGV4dCBmaWxlIHRoYXQgaXNcbiAgICogYmVpbmcgcmVnZW5lcmF0ZWQuXG4gICAqL1xuICBwcmVkaWN0aW9uPzogQ2hhdENvbXBsZXRpb25QcmVkaWN0aW9uQ29udGVudCB8IG51bGw7XG5cbiAgLyoqXG4gICAqIE51bWJlciBiZXR3ZWVuIC0yLjAgYW5kIDIuMC4gUG9zaXRpdmUgdmFsdWVzIHBlbmFsaXplIG5ldyB0b2tlbnMgYmFzZWQgb25cbiAgICogd2hldGhlciB0aGV5IGFwcGVhciBpbiB0aGUgdGV4dCBzbyBmYXIsIGluY3JlYXNpbmcgdGhlIG1vZGVsJ3MgbGlrZWxpaG9vZCB0b1xuICAgKiB0YWxrIGFib3V0IG5ldyB0b3BpY3MuXG4gICAqL1xuICBwcmVzZW5jZV9wZW5hbHR5PzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogKipvLXNlcmllcyBtb2RlbHMgb25seSoqXG4gICAqXG4gICAqIENvbnN0cmFpbnMgZWZmb3J0IG9uIHJlYXNvbmluZyBmb3JcbiAgICogW3JlYXNvbmluZyBtb2RlbHNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9yZWFzb25pbmcpLiBDdXJyZW50bHlcbiAgICogc3VwcG9ydGVkIHZhbHVlcyBhcmUgYGxvd2AsIGBtZWRpdW1gLCBhbmQgYGhpZ2hgLiBSZWR1Y2luZyByZWFzb25pbmcgZWZmb3J0IGNhblxuICAgKiByZXN1bHQgaW4gZmFzdGVyIHJlc3BvbnNlcyBhbmQgZmV3ZXIgdG9rZW5zIHVzZWQgb24gcmVhc29uaW5nIGluIGEgcmVzcG9uc2UuXG4gICAqL1xuICByZWFzb25pbmdfZWZmb3J0PzogU2hhcmVkLlJlYXNvbmluZ0VmZm9ydCB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEFuIG9iamVjdCBzcGVjaWZ5aW5nIHRoZSBmb3JtYXQgdGhhdCB0aGUgbW9kZWwgbXVzdCBvdXRwdXQuXG4gICAqXG4gICAqIFNldHRpbmcgdG8gYHsgXCJ0eXBlXCI6IFwianNvbl9zY2hlbWFcIiwgXCJqc29uX3NjaGVtYVwiOiB7Li4ufSB9YCBlbmFibGVzIFN0cnVjdHVyZWRcbiAgICogT3V0cHV0cyB3aGljaCBlbnN1cmVzIHRoZSBtb2RlbCB3aWxsIG1hdGNoIHlvdXIgc3VwcGxpZWQgSlNPTiBzY2hlbWEuIExlYXJuIG1vcmVcbiAgICogaW4gdGhlXG4gICAqIFtTdHJ1Y3R1cmVkIE91dHB1dHMgZ3VpZGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9zdHJ1Y3R1cmVkLW91dHB1dHMpLlxuICAgKlxuICAgKiBTZXR0aW5nIHRvIGB7IFwidHlwZVwiOiBcImpzb25fb2JqZWN0XCIgfWAgZW5hYmxlcyB0aGUgb2xkZXIgSlNPTiBtb2RlLCB3aGljaFxuICAgKiBlbnN1cmVzIHRoZSBtZXNzYWdlIHRoZSBtb2RlbCBnZW5lcmF0ZXMgaXMgdmFsaWQgSlNPTi4gVXNpbmcgYGpzb25fc2NoZW1hYCBpc1xuICAgKiBwcmVmZXJyZWQgZm9yIG1vZGVscyB0aGF0IHN1cHBvcnQgaXQuXG4gICAqL1xuICByZXNwb25zZV9mb3JtYXQ/OlxuICAgIHwgU2hhcmVkLlJlc3BvbnNlRm9ybWF0VGV4dFxuICAgIHwgU2hhcmVkLlJlc3BvbnNlRm9ybWF0SlNPTlNjaGVtYVxuICAgIHwgU2hhcmVkLlJlc3BvbnNlRm9ybWF0SlNPTk9iamVjdDtcblxuICAvKipcbiAgICogVGhpcyBmZWF0dXJlIGlzIGluIEJldGEuIElmIHNwZWNpZmllZCwgb3VyIHN5c3RlbSB3aWxsIG1ha2UgYSBiZXN0IGVmZm9ydCB0b1xuICAgKiBzYW1wbGUgZGV0ZXJtaW5pc3RpY2FsbHksIHN1Y2ggdGhhdCByZXBlYXRlZCByZXF1ZXN0cyB3aXRoIHRoZSBzYW1lIGBzZWVkYCBhbmRcbiAgICogcGFyYW1ldGVycyBzaG91bGQgcmV0dXJuIHRoZSBzYW1lIHJlc3VsdC4gRGV0ZXJtaW5pc20gaXMgbm90IGd1YXJhbnRlZWQsIGFuZCB5b3VcbiAgICogc2hvdWxkIHJlZmVyIHRvIHRoZSBgc3lzdGVtX2ZpbmdlcnByaW50YCByZXNwb25zZSBwYXJhbWV0ZXIgdG8gbW9uaXRvciBjaGFuZ2VzXG4gICAqIGluIHRoZSBiYWNrZW5kLlxuICAgKi9cbiAgc2VlZD86IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgbGF0ZW5jeSB0aWVyIHRvIHVzZSBmb3IgcHJvY2Vzc2luZyB0aGUgcmVxdWVzdC4gVGhpcyBwYXJhbWV0ZXIgaXNcbiAgICogcmVsZXZhbnQgZm9yIGN1c3RvbWVycyBzdWJzY3JpYmVkIHRvIHRoZSBzY2FsZSB0aWVyIHNlcnZpY2U6XG4gICAqXG4gICAqIC0gSWYgc2V0IHRvICdhdXRvJywgYW5kIHRoZSBQcm9qZWN0IGlzIFNjYWxlIHRpZXIgZW5hYmxlZCwgdGhlIHN5c3RlbSB3aWxsXG4gICAqICAgdXRpbGl6ZSBzY2FsZSB0aWVyIGNyZWRpdHMgdW50aWwgdGhleSBhcmUgZXhoYXVzdGVkLlxuICAgKiAtIElmIHNldCB0byAnYXV0bycsIGFuZCB0aGUgUHJvamVjdCBpcyBub3QgU2NhbGUgdGllciBlbmFibGVkLCB0aGUgcmVxdWVzdCB3aWxsXG4gICAqICAgYmUgcHJvY2Vzc2VkIHVzaW5nIHRoZSBkZWZhdWx0IHNlcnZpY2UgdGllciB3aXRoIGEgbG93ZXIgdXB0aW1lIFNMQSBhbmQgbm9cbiAgICogICBsYXRlbmN5IGd1YXJlbnRlZS5cbiAgICogLSBJZiBzZXQgdG8gJ2RlZmF1bHQnLCB0aGUgcmVxdWVzdCB3aWxsIGJlIHByb2Nlc3NlZCB1c2luZyB0aGUgZGVmYXVsdCBzZXJ2aWNlXG4gICAqICAgdGllciB3aXRoIGEgbG93ZXIgdXB0aW1lIFNMQSBhbmQgbm8gbGF0ZW5jeSBndWFyZW50ZWUuXG4gICAqIC0gSWYgc2V0IHRvICdmbGV4JywgdGhlIHJlcXVlc3Qgd2lsbCBiZSBwcm9jZXNzZWQgd2l0aCB0aGUgRmxleCBQcm9jZXNzaW5nXG4gICAqICAgc2VydmljZSB0aWVyLlxuICAgKiAgIFtMZWFybiBtb3JlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvZmxleC1wcm9jZXNzaW5nKS5cbiAgICogLSBXaGVuIG5vdCBzZXQsIHRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzICdhdXRvJy5cbiAgICpcbiAgICogV2hlbiB0aGlzIHBhcmFtZXRlciBpcyBzZXQsIHRoZSByZXNwb25zZSBib2R5IHdpbGwgaW5jbHVkZSB0aGUgYHNlcnZpY2VfdGllcmBcbiAgICogdXRpbGl6ZWQuXG4gICAqL1xuICBzZXJ2aWNlX3RpZXI/OiAnYXV0bycgfCAnZGVmYXVsdCcgfCAnZmxleCcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBOb3Qgc3VwcG9ydGVkIHdpdGggbGF0ZXN0IHJlYXNvbmluZyBtb2RlbHMgYG8zYCBhbmQgYG80LW1pbmlgLlxuICAgKlxuICAgKiBVcCB0byA0IHNlcXVlbmNlcyB3aGVyZSB0aGUgQVBJIHdpbGwgc3RvcCBnZW5lcmF0aW5nIGZ1cnRoZXIgdG9rZW5zLiBUaGVcbiAgICogcmV0dXJuZWQgdGV4dCB3aWxsIG5vdCBjb250YWluIHRoZSBzdG9wIHNlcXVlbmNlLlxuICAgKi9cbiAgc3RvcD86IHN0cmluZyB8IG51bGwgfCBBcnJheTxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIG9yIG5vdCB0byBzdG9yZSB0aGUgb3V0cHV0IG9mIHRoaXMgY2hhdCBjb21wbGV0aW9uIHJlcXVlc3QgZm9yIHVzZSBpblxuICAgKiBvdXIgW21vZGVsIGRpc3RpbGxhdGlvbl0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL2Rpc3RpbGxhdGlvbilcbiAgICogb3IgW2V2YWxzXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvZXZhbHMpIHByb2R1Y3RzLlxuICAgKi9cbiAgc3RvcmU/OiBib29sZWFuIHwgbnVsbDtcblxuICAvKipcbiAgICogSWYgc2V0IHRvIHRydWUsIHRoZSBtb2RlbCByZXNwb25zZSBkYXRhIHdpbGwgYmUgc3RyZWFtZWQgdG8gdGhlIGNsaWVudCBhcyBpdCBpc1xuICAgKiBnZW5lcmF0ZWQgdXNpbmdcbiAgICogW3NlcnZlci1zZW50IGV2ZW50c10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1NlcnZlci1zZW50X2V2ZW50cy9Vc2luZ19zZXJ2ZXItc2VudF9ldmVudHMjRXZlbnRfc3RyZWFtX2Zvcm1hdCkuXG4gICAqIFNlZSB0aGVcbiAgICogW1N0cmVhbWluZyBzZWN0aW9uIGJlbG93XShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2NoYXQvc3RyZWFtaW5nKVxuICAgKiBmb3IgbW9yZSBpbmZvcm1hdGlvbiwgYWxvbmcgd2l0aCB0aGVcbiAgICogW3N0cmVhbWluZyByZXNwb25zZXNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9zdHJlYW1pbmctcmVzcG9uc2VzKVxuICAgKiBndWlkZSBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBob3cgdG8gaGFuZGxlIHRoZSBzdHJlYW1pbmcgZXZlbnRzLlxuICAgKi9cbiAgc3RyZWFtPzogYm9vbGVhbiB8IG51bGw7XG5cbiAgLyoqXG4gICAqIE9wdGlvbnMgZm9yIHN0cmVhbWluZyByZXNwb25zZS4gT25seSBzZXQgdGhpcyB3aGVuIHlvdSBzZXQgYHN0cmVhbTogdHJ1ZWAuXG4gICAqL1xuICBzdHJlYW1fb3B0aW9ucz86IENoYXRDb21wbGV0aW9uU3RyZWFtT3B0aW9ucyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFdoYXQgc2FtcGxpbmcgdGVtcGVyYXR1cmUgdG8gdXNlLCBiZXR3ZWVuIDAgYW5kIDIuIEhpZ2hlciB2YWx1ZXMgbGlrZSAwLjggd2lsbFxuICAgKiBtYWtlIHRoZSBvdXRwdXQgbW9yZSByYW5kb20sIHdoaWxlIGxvd2VyIHZhbHVlcyBsaWtlIDAuMiB3aWxsIG1ha2UgaXQgbW9yZVxuICAgKiBmb2N1c2VkIGFuZCBkZXRlcm1pbmlzdGljLiBXZSBnZW5lcmFsbHkgcmVjb21tZW5kIGFsdGVyaW5nIHRoaXMgb3IgYHRvcF9wYCBidXRcbiAgICogbm90IGJvdGguXG4gICAqL1xuICB0ZW1wZXJhdHVyZT86IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIHdoaWNoIChpZiBhbnkpIHRvb2wgaXMgY2FsbGVkIGJ5IHRoZSBtb2RlbC4gYG5vbmVgIG1lYW5zIHRoZSBtb2RlbCB3aWxsXG4gICAqIG5vdCBjYWxsIGFueSB0b29sIGFuZCBpbnN0ZWFkIGdlbmVyYXRlcyBhIG1lc3NhZ2UuIGBhdXRvYCBtZWFucyB0aGUgbW9kZWwgY2FuXG4gICAqIHBpY2sgYmV0d2VlbiBnZW5lcmF0aW5nIGEgbWVzc2FnZSBvciBjYWxsaW5nIG9uZSBvciBtb3JlIHRvb2xzLiBgcmVxdWlyZWRgIG1lYW5zXG4gICAqIHRoZSBtb2RlbCBtdXN0IGNhbGwgb25lIG9yIG1vcmUgdG9vbHMuIFNwZWNpZnlpbmcgYSBwYXJ0aWN1bGFyIHRvb2wgdmlhXG4gICAqIGB7XCJ0eXBlXCI6IFwiZnVuY3Rpb25cIiwgXCJmdW5jdGlvblwiOiB7XCJuYW1lXCI6IFwibXlfZnVuY3Rpb25cIn19YCBmb3JjZXMgdGhlIG1vZGVsIHRvXG4gICAqIGNhbGwgdGhhdCB0b29sLlxuICAgKlxuICAgKiBgbm9uZWAgaXMgdGhlIGRlZmF1bHQgd2hlbiBubyB0b29scyBhcmUgcHJlc2VudC4gYGF1dG9gIGlzIHRoZSBkZWZhdWx0IGlmIHRvb2xzXG4gICAqIGFyZSBwcmVzZW50LlxuICAgKi9cbiAgdG9vbF9jaG9pY2U/OiBDaGF0Q29tcGxldGlvblRvb2xDaG9pY2VPcHRpb247XG5cbiAgLyoqXG4gICAqIEEgbGlzdCBvZiB0b29scyB0aGUgbW9kZWwgbWF5IGNhbGwuIEN1cnJlbnRseSwgb25seSBmdW5jdGlvbnMgYXJlIHN1cHBvcnRlZCBhcyBhXG4gICAqIHRvb2wuIFVzZSB0aGlzIHRvIHByb3ZpZGUgYSBsaXN0IG9mIGZ1bmN0aW9ucyB0aGUgbW9kZWwgbWF5IGdlbmVyYXRlIEpTT04gaW5wdXRzXG4gICAqIGZvci4gQSBtYXggb2YgMTI4IGZ1bmN0aW9ucyBhcmUgc3VwcG9ydGVkLlxuICAgKi9cbiAgdG9vbHM/OiBBcnJheTxDaGF0Q29tcGxldGlvblRvb2w+O1xuXG4gIC8qKlxuICAgKiBBbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgMjAgc3BlY2lmeWluZyB0aGUgbnVtYmVyIG9mIG1vc3QgbGlrZWx5IHRva2VucyB0b1xuICAgKiByZXR1cm4gYXQgZWFjaCB0b2tlbiBwb3NpdGlvbiwgZWFjaCB3aXRoIGFuIGFzc29jaWF0ZWQgbG9nIHByb2JhYmlsaXR5LlxuICAgKiBgbG9ncHJvYnNgIG11c3QgYmUgc2V0IHRvIGB0cnVlYCBpZiB0aGlzIHBhcmFtZXRlciBpcyB1c2VkLlxuICAgKi9cbiAgdG9wX2xvZ3Byb2JzPzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogQW4gYWx0ZXJuYXRpdmUgdG8gc2FtcGxpbmcgd2l0aCB0ZW1wZXJhdHVyZSwgY2FsbGVkIG51Y2xldXMgc2FtcGxpbmcsIHdoZXJlIHRoZVxuICAgKiBtb2RlbCBjb25zaWRlcnMgdGhlIHJlc3VsdHMgb2YgdGhlIHRva2VucyB3aXRoIHRvcF9wIHByb2JhYmlsaXR5IG1hc3MuIFNvIDAuMVxuICAgKiBtZWFucyBvbmx5IHRoZSB0b2tlbnMgY29tcHJpc2luZyB0aGUgdG9wIDEwJSBwcm9iYWJpbGl0eSBtYXNzIGFyZSBjb25zaWRlcmVkLlxuICAgKlxuICAgKiBXZSBnZW5lcmFsbHkgcmVjb21tZW5kIGFsdGVyaW5nIHRoaXMgb3IgYHRlbXBlcmF0dXJlYCBidXQgbm90IGJvdGguXG4gICAqL1xuICB0b3BfcD86IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEEgc3RhYmxlIGlkZW50aWZpZXIgZm9yIHlvdXIgZW5kLXVzZXJzLiBVc2VkIHRvIGJvb3N0IGNhY2hlIGhpdCByYXRlcyBieSBiZXR0ZXJcbiAgICogYnVja2V0aW5nIHNpbWlsYXIgcmVxdWVzdHMgYW5kIHRvIGhlbHAgT3BlbkFJIGRldGVjdCBhbmQgcHJldmVudCBhYnVzZS5cbiAgICogW0xlYXJuIG1vcmVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9zYWZldHktYmVzdC1wcmFjdGljZXMjZW5kLXVzZXItaWRzKS5cbiAgICovXG4gIHVzZXI/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoaXMgdG9vbCBzZWFyY2hlcyB0aGUgd2ViIGZvciByZWxldmFudCByZXN1bHRzIHRvIHVzZSBpbiBhIHJlc3BvbnNlLiBMZWFybiBtb3JlXG4gICAqIGFib3V0IHRoZVxuICAgKiBbd2ViIHNlYXJjaCB0b29sXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvdG9vbHMtd2ViLXNlYXJjaD9hcGktbW9kZT1jaGF0KS5cbiAgICovXG4gIHdlYl9zZWFyY2hfb3B0aW9ucz86IENoYXRDb21wbGV0aW9uQ3JlYXRlUGFyYW1zLldlYlNlYXJjaE9wdGlvbnM7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXMge1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgRnVuY3Rpb24ge1xuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbiB0byBiZSBjYWxsZWQuIE11c3QgYmUgYS16LCBBLVosIDAtOSwgb3IgY29udGFpblxuICAgICAqIHVuZGVyc2NvcmVzIGFuZCBkYXNoZXMsIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NC5cbiAgICAgKi9cbiAgICBuYW1lOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBIGRlc2NyaXB0aW9uIG9mIHdoYXQgdGhlIGZ1bmN0aW9uIGRvZXMsIHVzZWQgYnkgdGhlIG1vZGVsIHRvIGNob29zZSB3aGVuIGFuZFxuICAgICAqIGhvdyB0byBjYWxsIHRoZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBkZXNjcmlwdGlvbj86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBwYXJhbWV0ZXJzIHRoZSBmdW5jdGlvbnMgYWNjZXB0cywgZGVzY3JpYmVkIGFzIGEgSlNPTiBTY2hlbWEgb2JqZWN0LiBTZWUgdGhlXG4gICAgICogW2d1aWRlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvZnVuY3Rpb24tY2FsbGluZykgZm9yIGV4YW1wbGVzLFxuICAgICAqIGFuZCB0aGVcbiAgICAgKiBbSlNPTiBTY2hlbWEgcmVmZXJlbmNlXShodHRwczovL2pzb24tc2NoZW1hLm9yZy91bmRlcnN0YW5kaW5nLWpzb24tc2NoZW1hLykgZm9yXG4gICAgICogZG9jdW1lbnRhdGlvbiBhYm91dCB0aGUgZm9ybWF0LlxuICAgICAqXG4gICAgICogT21pdHRpbmcgYHBhcmFtZXRlcnNgIGRlZmluZXMgYSBmdW5jdGlvbiB3aXRoIGFuIGVtcHR5IHBhcmFtZXRlciBsaXN0LlxuICAgICAqL1xuICAgIHBhcmFtZXRlcnM/OiBTaGFyZWQuRnVuY3Rpb25QYXJhbWV0ZXJzO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgdG9vbCBzZWFyY2hlcyB0aGUgd2ViIGZvciByZWxldmFudCByZXN1bHRzIHRvIHVzZSBpbiBhIHJlc3BvbnNlLiBMZWFybiBtb3JlXG4gICAqIGFib3V0IHRoZVxuICAgKiBbd2ViIHNlYXJjaCB0b29sXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvdG9vbHMtd2ViLXNlYXJjaD9hcGktbW9kZT1jaGF0KS5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgV2ViU2VhcmNoT3B0aW9ucyB7XG4gICAgLyoqXG4gICAgICogSGlnaCBsZXZlbCBndWlkYW5jZSBmb3IgdGhlIGFtb3VudCBvZiBjb250ZXh0IHdpbmRvdyBzcGFjZSB0byB1c2UgZm9yIHRoZVxuICAgICAqIHNlYXJjaC4gT25lIG9mIGBsb3dgLCBgbWVkaXVtYCwgb3IgYGhpZ2hgLiBgbWVkaXVtYCBpcyB0aGUgZGVmYXVsdC5cbiAgICAgKi9cbiAgICBzZWFyY2hfY29udGV4dF9zaXplPzogJ2xvdycgfCAnbWVkaXVtJyB8ICdoaWdoJztcblxuICAgIC8qKlxuICAgICAqIEFwcHJveGltYXRlIGxvY2F0aW9uIHBhcmFtZXRlcnMgZm9yIHRoZSBzZWFyY2guXG4gICAgICovXG4gICAgdXNlcl9sb2NhdGlvbj86IFdlYlNlYXJjaE9wdGlvbnMuVXNlckxvY2F0aW9uIHwgbnVsbDtcbiAgfVxuXG4gIGV4cG9ydCBuYW1lc3BhY2UgV2ViU2VhcmNoT3B0aW9ucyB7XG4gICAgLyoqXG4gICAgICogQXBwcm94aW1hdGUgbG9jYXRpb24gcGFyYW1ldGVycyBmb3IgdGhlIHNlYXJjaC5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIFVzZXJMb2NhdGlvbiB7XG4gICAgICAvKipcbiAgICAgICAqIEFwcHJveGltYXRlIGxvY2F0aW9uIHBhcmFtZXRlcnMgZm9yIHRoZSBzZWFyY2guXG4gICAgICAgKi9cbiAgICAgIGFwcHJveGltYXRlOiBVc2VyTG9jYXRpb24uQXBwcm94aW1hdGU7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHR5cGUgb2YgbG9jYXRpb24gYXBwcm94aW1hdGlvbi4gQWx3YXlzIGBhcHByb3hpbWF0ZWAuXG4gICAgICAgKi9cbiAgICAgIHR5cGU6ICdhcHByb3hpbWF0ZSc7XG4gICAgfVxuXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBVc2VyTG9jYXRpb24ge1xuICAgICAgLyoqXG4gICAgICAgKiBBcHByb3hpbWF0ZSBsb2NhdGlvbiBwYXJhbWV0ZXJzIGZvciB0aGUgc2VhcmNoLlxuICAgICAgICovXG4gICAgICBleHBvcnQgaW50ZXJmYWNlIEFwcHJveGltYXRlIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZyZWUgdGV4dCBpbnB1dCBmb3IgdGhlIGNpdHkgb2YgdGhlIHVzZXIsIGUuZy4gYFNhbiBGcmFuY2lzY29gLlxuICAgICAgICAgKi9cbiAgICAgICAgY2l0eT86IHN0cmluZztcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHR3by1sZXR0ZXIgW0lTTyBjb3VudHJ5IGNvZGVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT18zMTY2LTEpIG9mXG4gICAgICAgICAqIHRoZSB1c2VyLCBlLmcuIGBVU2AuXG4gICAgICAgICAqL1xuICAgICAgICBjb3VudHJ5Pzogc3RyaW5nO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGcmVlIHRleHQgaW5wdXQgZm9yIHRoZSByZWdpb24gb2YgdGhlIHVzZXIsIGUuZy4gYENhbGlmb3JuaWFgLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVnaW9uPzogc3RyaW5nO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgW0lBTkEgdGltZXpvbmVdKGh0dHBzOi8vdGltZWFwaS5pby9kb2N1bWVudGF0aW9uL2lhbmEtdGltZXpvbmVzKSBvZiB0aGVcbiAgICAgICAgICogdXNlciwgZS5nLiBgQW1lcmljYS9Mb3NfQW5nZWxlc2AuXG4gICAgICAgICAqL1xuICAgICAgICB0aW1lem9uZT86IHN0cmluZztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBleHBvcnQgdHlwZSBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyA9XG4gICAgQ29tcGxldGlvbnNDb21wbGV0aW9uc0FQSS5DaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtc05vblN0cmVhbWluZztcbiAgZXhwb3J0IHR5cGUgQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXNTdHJlYW1pbmcgPVxuICAgIENvbXBsZXRpb25zQ29tcGxldGlvbnNBUEkuQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXNTdHJlYW1pbmc7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIENoYXRDb21wbGV0aW9uQ3JlYXRlUGFyYW1zIGluc3RlYWRcbiAqL1xuZXhwb3J0IHR5cGUgQ29tcGxldGlvbkNyZWF0ZVBhcmFtcyA9IENoYXRDb21wbGV0aW9uQ3JlYXRlUGFyYW1zO1xuXG5leHBvcnQgaW50ZXJmYWNlIENoYXRDb21wbGV0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nIGV4dGVuZHMgQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXNCYXNlIHtcbiAgLyoqXG4gICAqIElmIHNldCB0byB0cnVlLCB0aGUgbW9kZWwgcmVzcG9uc2UgZGF0YSB3aWxsIGJlIHN0cmVhbWVkIHRvIHRoZSBjbGllbnQgYXMgaXQgaXNcbiAgICogZ2VuZXJhdGVkIHVzaW5nXG4gICAqIFtzZXJ2ZXItc2VudCBldmVudHNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9TZXJ2ZXItc2VudF9ldmVudHMvVXNpbmdfc2VydmVyLXNlbnRfZXZlbnRzI0V2ZW50X3N0cmVhbV9mb3JtYXQpLlxuICAgKiBTZWUgdGhlXG4gICAqIFtTdHJlYW1pbmcgc2VjdGlvbiBiZWxvd10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9jaGF0L3N0cmVhbWluZylcbiAgICogZm9yIG1vcmUgaW5mb3JtYXRpb24sIGFsb25nIHdpdGggdGhlXG4gICAqIFtzdHJlYW1pbmcgcmVzcG9uc2VzXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvc3RyZWFtaW5nLXJlc3BvbnNlcylcbiAgICogZ3VpZGUgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gaG93IHRvIGhhbmRsZSB0aGUgc3RyZWFtaW5nIGV2ZW50cy5cbiAgICovXG4gIHN0cmVhbT86IGZhbHNlIHwgbnVsbDtcbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcgaW5zdGVhZFxuICovXG5leHBvcnQgdHlwZSBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nID0gQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXNOb25TdHJlYW1pbmc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXNTdHJlYW1pbmcgZXh0ZW5kcyBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtc0Jhc2Uge1xuICAvKipcbiAgICogSWYgc2V0IHRvIHRydWUsIHRoZSBtb2RlbCByZXNwb25zZSBkYXRhIHdpbGwgYmUgc3RyZWFtZWQgdG8gdGhlIGNsaWVudCBhcyBpdCBpc1xuICAgKiBnZW5lcmF0ZWQgdXNpbmdcbiAgICogW3NlcnZlci1zZW50IGV2ZW50c10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1NlcnZlci1zZW50X2V2ZW50cy9Vc2luZ19zZXJ2ZXItc2VudF9ldmVudHMjRXZlbnRfc3RyZWFtX2Zvcm1hdCkuXG4gICAqIFNlZSB0aGVcbiAgICogW1N0cmVhbWluZyBzZWN0aW9uIGJlbG93XShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2NoYXQvc3RyZWFtaW5nKVxuICAgKiBmb3IgbW9yZSBpbmZvcm1hdGlvbiwgYWxvbmcgd2l0aCB0aGVcbiAgICogW3N0cmVhbWluZyByZXNwb25zZXNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9zdHJlYW1pbmctcmVzcG9uc2VzKVxuICAgKiBndWlkZSBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBob3cgdG8gaGFuZGxlIHRoZSBzdHJlYW1pbmcgZXZlbnRzLlxuICAgKi9cbiAgc3RyZWFtOiB0cnVlO1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIFVzZSBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtc1N0cmVhbWluZyBpbnN0ZWFkXG4gKi9cbmV4cG9ydCB0eXBlIENvbXBsZXRpb25DcmVhdGVQYXJhbXNTdHJlYW1pbmcgPSBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtc1N0cmVhbWluZztcblxuZXhwb3J0IGludGVyZmFjZSBDaGF0Q29tcGxldGlvblVwZGF0ZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgKlxuICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbWV0YWRhdGE6IFNoYXJlZC5NZXRhZGF0YSB8IG51bGw7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIENoYXRDb21wbGV0aW9uVXBkYXRlUGFyYW1zIGluc3RlYWRcbiAqL1xuZXhwb3J0IHR5cGUgQ29tcGxldGlvblVwZGF0ZVBhcmFtcyA9IENoYXRDb21wbGV0aW9uVXBkYXRlUGFyYW1zO1xuXG5leHBvcnQgaW50ZXJmYWNlIENoYXRDb21wbGV0aW9uTGlzdFBhcmFtcyBleHRlbmRzIEN1cnNvclBhZ2VQYXJhbXMge1xuICAvKipcbiAgICogQSBsaXN0IG9mIG1ldGFkYXRhIGtleXMgdG8gZmlsdGVyIHRoZSBDaGF0IENvbXBsZXRpb25zIGJ5LiBFeGFtcGxlOlxuICAgKlxuICAgKiBgbWV0YWRhdGFba2V5MV09dmFsdWUxJm1ldGFkYXRhW2tleTJdPXZhbHVlMmBcbiAgICovXG4gIG1ldGFkYXRhPzogU2hhcmVkLk1ldGFkYXRhIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIG1vZGVsIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIENoYXQgQ29tcGxldGlvbnMuXG4gICAqL1xuICBtb2RlbD86IHN0cmluZztcblxuICAvKipcbiAgICogU29ydCBvcmRlciBmb3IgQ2hhdCBDb21wbGV0aW9ucyBieSB0aW1lc3RhbXAuIFVzZSBgYXNjYCBmb3IgYXNjZW5kaW5nIG9yZGVyIG9yXG4gICAqIGBkZXNjYCBmb3IgZGVzY2VuZGluZyBvcmRlci4gRGVmYXVsdHMgdG8gYGFzY2AuXG4gICAqL1xuICBvcmRlcj86ICdhc2MnIHwgJ2Rlc2MnO1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIFVzZSBDaGF0Q29tcGxldGlvbkxpc3RQYXJhbXMgaW5zdGVhZFxuICovXG5leHBvcnQgdHlwZSBDb21wbGV0aW9uTGlzdFBhcmFtcyA9IENoYXRDb21wbGV0aW9uTGlzdFBhcmFtcztcblxuQ29tcGxldGlvbnMuQ2hhdENvbXBsZXRpb25zUGFnZSA9IENoYXRDb21wbGV0aW9uc1BhZ2U7XG5Db21wbGV0aW9ucy5NZXNzYWdlcyA9IE1lc3NhZ2VzO1xuXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgQ29tcGxldGlvbnMge1xuICBleHBvcnQge1xuICAgIHR5cGUgQ2hhdENvbXBsZXRpb24gYXMgQ2hhdENvbXBsZXRpb24sXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbkFzc2lzdGFudE1lc3NhZ2VQYXJhbSBhcyBDaGF0Q29tcGxldGlvbkFzc2lzdGFudE1lc3NhZ2VQYXJhbSxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uQXVkaW8gYXMgQ2hhdENvbXBsZXRpb25BdWRpbyxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uQXVkaW9QYXJhbSBhcyBDaGF0Q29tcGxldGlvbkF1ZGlvUGFyYW0sXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbkNodW5rIGFzIENoYXRDb21wbGV0aW9uQ2h1bmssXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbkNvbnRlbnRQYXJ0IGFzIENoYXRDb21wbGV0aW9uQ29udGVudFBhcnQsXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbkNvbnRlbnRQYXJ0SW1hZ2UgYXMgQ2hhdENvbXBsZXRpb25Db250ZW50UGFydEltYWdlLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25Db250ZW50UGFydElucHV0QXVkaW8gYXMgQ2hhdENvbXBsZXRpb25Db250ZW50UGFydElucHV0QXVkaW8sXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbkNvbnRlbnRQYXJ0UmVmdXNhbCBhcyBDaGF0Q29tcGxldGlvbkNvbnRlbnRQYXJ0UmVmdXNhbCxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uQ29udGVudFBhcnRUZXh0IGFzIENoYXRDb21wbGV0aW9uQ29udGVudFBhcnRUZXh0LFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25EZWxldGVkIGFzIENoYXRDb21wbGV0aW9uRGVsZXRlZCxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uRGV2ZWxvcGVyTWVzc2FnZVBhcmFtIGFzIENoYXRDb21wbGV0aW9uRGV2ZWxvcGVyTWVzc2FnZVBhcmFtLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25GdW5jdGlvbkNhbGxPcHRpb24gYXMgQ2hhdENvbXBsZXRpb25GdW5jdGlvbkNhbGxPcHRpb24sXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbkZ1bmN0aW9uTWVzc2FnZVBhcmFtIGFzIENoYXRDb21wbGV0aW9uRnVuY3Rpb25NZXNzYWdlUGFyYW0sXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbk1lc3NhZ2UgYXMgQ2hhdENvbXBsZXRpb25NZXNzYWdlLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25NZXNzYWdlUGFyYW0gYXMgQ2hhdENvbXBsZXRpb25NZXNzYWdlUGFyYW0sXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbk1lc3NhZ2VUb29sQ2FsbCBhcyBDaGF0Q29tcGxldGlvbk1lc3NhZ2VUb29sQ2FsbCxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uTW9kYWxpdHkgYXMgQ2hhdENvbXBsZXRpb25Nb2RhbGl0eSxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uTmFtZWRUb29sQ2hvaWNlIGFzIENoYXRDb21wbGV0aW9uTmFtZWRUb29sQ2hvaWNlLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25QcmVkaWN0aW9uQ29udGVudCBhcyBDaGF0Q29tcGxldGlvblByZWRpY3Rpb25Db250ZW50LFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25Sb2xlIGFzIENoYXRDb21wbGV0aW9uUm9sZSxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uU3RvcmVNZXNzYWdlIGFzIENoYXRDb21wbGV0aW9uU3RvcmVNZXNzYWdlLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25TdHJlYW1PcHRpb25zIGFzIENoYXRDb21wbGV0aW9uU3RyZWFtT3B0aW9ucyxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uU3lzdGVtTWVzc2FnZVBhcmFtIGFzIENoYXRDb21wbGV0aW9uU3lzdGVtTWVzc2FnZVBhcmFtLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25Ub2tlbkxvZ3Byb2IgYXMgQ2hhdENvbXBsZXRpb25Ub2tlbkxvZ3Byb2IsXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvblRvb2wgYXMgQ2hhdENvbXBsZXRpb25Ub29sLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25Ub29sQ2hvaWNlT3B0aW9uIGFzIENoYXRDb21wbGV0aW9uVG9vbENob2ljZU9wdGlvbixcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uVG9vbE1lc3NhZ2VQYXJhbSBhcyBDaGF0Q29tcGxldGlvblRvb2xNZXNzYWdlUGFyYW0sXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvblVzZXJNZXNzYWdlUGFyYW0gYXMgQ2hhdENvbXBsZXRpb25Vc2VyTWVzc2FnZVBhcmFtLFxuICAgIHR5cGUgQ3JlYXRlQ2hhdENvbXBsZXRpb25SZXF1ZXN0TWVzc2FnZSBhcyBDcmVhdGVDaGF0Q29tcGxldGlvblJlcXVlc3RNZXNzYWdlLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25SZWFzb25pbmdFZmZvcnQgYXMgQ2hhdENvbXBsZXRpb25SZWFzb25pbmdFZmZvcnQsXG4gICAgQ2hhdENvbXBsZXRpb25zUGFnZSBhcyBDaGF0Q29tcGxldGlvbnNQYWdlLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXMgYXMgQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXMsXG4gICAgdHlwZSBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zIGFzIENvbXBsZXRpb25DcmVhdGVQYXJhbXMsXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyBhcyBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyxcbiAgICB0eXBlIENvbXBsZXRpb25DcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcgYXMgQ29tcGxldGlvbkNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uQ3JlYXRlUGFyYW1zU3RyZWFtaW5nIGFzIENoYXRDb21wbGV0aW9uQ3JlYXRlUGFyYW1zU3RyZWFtaW5nLFxuICAgIHR5cGUgQ29tcGxldGlvbkNyZWF0ZVBhcmFtc1N0cmVhbWluZyBhcyBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zU3RyZWFtaW5nLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25VcGRhdGVQYXJhbXMgYXMgQ2hhdENvbXBsZXRpb25VcGRhdGVQYXJhbXMsXG4gICAgdHlwZSBDb21wbGV0aW9uVXBkYXRlUGFyYW1zIGFzIENvbXBsZXRpb25VcGRhdGVQYXJhbXMsXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbkxpc3RQYXJhbXMgYXMgQ2hhdENvbXBsZXRpb25MaXN0UGFyYW1zLFxuICAgIHR5cGUgQ29tcGxldGlvbkxpc3RQYXJhbXMgYXMgQ29tcGxldGlvbkxpc3RQYXJhbXMsXG4gIH07XG5cbiAgZXhwb3J0IHsgTWVzc2FnZXMgYXMgTWVzc2FnZXMsIHR5cGUgTWVzc2FnZUxpc3RQYXJhbXMgYXMgTWVzc2FnZUxpc3RQYXJhbXMgfTtcbn1cbiIsICIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJy4uLy4uL3Jlc291cmNlJztcbmltcG9ydCAqIGFzIFNoYXJlZCBmcm9tICcuLi9zaGFyZWQnO1xuaW1wb3J0ICogYXMgQ29tcGxldGlvbnNBUEkgZnJvbSAnLi9jb21wbGV0aW9ucy9jb21wbGV0aW9ucyc7XG5pbXBvcnQge1xuICBDaGF0Q29tcGxldGlvbixcbiAgQ2hhdENvbXBsZXRpb25Bc3Npc3RhbnRNZXNzYWdlUGFyYW0sXG4gIENoYXRDb21wbGV0aW9uQXVkaW8sXG4gIENoYXRDb21wbGV0aW9uQXVkaW9QYXJhbSxcbiAgQ2hhdENvbXBsZXRpb25DaHVuayxcbiAgQ2hhdENvbXBsZXRpb25Db250ZW50UGFydCxcbiAgQ2hhdENvbXBsZXRpb25Db250ZW50UGFydEltYWdlLFxuICBDaGF0Q29tcGxldGlvbkNvbnRlbnRQYXJ0SW5wdXRBdWRpbyxcbiAgQ2hhdENvbXBsZXRpb25Db250ZW50UGFydFJlZnVzYWwsXG4gIENoYXRDb21wbGV0aW9uQ29udGVudFBhcnRUZXh0LFxuICBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtcyxcbiAgQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcsXG4gIENoYXRDb21wbGV0aW9uQ3JlYXRlUGFyYW1zU3RyZWFtaW5nLFxuICBDaGF0Q29tcGxldGlvbkRlbGV0ZWQsXG4gIENoYXRDb21wbGV0aW9uRGV2ZWxvcGVyTWVzc2FnZVBhcmFtLFxuICBDaGF0Q29tcGxldGlvbkZ1bmN0aW9uQ2FsbE9wdGlvbixcbiAgQ2hhdENvbXBsZXRpb25GdW5jdGlvbk1lc3NhZ2VQYXJhbSxcbiAgQ2hhdENvbXBsZXRpb25MaXN0UGFyYW1zLFxuICBDaGF0Q29tcGxldGlvbk1lc3NhZ2UsXG4gIENoYXRDb21wbGV0aW9uTWVzc2FnZVBhcmFtLFxuICBDaGF0Q29tcGxldGlvbk1lc3NhZ2VUb29sQ2FsbCxcbiAgQ2hhdENvbXBsZXRpb25Nb2RhbGl0eSxcbiAgQ2hhdENvbXBsZXRpb25OYW1lZFRvb2xDaG9pY2UsXG4gIENoYXRDb21wbGV0aW9uUHJlZGljdGlvbkNvbnRlbnQsXG4gIENoYXRDb21wbGV0aW9uUmVhc29uaW5nRWZmb3J0LFxuICBDaGF0Q29tcGxldGlvblJvbGUsXG4gIENoYXRDb21wbGV0aW9uU3RvcmVNZXNzYWdlLFxuICBDaGF0Q29tcGxldGlvblN0cmVhbU9wdGlvbnMsXG4gIENoYXRDb21wbGV0aW9uU3lzdGVtTWVzc2FnZVBhcmFtLFxuICBDaGF0Q29tcGxldGlvblRva2VuTG9ncHJvYixcbiAgQ2hhdENvbXBsZXRpb25Ub29sLFxuICBDaGF0Q29tcGxldGlvblRvb2xDaG9pY2VPcHRpb24sXG4gIENoYXRDb21wbGV0aW9uVG9vbE1lc3NhZ2VQYXJhbSxcbiAgQ2hhdENvbXBsZXRpb25VcGRhdGVQYXJhbXMsXG4gIENoYXRDb21wbGV0aW9uVXNlck1lc3NhZ2VQYXJhbSxcbiAgQ2hhdENvbXBsZXRpb25zUGFnZSxcbiAgQ29tcGxldGlvbkNyZWF0ZVBhcmFtcyxcbiAgQ29tcGxldGlvbkNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyxcbiAgQ29tcGxldGlvbkNyZWF0ZVBhcmFtc1N0cmVhbWluZyxcbiAgQ29tcGxldGlvbkxpc3RQYXJhbXMsXG4gIENvbXBsZXRpb25VcGRhdGVQYXJhbXMsXG4gIENvbXBsZXRpb25zLFxuICBDcmVhdGVDaGF0Q29tcGxldGlvblJlcXVlc3RNZXNzYWdlLFxufSBmcm9tICcuL2NvbXBsZXRpb25zL2NvbXBsZXRpb25zJztcblxuZXhwb3J0IGNsYXNzIENoYXQgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIGNvbXBsZXRpb25zOiBDb21wbGV0aW9uc0FQSS5Db21wbGV0aW9ucyA9IG5ldyBDb21wbGV0aW9uc0FQSS5Db21wbGV0aW9ucyh0aGlzLl9jbGllbnQpO1xufVxuXG5leHBvcnQgdHlwZSBDaGF0TW9kZWwgPSBTaGFyZWQuQ2hhdE1vZGVsO1xuXG5DaGF0LkNvbXBsZXRpb25zID0gQ29tcGxldGlvbnM7XG5DaGF0LkNoYXRDb21wbGV0aW9uc1BhZ2UgPSBDaGF0Q29tcGxldGlvbnNQYWdlO1xuXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgQ2hhdCB7XG4gIGV4cG9ydCB7IHR5cGUgQ2hhdE1vZGVsIGFzIENoYXRNb2RlbCB9O1xuXG4gIGV4cG9ydCB7XG4gICAgQ29tcGxldGlvbnMgYXMgQ29tcGxldGlvbnMsXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbiBhcyBDaGF0Q29tcGxldGlvbixcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uQXNzaXN0YW50TWVzc2FnZVBhcmFtIGFzIENoYXRDb21wbGV0aW9uQXNzaXN0YW50TWVzc2FnZVBhcmFtLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25BdWRpbyBhcyBDaGF0Q29tcGxldGlvbkF1ZGlvLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25BdWRpb1BhcmFtIGFzIENoYXRDb21wbGV0aW9uQXVkaW9QYXJhbSxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uQ2h1bmsgYXMgQ2hhdENvbXBsZXRpb25DaHVuayxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uQ29udGVudFBhcnQgYXMgQ2hhdENvbXBsZXRpb25Db250ZW50UGFydCxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uQ29udGVudFBhcnRJbWFnZSBhcyBDaGF0Q29tcGxldGlvbkNvbnRlbnRQYXJ0SW1hZ2UsXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbkNvbnRlbnRQYXJ0SW5wdXRBdWRpbyBhcyBDaGF0Q29tcGxldGlvbkNvbnRlbnRQYXJ0SW5wdXRBdWRpbyxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uQ29udGVudFBhcnRSZWZ1c2FsIGFzIENoYXRDb21wbGV0aW9uQ29udGVudFBhcnRSZWZ1c2FsLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25Db250ZW50UGFydFRleHQgYXMgQ2hhdENvbXBsZXRpb25Db250ZW50UGFydFRleHQsXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbkRlbGV0ZWQgYXMgQ2hhdENvbXBsZXRpb25EZWxldGVkLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25EZXZlbG9wZXJNZXNzYWdlUGFyYW0gYXMgQ2hhdENvbXBsZXRpb25EZXZlbG9wZXJNZXNzYWdlUGFyYW0sXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbkZ1bmN0aW9uQ2FsbE9wdGlvbiBhcyBDaGF0Q29tcGxldGlvbkZ1bmN0aW9uQ2FsbE9wdGlvbixcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uRnVuY3Rpb25NZXNzYWdlUGFyYW0gYXMgQ2hhdENvbXBsZXRpb25GdW5jdGlvbk1lc3NhZ2VQYXJhbSxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uTWVzc2FnZSBhcyBDaGF0Q29tcGxldGlvbk1lc3NhZ2UsXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbk1lc3NhZ2VQYXJhbSBhcyBDaGF0Q29tcGxldGlvbk1lc3NhZ2VQYXJhbSxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uTWVzc2FnZVRvb2xDYWxsIGFzIENoYXRDb21wbGV0aW9uTWVzc2FnZVRvb2xDYWxsLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25Nb2RhbGl0eSBhcyBDaGF0Q29tcGxldGlvbk1vZGFsaXR5LFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25OYW1lZFRvb2xDaG9pY2UgYXMgQ2hhdENvbXBsZXRpb25OYW1lZFRvb2xDaG9pY2UsXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvblByZWRpY3Rpb25Db250ZW50IGFzIENoYXRDb21wbGV0aW9uUHJlZGljdGlvbkNvbnRlbnQsXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvblJvbGUgYXMgQ2hhdENvbXBsZXRpb25Sb2xlLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25TdG9yZU1lc3NhZ2UgYXMgQ2hhdENvbXBsZXRpb25TdG9yZU1lc3NhZ2UsXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvblN0cmVhbU9wdGlvbnMgYXMgQ2hhdENvbXBsZXRpb25TdHJlYW1PcHRpb25zLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25TeXN0ZW1NZXNzYWdlUGFyYW0gYXMgQ2hhdENvbXBsZXRpb25TeXN0ZW1NZXNzYWdlUGFyYW0sXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvblRva2VuTG9ncHJvYiBhcyBDaGF0Q29tcGxldGlvblRva2VuTG9ncHJvYixcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uVG9vbCBhcyBDaGF0Q29tcGxldGlvblRvb2wsXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvblRvb2xDaG9pY2VPcHRpb24gYXMgQ2hhdENvbXBsZXRpb25Ub29sQ2hvaWNlT3B0aW9uLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25Ub29sTWVzc2FnZVBhcmFtIGFzIENoYXRDb21wbGV0aW9uVG9vbE1lc3NhZ2VQYXJhbSxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uVXNlck1lc3NhZ2VQYXJhbSBhcyBDaGF0Q29tcGxldGlvblVzZXJNZXNzYWdlUGFyYW0sXG4gICAgdHlwZSBDcmVhdGVDaGF0Q29tcGxldGlvblJlcXVlc3RNZXNzYWdlIGFzIENyZWF0ZUNoYXRDb21wbGV0aW9uUmVxdWVzdE1lc3NhZ2UsXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvblJlYXNvbmluZ0VmZm9ydCBhcyBDaGF0Q29tcGxldGlvblJlYXNvbmluZ0VmZm9ydCxcbiAgICBDaGF0Q29tcGxldGlvbnNQYWdlIGFzIENoYXRDb21wbGV0aW9uc1BhZ2UsXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtcyBhcyBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtcyxcbiAgICB0eXBlIENvbXBsZXRpb25DcmVhdGVQYXJhbXMgYXMgQ29tcGxldGlvbkNyZWF0ZVBhcmFtcyxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nIGFzIENoYXRDb21wbGV0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nLFxuICAgIHR5cGUgQ29tcGxldGlvbkNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyBhcyBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXNTdHJlYW1pbmcgYXMgQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXNTdHJlYW1pbmcsXG4gICAgdHlwZSBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zU3RyZWFtaW5nIGFzIENvbXBsZXRpb25DcmVhdGVQYXJhbXNTdHJlYW1pbmcsXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvblVwZGF0ZVBhcmFtcyBhcyBDaGF0Q29tcGxldGlvblVwZGF0ZVBhcmFtcyxcbiAgICB0eXBlIENvbXBsZXRpb25VcGRhdGVQYXJhbXMgYXMgQ29tcGxldGlvblVwZGF0ZVBhcmFtcyxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uTGlzdFBhcmFtcyBhcyBDaGF0Q29tcGxldGlvbkxpc3RQYXJhbXMsXG4gICAgdHlwZSBDb21wbGV0aW9uTGlzdFBhcmFtcyBhcyBDb21wbGV0aW9uTGlzdFBhcmFtcyxcbiAgfTtcbn1cbiIsICIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJy4uLy4uL3Jlc291cmNlJztcbmltcG9ydCAqIGFzIENvcmUgZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgeyB0eXBlIFJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vX3NoaW1zL2luZGV4JztcblxuZXhwb3J0IGNsYXNzIFNwZWVjaCBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhdWRpbyBmcm9tIHRoZSBpbnB1dCB0ZXh0LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0c1xuICAgKiBjb25zdCBzcGVlY2ggPSBhd2FpdCBjbGllbnQuYXVkaW8uc3BlZWNoLmNyZWF0ZSh7XG4gICAqICAgaW5wdXQ6ICdpbnB1dCcsXG4gICAqICAgbW9kZWw6ICdzdHJpbmcnLFxuICAgKiAgIHZvaWNlOiAnYXNoJyxcbiAgICogfSk7XG4gICAqXG4gICAqIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBzcGVlY2guYmxvYigpO1xuICAgKiBjb25zb2xlLmxvZyhjb250ZW50KTtcbiAgICogYGBgXG4gICAqL1xuICBjcmVhdGUoYm9keTogU3BlZWNoQ3JlYXRlUGFyYW1zLCBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IENvcmUuQVBJUHJvbWlzZTxSZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2F1ZGlvL3NwZWVjaCcsIHtcbiAgICAgIGJvZHksXG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgaGVhZGVyczogeyBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICBfX2JpbmFyeVJlc3BvbnNlOiB0cnVlLFxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIFNwZWVjaE1vZGVsID0gJ3R0cy0xJyB8ICd0dHMtMS1oZCcgfCAnZ3B0LTRvLW1pbmktdHRzJztcblxuZXhwb3J0IGludGVyZmFjZSBTcGVlY2hDcmVhdGVQYXJhbXMge1xuICAvKipcbiAgICogVGhlIHRleHQgdG8gZ2VuZXJhdGUgYXVkaW8gZm9yLiBUaGUgbWF4aW11bSBsZW5ndGggaXMgNDA5NiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgaW5wdXQ6IHN0cmluZztcblxuICAvKipcbiAgICogT25lIG9mIHRoZSBhdmFpbGFibGUgW1RUUyBtb2RlbHNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL21vZGVscyN0dHMpOlxuICAgKiBgdHRzLTFgLCBgdHRzLTEtaGRgIG9yIGBncHQtNG8tbWluaS10dHNgLlxuICAgKi9cbiAgbW9kZWw6IChzdHJpbmcgJiB7fSkgfCBTcGVlY2hNb2RlbDtcblxuICAvKipcbiAgICogVGhlIHZvaWNlIHRvIHVzZSB3aGVuIGdlbmVyYXRpbmcgdGhlIGF1ZGlvLiBTdXBwb3J0ZWQgdm9pY2VzIGFyZSBgYWxsb3lgLCBgYXNoYCxcbiAgICogYGJhbGxhZGAsIGBjb3JhbGAsIGBlY2hvYCwgYGZhYmxlYCwgYG9ueXhgLCBgbm92YWAsIGBzYWdlYCwgYHNoaW1tZXJgLCBhbmRcbiAgICogYHZlcnNlYC4gUHJldmlld3Mgb2YgdGhlIHZvaWNlcyBhcmUgYXZhaWxhYmxlIGluIHRoZVxuICAgKiBbVGV4dCB0byBzcGVlY2ggZ3VpZGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy90ZXh0LXRvLXNwZWVjaCN2b2ljZS1vcHRpb25zKS5cbiAgICovXG4gIHZvaWNlOlxuICAgIHwgKHN0cmluZyAmIHt9KVxuICAgIHwgJ2FsbG95J1xuICAgIHwgJ2FzaCdcbiAgICB8ICdiYWxsYWQnXG4gICAgfCAnY29yYWwnXG4gICAgfCAnZWNobydcbiAgICB8ICdmYWJsZSdcbiAgICB8ICdvbnl4J1xuICAgIHwgJ25vdmEnXG4gICAgfCAnc2FnZSdcbiAgICB8ICdzaGltbWVyJ1xuICAgIHwgJ3ZlcnNlJztcblxuICAvKipcbiAgICogQ29udHJvbCB0aGUgdm9pY2Ugb2YgeW91ciBnZW5lcmF0ZWQgYXVkaW8gd2l0aCBhZGRpdGlvbmFsIGluc3RydWN0aW9ucy4gRG9lcyBub3RcbiAgICogd29yayB3aXRoIGB0dHMtMWAgb3IgYHR0cy0xLWhkYC5cbiAgICovXG4gIGluc3RydWN0aW9ucz86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGZvcm1hdCB0byBhdWRpbyBpbi4gU3VwcG9ydGVkIGZvcm1hdHMgYXJlIGBtcDNgLCBgb3B1c2AsIGBhYWNgLCBgZmxhY2AsXG4gICAqIGB3YXZgLCBhbmQgYHBjbWAuXG4gICAqL1xuICByZXNwb25zZV9mb3JtYXQ/OiAnbXAzJyB8ICdvcHVzJyB8ICdhYWMnIHwgJ2ZsYWMnIHwgJ3dhdicgfCAncGNtJztcblxuICAvKipcbiAgICogVGhlIHNwZWVkIG9mIHRoZSBnZW5lcmF0ZWQgYXVkaW8uIFNlbGVjdCBhIHZhbHVlIGZyb20gYDAuMjVgIHRvIGA0LjBgLiBgMS4wYCBpc1xuICAgKiB0aGUgZGVmYXVsdC4gRG9lcyBub3Qgd29yayB3aXRoIGBncHQtNG8tbWluaS10dHNgLlxuICAgKi9cbiAgc3BlZWQ/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBTcGVlY2gge1xuICBleHBvcnQgeyB0eXBlIFNwZWVjaE1vZGVsIGFzIFNwZWVjaE1vZGVsLCB0eXBlIFNwZWVjaENyZWF0ZVBhcmFtcyBhcyBTcGVlY2hDcmVhdGVQYXJhbXMgfTtcbn1cbiIsICIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJy4uLy4uL3Jlc291cmNlJztcbmltcG9ydCAqIGFzIENvcmUgZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyBUcmFuc2NyaXB0aW9uc0FQSSBmcm9tICcuL3RyYW5zY3JpcHRpb25zJztcbmltcG9ydCAqIGFzIEF1ZGlvQVBJIGZyb20gJy4vYXVkaW8nO1xuaW1wb3J0IHsgU3RyZWFtIH0gZnJvbSAnLi4vLi4vc3RyZWFtaW5nJztcblxuZXhwb3J0IGNsYXNzIFRyYW5zY3JpcHRpb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAvKipcbiAgICogVHJhbnNjcmliZXMgYXVkaW8gaW50byB0aGUgaW5wdXQgbGFuZ3VhZ2UuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHRzXG4gICAqIGNvbnN0IHRyYW5zY3JpcHRpb24gPVxuICAgKiAgIGF3YWl0IGNsaWVudC5hdWRpby50cmFuc2NyaXB0aW9ucy5jcmVhdGUoe1xuICAgKiAgICAgZmlsZTogZnMuY3JlYXRlUmVhZFN0cmVhbSgnc3BlZWNoLm1wMycpLFxuICAgKiAgICAgbW9kZWw6ICdncHQtNG8tdHJhbnNjcmliZScsXG4gICAqICAgfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgY3JlYXRlKFxuICAgIGJvZHk6IFRyYW5zY3JpcHRpb25DcmVhdGVQYXJhbXNOb25TdHJlYW1pbmc8J2pzb24nIHwgdW5kZWZpbmVkPixcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5BUElQcm9taXNlPFRyYW5zY3JpcHRpb24+O1xuICBjcmVhdGUoXG4gICAgYm9keTogVHJhbnNjcmlwdGlvbkNyZWF0ZVBhcmFtc05vblN0cmVhbWluZzwndmVyYm9zZV9qc29uJz4sXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuQVBJUHJvbWlzZTxUcmFuc2NyaXB0aW9uVmVyYm9zZT47XG4gIGNyZWF0ZShcbiAgICBib2R5OiBUcmFuc2NyaXB0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nPCdzcnQnIHwgJ3Z0dCcgfCAndGV4dCc+LFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLkFQSVByb21pc2U8c3RyaW5nPjtcbiAgY3JlYXRlKFxuICAgIGJvZHk6IFRyYW5zY3JpcHRpb25DcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuQVBJUHJvbWlzZTxUcmFuc2NyaXB0aW9uPjtcbiAgY3JlYXRlKFxuICAgIGJvZHk6IFRyYW5zY3JpcHRpb25DcmVhdGVQYXJhbXNTdHJlYW1pbmcsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuQVBJUHJvbWlzZTxTdHJlYW08VHJhbnNjcmlwdGlvblN0cmVhbUV2ZW50Pj47XG4gIGNyZWF0ZShcbiAgICBib2R5OiBUcmFuc2NyaXB0aW9uQ3JlYXRlUGFyYW1zU3RyZWFtaW5nLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLkFQSVByb21pc2U8VHJhbnNjcmlwdGlvbkNyZWF0ZVJlc3BvbnNlIHwgc3RyaW5nIHwgU3RyZWFtPFRyYW5zY3JpcHRpb25TdHJlYW1FdmVudD4+O1xuICBjcmVhdGUoXG4gICAgYm9keTogVHJhbnNjcmlwdGlvbkNyZWF0ZVBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5BUElQcm9taXNlPFRyYW5zY3JpcHRpb25DcmVhdGVSZXNwb25zZSB8IHN0cmluZyB8IFN0cmVhbTxUcmFuc2NyaXB0aW9uU3RyZWFtRXZlbnQ+PiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KFxuICAgICAgJy9hdWRpby90cmFuc2NyaXB0aW9ucycsXG4gICAgICBDb3JlLm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyh7XG4gICAgICAgIGJvZHksXG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIHN0cmVhbTogYm9keS5zdHJlYW0gPz8gZmFsc2UsXG4gICAgICAgIF9fbWV0YWRhdGE6IHsgbW9kZWw6IGJvZHkubW9kZWwgfSxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgdHJhbnNjcmlwdGlvbiByZXNwb25zZSByZXR1cm5lZCBieSBtb2RlbCwgYmFzZWQgb24gdGhlIHByb3ZpZGVkXG4gKiBpbnB1dC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUcmFuc2NyaXB0aW9uIHtcbiAgLyoqXG4gICAqIFRoZSB0cmFuc2NyaWJlZCB0ZXh0LlxuICAgKi9cbiAgdGV4dDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgbG9nIHByb2JhYmlsaXRpZXMgb2YgdGhlIHRva2VucyBpbiB0aGUgdHJhbnNjcmlwdGlvbi4gT25seSByZXR1cm5lZCB3aXRoIHRoZVxuICAgKiBtb2RlbHMgYGdwdC00by10cmFuc2NyaWJlYCBhbmQgYGdwdC00by1taW5pLXRyYW5zY3JpYmVgIGlmIGBsb2dwcm9ic2AgaXMgYWRkZWRcbiAgICogdG8gdGhlIGBpbmNsdWRlYCBhcnJheS5cbiAgICovXG4gIGxvZ3Byb2JzPzogQXJyYXk8VHJhbnNjcmlwdGlvbi5Mb2dwcm9iPjtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBUcmFuc2NyaXB0aW9uIHtcbiAgZXhwb3J0IGludGVyZmFjZSBMb2dwcm9iIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdG9rZW4gaW4gdGhlIHRyYW5zY3JpcHRpb24uXG4gICAgICovXG4gICAgdG9rZW4/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYnl0ZXMgb2YgdGhlIHRva2VuLlxuICAgICAqL1xuICAgIGJ5dGVzPzogQXJyYXk8bnVtYmVyPjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsb2cgcHJvYmFiaWxpdHkgb2YgdGhlIHRva2VuLlxuICAgICAqL1xuICAgIGxvZ3Byb2I/OiBudW1iZXI7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgVHJhbnNjcmlwdGlvbkluY2x1ZGUgPSAnbG9ncHJvYnMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zY3JpcHRpb25TZWdtZW50IHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBzZWdtZW50LlxuICAgKi9cbiAgaWQ6IG51bWJlcjtcblxuICAvKipcbiAgICogQXZlcmFnZSBsb2dwcm9iIG9mIHRoZSBzZWdtZW50LiBJZiB0aGUgdmFsdWUgaXMgbG93ZXIgdGhhbiAtMSwgY29uc2lkZXIgdGhlXG4gICAqIGxvZ3Byb2JzIGZhaWxlZC5cbiAgICovXG4gIGF2Z19sb2dwcm9iOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIENvbXByZXNzaW9uIHJhdGlvIG9mIHRoZSBzZWdtZW50LiBJZiB0aGUgdmFsdWUgaXMgZ3JlYXRlciB0aGFuIDIuNCwgY29uc2lkZXIgdGhlXG4gICAqIGNvbXByZXNzaW9uIGZhaWxlZC5cbiAgICovXG4gIGNvbXByZXNzaW9uX3JhdGlvOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEVuZCB0aW1lIG9mIHRoZSBzZWdtZW50IGluIHNlY29uZHMuXG4gICAqL1xuICBlbmQ6IG51bWJlcjtcblxuICAvKipcbiAgICogUHJvYmFiaWxpdHkgb2Ygbm8gc3BlZWNoIGluIHRoZSBzZWdtZW50LiBJZiB0aGUgdmFsdWUgaXMgaGlnaGVyIHRoYW4gMS4wIGFuZCB0aGVcbiAgICogYGF2Z19sb2dwcm9iYCBpcyBiZWxvdyAtMSwgY29uc2lkZXIgdGhpcyBzZWdtZW50IHNpbGVudC5cbiAgICovXG4gIG5vX3NwZWVjaF9wcm9iOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFNlZWsgb2Zmc2V0IG9mIHRoZSBzZWdtZW50LlxuICAgKi9cbiAgc2VlazogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBTdGFydCB0aW1lIG9mIHRoZSBzZWdtZW50IGluIHNlY29uZHMuXG4gICAqL1xuICBzdGFydDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUZW1wZXJhdHVyZSBwYXJhbWV0ZXIgdXNlZCBmb3IgZ2VuZXJhdGluZyB0aGUgc2VnbWVudC5cbiAgICovXG4gIHRlbXBlcmF0dXJlOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRleHQgY29udGVudCBvZiB0aGUgc2VnbWVudC5cbiAgICovXG4gIHRleHQ6IHN0cmluZztcblxuICAvKipcbiAgICogQXJyYXkgb2YgdG9rZW4gSURzIGZvciB0aGUgdGV4dCBjb250ZW50LlxuICAgKi9cbiAgdG9rZW5zOiBBcnJheTxudW1iZXI+O1xufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbiB0aGVyZSBpcyBhbiBhZGRpdGlvbmFsIHRleHQgZGVsdGEuIFRoaXMgaXMgYWxzbyB0aGUgZmlyc3QgZXZlbnRcbiAqIGVtaXR0ZWQgd2hlbiB0aGUgdHJhbnNjcmlwdGlvbiBzdGFydHMuIE9ubHkgZW1pdHRlZCB3aGVuIHlvdVxuICogW2NyZWF0ZSBhIHRyYW5zY3JpcHRpb25dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvYXVkaW8vY3JlYXRlLXRyYW5zY3JpcHRpb24pXG4gKiB3aXRoIHRoZSBgU3RyZWFtYCBwYXJhbWV0ZXIgc2V0IHRvIGB0cnVlYC5cbiAqL1xuZXhwb3J0IHR5cGUgVHJhbnNjcmlwdGlvblN0cmVhbUV2ZW50ID0gVHJhbnNjcmlwdGlvblRleHREZWx0YUV2ZW50IHwgVHJhbnNjcmlwdGlvblRleHREb25lRXZlbnQ7XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuIHRoZXJlIGlzIGFuIGFkZGl0aW9uYWwgdGV4dCBkZWx0YS4gVGhpcyBpcyBhbHNvIHRoZSBmaXJzdCBldmVudFxuICogZW1pdHRlZCB3aGVuIHRoZSB0cmFuc2NyaXB0aW9uIHN0YXJ0cy4gT25seSBlbWl0dGVkIHdoZW4geW91XG4gKiBbY3JlYXRlIGEgdHJhbnNjcmlwdGlvbl0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9hdWRpby9jcmVhdGUtdHJhbnNjcmlwdGlvbilcbiAqIHdpdGggdGhlIGBTdHJlYW1gIHBhcmFtZXRlciBzZXQgdG8gYHRydWVgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zY3JpcHRpb25UZXh0RGVsdGFFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgdGV4dCBkZWx0YSB0aGF0IHdhcyBhZGRpdGlvbmFsbHkgdHJhbnNjcmliZWQuXG4gICAqL1xuICBkZWx0YTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgZXZlbnQuIEFsd2F5cyBgdHJhbnNjcmlwdC50ZXh0LmRlbHRhYC5cbiAgICovXG4gIHR5cGU6ICd0cmFuc2NyaXB0LnRleHQuZGVsdGEnO1xuXG4gIC8qKlxuICAgKiBUaGUgbG9nIHByb2JhYmlsaXRpZXMgb2YgdGhlIGRlbHRhLiBPbmx5IGluY2x1ZGVkIGlmIHlvdVxuICAgKiBbY3JlYXRlIGEgdHJhbnNjcmlwdGlvbl0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9hdWRpby9jcmVhdGUtdHJhbnNjcmlwdGlvbilcbiAgICogd2l0aCB0aGUgYGluY2x1ZGVbXWAgcGFyYW1ldGVyIHNldCB0byBgbG9ncHJvYnNgLlxuICAgKi9cbiAgbG9ncHJvYnM/OiBBcnJheTxUcmFuc2NyaXB0aW9uVGV4dERlbHRhRXZlbnQuTG9ncHJvYj47XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgVHJhbnNjcmlwdGlvblRleHREZWx0YUV2ZW50IHtcbiAgZXhwb3J0IGludGVyZmFjZSBMb2dwcm9iIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdG9rZW4gdGhhdCB3YXMgdXNlZCB0byBnZW5lcmF0ZSB0aGUgbG9nIHByb2JhYmlsaXR5LlxuICAgICAqL1xuICAgIHRva2VuPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJ5dGVzIHRoYXQgd2VyZSB1c2VkIHRvIGdlbmVyYXRlIHRoZSBsb2cgcHJvYmFiaWxpdHkuXG4gICAgICovXG4gICAgYnl0ZXM/OiBBcnJheTx1bmtub3duPjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsb2cgcHJvYmFiaWxpdHkgb2YgdGhlIHRva2VuLlxuICAgICAqL1xuICAgIGxvZ3Byb2I/OiBudW1iZXI7XG4gIH1cbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdGhlIHRyYW5zY3JpcHRpb24gaXMgY29tcGxldGUuIENvbnRhaW5zIHRoZSBjb21wbGV0ZSB0cmFuc2NyaXB0aW9uXG4gKiB0ZXh0LiBPbmx5IGVtaXR0ZWQgd2hlbiB5b3VcbiAqIFtjcmVhdGUgYSB0cmFuc2NyaXB0aW9uXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2F1ZGlvL2NyZWF0ZS10cmFuc2NyaXB0aW9uKVxuICogd2l0aCB0aGUgYFN0cmVhbWAgcGFyYW1ldGVyIHNldCB0byBgdHJ1ZWAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNjcmlwdGlvblRleHREb25lRXZlbnQge1xuICAvKipcbiAgICogVGhlIHRleHQgdGhhdCB3YXMgdHJhbnNjcmliZWQuXG4gICAqL1xuICB0ZXh0OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC4gQWx3YXlzIGB0cmFuc2NyaXB0LnRleHQuZG9uZWAuXG4gICAqL1xuICB0eXBlOiAndHJhbnNjcmlwdC50ZXh0LmRvbmUnO1xuXG4gIC8qKlxuICAgKiBUaGUgbG9nIHByb2JhYmlsaXRpZXMgb2YgdGhlIGluZGl2aWR1YWwgdG9rZW5zIGluIHRoZSB0cmFuc2NyaXB0aW9uLiBPbmx5XG4gICAqIGluY2x1ZGVkIGlmIHlvdVxuICAgKiBbY3JlYXRlIGEgdHJhbnNjcmlwdGlvbl0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9hdWRpby9jcmVhdGUtdHJhbnNjcmlwdGlvbilcbiAgICogd2l0aCB0aGUgYGluY2x1ZGVbXWAgcGFyYW1ldGVyIHNldCB0byBgbG9ncHJvYnNgLlxuICAgKi9cbiAgbG9ncHJvYnM/OiBBcnJheTxUcmFuc2NyaXB0aW9uVGV4dERvbmVFdmVudC5Mb2dwcm9iPjtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBUcmFuc2NyaXB0aW9uVGV4dERvbmVFdmVudCB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgTG9ncHJvYiB7XG4gICAgLyoqXG4gICAgICogVGhlIHRva2VuIHRoYXQgd2FzIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGxvZyBwcm9iYWJpbGl0eS5cbiAgICAgKi9cbiAgICB0b2tlbj86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBieXRlcyB0aGF0IHdlcmUgdXNlZCB0byBnZW5lcmF0ZSB0aGUgbG9nIHByb2JhYmlsaXR5LlxuICAgICAqL1xuICAgIGJ5dGVzPzogQXJyYXk8dW5rbm93bj47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbG9nIHByb2JhYmlsaXR5IG9mIHRoZSB0b2tlbi5cbiAgICAgKi9cbiAgICBsb2dwcm9iPzogbnVtYmVyO1xuICB9XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHZlcmJvc2UganNvbiB0cmFuc2NyaXB0aW9uIHJlc3BvbnNlIHJldHVybmVkIGJ5IG1vZGVsLCBiYXNlZCBvbiB0aGVcbiAqIHByb3ZpZGVkIGlucHV0LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zY3JpcHRpb25WZXJib3NlIHtcbiAgLyoqXG4gICAqIFRoZSBkdXJhdGlvbiBvZiB0aGUgaW5wdXQgYXVkaW8uXG4gICAqL1xuICBkdXJhdGlvbjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgbGFuZ3VhZ2Ugb2YgdGhlIGlucHV0IGF1ZGlvLlxuICAgKi9cbiAgbGFuZ3VhZ2U6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHRyYW5zY3JpYmVkIHRleHQuXG4gICAqL1xuICB0ZXh0OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNlZ21lbnRzIG9mIHRoZSB0cmFuc2NyaWJlZCB0ZXh0IGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIGRldGFpbHMuXG4gICAqL1xuICBzZWdtZW50cz86IEFycmF5PFRyYW5zY3JpcHRpb25TZWdtZW50PjtcblxuICAvKipcbiAgICogRXh0cmFjdGVkIHdvcmRzIGFuZCB0aGVpciBjb3JyZXNwb25kaW5nIHRpbWVzdGFtcHMuXG4gICAqL1xuICB3b3Jkcz86IEFycmF5PFRyYW5zY3JpcHRpb25Xb3JkPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUcmFuc2NyaXB0aW9uV29yZCB7XG4gIC8qKlxuICAgKiBFbmQgdGltZSBvZiB0aGUgd29yZCBpbiBzZWNvbmRzLlxuICAgKi9cbiAgZW5kOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFN0YXJ0IHRpbWUgb2YgdGhlIHdvcmQgaW4gc2Vjb25kcy5cbiAgICovXG4gIHN0YXJ0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIHdvcmQuXG4gICAqL1xuICB3b3JkOiBzdHJpbmc7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHRyYW5zY3JpcHRpb24gcmVzcG9uc2UgcmV0dXJuZWQgYnkgbW9kZWwsIGJhc2VkIG9uIHRoZSBwcm92aWRlZFxuICogaW5wdXQuXG4gKi9cbmV4cG9ydCB0eXBlIFRyYW5zY3JpcHRpb25DcmVhdGVSZXNwb25zZSA9IFRyYW5zY3JpcHRpb24gfCBUcmFuc2NyaXB0aW9uVmVyYm9zZTtcblxuZXhwb3J0IHR5cGUgVHJhbnNjcmlwdGlvbkNyZWF0ZVBhcmFtczxcbiAgUmVzcG9uc2VGb3JtYXQgZXh0ZW5kcyBBdWRpb0FQSS5BdWRpb1Jlc3BvbnNlRm9ybWF0IHwgdW5kZWZpbmVkID0gQXVkaW9BUEkuQXVkaW9SZXNwb25zZUZvcm1hdCB8IHVuZGVmaW5lZCxcbj4gPSBUcmFuc2NyaXB0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nPFJlc3BvbnNlRm9ybWF0PiB8IFRyYW5zY3JpcHRpb25DcmVhdGVQYXJhbXNTdHJlYW1pbmc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNjcmlwdGlvbkNyZWF0ZVBhcmFtc0Jhc2U8XG4gIFJlc3BvbnNlRm9ybWF0IGV4dGVuZHMgQXVkaW9BUEkuQXVkaW9SZXNwb25zZUZvcm1hdCB8IHVuZGVmaW5lZCA9IEF1ZGlvQVBJLkF1ZGlvUmVzcG9uc2VGb3JtYXQgfCB1bmRlZmluZWQsXG4+IHtcbiAgLyoqXG4gICAqIFRoZSBhdWRpbyBmaWxlIG9iamVjdCAobm90IGZpbGUgbmFtZSkgdG8gdHJhbnNjcmliZSwgaW4gb25lIG9mIHRoZXNlIGZvcm1hdHM6XG4gICAqIGZsYWMsIG1wMywgbXA0LCBtcGVnLCBtcGdhLCBtNGEsIG9nZywgd2F2LCBvciB3ZWJtLlxuICAgKi9cbiAgZmlsZTogQ29yZS5VcGxvYWRhYmxlO1xuXG4gIC8qKlxuICAgKiBJRCBvZiB0aGUgbW9kZWwgdG8gdXNlLiBUaGUgb3B0aW9ucyBhcmUgYGdwdC00by10cmFuc2NyaWJlYCxcbiAgICogYGdwdC00by1taW5pLXRyYW5zY3JpYmVgLCBhbmQgYHdoaXNwZXItMWAgKHdoaWNoIGlzIHBvd2VyZWQgYnkgb3VyIG9wZW4gc291cmNlXG4gICAqIFdoaXNwZXIgVjIgbW9kZWwpLlxuICAgKi9cbiAgbW9kZWw6IChzdHJpbmcgJiB7fSkgfCBBdWRpb0FQSS5BdWRpb01vZGVsO1xuXG4gIC8qKlxuICAgKiBDb250cm9scyBob3cgdGhlIGF1ZGlvIGlzIGN1dCBpbnRvIGNodW5rcy4gV2hlbiBzZXQgdG8gYFwiYXV0b1wiYCwgdGhlIHNlcnZlclxuICAgKiBmaXJzdCBub3JtYWxpemVzIGxvdWRuZXNzIGFuZCB0aGVuIHVzZXMgdm9pY2UgYWN0aXZpdHkgZGV0ZWN0aW9uIChWQUQpIHRvIGNob29zZVxuICAgKiBib3VuZGFyaWVzLiBgc2VydmVyX3ZhZGAgb2JqZWN0IGNhbiBiZSBwcm92aWRlZCB0byB0d2VhayBWQUQgZGV0ZWN0aW9uXG4gICAqIHBhcmFtZXRlcnMgbWFudWFsbHkuIElmIHVuc2V0LCB0aGUgYXVkaW8gaXMgdHJhbnNjcmliZWQgYXMgYSBzaW5nbGUgYmxvY2suXG4gICAqL1xuICBjaHVua2luZ19zdHJhdGVneT86ICdhdXRvJyB8IFRyYW5zY3JpcHRpb25DcmVhdGVQYXJhbXMuVmFkQ29uZmlnIHwgbnVsbDtcblxuICAvKipcbiAgICogQWRkaXRpb25hbCBpbmZvcm1hdGlvbiB0byBpbmNsdWRlIGluIHRoZSB0cmFuc2NyaXB0aW9uIHJlc3BvbnNlLiBgbG9ncHJvYnNgIHdpbGxcbiAgICogcmV0dXJuIHRoZSBsb2cgcHJvYmFiaWxpdGllcyBvZiB0aGUgdG9rZW5zIGluIHRoZSByZXNwb25zZSB0byB1bmRlcnN0YW5kIHRoZVxuICAgKiBtb2RlbCdzIGNvbmZpZGVuY2UgaW4gdGhlIHRyYW5zY3JpcHRpb24uIGBsb2dwcm9ic2Agb25seSB3b3JrcyB3aXRoXG4gICAqIHJlc3BvbnNlX2Zvcm1hdCBzZXQgdG8gYGpzb25gIGFuZCBvbmx5IHdpdGggdGhlIG1vZGVscyBgZ3B0LTRvLXRyYW5zY3JpYmVgIGFuZFxuICAgKiBgZ3B0LTRvLW1pbmktdHJhbnNjcmliZWAuXG4gICAqL1xuICBpbmNsdWRlPzogQXJyYXk8VHJhbnNjcmlwdGlvbkluY2x1ZGU+O1xuXG4gIC8qKlxuICAgKiBUaGUgbGFuZ3VhZ2Ugb2YgdGhlIGlucHV0IGF1ZGlvLiBTdXBwbHlpbmcgdGhlIGlucHV0IGxhbmd1YWdlIGluXG4gICAqIFtJU08tNjM5LTFdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpc3Rfb2ZfSVNPXzYzOS0xX2NvZGVzKSAoZS5nLiBgZW5gKVxuICAgKiBmb3JtYXQgd2lsbCBpbXByb3ZlIGFjY3VyYWN5IGFuZCBsYXRlbmN5LlxuICAgKi9cbiAgbGFuZ3VhZ2U/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEFuIG9wdGlvbmFsIHRleHQgdG8gZ3VpZGUgdGhlIG1vZGVsJ3Mgc3R5bGUgb3IgY29udGludWUgYSBwcmV2aW91cyBhdWRpb1xuICAgKiBzZWdtZW50LiBUaGVcbiAgICogW3Byb21wdF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3NwZWVjaC10by10ZXh0I3Byb21wdGluZylcbiAgICogc2hvdWxkIG1hdGNoIHRoZSBhdWRpbyBsYW5ndWFnZS5cbiAgICovXG4gIHByb21wdD86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGZvcm1hdCBvZiB0aGUgb3V0cHV0LCBpbiBvbmUgb2YgdGhlc2Ugb3B0aW9uczogYGpzb25gLCBgdGV4dGAsIGBzcnRgLFxuICAgKiBgdmVyYm9zZV9qc29uYCwgb3IgYHZ0dGAuIEZvciBgZ3B0LTRvLXRyYW5zY3JpYmVgIGFuZCBgZ3B0LTRvLW1pbmktdHJhbnNjcmliZWAsXG4gICAqIHRoZSBvbmx5IHN1cHBvcnRlZCBmb3JtYXQgaXMgYGpzb25gLlxuICAgKi9cbiAgcmVzcG9uc2VfZm9ybWF0PzogUmVzcG9uc2VGb3JtYXQ7XG5cbiAgLyoqXG4gICAqIElmIHNldCB0byB0cnVlLCB0aGUgbW9kZWwgcmVzcG9uc2UgZGF0YSB3aWxsIGJlIHN0cmVhbWVkIHRvIHRoZSBjbGllbnQgYXMgaXQgaXNcbiAgICogZ2VuZXJhdGVkIHVzaW5nXG4gICAqIFtzZXJ2ZXItc2VudCBldmVudHNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9TZXJ2ZXItc2VudF9ldmVudHMvVXNpbmdfc2VydmVyLXNlbnRfZXZlbnRzI0V2ZW50X3N0cmVhbV9mb3JtYXQpLlxuICAgKiBTZWUgdGhlXG4gICAqIFtTdHJlYW1pbmcgc2VjdGlvbiBvZiB0aGUgU3BlZWNoLXRvLVRleHQgZ3VpZGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9zcGVlY2gtdG8tdGV4dD9sYW5nPWN1cmwjc3RyZWFtaW5nLXRyYW5zY3JpcHRpb25zKVxuICAgKiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICpcbiAgICogTm90ZTogU3RyZWFtaW5nIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHRoZSBgd2hpc3Blci0xYCBtb2RlbCBhbmQgd2lsbCBiZSBpZ25vcmVkLlxuICAgKi9cbiAgc3RyZWFtPzogYm9vbGVhbiB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBzYW1wbGluZyB0ZW1wZXJhdHVyZSwgYmV0d2VlbiAwIGFuZCAxLiBIaWdoZXIgdmFsdWVzIGxpa2UgMC44IHdpbGwgbWFrZSB0aGVcbiAgICogb3V0cHV0IG1vcmUgcmFuZG9tLCB3aGlsZSBsb3dlciB2YWx1ZXMgbGlrZSAwLjIgd2lsbCBtYWtlIGl0IG1vcmUgZm9jdXNlZCBhbmRcbiAgICogZGV0ZXJtaW5pc3RpYy4gSWYgc2V0IHRvIDAsIHRoZSBtb2RlbCB3aWxsIHVzZVxuICAgKiBbbG9nIHByb2JhYmlsaXR5XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Mb2dfcHJvYmFiaWxpdHkpIHRvXG4gICAqIGF1dG9tYXRpY2FsbHkgaW5jcmVhc2UgdGhlIHRlbXBlcmF0dXJlIHVudGlsIGNlcnRhaW4gdGhyZXNob2xkcyBhcmUgaGl0LlxuICAgKi9cbiAgdGVtcGVyYXR1cmU/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0aW1lc3RhbXAgZ3JhbnVsYXJpdGllcyB0byBwb3B1bGF0ZSBmb3IgdGhpcyB0cmFuc2NyaXB0aW9uLlxuICAgKiBgcmVzcG9uc2VfZm9ybWF0YCBtdXN0IGJlIHNldCBgdmVyYm9zZV9qc29uYCB0byB1c2UgdGltZXN0YW1wIGdyYW51bGFyaXRpZXMuXG4gICAqIEVpdGhlciBvciBib3RoIG9mIHRoZXNlIG9wdGlvbnMgYXJlIHN1cHBvcnRlZDogYHdvcmRgLCBvciBgc2VnbWVudGAuIE5vdGU6IFRoZXJlXG4gICAqIGlzIG5vIGFkZGl0aW9uYWwgbGF0ZW5jeSBmb3Igc2VnbWVudCB0aW1lc3RhbXBzLCBidXQgZ2VuZXJhdGluZyB3b3JkIHRpbWVzdGFtcHNcbiAgICogaW5jdXJzIGFkZGl0aW9uYWwgbGF0ZW5jeS5cbiAgICovXG4gIHRpbWVzdGFtcF9ncmFudWxhcml0aWVzPzogQXJyYXk8J3dvcmQnIHwgJ3NlZ21lbnQnPjtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBUcmFuc2NyaXB0aW9uQ3JlYXRlUGFyYW1zIHtcbiAgZXhwb3J0IGludGVyZmFjZSBWYWRDb25maWcge1xuICAgIC8qKlxuICAgICAqIE11c3QgYmUgc2V0IHRvIGBzZXJ2ZXJfdmFkYCB0byBlbmFibGUgbWFudWFsIGNodW5raW5nIHVzaW5nIHNlcnZlciBzaWRlIFZBRC5cbiAgICAgKi9cbiAgICB0eXBlOiAnc2VydmVyX3ZhZCc7XG5cbiAgICAvKipcbiAgICAgKiBBbW91bnQgb2YgYXVkaW8gdG8gaW5jbHVkZSBiZWZvcmUgdGhlIFZBRCBkZXRlY3RlZCBzcGVlY2ggKGluIG1pbGxpc2Vjb25kcykuXG4gICAgICovXG4gICAgcHJlZml4X3BhZGRpbmdfbXM/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBEdXJhdGlvbiBvZiBzaWxlbmNlIHRvIGRldGVjdCBzcGVlY2ggc3RvcCAoaW4gbWlsbGlzZWNvbmRzKS4gV2l0aCBzaG9ydGVyIHZhbHVlc1xuICAgICAqIHRoZSBtb2RlbCB3aWxsIHJlc3BvbmQgbW9yZSBxdWlja2x5LCBidXQgbWF5IGp1bXAgaW4gb24gc2hvcnQgcGF1c2VzIGZyb20gdGhlXG4gICAgICogdXNlci5cbiAgICAgKi9cbiAgICBzaWxlbmNlX2R1cmF0aW9uX21zPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogU2Vuc2l0aXZpdHkgdGhyZXNob2xkICgwLjAgdG8gMS4wKSBmb3Igdm9pY2UgYWN0aXZpdHkgZGV0ZWN0aW9uLiBBIGhpZ2hlclxuICAgICAqIHRocmVzaG9sZCB3aWxsIHJlcXVpcmUgbG91ZGVyIGF1ZGlvIHRvIGFjdGl2YXRlIHRoZSBtb2RlbCwgYW5kIHRodXMgbWlnaHRcbiAgICAgKiBwZXJmb3JtIGJldHRlciBpbiBub2lzeSBlbnZpcm9ubWVudHMuXG4gICAgICovXG4gICAgdGhyZXNob2xkPzogbnVtYmVyO1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgVHJhbnNjcmlwdGlvbkNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyA9IFRyYW5zY3JpcHRpb25zQVBJLlRyYW5zY3JpcHRpb25DcmVhdGVQYXJhbXNOb25TdHJlYW1pbmc7XG4gIGV4cG9ydCB0eXBlIFRyYW5zY3JpcHRpb25DcmVhdGVQYXJhbXNTdHJlYW1pbmcgPSBUcmFuc2NyaXB0aW9uc0FQSS5UcmFuc2NyaXB0aW9uQ3JlYXRlUGFyYW1zU3RyZWFtaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zY3JpcHRpb25DcmVhdGVQYXJhbXNOb25TdHJlYW1pbmc8XG4gIFJlc3BvbnNlRm9ybWF0IGV4dGVuZHMgQXVkaW9BUEkuQXVkaW9SZXNwb25zZUZvcm1hdCB8IHVuZGVmaW5lZCA9IEF1ZGlvQVBJLkF1ZGlvUmVzcG9uc2VGb3JtYXQgfCB1bmRlZmluZWQsXG4+IGV4dGVuZHMgVHJhbnNjcmlwdGlvbkNyZWF0ZVBhcmFtc0Jhc2U8UmVzcG9uc2VGb3JtYXQ+IHtcbiAgLyoqXG4gICAqIElmIHNldCB0byB0cnVlLCB0aGUgbW9kZWwgcmVzcG9uc2UgZGF0YSB3aWxsIGJlIHN0cmVhbWVkIHRvIHRoZSBjbGllbnQgYXMgaXQgaXNcbiAgICogZ2VuZXJhdGVkIHVzaW5nXG4gICAqIFtzZXJ2ZXItc2VudCBldmVudHNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9TZXJ2ZXItc2VudF9ldmVudHMvVXNpbmdfc2VydmVyLXNlbnRfZXZlbnRzI0V2ZW50X3N0cmVhbV9mb3JtYXQpLlxuICAgKiBTZWUgdGhlXG4gICAqIFtTdHJlYW1pbmcgc2VjdGlvbiBvZiB0aGUgU3BlZWNoLXRvLVRleHQgZ3VpZGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9zcGVlY2gtdG8tdGV4dD9sYW5nPWN1cmwjc3RyZWFtaW5nLXRyYW5zY3JpcHRpb25zKVxuICAgKiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICpcbiAgICogTm90ZTogU3RyZWFtaW5nIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHRoZSBgd2hpc3Blci0xYCBtb2RlbCBhbmQgd2lsbCBiZSBpZ25vcmVkLlxuICAgKi9cbiAgc3RyZWFtPzogZmFsc2UgfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zY3JpcHRpb25DcmVhdGVQYXJhbXNTdHJlYW1pbmcgZXh0ZW5kcyBUcmFuc2NyaXB0aW9uQ3JlYXRlUGFyYW1zQmFzZSB7XG4gIC8qKlxuICAgKiBJZiBzZXQgdG8gdHJ1ZSwgdGhlIG1vZGVsIHJlc3BvbnNlIGRhdGEgd2lsbCBiZSBzdHJlYW1lZCB0byB0aGUgY2xpZW50IGFzIGl0IGlzXG4gICAqIGdlbmVyYXRlZCB1c2luZ1xuICAgKiBbc2VydmVyLXNlbnQgZXZlbnRzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvU2VydmVyLXNlbnRfZXZlbnRzL1VzaW5nX3NlcnZlci1zZW50X2V2ZW50cyNFdmVudF9zdHJlYW1fZm9ybWF0KS5cbiAgICogU2VlIHRoZVxuICAgKiBbU3RyZWFtaW5nIHNlY3Rpb24gb2YgdGhlIFNwZWVjaC10by1UZXh0IGd1aWRlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvc3BlZWNoLXRvLXRleHQ/bGFuZz1jdXJsI3N0cmVhbWluZy10cmFuc2NyaXB0aW9ucylcbiAgICogZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqXG4gICAqIE5vdGU6IFN0cmVhbWluZyBpcyBub3Qgc3VwcG9ydGVkIGZvciB0aGUgYHdoaXNwZXItMWAgbW9kZWwgYW5kIHdpbGwgYmUgaWdub3JlZC5cbiAgICovXG4gIHN0cmVhbTogdHJ1ZTtcbn1cblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIFRyYW5zY3JpcHRpb25zIHtcbiAgZXhwb3J0IHtcbiAgICB0eXBlIFRyYW5zY3JpcHRpb24gYXMgVHJhbnNjcmlwdGlvbixcbiAgICB0eXBlIFRyYW5zY3JpcHRpb25JbmNsdWRlIGFzIFRyYW5zY3JpcHRpb25JbmNsdWRlLFxuICAgIHR5cGUgVHJhbnNjcmlwdGlvblNlZ21lbnQgYXMgVHJhbnNjcmlwdGlvblNlZ21lbnQsXG4gICAgdHlwZSBUcmFuc2NyaXB0aW9uU3RyZWFtRXZlbnQgYXMgVHJhbnNjcmlwdGlvblN0cmVhbUV2ZW50LFxuICAgIHR5cGUgVHJhbnNjcmlwdGlvblRleHREZWx0YUV2ZW50IGFzIFRyYW5zY3JpcHRpb25UZXh0RGVsdGFFdmVudCxcbiAgICB0eXBlIFRyYW5zY3JpcHRpb25UZXh0RG9uZUV2ZW50IGFzIFRyYW5zY3JpcHRpb25UZXh0RG9uZUV2ZW50LFxuICAgIHR5cGUgVHJhbnNjcmlwdGlvblZlcmJvc2UgYXMgVHJhbnNjcmlwdGlvblZlcmJvc2UsXG4gICAgdHlwZSBUcmFuc2NyaXB0aW9uV29yZCBhcyBUcmFuc2NyaXB0aW9uV29yZCxcbiAgICB0eXBlIFRyYW5zY3JpcHRpb25DcmVhdGVSZXNwb25zZSBhcyBUcmFuc2NyaXB0aW9uQ3JlYXRlUmVzcG9uc2UsXG4gICAgdHlwZSBUcmFuc2NyaXB0aW9uQ3JlYXRlUGFyYW1zIGFzIFRyYW5zY3JpcHRpb25DcmVhdGVQYXJhbXMsXG4gICAgdHlwZSBUcmFuc2NyaXB0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nIGFzIFRyYW5zY3JpcHRpb25DcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcsXG4gICAgdHlwZSBUcmFuc2NyaXB0aW9uQ3JlYXRlUGFyYW1zU3RyZWFtaW5nIGFzIFRyYW5zY3JpcHRpb25DcmVhdGVQYXJhbXNTdHJlYW1pbmcsXG4gIH07XG59XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICcuLi8uLi9yZXNvdXJjZSc7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgQXVkaW9BUEkgZnJvbSAnLi9hdWRpbyc7XG5pbXBvcnQgKiBhcyBUcmFuc2NyaXB0aW9uc0FQSSBmcm9tICcuL3RyYW5zY3JpcHRpb25zJztcblxuZXhwb3J0IGNsYXNzIFRyYW5zbGF0aW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgLyoqXG4gICAqIFRyYW5zbGF0ZXMgYXVkaW8gaW50byBFbmdsaXNoLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0c1xuICAgKiBjb25zdCB0cmFuc2xhdGlvbiA9IGF3YWl0IGNsaWVudC5hdWRpby50cmFuc2xhdGlvbnMuY3JlYXRlKHtcbiAgICogICBmaWxlOiBmcy5jcmVhdGVSZWFkU3RyZWFtKCdzcGVlY2gubXAzJyksXG4gICAqICAgbW9kZWw6ICd3aGlzcGVyLTEnLFxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICBjcmVhdGUoXG4gICAgYm9keTogVHJhbnNsYXRpb25DcmVhdGVQYXJhbXM8J2pzb24nIHwgdW5kZWZpbmVkPixcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5BUElQcm9taXNlPFRyYW5zbGF0aW9uPjtcbiAgY3JlYXRlKFxuICAgIGJvZHk6IFRyYW5zbGF0aW9uQ3JlYXRlUGFyYW1zPCd2ZXJib3NlX2pzb24nPixcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5BUElQcm9taXNlPFRyYW5zbGF0aW9uVmVyYm9zZT47XG4gIGNyZWF0ZShcbiAgICBib2R5OiBUcmFuc2xhdGlvbkNyZWF0ZVBhcmFtczwndGV4dCcgfCAnc3J0JyB8ICd2dHQnPixcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5BUElQcm9taXNlPHN0cmluZz47XG4gIGNyZWF0ZShib2R5OiBUcmFuc2xhdGlvbkNyZWF0ZVBhcmFtcywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkFQSVByb21pc2U8VHJhbnNsYXRpb24+O1xuICBjcmVhdGUoXG4gICAgYm9keTogVHJhbnNsYXRpb25DcmVhdGVQYXJhbXMsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuQVBJUHJvbWlzZTxUcmFuc2xhdGlvbkNyZWF0ZVJlc3BvbnNlIHwgc3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KFxuICAgICAgJy9hdWRpby90cmFuc2xhdGlvbnMnLFxuICAgICAgQ29yZS5tdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMoeyBib2R5LCAuLi5vcHRpb25zLCBfX21ldGFkYXRhOiB7IG1vZGVsOiBib2R5Lm1vZGVsIH0gfSksXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zbGF0aW9uIHtcbiAgdGV4dDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zbGF0aW9uVmVyYm9zZSB7XG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gb2YgdGhlIGlucHV0IGF1ZGlvLlxuICAgKi9cbiAgZHVyYXRpb246IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGxhbmd1YWdlIG9mIHRoZSBvdXRwdXQgdHJhbnNsYXRpb24gKGFsd2F5cyBgZW5nbGlzaGApLlxuICAgKi9cbiAgbGFuZ3VhZ2U6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHRyYW5zbGF0ZWQgdGV4dC5cbiAgICovXG4gIHRleHQ6IHN0cmluZztcblxuICAvKipcbiAgICogU2VnbWVudHMgb2YgdGhlIHRyYW5zbGF0ZWQgdGV4dCBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBkZXRhaWxzLlxuICAgKi9cbiAgc2VnbWVudHM/OiBBcnJheTxUcmFuc2NyaXB0aW9uc0FQSS5UcmFuc2NyaXB0aW9uU2VnbWVudD47XG59XG5cbmV4cG9ydCB0eXBlIFRyYW5zbGF0aW9uQ3JlYXRlUmVzcG9uc2UgPSBUcmFuc2xhdGlvbiB8IFRyYW5zbGF0aW9uVmVyYm9zZTtcblxuZXhwb3J0IGludGVyZmFjZSBUcmFuc2xhdGlvbkNyZWF0ZVBhcmFtczxcbiAgUmVzcG9uc2VGb3JtYXQgZXh0ZW5kcyBBdWRpb0FQSS5BdWRpb1Jlc3BvbnNlRm9ybWF0IHwgdW5kZWZpbmVkID0gQXVkaW9BUEkuQXVkaW9SZXNwb25zZUZvcm1hdCB8IHVuZGVmaW5lZCxcbj4ge1xuICAvKipcbiAgICogVGhlIGF1ZGlvIGZpbGUgb2JqZWN0IChub3QgZmlsZSBuYW1lKSB0cmFuc2xhdGUsIGluIG9uZSBvZiB0aGVzZSBmb3JtYXRzOiBmbGFjLFxuICAgKiBtcDMsIG1wNCwgbXBlZywgbXBnYSwgbTRhLCBvZ2csIHdhdiwgb3Igd2VibS5cbiAgICovXG4gIGZpbGU6IENvcmUuVXBsb2FkYWJsZTtcblxuICAvKipcbiAgICogSUQgb2YgdGhlIG1vZGVsIHRvIHVzZS4gT25seSBgd2hpc3Blci0xYCAod2hpY2ggaXMgcG93ZXJlZCBieSBvdXIgb3BlbiBzb3VyY2VcbiAgICogV2hpc3BlciBWMiBtb2RlbCkgaXMgY3VycmVudGx5IGF2YWlsYWJsZS5cbiAgICovXG4gIG1vZGVsOiAoc3RyaW5nICYge30pIHwgQXVkaW9BUEkuQXVkaW9Nb2RlbDtcblxuICAvKipcbiAgICogQW4gb3B0aW9uYWwgdGV4dCB0byBndWlkZSB0aGUgbW9kZWwncyBzdHlsZSBvciBjb250aW51ZSBhIHByZXZpb3VzIGF1ZGlvXG4gICAqIHNlZ21lbnQuIFRoZVxuICAgKiBbcHJvbXB0XShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvc3BlZWNoLXRvLXRleHQjcHJvbXB0aW5nKVxuICAgKiBzaG91bGQgYmUgaW4gRW5nbGlzaC5cbiAgICovXG4gIHByb21wdD86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGZvcm1hdCBvZiB0aGUgb3V0cHV0LCBpbiBvbmUgb2YgdGhlc2Ugb3B0aW9uczogYGpzb25gLCBgdGV4dGAsIGBzcnRgLFxuICAgKiBgdmVyYm9zZV9qc29uYCwgb3IgYHZ0dGAuXG4gICAqL1xuICByZXNwb25zZV9mb3JtYXQ/OiAnanNvbicgfCAndGV4dCcgfCAnc3J0JyB8ICd2ZXJib3NlX2pzb24nIHwgJ3Z0dCc7XG5cbiAgLyoqXG4gICAqIFRoZSBzYW1wbGluZyB0ZW1wZXJhdHVyZSwgYmV0d2VlbiAwIGFuZCAxLiBIaWdoZXIgdmFsdWVzIGxpa2UgMC44IHdpbGwgbWFrZSB0aGVcbiAgICogb3V0cHV0IG1vcmUgcmFuZG9tLCB3aGlsZSBsb3dlciB2YWx1ZXMgbGlrZSAwLjIgd2lsbCBtYWtlIGl0IG1vcmUgZm9jdXNlZCBhbmRcbiAgICogZGV0ZXJtaW5pc3RpYy4gSWYgc2V0IHRvIDAsIHRoZSBtb2RlbCB3aWxsIHVzZVxuICAgKiBbbG9nIHByb2JhYmlsaXR5XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Mb2dfcHJvYmFiaWxpdHkpIHRvXG4gICAqIGF1dG9tYXRpY2FsbHkgaW5jcmVhc2UgdGhlIHRlbXBlcmF0dXJlIHVudGlsIGNlcnRhaW4gdGhyZXNob2xkcyBhcmUgaGl0LlxuICAgKi9cbiAgdGVtcGVyYXR1cmU/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBUcmFuc2xhdGlvbnMge1xuICBleHBvcnQge1xuICAgIHR5cGUgVHJhbnNsYXRpb24gYXMgVHJhbnNsYXRpb24sXG4gICAgdHlwZSBUcmFuc2xhdGlvblZlcmJvc2UgYXMgVHJhbnNsYXRpb25WZXJib3NlLFxuICAgIHR5cGUgVHJhbnNsYXRpb25DcmVhdGVSZXNwb25zZSBhcyBUcmFuc2xhdGlvbkNyZWF0ZVJlc3BvbnNlLFxuICAgIHR5cGUgVHJhbnNsYXRpb25DcmVhdGVQYXJhbXMgYXMgVHJhbnNsYXRpb25DcmVhdGVQYXJhbXMsXG4gIH07XG59XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICcuLi8uLi9yZXNvdXJjZSc7XG5pbXBvcnQgKiBhcyBTcGVlY2hBUEkgZnJvbSAnLi9zcGVlY2gnO1xuaW1wb3J0IHsgU3BlZWNoLCBTcGVlY2hDcmVhdGVQYXJhbXMsIFNwZWVjaE1vZGVsIH0gZnJvbSAnLi9zcGVlY2gnO1xuaW1wb3J0ICogYXMgVHJhbnNjcmlwdGlvbnNBUEkgZnJvbSAnLi90cmFuc2NyaXB0aW9ucyc7XG5pbXBvcnQge1xuICBUcmFuc2NyaXB0aW9uLFxuICBUcmFuc2NyaXB0aW9uQ3JlYXRlUGFyYW1zLFxuICBUcmFuc2NyaXB0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nLFxuICBUcmFuc2NyaXB0aW9uQ3JlYXRlUGFyYW1zU3RyZWFtaW5nLFxuICBUcmFuc2NyaXB0aW9uQ3JlYXRlUmVzcG9uc2UsXG4gIFRyYW5zY3JpcHRpb25JbmNsdWRlLFxuICBUcmFuc2NyaXB0aW9uU2VnbWVudCxcbiAgVHJhbnNjcmlwdGlvblN0cmVhbUV2ZW50LFxuICBUcmFuc2NyaXB0aW9uVGV4dERlbHRhRXZlbnQsXG4gIFRyYW5zY3JpcHRpb25UZXh0RG9uZUV2ZW50LFxuICBUcmFuc2NyaXB0aW9uVmVyYm9zZSxcbiAgVHJhbnNjcmlwdGlvbldvcmQsXG4gIFRyYW5zY3JpcHRpb25zLFxufSBmcm9tICcuL3RyYW5zY3JpcHRpb25zJztcbmltcG9ydCAqIGFzIFRyYW5zbGF0aW9uc0FQSSBmcm9tICcuL3RyYW5zbGF0aW9ucyc7XG5pbXBvcnQge1xuICBUcmFuc2xhdGlvbixcbiAgVHJhbnNsYXRpb25DcmVhdGVQYXJhbXMsXG4gIFRyYW5zbGF0aW9uQ3JlYXRlUmVzcG9uc2UsXG4gIFRyYW5zbGF0aW9uVmVyYm9zZSxcbiAgVHJhbnNsYXRpb25zLFxufSBmcm9tICcuL3RyYW5zbGF0aW9ucyc7XG5cbmV4cG9ydCBjbGFzcyBBdWRpbyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgdHJhbnNjcmlwdGlvbnM6IFRyYW5zY3JpcHRpb25zQVBJLlRyYW5zY3JpcHRpb25zID0gbmV3IFRyYW5zY3JpcHRpb25zQVBJLlRyYW5zY3JpcHRpb25zKHRoaXMuX2NsaWVudCk7XG4gIHRyYW5zbGF0aW9uczogVHJhbnNsYXRpb25zQVBJLlRyYW5zbGF0aW9ucyA9IG5ldyBUcmFuc2xhdGlvbnNBUEkuVHJhbnNsYXRpb25zKHRoaXMuX2NsaWVudCk7XG4gIHNwZWVjaDogU3BlZWNoQVBJLlNwZWVjaCA9IG5ldyBTcGVlY2hBUEkuU3BlZWNoKHRoaXMuX2NsaWVudCk7XG59XG5cbmV4cG9ydCB0eXBlIEF1ZGlvTW9kZWwgPSAnd2hpc3Blci0xJyB8ICdncHQtNG8tdHJhbnNjcmliZScgfCAnZ3B0LTRvLW1pbmktdHJhbnNjcmliZSc7XG5cbi8qKlxuICogVGhlIGZvcm1hdCBvZiB0aGUgb3V0cHV0LCBpbiBvbmUgb2YgdGhlc2Ugb3B0aW9uczogYGpzb25gLCBgdGV4dGAsIGBzcnRgLFxuICogYHZlcmJvc2VfanNvbmAsIG9yIGB2dHRgLiBGb3IgYGdwdC00by10cmFuc2NyaWJlYCBhbmQgYGdwdC00by1taW5pLXRyYW5zY3JpYmVgLFxuICogdGhlIG9ubHkgc3VwcG9ydGVkIGZvcm1hdCBpcyBganNvbmAuXG4gKi9cbmV4cG9ydCB0eXBlIEF1ZGlvUmVzcG9uc2VGb3JtYXQgPSAnanNvbicgfCAndGV4dCcgfCAnc3J0JyB8ICd2ZXJib3NlX2pzb24nIHwgJ3Z0dCc7XG5cbkF1ZGlvLlRyYW5zY3JpcHRpb25zID0gVHJhbnNjcmlwdGlvbnM7XG5BdWRpby5UcmFuc2xhdGlvbnMgPSBUcmFuc2xhdGlvbnM7XG5BdWRpby5TcGVlY2ggPSBTcGVlY2g7XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBBdWRpbyB7XG4gIGV4cG9ydCB7IHR5cGUgQXVkaW9Nb2RlbCBhcyBBdWRpb01vZGVsLCB0eXBlIEF1ZGlvUmVzcG9uc2VGb3JtYXQgYXMgQXVkaW9SZXNwb25zZUZvcm1hdCB9O1xuXG4gIGV4cG9ydCB7XG4gICAgVHJhbnNjcmlwdGlvbnMgYXMgVHJhbnNjcmlwdGlvbnMsXG4gICAgdHlwZSBUcmFuc2NyaXB0aW9uIGFzIFRyYW5zY3JpcHRpb24sXG4gICAgdHlwZSBUcmFuc2NyaXB0aW9uSW5jbHVkZSBhcyBUcmFuc2NyaXB0aW9uSW5jbHVkZSxcbiAgICB0eXBlIFRyYW5zY3JpcHRpb25TZWdtZW50IGFzIFRyYW5zY3JpcHRpb25TZWdtZW50LFxuICAgIHR5cGUgVHJhbnNjcmlwdGlvblN0cmVhbUV2ZW50IGFzIFRyYW5zY3JpcHRpb25TdHJlYW1FdmVudCxcbiAgICB0eXBlIFRyYW5zY3JpcHRpb25UZXh0RGVsdGFFdmVudCBhcyBUcmFuc2NyaXB0aW9uVGV4dERlbHRhRXZlbnQsXG4gICAgdHlwZSBUcmFuc2NyaXB0aW9uVGV4dERvbmVFdmVudCBhcyBUcmFuc2NyaXB0aW9uVGV4dERvbmVFdmVudCxcbiAgICB0eXBlIFRyYW5zY3JpcHRpb25WZXJib3NlIGFzIFRyYW5zY3JpcHRpb25WZXJib3NlLFxuICAgIHR5cGUgVHJhbnNjcmlwdGlvbldvcmQgYXMgVHJhbnNjcmlwdGlvbldvcmQsXG4gICAgdHlwZSBUcmFuc2NyaXB0aW9uQ3JlYXRlUmVzcG9uc2UgYXMgVHJhbnNjcmlwdGlvbkNyZWF0ZVJlc3BvbnNlLFxuICAgIHR5cGUgVHJhbnNjcmlwdGlvbkNyZWF0ZVBhcmFtcyBhcyBUcmFuc2NyaXB0aW9uQ3JlYXRlUGFyYW1zLFxuICAgIHR5cGUgVHJhbnNjcmlwdGlvbkNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyBhcyBUcmFuc2NyaXB0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nLFxuICAgIHR5cGUgVHJhbnNjcmlwdGlvbkNyZWF0ZVBhcmFtc1N0cmVhbWluZyBhcyBUcmFuc2NyaXB0aW9uQ3JlYXRlUGFyYW1zU3RyZWFtaW5nLFxuICB9O1xuXG4gIGV4cG9ydCB7XG4gICAgVHJhbnNsYXRpb25zIGFzIFRyYW5zbGF0aW9ucyxcbiAgICB0eXBlIFRyYW5zbGF0aW9uIGFzIFRyYW5zbGF0aW9uLFxuICAgIHR5cGUgVHJhbnNsYXRpb25WZXJib3NlIGFzIFRyYW5zbGF0aW9uVmVyYm9zZSxcbiAgICB0eXBlIFRyYW5zbGF0aW9uQ3JlYXRlUmVzcG9uc2UgYXMgVHJhbnNsYXRpb25DcmVhdGVSZXNwb25zZSxcbiAgICB0eXBlIFRyYW5zbGF0aW9uQ3JlYXRlUGFyYW1zIGFzIFRyYW5zbGF0aW9uQ3JlYXRlUGFyYW1zLFxuICB9O1xuXG4gIGV4cG9ydCB7IFNwZWVjaCBhcyBTcGVlY2gsIHR5cGUgU3BlZWNoTW9kZWwgYXMgU3BlZWNoTW9kZWwsIHR5cGUgU3BlZWNoQ3JlYXRlUGFyYW1zIGFzIFNwZWVjaENyZWF0ZVBhcmFtcyB9O1xufVxuIiwgIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnLi4vcmVzb3VyY2UnO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tICcuLi9jb3JlJztcbmltcG9ydCAqIGFzIEJhdGNoZXNBUEkgZnJvbSAnLi9iYXRjaGVzJztcbmltcG9ydCAqIGFzIFNoYXJlZCBmcm9tICcuL3NoYXJlZCc7XG5pbXBvcnQgeyBDdXJzb3JQYWdlLCB0eXBlIEN1cnNvclBhZ2VQYXJhbXMgfSBmcm9tICcuLi9wYWdpbmF0aW9uJztcblxuZXhwb3J0IGNsYXNzIEJhdGNoZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuZCBleGVjdXRlcyBhIGJhdGNoIGZyb20gYW4gdXBsb2FkZWQgZmlsZSBvZiByZXF1ZXN0c1xuICAgKi9cbiAgY3JlYXRlKGJvZHk6IEJhdGNoQ3JlYXRlUGFyYW1zLCBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IENvcmUuQVBJUHJvbWlzZTxCYXRjaD4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2JhdGNoZXMnLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIGEgYmF0Y2guXG4gICAqL1xuICByZXRyaWV2ZShiYXRjaElkOiBzdHJpbmcsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5BUElQcm9taXNlPEJhdGNoPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC9iYXRjaGVzLyR7YmF0Y2hJZH1gLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0IHlvdXIgb3JnYW5pemF0aW9uJ3MgYmF0Y2hlcy5cbiAgICovXG4gIGxpc3QocXVlcnk/OiBCYXRjaExpc3RQYXJhbXMsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5QYWdlUHJvbWlzZTxCYXRjaGVzUGFnZSwgQmF0Y2g+O1xuICBsaXN0KG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5QYWdlUHJvbWlzZTxCYXRjaGVzUGFnZSwgQmF0Y2g+O1xuICBsaXN0KFxuICAgIHF1ZXJ5OiBCYXRjaExpc3RQYXJhbXMgfCBDb3JlLlJlcXVlc3RPcHRpb25zID0ge30sXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuUGFnZVByb21pc2U8QmF0Y2hlc1BhZ2UsIEJhdGNoPiB7XG4gICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5saXN0KHt9LCBxdWVyeSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdCgnL2JhdGNoZXMnLCBCYXRjaGVzUGFnZSwgeyBxdWVyeSwgLi4ub3B0aW9ucyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW5jZWxzIGFuIGluLXByb2dyZXNzIGJhdGNoLiBUaGUgYmF0Y2ggd2lsbCBiZSBpbiBzdGF0dXMgYGNhbmNlbGxpbmdgIGZvciB1cCB0b1xuICAgKiAxMCBtaW51dGVzLCBiZWZvcmUgY2hhbmdpbmcgdG8gYGNhbmNlbGxlZGAsIHdoZXJlIGl0IHdpbGwgaGF2ZSBwYXJ0aWFsIHJlc3VsdHNcbiAgICogKGlmIGFueSkgYXZhaWxhYmxlIGluIHRoZSBvdXRwdXQgZmlsZS5cbiAgICovXG4gIGNhbmNlbChiYXRjaElkOiBzdHJpbmcsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5BUElQcm9taXNlPEJhdGNoPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvYmF0Y2hlcy8ke2JhdGNoSWR9L2NhbmNlbGAsIG9wdGlvbnMpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCYXRjaGVzUGFnZSBleHRlbmRzIEN1cnNvclBhZ2U8QmF0Y2g+IHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmF0Y2gge1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdGltZSBmcmFtZSB3aXRoaW4gd2hpY2ggdGhlIGJhdGNoIHNob3VsZCBiZSBwcm9jZXNzZWQuXG4gICAqL1xuICBjb21wbGV0aW9uX3dpbmRvdzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpIGZvciB3aGVuIHRoZSBiYXRjaCB3YXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWRfYXQ6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIE9wZW5BSSBBUEkgZW5kcG9pbnQgdXNlZCBieSB0aGUgYmF0Y2guXG4gICAqL1xuICBlbmRwb2ludDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIGlucHV0IGZpbGUgZm9yIHRoZSBiYXRjaC5cbiAgICovXG4gIGlucHV0X2ZpbGVfaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG9iamVjdCB0eXBlLCB3aGljaCBpcyBhbHdheXMgYGJhdGNoYC5cbiAgICovXG4gIG9iamVjdDogJ2JhdGNoJztcblxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgc3RhdHVzIG9mIHRoZSBiYXRjaC5cbiAgICovXG4gIHN0YXR1czpcbiAgICB8ICd2YWxpZGF0aW5nJ1xuICAgIHwgJ2ZhaWxlZCdcbiAgICB8ICdpbl9wcm9ncmVzcydcbiAgICB8ICdmaW5hbGl6aW5nJ1xuICAgIHwgJ2NvbXBsZXRlZCdcbiAgICB8ICdleHBpcmVkJ1xuICAgIHwgJ2NhbmNlbGxpbmcnXG4gICAgfCAnY2FuY2VsbGVkJztcblxuICAvKipcbiAgICogVGhlIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSBmb3Igd2hlbiB0aGUgYmF0Y2ggd2FzIGNhbmNlbGxlZC5cbiAgICovXG4gIGNhbmNlbGxlZF9hdD86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSBmb3Igd2hlbiB0aGUgYmF0Y2ggc3RhcnRlZCBjYW5jZWxsaW5nLlxuICAgKi9cbiAgY2FuY2VsbGluZ19hdD86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSBmb3Igd2hlbiB0aGUgYmF0Y2ggd2FzIGNvbXBsZXRlZC5cbiAgICovXG4gIGNvbXBsZXRlZF9hdD86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBmaWxlIGNvbnRhaW5pbmcgdGhlIG91dHB1dHMgb2YgcmVxdWVzdHMgd2l0aCBlcnJvcnMuXG4gICAqL1xuICBlcnJvcl9maWxlX2lkPzogc3RyaW5nO1xuXG4gIGVycm9ycz86IEJhdGNoLkVycm9ycztcblxuICAvKipcbiAgICogVGhlIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSBmb3Igd2hlbiB0aGUgYmF0Y2ggZXhwaXJlZC5cbiAgICovXG4gIGV4cGlyZWRfYXQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBVbml4IHRpbWVzdGFtcCAoaW4gc2Vjb25kcykgZm9yIHdoZW4gdGhlIGJhdGNoIHdpbGwgZXhwaXJlLlxuICAgKi9cbiAgZXhwaXJlc19hdD86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSBmb3Igd2hlbiB0aGUgYmF0Y2ggZmFpbGVkLlxuICAgKi9cbiAgZmFpbGVkX2F0PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpIGZvciB3aGVuIHRoZSBiYXRjaCBzdGFydGVkIGZpbmFsaXppbmcuXG4gICAqL1xuICBmaW5hbGl6aW5nX2F0PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpIGZvciB3aGVuIHRoZSBiYXRjaCBzdGFydGVkIHByb2Nlc3NpbmcuXG4gICAqL1xuICBpbl9wcm9ncmVzc19hdD86IG51bWJlcjtcblxuICAvKipcbiAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdCwgYW5kXG4gICAqIHF1ZXJ5aW5nIGZvciBvYmplY3RzIHZpYSBBUEkgb3IgdGhlIGRhc2hib2FyZC5cbiAgICpcbiAgICogS2V5cyBhcmUgc3RyaW5ncyB3aXRoIGEgbWF4aW11bSBsZW5ndGggb2YgNjQgY2hhcmFjdGVycy4gVmFsdWVzIGFyZSBzdHJpbmdzIHdpdGhcbiAgICogYSBtYXhpbXVtIGxlbmd0aCBvZiA1MTIgY2hhcmFjdGVycy5cbiAgICovXG4gIG1ldGFkYXRhPzogU2hhcmVkLk1ldGFkYXRhIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBmaWxlIGNvbnRhaW5pbmcgdGhlIG91dHB1dHMgb2Ygc3VjY2Vzc2Z1bGx5IGV4ZWN1dGVkIHJlcXVlc3RzLlxuICAgKi9cbiAgb3V0cHV0X2ZpbGVfaWQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSByZXF1ZXN0IGNvdW50cyBmb3IgZGlmZmVyZW50IHN0YXR1c2VzIHdpdGhpbiB0aGUgYmF0Y2guXG4gICAqL1xuICByZXF1ZXN0X2NvdW50cz86IEJhdGNoUmVxdWVzdENvdW50cztcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBCYXRjaCB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgRXJyb3JzIHtcbiAgICBkYXRhPzogQXJyYXk8QmF0Y2hlc0FQSS5CYXRjaEVycm9yPjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvYmplY3QgdHlwZSwgd2hpY2ggaXMgYWx3YXlzIGBsaXN0YC5cbiAgICAgKi9cbiAgICBvYmplY3Q/OiBzdHJpbmc7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBCYXRjaEVycm9yIHtcbiAgLyoqXG4gICAqIEFuIGVycm9yIGNvZGUgaWRlbnRpZnlpbmcgdGhlIGVycm9yIHR5cGUuXG4gICAqL1xuICBjb2RlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgbGluZSBudW1iZXIgb2YgdGhlIGlucHV0IGZpbGUgd2hlcmUgdGhlIGVycm9yIG9jY3VycmVkLCBpZiBhcHBsaWNhYmxlLlxuICAgKi9cbiAgbGluZT86IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEEgaHVtYW4tcmVhZGFibGUgbWVzc2FnZSBwcm92aWRpbmcgbW9yZSBkZXRhaWxzIGFib3V0IHRoZSBlcnJvci5cbiAgICovXG4gIG1lc3NhZ2U/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBwYXJhbWV0ZXIgdGhhdCBjYXVzZWQgdGhlIGVycm9yLCBpZiBhcHBsaWNhYmxlLlxuICAgKi9cbiAgcGFyYW0/OiBzdHJpbmcgfCBudWxsO1xufVxuXG4vKipcbiAqIFRoZSByZXF1ZXN0IGNvdW50cyBmb3IgZGlmZmVyZW50IHN0YXR1c2VzIHdpdGhpbiB0aGUgYmF0Y2guXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQmF0Y2hSZXF1ZXN0Q291bnRzIHtcbiAgLyoqXG4gICAqIE51bWJlciBvZiByZXF1ZXN0cyB0aGF0IGhhdmUgYmVlbiBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LlxuICAgKi9cbiAgY29tcGxldGVkOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiByZXF1ZXN0cyB0aGF0IGhhdmUgZmFpbGVkLlxuICAgKi9cbiAgZmFpbGVkOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRvdGFsIG51bWJlciBvZiByZXF1ZXN0cyBpbiB0aGUgYmF0Y2guXG4gICAqL1xuICB0b3RhbDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJhdGNoQ3JlYXRlUGFyYW1zIHtcbiAgLyoqXG4gICAqIFRoZSB0aW1lIGZyYW1lIHdpdGhpbiB3aGljaCB0aGUgYmF0Y2ggc2hvdWxkIGJlIHByb2Nlc3NlZC4gQ3VycmVudGx5IG9ubHkgYDI0aGBcbiAgICogaXMgc3VwcG9ydGVkLlxuICAgKi9cbiAgY29tcGxldGlvbl93aW5kb3c6ICcyNGgnO1xuXG4gIC8qKlxuICAgKiBUaGUgZW5kcG9pbnQgdG8gYmUgdXNlZCBmb3IgYWxsIHJlcXVlc3RzIGluIHRoZSBiYXRjaC4gQ3VycmVudGx5XG4gICAqIGAvdjEvcmVzcG9uc2VzYCwgYC92MS9jaGF0L2NvbXBsZXRpb25zYCwgYC92MS9lbWJlZGRpbmdzYCwgYW5kIGAvdjEvY29tcGxldGlvbnNgXG4gICAqIGFyZSBzdXBwb3J0ZWQuIE5vdGUgdGhhdCBgL3YxL2VtYmVkZGluZ3NgIGJhdGNoZXMgYXJlIGFsc28gcmVzdHJpY3RlZCB0byBhXG4gICAqIG1heGltdW0gb2YgNTAsMDAwIGVtYmVkZGluZyBpbnB1dHMgYWNyb3NzIGFsbCByZXF1ZXN0cyBpbiB0aGUgYmF0Y2guXG4gICAqL1xuICBlbmRwb2ludDogJy92MS9yZXNwb25zZXMnIHwgJy92MS9jaGF0L2NvbXBsZXRpb25zJyB8ICcvdjEvZW1iZWRkaW5ncycgfCAnL3YxL2NvbXBsZXRpb25zJztcblxuICAvKipcbiAgICogVGhlIElEIG9mIGFuIHVwbG9hZGVkIGZpbGUgdGhhdCBjb250YWlucyByZXF1ZXN0cyBmb3IgdGhlIG5ldyBiYXRjaC5cbiAgICpcbiAgICogU2VlIFt1cGxvYWQgZmlsZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maWxlcy9jcmVhdGUpXG4gICAqIGZvciBob3cgdG8gdXBsb2FkIGEgZmlsZS5cbiAgICpcbiAgICogWW91ciBpbnB1dCBmaWxlIG11c3QgYmUgZm9ybWF0dGVkIGFzIGFcbiAgICogW0pTT05MIGZpbGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvYmF0Y2gvcmVxdWVzdC1pbnB1dCksXG4gICAqIGFuZCBtdXN0IGJlIHVwbG9hZGVkIHdpdGggdGhlIHB1cnBvc2UgYGJhdGNoYC4gVGhlIGZpbGUgY2FuIGNvbnRhaW4gdXAgdG8gNTAsMDAwXG4gICAqIHJlcXVlc3RzLCBhbmQgY2FuIGJlIHVwIHRvIDIwMCBNQiBpbiBzaXplLlxuICAgKi9cbiAgaW5wdXRfZmlsZV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgKlxuICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbWV0YWRhdGE/OiBTaGFyZWQuTWV0YWRhdGEgfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJhdGNoTGlzdFBhcmFtcyBleHRlbmRzIEN1cnNvclBhZ2VQYXJhbXMge31cblxuQmF0Y2hlcy5CYXRjaGVzUGFnZSA9IEJhdGNoZXNQYWdlO1xuXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgQmF0Y2hlcyB7XG4gIGV4cG9ydCB7XG4gICAgdHlwZSBCYXRjaCBhcyBCYXRjaCxcbiAgICB0eXBlIEJhdGNoRXJyb3IgYXMgQmF0Y2hFcnJvcixcbiAgICB0eXBlIEJhdGNoUmVxdWVzdENvdW50cyBhcyBCYXRjaFJlcXVlc3RDb3VudHMsXG4gICAgQmF0Y2hlc1BhZ2UgYXMgQmF0Y2hlc1BhZ2UsXG4gICAgdHlwZSBCYXRjaENyZWF0ZVBhcmFtcyBhcyBCYXRjaENyZWF0ZVBhcmFtcyxcbiAgICB0eXBlIEJhdGNoTGlzdFBhcmFtcyBhcyBCYXRjaExpc3RQYXJhbXMsXG4gIH07XG59XG4iLCAiaW1wb3J0IHsgQVBJVXNlckFib3J0RXJyb3IsIE9wZW5BSUVycm9yIH0gZnJvbSAnLi4vZXJyb3InO1xuXG5leHBvcnQgY2xhc3MgRXZlbnRTdHJlYW08RXZlbnRUeXBlcyBleHRlbmRzIEJhc2VFdmVudHM+IHtcbiAgY29udHJvbGxlcjogQWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuXG4gICNjb25uZWN0ZWRQcm9taXNlOiBQcm9taXNlPHZvaWQ+O1xuICAjcmVzb2x2ZUNvbm5lY3RlZFByb21pc2U6ICgpID0+IHZvaWQgPSAoKSA9PiB7fTtcbiAgI3JlamVjdENvbm5lY3RlZFByb21pc2U6IChlcnJvcjogT3BlbkFJRXJyb3IpID0+IHZvaWQgPSAoKSA9PiB7fTtcblxuICAjZW5kUHJvbWlzZTogUHJvbWlzZTx2b2lkPjtcbiAgI3Jlc29sdmVFbmRQcm9taXNlOiAoKSA9PiB2b2lkID0gKCkgPT4ge307XG4gICNyZWplY3RFbmRQcm9taXNlOiAoZXJyb3I6IE9wZW5BSUVycm9yKSA9PiB2b2lkID0gKCkgPT4ge307XG5cbiAgI2xpc3RlbmVyczoge1xuICAgIFtFdmVudCBpbiBrZXlvZiBFdmVudFR5cGVzXT86IEV2ZW50TGlzdGVuZXJzPEV2ZW50VHlwZXMsIEV2ZW50PjtcbiAgfSA9IHt9O1xuXG4gICNlbmRlZCA9IGZhbHNlO1xuICAjZXJyb3JlZCA9IGZhbHNlO1xuICAjYWJvcnRlZCA9IGZhbHNlO1xuICAjY2F0Y2hpbmdQcm9taXNlQ3JlYXRlZCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuI2Nvbm5lY3RlZFByb21pc2UgPSBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLiNyZXNvbHZlQ29ubmVjdGVkUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgICB0aGlzLiNyZWplY3RDb25uZWN0ZWRQcm9taXNlID0gcmVqZWN0O1xuICAgIH0pO1xuXG4gICAgdGhpcy4jZW5kUHJvbWlzZSA9IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuI3Jlc29sdmVFbmRQcm9taXNlID0gcmVzb2x2ZTtcbiAgICAgIHRoaXMuI3JlamVjdEVuZFByb21pc2UgPSByZWplY3Q7XG4gICAgfSk7XG5cbiAgICAvLyBEb24ndCBsZXQgdGhlc2UgcHJvbWlzZXMgY2F1c2UgdW5oYW5kbGVkIHJlamVjdGlvbiBlcnJvcnMuXG4gICAgLy8gd2Ugd2lsbCBtYW51YWxseSBjYXVzZSBhbiB1bmhhbmRsZWQgcmVqZWN0aW9uIGVycm9yIGxhdGVyXG4gICAgLy8gaWYgdGhlIHVzZXIgaGFzbid0IHJlZ2lzdGVyZWQgYW55IGVycm9yIGxpc3RlbmVyIG9yIGNhbGxlZFxuICAgIC8vIGFueSBwcm9taXNlLXJldHVybmluZyBtZXRob2QuXG4gICAgdGhpcy4jY29ubmVjdGVkUHJvbWlzZS5jYXRjaCgoKSA9PiB7fSk7XG4gICAgdGhpcy4jZW5kUHJvbWlzZS5jYXRjaCgoKSA9PiB7fSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX3J1bih0aGlzOiBFdmVudFN0cmVhbTxFdmVudFR5cGVzPiwgZXhlY3V0b3I6ICgpID0+IFByb21pc2U8YW55Pikge1xuICAgIC8vIFVuZm9ydHVuYXRlbHkgaWYgd2UgY2FsbCBgZXhlY3V0b3IoKWAgaW1tZWRpYXRlbHkgd2UgZ2V0IHJ1bnRpbWUgZXJyb3JzIGFib3V0XG4gICAgLy8gcmVmZXJlbmNlcyB0byBgdGhpc2AgYmVmb3JlIHRoZSBgc3VwZXIoKWAgY29uc3RydWN0b3IgY2FsbCByZXR1cm5zLlxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZXhlY3V0b3IoKS50aGVuKCgpID0+IHtcbiAgICAgICAgdGhpcy5fZW1pdEZpbmFsKCk7XG4gICAgICAgIHRoaXMuX2VtaXQoJ2VuZCcpO1xuICAgICAgfSwgdGhpcy4jaGFuZGxlRXJyb3IuYmluZCh0aGlzKSk7XG4gICAgfSwgMCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX2Nvbm5lY3RlZCh0aGlzOiBFdmVudFN0cmVhbTxFdmVudFR5cGVzPikge1xuICAgIGlmICh0aGlzLmVuZGVkKSByZXR1cm47XG4gICAgdGhpcy4jcmVzb2x2ZUNvbm5lY3RlZFByb21pc2UoKTtcbiAgICB0aGlzLl9lbWl0KCdjb25uZWN0Jyk7XG4gIH1cblxuICBnZXQgZW5kZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuI2VuZGVkO1xuICB9XG5cbiAgZ2V0IGVycm9yZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuI2Vycm9yZWQ7XG4gIH1cblxuICBnZXQgYWJvcnRlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy4jYWJvcnRlZDtcbiAgfVxuXG4gIGFib3J0KCkge1xuICAgIHRoaXMuY29udHJvbGxlci5hYm9ydCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgdGhlIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIHRoZSBlbmQgb2YgdGhlIGxpc3RlbmVycyBhcnJheSBmb3IgdGhlIGV2ZW50LlxuICAgKiBObyBjaGVja3MgYXJlIG1hZGUgdG8gc2VlIGlmIHRoZSBsaXN0ZW5lciBoYXMgYWxyZWFkeSBiZWVuIGFkZGVkLiBNdWx0aXBsZSBjYWxscyBwYXNzaW5nXG4gICAqIHRoZSBzYW1lIGNvbWJpbmF0aW9uIG9mIGV2ZW50IGFuZCBsaXN0ZW5lciB3aWxsIHJlc3VsdCBpbiB0aGUgbGlzdGVuZXIgYmVpbmcgYWRkZWQsIGFuZFxuICAgKiBjYWxsZWQsIG11bHRpcGxlIHRpbWVzLlxuICAgKiBAcmV0dXJucyB0aGlzIENoYXRDb21wbGV0aW9uU3RyZWFtLCBzbyB0aGF0IGNhbGxzIGNhbiBiZSBjaGFpbmVkXG4gICAqL1xuICBvbjxFdmVudCBleHRlbmRzIGtleW9mIEV2ZW50VHlwZXM+KGV2ZW50OiBFdmVudCwgbGlzdGVuZXI6IEV2ZW50TGlzdGVuZXI8RXZlbnRUeXBlcywgRXZlbnQ+KTogdGhpcyB7XG4gICAgY29uc3QgbGlzdGVuZXJzOiBFdmVudExpc3RlbmVyczxFdmVudFR5cGVzLCBFdmVudD4gPVxuICAgICAgdGhpcy4jbGlzdGVuZXJzW2V2ZW50XSB8fCAodGhpcy4jbGlzdGVuZXJzW2V2ZW50XSA9IFtdKTtcbiAgICBsaXN0ZW5lcnMucHVzaCh7IGxpc3RlbmVyIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgdGhlIHNwZWNpZmllZCBsaXN0ZW5lciBmcm9tIHRoZSBsaXN0ZW5lciBhcnJheSBmb3IgdGhlIGV2ZW50LlxuICAgKiBvZmYoKSB3aWxsIHJlbW92ZSwgYXQgbW9zdCwgb25lIGluc3RhbmNlIG9mIGEgbGlzdGVuZXIgZnJvbSB0aGUgbGlzdGVuZXIgYXJyYXkuIElmIGFueSBzaW5nbGVcbiAgICogbGlzdGVuZXIgaGFzIGJlZW4gYWRkZWQgbXVsdGlwbGUgdGltZXMgdG8gdGhlIGxpc3RlbmVyIGFycmF5IGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50LCB0aGVuXG4gICAqIG9mZigpIG11c3QgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHRvIHJlbW92ZSBlYWNoIGluc3RhbmNlLlxuICAgKiBAcmV0dXJucyB0aGlzIENoYXRDb21wbGV0aW9uU3RyZWFtLCBzbyB0aGF0IGNhbGxzIGNhbiBiZSBjaGFpbmVkXG4gICAqL1xuICBvZmY8RXZlbnQgZXh0ZW5kcyBrZXlvZiBFdmVudFR5cGVzPihldmVudDogRXZlbnQsIGxpc3RlbmVyOiBFdmVudExpc3RlbmVyPEV2ZW50VHlwZXMsIEV2ZW50Pik6IHRoaXMge1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuI2xpc3RlbmVyc1tldmVudF07XG4gICAgaWYgKCFsaXN0ZW5lcnMpIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IGluZGV4ID0gbGlzdGVuZXJzLmZpbmRJbmRleCgobCkgPT4gbC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpO1xuICAgIGlmIChpbmRleCA+PSAwKSBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgb25lLXRpbWUgbGlzdGVuZXIgZnVuY3Rpb24gZm9yIHRoZSBldmVudC4gVGhlIG5leHQgdGltZSB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLFxuICAgKiB0aGlzIGxpc3RlbmVyIGlzIHJlbW92ZWQgYW5kIHRoZW4gaW52b2tlZC5cbiAgICogQHJldHVybnMgdGhpcyBDaGF0Q29tcGxldGlvblN0cmVhbSwgc28gdGhhdCBjYWxscyBjYW4gYmUgY2hhaW5lZFxuICAgKi9cbiAgb25jZTxFdmVudCBleHRlbmRzIGtleW9mIEV2ZW50VHlwZXM+KGV2ZW50OiBFdmVudCwgbGlzdGVuZXI6IEV2ZW50TGlzdGVuZXI8RXZlbnRUeXBlcywgRXZlbnQ+KTogdGhpcyB7XG4gICAgY29uc3QgbGlzdGVuZXJzOiBFdmVudExpc3RlbmVyczxFdmVudFR5cGVzLCBFdmVudD4gPVxuICAgICAgdGhpcy4jbGlzdGVuZXJzW2V2ZW50XSB8fCAodGhpcy4jbGlzdGVuZXJzW2V2ZW50XSA9IFtdKTtcbiAgICBsaXN0ZW5lcnMucHVzaCh7IGxpc3RlbmVyLCBvbmNlOiB0cnVlIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgc2ltaWxhciB0byBgLm9uY2UoKWAsIGJ1dCByZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRoZSBuZXh0IHRpbWVcbiAgICogdGhlIGV2ZW50IGlzIHRyaWdnZXJlZCwgaW5zdGVhZCBvZiBjYWxsaW5nIGEgbGlzdGVuZXIgY2FsbGJhY2suXG4gICAqIEByZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRoZSBuZXh0IHRpbWUgZ2l2ZW4gZXZlbnQgaXMgdHJpZ2dlcmVkLFxuICAgKiBvciByZWplY3RzIGlmIGFuIGVycm9yIGlzIGVtaXR0ZWQuICAoSWYgeW91IHJlcXVlc3QgdGhlICdlcnJvcicgZXZlbnQsXG4gICAqIHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgZXJyb3IpLlxuICAgKlxuICAgKiBFeGFtcGxlOlxuICAgKlxuICAgKiAgIGNvbnN0IG1lc3NhZ2UgPSBhd2FpdCBzdHJlYW0uZW1pdHRlZCgnbWVzc2FnZScpIC8vIHJlamVjdHMgaWYgdGhlIHN0cmVhbSBlcnJvcnNcbiAgICovXG4gIGVtaXR0ZWQ8RXZlbnQgZXh0ZW5kcyBrZXlvZiBFdmVudFR5cGVzPihcbiAgICBldmVudDogRXZlbnQsXG4gICk6IFByb21pc2U8XG4gICAgRXZlbnRQYXJhbWV0ZXJzPEV2ZW50VHlwZXMsIEV2ZW50PiBleHRlbmRzIFtpbmZlciBQYXJhbV0gPyBQYXJhbVxuICAgIDogRXZlbnRQYXJhbWV0ZXJzPEV2ZW50VHlwZXMsIEV2ZW50PiBleHRlbmRzIFtdID8gdm9pZFxuICAgIDogRXZlbnRQYXJhbWV0ZXJzPEV2ZW50VHlwZXMsIEV2ZW50PlxuICA+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy4jY2F0Y2hpbmdQcm9taXNlQ3JlYXRlZCA9IHRydWU7XG4gICAgICBpZiAoZXZlbnQgIT09ICdlcnJvcicpIHRoaXMub25jZSgnZXJyb3InLCByZWplY3QpO1xuICAgICAgdGhpcy5vbmNlKGV2ZW50LCByZXNvbHZlIGFzIGFueSk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBkb25lKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMuI2NhdGNoaW5nUHJvbWlzZUNyZWF0ZWQgPSB0cnVlO1xuICAgIGF3YWl0IHRoaXMuI2VuZFByb21pc2U7XG4gIH1cblxuICAjaGFuZGxlRXJyb3IodGhpczogRXZlbnRTdHJlYW08RXZlbnRUeXBlcz4sIGVycm9yOiB1bmtub3duKSB7XG4gICAgdGhpcy4jZXJyb3JlZCA9IHRydWU7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgZXJyb3IubmFtZSA9PT0gJ0Fib3J0RXJyb3InKSB7XG4gICAgICBlcnJvciA9IG5ldyBBUElVc2VyQWJvcnRFcnJvcigpO1xuICAgIH1cbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBBUElVc2VyQWJvcnRFcnJvcikge1xuICAgICAgdGhpcy4jYWJvcnRlZCA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcy5fZW1pdCgnYWJvcnQnLCBlcnJvcik7XG4gICAgfVxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIE9wZW5BSUVycm9yKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZW1pdCgnZXJyb3InLCBlcnJvcik7XG4gICAgfVxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICBjb25zdCBvcGVuQUlFcnJvcjogT3BlbkFJRXJyb3IgPSBuZXcgT3BlbkFJRXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBvcGVuQUlFcnJvci5jYXVzZSA9IGVycm9yO1xuICAgICAgcmV0dXJuIHRoaXMuX2VtaXQoJ2Vycm9yJywgb3BlbkFJRXJyb3IpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fZW1pdCgnZXJyb3InLCBuZXcgT3BlbkFJRXJyb3IoU3RyaW5nKGVycm9yKSkpO1xuICB9XG5cbiAgX2VtaXQ8RXZlbnQgZXh0ZW5kcyBrZXlvZiBCYXNlRXZlbnRzPihldmVudDogRXZlbnQsIC4uLmFyZ3M6IEV2ZW50UGFyYW1ldGVyczxCYXNlRXZlbnRzLCBFdmVudD4pOiB2b2lkO1xuICBfZW1pdDxFdmVudCBleHRlbmRzIGtleW9mIEV2ZW50VHlwZXM+KGV2ZW50OiBFdmVudCwgLi4uYXJnczogRXZlbnRQYXJhbWV0ZXJzPEV2ZW50VHlwZXMsIEV2ZW50Pik6IHZvaWQ7XG4gIF9lbWl0PEV2ZW50IGV4dGVuZHMga2V5b2YgRXZlbnRUeXBlcz4oXG4gICAgdGhpczogRXZlbnRTdHJlYW08RXZlbnRUeXBlcz4sXG4gICAgZXZlbnQ6IEV2ZW50LFxuICAgIC4uLmFyZ3M6IEV2ZW50UGFyYW1ldGVyczxFdmVudFR5cGVzLCBFdmVudD5cbiAgKSB7XG4gICAgLy8gbWFrZSBzdXJlIHdlIGRvbid0IGVtaXQgYW55IGV2ZW50cyBhZnRlciBlbmRcbiAgICBpZiAodGhpcy4jZW5kZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQgPT09ICdlbmQnKSB7XG4gICAgICB0aGlzLiNlbmRlZCA9IHRydWU7XG4gICAgICB0aGlzLiNyZXNvbHZlRW5kUHJvbWlzZSgpO1xuICAgIH1cblxuICAgIGNvbnN0IGxpc3RlbmVyczogRXZlbnRMaXN0ZW5lcnM8RXZlbnRUeXBlcywgRXZlbnQ+IHwgdW5kZWZpbmVkID0gdGhpcy4jbGlzdGVuZXJzW2V2ZW50XTtcbiAgICBpZiAobGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLiNsaXN0ZW5lcnNbZXZlbnRdID0gbGlzdGVuZXJzLmZpbHRlcigobCkgPT4gIWwub25jZSkgYXMgYW55O1xuICAgICAgbGlzdGVuZXJzLmZvckVhY2goKHsgbGlzdGVuZXIgfTogYW55KSA9PiBsaXN0ZW5lciguLi4oYXJncyBhcyBhbnkpKSk7XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50ID09PSAnYWJvcnQnKSB7XG4gICAgICBjb25zdCBlcnJvciA9IGFyZ3NbMF0gYXMgQVBJVXNlckFib3J0RXJyb3I7XG4gICAgICBpZiAoIXRoaXMuI2NhdGNoaW5nUHJvbWlzZUNyZWF0ZWQgJiYgIWxpc3RlbmVycz8ubGVuZ3RoKSB7XG4gICAgICAgIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuI3JlamVjdENvbm5lY3RlZFByb21pc2UoZXJyb3IpO1xuICAgICAgdGhpcy4jcmVqZWN0RW5kUHJvbWlzZShlcnJvcik7XG4gICAgICB0aGlzLl9lbWl0KCdlbmQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQgPT09ICdlcnJvcicpIHtcbiAgICAgIC8vIE5PVEU6IF9lbWl0KCdlcnJvcicsIGVycm9yKSBzaG91bGQgb25seSBiZSBjYWxsZWQgZnJvbSAjaGFuZGxlRXJyb3IoKS5cblxuICAgICAgY29uc3QgZXJyb3IgPSBhcmdzWzBdIGFzIE9wZW5BSUVycm9yO1xuICAgICAgaWYgKCF0aGlzLiNjYXRjaGluZ1Byb21pc2VDcmVhdGVkICYmICFsaXN0ZW5lcnM/Lmxlbmd0aCkge1xuICAgICAgICAvLyBUcmlnZ2VyIGFuIHVuaGFuZGxlZCByZWplY3Rpb24gaWYgdGhlIHVzZXIgaGFzbid0IHJlZ2lzdGVyZWQgYW55IGVycm9yIGhhbmRsZXJzLlxuICAgICAgICAvLyBJZiB5b3UgYXJlIHNlZWluZyBzdGFjayB0cmFjZXMgaGVyZSwgbWFrZSBzdXJlIHRvIGhhbmRsZSBlcnJvcnMgdmlhIGVpdGhlcjpcbiAgICAgICAgLy8gLSBydW5uZXIub24oJ2Vycm9yJywgKCkgPT4gLi4uKVxuICAgICAgICAvLyAtIGF3YWl0IHJ1bm5lci5kb25lKClcbiAgICAgICAgLy8gLSBhd2FpdCBydW5uZXIuZmluYWxDaGF0Q29tcGxldGlvbigpXG4gICAgICAgIC8vIC0gZXRjLlxuICAgICAgICBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgICB0aGlzLiNyZWplY3RDb25uZWN0ZWRQcm9taXNlKGVycm9yKTtcbiAgICAgIHRoaXMuI3JlamVjdEVuZFByb21pc2UoZXJyb3IpO1xuICAgICAgdGhpcy5fZW1pdCgnZW5kJyk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIF9lbWl0RmluYWwoKTogdm9pZCB7fVxufVxuXG50eXBlIEV2ZW50TGlzdGVuZXI8RXZlbnRzLCBFdmVudFR5cGUgZXh0ZW5kcyBrZXlvZiBFdmVudHM+ID0gRXZlbnRzW0V2ZW50VHlwZV07XG5cbnR5cGUgRXZlbnRMaXN0ZW5lcnM8RXZlbnRzLCBFdmVudFR5cGUgZXh0ZW5kcyBrZXlvZiBFdmVudHM+ID0gQXJyYXk8e1xuICBsaXN0ZW5lcjogRXZlbnRMaXN0ZW5lcjxFdmVudHMsIEV2ZW50VHlwZT47XG4gIG9uY2U/OiBib29sZWFuO1xufT47XG5cbmV4cG9ydCB0eXBlIEV2ZW50UGFyYW1ldGVyczxFdmVudHMsIEV2ZW50VHlwZSBleHRlbmRzIGtleW9mIEV2ZW50cz4gPSB7XG4gIFtFdmVudCBpbiBFdmVudFR5cGVdOiBFdmVudExpc3RlbmVyPEV2ZW50cywgRXZlbnRUeXBlPiBleHRlbmRzICguLi5hcmdzOiBpbmZlciBQKSA9PiBhbnkgPyBQIDogbmV2ZXI7XG59W0V2ZW50VHlwZV07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUV2ZW50cyB7XG4gIGNvbm5lY3Q6ICgpID0+IHZvaWQ7XG4gIGVycm9yOiAoZXJyb3I6IE9wZW5BSUVycm9yKSA9PiB2b2lkO1xuICBhYm9ydDogKGVycm9yOiBBUElVc2VyQWJvcnRFcnJvcikgPT4gdm9pZDtcbiAgZW5kOiAoKSA9PiB2b2lkO1xufVxuIiwgImltcG9ydCB7XG4gIFRleHRDb250ZW50QmxvY2ssXG4gIEltYWdlRmlsZUNvbnRlbnRCbG9jayxcbiAgTWVzc2FnZSxcbiAgTWVzc2FnZUNvbnRlbnREZWx0YSxcbiAgVGV4dCxcbiAgSW1hZ2VGaWxlLFxuICBUZXh0RGVsdGEsXG4gIE1lc3NhZ2VEZWx0YSxcbiAgTWVzc2FnZUNvbnRlbnQsXG59IGZyb20gJy4uL3Jlc291cmNlcy9iZXRhL3RocmVhZHMvbWVzc2FnZXMnO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tICcuLi9jb3JlJztcbmltcG9ydCB7IFJlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi4vY29yZSc7XG5pbXBvcnQge1xuICBSdW4sXG4gIFJ1bkNyZWF0ZVBhcmFtc0Jhc2UsXG4gIFJ1bkNyZWF0ZVBhcmFtc1N0cmVhbWluZyxcbiAgUnVucyxcbiAgUnVuU3VibWl0VG9vbE91dHB1dHNQYXJhbXNCYXNlLFxuICBSdW5TdWJtaXRUb29sT3V0cHV0c1BhcmFtc1N0cmVhbWluZyxcbn0gZnJvbSAnLi4vcmVzb3VyY2VzL2JldGEvdGhyZWFkcy9ydW5zL3J1bnMnO1xuaW1wb3J0IHsgdHlwZSBSZWFkYWJsZVN0cmVhbSB9IGZyb20gJy4uL19zaGltcy9pbmRleCc7XG5pbXBvcnQgeyBTdHJlYW0gfSBmcm9tICcuLi9zdHJlYW1pbmcnO1xuaW1wb3J0IHsgQVBJVXNlckFib3J0RXJyb3IsIE9wZW5BSUVycm9yIH0gZnJvbSAnLi4vZXJyb3InO1xuaW1wb3J0IHtcbiAgQXNzaXN0YW50U3RyZWFtRXZlbnQsXG4gIE1lc3NhZ2VTdHJlYW1FdmVudCxcbiAgUnVuU3RlcFN0cmVhbUV2ZW50LFxuICBSdW5TdHJlYW1FdmVudCxcbn0gZnJvbSAnLi4vcmVzb3VyY2VzL2JldGEvYXNzaXN0YW50cyc7XG5pbXBvcnQgeyBSdW5TdGVwLCBSdW5TdGVwRGVsdGEsIFRvb2xDYWxsLCBUb29sQ2FsbERlbHRhIH0gZnJvbSAnLi4vcmVzb3VyY2VzL2JldGEvdGhyZWFkcy9ydW5zL3N0ZXBzJztcbmltcG9ydCB7IFRocmVhZENyZWF0ZUFuZFJ1blBhcmFtc0Jhc2UsIFRocmVhZHMgfSBmcm9tICcuLi9yZXNvdXJjZXMvYmV0YS90aHJlYWRzL3RocmVhZHMnO1xuaW1wb3J0IHsgQmFzZUV2ZW50cywgRXZlbnRTdHJlYW0gfSBmcm9tICcuL0V2ZW50U3RyZWFtJztcblxuZXhwb3J0IGludGVyZmFjZSBBc3Npc3RhbnRTdHJlYW1FdmVudHMgZXh0ZW5kcyBCYXNlRXZlbnRzIHtcbiAgcnVuOiAocnVuOiBSdW4pID0+IHZvaWQ7XG5cbiAgLy9OZXcgZXZlbnQgc3RydWN0dXJlXG4gIG1lc3NhZ2VDcmVhdGVkOiAobWVzc2FnZTogTWVzc2FnZSkgPT4gdm9pZDtcbiAgbWVzc2FnZURlbHRhOiAobWVzc2FnZTogTWVzc2FnZURlbHRhLCBzbmFwc2hvdDogTWVzc2FnZSkgPT4gdm9pZDtcbiAgbWVzc2FnZURvbmU6IChtZXNzYWdlOiBNZXNzYWdlKSA9PiB2b2lkO1xuXG4gIHJ1blN0ZXBDcmVhdGVkOiAocnVuU3RlcDogUnVuU3RlcCkgPT4gdm9pZDtcbiAgcnVuU3RlcERlbHRhOiAoZGVsdGE6IFJ1blN0ZXBEZWx0YSwgc25hcHNob3Q6IFJ1bnMuUnVuU3RlcCkgPT4gdm9pZDtcbiAgcnVuU3RlcERvbmU6IChydW5TdGVwOiBSdW5zLlJ1blN0ZXAsIHNuYXBzaG90OiBSdW5zLlJ1blN0ZXApID0+IHZvaWQ7XG5cbiAgdG9vbENhbGxDcmVhdGVkOiAodG9vbENhbGw6IFRvb2xDYWxsKSA9PiB2b2lkO1xuICB0b29sQ2FsbERlbHRhOiAoZGVsdGE6IFRvb2xDYWxsRGVsdGEsIHNuYXBzaG90OiBUb29sQ2FsbCkgPT4gdm9pZDtcbiAgdG9vbENhbGxEb25lOiAodG9vbENhbGw6IFRvb2xDYWxsKSA9PiB2b2lkO1xuXG4gIHRleHRDcmVhdGVkOiAoY29udGVudDogVGV4dCkgPT4gdm9pZDtcbiAgdGV4dERlbHRhOiAoZGVsdGE6IFRleHREZWx0YSwgc25hcHNob3Q6IFRleHQpID0+IHZvaWQ7XG4gIHRleHREb25lOiAoY29udGVudDogVGV4dCwgc25hcHNob3Q6IE1lc3NhZ2UpID0+IHZvaWQ7XG5cbiAgLy9ObyBjcmVhdGVkIG9yIGRlbHRhIGFzIHRoaXMgaXMgbm90IHN0cmVhbWVkXG4gIGltYWdlRmlsZURvbmU6IChjb250ZW50OiBJbWFnZUZpbGUsIHNuYXBzaG90OiBNZXNzYWdlKSA9PiB2b2lkO1xuXG4gIGV2ZW50OiAoZXZlbnQ6IEFzc2lzdGFudFN0cmVhbUV2ZW50KSA9PiB2b2lkO1xufVxuXG5leHBvcnQgdHlwZSBUaHJlYWRDcmVhdGVBbmRSdW5QYXJhbXNCYXNlU3RyZWFtID0gT21pdDxUaHJlYWRDcmVhdGVBbmRSdW5QYXJhbXNCYXNlLCAnc3RyZWFtJz4gJiB7XG4gIHN0cmVhbT86IHRydWU7XG59O1xuXG5leHBvcnQgdHlwZSBSdW5DcmVhdGVQYXJhbXNCYXNlU3RyZWFtID0gT21pdDxSdW5DcmVhdGVQYXJhbXNCYXNlLCAnc3RyZWFtJz4gJiB7XG4gIHN0cmVhbT86IHRydWU7XG59O1xuXG5leHBvcnQgdHlwZSBSdW5TdWJtaXRUb29sT3V0cHV0c1BhcmFtc1N0cmVhbSA9IE9taXQ8UnVuU3VibWl0VG9vbE91dHB1dHNQYXJhbXNCYXNlLCAnc3RyZWFtJz4gJiB7XG4gIHN0cmVhbT86IHRydWU7XG59O1xuXG5leHBvcnQgY2xhc3MgQXNzaXN0YW50U3RyZWFtXG4gIGV4dGVuZHMgRXZlbnRTdHJlYW08QXNzaXN0YW50U3RyZWFtRXZlbnRzPlxuICBpbXBsZW1lbnRzIEFzeW5jSXRlcmFibGU8QXNzaXN0YW50U3RyZWFtRXZlbnQ+XG57XG4gIC8vVHJhY2sgYWxsIGV2ZW50cyBpbiBhIHNpbmdsZSBsaXN0IGZvciByZWZlcmVuY2VcbiAgI2V2ZW50czogQXNzaXN0YW50U3RyZWFtRXZlbnRbXSA9IFtdO1xuXG4gIC8vVXNlZCB0byBhY2N1bXVsYXRlIGRlbHRhc1xuICAvL1dlIGFyZSBhY2N1bXVsYXRpbmcgbWFueSB0eXBlcyBzbyB0aGUgdmFsdWUgaGVyZSBpcyBub3Qgc3RyaWN0XG4gICNydW5TdGVwU25hcHNob3RzOiB7IFtpZDogc3RyaW5nXTogUnVucy5SdW5TdGVwIH0gPSB7fTtcbiAgI21lc3NhZ2VTbmFwc2hvdHM6IHsgW2lkOiBzdHJpbmddOiBNZXNzYWdlIH0gPSB7fTtcbiAgI21lc3NhZ2VTbmFwc2hvdDogTWVzc2FnZSB8IHVuZGVmaW5lZDtcbiAgI2ZpbmFsUnVuOiBSdW4gfCB1bmRlZmluZWQ7XG4gICNjdXJyZW50Q29udGVudEluZGV4OiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gICNjdXJyZW50Q29udGVudDogTWVzc2FnZUNvbnRlbnQgfCB1bmRlZmluZWQ7XG4gICNjdXJyZW50VG9vbENhbGxJbmRleDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAjY3VycmVudFRvb2xDYWxsOiBUb29sQ2FsbCB8IHVuZGVmaW5lZDtcblxuICAvL0ZvciBjdXJyZW50IHNuYXBzaG90IG1ldGhvZHNcbiAgI2N1cnJlbnRFdmVudDogQXNzaXN0YW50U3RyZWFtRXZlbnQgfCB1bmRlZmluZWQ7XG4gICNjdXJyZW50UnVuU25hcHNob3Q6IFJ1biB8IHVuZGVmaW5lZDtcbiAgI2N1cnJlbnRSdW5TdGVwU25hcHNob3Q6IFJ1bnMuUnVuU3RlcCB8IHVuZGVmaW5lZDtcblxuICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk6IEFzeW5jSXRlcmF0b3I8QXNzaXN0YW50U3RyZWFtRXZlbnQ+IHtcbiAgICBjb25zdCBwdXNoUXVldWU6IEFzc2lzdGFudFN0cmVhbUV2ZW50W10gPSBbXTtcbiAgICBjb25zdCByZWFkUXVldWU6IHtcbiAgICAgIHJlc29sdmU6IChjaHVuazogQXNzaXN0YW50U3RyZWFtRXZlbnQgfCB1bmRlZmluZWQpID0+IHZvaWQ7XG4gICAgICByZWplY3Q6IChlcnI6IHVua25vd24pID0+IHZvaWQ7XG4gICAgfVtdID0gW107XG4gICAgbGV0IGRvbmUgPSBmYWxzZTtcblxuICAgIC8vQ2F0Y2ggYWxsIGZvciBwYXNzaW5nIGFsb25nIGFsbCBldmVudHNcbiAgICB0aGlzLm9uKCdldmVudCcsIChldmVudCkgPT4ge1xuICAgICAgY29uc3QgcmVhZGVyID0gcmVhZFF1ZXVlLnNoaWZ0KCk7XG4gICAgICBpZiAocmVhZGVyKSB7XG4gICAgICAgIHJlYWRlci5yZXNvbHZlKGV2ZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHB1c2hRdWV1ZS5wdXNoKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMub24oJ2VuZCcsICgpID0+IHtcbiAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgZm9yIChjb25zdCByZWFkZXIgb2YgcmVhZFF1ZXVlKSB7XG4gICAgICAgIHJlYWRlci5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICB9XG4gICAgICByZWFkUXVldWUubGVuZ3RoID0gMDtcbiAgICB9KTtcblxuICAgIHRoaXMub24oJ2Fib3J0JywgKGVycikgPT4ge1xuICAgICAgZG9uZSA9IHRydWU7XG4gICAgICBmb3IgKGNvbnN0IHJlYWRlciBvZiByZWFkUXVldWUpIHtcbiAgICAgICAgcmVhZGVyLnJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgcmVhZFF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgZm9yIChjb25zdCByZWFkZXIgb2YgcmVhZFF1ZXVlKSB7XG4gICAgICAgIHJlYWRlci5yZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICAgIHJlYWRRdWV1ZS5sZW5ndGggPSAwO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5leHQ6IGFzeW5jICgpOiBQcm9taXNlPEl0ZXJhdG9yUmVzdWx0PEFzc2lzdGFudFN0cmVhbUV2ZW50Pj4gPT4ge1xuICAgICAgICBpZiAoIXB1c2hRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8QXNzaXN0YW50U3RyZWFtRXZlbnQgfCB1bmRlZmluZWQ+KChyZXNvbHZlLCByZWplY3QpID0+XG4gICAgICAgICAgICByZWFkUXVldWUucHVzaCh7IHJlc29sdmUsIHJlamVjdCB9KSxcbiAgICAgICAgICApLnRoZW4oKGNodW5rKSA9PiAoY2h1bmsgPyB7IHZhbHVlOiBjaHVuaywgZG9uZTogZmFsc2UgfSA6IHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2h1bmsgPSBwdXNoUXVldWUuc2hpZnQoKSE7XG4gICAgICAgIHJldHVybiB7IHZhbHVlOiBjaHVuaywgZG9uZTogZmFsc2UgfTtcbiAgICAgIH0sXG4gICAgICByZXR1cm46IGFzeW5jICgpID0+IHtcbiAgICAgICAgdGhpcy5hYm9ydCgpO1xuICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZnJvbVJlYWRhYmxlU3RyZWFtKHN0cmVhbTogUmVhZGFibGVTdHJlYW0pOiBBc3Npc3RhbnRTdHJlYW0ge1xuICAgIGNvbnN0IHJ1bm5lciA9IG5ldyBBc3Npc3RhbnRTdHJlYW0oKTtcbiAgICBydW5uZXIuX3J1bigoKSA9PiBydW5uZXIuX2Zyb21SZWFkYWJsZVN0cmVhbShzdHJlYW0pKTtcbiAgICByZXR1cm4gcnVubmVyO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIF9mcm9tUmVhZGFibGVTdHJlYW0oXG4gICAgcmVhZGFibGVTdHJlYW06IFJlYWRhYmxlU3RyZWFtLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBQcm9taXNlPFJ1bj4ge1xuICAgIGNvbnN0IHNpZ25hbCA9IG9wdGlvbnM/LnNpZ25hbDtcbiAgICBpZiAoc2lnbmFsKSB7XG4gICAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHRoaXMuY29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgKCkgPT4gdGhpcy5jb250cm9sbGVyLmFib3J0KCkpO1xuICAgIH1cbiAgICB0aGlzLl9jb25uZWN0ZWQoKTtcbiAgICBjb25zdCBzdHJlYW0gPSBTdHJlYW0uZnJvbVJlYWRhYmxlU3RyZWFtPEFzc2lzdGFudFN0cmVhbUV2ZW50PihyZWFkYWJsZVN0cmVhbSwgdGhpcy5jb250cm9sbGVyKTtcbiAgICBmb3IgYXdhaXQgKGNvbnN0IGV2ZW50IG9mIHN0cmVhbSkge1xuICAgICAgdGhpcy4jYWRkRXZlbnQoZXZlbnQpO1xuICAgIH1cbiAgICBpZiAoc3RyZWFtLmNvbnRyb2xsZXIuc2lnbmFsPy5hYm9ydGVkKSB7XG4gICAgICB0aHJvdyBuZXcgQVBJVXNlckFib3J0RXJyb3IoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2FkZFJ1bih0aGlzLiNlbmRSZXF1ZXN0KCkpO1xuICB9XG5cbiAgdG9SZWFkYWJsZVN0cmVhbSgpOiBSZWFkYWJsZVN0cmVhbSB7XG4gICAgY29uc3Qgc3RyZWFtID0gbmV3IFN0cmVhbSh0aGlzW1N5bWJvbC5hc3luY0l0ZXJhdG9yXS5iaW5kKHRoaXMpLCB0aGlzLmNvbnRyb2xsZXIpO1xuICAgIHJldHVybiBzdHJlYW0udG9SZWFkYWJsZVN0cmVhbSgpO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZVRvb2xBc3Npc3RhbnRTdHJlYW0oXG4gICAgdGhyZWFkSWQ6IHN0cmluZyxcbiAgICBydW5JZDogc3RyaW5nLFxuICAgIHJ1bnM6IFJ1bnMsXG4gICAgcGFyYW1zOiBSdW5TdWJtaXRUb29sT3V0cHV0c1BhcmFtc1N0cmVhbSxcbiAgICBvcHRpb25zOiBSZXF1ZXN0T3B0aW9ucyB8IHVuZGVmaW5lZCxcbiAgKTogQXNzaXN0YW50U3RyZWFtIHtcbiAgICBjb25zdCBydW5uZXIgPSBuZXcgQXNzaXN0YW50U3RyZWFtKCk7XG4gICAgcnVubmVyLl9ydW4oKCkgPT5cbiAgICAgIHJ1bm5lci5fcnVuVG9vbEFzc2lzdGFudFN0cmVhbSh0aHJlYWRJZCwgcnVuSWQsIHJ1bnMsIHBhcmFtcywge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBoZWFkZXJzOiB7IC4uLm9wdGlvbnM/LmhlYWRlcnMsICdYLVN0YWlubGVzcy1IZWxwZXItTWV0aG9kJzogJ3N0cmVhbScgfSxcbiAgICAgIH0pLFxuICAgICk7XG4gICAgcmV0dXJuIHJ1bm5lcjtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBfY3JlYXRlVG9vbEFzc2lzdGFudFN0cmVhbShcbiAgICBydW46IFJ1bnMsXG4gICAgdGhyZWFkSWQ6IHN0cmluZyxcbiAgICBydW5JZDogc3RyaW5nLFxuICAgIHBhcmFtczogUnVuU3VibWl0VG9vbE91dHB1dHNQYXJhbXNTdHJlYW0sXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IFByb21pc2U8UnVuPiB7XG4gICAgY29uc3Qgc2lnbmFsID0gb3B0aW9ucz8uc2lnbmFsO1xuICAgIGlmIChzaWduYWwpIHtcbiAgICAgIGlmIChzaWduYWwuYWJvcnRlZCkgdGhpcy5jb250cm9sbGVyLmFib3J0KCk7XG4gICAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCAoKSA9PiB0aGlzLmNvbnRyb2xsZXIuYWJvcnQoKSk7XG4gICAgfVxuXG4gICAgY29uc3QgYm9keTogUnVuU3VibWl0VG9vbE91dHB1dHNQYXJhbXNTdHJlYW1pbmcgPSB7IC4uLnBhcmFtcywgc3RyZWFtOiB0cnVlIH07XG4gICAgY29uc3Qgc3RyZWFtID0gYXdhaXQgcnVuLnN1Ym1pdFRvb2xPdXRwdXRzKHRocmVhZElkLCBydW5JZCwgYm9keSwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHNpZ25hbDogdGhpcy5jb250cm9sbGVyLnNpZ25hbCxcbiAgICB9KTtcblxuICAgIHRoaXMuX2Nvbm5lY3RlZCgpO1xuXG4gICAgZm9yIGF3YWl0IChjb25zdCBldmVudCBvZiBzdHJlYW0pIHtcbiAgICAgIHRoaXMuI2FkZEV2ZW50KGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKHN0cmVhbS5jb250cm9sbGVyLnNpZ25hbD8uYWJvcnRlZCkge1xuICAgICAgdGhyb3cgbmV3IEFQSVVzZXJBYm9ydEVycm9yKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2FkZFJ1bih0aGlzLiNlbmRSZXF1ZXN0KCkpO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZVRocmVhZEFzc2lzdGFudFN0cmVhbShcbiAgICBwYXJhbXM6IFRocmVhZENyZWF0ZUFuZFJ1blBhcmFtc0Jhc2VTdHJlYW0sXG4gICAgdGhyZWFkOiBUaHJlYWRzLFxuICAgIG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9ucyxcbiAgKTogQXNzaXN0YW50U3RyZWFtIHtcbiAgICBjb25zdCBydW5uZXIgPSBuZXcgQXNzaXN0YW50U3RyZWFtKCk7XG4gICAgcnVubmVyLl9ydW4oKCkgPT5cbiAgICAgIHJ1bm5lci5fdGhyZWFkQXNzaXN0YW50U3RyZWFtKHBhcmFtcywgdGhyZWFkLCB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGhlYWRlcnM6IHsgLi4ub3B0aW9ucz8uaGVhZGVycywgJ1gtU3RhaW5sZXNzLUhlbHBlci1NZXRob2QnOiAnc3RyZWFtJyB9LFxuICAgICAgfSksXG4gICAgKTtcbiAgICByZXR1cm4gcnVubmVyO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZUFzc2lzdGFudFN0cmVhbShcbiAgICB0aHJlYWRJZDogc3RyaW5nLFxuICAgIHJ1bnM6IFJ1bnMsXG4gICAgcGFyYW1zOiBSdW5DcmVhdGVQYXJhbXNCYXNlU3RyZWFtLFxuICAgIG9wdGlvbnM/OiBSZXF1ZXN0T3B0aW9ucyxcbiAgKTogQXNzaXN0YW50U3RyZWFtIHtcbiAgICBjb25zdCBydW5uZXIgPSBuZXcgQXNzaXN0YW50U3RyZWFtKCk7XG4gICAgcnVubmVyLl9ydW4oKCkgPT5cbiAgICAgIHJ1bm5lci5fcnVuQXNzaXN0YW50U3RyZWFtKHRocmVhZElkLCBydW5zLCBwYXJhbXMsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgaGVhZGVyczogeyAuLi5vcHRpb25zPy5oZWFkZXJzLCAnWC1TdGFpbmxlc3MtSGVscGVyLU1ldGhvZCc6ICdzdHJlYW0nIH0sXG4gICAgICB9KSxcbiAgICApO1xuICAgIHJldHVybiBydW5uZXI7XG4gIH1cblxuICBjdXJyZW50RXZlbnQoKTogQXNzaXN0YW50U3RyZWFtRXZlbnQgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLiNjdXJyZW50RXZlbnQ7XG4gIH1cblxuICBjdXJyZW50UnVuKCk6IFJ1biB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuI2N1cnJlbnRSdW5TbmFwc2hvdDtcbiAgfVxuXG4gIGN1cnJlbnRNZXNzYWdlU25hcHNob3QoKTogTWVzc2FnZSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuI21lc3NhZ2VTbmFwc2hvdDtcbiAgfVxuXG4gIGN1cnJlbnRSdW5TdGVwU25hcHNob3QoKTogUnVucy5SdW5TdGVwIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy4jY3VycmVudFJ1blN0ZXBTbmFwc2hvdDtcbiAgfVxuXG4gIGFzeW5jIGZpbmFsUnVuU3RlcHMoKTogUHJvbWlzZTxSdW5zLlJ1blN0ZXBbXT4ge1xuICAgIGF3YWl0IHRoaXMuZG9uZSgpO1xuXG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcy4jcnVuU3RlcFNuYXBzaG90cyk7XG4gIH1cblxuICBhc3luYyBmaW5hbE1lc3NhZ2VzKCk6IFByb21pc2U8TWVzc2FnZVtdPiB7XG4gICAgYXdhaXQgdGhpcy5kb25lKCk7XG5cbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLiNtZXNzYWdlU25hcHNob3RzKTtcbiAgfVxuXG4gIGFzeW5jIGZpbmFsUnVuKCk6IFByb21pc2U8UnVuPiB7XG4gICAgYXdhaXQgdGhpcy5kb25lKCk7XG4gICAgaWYgKCF0aGlzLiNmaW5hbFJ1bikgdGhyb3cgRXJyb3IoJ0ZpbmFsIHJ1biB3YXMgbm90IHJlY2VpdmVkLicpO1xuXG4gICAgcmV0dXJuIHRoaXMuI2ZpbmFsUnVuO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIF9jcmVhdGVUaHJlYWRBc3Npc3RhbnRTdHJlYW0oXG4gICAgdGhyZWFkOiBUaHJlYWRzLFxuICAgIHBhcmFtczogVGhyZWFkQ3JlYXRlQW5kUnVuUGFyYW1zQmFzZSxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogUHJvbWlzZTxSdW4+IHtcbiAgICBjb25zdCBzaWduYWwgPSBvcHRpb25zPy5zaWduYWw7XG4gICAgaWYgKHNpZ25hbCkge1xuICAgICAgaWYgKHNpZ25hbC5hYm9ydGVkKSB0aGlzLmNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsICgpID0+IHRoaXMuY29udHJvbGxlci5hYm9ydCgpKTtcbiAgICB9XG5cbiAgICBjb25zdCBib2R5OiBSdW5DcmVhdGVQYXJhbXNTdHJlYW1pbmcgPSB7IC4uLnBhcmFtcywgc3RyZWFtOiB0cnVlIH07XG4gICAgY29uc3Qgc3RyZWFtID0gYXdhaXQgdGhyZWFkLmNyZWF0ZUFuZFJ1bihib2R5LCB7IC4uLm9wdGlvbnMsIHNpZ25hbDogdGhpcy5jb250cm9sbGVyLnNpZ25hbCB9KTtcblxuICAgIHRoaXMuX2Nvbm5lY3RlZCgpO1xuXG4gICAgZm9yIGF3YWl0IChjb25zdCBldmVudCBvZiBzdHJlYW0pIHtcbiAgICAgIHRoaXMuI2FkZEV2ZW50KGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKHN0cmVhbS5jb250cm9sbGVyLnNpZ25hbD8uYWJvcnRlZCkge1xuICAgICAgdGhyb3cgbmV3IEFQSVVzZXJBYm9ydEVycm9yKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2FkZFJ1bih0aGlzLiNlbmRSZXF1ZXN0KCkpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIF9jcmVhdGVBc3Npc3RhbnRTdHJlYW0oXG4gICAgcnVuOiBSdW5zLFxuICAgIHRocmVhZElkOiBzdHJpbmcsXG4gICAgcGFyYW1zOiBSdW5DcmVhdGVQYXJhbXNCYXNlLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBQcm9taXNlPFJ1bj4ge1xuICAgIGNvbnN0IHNpZ25hbCA9IG9wdGlvbnM/LnNpZ25hbDtcbiAgICBpZiAoc2lnbmFsKSB7XG4gICAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHRoaXMuY29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgKCkgPT4gdGhpcy5jb250cm9sbGVyLmFib3J0KCkpO1xuICAgIH1cblxuICAgIGNvbnN0IGJvZHk6IFJ1bkNyZWF0ZVBhcmFtc1N0cmVhbWluZyA9IHsgLi4ucGFyYW1zLCBzdHJlYW06IHRydWUgfTtcbiAgICBjb25zdCBzdHJlYW0gPSBhd2FpdCBydW4uY3JlYXRlKHRocmVhZElkLCBib2R5LCB7IC4uLm9wdGlvbnMsIHNpZ25hbDogdGhpcy5jb250cm9sbGVyLnNpZ25hbCB9KTtcblxuICAgIHRoaXMuX2Nvbm5lY3RlZCgpO1xuXG4gICAgZm9yIGF3YWl0IChjb25zdCBldmVudCBvZiBzdHJlYW0pIHtcbiAgICAgIHRoaXMuI2FkZEV2ZW50KGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKHN0cmVhbS5jb250cm9sbGVyLnNpZ25hbD8uYWJvcnRlZCkge1xuICAgICAgdGhyb3cgbmV3IEFQSVVzZXJBYm9ydEVycm9yKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2FkZFJ1bih0aGlzLiNlbmRSZXF1ZXN0KCkpO1xuICB9XG5cbiAgI2FkZEV2ZW50KGV2ZW50OiBBc3Npc3RhbnRTdHJlYW1FdmVudCkge1xuICAgIGlmICh0aGlzLmVuZGVkKSByZXR1cm47XG5cbiAgICB0aGlzLiNjdXJyZW50RXZlbnQgPSBldmVudDtcblxuICAgIHRoaXMuI2hhbmRsZUV2ZW50KGV2ZW50KTtcblxuICAgIHN3aXRjaCAoZXZlbnQuZXZlbnQpIHtcbiAgICAgIGNhc2UgJ3RocmVhZC5jcmVhdGVkJzpcbiAgICAgICAgLy9ObyBhY3Rpb24gb24gdGhpcyBldmVudC5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3RocmVhZC5ydW4uY3JlYXRlZCc6XG4gICAgICBjYXNlICd0aHJlYWQucnVuLnF1ZXVlZCc6XG4gICAgICBjYXNlICd0aHJlYWQucnVuLmluX3Byb2dyZXNzJzpcbiAgICAgIGNhc2UgJ3RocmVhZC5ydW4ucmVxdWlyZXNfYWN0aW9uJzpcbiAgICAgIGNhc2UgJ3RocmVhZC5ydW4uY29tcGxldGVkJzpcbiAgICAgIGNhc2UgJ3RocmVhZC5ydW4uaW5jb21wbGV0ZSc6XG4gICAgICBjYXNlICd0aHJlYWQucnVuLmZhaWxlZCc6XG4gICAgICBjYXNlICd0aHJlYWQucnVuLmNhbmNlbGxpbmcnOlxuICAgICAgY2FzZSAndGhyZWFkLnJ1bi5jYW5jZWxsZWQnOlxuICAgICAgY2FzZSAndGhyZWFkLnJ1bi5leHBpcmVkJzpcbiAgICAgICAgdGhpcy4jaGFuZGxlUnVuKGV2ZW50KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3RocmVhZC5ydW4uc3RlcC5jcmVhdGVkJzpcbiAgICAgIGNhc2UgJ3RocmVhZC5ydW4uc3RlcC5pbl9wcm9ncmVzcyc6XG4gICAgICBjYXNlICd0aHJlYWQucnVuLnN0ZXAuZGVsdGEnOlxuICAgICAgY2FzZSAndGhyZWFkLnJ1bi5zdGVwLmNvbXBsZXRlZCc6XG4gICAgICBjYXNlICd0aHJlYWQucnVuLnN0ZXAuZmFpbGVkJzpcbiAgICAgIGNhc2UgJ3RocmVhZC5ydW4uc3RlcC5jYW5jZWxsZWQnOlxuICAgICAgY2FzZSAndGhyZWFkLnJ1bi5zdGVwLmV4cGlyZWQnOlxuICAgICAgICB0aGlzLiNoYW5kbGVSdW5TdGVwKGV2ZW50KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3RocmVhZC5tZXNzYWdlLmNyZWF0ZWQnOlxuICAgICAgY2FzZSAndGhyZWFkLm1lc3NhZ2UuaW5fcHJvZ3Jlc3MnOlxuICAgICAgY2FzZSAndGhyZWFkLm1lc3NhZ2UuZGVsdGEnOlxuICAgICAgY2FzZSAndGhyZWFkLm1lc3NhZ2UuY29tcGxldGVkJzpcbiAgICAgIGNhc2UgJ3RocmVhZC5tZXNzYWdlLmluY29tcGxldGUnOlxuICAgICAgICB0aGlzLiNoYW5kbGVNZXNzYWdlKGV2ZW50KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgLy9UaGlzIGlzIGluY2x1ZGVkIGZvciBjb21wbGV0ZW5lc3MsIGJ1dCBlcnJvcnMgYXJlIHByb2Nlc3NlZCBpbiB0aGUgU1NFIGV2ZW50IHByb2Nlc3Npbmcgc28gdGhpcyBzaG91bGQgbm90IG9jY3VyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnRW5jb3VudGVyZWQgYW4gZXJyb3IgZXZlbnQgaW4gZXZlbnQgcHJvY2Vzc2luZyAtIGVycm9ycyBzaG91bGQgYmUgcHJvY2Vzc2VkIGVhcmxpZXInLFxuICAgICAgICApO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYXNzZXJ0TmV2ZXIoZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gICNlbmRSZXF1ZXN0KCk6IFJ1biB7XG4gICAgaWYgKHRoaXMuZW5kZWQpIHtcbiAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihgc3RyZWFtIGhhcyBlbmRlZCwgdGhpcyBzaG91bGRuJ3QgaGFwcGVuYCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLiNmaW5hbFJ1bikgdGhyb3cgRXJyb3IoJ0ZpbmFsIHJ1biBoYXMgbm90IGJlZW4gcmVjZWl2ZWQnKTtcblxuICAgIHJldHVybiB0aGlzLiNmaW5hbFJ1bjtcbiAgfVxuXG4gICNoYW5kbGVNZXNzYWdlKHRoaXM6IEFzc2lzdGFudFN0cmVhbSwgZXZlbnQ6IE1lc3NhZ2VTdHJlYW1FdmVudCkge1xuICAgIGNvbnN0IFthY2N1bXVsYXRlZE1lc3NhZ2UsIG5ld0NvbnRlbnRdID0gdGhpcy4jYWNjdW11bGF0ZU1lc3NhZ2UoZXZlbnQsIHRoaXMuI21lc3NhZ2VTbmFwc2hvdCk7XG4gICAgdGhpcy4jbWVzc2FnZVNuYXBzaG90ID0gYWNjdW11bGF0ZWRNZXNzYWdlO1xuICAgIHRoaXMuI21lc3NhZ2VTbmFwc2hvdHNbYWNjdW11bGF0ZWRNZXNzYWdlLmlkXSA9IGFjY3VtdWxhdGVkTWVzc2FnZTtcblxuICAgIGZvciAoY29uc3QgY29udGVudCBvZiBuZXdDb250ZW50KSB7XG4gICAgICBjb25zdCBzbmFwc2hvdENvbnRlbnQgPSBhY2N1bXVsYXRlZE1lc3NhZ2UuY29udGVudFtjb250ZW50LmluZGV4XTtcbiAgICAgIGlmIChzbmFwc2hvdENvbnRlbnQ/LnR5cGUgPT0gJ3RleHQnKSB7XG4gICAgICAgIHRoaXMuX2VtaXQoJ3RleHRDcmVhdGVkJywgc25hcHNob3RDb250ZW50LnRleHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN3aXRjaCAoZXZlbnQuZXZlbnQpIHtcbiAgICAgIGNhc2UgJ3RocmVhZC5tZXNzYWdlLmNyZWF0ZWQnOlxuICAgICAgICB0aGlzLl9lbWl0KCdtZXNzYWdlQ3JlYXRlZCcsIGV2ZW50LmRhdGEpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAndGhyZWFkLm1lc3NhZ2UuaW5fcHJvZ3Jlc3MnOlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAndGhyZWFkLm1lc3NhZ2UuZGVsdGEnOlxuICAgICAgICB0aGlzLl9lbWl0KCdtZXNzYWdlRGVsdGEnLCBldmVudC5kYXRhLmRlbHRhLCBhY2N1bXVsYXRlZE1lc3NhZ2UpO1xuXG4gICAgICAgIGlmIChldmVudC5kYXRhLmRlbHRhLmNvbnRlbnQpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IGNvbnRlbnQgb2YgZXZlbnQuZGF0YS5kZWx0YS5jb250ZW50KSB7XG4gICAgICAgICAgICAvL0lmIGl0IGlzIHRleHQgZGVsdGEsIGVtaXQgYSB0ZXh0IGRlbHRhIGV2ZW50XG4gICAgICAgICAgICBpZiAoY29udGVudC50eXBlID09ICd0ZXh0JyAmJiBjb250ZW50LnRleHQpIHtcbiAgICAgICAgICAgICAgbGV0IHRleHREZWx0YSA9IGNvbnRlbnQudGV4dDtcbiAgICAgICAgICAgICAgbGV0IHNuYXBzaG90ID0gYWNjdW11bGF0ZWRNZXNzYWdlLmNvbnRlbnRbY29udGVudC5pbmRleF07XG4gICAgICAgICAgICAgIGlmIChzbmFwc2hvdCAmJiBzbmFwc2hvdC50eXBlID09ICd0ZXh0Jykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXQoJ3RleHREZWx0YScsIHRleHREZWx0YSwgc25hcHNob3QudGV4dCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1RoZSBzbmFwc2hvdCBhc3NvY2lhdGVkIHdpdGggdGhpcyB0ZXh0IGRlbHRhIGlzIG5vdCB0ZXh0IG9yIG1pc3NpbmcnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29udGVudC5pbmRleCAhPSB0aGlzLiNjdXJyZW50Q29udGVudEluZGV4KSB7XG4gICAgICAgICAgICAgIC8vU2VlIGlmIHdlIGhhdmUgaW4gcHJvZ3Jlc3MgY29udGVudFxuICAgICAgICAgICAgICBpZiAodGhpcy4jY3VycmVudENvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuI2N1cnJlbnRDb250ZW50LnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgJ3RleHQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbWl0KCd0ZXh0RG9uZScsIHRoaXMuI2N1cnJlbnRDb250ZW50LnRleHQsIHRoaXMuI21lc3NhZ2VTbmFwc2hvdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgY2FzZSAnaW1hZ2VfZmlsZSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VtaXQoJ2ltYWdlRmlsZURvbmUnLCB0aGlzLiNjdXJyZW50Q29udGVudC5pbWFnZV9maWxlLCB0aGlzLiNtZXNzYWdlU25hcHNob3QpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aGlzLiNjdXJyZW50Q29udGVudEluZGV4ID0gY29udGVudC5pbmRleDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy4jY3VycmVudENvbnRlbnQgPSBhY2N1bXVsYXRlZE1lc3NhZ2UuY29udGVudFtjb250ZW50LmluZGV4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAndGhyZWFkLm1lc3NhZ2UuY29tcGxldGVkJzpcbiAgICAgIGNhc2UgJ3RocmVhZC5tZXNzYWdlLmluY29tcGxldGUnOlxuICAgICAgICAvL1dlIGVtaXQgdGhlIGxhdGVzdCBjb250ZW50IHdlIHdlcmUgd29ya2luZyBvbiBvbiBjb21wbGV0aW9uIChpbmNsdWRpbmcgaW5jb21wbGV0ZSlcbiAgICAgICAgaWYgKHRoaXMuI2N1cnJlbnRDb250ZW50SW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNvbnN0IGN1cnJlbnRDb250ZW50ID0gZXZlbnQuZGF0YS5jb250ZW50W3RoaXMuI2N1cnJlbnRDb250ZW50SW5kZXhdO1xuICAgICAgICAgIGlmIChjdXJyZW50Q29udGVudCkge1xuICAgICAgICAgICAgc3dpdGNoIChjdXJyZW50Q29udGVudC50eXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgJ2ltYWdlX2ZpbGUnOlxuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXQoJ2ltYWdlRmlsZURvbmUnLCBjdXJyZW50Q29udGVudC5pbWFnZV9maWxlLCB0aGlzLiNtZXNzYWdlU25hcHNob3QpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICd0ZXh0JzpcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0KCd0ZXh0RG9uZScsIGN1cnJlbnRDb250ZW50LnRleHQsIHRoaXMuI21lc3NhZ2VTbmFwc2hvdCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuI21lc3NhZ2VTbmFwc2hvdCkge1xuICAgICAgICAgIHRoaXMuX2VtaXQoJ21lc3NhZ2VEb25lJywgZXZlbnQuZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLiNtZXNzYWdlU25hcHNob3QgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgI2hhbmRsZVJ1blN0ZXAodGhpczogQXNzaXN0YW50U3RyZWFtLCBldmVudDogUnVuU3RlcFN0cmVhbUV2ZW50KSB7XG4gICAgY29uc3QgYWNjdW11bGF0ZWRSdW5TdGVwID0gdGhpcy4jYWNjdW11bGF0ZVJ1blN0ZXAoZXZlbnQpO1xuICAgIHRoaXMuI2N1cnJlbnRSdW5TdGVwU25hcHNob3QgPSBhY2N1bXVsYXRlZFJ1blN0ZXA7XG5cbiAgICBzd2l0Y2ggKGV2ZW50LmV2ZW50KSB7XG4gICAgICBjYXNlICd0aHJlYWQucnVuLnN0ZXAuY3JlYXRlZCc6XG4gICAgICAgIHRoaXMuX2VtaXQoJ3J1blN0ZXBDcmVhdGVkJywgZXZlbnQuZGF0YSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndGhyZWFkLnJ1bi5zdGVwLmRlbHRhJzpcbiAgICAgICAgY29uc3QgZGVsdGEgPSBldmVudC5kYXRhLmRlbHRhO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgZGVsdGEuc3RlcF9kZXRhaWxzICYmXG4gICAgICAgICAgZGVsdGEuc3RlcF9kZXRhaWxzLnR5cGUgPT0gJ3Rvb2xfY2FsbHMnICYmXG4gICAgICAgICAgZGVsdGEuc3RlcF9kZXRhaWxzLnRvb2xfY2FsbHMgJiZcbiAgICAgICAgICBhY2N1bXVsYXRlZFJ1blN0ZXAuc3RlcF9kZXRhaWxzLnR5cGUgPT0gJ3Rvb2xfY2FsbHMnXG4gICAgICAgICkge1xuICAgICAgICAgIGZvciAoY29uc3QgdG9vbENhbGwgb2YgZGVsdGEuc3RlcF9kZXRhaWxzLnRvb2xfY2FsbHMpIHtcbiAgICAgICAgICAgIGlmICh0b29sQ2FsbC5pbmRleCA9PSB0aGlzLiNjdXJyZW50VG9vbENhbGxJbmRleCkge1xuICAgICAgICAgICAgICB0aGlzLl9lbWl0KFxuICAgICAgICAgICAgICAgICd0b29sQ2FsbERlbHRhJyxcbiAgICAgICAgICAgICAgICB0b29sQ2FsbCxcbiAgICAgICAgICAgICAgICBhY2N1bXVsYXRlZFJ1blN0ZXAuc3RlcF9kZXRhaWxzLnRvb2xfY2FsbHNbdG9vbENhbGwuaW5kZXhdIGFzIFRvb2xDYWxsLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMuI2N1cnJlbnRUb29sQ2FsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXQoJ3Rvb2xDYWxsRG9uZScsIHRoaXMuI2N1cnJlbnRUb29sQ2FsbCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aGlzLiNjdXJyZW50VG9vbENhbGxJbmRleCA9IHRvb2xDYWxsLmluZGV4O1xuICAgICAgICAgICAgICB0aGlzLiNjdXJyZW50VG9vbENhbGwgPSBhY2N1bXVsYXRlZFJ1blN0ZXAuc3RlcF9kZXRhaWxzLnRvb2xfY2FsbHNbdG9vbENhbGwuaW5kZXhdO1xuICAgICAgICAgICAgICBpZiAodGhpcy4jY3VycmVudFRvb2xDYWxsKSB0aGlzLl9lbWl0KCd0b29sQ2FsbENyZWF0ZWQnLCB0aGlzLiNjdXJyZW50VG9vbENhbGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2VtaXQoJ3J1blN0ZXBEZWx0YScsIGV2ZW50LmRhdGEuZGVsdGEsIGFjY3VtdWxhdGVkUnVuU3RlcCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndGhyZWFkLnJ1bi5zdGVwLmNvbXBsZXRlZCc6XG4gICAgICBjYXNlICd0aHJlYWQucnVuLnN0ZXAuZmFpbGVkJzpcbiAgICAgIGNhc2UgJ3RocmVhZC5ydW4uc3RlcC5jYW5jZWxsZWQnOlxuICAgICAgY2FzZSAndGhyZWFkLnJ1bi5zdGVwLmV4cGlyZWQnOlxuICAgICAgICB0aGlzLiNjdXJyZW50UnVuU3RlcFNuYXBzaG90ID0gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBkZXRhaWxzID0gZXZlbnQuZGF0YS5zdGVwX2RldGFpbHM7XG4gICAgICAgIGlmIChkZXRhaWxzLnR5cGUgPT0gJ3Rvb2xfY2FsbHMnKSB7XG4gICAgICAgICAgaWYgKHRoaXMuI2N1cnJlbnRUb29sQ2FsbCkge1xuICAgICAgICAgICAgdGhpcy5fZW1pdCgndG9vbENhbGxEb25lJywgdGhpcy4jY3VycmVudFRvb2xDYWxsIGFzIFRvb2xDYWxsKTtcbiAgICAgICAgICAgIHRoaXMuI2N1cnJlbnRUb29sQ2FsbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZW1pdCgncnVuU3RlcERvbmUnLCBldmVudC5kYXRhLCBhY2N1bXVsYXRlZFJ1blN0ZXApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RocmVhZC5ydW4uc3RlcC5pbl9wcm9ncmVzcyc6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gICNoYW5kbGVFdmVudCh0aGlzOiBBc3Npc3RhbnRTdHJlYW0sIGV2ZW50OiBBc3Npc3RhbnRTdHJlYW1FdmVudCkge1xuICAgIHRoaXMuI2V2ZW50cy5wdXNoKGV2ZW50KTtcbiAgICB0aGlzLl9lbWl0KCdldmVudCcsIGV2ZW50KTtcbiAgfVxuXG4gICNhY2N1bXVsYXRlUnVuU3RlcChldmVudDogUnVuU3RlcFN0cmVhbUV2ZW50KTogUnVucy5SdW5TdGVwIHtcbiAgICBzd2l0Y2ggKGV2ZW50LmV2ZW50KSB7XG4gICAgICBjYXNlICd0aHJlYWQucnVuLnN0ZXAuY3JlYXRlZCc6XG4gICAgICAgIHRoaXMuI3J1blN0ZXBTbmFwc2hvdHNbZXZlbnQuZGF0YS5pZF0gPSBldmVudC5kYXRhO1xuICAgICAgICByZXR1cm4gZXZlbnQuZGF0YTtcblxuICAgICAgY2FzZSAndGhyZWFkLnJ1bi5zdGVwLmRlbHRhJzpcbiAgICAgICAgbGV0IHNuYXBzaG90ID0gdGhpcy4jcnVuU3RlcFNuYXBzaG90c1tldmVudC5kYXRhLmlkXSBhcyBSdW5zLlJ1blN0ZXA7XG4gICAgICAgIGlmICghc25hcHNob3QpIHtcbiAgICAgICAgICB0aHJvdyBFcnJvcignUmVjZWl2ZWQgYSBSdW5TdGVwRGVsdGEgYmVmb3JlIGNyZWF0aW9uIG9mIGEgc25hcHNob3QnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBkYXRhID0gZXZlbnQuZGF0YTtcblxuICAgICAgICBpZiAoZGF0YS5kZWx0YSkge1xuICAgICAgICAgIGNvbnN0IGFjY3VtdWxhdGVkID0gQXNzaXN0YW50U3RyZWFtLmFjY3VtdWxhdGVEZWx0YShzbmFwc2hvdCwgZGF0YS5kZWx0YSkgYXMgUnVucy5SdW5TdGVwO1xuICAgICAgICAgIHRoaXMuI3J1blN0ZXBTbmFwc2hvdHNbZXZlbnQuZGF0YS5pZF0gPSBhY2N1bXVsYXRlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLiNydW5TdGVwU25hcHNob3RzW2V2ZW50LmRhdGEuaWRdIGFzIFJ1bnMuUnVuU3RlcDtcblxuICAgICAgY2FzZSAndGhyZWFkLnJ1bi5zdGVwLmNvbXBsZXRlZCc6XG4gICAgICBjYXNlICd0aHJlYWQucnVuLnN0ZXAuZmFpbGVkJzpcbiAgICAgIGNhc2UgJ3RocmVhZC5ydW4uc3RlcC5jYW5jZWxsZWQnOlxuICAgICAgY2FzZSAndGhyZWFkLnJ1bi5zdGVwLmV4cGlyZWQnOlxuICAgICAgY2FzZSAndGhyZWFkLnJ1bi5zdGVwLmluX3Byb2dyZXNzJzpcbiAgICAgICAgdGhpcy4jcnVuU3RlcFNuYXBzaG90c1tldmVudC5kYXRhLmlkXSA9IGV2ZW50LmRhdGE7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICh0aGlzLiNydW5TdGVwU25hcHNob3RzW2V2ZW50LmRhdGEuaWRdKSByZXR1cm4gdGhpcy4jcnVuU3RlcFNuYXBzaG90c1tldmVudC5kYXRhLmlkXSBhcyBSdW5zLlJ1blN0ZXA7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBzbmFwc2hvdCBhdmFpbGFibGUnKTtcbiAgfVxuXG4gICNhY2N1bXVsYXRlTWVzc2FnZShcbiAgICBldmVudDogQXNzaXN0YW50U3RyZWFtRXZlbnQsXG4gICAgc25hcHNob3Q6IE1lc3NhZ2UgfCB1bmRlZmluZWQsXG4gICk6IFtNZXNzYWdlLCBNZXNzYWdlQ29udGVudERlbHRhW11dIHtcbiAgICBsZXQgbmV3Q29udGVudDogTWVzc2FnZUNvbnRlbnREZWx0YVtdID0gW107XG5cbiAgICBzd2l0Y2ggKGV2ZW50LmV2ZW50KSB7XG4gICAgICBjYXNlICd0aHJlYWQubWVzc2FnZS5jcmVhdGVkJzpcbiAgICAgICAgLy9PbiBjcmVhdGlvbiB0aGUgc25hcHNob3QgaXMganVzdCB0aGUgaW5pdGlhbCBtZXNzYWdlXG4gICAgICAgIHJldHVybiBbZXZlbnQuZGF0YSwgbmV3Q29udGVudF07XG5cbiAgICAgIGNhc2UgJ3RocmVhZC5tZXNzYWdlLmRlbHRhJzpcbiAgICAgICAgaWYgKCFzbmFwc2hvdCkge1xuICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgJ1JlY2VpdmVkIGEgZGVsdGEgd2l0aCBubyBleGlzdGluZyBzbmFwc2hvdCAodGhlcmUgc2hvdWxkIGJlIG9uZSBmcm9tIG1lc3NhZ2UgY3JlYXRpb24pJyxcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGRhdGEgPSBldmVudC5kYXRhO1xuXG4gICAgICAgIC8vSWYgdGhpcyBkZWx0YSBkb2VzIG5vdCBoYXZlIGNvbnRlbnQsIG5vdGhpbmcgdG8gcHJvY2Vzc1xuICAgICAgICBpZiAoZGF0YS5kZWx0YS5jb250ZW50KSB7XG4gICAgICAgICAgZm9yIChjb25zdCBjb250ZW50RWxlbWVudCBvZiBkYXRhLmRlbHRhLmNvbnRlbnQpIHtcbiAgICAgICAgICAgIGlmIChjb250ZW50RWxlbWVudC5pbmRleCBpbiBzbmFwc2hvdC5jb250ZW50KSB7XG4gICAgICAgICAgICAgIGxldCBjdXJyZW50Q29udGVudCA9IHNuYXBzaG90LmNvbnRlbnRbY29udGVudEVsZW1lbnQuaW5kZXhdO1xuICAgICAgICAgICAgICBzbmFwc2hvdC5jb250ZW50W2NvbnRlbnRFbGVtZW50LmluZGV4XSA9IHRoaXMuI2FjY3VtdWxhdGVDb250ZW50KFxuICAgICAgICAgICAgICAgIGNvbnRlbnRFbGVtZW50LFxuICAgICAgICAgICAgICAgIGN1cnJlbnRDb250ZW50LFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc25hcHNob3QuY29udGVudFtjb250ZW50RWxlbWVudC5pbmRleF0gPSBjb250ZW50RWxlbWVudCBhcyBNZXNzYWdlQ29udGVudDtcbiAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIG5ldyBlbGVtZW50XG4gICAgICAgICAgICAgIG5ld0NvbnRlbnQucHVzaChjb250ZW50RWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFtzbmFwc2hvdCwgbmV3Q29udGVudF07XG5cbiAgICAgIGNhc2UgJ3RocmVhZC5tZXNzYWdlLmluX3Byb2dyZXNzJzpcbiAgICAgIGNhc2UgJ3RocmVhZC5tZXNzYWdlLmNvbXBsZXRlZCc6XG4gICAgICBjYXNlICd0aHJlYWQubWVzc2FnZS5pbmNvbXBsZXRlJzpcbiAgICAgICAgLy9ObyBjaGFuZ2VzIG9uIG90aGVyIHRocmVhZCBldmVudHNcbiAgICAgICAgaWYgKHNuYXBzaG90KSB7XG4gICAgICAgICAgcmV0dXJuIFtzbmFwc2hvdCwgbmV3Q29udGVudF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgRXJyb3IoJ1JlY2VpdmVkIHRocmVhZCBtZXNzYWdlIGV2ZW50IHdpdGggbm8gZXhpc3Rpbmcgc25hcHNob3QnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBFcnJvcignVHJpZWQgdG8gYWNjdW11bGF0ZSBhIG5vbi1tZXNzYWdlIGV2ZW50Jyk7XG4gIH1cblxuICAjYWNjdW11bGF0ZUNvbnRlbnQoXG4gICAgY29udGVudEVsZW1lbnQ6IE1lc3NhZ2VDb250ZW50RGVsdGEsXG4gICAgY3VycmVudENvbnRlbnQ6IE1lc3NhZ2VDb250ZW50IHwgdW5kZWZpbmVkLFxuICApOiBUZXh0Q29udGVudEJsb2NrIHwgSW1hZ2VGaWxlQ29udGVudEJsb2NrIHtcbiAgICByZXR1cm4gQXNzaXN0YW50U3RyZWFtLmFjY3VtdWxhdGVEZWx0YShjdXJyZW50Q29udGVudCBhcyB1bmtub3duIGFzIFJlY29yZDxhbnksIGFueT4sIGNvbnRlbnRFbGVtZW50KSBhc1xuICAgICAgfCBUZXh0Q29udGVudEJsb2NrXG4gICAgICB8IEltYWdlRmlsZUNvbnRlbnRCbG9jaztcbiAgfVxuXG4gIHN0YXRpYyBhY2N1bXVsYXRlRGVsdGEoYWNjOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LCBkZWx0YTogUmVjb3JkPHN0cmluZywgYW55Pik6IFJlY29yZDxzdHJpbmcsIGFueT4ge1xuICAgIGZvciAoY29uc3QgW2tleSwgZGVsdGFWYWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZGVsdGEpKSB7XG4gICAgICBpZiAoIWFjYy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGFjY1trZXldID0gZGVsdGFWYWx1ZTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGxldCBhY2NWYWx1ZSA9IGFjY1trZXldO1xuICAgICAgaWYgKGFjY1ZhbHVlID09PSBudWxsIHx8IGFjY1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYWNjW2tleV0gPSBkZWx0YVZhbHVlO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gV2UgZG9uJ3QgYWNjdW11bGF0ZSB0aGVzZSBzcGVjaWFsIHByb3BlcnRpZXNcbiAgICAgIGlmIChrZXkgPT09ICdpbmRleCcgfHwga2V5ID09PSAndHlwZScpIHtcbiAgICAgICAgYWNjW2tleV0gPSBkZWx0YVZhbHVlO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gVHlwZS1zcGVjaWZpYyBhY2N1bXVsYXRpb24gbG9naWNcbiAgICAgIGlmICh0eXBlb2YgYWNjVmFsdWUgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBkZWx0YVZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICBhY2NWYWx1ZSArPSBkZWx0YVZhbHVlO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYWNjVmFsdWUgPT09ICdudW1iZXInICYmIHR5cGVvZiBkZWx0YVZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICBhY2NWYWx1ZSArPSBkZWx0YVZhbHVlO1xuICAgICAgfSBlbHNlIGlmIChDb3JlLmlzT2JqKGFjY1ZhbHVlKSAmJiBDb3JlLmlzT2JqKGRlbHRhVmFsdWUpKSB7XG4gICAgICAgIGFjY1ZhbHVlID0gdGhpcy5hY2N1bXVsYXRlRGVsdGEoYWNjVmFsdWUgYXMgUmVjb3JkPHN0cmluZywgYW55PiwgZGVsdGFWYWx1ZSBhcyBSZWNvcmQ8c3RyaW5nLCBhbnk+KTtcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhY2NWYWx1ZSkgJiYgQXJyYXkuaXNBcnJheShkZWx0YVZhbHVlKSkge1xuICAgICAgICBpZiAoYWNjVmFsdWUuZXZlcnkoKHgpID0+IHR5cGVvZiB4ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgeCA9PT0gJ251bWJlcicpKSB7XG4gICAgICAgICAgYWNjVmFsdWUucHVzaCguLi5kZWx0YVZhbHVlKTsgLy8gVXNlIHNwcmVhZCBzeW50YXggZm9yIGVmZmljaWVudCBhZGRpdGlvblxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBkZWx0YUVudHJ5IG9mIGRlbHRhVmFsdWUpIHtcbiAgICAgICAgICBpZiAoIUNvcmUuaXNPYmooZGVsdGFFbnRyeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgYXJyYXkgZGVsdGEgZW50cnkgdG8gYmUgYW4gb2JqZWN0IGJ1dCBnb3Q6ICR7ZGVsdGFFbnRyeX1gKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBpbmRleCA9IGRlbHRhRW50cnlbJ2luZGV4J107XG4gICAgICAgICAgaWYgKGluZGV4ID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZGVsdGFFbnRyeSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGFycmF5IGRlbHRhIGVudHJ5IHRvIGhhdmUgYW4gYGluZGV4YCBwcm9wZXJ0eScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGFycmF5IGRlbHRhIGVudHJ5IFxcYGluZGV4XFxgIHByb3BlcnR5IHRvIGJlIGEgbnVtYmVyIGJ1dCBnb3QgJHtpbmRleH1gKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBhY2NFbnRyeSA9IGFjY1ZhbHVlW2luZGV4XTtcbiAgICAgICAgICBpZiAoYWNjRW50cnkgPT0gbnVsbCkge1xuICAgICAgICAgICAgYWNjVmFsdWUucHVzaChkZWx0YUVudHJ5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWNjVmFsdWVbaW5kZXhdID0gdGhpcy5hY2N1bXVsYXRlRGVsdGEoYWNjRW50cnksIGRlbHRhRW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IEVycm9yKGBVbmhhbmRsZWQgcmVjb3JkIHR5cGU6ICR7a2V5fSwgZGVsdGFWYWx1ZTogJHtkZWx0YVZhbHVlfSwgYWNjVmFsdWU6ICR7YWNjVmFsdWV9YCk7XG4gICAgICB9XG4gICAgICBhY2Nba2V5XSA9IGFjY1ZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH1cblxuICAjaGFuZGxlUnVuKHRoaXM6IEFzc2lzdGFudFN0cmVhbSwgZXZlbnQ6IFJ1blN0cmVhbUV2ZW50KSB7XG4gICAgdGhpcy4jY3VycmVudFJ1blNuYXBzaG90ID0gZXZlbnQuZGF0YTtcbiAgICBzd2l0Y2ggKGV2ZW50LmV2ZW50KSB7XG4gICAgICBjYXNlICd0aHJlYWQucnVuLmNyZWF0ZWQnOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RocmVhZC5ydW4ucXVldWVkJzpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0aHJlYWQucnVuLmluX3Byb2dyZXNzJzpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0aHJlYWQucnVuLnJlcXVpcmVzX2FjdGlvbic6XG4gICAgICBjYXNlICd0aHJlYWQucnVuLmNhbmNlbGxlZCc6XG4gICAgICBjYXNlICd0aHJlYWQucnVuLmZhaWxlZCc6XG4gICAgICBjYXNlICd0aHJlYWQucnVuLmNvbXBsZXRlZCc6XG4gICAgICBjYXNlICd0aHJlYWQucnVuLmV4cGlyZWQnOlxuICAgICAgICB0aGlzLiNmaW5hbFJ1biA9IGV2ZW50LmRhdGE7XG4gICAgICAgIGlmICh0aGlzLiNjdXJyZW50VG9vbENhbGwpIHtcbiAgICAgICAgICB0aGlzLl9lbWl0KCd0b29sQ2FsbERvbmUnLCB0aGlzLiNjdXJyZW50VG9vbENhbGwpO1xuICAgICAgICAgIHRoaXMuI2N1cnJlbnRUb29sQ2FsbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RocmVhZC5ydW4uY2FuY2VsbGluZyc6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBfYWRkUnVuKHJ1bjogUnVuKTogUnVuIHtcbiAgICByZXR1cm4gcnVuO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIF90aHJlYWRBc3Npc3RhbnRTdHJlYW0oXG4gICAgcGFyYW1zOiBUaHJlYWRDcmVhdGVBbmRSdW5QYXJhbXNCYXNlLFxuICAgIHRocmVhZDogVGhyZWFkcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogUHJvbWlzZTxSdW4+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5fY3JlYXRlVGhyZWFkQXNzaXN0YW50U3RyZWFtKHRocmVhZCwgcGFyYW1zLCBvcHRpb25zKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBfcnVuQXNzaXN0YW50U3RyZWFtKFxuICAgIHRocmVhZElkOiBzdHJpbmcsXG4gICAgcnVuczogUnVucyxcbiAgICBwYXJhbXM6IFJ1bkNyZWF0ZVBhcmFtc0Jhc2UsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IFByb21pc2U8UnVuPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuX2NyZWF0ZUFzc2lzdGFudFN0cmVhbShydW5zLCB0aHJlYWRJZCwgcGFyYW1zLCBvcHRpb25zKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBfcnVuVG9vbEFzc2lzdGFudFN0cmVhbShcbiAgICB0aHJlYWRJZDogc3RyaW5nLFxuICAgIHJ1bklkOiBzdHJpbmcsXG4gICAgcnVuczogUnVucyxcbiAgICBwYXJhbXM6IFJ1blN1Ym1pdFRvb2xPdXRwdXRzUGFyYW1zU3RyZWFtLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBQcm9taXNlPFJ1bj4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLl9jcmVhdGVUb29sQXNzaXN0YW50U3RyZWFtKHJ1bnMsIHRocmVhZElkLCBydW5JZCwgcGFyYW1zLCBvcHRpb25zKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnROZXZlcihfeDogbmV2ZXIpIHt9XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICcuLi8uLi9yZXNvdXJjZSc7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgU2hhcmVkIGZyb20gJy4uL3NoYXJlZCc7XG5pbXBvcnQgKiBhcyBNZXNzYWdlc0FQSSBmcm9tICcuL3RocmVhZHMvbWVzc2FnZXMnO1xuaW1wb3J0ICogYXMgVGhyZWFkc0FQSSBmcm9tICcuL3RocmVhZHMvdGhyZWFkcyc7XG5pbXBvcnQgKiBhcyBSdW5zQVBJIGZyb20gJy4vdGhyZWFkcy9ydW5zL3J1bnMnO1xuaW1wb3J0ICogYXMgU3RlcHNBUEkgZnJvbSAnLi90aHJlYWRzL3J1bnMvc3RlcHMnO1xuaW1wb3J0IHsgQ3Vyc29yUGFnZSwgdHlwZSBDdXJzb3JQYWdlUGFyYW1zIH0gZnJvbSAnLi4vLi4vcGFnaW5hdGlvbic7XG5pbXBvcnQgeyBBc3Npc3RhbnRTdHJlYW0gfSBmcm9tICcuLi8uLi9saWIvQXNzaXN0YW50U3RyZWFtJztcblxuZXhwb3J0IGNsYXNzIEFzc2lzdGFudHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gYXNzaXN0YW50IHdpdGggYSBtb2RlbCBhbmQgaW5zdHJ1Y3Rpb25zLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0c1xuICAgKiBjb25zdCBhc3Npc3RhbnQgPSBhd2FpdCBjbGllbnQuYmV0YS5hc3Npc3RhbnRzLmNyZWF0ZSh7XG4gICAqICAgbW9kZWw6ICdncHQtNG8nLFxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICBjcmVhdGUoYm9keTogQXNzaXN0YW50Q3JlYXRlUGFyYW1zLCBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IENvcmUuQVBJUHJvbWlzZTxBc3Npc3RhbnQ+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9hc3Npc3RhbnRzJywge1xuICAgICAgYm9keSxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBhbiBhc3Npc3RhbnQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHRzXG4gICAqIGNvbnN0IGFzc2lzdGFudCA9IGF3YWl0IGNsaWVudC5iZXRhLmFzc2lzdGFudHMucmV0cmlldmUoXG4gICAqICAgJ2Fzc2lzdGFudF9pZCcsXG4gICAqICk7XG4gICAqIGBgYFxuICAgKi9cbiAgcmV0cmlldmUoYXNzaXN0YW50SWQ6IHN0cmluZywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkFQSVByb21pc2U8QXNzaXN0YW50PiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC9hc3Npc3RhbnRzLyR7YXNzaXN0YW50SWR9YCwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTW9kaWZpZXMgYW4gYXNzaXN0YW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0c1xuICAgKiBjb25zdCBhc3Npc3RhbnQgPSBhd2FpdCBjbGllbnQuYmV0YS5hc3Npc3RhbnRzLnVwZGF0ZShcbiAgICogICAnYXNzaXN0YW50X2lkJyxcbiAgICogKTtcbiAgICogYGBgXG4gICAqL1xuICB1cGRhdGUoXG4gICAgYXNzaXN0YW50SWQ6IHN0cmluZyxcbiAgICBib2R5OiBBc3Npc3RhbnRVcGRhdGVQYXJhbXMsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuQVBJUHJvbWlzZTxBc3Npc3RhbnQ+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC9hc3Npc3RhbnRzLyR7YXNzaXN0YW50SWR9YCwge1xuICAgICAgYm9keSxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsaXN0IG9mIGFzc2lzdGFudHMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHRzXG4gICAqIC8vIEF1dG9tYXRpY2FsbHkgZmV0Y2hlcyBtb3JlIHBhZ2VzIGFzIG5lZWRlZC5cbiAgICogZm9yIGF3YWl0IChjb25zdCBhc3Npc3RhbnQgb2YgY2xpZW50LmJldGEuYXNzaXN0YW50cy5saXN0KCkpIHtcbiAgICogICAvLyAuLi5cbiAgICogfVxuICAgKiBgYGBcbiAgICovXG4gIGxpc3QoXG4gICAgcXVlcnk/OiBBc3Npc3RhbnRMaXN0UGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLlBhZ2VQcm9taXNlPEFzc2lzdGFudHNQYWdlLCBBc3Npc3RhbnQ+O1xuICBsaXN0KG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5QYWdlUHJvbWlzZTxBc3Npc3RhbnRzUGFnZSwgQXNzaXN0YW50PjtcbiAgbGlzdChcbiAgICBxdWVyeTogQXNzaXN0YW50TGlzdFBhcmFtcyB8IENvcmUuUmVxdWVzdE9wdGlvbnMgPSB7fSxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5QYWdlUHJvbWlzZTxBc3Npc3RhbnRzUGFnZSwgQXNzaXN0YW50PiB7XG4gICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5saXN0KHt9LCBxdWVyeSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdCgnL2Fzc2lzdGFudHMnLCBBc3Npc3RhbnRzUGFnZSwge1xuICAgICAgcXVlcnksXG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYW4gYXNzaXN0YW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0c1xuICAgKiBjb25zdCBhc3Npc3RhbnREZWxldGVkID0gYXdhaXQgY2xpZW50LmJldGEuYXNzaXN0YW50cy5kZWwoXG4gICAqICAgJ2Fzc2lzdGFudF9pZCcsXG4gICAqICk7XG4gICAqIGBgYFxuICAgKi9cbiAgZGVsKGFzc2lzdGFudElkOiBzdHJpbmcsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5BUElQcm9taXNlPEFzc2lzdGFudERlbGV0ZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmRlbGV0ZShgL2Fzc2lzdGFudHMvJHthc3Npc3RhbnRJZH1gLCB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQXNzaXN0YW50c1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlPEFzc2lzdGFudD4ge31cblxuLyoqXG4gKiBSZXByZXNlbnRzIGFuIGBhc3Npc3RhbnRgIHRoYXQgY2FuIGNhbGwgdGhlIG1vZGVsIGFuZCB1c2UgdG9vbHMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXNzaXN0YW50IHtcbiAgLyoqXG4gICAqIFRoZSBpZGVudGlmaWVyLCB3aGljaCBjYW4gYmUgcmVmZXJlbmNlZCBpbiBBUEkgZW5kcG9pbnRzLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSBmb3Igd2hlbiB0aGUgYXNzaXN0YW50IHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZF9hdDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIGFzc2lzdGFudC4gVGhlIG1heGltdW0gbGVuZ3RoIGlzIDUxMiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgZGVzY3JpcHRpb246IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gaW5zdHJ1Y3Rpb25zIHRoYXQgdGhlIGFzc2lzdGFudCB1c2VzLiBUaGUgbWF4aW11bSBsZW5ndGggaXMgMjU2LDAwMFxuICAgKiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgaW5zdHJ1Y3Rpb25zOiBzdHJpbmcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgKlxuICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbWV0YWRhdGE6IFNoYXJlZC5NZXRhZGF0YSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIElEIG9mIHRoZSBtb2RlbCB0byB1c2UuIFlvdSBjYW4gdXNlIHRoZVxuICAgKiBbTGlzdCBtb2RlbHNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvbW9kZWxzL2xpc3QpIEFQSSB0b1xuICAgKiBzZWUgYWxsIG9mIHlvdXIgYXZhaWxhYmxlIG1vZGVscywgb3Igc2VlIG91clxuICAgKiBbTW9kZWwgb3ZlcnZpZXddKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL21vZGVscykgZm9yIGRlc2NyaXB0aW9ucyBvZlxuICAgKiB0aGVtLlxuICAgKi9cbiAgbW9kZWw6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGFzc2lzdGFudC4gVGhlIG1heGltdW0gbGVuZ3RoIGlzIDI1NiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbmFtZTogc3RyaW5nIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIG9iamVjdCB0eXBlLCB3aGljaCBpcyBhbHdheXMgYGFzc2lzdGFudGAuXG4gICAqL1xuICBvYmplY3Q6ICdhc3Npc3RhbnQnO1xuXG4gIC8qKlxuICAgKiBBIGxpc3Qgb2YgdG9vbCBlbmFibGVkIG9uIHRoZSBhc3Npc3RhbnQuIFRoZXJlIGNhbiBiZSBhIG1heGltdW0gb2YgMTI4IHRvb2xzIHBlclxuICAgKiBhc3Npc3RhbnQuIFRvb2xzIGNhbiBiZSBvZiB0eXBlcyBgY29kZV9pbnRlcnByZXRlcmAsIGBmaWxlX3NlYXJjaGAsIG9yXG4gICAqIGBmdW5jdGlvbmAuXG4gICAqL1xuICB0b29sczogQXJyYXk8QXNzaXN0YW50VG9vbD47XG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgZm9ybWF0IHRoYXQgdGhlIG1vZGVsIG11c3Qgb3V0cHV0LiBDb21wYXRpYmxlIHdpdGhcbiAgICogW0dQVC00b10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvbW9kZWxzI2dwdC00byksXG4gICAqIFtHUFQtNCBUdXJib10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvbW9kZWxzI2dwdC00LXR1cmJvLWFuZC1ncHQtNCksXG4gICAqIGFuZCBhbGwgR1BULTMuNSBUdXJibyBtb2RlbHMgc2luY2UgYGdwdC0zLjUtdHVyYm8tMTEwNmAuXG4gICAqXG4gICAqIFNldHRpbmcgdG8gYHsgXCJ0eXBlXCI6IFwianNvbl9zY2hlbWFcIiwgXCJqc29uX3NjaGVtYVwiOiB7Li4ufSB9YCBlbmFibGVzIFN0cnVjdHVyZWRcbiAgICogT3V0cHV0cyB3aGljaCBlbnN1cmVzIHRoZSBtb2RlbCB3aWxsIG1hdGNoIHlvdXIgc3VwcGxpZWQgSlNPTiBzY2hlbWEuIExlYXJuIG1vcmVcbiAgICogaW4gdGhlXG4gICAqIFtTdHJ1Y3R1cmVkIE91dHB1dHMgZ3VpZGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9zdHJ1Y3R1cmVkLW91dHB1dHMpLlxuICAgKlxuICAgKiBTZXR0aW5nIHRvIGB7IFwidHlwZVwiOiBcImpzb25fb2JqZWN0XCIgfWAgZW5hYmxlcyBKU09OIG1vZGUsIHdoaWNoIGVuc3VyZXMgdGhlXG4gICAqIG1lc3NhZ2UgdGhlIG1vZGVsIGdlbmVyYXRlcyBpcyB2YWxpZCBKU09OLlxuICAgKlxuICAgKiAqKkltcG9ydGFudDoqKiB3aGVuIHVzaW5nIEpTT04gbW9kZSwgeW91ICoqbXVzdCoqIGFsc28gaW5zdHJ1Y3QgdGhlIG1vZGVsIHRvXG4gICAqIHByb2R1Y2UgSlNPTiB5b3Vyc2VsZiB2aWEgYSBzeXN0ZW0gb3IgdXNlciBtZXNzYWdlLiBXaXRob3V0IHRoaXMsIHRoZSBtb2RlbCBtYXlcbiAgICogZ2VuZXJhdGUgYW4gdW5lbmRpbmcgc3RyZWFtIG9mIHdoaXRlc3BhY2UgdW50aWwgdGhlIGdlbmVyYXRpb24gcmVhY2hlcyB0aGUgdG9rZW5cbiAgICogbGltaXQsIHJlc3VsdGluZyBpbiBhIGxvbmctcnVubmluZyBhbmQgc2VlbWluZ2x5IFwic3R1Y2tcIiByZXF1ZXN0LiBBbHNvIG5vdGUgdGhhdFxuICAgKiB0aGUgbWVzc2FnZSBjb250ZW50IG1heSBiZSBwYXJ0aWFsbHkgY3V0IG9mZiBpZiBgZmluaXNoX3JlYXNvbj1cImxlbmd0aFwiYCwgd2hpY2hcbiAgICogaW5kaWNhdGVzIHRoZSBnZW5lcmF0aW9uIGV4Y2VlZGVkIGBtYXhfdG9rZW5zYCBvciB0aGUgY29udmVyc2F0aW9uIGV4Y2VlZGVkIHRoZVxuICAgKiBtYXggY29udGV4dCBsZW5ndGguXG4gICAqL1xuICByZXNwb25zZV9mb3JtYXQ/OiBUaHJlYWRzQVBJLkFzc2lzdGFudFJlc3BvbnNlRm9ybWF0T3B0aW9uIHwgbnVsbDtcblxuICAvKipcbiAgICogV2hhdCBzYW1wbGluZyB0ZW1wZXJhdHVyZSB0byB1c2UsIGJldHdlZW4gMCBhbmQgMi4gSGlnaGVyIHZhbHVlcyBsaWtlIDAuOCB3aWxsXG4gICAqIG1ha2UgdGhlIG91dHB1dCBtb3JlIHJhbmRvbSwgd2hpbGUgbG93ZXIgdmFsdWVzIGxpa2UgMC4yIHdpbGwgbWFrZSBpdCBtb3JlXG4gICAqIGZvY3VzZWQgYW5kIGRldGVybWluaXN0aWMuXG4gICAqL1xuICB0ZW1wZXJhdHVyZT86IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIHJlc291cmNlcyB0aGF0IGFyZSB1c2VkIGJ5IHRoZSBhc3Npc3RhbnQncyB0b29scy4gVGhlIHJlc291cmNlcyBhcmVcbiAgICogc3BlY2lmaWMgdG8gdGhlIHR5cGUgb2YgdG9vbC4gRm9yIGV4YW1wbGUsIHRoZSBgY29kZV9pbnRlcnByZXRlcmAgdG9vbCByZXF1aXJlc1xuICAgKiBhIGxpc3Qgb2YgZmlsZSBJRHMsIHdoaWxlIHRoZSBgZmlsZV9zZWFyY2hgIHRvb2wgcmVxdWlyZXMgYSBsaXN0IG9mIHZlY3RvciBzdG9yZVxuICAgKiBJRHMuXG4gICAqL1xuICB0b29sX3Jlc291cmNlcz86IEFzc2lzdGFudC5Ub29sUmVzb3VyY2VzIHwgbnVsbDtcblxuICAvKipcbiAgICogQW4gYWx0ZXJuYXRpdmUgdG8gc2FtcGxpbmcgd2l0aCB0ZW1wZXJhdHVyZSwgY2FsbGVkIG51Y2xldXMgc2FtcGxpbmcsIHdoZXJlIHRoZVxuICAgKiBtb2RlbCBjb25zaWRlcnMgdGhlIHJlc3VsdHMgb2YgdGhlIHRva2VucyB3aXRoIHRvcF9wIHByb2JhYmlsaXR5IG1hc3MuIFNvIDAuMVxuICAgKiBtZWFucyBvbmx5IHRoZSB0b2tlbnMgY29tcHJpc2luZyB0aGUgdG9wIDEwJSBwcm9iYWJpbGl0eSBtYXNzIGFyZSBjb25zaWRlcmVkLlxuICAgKlxuICAgKiBXZSBnZW5lcmFsbHkgcmVjb21tZW5kIGFsdGVyaW5nIHRoaXMgb3IgdGVtcGVyYXR1cmUgYnV0IG5vdCBib3RoLlxuICAgKi9cbiAgdG9wX3A/OiBudW1iZXIgfCBudWxsO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIEFzc2lzdGFudCB7XG4gIC8qKlxuICAgKiBBIHNldCBvZiByZXNvdXJjZXMgdGhhdCBhcmUgdXNlZCBieSB0aGUgYXNzaXN0YW50J3MgdG9vbHMuIFRoZSByZXNvdXJjZXMgYXJlXG4gICAqIHNwZWNpZmljIHRvIHRoZSB0eXBlIG9mIHRvb2wuIEZvciBleGFtcGxlLCB0aGUgYGNvZGVfaW50ZXJwcmV0ZXJgIHRvb2wgcmVxdWlyZXNcbiAgICogYSBsaXN0IG9mIGZpbGUgSURzLCB3aGlsZSB0aGUgYGZpbGVfc2VhcmNoYCB0b29sIHJlcXVpcmVzIGEgbGlzdCBvZiB2ZWN0b3Igc3RvcmVcbiAgICogSURzLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUb29sUmVzb3VyY2VzIHtcbiAgICBjb2RlX2ludGVycHJldGVyPzogVG9vbFJlc291cmNlcy5Db2RlSW50ZXJwcmV0ZXI7XG5cbiAgICBmaWxlX3NlYXJjaD86IFRvb2xSZXNvdXJjZXMuRmlsZVNlYXJjaDtcbiAgfVxuXG4gIGV4cG9ydCBuYW1lc3BhY2UgVG9vbFJlc291cmNlcyB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBDb2RlSW50ZXJwcmV0ZXIge1xuICAgICAgLyoqXG4gICAgICAgKiBBIGxpc3Qgb2YgW2ZpbGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvZmlsZXMpIElEcyBtYWRlXG4gICAgICAgKiBhdmFpbGFibGUgdG8gdGhlIGBjb2RlX2ludGVycHJldGVyYGAgdG9vbC4gVGhlcmUgY2FuIGJlIGEgbWF4aW11bSBvZiAyMCBmaWxlc1xuICAgICAgICogYXNzb2NpYXRlZCB3aXRoIHRoZSB0b29sLlxuICAgICAgICovXG4gICAgICBmaWxlX2lkcz86IEFycmF5PHN0cmluZz47XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBGaWxlU2VhcmNoIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIElEIG9mIHRoZVxuICAgICAgICogW3ZlY3RvciBzdG9yZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS92ZWN0b3Itc3RvcmVzL29iamVjdClcbiAgICAgICAqIGF0dGFjaGVkIHRvIHRoaXMgYXNzaXN0YW50LiBUaGVyZSBjYW4gYmUgYSBtYXhpbXVtIG9mIDEgdmVjdG9yIHN0b3JlIGF0dGFjaGVkIHRvXG4gICAgICAgKiB0aGUgYXNzaXN0YW50LlxuICAgICAgICovXG4gICAgICB2ZWN0b3Jfc3RvcmVfaWRzPzogQXJyYXk8c3RyaW5nPjtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBc3Npc3RhbnREZWxldGVkIHtcbiAgaWQ6IHN0cmluZztcblxuICBkZWxldGVkOiBib29sZWFuO1xuXG4gIG9iamVjdDogJ2Fzc2lzdGFudC5kZWxldGVkJztcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGFuIGV2ZW50IGVtaXR0ZWQgd2hlbiBzdHJlYW1pbmcgYSBSdW4uXG4gKlxuICogRWFjaCBldmVudCBpbiBhIHNlcnZlci1zZW50IGV2ZW50cyBzdHJlYW0gaGFzIGFuIGBldmVudGAgYW5kIGBkYXRhYCBwcm9wZXJ0eTpcbiAqXG4gKiBgYGBcbiAqIGV2ZW50OiB0aHJlYWQuY3JlYXRlZFxuICogZGF0YToge1wiaWRcIjogXCJ0aHJlYWRfMTIzXCIsIFwib2JqZWN0XCI6IFwidGhyZWFkXCIsIC4uLn1cbiAqIGBgYFxuICpcbiAqIFdlIGVtaXQgZXZlbnRzIHdoZW5ldmVyIGEgbmV3IG9iamVjdCBpcyBjcmVhdGVkLCB0cmFuc2l0aW9ucyB0byBhIG5ldyBzdGF0ZSwgb3JcbiAqIGlzIGJlaW5nIHN0cmVhbWVkIGluIHBhcnRzIChkZWx0YXMpLiBGb3IgZXhhbXBsZSwgd2UgZW1pdCBgdGhyZWFkLnJ1bi5jcmVhdGVkYFxuICogd2hlbiBhIG5ldyBydW4gaXMgY3JlYXRlZCwgYHRocmVhZC5ydW4uY29tcGxldGVkYCB3aGVuIGEgcnVuIGNvbXBsZXRlcywgYW5kIHNvXG4gKiBvbi4gV2hlbiBhbiBBc3Npc3RhbnQgY2hvb3NlcyB0byBjcmVhdGUgYSBtZXNzYWdlIGR1cmluZyBhIHJ1biwgd2UgZW1pdCBhXG4gKiBgdGhyZWFkLm1lc3NhZ2UuY3JlYXRlZCBldmVudGAsIGEgYHRocmVhZC5tZXNzYWdlLmluX3Byb2dyZXNzYCBldmVudCwgbWFueVxuICogYHRocmVhZC5tZXNzYWdlLmRlbHRhYCBldmVudHMsIGFuZCBmaW5hbGx5IGEgYHRocmVhZC5tZXNzYWdlLmNvbXBsZXRlZGAgZXZlbnQuXG4gKlxuICogV2UgbWF5IGFkZCBhZGRpdGlvbmFsIGV2ZW50cyBvdmVyIHRpbWUsIHNvIHdlIHJlY29tbWVuZCBoYW5kbGluZyB1bmtub3duIGV2ZW50c1xuICogZ3JhY2VmdWxseSBpbiB5b3VyIGNvZGUuIFNlZSB0aGVcbiAqIFtBc3Npc3RhbnRzIEFQSSBxdWlja3N0YXJ0XShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hc3Npc3RhbnRzL292ZXJ2aWV3KVxuICogdG8gbGVhcm4gaG93IHRvIGludGVncmF0ZSB0aGUgQXNzaXN0YW50cyBBUEkgd2l0aCBzdHJlYW1pbmcuXG4gKi9cbmV4cG9ydCB0eXBlIEFzc2lzdGFudFN0cmVhbUV2ZW50ID1cbiAgfCBBc3Npc3RhbnRTdHJlYW1FdmVudC5UaHJlYWRDcmVhdGVkXG4gIHwgQXNzaXN0YW50U3RyZWFtRXZlbnQuVGhyZWFkUnVuQ3JlYXRlZFxuICB8IEFzc2lzdGFudFN0cmVhbUV2ZW50LlRocmVhZFJ1blF1ZXVlZFxuICB8IEFzc2lzdGFudFN0cmVhbUV2ZW50LlRocmVhZFJ1bkluUHJvZ3Jlc3NcbiAgfCBBc3Npc3RhbnRTdHJlYW1FdmVudC5UaHJlYWRSdW5SZXF1aXJlc0FjdGlvblxuICB8IEFzc2lzdGFudFN0cmVhbUV2ZW50LlRocmVhZFJ1bkNvbXBsZXRlZFxuICB8IEFzc2lzdGFudFN0cmVhbUV2ZW50LlRocmVhZFJ1bkluY29tcGxldGVcbiAgfCBBc3Npc3RhbnRTdHJlYW1FdmVudC5UaHJlYWRSdW5GYWlsZWRcbiAgfCBBc3Npc3RhbnRTdHJlYW1FdmVudC5UaHJlYWRSdW5DYW5jZWxsaW5nXG4gIHwgQXNzaXN0YW50U3RyZWFtRXZlbnQuVGhyZWFkUnVuQ2FuY2VsbGVkXG4gIHwgQXNzaXN0YW50U3RyZWFtRXZlbnQuVGhyZWFkUnVuRXhwaXJlZFxuICB8IEFzc2lzdGFudFN0cmVhbUV2ZW50LlRocmVhZFJ1blN0ZXBDcmVhdGVkXG4gIHwgQXNzaXN0YW50U3RyZWFtRXZlbnQuVGhyZWFkUnVuU3RlcEluUHJvZ3Jlc3NcbiAgfCBBc3Npc3RhbnRTdHJlYW1FdmVudC5UaHJlYWRSdW5TdGVwRGVsdGFcbiAgfCBBc3Npc3RhbnRTdHJlYW1FdmVudC5UaHJlYWRSdW5TdGVwQ29tcGxldGVkXG4gIHwgQXNzaXN0YW50U3RyZWFtRXZlbnQuVGhyZWFkUnVuU3RlcEZhaWxlZFxuICB8IEFzc2lzdGFudFN0cmVhbUV2ZW50LlRocmVhZFJ1blN0ZXBDYW5jZWxsZWRcbiAgfCBBc3Npc3RhbnRTdHJlYW1FdmVudC5UaHJlYWRSdW5TdGVwRXhwaXJlZFxuICB8IEFzc2lzdGFudFN0cmVhbUV2ZW50LlRocmVhZE1lc3NhZ2VDcmVhdGVkXG4gIHwgQXNzaXN0YW50U3RyZWFtRXZlbnQuVGhyZWFkTWVzc2FnZUluUHJvZ3Jlc3NcbiAgfCBBc3Npc3RhbnRTdHJlYW1FdmVudC5UaHJlYWRNZXNzYWdlRGVsdGFcbiAgfCBBc3Npc3RhbnRTdHJlYW1FdmVudC5UaHJlYWRNZXNzYWdlQ29tcGxldGVkXG4gIHwgQXNzaXN0YW50U3RyZWFtRXZlbnQuVGhyZWFkTWVzc2FnZUluY29tcGxldGVcbiAgfCBBc3Npc3RhbnRTdHJlYW1FdmVudC5FcnJvckV2ZW50O1xuXG5leHBvcnQgbmFtZXNwYWNlIEFzc2lzdGFudFN0cmVhbUV2ZW50IHtcbiAgLyoqXG4gICAqIE9jY3VycyB3aGVuIGEgbmV3XG4gICAqIFt0aHJlYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdGhyZWFkcy9vYmplY3QpIGlzXG4gICAqIGNyZWF0ZWQuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRocmVhZENyZWF0ZWQge1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYSB0aHJlYWQgdGhhdCBjb250YWluc1xuICAgICAqIFttZXNzYWdlc10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9tZXNzYWdlcykuXG4gICAgICovXG4gICAgZGF0YTogVGhyZWFkc0FQSS5UaHJlYWQ7XG5cbiAgICBldmVudDogJ3RocmVhZC5jcmVhdGVkJztcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdG8gZW5hYmxlIGlucHV0IGF1ZGlvIHRyYW5zY3JpcHRpb24uXG4gICAgICovXG4gICAgZW5hYmxlZD86IGJvb2xlYW47XG4gIH1cblxuICAvKipcbiAgICogT2NjdXJzIHdoZW4gYSBuZXdcbiAgICogW3J1bl0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9ydW5zL29iamVjdCkgaXMgY3JlYXRlZC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkUnVuQ3JlYXRlZCB7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhbiBleGVjdXRpb24gcnVuIG9uIGFcbiAgICAgKiBbdGhyZWFkXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3RocmVhZHMpLlxuICAgICAqL1xuICAgIGRhdGE6IFJ1bnNBUEkuUnVuO1xuXG4gICAgZXZlbnQ6ICd0aHJlYWQucnVuLmNyZWF0ZWQnO1xuICB9XG5cbiAgLyoqXG4gICAqIE9jY3VycyB3aGVuIGEgW3J1bl0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9ydW5zL29iamVjdClcbiAgICogbW92ZXMgdG8gYSBgcXVldWVkYCBzdGF0dXMuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRocmVhZFJ1blF1ZXVlZCB7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhbiBleGVjdXRpb24gcnVuIG9uIGFcbiAgICAgKiBbdGhyZWFkXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3RocmVhZHMpLlxuICAgICAqL1xuICAgIGRhdGE6IFJ1bnNBUEkuUnVuO1xuXG4gICAgZXZlbnQ6ICd0aHJlYWQucnVuLnF1ZXVlZCc7XG4gIH1cblxuICAvKipcbiAgICogT2NjdXJzIHdoZW4gYSBbcnVuXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3J1bnMvb2JqZWN0KVxuICAgKiBtb3ZlcyB0byBhbiBgaW5fcHJvZ3Jlc3NgIHN0YXR1cy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkUnVuSW5Qcm9ncmVzcyB7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhbiBleGVjdXRpb24gcnVuIG9uIGFcbiAgICAgKiBbdGhyZWFkXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3RocmVhZHMpLlxuICAgICAqL1xuICAgIGRhdGE6IFJ1bnNBUEkuUnVuO1xuXG4gICAgZXZlbnQ6ICd0aHJlYWQucnVuLmluX3Byb2dyZXNzJztcbiAgfVxuXG4gIC8qKlxuICAgKiBPY2N1cnMgd2hlbiBhIFtydW5dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvcnVucy9vYmplY3QpXG4gICAqIG1vdmVzIHRvIGEgYHJlcXVpcmVzX2FjdGlvbmAgc3RhdHVzLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUaHJlYWRSdW5SZXF1aXJlc0FjdGlvbiB7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhbiBleGVjdXRpb24gcnVuIG9uIGFcbiAgICAgKiBbdGhyZWFkXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3RocmVhZHMpLlxuICAgICAqL1xuICAgIGRhdGE6IFJ1bnNBUEkuUnVuO1xuXG4gICAgZXZlbnQ6ICd0aHJlYWQucnVuLnJlcXVpcmVzX2FjdGlvbic7XG4gIH1cblxuICAvKipcbiAgICogT2NjdXJzIHdoZW4gYSBbcnVuXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3J1bnMvb2JqZWN0KVxuICAgKiBpcyBjb21wbGV0ZWQuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRocmVhZFJ1bkNvbXBsZXRlZCB7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhbiBleGVjdXRpb24gcnVuIG9uIGFcbiAgICAgKiBbdGhyZWFkXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3RocmVhZHMpLlxuICAgICAqL1xuICAgIGRhdGE6IFJ1bnNBUEkuUnVuO1xuXG4gICAgZXZlbnQ6ICd0aHJlYWQucnVuLmNvbXBsZXRlZCc7XG4gIH1cblxuICAvKipcbiAgICogT2NjdXJzIHdoZW4gYSBbcnVuXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3J1bnMvb2JqZWN0KVxuICAgKiBlbmRzIHdpdGggc3RhdHVzIGBpbmNvbXBsZXRlYC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkUnVuSW5jb21wbGV0ZSB7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhbiBleGVjdXRpb24gcnVuIG9uIGFcbiAgICAgKiBbdGhyZWFkXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3RocmVhZHMpLlxuICAgICAqL1xuICAgIGRhdGE6IFJ1bnNBUEkuUnVuO1xuXG4gICAgZXZlbnQ6ICd0aHJlYWQucnVuLmluY29tcGxldGUnO1xuICB9XG5cbiAgLyoqXG4gICAqIE9jY3VycyB3aGVuIGEgW3J1bl0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9ydW5zL29iamVjdClcbiAgICogZmFpbHMuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRocmVhZFJ1bkZhaWxlZCB7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhbiBleGVjdXRpb24gcnVuIG9uIGFcbiAgICAgKiBbdGhyZWFkXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3RocmVhZHMpLlxuICAgICAqL1xuICAgIGRhdGE6IFJ1bnNBUEkuUnVuO1xuXG4gICAgZXZlbnQ6ICd0aHJlYWQucnVuLmZhaWxlZCc7XG4gIH1cblxuICAvKipcbiAgICogT2NjdXJzIHdoZW4gYSBbcnVuXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3J1bnMvb2JqZWN0KVxuICAgKiBtb3ZlcyB0byBhIGBjYW5jZWxsaW5nYCBzdGF0dXMuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRocmVhZFJ1bkNhbmNlbGxpbmcge1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYW4gZXhlY3V0aW9uIHJ1biBvbiBhXG4gICAgICogW3RocmVhZF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS90aHJlYWRzKS5cbiAgICAgKi9cbiAgICBkYXRhOiBSdW5zQVBJLlJ1bjtcblxuICAgIGV2ZW50OiAndGhyZWFkLnJ1bi5jYW5jZWxsaW5nJztcbiAgfVxuXG4gIC8qKlxuICAgKiBPY2N1cnMgd2hlbiBhIFtydW5dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvcnVucy9vYmplY3QpXG4gICAqIGlzIGNhbmNlbGxlZC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkUnVuQ2FuY2VsbGVkIHtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGFuIGV4ZWN1dGlvbiBydW4gb24gYVxuICAgICAqIFt0aHJlYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdGhyZWFkcykuXG4gICAgICovXG4gICAgZGF0YTogUnVuc0FQSS5SdW47XG5cbiAgICBldmVudDogJ3RocmVhZC5ydW4uY2FuY2VsbGVkJztcbiAgfVxuXG4gIC8qKlxuICAgKiBPY2N1cnMgd2hlbiBhIFtydW5dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvcnVucy9vYmplY3QpXG4gICAqIGV4cGlyZXMuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRocmVhZFJ1bkV4cGlyZWQge1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYW4gZXhlY3V0aW9uIHJ1biBvbiBhXG4gICAgICogW3RocmVhZF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS90aHJlYWRzKS5cbiAgICAgKi9cbiAgICBkYXRhOiBSdW5zQVBJLlJ1bjtcblxuICAgIGV2ZW50OiAndGhyZWFkLnJ1bi5leHBpcmVkJztcbiAgfVxuXG4gIC8qKlxuICAgKiBPY2N1cnMgd2hlbiBhXG4gICAqIFtydW4gc3RlcF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9ydW4tc3RlcHMvc3RlcC1vYmplY3QpXG4gICAqIGlzIGNyZWF0ZWQuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRocmVhZFJ1blN0ZXBDcmVhdGVkIHtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGEgc3RlcCBpbiBleGVjdXRpb24gb2YgYSBydW4uXG4gICAgICovXG4gICAgZGF0YTogU3RlcHNBUEkuUnVuU3RlcDtcblxuICAgIGV2ZW50OiAndGhyZWFkLnJ1bi5zdGVwLmNyZWF0ZWQnO1xuICB9XG5cbiAgLyoqXG4gICAqIE9jY3VycyB3aGVuIGFcbiAgICogW3J1biBzdGVwXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3J1bi1zdGVwcy9zdGVwLW9iamVjdClcbiAgICogbW92ZXMgdG8gYW4gYGluX3Byb2dyZXNzYCBzdGF0ZS5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkUnVuU3RlcEluUHJvZ3Jlc3Mge1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYSBzdGVwIGluIGV4ZWN1dGlvbiBvZiBhIHJ1bi5cbiAgICAgKi9cbiAgICBkYXRhOiBTdGVwc0FQSS5SdW5TdGVwO1xuXG4gICAgZXZlbnQ6ICd0aHJlYWQucnVuLnN0ZXAuaW5fcHJvZ3Jlc3MnO1xuICB9XG5cbiAgLyoqXG4gICAqIE9jY3VycyB3aGVuIHBhcnRzIG9mIGFcbiAgICogW3J1biBzdGVwXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3J1bi1zdGVwcy9zdGVwLW9iamVjdClcbiAgICogYXJlIGJlaW5nIHN0cmVhbWVkLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUaHJlYWRSdW5TdGVwRGVsdGEge1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYSBydW4gc3RlcCBkZWx0YSBpLmUuIGFueSBjaGFuZ2VkIGZpZWxkcyBvbiBhIHJ1biBzdGVwIGR1cmluZ1xuICAgICAqIHN0cmVhbWluZy5cbiAgICAgKi9cbiAgICBkYXRhOiBTdGVwc0FQSS5SdW5TdGVwRGVsdGFFdmVudDtcblxuICAgIGV2ZW50OiAndGhyZWFkLnJ1bi5zdGVwLmRlbHRhJztcbiAgfVxuXG4gIC8qKlxuICAgKiBPY2N1cnMgd2hlbiBhXG4gICAqIFtydW4gc3RlcF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9ydW4tc3RlcHMvc3RlcC1vYmplY3QpXG4gICAqIGlzIGNvbXBsZXRlZC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkUnVuU3RlcENvbXBsZXRlZCB7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhIHN0ZXAgaW4gZXhlY3V0aW9uIG9mIGEgcnVuLlxuICAgICAqL1xuICAgIGRhdGE6IFN0ZXBzQVBJLlJ1blN0ZXA7XG5cbiAgICBldmVudDogJ3RocmVhZC5ydW4uc3RlcC5jb21wbGV0ZWQnO1xuICB9XG5cbiAgLyoqXG4gICAqIE9jY3VycyB3aGVuIGFcbiAgICogW3J1biBzdGVwXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3J1bi1zdGVwcy9zdGVwLW9iamVjdClcbiAgICogZmFpbHMuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRocmVhZFJ1blN0ZXBGYWlsZWQge1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYSBzdGVwIGluIGV4ZWN1dGlvbiBvZiBhIHJ1bi5cbiAgICAgKi9cbiAgICBkYXRhOiBTdGVwc0FQSS5SdW5TdGVwO1xuXG4gICAgZXZlbnQ6ICd0aHJlYWQucnVuLnN0ZXAuZmFpbGVkJztcbiAgfVxuXG4gIC8qKlxuICAgKiBPY2N1cnMgd2hlbiBhXG4gICAqIFtydW4gc3RlcF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9ydW4tc3RlcHMvc3RlcC1vYmplY3QpXG4gICAqIGlzIGNhbmNlbGxlZC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkUnVuU3RlcENhbmNlbGxlZCB7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhIHN0ZXAgaW4gZXhlY3V0aW9uIG9mIGEgcnVuLlxuICAgICAqL1xuICAgIGRhdGE6IFN0ZXBzQVBJLlJ1blN0ZXA7XG5cbiAgICBldmVudDogJ3RocmVhZC5ydW4uc3RlcC5jYW5jZWxsZWQnO1xuICB9XG5cbiAgLyoqXG4gICAqIE9jY3VycyB3aGVuIGFcbiAgICogW3J1biBzdGVwXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3J1bi1zdGVwcy9zdGVwLW9iamVjdClcbiAgICogZXhwaXJlcy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkUnVuU3RlcEV4cGlyZWQge1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYSBzdGVwIGluIGV4ZWN1dGlvbiBvZiBhIHJ1bi5cbiAgICAgKi9cbiAgICBkYXRhOiBTdGVwc0FQSS5SdW5TdGVwO1xuXG4gICAgZXZlbnQ6ICd0aHJlYWQucnVuLnN0ZXAuZXhwaXJlZCc7XG4gIH1cblxuICAvKipcbiAgICogT2NjdXJzIHdoZW4gYVxuICAgKiBbbWVzc2FnZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9tZXNzYWdlcy9vYmplY3QpIGlzXG4gICAqIGNyZWF0ZWQuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRocmVhZE1lc3NhZ2VDcmVhdGVkIHtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGEgbWVzc2FnZSB3aXRoaW4gYVxuICAgICAqIFt0aHJlYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdGhyZWFkcykuXG4gICAgICovXG4gICAgZGF0YTogTWVzc2FnZXNBUEkuTWVzc2FnZTtcblxuICAgIGV2ZW50OiAndGhyZWFkLm1lc3NhZ2UuY3JlYXRlZCc7XG4gIH1cblxuICAvKipcbiAgICogT2NjdXJzIHdoZW4gYVxuICAgKiBbbWVzc2FnZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9tZXNzYWdlcy9vYmplY3QpIG1vdmVzXG4gICAqIHRvIGFuIGBpbl9wcm9ncmVzc2Agc3RhdGUuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRocmVhZE1lc3NhZ2VJblByb2dyZXNzIHtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGEgbWVzc2FnZSB3aXRoaW4gYVxuICAgICAqIFt0aHJlYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdGhyZWFkcykuXG4gICAgICovXG4gICAgZGF0YTogTWVzc2FnZXNBUEkuTWVzc2FnZTtcblxuICAgIGV2ZW50OiAndGhyZWFkLm1lc3NhZ2UuaW5fcHJvZ3Jlc3MnO1xuICB9XG5cbiAgLyoqXG4gICAqIE9jY3VycyB3aGVuIHBhcnRzIG9mIGFcbiAgICogW01lc3NhZ2VdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvbWVzc2FnZXMvb2JqZWN0KSBhcmVcbiAgICogYmVpbmcgc3RyZWFtZWQuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRocmVhZE1lc3NhZ2VEZWx0YSB7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhIG1lc3NhZ2UgZGVsdGEgaS5lLiBhbnkgY2hhbmdlZCBmaWVsZHMgb24gYSBtZXNzYWdlIGR1cmluZ1xuICAgICAqIHN0cmVhbWluZy5cbiAgICAgKi9cbiAgICBkYXRhOiBNZXNzYWdlc0FQSS5NZXNzYWdlRGVsdGFFdmVudDtcblxuICAgIGV2ZW50OiAndGhyZWFkLm1lc3NhZ2UuZGVsdGEnO1xuICB9XG5cbiAgLyoqXG4gICAqIE9jY3VycyB3aGVuIGFcbiAgICogW21lc3NhZ2VdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvbWVzc2FnZXMvb2JqZWN0KSBpc1xuICAgKiBjb21wbGV0ZWQuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRocmVhZE1lc3NhZ2VDb21wbGV0ZWQge1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYSBtZXNzYWdlIHdpdGhpbiBhXG4gICAgICogW3RocmVhZF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS90aHJlYWRzKS5cbiAgICAgKi9cbiAgICBkYXRhOiBNZXNzYWdlc0FQSS5NZXNzYWdlO1xuXG4gICAgZXZlbnQ6ICd0aHJlYWQubWVzc2FnZS5jb21wbGV0ZWQnO1xuICB9XG5cbiAgLyoqXG4gICAqIE9jY3VycyB3aGVuIGFcbiAgICogW21lc3NhZ2VdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvbWVzc2FnZXMvb2JqZWN0KSBlbmRzXG4gICAqIGJlZm9yZSBpdCBpcyBjb21wbGV0ZWQuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRocmVhZE1lc3NhZ2VJbmNvbXBsZXRlIHtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGEgbWVzc2FnZSB3aXRoaW4gYVxuICAgICAqIFt0aHJlYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdGhyZWFkcykuXG4gICAgICovXG4gICAgZGF0YTogTWVzc2FnZXNBUEkuTWVzc2FnZTtcblxuICAgIGV2ZW50OiAndGhyZWFkLm1lc3NhZ2UuaW5jb21wbGV0ZSc7XG4gIH1cblxuICAvKipcbiAgICogT2NjdXJzIHdoZW4gYW5cbiAgICogW2Vycm9yXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvZXJyb3ItY29kZXMjYXBpLWVycm9ycykgb2NjdXJzLlxuICAgKiBUaGlzIGNhbiBoYXBwZW4gZHVlIHRvIGFuIGludGVybmFsIHNlcnZlciBlcnJvciBvciBhIHRpbWVvdXQuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIEVycm9yRXZlbnQge1xuICAgIGRhdGE6IFNoYXJlZC5FcnJvck9iamVjdDtcblxuICAgIGV2ZW50OiAnZXJyb3InO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIEFzc2lzdGFudFRvb2wgPSBDb2RlSW50ZXJwcmV0ZXJUb29sIHwgRmlsZVNlYXJjaFRvb2wgfCBGdW5jdGlvblRvb2w7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29kZUludGVycHJldGVyVG9vbCB7XG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0b29sIGJlaW5nIGRlZmluZWQ6IGBjb2RlX2ludGVycHJldGVyYFxuICAgKi9cbiAgdHlwZTogJ2NvZGVfaW50ZXJwcmV0ZXInO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVTZWFyY2hUb29sIHtcbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRvb2wgYmVpbmcgZGVmaW5lZDogYGZpbGVfc2VhcmNoYFxuICAgKi9cbiAgdHlwZTogJ2ZpbGVfc2VhcmNoJztcblxuICAvKipcbiAgICogT3ZlcnJpZGVzIGZvciB0aGUgZmlsZSBzZWFyY2ggdG9vbC5cbiAgICovXG4gIGZpbGVfc2VhcmNoPzogRmlsZVNlYXJjaFRvb2wuRmlsZVNlYXJjaDtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBGaWxlU2VhcmNoVG9vbCB7XG4gIC8qKlxuICAgKiBPdmVycmlkZXMgZm9yIHRoZSBmaWxlIHNlYXJjaCB0b29sLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBGaWxlU2VhcmNoIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgcmVzdWx0cyB0aGUgZmlsZSBzZWFyY2ggdG9vbCBzaG91bGQgb3V0cHV0LiBUaGUgZGVmYXVsdCBpc1xuICAgICAqIDIwIGZvciBgZ3B0LTQqYCBtb2RlbHMgYW5kIDUgZm9yIGBncHQtMy41LXR1cmJvYC4gVGhpcyBudW1iZXIgc2hvdWxkIGJlIGJldHdlZW5cbiAgICAgKiAxIGFuZCA1MCBpbmNsdXNpdmUuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgdGhlIGZpbGUgc2VhcmNoIHRvb2wgbWF5IG91dHB1dCBmZXdlciB0aGFuIGBtYXhfbnVtX3Jlc3VsdHNgIHJlc3VsdHMuXG4gICAgICogU2VlIHRoZVxuICAgICAqIFtmaWxlIHNlYXJjaCB0b29sIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2Fzc2lzdGFudHMvdG9vbHMvZmlsZS1zZWFyY2gjY3VzdG9taXppbmctZmlsZS1zZWFyY2gtc2V0dGluZ3MpXG4gICAgICogZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICovXG4gICAgbWF4X251bV9yZXN1bHRzPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJhbmtpbmcgb3B0aW9ucyBmb3IgdGhlIGZpbGUgc2VhcmNoLiBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgZmlsZSBzZWFyY2ggdG9vbFxuICAgICAqIHdpbGwgdXNlIHRoZSBgYXV0b2AgcmFua2VyIGFuZCBhIHNjb3JlX3RocmVzaG9sZCBvZiAwLlxuICAgICAqXG4gICAgICogU2VlIHRoZVxuICAgICAqIFtmaWxlIHNlYXJjaCB0b29sIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2Fzc2lzdGFudHMvdG9vbHMvZmlsZS1zZWFyY2gjY3VzdG9taXppbmctZmlsZS1zZWFyY2gtc2V0dGluZ3MpXG4gICAgICogZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICovXG4gICAgcmFua2luZ19vcHRpb25zPzogRmlsZVNlYXJjaC5SYW5raW5nT3B0aW9ucztcbiAgfVxuXG4gIGV4cG9ydCBuYW1lc3BhY2UgRmlsZVNlYXJjaCB7XG4gICAgLyoqXG4gICAgICogVGhlIHJhbmtpbmcgb3B0aW9ucyBmb3IgdGhlIGZpbGUgc2VhcmNoLiBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgZmlsZSBzZWFyY2ggdG9vbFxuICAgICAqIHdpbGwgdXNlIHRoZSBgYXV0b2AgcmFua2VyIGFuZCBhIHNjb3JlX3RocmVzaG9sZCBvZiAwLlxuICAgICAqXG4gICAgICogU2VlIHRoZVxuICAgICAqIFtmaWxlIHNlYXJjaCB0b29sIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2Fzc2lzdGFudHMvdG9vbHMvZmlsZS1zZWFyY2gjY3VzdG9taXppbmctZmlsZS1zZWFyY2gtc2V0dGluZ3MpXG4gICAgICogZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBSYW5raW5nT3B0aW9ucyB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBzY29yZSB0aHJlc2hvbGQgZm9yIHRoZSBmaWxlIHNlYXJjaC4gQWxsIHZhbHVlcyBtdXN0IGJlIGEgZmxvYXRpbmcgcG9pbnRcbiAgICAgICAqIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEuXG4gICAgICAgKi9cbiAgICAgIHNjb3JlX3RocmVzaG9sZDogbnVtYmVyO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSByYW5rZXIgdG8gdXNlIGZvciB0aGUgZmlsZSBzZWFyY2guIElmIG5vdCBzcGVjaWZpZWQgd2lsbCB1c2UgdGhlIGBhdXRvYFxuICAgICAgICogcmFua2VyLlxuICAgICAgICovXG4gICAgICByYW5rZXI/OiAnYXV0bycgfCAnZGVmYXVsdF8yMDI0XzA4XzIxJztcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBGdW5jdGlvblRvb2wge1xuICBmdW5jdGlvbjogU2hhcmVkLkZ1bmN0aW9uRGVmaW5pdGlvbjtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdG9vbCBiZWluZyBkZWZpbmVkOiBgZnVuY3Rpb25gXG4gICAqL1xuICB0eXBlOiAnZnVuY3Rpb24nO1xufVxuXG4vKipcbiAqIE9jY3VycyB3aGVuIGFcbiAqIFttZXNzYWdlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL21lc3NhZ2VzL29iamVjdCkgaXNcbiAqIGNyZWF0ZWQuXG4gKi9cbmV4cG9ydCB0eXBlIE1lc3NhZ2VTdHJlYW1FdmVudCA9XG4gIHwgTWVzc2FnZVN0cmVhbUV2ZW50LlRocmVhZE1lc3NhZ2VDcmVhdGVkXG4gIHwgTWVzc2FnZVN0cmVhbUV2ZW50LlRocmVhZE1lc3NhZ2VJblByb2dyZXNzXG4gIHwgTWVzc2FnZVN0cmVhbUV2ZW50LlRocmVhZE1lc3NhZ2VEZWx0YVxuICB8IE1lc3NhZ2VTdHJlYW1FdmVudC5UaHJlYWRNZXNzYWdlQ29tcGxldGVkXG4gIHwgTWVzc2FnZVN0cmVhbUV2ZW50LlRocmVhZE1lc3NhZ2VJbmNvbXBsZXRlO1xuXG5leHBvcnQgbmFtZXNwYWNlIE1lc3NhZ2VTdHJlYW1FdmVudCB7XG4gIC8qKlxuICAgKiBPY2N1cnMgd2hlbiBhXG4gICAqIFttZXNzYWdlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL21lc3NhZ2VzL29iamVjdCkgaXNcbiAgICogY3JlYXRlZC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkTWVzc2FnZUNyZWF0ZWQge1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYSBtZXNzYWdlIHdpdGhpbiBhXG4gICAgICogW3RocmVhZF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS90aHJlYWRzKS5cbiAgICAgKi9cbiAgICBkYXRhOiBNZXNzYWdlc0FQSS5NZXNzYWdlO1xuXG4gICAgZXZlbnQ6ICd0aHJlYWQubWVzc2FnZS5jcmVhdGVkJztcbiAgfVxuXG4gIC8qKlxuICAgKiBPY2N1cnMgd2hlbiBhXG4gICAqIFttZXNzYWdlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL21lc3NhZ2VzL29iamVjdCkgbW92ZXNcbiAgICogdG8gYW4gYGluX3Byb2dyZXNzYCBzdGF0ZS5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkTWVzc2FnZUluUHJvZ3Jlc3Mge1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYSBtZXNzYWdlIHdpdGhpbiBhXG4gICAgICogW3RocmVhZF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS90aHJlYWRzKS5cbiAgICAgKi9cbiAgICBkYXRhOiBNZXNzYWdlc0FQSS5NZXNzYWdlO1xuXG4gICAgZXZlbnQ6ICd0aHJlYWQubWVzc2FnZS5pbl9wcm9ncmVzcyc7XG4gIH1cblxuICAvKipcbiAgICogT2NjdXJzIHdoZW4gcGFydHMgb2YgYVxuICAgKiBbTWVzc2FnZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9tZXNzYWdlcy9vYmplY3QpIGFyZVxuICAgKiBiZWluZyBzdHJlYW1lZC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkTWVzc2FnZURlbHRhIHtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGEgbWVzc2FnZSBkZWx0YSBpLmUuIGFueSBjaGFuZ2VkIGZpZWxkcyBvbiBhIG1lc3NhZ2UgZHVyaW5nXG4gICAgICogc3RyZWFtaW5nLlxuICAgICAqL1xuICAgIGRhdGE6IE1lc3NhZ2VzQVBJLk1lc3NhZ2VEZWx0YUV2ZW50O1xuXG4gICAgZXZlbnQ6ICd0aHJlYWQubWVzc2FnZS5kZWx0YSc7XG4gIH1cblxuICAvKipcbiAgICogT2NjdXJzIHdoZW4gYVxuICAgKiBbbWVzc2FnZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9tZXNzYWdlcy9vYmplY3QpIGlzXG4gICAqIGNvbXBsZXRlZC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkTWVzc2FnZUNvbXBsZXRlZCB7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhIG1lc3NhZ2Ugd2l0aGluIGFcbiAgICAgKiBbdGhyZWFkXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3RocmVhZHMpLlxuICAgICAqL1xuICAgIGRhdGE6IE1lc3NhZ2VzQVBJLk1lc3NhZ2U7XG5cbiAgICBldmVudDogJ3RocmVhZC5tZXNzYWdlLmNvbXBsZXRlZCc7XG4gIH1cblxuICAvKipcbiAgICogT2NjdXJzIHdoZW4gYVxuICAgKiBbbWVzc2FnZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9tZXNzYWdlcy9vYmplY3QpIGVuZHNcbiAgICogYmVmb3JlIGl0IGlzIGNvbXBsZXRlZC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkTWVzc2FnZUluY29tcGxldGUge1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYSBtZXNzYWdlIHdpdGhpbiBhXG4gICAgICogW3RocmVhZF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS90aHJlYWRzKS5cbiAgICAgKi9cbiAgICBkYXRhOiBNZXNzYWdlc0FQSS5NZXNzYWdlO1xuXG4gICAgZXZlbnQ6ICd0aHJlYWQubWVzc2FnZS5pbmNvbXBsZXRlJztcbiAgfVxufVxuXG4vKipcbiAqIE9jY3VycyB3aGVuIGFcbiAqIFtydW4gc3RlcF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9ydW4tc3RlcHMvc3RlcC1vYmplY3QpXG4gKiBpcyBjcmVhdGVkLlxuICovXG5leHBvcnQgdHlwZSBSdW5TdGVwU3RyZWFtRXZlbnQgPVxuICB8IFJ1blN0ZXBTdHJlYW1FdmVudC5UaHJlYWRSdW5TdGVwQ3JlYXRlZFxuICB8IFJ1blN0ZXBTdHJlYW1FdmVudC5UaHJlYWRSdW5TdGVwSW5Qcm9ncmVzc1xuICB8IFJ1blN0ZXBTdHJlYW1FdmVudC5UaHJlYWRSdW5TdGVwRGVsdGFcbiAgfCBSdW5TdGVwU3RyZWFtRXZlbnQuVGhyZWFkUnVuU3RlcENvbXBsZXRlZFxuICB8IFJ1blN0ZXBTdHJlYW1FdmVudC5UaHJlYWRSdW5TdGVwRmFpbGVkXG4gIHwgUnVuU3RlcFN0cmVhbUV2ZW50LlRocmVhZFJ1blN0ZXBDYW5jZWxsZWRcbiAgfCBSdW5TdGVwU3RyZWFtRXZlbnQuVGhyZWFkUnVuU3RlcEV4cGlyZWQ7XG5cbmV4cG9ydCBuYW1lc3BhY2UgUnVuU3RlcFN0cmVhbUV2ZW50IHtcbiAgLyoqXG4gICAqIE9jY3VycyB3aGVuIGFcbiAgICogW3J1biBzdGVwXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3J1bi1zdGVwcy9zdGVwLW9iamVjdClcbiAgICogaXMgY3JlYXRlZC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkUnVuU3RlcENyZWF0ZWQge1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYSBzdGVwIGluIGV4ZWN1dGlvbiBvZiBhIHJ1bi5cbiAgICAgKi9cbiAgICBkYXRhOiBTdGVwc0FQSS5SdW5TdGVwO1xuXG4gICAgZXZlbnQ6ICd0aHJlYWQucnVuLnN0ZXAuY3JlYXRlZCc7XG4gIH1cblxuICAvKipcbiAgICogT2NjdXJzIHdoZW4gYVxuICAgKiBbcnVuIHN0ZXBdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvcnVuLXN0ZXBzL3N0ZXAtb2JqZWN0KVxuICAgKiBtb3ZlcyB0byBhbiBgaW5fcHJvZ3Jlc3NgIHN0YXRlLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUaHJlYWRSdW5TdGVwSW5Qcm9ncmVzcyB7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhIHN0ZXAgaW4gZXhlY3V0aW9uIG9mIGEgcnVuLlxuICAgICAqL1xuICAgIGRhdGE6IFN0ZXBzQVBJLlJ1blN0ZXA7XG5cbiAgICBldmVudDogJ3RocmVhZC5ydW4uc3RlcC5pbl9wcm9ncmVzcyc7XG4gIH1cblxuICAvKipcbiAgICogT2NjdXJzIHdoZW4gcGFydHMgb2YgYVxuICAgKiBbcnVuIHN0ZXBdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvcnVuLXN0ZXBzL3N0ZXAtb2JqZWN0KVxuICAgKiBhcmUgYmVpbmcgc3RyZWFtZWQuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRocmVhZFJ1blN0ZXBEZWx0YSB7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhIHJ1biBzdGVwIGRlbHRhIGkuZS4gYW55IGNoYW5nZWQgZmllbGRzIG9uIGEgcnVuIHN0ZXAgZHVyaW5nXG4gICAgICogc3RyZWFtaW5nLlxuICAgICAqL1xuICAgIGRhdGE6IFN0ZXBzQVBJLlJ1blN0ZXBEZWx0YUV2ZW50O1xuXG4gICAgZXZlbnQ6ICd0aHJlYWQucnVuLnN0ZXAuZGVsdGEnO1xuICB9XG5cbiAgLyoqXG4gICAqIE9jY3VycyB3aGVuIGFcbiAgICogW3J1biBzdGVwXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3J1bi1zdGVwcy9zdGVwLW9iamVjdClcbiAgICogaXMgY29tcGxldGVkLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUaHJlYWRSdW5TdGVwQ29tcGxldGVkIHtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGEgc3RlcCBpbiBleGVjdXRpb24gb2YgYSBydW4uXG4gICAgICovXG4gICAgZGF0YTogU3RlcHNBUEkuUnVuU3RlcDtcblxuICAgIGV2ZW50OiAndGhyZWFkLnJ1bi5zdGVwLmNvbXBsZXRlZCc7XG4gIH1cblxuICAvKipcbiAgICogT2NjdXJzIHdoZW4gYVxuICAgKiBbcnVuIHN0ZXBdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvcnVuLXN0ZXBzL3N0ZXAtb2JqZWN0KVxuICAgKiBmYWlscy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkUnVuU3RlcEZhaWxlZCB7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhIHN0ZXAgaW4gZXhlY3V0aW9uIG9mIGEgcnVuLlxuICAgICAqL1xuICAgIGRhdGE6IFN0ZXBzQVBJLlJ1blN0ZXA7XG5cbiAgICBldmVudDogJ3RocmVhZC5ydW4uc3RlcC5mYWlsZWQnO1xuICB9XG5cbiAgLyoqXG4gICAqIE9jY3VycyB3aGVuIGFcbiAgICogW3J1biBzdGVwXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3J1bi1zdGVwcy9zdGVwLW9iamVjdClcbiAgICogaXMgY2FuY2VsbGVkLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUaHJlYWRSdW5TdGVwQ2FuY2VsbGVkIHtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGEgc3RlcCBpbiBleGVjdXRpb24gb2YgYSBydW4uXG4gICAgICovXG4gICAgZGF0YTogU3RlcHNBUEkuUnVuU3RlcDtcblxuICAgIGV2ZW50OiAndGhyZWFkLnJ1bi5zdGVwLmNhbmNlbGxlZCc7XG4gIH1cblxuICAvKipcbiAgICogT2NjdXJzIHdoZW4gYVxuICAgKiBbcnVuIHN0ZXBdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvcnVuLXN0ZXBzL3N0ZXAtb2JqZWN0KVxuICAgKiBleHBpcmVzLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUaHJlYWRSdW5TdGVwRXhwaXJlZCB7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhIHN0ZXAgaW4gZXhlY3V0aW9uIG9mIGEgcnVuLlxuICAgICAqL1xuICAgIGRhdGE6IFN0ZXBzQVBJLlJ1blN0ZXA7XG5cbiAgICBldmVudDogJ3RocmVhZC5ydW4uc3RlcC5leHBpcmVkJztcbiAgfVxufVxuXG4vKipcbiAqIE9jY3VycyB3aGVuIGEgbmV3XG4gKiBbcnVuXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3J1bnMvb2JqZWN0KSBpcyBjcmVhdGVkLlxuICovXG5leHBvcnQgdHlwZSBSdW5TdHJlYW1FdmVudCA9XG4gIHwgUnVuU3RyZWFtRXZlbnQuVGhyZWFkUnVuQ3JlYXRlZFxuICB8IFJ1blN0cmVhbUV2ZW50LlRocmVhZFJ1blF1ZXVlZFxuICB8IFJ1blN0cmVhbUV2ZW50LlRocmVhZFJ1bkluUHJvZ3Jlc3NcbiAgfCBSdW5TdHJlYW1FdmVudC5UaHJlYWRSdW5SZXF1aXJlc0FjdGlvblxuICB8IFJ1blN0cmVhbUV2ZW50LlRocmVhZFJ1bkNvbXBsZXRlZFxuICB8IFJ1blN0cmVhbUV2ZW50LlRocmVhZFJ1bkluY29tcGxldGVcbiAgfCBSdW5TdHJlYW1FdmVudC5UaHJlYWRSdW5GYWlsZWRcbiAgfCBSdW5TdHJlYW1FdmVudC5UaHJlYWRSdW5DYW5jZWxsaW5nXG4gIHwgUnVuU3RyZWFtRXZlbnQuVGhyZWFkUnVuQ2FuY2VsbGVkXG4gIHwgUnVuU3RyZWFtRXZlbnQuVGhyZWFkUnVuRXhwaXJlZDtcblxuZXhwb3J0IG5hbWVzcGFjZSBSdW5TdHJlYW1FdmVudCB7XG4gIC8qKlxuICAgKiBPY2N1cnMgd2hlbiBhIG5ld1xuICAgKiBbcnVuXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3J1bnMvb2JqZWN0KSBpcyBjcmVhdGVkLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUaHJlYWRSdW5DcmVhdGVkIHtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGFuIGV4ZWN1dGlvbiBydW4gb24gYVxuICAgICAqIFt0aHJlYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdGhyZWFkcykuXG4gICAgICovXG4gICAgZGF0YTogUnVuc0FQSS5SdW47XG5cbiAgICBldmVudDogJ3RocmVhZC5ydW4uY3JlYXRlZCc7XG4gIH1cblxuICAvKipcbiAgICogT2NjdXJzIHdoZW4gYSBbcnVuXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3J1bnMvb2JqZWN0KVxuICAgKiBtb3ZlcyB0byBhIGBxdWV1ZWRgIHN0YXR1cy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkUnVuUXVldWVkIHtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGFuIGV4ZWN1dGlvbiBydW4gb24gYVxuICAgICAqIFt0aHJlYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdGhyZWFkcykuXG4gICAgICovXG4gICAgZGF0YTogUnVuc0FQSS5SdW47XG5cbiAgICBldmVudDogJ3RocmVhZC5ydW4ucXVldWVkJztcbiAgfVxuXG4gIC8qKlxuICAgKiBPY2N1cnMgd2hlbiBhIFtydW5dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvcnVucy9vYmplY3QpXG4gICAqIG1vdmVzIHRvIGFuIGBpbl9wcm9ncmVzc2Agc3RhdHVzLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUaHJlYWRSdW5JblByb2dyZXNzIHtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGFuIGV4ZWN1dGlvbiBydW4gb24gYVxuICAgICAqIFt0aHJlYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdGhyZWFkcykuXG4gICAgICovXG4gICAgZGF0YTogUnVuc0FQSS5SdW47XG5cbiAgICBldmVudDogJ3RocmVhZC5ydW4uaW5fcHJvZ3Jlc3MnO1xuICB9XG5cbiAgLyoqXG4gICAqIE9jY3VycyB3aGVuIGEgW3J1bl0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9ydW5zL29iamVjdClcbiAgICogbW92ZXMgdG8gYSBgcmVxdWlyZXNfYWN0aW9uYCBzdGF0dXMuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRocmVhZFJ1blJlcXVpcmVzQWN0aW9uIHtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGFuIGV4ZWN1dGlvbiBydW4gb24gYVxuICAgICAqIFt0aHJlYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdGhyZWFkcykuXG4gICAgICovXG4gICAgZGF0YTogUnVuc0FQSS5SdW47XG5cbiAgICBldmVudDogJ3RocmVhZC5ydW4ucmVxdWlyZXNfYWN0aW9uJztcbiAgfVxuXG4gIC8qKlxuICAgKiBPY2N1cnMgd2hlbiBhIFtydW5dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvcnVucy9vYmplY3QpXG4gICAqIGlzIGNvbXBsZXRlZC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkUnVuQ29tcGxldGVkIHtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGFuIGV4ZWN1dGlvbiBydW4gb24gYVxuICAgICAqIFt0aHJlYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdGhyZWFkcykuXG4gICAgICovXG4gICAgZGF0YTogUnVuc0FQSS5SdW47XG5cbiAgICBldmVudDogJ3RocmVhZC5ydW4uY29tcGxldGVkJztcbiAgfVxuXG4gIC8qKlxuICAgKiBPY2N1cnMgd2hlbiBhIFtydW5dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvcnVucy9vYmplY3QpXG4gICAqIGVuZHMgd2l0aCBzdGF0dXMgYGluY29tcGxldGVgLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUaHJlYWRSdW5JbmNvbXBsZXRlIHtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGFuIGV4ZWN1dGlvbiBydW4gb24gYVxuICAgICAqIFt0aHJlYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdGhyZWFkcykuXG4gICAgICovXG4gICAgZGF0YTogUnVuc0FQSS5SdW47XG5cbiAgICBldmVudDogJ3RocmVhZC5ydW4uaW5jb21wbGV0ZSc7XG4gIH1cblxuICAvKipcbiAgICogT2NjdXJzIHdoZW4gYSBbcnVuXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3J1bnMvb2JqZWN0KVxuICAgKiBmYWlscy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkUnVuRmFpbGVkIHtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGFuIGV4ZWN1dGlvbiBydW4gb24gYVxuICAgICAqIFt0aHJlYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdGhyZWFkcykuXG4gICAgICovXG4gICAgZGF0YTogUnVuc0FQSS5SdW47XG5cbiAgICBldmVudDogJ3RocmVhZC5ydW4uZmFpbGVkJztcbiAgfVxuXG4gIC8qKlxuICAgKiBPY2N1cnMgd2hlbiBhIFtydW5dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvcnVucy9vYmplY3QpXG4gICAqIG1vdmVzIHRvIGEgYGNhbmNlbGxpbmdgIHN0YXR1cy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkUnVuQ2FuY2VsbGluZyB7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhbiBleGVjdXRpb24gcnVuIG9uIGFcbiAgICAgKiBbdGhyZWFkXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3RocmVhZHMpLlxuICAgICAqL1xuICAgIGRhdGE6IFJ1bnNBUEkuUnVuO1xuXG4gICAgZXZlbnQ6ICd0aHJlYWQucnVuLmNhbmNlbGxpbmcnO1xuICB9XG5cbiAgLyoqXG4gICAqIE9jY3VycyB3aGVuIGEgW3J1bl0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9ydW5zL29iamVjdClcbiAgICogaXMgY2FuY2VsbGVkLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUaHJlYWRSdW5DYW5jZWxsZWQge1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYW4gZXhlY3V0aW9uIHJ1biBvbiBhXG4gICAgICogW3RocmVhZF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS90aHJlYWRzKS5cbiAgICAgKi9cbiAgICBkYXRhOiBSdW5zQVBJLlJ1bjtcblxuICAgIGV2ZW50OiAndGhyZWFkLnJ1bi5jYW5jZWxsZWQnO1xuICB9XG5cbiAgLyoqXG4gICAqIE9jY3VycyB3aGVuIGEgW3J1bl0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9ydW5zL29iamVjdClcbiAgICogZXhwaXJlcy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkUnVuRXhwaXJlZCB7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhbiBleGVjdXRpb24gcnVuIG9uIGFcbiAgICAgKiBbdGhyZWFkXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3RocmVhZHMpLlxuICAgICAqL1xuICAgIGRhdGE6IFJ1bnNBUEkuUnVuO1xuXG4gICAgZXZlbnQ6ICd0aHJlYWQucnVuLmV4cGlyZWQnO1xuICB9XG59XG5cbi8qKlxuICogT2NjdXJzIHdoZW4gYSBuZXdcbiAqIFt0aHJlYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdGhyZWFkcy9vYmplY3QpIGlzXG4gKiBjcmVhdGVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRocmVhZFN0cmVhbUV2ZW50IHtcbiAgLyoqXG4gICAqIFJlcHJlc2VudHMgYSB0aHJlYWQgdGhhdCBjb250YWluc1xuICAgKiBbbWVzc2FnZXNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvbWVzc2FnZXMpLlxuICAgKi9cbiAgZGF0YTogVGhyZWFkc0FQSS5UaHJlYWQ7XG5cbiAgZXZlbnQ6ICd0aHJlYWQuY3JlYXRlZCc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIGlucHV0IGF1ZGlvIHRyYW5zY3JpcHRpb24uXG4gICAqL1xuICBlbmFibGVkPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBc3Npc3RhbnRDcmVhdGVQYXJhbXMge1xuICAvKipcbiAgICogSUQgb2YgdGhlIG1vZGVsIHRvIHVzZS4gWW91IGNhbiB1c2UgdGhlXG4gICAqIFtMaXN0IG1vZGVsc10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9tb2RlbHMvbGlzdCkgQVBJIHRvXG4gICAqIHNlZSBhbGwgb2YgeW91ciBhdmFpbGFibGUgbW9kZWxzLCBvciBzZWUgb3VyXG4gICAqIFtNb2RlbCBvdmVydmlld10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvbW9kZWxzKSBmb3IgZGVzY3JpcHRpb25zIG9mXG4gICAqIHRoZW0uXG4gICAqL1xuICBtb2RlbDogKHN0cmluZyAmIHt9KSB8IFNoYXJlZC5DaGF0TW9kZWw7XG5cbiAgLyoqXG4gICAqIFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYXNzaXN0YW50LiBUaGUgbWF4aW11bSBsZW5ndGggaXMgNTEyIGNoYXJhY3RlcnMuXG4gICAqL1xuICBkZXNjcmlwdGlvbj86IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gaW5zdHJ1Y3Rpb25zIHRoYXQgdGhlIGFzc2lzdGFudCB1c2VzLiBUaGUgbWF4aW11bSBsZW5ndGggaXMgMjU2LDAwMFxuICAgKiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgaW5zdHJ1Y3Rpb25zPzogc3RyaW5nIHwgbnVsbDtcblxuICAvKipcbiAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdCwgYW5kXG4gICAqIHF1ZXJ5aW5nIGZvciBvYmplY3RzIHZpYSBBUEkgb3IgdGhlIGRhc2hib2FyZC5cbiAgICpcbiAgICogS2V5cyBhcmUgc3RyaW5ncyB3aXRoIGEgbWF4aW11bSBsZW5ndGggb2YgNjQgY2hhcmFjdGVycy4gVmFsdWVzIGFyZSBzdHJpbmdzIHdpdGhcbiAgICogYSBtYXhpbXVtIGxlbmd0aCBvZiA1MTIgY2hhcmFjdGVycy5cbiAgICovXG4gIG1ldGFkYXRhPzogU2hhcmVkLk1ldGFkYXRhIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGFzc2lzdGFudC4gVGhlIG1heGltdW0gbGVuZ3RoIGlzIDI1NiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbmFtZT86IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqICoqby1zZXJpZXMgbW9kZWxzIG9ubHkqKlxuICAgKlxuICAgKiBDb25zdHJhaW5zIGVmZm9ydCBvbiByZWFzb25pbmcgZm9yXG4gICAqIFtyZWFzb25pbmcgbW9kZWxzXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvcmVhc29uaW5nKS4gQ3VycmVudGx5XG4gICAqIHN1cHBvcnRlZCB2YWx1ZXMgYXJlIGBsb3dgLCBgbWVkaXVtYCwgYW5kIGBoaWdoYC4gUmVkdWNpbmcgcmVhc29uaW5nIGVmZm9ydCBjYW5cbiAgICogcmVzdWx0IGluIGZhc3RlciByZXNwb25zZXMgYW5kIGZld2VyIHRva2VucyB1c2VkIG9uIHJlYXNvbmluZyBpbiBhIHJlc3BvbnNlLlxuICAgKi9cbiAgcmVhc29uaW5nX2VmZm9ydD86IFNoYXJlZC5SZWFzb25pbmdFZmZvcnQgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGZvcm1hdCB0aGF0IHRoZSBtb2RlbCBtdXN0IG91dHB1dC4gQ29tcGF0aWJsZSB3aXRoXG4gICAqIFtHUFQtNG9dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL21vZGVscyNncHQtNG8pLFxuICAgKiBbR1BULTQgVHVyYm9dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL21vZGVscyNncHQtNC10dXJiby1hbmQtZ3B0LTQpLFxuICAgKiBhbmQgYWxsIEdQVC0zLjUgVHVyYm8gbW9kZWxzIHNpbmNlIGBncHQtMy41LXR1cmJvLTExMDZgLlxuICAgKlxuICAgKiBTZXR0aW5nIHRvIGB7IFwidHlwZVwiOiBcImpzb25fc2NoZW1hXCIsIFwianNvbl9zY2hlbWFcIjogey4uLn0gfWAgZW5hYmxlcyBTdHJ1Y3R1cmVkXG4gICAqIE91dHB1dHMgd2hpY2ggZW5zdXJlcyB0aGUgbW9kZWwgd2lsbCBtYXRjaCB5b3VyIHN1cHBsaWVkIEpTT04gc2NoZW1hLiBMZWFybiBtb3JlXG4gICAqIGluIHRoZVxuICAgKiBbU3RydWN0dXJlZCBPdXRwdXRzIGd1aWRlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvc3RydWN0dXJlZC1vdXRwdXRzKS5cbiAgICpcbiAgICogU2V0dGluZyB0byBgeyBcInR5cGVcIjogXCJqc29uX29iamVjdFwiIH1gIGVuYWJsZXMgSlNPTiBtb2RlLCB3aGljaCBlbnN1cmVzIHRoZVxuICAgKiBtZXNzYWdlIHRoZSBtb2RlbCBnZW5lcmF0ZXMgaXMgdmFsaWQgSlNPTi5cbiAgICpcbiAgICogKipJbXBvcnRhbnQ6Kiogd2hlbiB1c2luZyBKU09OIG1vZGUsIHlvdSAqKm11c3QqKiBhbHNvIGluc3RydWN0IHRoZSBtb2RlbCB0b1xuICAgKiBwcm9kdWNlIEpTT04geW91cnNlbGYgdmlhIGEgc3lzdGVtIG9yIHVzZXIgbWVzc2FnZS4gV2l0aG91dCB0aGlzLCB0aGUgbW9kZWwgbWF5XG4gICAqIGdlbmVyYXRlIGFuIHVuZW5kaW5nIHN0cmVhbSBvZiB3aGl0ZXNwYWNlIHVudGlsIHRoZSBnZW5lcmF0aW9uIHJlYWNoZXMgdGhlIHRva2VuXG4gICAqIGxpbWl0LCByZXN1bHRpbmcgaW4gYSBsb25nLXJ1bm5pbmcgYW5kIHNlZW1pbmdseSBcInN0dWNrXCIgcmVxdWVzdC4gQWxzbyBub3RlIHRoYXRcbiAgICogdGhlIG1lc3NhZ2UgY29udGVudCBtYXkgYmUgcGFydGlhbGx5IGN1dCBvZmYgaWYgYGZpbmlzaF9yZWFzb249XCJsZW5ndGhcImAsIHdoaWNoXG4gICAqIGluZGljYXRlcyB0aGUgZ2VuZXJhdGlvbiBleGNlZWRlZCBgbWF4X3Rva2Vuc2Agb3IgdGhlIGNvbnZlcnNhdGlvbiBleGNlZWRlZCB0aGVcbiAgICogbWF4IGNvbnRleHQgbGVuZ3RoLlxuICAgKi9cbiAgcmVzcG9uc2VfZm9ybWF0PzogVGhyZWFkc0FQSS5Bc3Npc3RhbnRSZXNwb25zZUZvcm1hdE9wdGlvbiB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFdoYXQgc2FtcGxpbmcgdGVtcGVyYXR1cmUgdG8gdXNlLCBiZXR3ZWVuIDAgYW5kIDIuIEhpZ2hlciB2YWx1ZXMgbGlrZSAwLjggd2lsbFxuICAgKiBtYWtlIHRoZSBvdXRwdXQgbW9yZSByYW5kb20sIHdoaWxlIGxvd2VyIHZhbHVlcyBsaWtlIDAuMiB3aWxsIG1ha2UgaXQgbW9yZVxuICAgKiBmb2N1c2VkIGFuZCBkZXRlcm1pbmlzdGljLlxuICAgKi9cbiAgdGVtcGVyYXR1cmU/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBBIHNldCBvZiByZXNvdXJjZXMgdGhhdCBhcmUgdXNlZCBieSB0aGUgYXNzaXN0YW50J3MgdG9vbHMuIFRoZSByZXNvdXJjZXMgYXJlXG4gICAqIHNwZWNpZmljIHRvIHRoZSB0eXBlIG9mIHRvb2wuIEZvciBleGFtcGxlLCB0aGUgYGNvZGVfaW50ZXJwcmV0ZXJgIHRvb2wgcmVxdWlyZXNcbiAgICogYSBsaXN0IG9mIGZpbGUgSURzLCB3aGlsZSB0aGUgYGZpbGVfc2VhcmNoYCB0b29sIHJlcXVpcmVzIGEgbGlzdCBvZiB2ZWN0b3Igc3RvcmVcbiAgICogSURzLlxuICAgKi9cbiAgdG9vbF9yZXNvdXJjZXM/OiBBc3Npc3RhbnRDcmVhdGVQYXJhbXMuVG9vbFJlc291cmNlcyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEEgbGlzdCBvZiB0b29sIGVuYWJsZWQgb24gdGhlIGFzc2lzdGFudC4gVGhlcmUgY2FuIGJlIGEgbWF4aW11bSBvZiAxMjggdG9vbHMgcGVyXG4gICAqIGFzc2lzdGFudC4gVG9vbHMgY2FuIGJlIG9mIHR5cGVzIGBjb2RlX2ludGVycHJldGVyYCwgYGZpbGVfc2VhcmNoYCwgb3JcbiAgICogYGZ1bmN0aW9uYC5cbiAgICovXG4gIHRvb2xzPzogQXJyYXk8QXNzaXN0YW50VG9vbD47XG5cbiAgLyoqXG4gICAqIEFuIGFsdGVybmF0aXZlIHRvIHNhbXBsaW5nIHdpdGggdGVtcGVyYXR1cmUsIGNhbGxlZCBudWNsZXVzIHNhbXBsaW5nLCB3aGVyZSB0aGVcbiAgICogbW9kZWwgY29uc2lkZXJzIHRoZSByZXN1bHRzIG9mIHRoZSB0b2tlbnMgd2l0aCB0b3BfcCBwcm9iYWJpbGl0eSBtYXNzLiBTbyAwLjFcbiAgICogbWVhbnMgb25seSB0aGUgdG9rZW5zIGNvbXByaXNpbmcgdGhlIHRvcCAxMCUgcHJvYmFiaWxpdHkgbWFzcyBhcmUgY29uc2lkZXJlZC5cbiAgICpcbiAgICogV2UgZ2VuZXJhbGx5IHJlY29tbWVuZCBhbHRlcmluZyB0aGlzIG9yIHRlbXBlcmF0dXJlIGJ1dCBub3QgYm90aC5cbiAgICovXG4gIHRvcF9wPzogbnVtYmVyIHwgbnVsbDtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBBc3Npc3RhbnRDcmVhdGVQYXJhbXMge1xuICAvKipcbiAgICogQSBzZXQgb2YgcmVzb3VyY2VzIHRoYXQgYXJlIHVzZWQgYnkgdGhlIGFzc2lzdGFudCdzIHRvb2xzLiBUaGUgcmVzb3VyY2VzIGFyZVxuICAgKiBzcGVjaWZpYyB0byB0aGUgdHlwZSBvZiB0b29sLiBGb3IgZXhhbXBsZSwgdGhlIGBjb2RlX2ludGVycHJldGVyYCB0b29sIHJlcXVpcmVzXG4gICAqIGEgbGlzdCBvZiBmaWxlIElEcywgd2hpbGUgdGhlIGBmaWxlX3NlYXJjaGAgdG9vbCByZXF1aXJlcyBhIGxpc3Qgb2YgdmVjdG9yIHN0b3JlXG4gICAqIElEcy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVG9vbFJlc291cmNlcyB7XG4gICAgY29kZV9pbnRlcnByZXRlcj86IFRvb2xSZXNvdXJjZXMuQ29kZUludGVycHJldGVyO1xuXG4gICAgZmlsZV9zZWFyY2g/OiBUb29sUmVzb3VyY2VzLkZpbGVTZWFyY2g7XG4gIH1cblxuICBleHBvcnQgbmFtZXNwYWNlIFRvb2xSZXNvdXJjZXMge1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29kZUludGVycHJldGVyIHtcbiAgICAgIC8qKlxuICAgICAgICogQSBsaXN0IG9mIFtmaWxlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2ZpbGVzKSBJRHMgbWFkZVxuICAgICAgICogYXZhaWxhYmxlIHRvIHRoZSBgY29kZV9pbnRlcnByZXRlcmAgdG9vbC4gVGhlcmUgY2FuIGJlIGEgbWF4aW11bSBvZiAyMCBmaWxlc1xuICAgICAgICogYXNzb2NpYXRlZCB3aXRoIHRoZSB0b29sLlxuICAgICAgICovXG4gICAgICBmaWxlX2lkcz86IEFycmF5PHN0cmluZz47XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBGaWxlU2VhcmNoIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlXG4gICAgICAgKiBbdmVjdG9yIHN0b3JlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3ZlY3Rvci1zdG9yZXMvb2JqZWN0KVxuICAgICAgICogYXR0YWNoZWQgdG8gdGhpcyBhc3Npc3RhbnQuIFRoZXJlIGNhbiBiZSBhIG1heGltdW0gb2YgMSB2ZWN0b3Igc3RvcmUgYXR0YWNoZWQgdG9cbiAgICAgICAqIHRoZSBhc3Npc3RhbnQuXG4gICAgICAgKi9cbiAgICAgIHZlY3Rvcl9zdG9yZV9pZHM/OiBBcnJheTxzdHJpbmc+O1xuXG4gICAgICAvKipcbiAgICAgICAqIEEgaGVscGVyIHRvIGNyZWF0ZSBhXG4gICAgICAgKiBbdmVjdG9yIHN0b3JlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3ZlY3Rvci1zdG9yZXMvb2JqZWN0KVxuICAgICAgICogd2l0aCBmaWxlX2lkcyBhbmQgYXR0YWNoIGl0IHRvIHRoaXMgYXNzaXN0YW50LiBUaGVyZSBjYW4gYmUgYSBtYXhpbXVtIG9mIDFcbiAgICAgICAqIHZlY3RvciBzdG9yZSBhdHRhY2hlZCB0byB0aGUgYXNzaXN0YW50LlxuICAgICAgICovXG4gICAgICB2ZWN0b3Jfc3RvcmVzPzogQXJyYXk8RmlsZVNlYXJjaC5WZWN0b3JTdG9yZT47XG4gICAgfVxuXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBGaWxlU2VhcmNoIHtcbiAgICAgIGV4cG9ydCBpbnRlcmZhY2UgVmVjdG9yU3RvcmUge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNodW5raW5nIHN0cmF0ZWd5IHVzZWQgdG8gY2h1bmsgdGhlIGZpbGUocykuIElmIG5vdCBzZXQsIHdpbGwgdXNlIHRoZSBgYXV0b2BcbiAgICAgICAgICogc3RyYXRlZ3kuXG4gICAgICAgICAqL1xuICAgICAgICBjaHVua2luZ19zdHJhdGVneT86IFZlY3RvclN0b3JlLkF1dG8gfCBWZWN0b3JTdG9yZS5TdGF0aWM7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgbGlzdCBvZiBbZmlsZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maWxlcykgSURzIHRvXG4gICAgICAgICAqIGFkZCB0byB0aGUgdmVjdG9yIHN0b3JlLiBUaGVyZSBjYW4gYmUgYSBtYXhpbXVtIG9mIDEwMDAwIGZpbGVzIGluIGEgdmVjdG9yXG4gICAgICAgICAqIHN0b3JlLlxuICAgICAgICAgKi9cbiAgICAgICAgZmlsZV9pZHM/OiBBcnJheTxzdHJpbmc+O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAgICAgICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICAgICAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgICAgICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgICAgICAgKi9cbiAgICAgICAgbWV0YWRhdGE/OiBTaGFyZWQuTWV0YWRhdGEgfCBudWxsO1xuICAgICAgfVxuXG4gICAgICBleHBvcnQgbmFtZXNwYWNlIFZlY3RvclN0b3JlIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBkZWZhdWx0IHN0cmF0ZWd5LiBUaGlzIHN0cmF0ZWd5IGN1cnJlbnRseSB1c2VzIGEgYG1heF9jaHVua19zaXplX3Rva2Vuc2Agb2ZcbiAgICAgICAgICogYDgwMGAgYW5kIGBjaHVua19vdmVybGFwX3Rva2Vuc2Agb2YgYDQwMGAuXG4gICAgICAgICAqL1xuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIEF1dG8ge1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEFsd2F5cyBgYXV0b2AuXG4gICAgICAgICAgICovXG4gICAgICAgICAgdHlwZTogJ2F1dG8nO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBTdGF0aWMge1xuICAgICAgICAgIHN0YXRpYzogU3RhdGljLlN0YXRpYztcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEFsd2F5cyBgc3RhdGljYC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICB0eXBlOiAnc3RhdGljJztcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBuYW1lc3BhY2UgU3RhdGljIHtcbiAgICAgICAgICBleHBvcnQgaW50ZXJmYWNlIFN0YXRpYyB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoZSBudW1iZXIgb2YgdG9rZW5zIHRoYXQgb3ZlcmxhcCBiZXR3ZWVuIGNodW5rcy4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYDQwMGAuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTm90ZSB0aGF0IHRoZSBvdmVybGFwIG11c3Qgbm90IGV4Y2VlZCBoYWxmIG9mIGBtYXhfY2h1bmtfc2l6ZV90b2tlbnNgLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjaHVua19vdmVybGFwX3Rva2VuczogbnVtYmVyO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiB0b2tlbnMgaW4gZWFjaCBjaHVuay4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYDgwMGAuIFRoZVxuICAgICAgICAgICAgICogbWluaW11bSB2YWx1ZSBpcyBgMTAwYCBhbmQgdGhlIG1heGltdW0gdmFsdWUgaXMgYDQwOTZgLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBtYXhfY2h1bmtfc2l6ZV90b2tlbnM6IG51bWJlcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBc3Npc3RhbnRVcGRhdGVQYXJhbXMge1xuICAvKipcbiAgICogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBhc3Npc3RhbnQuIFRoZSBtYXhpbXVtIGxlbmd0aCBpcyA1MTIgY2hhcmFjdGVycy5cbiAgICovXG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIHN5c3RlbSBpbnN0cnVjdGlvbnMgdGhhdCB0aGUgYXNzaXN0YW50IHVzZXMuIFRoZSBtYXhpbXVtIGxlbmd0aCBpcyAyNTYsMDAwXG4gICAqIGNoYXJhY3RlcnMuXG4gICAqL1xuICBpbnN0cnVjdGlvbnM/OiBzdHJpbmcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgKlxuICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbWV0YWRhdGE/OiBTaGFyZWQuTWV0YWRhdGEgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBJRCBvZiB0aGUgbW9kZWwgdG8gdXNlLiBZb3UgY2FuIHVzZSB0aGVcbiAgICogW0xpc3QgbW9kZWxzXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL21vZGVscy9saXN0KSBBUEkgdG9cbiAgICogc2VlIGFsbCBvZiB5b3VyIGF2YWlsYWJsZSBtb2RlbHMsIG9yIHNlZSBvdXJcbiAgICogW01vZGVsIG92ZXJ2aWV3XShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9tb2RlbHMpIGZvciBkZXNjcmlwdGlvbnMgb2ZcbiAgICogdGhlbS5cbiAgICovXG4gIG1vZGVsPzpcbiAgICB8IChzdHJpbmcgJiB7fSlcbiAgICB8ICdncHQtNC4xJ1xuICAgIHwgJ2dwdC00LjEtbWluaSdcbiAgICB8ICdncHQtNC4xLW5hbm8nXG4gICAgfCAnZ3B0LTQuMS0yMDI1LTA0LTE0J1xuICAgIHwgJ2dwdC00LjEtbWluaS0yMDI1LTA0LTE0J1xuICAgIHwgJ2dwdC00LjEtbmFuby0yMDI1LTA0LTE0J1xuICAgIHwgJ28zLW1pbmknXG4gICAgfCAnbzMtbWluaS0yMDI1LTAxLTMxJ1xuICAgIHwgJ28xJ1xuICAgIHwgJ28xLTIwMjQtMTItMTcnXG4gICAgfCAnZ3B0LTRvJ1xuICAgIHwgJ2dwdC00by0yMDI0LTExLTIwJ1xuICAgIHwgJ2dwdC00by0yMDI0LTA4LTA2J1xuICAgIHwgJ2dwdC00by0yMDI0LTA1LTEzJ1xuICAgIHwgJ2dwdC00by1taW5pJ1xuICAgIHwgJ2dwdC00by1taW5pLTIwMjQtMDctMTgnXG4gICAgfCAnZ3B0LTQuNS1wcmV2aWV3J1xuICAgIHwgJ2dwdC00LjUtcHJldmlldy0yMDI1LTAyLTI3J1xuICAgIHwgJ2dwdC00LXR1cmJvJ1xuICAgIHwgJ2dwdC00LXR1cmJvLTIwMjQtMDQtMDknXG4gICAgfCAnZ3B0LTQtMDEyNS1wcmV2aWV3J1xuICAgIHwgJ2dwdC00LXR1cmJvLXByZXZpZXcnXG4gICAgfCAnZ3B0LTQtMTEwNi1wcmV2aWV3J1xuICAgIHwgJ2dwdC00LXZpc2lvbi1wcmV2aWV3J1xuICAgIHwgJ2dwdC00J1xuICAgIHwgJ2dwdC00LTAzMTQnXG4gICAgfCAnZ3B0LTQtMDYxMydcbiAgICB8ICdncHQtNC0zMmsnXG4gICAgfCAnZ3B0LTQtMzJrLTAzMTQnXG4gICAgfCAnZ3B0LTQtMzJrLTA2MTMnXG4gICAgfCAnZ3B0LTMuNS10dXJibydcbiAgICB8ICdncHQtMy41LXR1cmJvLTE2aydcbiAgICB8ICdncHQtMy41LXR1cmJvLTA2MTMnXG4gICAgfCAnZ3B0LTMuNS10dXJiby0xMTA2J1xuICAgIHwgJ2dwdC0zLjUtdHVyYm8tMDEyNSdcbiAgICB8ICdncHQtMy41LXR1cmJvLTE2ay0wNjEzJztcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGFzc2lzdGFudC4gVGhlIG1heGltdW0gbGVuZ3RoIGlzIDI1NiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbmFtZT86IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqICoqby1zZXJpZXMgbW9kZWxzIG9ubHkqKlxuICAgKlxuICAgKiBDb25zdHJhaW5zIGVmZm9ydCBvbiByZWFzb25pbmcgZm9yXG4gICAqIFtyZWFzb25pbmcgbW9kZWxzXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvcmVhc29uaW5nKS4gQ3VycmVudGx5XG4gICAqIHN1cHBvcnRlZCB2YWx1ZXMgYXJlIGBsb3dgLCBgbWVkaXVtYCwgYW5kIGBoaWdoYC4gUmVkdWNpbmcgcmVhc29uaW5nIGVmZm9ydCBjYW5cbiAgICogcmVzdWx0IGluIGZhc3RlciByZXNwb25zZXMgYW5kIGZld2VyIHRva2VucyB1c2VkIG9uIHJlYXNvbmluZyBpbiBhIHJlc3BvbnNlLlxuICAgKi9cbiAgcmVhc29uaW5nX2VmZm9ydD86IFNoYXJlZC5SZWFzb25pbmdFZmZvcnQgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGZvcm1hdCB0aGF0IHRoZSBtb2RlbCBtdXN0IG91dHB1dC4gQ29tcGF0aWJsZSB3aXRoXG4gICAqIFtHUFQtNG9dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL21vZGVscyNncHQtNG8pLFxuICAgKiBbR1BULTQgVHVyYm9dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL21vZGVscyNncHQtNC10dXJiby1hbmQtZ3B0LTQpLFxuICAgKiBhbmQgYWxsIEdQVC0zLjUgVHVyYm8gbW9kZWxzIHNpbmNlIGBncHQtMy41LXR1cmJvLTExMDZgLlxuICAgKlxuICAgKiBTZXR0aW5nIHRvIGB7IFwidHlwZVwiOiBcImpzb25fc2NoZW1hXCIsIFwianNvbl9zY2hlbWFcIjogey4uLn0gfWAgZW5hYmxlcyBTdHJ1Y3R1cmVkXG4gICAqIE91dHB1dHMgd2hpY2ggZW5zdXJlcyB0aGUgbW9kZWwgd2lsbCBtYXRjaCB5b3VyIHN1cHBsaWVkIEpTT04gc2NoZW1hLiBMZWFybiBtb3JlXG4gICAqIGluIHRoZVxuICAgKiBbU3RydWN0dXJlZCBPdXRwdXRzIGd1aWRlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvc3RydWN0dXJlZC1vdXRwdXRzKS5cbiAgICpcbiAgICogU2V0dGluZyB0byBgeyBcInR5cGVcIjogXCJqc29uX29iamVjdFwiIH1gIGVuYWJsZXMgSlNPTiBtb2RlLCB3aGljaCBlbnN1cmVzIHRoZVxuICAgKiBtZXNzYWdlIHRoZSBtb2RlbCBnZW5lcmF0ZXMgaXMgdmFsaWQgSlNPTi5cbiAgICpcbiAgICogKipJbXBvcnRhbnQ6Kiogd2hlbiB1c2luZyBKU09OIG1vZGUsIHlvdSAqKm11c3QqKiBhbHNvIGluc3RydWN0IHRoZSBtb2RlbCB0b1xuICAgKiBwcm9kdWNlIEpTT04geW91cnNlbGYgdmlhIGEgc3lzdGVtIG9yIHVzZXIgbWVzc2FnZS4gV2l0aG91dCB0aGlzLCB0aGUgbW9kZWwgbWF5XG4gICAqIGdlbmVyYXRlIGFuIHVuZW5kaW5nIHN0cmVhbSBvZiB3aGl0ZXNwYWNlIHVudGlsIHRoZSBnZW5lcmF0aW9uIHJlYWNoZXMgdGhlIHRva2VuXG4gICAqIGxpbWl0LCByZXN1bHRpbmcgaW4gYSBsb25nLXJ1bm5pbmcgYW5kIHNlZW1pbmdseSBcInN0dWNrXCIgcmVxdWVzdC4gQWxzbyBub3RlIHRoYXRcbiAgICogdGhlIG1lc3NhZ2UgY29udGVudCBtYXkgYmUgcGFydGlhbGx5IGN1dCBvZmYgaWYgYGZpbmlzaF9yZWFzb249XCJsZW5ndGhcImAsIHdoaWNoXG4gICAqIGluZGljYXRlcyB0aGUgZ2VuZXJhdGlvbiBleGNlZWRlZCBgbWF4X3Rva2Vuc2Agb3IgdGhlIGNvbnZlcnNhdGlvbiBleGNlZWRlZCB0aGVcbiAgICogbWF4IGNvbnRleHQgbGVuZ3RoLlxuICAgKi9cbiAgcmVzcG9uc2VfZm9ybWF0PzogVGhyZWFkc0FQSS5Bc3Npc3RhbnRSZXNwb25zZUZvcm1hdE9wdGlvbiB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFdoYXQgc2FtcGxpbmcgdGVtcGVyYXR1cmUgdG8gdXNlLCBiZXR3ZWVuIDAgYW5kIDIuIEhpZ2hlciB2YWx1ZXMgbGlrZSAwLjggd2lsbFxuICAgKiBtYWtlIHRoZSBvdXRwdXQgbW9yZSByYW5kb20sIHdoaWxlIGxvd2VyIHZhbHVlcyBsaWtlIDAuMiB3aWxsIG1ha2UgaXQgbW9yZVxuICAgKiBmb2N1c2VkIGFuZCBkZXRlcm1pbmlzdGljLlxuICAgKi9cbiAgdGVtcGVyYXR1cmU/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBBIHNldCBvZiByZXNvdXJjZXMgdGhhdCBhcmUgdXNlZCBieSB0aGUgYXNzaXN0YW50J3MgdG9vbHMuIFRoZSByZXNvdXJjZXMgYXJlXG4gICAqIHNwZWNpZmljIHRvIHRoZSB0eXBlIG9mIHRvb2wuIEZvciBleGFtcGxlLCB0aGUgYGNvZGVfaW50ZXJwcmV0ZXJgIHRvb2wgcmVxdWlyZXNcbiAgICogYSBsaXN0IG9mIGZpbGUgSURzLCB3aGlsZSB0aGUgYGZpbGVfc2VhcmNoYCB0b29sIHJlcXVpcmVzIGEgbGlzdCBvZiB2ZWN0b3Igc3RvcmVcbiAgICogSURzLlxuICAgKi9cbiAgdG9vbF9yZXNvdXJjZXM/OiBBc3Npc3RhbnRVcGRhdGVQYXJhbXMuVG9vbFJlc291cmNlcyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEEgbGlzdCBvZiB0b29sIGVuYWJsZWQgb24gdGhlIGFzc2lzdGFudC4gVGhlcmUgY2FuIGJlIGEgbWF4aW11bSBvZiAxMjggdG9vbHMgcGVyXG4gICAqIGFzc2lzdGFudC4gVG9vbHMgY2FuIGJlIG9mIHR5cGVzIGBjb2RlX2ludGVycHJldGVyYCwgYGZpbGVfc2VhcmNoYCwgb3JcbiAgICogYGZ1bmN0aW9uYC5cbiAgICovXG4gIHRvb2xzPzogQXJyYXk8QXNzaXN0YW50VG9vbD47XG5cbiAgLyoqXG4gICAqIEFuIGFsdGVybmF0aXZlIHRvIHNhbXBsaW5nIHdpdGggdGVtcGVyYXR1cmUsIGNhbGxlZCBudWNsZXVzIHNhbXBsaW5nLCB3aGVyZSB0aGVcbiAgICogbW9kZWwgY29uc2lkZXJzIHRoZSByZXN1bHRzIG9mIHRoZSB0b2tlbnMgd2l0aCB0b3BfcCBwcm9iYWJpbGl0eSBtYXNzLiBTbyAwLjFcbiAgICogbWVhbnMgb25seSB0aGUgdG9rZW5zIGNvbXByaXNpbmcgdGhlIHRvcCAxMCUgcHJvYmFiaWxpdHkgbWFzcyBhcmUgY29uc2lkZXJlZC5cbiAgICpcbiAgICogV2UgZ2VuZXJhbGx5IHJlY29tbWVuZCBhbHRlcmluZyB0aGlzIG9yIHRlbXBlcmF0dXJlIGJ1dCBub3QgYm90aC5cbiAgICovXG4gIHRvcF9wPzogbnVtYmVyIHwgbnVsbDtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBBc3Npc3RhbnRVcGRhdGVQYXJhbXMge1xuICAvKipcbiAgICogQSBzZXQgb2YgcmVzb3VyY2VzIHRoYXQgYXJlIHVzZWQgYnkgdGhlIGFzc2lzdGFudCdzIHRvb2xzLiBUaGUgcmVzb3VyY2VzIGFyZVxuICAgKiBzcGVjaWZpYyB0byB0aGUgdHlwZSBvZiB0b29sLiBGb3IgZXhhbXBsZSwgdGhlIGBjb2RlX2ludGVycHJldGVyYCB0b29sIHJlcXVpcmVzXG4gICAqIGEgbGlzdCBvZiBmaWxlIElEcywgd2hpbGUgdGhlIGBmaWxlX3NlYXJjaGAgdG9vbCByZXF1aXJlcyBhIGxpc3Qgb2YgdmVjdG9yIHN0b3JlXG4gICAqIElEcy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVG9vbFJlc291cmNlcyB7XG4gICAgY29kZV9pbnRlcnByZXRlcj86IFRvb2xSZXNvdXJjZXMuQ29kZUludGVycHJldGVyO1xuXG4gICAgZmlsZV9zZWFyY2g/OiBUb29sUmVzb3VyY2VzLkZpbGVTZWFyY2g7XG4gIH1cblxuICBleHBvcnQgbmFtZXNwYWNlIFRvb2xSZXNvdXJjZXMge1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29kZUludGVycHJldGVyIHtcbiAgICAgIC8qKlxuICAgICAgICogT3ZlcnJpZGVzIHRoZSBsaXN0IG9mXG4gICAgICAgKiBbZmlsZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maWxlcykgSURzIG1hZGUgYXZhaWxhYmxlXG4gICAgICAgKiB0byB0aGUgYGNvZGVfaW50ZXJwcmV0ZXJgIHRvb2wuIFRoZXJlIGNhbiBiZSBhIG1heGltdW0gb2YgMjAgZmlsZXMgYXNzb2NpYXRlZFxuICAgICAgICogd2l0aCB0aGUgdG9vbC5cbiAgICAgICAqL1xuICAgICAgZmlsZV9pZHM/OiBBcnJheTxzdHJpbmc+O1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRmlsZVNlYXJjaCB7XG4gICAgICAvKipcbiAgICAgICAqIE92ZXJyaWRlcyB0aGVcbiAgICAgICAqIFt2ZWN0b3Igc3RvcmVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdmVjdG9yLXN0b3Jlcy9vYmplY3QpXG4gICAgICAgKiBhdHRhY2hlZCB0byB0aGlzIGFzc2lzdGFudC4gVGhlcmUgY2FuIGJlIGEgbWF4aW11bSBvZiAxIHZlY3RvciBzdG9yZSBhdHRhY2hlZCB0b1xuICAgICAgICogdGhlIGFzc2lzdGFudC5cbiAgICAgICAqL1xuICAgICAgdmVjdG9yX3N0b3JlX2lkcz86IEFycmF5PHN0cmluZz47XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXNzaXN0YW50TGlzdFBhcmFtcyBleHRlbmRzIEN1cnNvclBhZ2VQYXJhbXMge1xuICAvKipcbiAgICogQSBjdXJzb3IgZm9yIHVzZSBpbiBwYWdpbmF0aW9uLiBgYmVmb3JlYCBpcyBhbiBvYmplY3QgSUQgdGhhdCBkZWZpbmVzIHlvdXIgcGxhY2VcbiAgICogaW4gdGhlIGxpc3QuIEZvciBpbnN0YW5jZSwgaWYgeW91IG1ha2UgYSBsaXN0IHJlcXVlc3QgYW5kIHJlY2VpdmUgMTAwIG9iamVjdHMsXG4gICAqIHN0YXJ0aW5nIHdpdGggb2JqX2ZvbywgeW91ciBzdWJzZXF1ZW50IGNhbGwgY2FuIGluY2x1ZGUgYmVmb3JlPW9ial9mb28gaW4gb3JkZXJcbiAgICogdG8gZmV0Y2ggdGhlIHByZXZpb3VzIHBhZ2Ugb2YgdGhlIGxpc3QuXG4gICAqL1xuICBiZWZvcmU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNvcnQgb3JkZXIgYnkgdGhlIGBjcmVhdGVkX2F0YCB0aW1lc3RhbXAgb2YgdGhlIG9iamVjdHMuIGBhc2NgIGZvciBhc2NlbmRpbmdcbiAgICogb3JkZXIgYW5kIGBkZXNjYCBmb3IgZGVzY2VuZGluZyBvcmRlci5cbiAgICovXG4gIG9yZGVyPzogJ2FzYycgfCAnZGVzYyc7XG59XG5cbkFzc2lzdGFudHMuQXNzaXN0YW50c1BhZ2UgPSBBc3Npc3RhbnRzUGFnZTtcblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIEFzc2lzdGFudHMge1xuICBleHBvcnQge1xuICAgIHR5cGUgQXNzaXN0YW50IGFzIEFzc2lzdGFudCxcbiAgICB0eXBlIEFzc2lzdGFudERlbGV0ZWQgYXMgQXNzaXN0YW50RGVsZXRlZCxcbiAgICB0eXBlIEFzc2lzdGFudFN0cmVhbUV2ZW50IGFzIEFzc2lzdGFudFN0cmVhbUV2ZW50LFxuICAgIHR5cGUgQXNzaXN0YW50VG9vbCBhcyBBc3Npc3RhbnRUb29sLFxuICAgIHR5cGUgQ29kZUludGVycHJldGVyVG9vbCBhcyBDb2RlSW50ZXJwcmV0ZXJUb29sLFxuICAgIHR5cGUgRmlsZVNlYXJjaFRvb2wgYXMgRmlsZVNlYXJjaFRvb2wsXG4gICAgdHlwZSBGdW5jdGlvblRvb2wgYXMgRnVuY3Rpb25Ub29sLFxuICAgIHR5cGUgTWVzc2FnZVN0cmVhbUV2ZW50IGFzIE1lc3NhZ2VTdHJlYW1FdmVudCxcbiAgICB0eXBlIFJ1blN0ZXBTdHJlYW1FdmVudCBhcyBSdW5TdGVwU3RyZWFtRXZlbnQsXG4gICAgdHlwZSBSdW5TdHJlYW1FdmVudCBhcyBSdW5TdHJlYW1FdmVudCxcbiAgICB0eXBlIFRocmVhZFN0cmVhbUV2ZW50IGFzIFRocmVhZFN0cmVhbUV2ZW50LFxuICAgIEFzc2lzdGFudHNQYWdlIGFzIEFzc2lzdGFudHNQYWdlLFxuICAgIHR5cGUgQXNzaXN0YW50Q3JlYXRlUGFyYW1zIGFzIEFzc2lzdGFudENyZWF0ZVBhcmFtcyxcbiAgICB0eXBlIEFzc2lzdGFudFVwZGF0ZVBhcmFtcyBhcyBBc3Npc3RhbnRVcGRhdGVQYXJhbXMsXG4gICAgdHlwZSBBc3Npc3RhbnRMaXN0UGFyYW1zIGFzIEFzc2lzdGFudExpc3RQYXJhbXMsXG4gIH07XG5cbiAgZXhwb3J0IHsgQXNzaXN0YW50U3RyZWFtIH07XG59XG4iLCAiaW1wb3J0IHsgdHlwZSBDaGF0Q29tcGxldGlvblJ1bm5lciB9IGZyb20gJy4vQ2hhdENvbXBsZXRpb25SdW5uZXInO1xuaW1wb3J0IHsgdHlwZSBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lciB9IGZyb20gJy4vQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXInO1xuaW1wb3J0IHsgSlNPTlNjaGVtYSB9IGZyb20gJy4vanNvbnNjaGVtYSc7XG5cbnR5cGUgUHJvbWlzZU9yVmFsdWU8VD4gPSBUIHwgUHJvbWlzZTxUPjtcblxuZXhwb3J0IHR5cGUgUnVubmFibGVGdW5jdGlvbldpdGhQYXJzZTxBcmdzIGV4dGVuZHMgb2JqZWN0PiA9IHtcbiAgLyoqXG4gICAqIEBwYXJhbSBhcmdzIHRoZSByZXR1cm4gdmFsdWUgZnJvbSBgcGFyc2VgLlxuICAgKiBAcGFyYW0gcnVubmVyIHRoZSBydW5uZXIgZXZhbHVhdGluZyB0aGlzIGNhbGxiYWNrLlxuICAgKiBAcmV0dXJucyBhIHN0cmluZyB0byBzZW5kIGJhY2sgdG8gT3BlbkFJLlxuICAgKi9cbiAgZnVuY3Rpb246IChcbiAgICBhcmdzOiBBcmdzLFxuICAgIHJ1bm5lcjogQ2hhdENvbXBsZXRpb25SdW5uZXI8dW5rbm93bj4gfCBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lcjx1bmtub3duPixcbiAgKSA9PiBQcm9taXNlT3JWYWx1ZTx1bmtub3duPjtcbiAgLyoqXG4gICAqIEBwYXJhbSBpbnB1dCB0aGUgcmF3IGFyZ3MgZnJvbSB0aGUgT3BlbkFJIGZ1bmN0aW9uIGNhbGwuXG4gICAqIEByZXR1cm5zIHRoZSBwYXJzZWQgYXJndW1lbnRzIHRvIHBhc3MgdG8gYGZ1bmN0aW9uYFxuICAgKi9cbiAgcGFyc2U6IChpbnB1dDogc3RyaW5nKSA9PiBQcm9taXNlT3JWYWx1ZTxBcmdzPjtcbiAgLyoqXG4gICAqIFRoZSBwYXJhbWV0ZXJzIHRoZSBmdW5jdGlvbiBhY2NlcHRzLCBkZXNjcmliZXMgYXMgYSBKU09OIFNjaGVtYSBvYmplY3QuXG4gICAqL1xuICBwYXJhbWV0ZXJzOiBKU09OU2NoZW1hO1xuICAvKipcbiAgICogQSBkZXNjcmlwdGlvbiBvZiB3aGF0IHRoZSBmdW5jdGlvbiBkb2VzLCB1c2VkIGJ5IHRoZSBtb2RlbCB0byBjaG9vc2Ugd2hlbiBhbmQgaG93IHRvIGNhbGwgdGhlIGZ1bmN0aW9uLlxuICAgKi9cbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbiB0byBiZSBjYWxsZWQuIFdpbGwgZGVmYXVsdCB0byBmdW5jdGlvbi5uYW1lIGlmIG9taXR0ZWQuXG4gICAqL1xuICBuYW1lPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBzdHJpY3Q/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IHR5cGUgUnVubmFibGVGdW5jdGlvbldpdGhvdXRQYXJzZSA9IHtcbiAgLyoqXG4gICAqIEBwYXJhbSBhcmdzIHRoZSByYXcgYXJncyBmcm9tIHRoZSBPcGVuQUkgZnVuY3Rpb24gY2FsbC5cbiAgICogQHJldHVybnMgYSBzdHJpbmcgdG8gc2VuZCBiYWNrIHRvIE9wZW5BSVxuICAgKi9cbiAgZnVuY3Rpb246IChcbiAgICBhcmdzOiBzdHJpbmcsXG4gICAgcnVubmVyOiBDaGF0Q29tcGxldGlvblJ1bm5lcjx1bmtub3duPiB8IENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyPHVua25vd24+LFxuICApID0+IFByb21pc2VPclZhbHVlPHVua25vd24+O1xuICAvKipcbiAgICogVGhlIHBhcmFtZXRlcnMgdGhlIGZ1bmN0aW9uIGFjY2VwdHMsIGRlc2NyaWJlcyBhcyBhIEpTT04gU2NoZW1hIG9iamVjdC5cbiAgICovXG4gIHBhcmFtZXRlcnM6IEpTT05TY2hlbWE7XG4gIC8qKlxuICAgKiBBIGRlc2NyaXB0aW9uIG9mIHdoYXQgdGhlIGZ1bmN0aW9uIGRvZXMsIHVzZWQgYnkgdGhlIG1vZGVsIHRvIGNob29zZSB3aGVuIGFuZCBob3cgdG8gY2FsbCB0aGUgZnVuY3Rpb24uXG4gICAqL1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZC4gV2lsbCBkZWZhdWx0IHRvIGZ1bmN0aW9uLm5hbWUgaWYgb21pdHRlZC5cbiAgICovXG4gIG5hbWU/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIHN0cmljdD86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgdHlwZSBSdW5uYWJsZUZ1bmN0aW9uPEFyZ3MgZXh0ZW5kcyBvYmplY3QgfCBzdHJpbmc+ID1cbiAgQXJncyBleHRlbmRzIHN0cmluZyA/IFJ1bm5hYmxlRnVuY3Rpb25XaXRob3V0UGFyc2VcbiAgOiBBcmdzIGV4dGVuZHMgb2JqZWN0ID8gUnVubmFibGVGdW5jdGlvbldpdGhQYXJzZTxBcmdzPlxuICA6IG5ldmVyO1xuXG5leHBvcnQgdHlwZSBSdW5uYWJsZVRvb2xGdW5jdGlvbjxBcmdzIGV4dGVuZHMgb2JqZWN0IHwgc3RyaW5nPiA9XG4gIEFyZ3MgZXh0ZW5kcyBzdHJpbmcgPyBSdW5uYWJsZVRvb2xGdW5jdGlvbldpdGhvdXRQYXJzZVxuICA6IEFyZ3MgZXh0ZW5kcyBvYmplY3QgPyBSdW5uYWJsZVRvb2xGdW5jdGlvbldpdGhQYXJzZTxBcmdzPlxuICA6IG5ldmVyO1xuXG5leHBvcnQgdHlwZSBSdW5uYWJsZVRvb2xGdW5jdGlvbldpdGhvdXRQYXJzZSA9IHtcbiAgdHlwZTogJ2Z1bmN0aW9uJztcbiAgZnVuY3Rpb246IFJ1bm5hYmxlRnVuY3Rpb25XaXRob3V0UGFyc2U7XG59O1xuZXhwb3J0IHR5cGUgUnVubmFibGVUb29sRnVuY3Rpb25XaXRoUGFyc2U8QXJncyBleHRlbmRzIG9iamVjdD4gPSB7XG4gIHR5cGU6ICdmdW5jdGlvbic7XG4gIGZ1bmN0aW9uOiBSdW5uYWJsZUZ1bmN0aW9uV2l0aFBhcnNlPEFyZ3M+O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzUnVubmFibGVGdW5jdGlvbldpdGhQYXJzZTxBcmdzIGV4dGVuZHMgb2JqZWN0PihcbiAgZm46IGFueSxcbik6IGZuIGlzIFJ1bm5hYmxlRnVuY3Rpb25XaXRoUGFyc2U8QXJncz4ge1xuICByZXR1cm4gdHlwZW9mIChmbiBhcyBhbnkpLnBhcnNlID09PSAnZnVuY3Rpb24nO1xufVxuXG5leHBvcnQgdHlwZSBCYXNlRnVuY3Rpb25zQXJncyA9IHJlYWRvbmx5IChvYmplY3QgfCBzdHJpbmcpW107XG5cbmV4cG9ydCB0eXBlIFJ1bm5hYmxlRnVuY3Rpb25zPEZ1bmN0aW9uc0FyZ3MgZXh0ZW5kcyBCYXNlRnVuY3Rpb25zQXJncz4gPVxuICBbYW55W11dIGV4dGVuZHMgW0Z1bmN0aW9uc0FyZ3NdID8gcmVhZG9ubHkgUnVubmFibGVGdW5jdGlvbjxhbnk+W11cbiAgOiB7XG4gICAgICBbSW5kZXggaW4ga2V5b2YgRnVuY3Rpb25zQXJnc106IEluZGV4IGV4dGVuZHMgbnVtYmVyID8gUnVubmFibGVGdW5jdGlvbjxGdW5jdGlvbnNBcmdzW0luZGV4XT5cbiAgICAgIDogRnVuY3Rpb25zQXJnc1tJbmRleF07XG4gICAgfTtcblxuZXhwb3J0IHR5cGUgUnVubmFibGVUb29sczxGdW5jdGlvbnNBcmdzIGV4dGVuZHMgQmFzZUZ1bmN0aW9uc0FyZ3M+ID1cbiAgW2FueVtdXSBleHRlbmRzIFtGdW5jdGlvbnNBcmdzXSA/IHJlYWRvbmx5IFJ1bm5hYmxlVG9vbEZ1bmN0aW9uPGFueT5bXVxuICA6IHtcbiAgICAgIFtJbmRleCBpbiBrZXlvZiBGdW5jdGlvbnNBcmdzXTogSW5kZXggZXh0ZW5kcyBudW1iZXIgPyBSdW5uYWJsZVRvb2xGdW5jdGlvbjxGdW5jdGlvbnNBcmdzW0luZGV4XT5cbiAgICAgIDogRnVuY3Rpb25zQXJnc1tJbmRleF07XG4gICAgfTtcblxuLyoqXG4gKiBUaGlzIGlzIGhlbHBlciBjbGFzcyBmb3IgcGFzc2luZyBhIGBmdW5jdGlvbmAgYW5kIGBwYXJzZWAgd2hlcmUgdGhlIGBmdW5jdGlvbmBcbiAqIGFyZ3VtZW50IHR5cGUgbWF0Y2hlcyB0aGUgYHBhcnNlYCByZXR1cm4gdHlwZS5cbiAqXG4gKiBAZGVwcmVjYXRlZCAtIHBsZWFzZSB1c2UgUGFyc2luZ1Rvb2xGdW5jdGlvbiBpbnN0ZWFkLlxuICovXG5leHBvcnQgY2xhc3MgUGFyc2luZ0Z1bmN0aW9uPEFyZ3MgZXh0ZW5kcyBvYmplY3Q+IHtcbiAgZnVuY3Rpb246IFJ1bm5hYmxlRnVuY3Rpb25XaXRoUGFyc2U8QXJncz5bJ2Z1bmN0aW9uJ107XG4gIHBhcnNlOiBSdW5uYWJsZUZ1bmN0aW9uV2l0aFBhcnNlPEFyZ3M+WydwYXJzZSddO1xuICBwYXJhbWV0ZXJzOiBSdW5uYWJsZUZ1bmN0aW9uV2l0aFBhcnNlPEFyZ3M+WydwYXJhbWV0ZXJzJ107XG4gIGRlc2NyaXB0aW9uOiBSdW5uYWJsZUZ1bmN0aW9uV2l0aFBhcnNlPEFyZ3M+WydkZXNjcmlwdGlvbiddO1xuICBuYW1lPzogUnVubmFibGVGdW5jdGlvbldpdGhQYXJzZTxBcmdzPlsnbmFtZSddO1xuXG4gIGNvbnN0cnVjdG9yKGlucHV0OiBSdW5uYWJsZUZ1bmN0aW9uV2l0aFBhcnNlPEFyZ3M+KSB7XG4gICAgdGhpcy5mdW5jdGlvbiA9IGlucHV0LmZ1bmN0aW9uO1xuICAgIHRoaXMucGFyc2UgPSBpbnB1dC5wYXJzZTtcbiAgICB0aGlzLnBhcmFtZXRlcnMgPSBpbnB1dC5wYXJhbWV0ZXJzO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBpbnB1dC5kZXNjcmlwdGlvbjtcbiAgICB0aGlzLm5hbWUgPSBpbnB1dC5uYW1lO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBpcyBoZWxwZXIgY2xhc3MgZm9yIHBhc3NpbmcgYSBgZnVuY3Rpb25gIGFuZCBgcGFyc2VgIHdoZXJlIHRoZSBgZnVuY3Rpb25gXG4gKiBhcmd1bWVudCB0eXBlIG1hdGNoZXMgdGhlIGBwYXJzZWAgcmV0dXJuIHR5cGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBQYXJzaW5nVG9vbEZ1bmN0aW9uPEFyZ3MgZXh0ZW5kcyBvYmplY3Q+IHtcbiAgdHlwZTogJ2Z1bmN0aW9uJztcbiAgZnVuY3Rpb246IFJ1bm5hYmxlRnVuY3Rpb25XaXRoUGFyc2U8QXJncz47XG5cbiAgY29uc3RydWN0b3IoaW5wdXQ6IFJ1bm5hYmxlRnVuY3Rpb25XaXRoUGFyc2U8QXJncz4pIHtcbiAgICB0aGlzLnR5cGUgPSAnZnVuY3Rpb24nO1xuICAgIHRoaXMuZnVuY3Rpb24gPSBpbnB1dDtcbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIHR5cGUgQ2hhdENvbXBsZXRpb25Bc3Npc3RhbnRNZXNzYWdlUGFyYW0sXG4gIHR5cGUgQ2hhdENvbXBsZXRpb25GdW5jdGlvbk1lc3NhZ2VQYXJhbSxcbiAgdHlwZSBDaGF0Q29tcGxldGlvbk1lc3NhZ2VQYXJhbSxcbiAgdHlwZSBDaGF0Q29tcGxldGlvblRvb2xNZXNzYWdlUGFyYW0sXG59IGZyb20gJy4uL3Jlc291cmNlcyc7XG5cbmV4cG9ydCBjb25zdCBpc0Fzc2lzdGFudE1lc3NhZ2UgPSAoXG4gIG1lc3NhZ2U6IENoYXRDb21wbGV0aW9uTWVzc2FnZVBhcmFtIHwgbnVsbCB8IHVuZGVmaW5lZCxcbik6IG1lc3NhZ2UgaXMgQ2hhdENvbXBsZXRpb25Bc3Npc3RhbnRNZXNzYWdlUGFyYW0gPT4ge1xuICByZXR1cm4gbWVzc2FnZT8ucm9sZSA9PT0gJ2Fzc2lzdGFudCc7XG59O1xuXG5leHBvcnQgY29uc3QgaXNGdW5jdGlvbk1lc3NhZ2UgPSAoXG4gIG1lc3NhZ2U6IENoYXRDb21wbGV0aW9uTWVzc2FnZVBhcmFtIHwgbnVsbCB8IHVuZGVmaW5lZCxcbik6IG1lc3NhZ2UgaXMgQ2hhdENvbXBsZXRpb25GdW5jdGlvbk1lc3NhZ2VQYXJhbSA9PiB7XG4gIHJldHVybiBtZXNzYWdlPy5yb2xlID09PSAnZnVuY3Rpb24nO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzVG9vbE1lc3NhZ2UgPSAoXG4gIG1lc3NhZ2U6IENoYXRDb21wbGV0aW9uTWVzc2FnZVBhcmFtIHwgbnVsbCB8IHVuZGVmaW5lZCxcbik6IG1lc3NhZ2UgaXMgQ2hhdENvbXBsZXRpb25Ub29sTWVzc2FnZVBhcmFtID0+IHtcbiAgcmV0dXJuIG1lc3NhZ2U/LnJvbGUgPT09ICd0b29sJztcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ByZXNlbnQ8VD4ob2JqOiBUIHwgbnVsbCB8IHVuZGVmaW5lZCk6IG9iaiBpcyBUIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsO1xufVxuIiwgImltcG9ydCB7XG4gIENoYXRDb21wbGV0aW9uLFxuICBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtcyxcbiAgQ2hhdENvbXBsZXRpb25NZXNzYWdlVG9vbENhbGwsXG4gIENoYXRDb21wbGV0aW9uVG9vbCxcbn0gZnJvbSAnLi4vcmVzb3VyY2VzL2NoYXQvY29tcGxldGlvbnMnO1xuaW1wb3J0IHtcbiAgQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdUb29sUnVubmVyUGFyYW1zLFxuICBDaGF0Q29tcGxldGlvblN0cmVhbVBhcmFtcyxcbiAgQ2hhdENvbXBsZXRpb25Ub29sUnVubmVyUGFyYW1zLFxuICBQYXJzZWRDaGF0Q29tcGxldGlvbixcbiAgUGFyc2VkQ2hvaWNlLFxuICBQYXJzZWRGdW5jdGlvblRvb2xDYWxsLFxufSBmcm9tICcuLi9yZXNvdXJjZXMvYmV0YS9jaGF0L2NvbXBsZXRpb25zJztcbmltcG9ydCB7IFJlc3BvbnNlRm9ybWF0SlNPTlNjaGVtYSB9IGZyb20gJy4uL3Jlc291cmNlcy9zaGFyZWQnO1xuaW1wb3J0IHsgQ29udGVudEZpbHRlckZpbmlzaFJlYXNvbkVycm9yLCBMZW5ndGhGaW5pc2hSZWFzb25FcnJvciwgT3BlbkFJRXJyb3IgfSBmcm9tICcuLi9lcnJvcic7XG5pbXBvcnQgeyB0eXBlIFJlc3BvbnNlRm9ybWF0VGV4dEpTT05TY2hlbWFDb25maWcgfSBmcm9tICcuLi9yZXNvdXJjZXMvcmVzcG9uc2VzL3Jlc3BvbnNlcyc7XG5cbnR5cGUgQW55Q2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXMgPVxuICB8IENoYXRDb21wbGV0aW9uQ3JlYXRlUGFyYW1zXG4gIHwgQ2hhdENvbXBsZXRpb25Ub29sUnVubmVyUGFyYW1zPGFueT5cbiAgfCBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1Rvb2xSdW5uZXJQYXJhbXM8YW55PlxuICB8IENoYXRDb21wbGV0aW9uU3RyZWFtUGFyYW1zO1xuXG5leHBvcnQgdHlwZSBFeHRyYWN0UGFyc2VkQ29udGVudEZyb21QYXJhbXM8UGFyYW1zIGV4dGVuZHMgQW55Q2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXM+ID1cbiAgUGFyYW1zWydyZXNwb25zZV9mb3JtYXQnXSBleHRlbmRzIEF1dG9QYXJzZWFibGVSZXNwb25zZUZvcm1hdDxpbmZlciBQPiA/IFAgOiBudWxsO1xuXG5leHBvcnQgdHlwZSBBdXRvUGFyc2VhYmxlUmVzcG9uc2VGb3JtYXQ8UGFyc2VkVD4gPSBSZXNwb25zZUZvcm1hdEpTT05TY2hlbWEgJiB7XG4gIF9fb3V0cHV0OiBQYXJzZWRUOyAvLyB0eXBlLWxldmVsIG9ubHlcblxuICAkYnJhbmQ6ICdhdXRvLXBhcnNlYWJsZS1yZXNwb25zZS1mb3JtYXQnO1xuICAkcGFyc2VSYXcoY29udGVudDogc3RyaW5nKTogUGFyc2VkVDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlUGFyc2VhYmxlUmVzcG9uc2VGb3JtYXQ8UGFyc2VkVD4oXG4gIHJlc3BvbnNlX2Zvcm1hdDogUmVzcG9uc2VGb3JtYXRKU09OU2NoZW1hLFxuICBwYXJzZXI6IChjb250ZW50OiBzdHJpbmcpID0+IFBhcnNlZFQsXG4pOiBBdXRvUGFyc2VhYmxlUmVzcG9uc2VGb3JtYXQ8UGFyc2VkVD4ge1xuICBjb25zdCBvYmogPSB7IC4uLnJlc3BvbnNlX2Zvcm1hdCB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwge1xuICAgICRicmFuZDoge1xuICAgICAgdmFsdWU6ICdhdXRvLXBhcnNlYWJsZS1yZXNwb25zZS1mb3JtYXQnLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgfSxcbiAgICAkcGFyc2VSYXc6IHtcbiAgICAgIHZhbHVlOiBwYXJzZXIsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB9LFxuICB9KTtcblxuICByZXR1cm4gb2JqIGFzIEF1dG9QYXJzZWFibGVSZXNwb25zZUZvcm1hdDxQYXJzZWRUPjtcbn1cblxuZXhwb3J0IHR5cGUgQXV0b1BhcnNlYWJsZVRleHRGb3JtYXQ8UGFyc2VkVD4gPSBSZXNwb25zZUZvcm1hdFRleHRKU09OU2NoZW1hQ29uZmlnICYge1xuICBfX291dHB1dDogUGFyc2VkVDsgLy8gdHlwZS1sZXZlbCBvbmx5XG5cbiAgJGJyYW5kOiAnYXV0by1wYXJzZWFibGUtcmVzcG9uc2UtZm9ybWF0JztcbiAgJHBhcnNlUmF3KGNvbnRlbnQ6IHN0cmluZyk6IFBhcnNlZFQ7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gbWFrZVBhcnNlYWJsZVRleHRGb3JtYXQ8UGFyc2VkVD4oXG4gIHJlc3BvbnNlX2Zvcm1hdDogUmVzcG9uc2VGb3JtYXRUZXh0SlNPTlNjaGVtYUNvbmZpZyxcbiAgcGFyc2VyOiAoY29udGVudDogc3RyaW5nKSA9PiBQYXJzZWRULFxuKTogQXV0b1BhcnNlYWJsZVRleHRGb3JtYXQ8UGFyc2VkVD4ge1xuICBjb25zdCBvYmogPSB7IC4uLnJlc3BvbnNlX2Zvcm1hdCB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwge1xuICAgICRicmFuZDoge1xuICAgICAgdmFsdWU6ICdhdXRvLXBhcnNlYWJsZS1yZXNwb25zZS1mb3JtYXQnLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgfSxcbiAgICAkcGFyc2VSYXc6IHtcbiAgICAgIHZhbHVlOiBwYXJzZXIsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB9LFxuICB9KTtcblxuICByZXR1cm4gb2JqIGFzIEF1dG9QYXJzZWFibGVUZXh0Rm9ybWF0PFBhcnNlZFQ+O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBdXRvUGFyc2FibGVSZXNwb25zZUZvcm1hdDxQYXJzZWRUPihcbiAgcmVzcG9uc2VfZm9ybWF0OiBhbnksXG4pOiByZXNwb25zZV9mb3JtYXQgaXMgQXV0b1BhcnNlYWJsZVJlc3BvbnNlRm9ybWF0PFBhcnNlZFQ+IHtcbiAgcmV0dXJuIHJlc3BvbnNlX2Zvcm1hdD8uWyckYnJhbmQnXSA9PT0gJ2F1dG8tcGFyc2VhYmxlLXJlc3BvbnNlLWZvcm1hdCc7XG59XG5cbnR5cGUgVG9vbE9wdGlvbnMgPSB7XG4gIG5hbWU6IHN0cmluZztcbiAgYXJndW1lbnRzOiBhbnk7XG4gIGZ1bmN0aW9uPzogKChhcmdzOiBhbnkpID0+IGFueSkgfCB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgdHlwZSBBdXRvUGFyc2VhYmxlVG9vbDxcbiAgT3B0aW9uc1QgZXh0ZW5kcyBUb29sT3B0aW9ucyxcbiAgSGFzRnVuY3Rpb24gPSBPcHRpb25zVFsnZnVuY3Rpb24nXSBleHRlbmRzIEZ1bmN0aW9uID8gdHJ1ZSA6IGZhbHNlLFxuPiA9IENoYXRDb21wbGV0aW9uVG9vbCAmIHtcbiAgX19hcmd1bWVudHM6IE9wdGlvbnNUWydhcmd1bWVudHMnXTsgLy8gdHlwZS1sZXZlbCBvbmx5XG4gIF9fbmFtZTogT3B0aW9uc1RbJ25hbWUnXTsgLy8gdHlwZS1sZXZlbCBvbmx5XG4gIF9faGFzRnVuY3Rpb246IEhhc0Z1bmN0aW9uOyAvLyB0eXBlLWxldmVsIG9ubHlcblxuICAkYnJhbmQ6ICdhdXRvLXBhcnNlYWJsZS10b29sJztcbiAgJGNhbGxiYWNrOiAoKGFyZ3M6IE9wdGlvbnNUWydhcmd1bWVudHMnXSkgPT4gYW55KSB8IHVuZGVmaW5lZDtcbiAgJHBhcnNlUmF3KGFyZ3M6IHN0cmluZyk6IE9wdGlvbnNUWydhcmd1bWVudHMnXTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlUGFyc2VhYmxlVG9vbDxPcHRpb25zVCBleHRlbmRzIFRvb2xPcHRpb25zPihcbiAgdG9vbDogQ2hhdENvbXBsZXRpb25Ub29sLFxuICB7XG4gICAgcGFyc2VyLFxuICAgIGNhbGxiYWNrLFxuICB9OiB7XG4gICAgcGFyc2VyOiAoY29udGVudDogc3RyaW5nKSA9PiBPcHRpb25zVFsnYXJndW1lbnRzJ107XG4gICAgY2FsbGJhY2s6ICgoYXJnczogYW55KSA9PiBhbnkpIHwgdW5kZWZpbmVkO1xuICB9LFxuKTogQXV0b1BhcnNlYWJsZVRvb2w8T3B0aW9uc1RbJ2FyZ3VtZW50cyddPiB7XG4gIGNvbnN0IG9iaiA9IHsgLi4udG9vbCB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwge1xuICAgICRicmFuZDoge1xuICAgICAgdmFsdWU6ICdhdXRvLXBhcnNlYWJsZS10b29sJyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIH0sXG4gICAgJHBhcnNlUmF3OiB7XG4gICAgICB2YWx1ZTogcGFyc2VyLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgfSxcbiAgICAkY2FsbGJhY2s6IHtcbiAgICAgIHZhbHVlOiBjYWxsYmFjayxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiBvYmogYXMgQXV0b1BhcnNlYWJsZVRvb2w8T3B0aW9uc1RbJ2FyZ3VtZW50cyddPjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQXV0b1BhcnNhYmxlVG9vbCh0b29sOiBhbnkpOiB0b29sIGlzIEF1dG9QYXJzZWFibGVUb29sPGFueT4ge1xuICByZXR1cm4gdG9vbD8uWyckYnJhbmQnXSA9PT0gJ2F1dG8tcGFyc2VhYmxlLXRvb2wnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWF5YmVQYXJzZUNoYXRDb21wbGV0aW9uPFxuICBQYXJhbXMgZXh0ZW5kcyBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtcyB8IG51bGwsXG4gIFBhcnNlZFQgPSBQYXJhbXMgZXh0ZW5kcyBudWxsID8gbnVsbCA6IEV4dHJhY3RQYXJzZWRDb250ZW50RnJvbVBhcmFtczxOb25OdWxsYWJsZTxQYXJhbXM+Pixcbj4oY29tcGxldGlvbjogQ2hhdENvbXBsZXRpb24sIHBhcmFtczogUGFyYW1zKTogUGFyc2VkQ2hhdENvbXBsZXRpb248UGFyc2VkVD4ge1xuICBpZiAoIXBhcmFtcyB8fCAhaGFzQXV0b1BhcnNlYWJsZUlucHV0KHBhcmFtcykpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4uY29tcGxldGlvbixcbiAgICAgIGNob2ljZXM6IGNvbXBsZXRpb24uY2hvaWNlcy5tYXAoKGNob2ljZSkgPT4gKHtcbiAgICAgICAgLi4uY2hvaWNlLFxuICAgICAgICBtZXNzYWdlOiB7XG4gICAgICAgICAgLi4uY2hvaWNlLm1lc3NhZ2UsXG4gICAgICAgICAgcGFyc2VkOiBudWxsLFxuICAgICAgICAgIC4uLihjaG9pY2UubWVzc2FnZS50b29sX2NhbGxzID9cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdG9vbF9jYWxsczogY2hvaWNlLm1lc3NhZ2UudG9vbF9jYWxscyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA6IHVuZGVmaW5lZCksXG4gICAgICAgIH0sXG4gICAgICB9KSksXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBwYXJzZUNoYXRDb21wbGV0aW9uKGNvbXBsZXRpb24sIHBhcmFtcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUNoYXRDb21wbGV0aW9uPFxuICBQYXJhbXMgZXh0ZW5kcyBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtcyxcbiAgUGFyc2VkVCA9IEV4dHJhY3RQYXJzZWRDb250ZW50RnJvbVBhcmFtczxQYXJhbXM+LFxuPihjb21wbGV0aW9uOiBDaGF0Q29tcGxldGlvbiwgcGFyYW1zOiBQYXJhbXMpOiBQYXJzZWRDaGF0Q29tcGxldGlvbjxQYXJzZWRUPiB7XG4gIGNvbnN0IGNob2ljZXM6IEFycmF5PFBhcnNlZENob2ljZTxQYXJzZWRUPj4gPSBjb21wbGV0aW9uLmNob2ljZXMubWFwKChjaG9pY2UpOiBQYXJzZWRDaG9pY2U8UGFyc2VkVD4gPT4ge1xuICAgIGlmIChjaG9pY2UuZmluaXNoX3JlYXNvbiA9PT0gJ2xlbmd0aCcpIHtcbiAgICAgIHRocm93IG5ldyBMZW5ndGhGaW5pc2hSZWFzb25FcnJvcigpO1xuICAgIH1cblxuICAgIGlmIChjaG9pY2UuZmluaXNoX3JlYXNvbiA9PT0gJ2NvbnRlbnRfZmlsdGVyJykge1xuICAgICAgdGhyb3cgbmV3IENvbnRlbnRGaWx0ZXJGaW5pc2hSZWFzb25FcnJvcigpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAuLi5jaG9pY2UsXG4gICAgICBtZXNzYWdlOiB7XG4gICAgICAgIC4uLmNob2ljZS5tZXNzYWdlLFxuICAgICAgICAuLi4oY2hvaWNlLm1lc3NhZ2UudG9vbF9jYWxscyA/XG4gICAgICAgICAge1xuICAgICAgICAgICAgdG9vbF9jYWxsczpcbiAgICAgICAgICAgICAgY2hvaWNlLm1lc3NhZ2UudG9vbF9jYWxscz8ubWFwKCh0b29sQ2FsbCkgPT4gcGFyc2VUb29sQ2FsbChwYXJhbXMsIHRvb2xDYWxsKSkgPz8gdW5kZWZpbmVkLFxuICAgICAgICAgIH1cbiAgICAgICAgOiB1bmRlZmluZWQpLFxuICAgICAgICBwYXJzZWQ6XG4gICAgICAgICAgY2hvaWNlLm1lc3NhZ2UuY29udGVudCAmJiAhY2hvaWNlLm1lc3NhZ2UucmVmdXNhbCA/XG4gICAgICAgICAgICBwYXJzZVJlc3BvbnNlRm9ybWF0KHBhcmFtcywgY2hvaWNlLm1lc3NhZ2UuY29udGVudClcbiAgICAgICAgICA6IG51bGwsXG4gICAgICB9LFxuICAgIH07XG4gIH0pO1xuXG4gIHJldHVybiB7IC4uLmNvbXBsZXRpb24sIGNob2ljZXMgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VSZXNwb25zZUZvcm1hdDxcbiAgUGFyYW1zIGV4dGVuZHMgQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXMsXG4gIFBhcnNlZFQgPSBFeHRyYWN0UGFyc2VkQ29udGVudEZyb21QYXJhbXM8UGFyYW1zPixcbj4ocGFyYW1zOiBQYXJhbXMsIGNvbnRlbnQ6IHN0cmluZyk6IFBhcnNlZFQgfCBudWxsIHtcbiAgaWYgKHBhcmFtcy5yZXNwb25zZV9mb3JtYXQ/LnR5cGUgIT09ICdqc29uX3NjaGVtYScpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChwYXJhbXMucmVzcG9uc2VfZm9ybWF0Py50eXBlID09PSAnanNvbl9zY2hlbWEnKSB7XG4gICAgaWYgKCckcGFyc2VSYXcnIGluIHBhcmFtcy5yZXNwb25zZV9mb3JtYXQpIHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlX2Zvcm1hdCA9IHBhcmFtcy5yZXNwb25zZV9mb3JtYXQgYXMgQXV0b1BhcnNlYWJsZVJlc3BvbnNlRm9ybWF0PFBhcnNlZFQ+O1xuXG4gICAgICByZXR1cm4gcmVzcG9uc2VfZm9ybWF0LiRwYXJzZVJhdyhjb250ZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gSlNPTi5wYXJzZShjb250ZW50KTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRvb2xDYWxsPFBhcmFtcyBleHRlbmRzIENoYXRDb21wbGV0aW9uQ3JlYXRlUGFyYW1zPihcbiAgcGFyYW1zOiBQYXJhbXMsXG4gIHRvb2xDYWxsOiBDaGF0Q29tcGxldGlvbk1lc3NhZ2VUb29sQ2FsbCxcbik6IFBhcnNlZEZ1bmN0aW9uVG9vbENhbGwge1xuICBjb25zdCBpbnB1dFRvb2wgPSBwYXJhbXMudG9vbHM/LmZpbmQoKGlucHV0VG9vbCkgPT4gaW5wdXRUb29sLmZ1bmN0aW9uPy5uYW1lID09PSB0b29sQ2FsbC5mdW5jdGlvbi5uYW1lKTtcbiAgcmV0dXJuIHtcbiAgICAuLi50b29sQ2FsbCxcbiAgICBmdW5jdGlvbjoge1xuICAgICAgLi4udG9vbENhbGwuZnVuY3Rpb24sXG4gICAgICBwYXJzZWRfYXJndW1lbnRzOlxuICAgICAgICBpc0F1dG9QYXJzYWJsZVRvb2woaW5wdXRUb29sKSA/IGlucHV0VG9vbC4kcGFyc2VSYXcodG9vbENhbGwuZnVuY3Rpb24uYXJndW1lbnRzKVxuICAgICAgICA6IGlucHV0VG9vbD8uZnVuY3Rpb24uc3RyaWN0ID8gSlNPTi5wYXJzZSh0b29sQ2FsbC5mdW5jdGlvbi5hcmd1bWVudHMpXG4gICAgICAgIDogbnVsbCxcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkUGFyc2VUb29sQ2FsbChcbiAgcGFyYW1zOiBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtcyB8IG51bGwgfCB1bmRlZmluZWQsXG4gIHRvb2xDYWxsOiBDaGF0Q29tcGxldGlvbk1lc3NhZ2VUb29sQ2FsbCxcbik6IGJvb2xlYW4ge1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGlucHV0VG9vbCA9IHBhcmFtcy50b29scz8uZmluZCgoaW5wdXRUb29sKSA9PiBpbnB1dFRvb2wuZnVuY3Rpb24/Lm5hbWUgPT09IHRvb2xDYWxsLmZ1bmN0aW9uLm5hbWUpO1xuICByZXR1cm4gaXNBdXRvUGFyc2FibGVUb29sKGlucHV0VG9vbCkgfHwgaW5wdXRUb29sPy5mdW5jdGlvbi5zdHJpY3QgfHwgZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNBdXRvUGFyc2VhYmxlSW5wdXQocGFyYW1zOiBBbnlDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtcyk6IGJvb2xlYW4ge1xuICBpZiAoaXNBdXRvUGFyc2FibGVSZXNwb25zZUZvcm1hdChwYXJhbXMucmVzcG9uc2VfZm9ybWF0KSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICBwYXJhbXMudG9vbHM/LnNvbWUoXG4gICAgICAodCkgPT4gaXNBdXRvUGFyc2FibGVUb29sKHQpIHx8ICh0LnR5cGUgPT09ICdmdW5jdGlvbicgJiYgdC5mdW5jdGlvbi5zdHJpY3QgPT09IHRydWUpLFxuICAgICkgPz8gZmFsc2VcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlSW5wdXRUb29scyh0b29sczogQ2hhdENvbXBsZXRpb25Ub29sW10gfCB1bmRlZmluZWQpIHtcbiAgZm9yIChjb25zdCB0b29sIG9mIHRvb2xzID8/IFtdKSB7XG4gICAgaWYgKHRvb2wudHlwZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKFxuICAgICAgICBgQ3VycmVudGx5IG9ubHkgXFxgZnVuY3Rpb25cXGAgdG9vbCB0eXBlcyBzdXBwb3J0IGF1dG8tcGFyc2luZzsgUmVjZWl2ZWQgXFxgJHt0b29sLnR5cGV9XFxgYCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHRvb2wuZnVuY3Rpb24uc3RyaWN0ICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoXG4gICAgICAgIGBUaGUgXFxgJHt0b29sLmZ1bmN0aW9uLm5hbWV9XFxgIHRvb2wgaXMgbm90IG1hcmtlZCB3aXRoIFxcYHN0cmljdDogdHJ1ZVxcYC4gT25seSBzdHJpY3QgZnVuY3Rpb24gdG9vbHMgY2FuIGJlIGF1dG8tcGFyc2VkYCxcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG4iLCAiaW1wb3J0ICogYXMgQ29yZSBmcm9tICcuLi9jb3JlJztcbmltcG9ydCB7IHR5cGUgQ29tcGxldGlvblVzYWdlIH0gZnJvbSAnLi4vcmVzb3VyY2VzL2NvbXBsZXRpb25zJztcbmltcG9ydCB7XG4gIHR5cGUgQ2hhdENvbXBsZXRpb24sXG4gIHR5cGUgQ2hhdENvbXBsZXRpb25NZXNzYWdlLFxuICB0eXBlIENoYXRDb21wbGV0aW9uTWVzc2FnZVBhcmFtLFxuICB0eXBlIENoYXRDb21wbGV0aW9uQ3JlYXRlUGFyYW1zLFxuICB0eXBlIENoYXRDb21wbGV0aW9uVG9vbCxcbn0gZnJvbSAnLi4vcmVzb3VyY2VzL2NoYXQvY29tcGxldGlvbnMnO1xuaW1wb3J0IHsgT3BlbkFJRXJyb3IgfSBmcm9tICcuLi9lcnJvcic7XG5pbXBvcnQge1xuICB0eXBlIFJ1bm5hYmxlRnVuY3Rpb24sXG4gIGlzUnVubmFibGVGdW5jdGlvbldpdGhQYXJzZSxcbiAgdHlwZSBCYXNlRnVuY3Rpb25zQXJncyxcbiAgUnVubmFibGVUb29sRnVuY3Rpb24sXG59IGZyb20gJy4vUnVubmFibGVGdW5jdGlvbic7XG5pbXBvcnQgeyBDaGF0Q29tcGxldGlvbkZ1bmN0aW9uUnVubmVyUGFyYW1zLCBDaGF0Q29tcGxldGlvblRvb2xSdW5uZXJQYXJhbXMgfSBmcm9tICcuL0NoYXRDb21wbGV0aW9uUnVubmVyJztcbmltcG9ydCB7XG4gIENoYXRDb21wbGV0aW9uU3RyZWFtaW5nRnVuY3Rpb25SdW5uZXJQYXJhbXMsXG4gIENoYXRDb21wbGV0aW9uU3RyZWFtaW5nVG9vbFJ1bm5lclBhcmFtcyxcbn0gZnJvbSAnLi9DaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lcic7XG5pbXBvcnQgeyBpc0Fzc2lzdGFudE1lc3NhZ2UsIGlzRnVuY3Rpb25NZXNzYWdlLCBpc1Rvb2xNZXNzYWdlIH0gZnJvbSAnLi9jaGF0Q29tcGxldGlvblV0aWxzJztcbmltcG9ydCB7IEJhc2VFdmVudHMsIEV2ZW50U3RyZWFtIH0gZnJvbSAnLi9FdmVudFN0cmVhbSc7XG5pbXBvcnQgeyBQYXJzZWRDaGF0Q29tcGxldGlvbiB9IGZyb20gJy4uL3Jlc291cmNlcy9iZXRhL2NoYXQvY29tcGxldGlvbnMnO1xuaW1wb3J0IE9wZW5BSSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgeyBpc0F1dG9QYXJzYWJsZVRvb2wsIHBhcnNlQ2hhdENvbXBsZXRpb24gfSBmcm9tICcuLi9saWIvcGFyc2VyJztcblxuY29uc3QgREVGQVVMVF9NQVhfQ0hBVF9DT01QTEVUSU9OUyA9IDEwO1xuZXhwb3J0IGludGVyZmFjZSBSdW5uZXJPcHRpb25zIGV4dGVuZHMgQ29yZS5SZXF1ZXN0T3B0aW9ucyB7XG4gIC8qKiBIb3cgbWFueSByZXF1ZXN0cyB0byBtYWtlIGJlZm9yZSBjYW5jZWxpbmcuIERlZmF1bHQgMTAuICovXG4gIG1heENoYXRDb21wbGV0aW9ucz86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIEFic3RyYWN0Q2hhdENvbXBsZXRpb25SdW5uZXI8XG4gIEV2ZW50VHlwZXMgZXh0ZW5kcyBBYnN0cmFjdENoYXRDb21wbGV0aW9uUnVubmVyRXZlbnRzLFxuICBQYXJzZWRULFxuPiBleHRlbmRzIEV2ZW50U3RyZWFtPEV2ZW50VHlwZXM+IHtcbiAgcHJvdGVjdGVkIF9jaGF0Q29tcGxldGlvbnM6IFBhcnNlZENoYXRDb21wbGV0aW9uPFBhcnNlZFQ+W10gPSBbXTtcbiAgbWVzc2FnZXM6IENoYXRDb21wbGV0aW9uTWVzc2FnZVBhcmFtW10gPSBbXTtcblxuICBwcm90ZWN0ZWQgX2FkZENoYXRDb21wbGV0aW9uKFxuICAgIHRoaXM6IEFic3RyYWN0Q2hhdENvbXBsZXRpb25SdW5uZXI8QWJzdHJhY3RDaGF0Q29tcGxldGlvblJ1bm5lckV2ZW50cywgUGFyc2VkVD4sXG4gICAgY2hhdENvbXBsZXRpb246IFBhcnNlZENoYXRDb21wbGV0aW9uPFBhcnNlZFQ+LFxuICApOiBQYXJzZWRDaGF0Q29tcGxldGlvbjxQYXJzZWRUPiB7XG4gICAgdGhpcy5fY2hhdENvbXBsZXRpb25zLnB1c2goY2hhdENvbXBsZXRpb24pO1xuICAgIHRoaXMuX2VtaXQoJ2NoYXRDb21wbGV0aW9uJywgY2hhdENvbXBsZXRpb24pO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjaGF0Q29tcGxldGlvbi5jaG9pY2VzWzBdPy5tZXNzYWdlO1xuICAgIGlmIChtZXNzYWdlKSB0aGlzLl9hZGRNZXNzYWdlKG1lc3NhZ2UgYXMgQ2hhdENvbXBsZXRpb25NZXNzYWdlUGFyYW0pO1xuICAgIHJldHVybiBjaGF0Q29tcGxldGlvbjtcbiAgfVxuXG4gIHByb3RlY3RlZCBfYWRkTWVzc2FnZShcbiAgICB0aGlzOiBBYnN0cmFjdENoYXRDb21wbGV0aW9uUnVubmVyPEFic3RyYWN0Q2hhdENvbXBsZXRpb25SdW5uZXJFdmVudHMsIFBhcnNlZFQ+LFxuICAgIG1lc3NhZ2U6IENoYXRDb21wbGV0aW9uTWVzc2FnZVBhcmFtLFxuICAgIGVtaXQgPSB0cnVlLFxuICApIHtcbiAgICBpZiAoISgnY29udGVudCcgaW4gbWVzc2FnZSkpIG1lc3NhZ2UuY29udGVudCA9IG51bGw7XG5cbiAgICB0aGlzLm1lc3NhZ2VzLnB1c2gobWVzc2FnZSk7XG5cbiAgICBpZiAoZW1pdCkge1xuICAgICAgdGhpcy5fZW1pdCgnbWVzc2FnZScsIG1lc3NhZ2UpO1xuICAgICAgaWYgKChpc0Z1bmN0aW9uTWVzc2FnZShtZXNzYWdlKSB8fCBpc1Rvb2xNZXNzYWdlKG1lc3NhZ2UpKSAmJiBtZXNzYWdlLmNvbnRlbnQpIHtcbiAgICAgICAgLy8gTm90ZSwgdGhpcyBhc3N1bWVzIHRoYXQge3JvbGU6ICd0b29sJywgY29udGVudDogXHUyMDI2fSBpcyBhbHdheXMgdGhlIHJlc3VsdCBvZiBhIGNhbGwgb2YgdG9vbCBvZiB0eXBlPWZ1bmN0aW9uLlxuICAgICAgICB0aGlzLl9lbWl0KCdmdW5jdGlvbkNhbGxSZXN1bHQnLCBtZXNzYWdlLmNvbnRlbnQgYXMgc3RyaW5nKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNBc3Npc3RhbnRNZXNzYWdlKG1lc3NhZ2UpICYmIG1lc3NhZ2UuZnVuY3Rpb25fY2FsbCkge1xuICAgICAgICB0aGlzLl9lbWl0KCdmdW5jdGlvbkNhbGwnLCBtZXNzYWdlLmZ1bmN0aW9uX2NhbGwpO1xuICAgICAgfSBlbHNlIGlmIChpc0Fzc2lzdGFudE1lc3NhZ2UobWVzc2FnZSkgJiYgbWVzc2FnZS50b29sX2NhbGxzKSB7XG4gICAgICAgIGZvciAoY29uc3QgdG9vbF9jYWxsIG9mIG1lc3NhZ2UudG9vbF9jYWxscykge1xuICAgICAgICAgIGlmICh0b29sX2NhbGwudHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fZW1pdCgnZnVuY3Rpb25DYWxsJywgdG9vbF9jYWxsLmZ1bmN0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgZmluYWwgQ2hhdENvbXBsZXRpb24sIG9yIHJlamVjdHNcbiAgICogaWYgYW4gZXJyb3Igb2NjdXJyZWQgb3IgdGhlIHN0cmVhbSBlbmRlZCBwcmVtYXR1cmVseSB3aXRob3V0IHByb2R1Y2luZyBhIENoYXRDb21wbGV0aW9uLlxuICAgKi9cbiAgYXN5bmMgZmluYWxDaGF0Q29tcGxldGlvbigpOiBQcm9taXNlPFBhcnNlZENoYXRDb21wbGV0aW9uPFBhcnNlZFQ+PiB7XG4gICAgYXdhaXQgdGhpcy5kb25lKCk7XG4gICAgY29uc3QgY29tcGxldGlvbiA9IHRoaXMuX2NoYXRDb21wbGV0aW9uc1t0aGlzLl9jaGF0Q29tcGxldGlvbnMubGVuZ3RoIC0gMV07XG4gICAgaWYgKCFjb21wbGV0aW9uKSB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoJ3N0cmVhbSBlbmRlZCB3aXRob3V0IHByb2R1Y2luZyBhIENoYXRDb21wbGV0aW9uJyk7XG4gICAgcmV0dXJuIGNvbXBsZXRpb247XG4gIH1cblxuICAjZ2V0RmluYWxDb250ZW50KCk6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLiNnZXRGaW5hbE1lc3NhZ2UoKS5jb250ZW50ID8/IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgY29udGVudCBvZiB0aGUgZmluYWwgQ2hhdENvbXBsZXRpb25NZXNzYWdlLCBvciByZWplY3RzXG4gICAqIGlmIGFuIGVycm9yIG9jY3VycmVkIG9yIHRoZSBzdHJlYW0gZW5kZWQgcHJlbWF0dXJlbHkgd2l0aG91dCBwcm9kdWNpbmcgYSBDaGF0Q29tcGxldGlvbk1lc3NhZ2UuXG4gICAqL1xuICBhc3luYyBmaW5hbENvbnRlbnQoKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XG4gICAgYXdhaXQgdGhpcy5kb25lKCk7XG4gICAgcmV0dXJuIHRoaXMuI2dldEZpbmFsQ29udGVudCgpO1xuICB9XG5cbiAgI2dldEZpbmFsTWVzc2FnZSgpOiBDaGF0Q29tcGxldGlvbk1lc3NhZ2Uge1xuICAgIGxldCBpID0gdGhpcy5tZXNzYWdlcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2VzW2ldO1xuICAgICAgaWYgKGlzQXNzaXN0YW50TWVzc2FnZShtZXNzYWdlKSkge1xuICAgICAgICBjb25zdCB7IGZ1bmN0aW9uX2NhbGwsIC4uLnJlc3QgfSA9IG1lc3NhZ2U7XG5cbiAgICAgICAgLy8gVE9ETzogc3VwcG9ydCBhdWRpbyBoZXJlXG4gICAgICAgIGNvbnN0IHJldDogT21pdDxDaGF0Q29tcGxldGlvbk1lc3NhZ2UsICdhdWRpbyc+ID0ge1xuICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgY29udGVudDogKG1lc3NhZ2UgYXMgQ2hhdENvbXBsZXRpb25NZXNzYWdlKS5jb250ZW50ID8/IG51bGwsXG4gICAgICAgICAgcmVmdXNhbDogKG1lc3NhZ2UgYXMgQ2hhdENvbXBsZXRpb25NZXNzYWdlKS5yZWZ1c2FsID8/IG51bGwsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChmdW5jdGlvbl9jYWxsKSB7XG4gICAgICAgICAgcmV0LmZ1bmN0aW9uX2NhbGwgPSBmdW5jdGlvbl9jYWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcignc3RyZWFtIGVuZGVkIHdpdGhvdXQgcHJvZHVjaW5nIGEgQ2hhdENvbXBsZXRpb25NZXNzYWdlIHdpdGggcm9sZT1hc3Npc3RhbnQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSB0aGUgZmluYWwgYXNzaXN0YW50IENoYXRDb21wbGV0aW9uTWVzc2FnZSByZXNwb25zZSxcbiAgICogb3IgcmVqZWN0cyBpZiBhbiBlcnJvciBvY2N1cnJlZCBvciB0aGUgc3RyZWFtIGVuZGVkIHByZW1hdHVyZWx5IHdpdGhvdXQgcHJvZHVjaW5nIGEgQ2hhdENvbXBsZXRpb25NZXNzYWdlLlxuICAgKi9cbiAgYXN5bmMgZmluYWxNZXNzYWdlKCk6IFByb21pc2U8Q2hhdENvbXBsZXRpb25NZXNzYWdlPiB7XG4gICAgYXdhaXQgdGhpcy5kb25lKCk7XG4gICAgcmV0dXJuIHRoaXMuI2dldEZpbmFsTWVzc2FnZSgpO1xuICB9XG5cbiAgI2dldEZpbmFsRnVuY3Rpb25DYWxsKCk6IENoYXRDb21wbGV0aW9uTWVzc2FnZS5GdW5jdGlvbkNhbGwgfCB1bmRlZmluZWQge1xuICAgIGZvciAobGV0IGkgPSB0aGlzLm1lc3NhZ2VzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5tZXNzYWdlc1tpXTtcbiAgICAgIGlmIChpc0Fzc2lzdGFudE1lc3NhZ2UobWVzc2FnZSkgJiYgbWVzc2FnZT8uZnVuY3Rpb25fY2FsbCkge1xuICAgICAgICByZXR1cm4gbWVzc2FnZS5mdW5jdGlvbl9jYWxsO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXNzaXN0YW50TWVzc2FnZShtZXNzYWdlKSAmJiBtZXNzYWdlPy50b29sX2NhbGxzPy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2UudG9vbF9jYWxscy5hdCgtMSk/LmZ1bmN0aW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBjb250ZW50IG9mIHRoZSBmaW5hbCBGdW5jdGlvbkNhbGwsIG9yIHJlamVjdHNcbiAgICogaWYgYW4gZXJyb3Igb2NjdXJyZWQgb3IgdGhlIHN0cmVhbSBlbmRlZCBwcmVtYXR1cmVseSB3aXRob3V0IHByb2R1Y2luZyBhIENoYXRDb21wbGV0aW9uTWVzc2FnZS5cbiAgICovXG4gIGFzeW5jIGZpbmFsRnVuY3Rpb25DYWxsKCk6IFByb21pc2U8Q2hhdENvbXBsZXRpb25NZXNzYWdlLkZ1bmN0aW9uQ2FsbCB8IHVuZGVmaW5lZD4ge1xuICAgIGF3YWl0IHRoaXMuZG9uZSgpO1xuICAgIHJldHVybiB0aGlzLiNnZXRGaW5hbEZ1bmN0aW9uQ2FsbCgpO1xuICB9XG5cbiAgI2dldEZpbmFsRnVuY3Rpb25DYWxsUmVzdWx0KCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgZm9yIChsZXQgaSA9IHRoaXMubWVzc2FnZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2VzW2ldO1xuICAgICAgaWYgKGlzRnVuY3Rpb25NZXNzYWdlKG1lc3NhZ2UpICYmIG1lc3NhZ2UuY29udGVudCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlLmNvbnRlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIGlzVG9vbE1lc3NhZ2UobWVzc2FnZSkgJiZcbiAgICAgICAgbWVzc2FnZS5jb250ZW50ICE9IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIG1lc3NhZ2UuY29udGVudCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgdGhpcy5tZXNzYWdlcy5zb21lKFxuICAgICAgICAgICh4KSA9PlxuICAgICAgICAgICAgeC5yb2xlID09PSAnYXNzaXN0YW50JyAmJlxuICAgICAgICAgICAgeC50b29sX2NhbGxzPy5zb21lKCh5KSA9PiB5LnR5cGUgPT09ICdmdW5jdGlvbicgJiYgeS5pZCA9PT0gbWVzc2FnZS50b29sX2NhbGxfaWQpLFxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2UuY29udGVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBhc3luYyBmaW5hbEZ1bmN0aW9uQ2FsbFJlc3VsdCgpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICAgIGF3YWl0IHRoaXMuZG9uZSgpO1xuICAgIHJldHVybiB0aGlzLiNnZXRGaW5hbEZ1bmN0aW9uQ2FsbFJlc3VsdCgpO1xuICB9XG5cbiAgI2NhbGN1bGF0ZVRvdGFsVXNhZ2UoKTogQ29tcGxldGlvblVzYWdlIHtcbiAgICBjb25zdCB0b3RhbDogQ29tcGxldGlvblVzYWdlID0ge1xuICAgICAgY29tcGxldGlvbl90b2tlbnM6IDAsXG4gICAgICBwcm9tcHRfdG9rZW5zOiAwLFxuICAgICAgdG90YWxfdG9rZW5zOiAwLFxuICAgIH07XG4gICAgZm9yIChjb25zdCB7IHVzYWdlIH0gb2YgdGhpcy5fY2hhdENvbXBsZXRpb25zKSB7XG4gICAgICBpZiAodXNhZ2UpIHtcbiAgICAgICAgdG90YWwuY29tcGxldGlvbl90b2tlbnMgKz0gdXNhZ2UuY29tcGxldGlvbl90b2tlbnM7XG4gICAgICAgIHRvdGFsLnByb21wdF90b2tlbnMgKz0gdXNhZ2UucHJvbXB0X3Rva2VucztcbiAgICAgICAgdG90YWwudG90YWxfdG9rZW5zICs9IHVzYWdlLnRvdGFsX3Rva2VucztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvdGFsO1xuICB9XG5cbiAgYXN5bmMgdG90YWxVc2FnZSgpOiBQcm9taXNlPENvbXBsZXRpb25Vc2FnZT4ge1xuICAgIGF3YWl0IHRoaXMuZG9uZSgpO1xuICAgIHJldHVybiB0aGlzLiNjYWxjdWxhdGVUb3RhbFVzYWdlKCk7XG4gIH1cblxuICBhbGxDaGF0Q29tcGxldGlvbnMoKTogQ2hhdENvbXBsZXRpb25bXSB7XG4gICAgcmV0dXJuIFsuLi50aGlzLl9jaGF0Q29tcGxldGlvbnNdO1xuICB9XG5cbiAgcHJvdGVjdGVkIG92ZXJyaWRlIF9lbWl0RmluYWwoXG4gICAgdGhpczogQWJzdHJhY3RDaGF0Q29tcGxldGlvblJ1bm5lcjxBYnN0cmFjdENoYXRDb21wbGV0aW9uUnVubmVyRXZlbnRzLCBQYXJzZWRUPixcbiAgKSB7XG4gICAgY29uc3QgY29tcGxldGlvbiA9IHRoaXMuX2NoYXRDb21wbGV0aW9uc1t0aGlzLl9jaGF0Q29tcGxldGlvbnMubGVuZ3RoIC0gMV07XG4gICAgaWYgKGNvbXBsZXRpb24pIHRoaXMuX2VtaXQoJ2ZpbmFsQ2hhdENvbXBsZXRpb24nLCBjb21wbGV0aW9uKTtcbiAgICBjb25zdCBmaW5hbE1lc3NhZ2UgPSB0aGlzLiNnZXRGaW5hbE1lc3NhZ2UoKTtcbiAgICBpZiAoZmluYWxNZXNzYWdlKSB0aGlzLl9lbWl0KCdmaW5hbE1lc3NhZ2UnLCBmaW5hbE1lc3NhZ2UpO1xuICAgIGNvbnN0IGZpbmFsQ29udGVudCA9IHRoaXMuI2dldEZpbmFsQ29udGVudCgpO1xuICAgIGlmIChmaW5hbENvbnRlbnQpIHRoaXMuX2VtaXQoJ2ZpbmFsQ29udGVudCcsIGZpbmFsQ29udGVudCk7XG5cbiAgICBjb25zdCBmaW5hbEZ1bmN0aW9uQ2FsbCA9IHRoaXMuI2dldEZpbmFsRnVuY3Rpb25DYWxsKCk7XG4gICAgaWYgKGZpbmFsRnVuY3Rpb25DYWxsKSB0aGlzLl9lbWl0KCdmaW5hbEZ1bmN0aW9uQ2FsbCcsIGZpbmFsRnVuY3Rpb25DYWxsKTtcblxuICAgIGNvbnN0IGZpbmFsRnVuY3Rpb25DYWxsUmVzdWx0ID0gdGhpcy4jZ2V0RmluYWxGdW5jdGlvbkNhbGxSZXN1bHQoKTtcbiAgICBpZiAoZmluYWxGdW5jdGlvbkNhbGxSZXN1bHQgIT0gbnVsbCkgdGhpcy5fZW1pdCgnZmluYWxGdW5jdGlvbkNhbGxSZXN1bHQnLCBmaW5hbEZ1bmN0aW9uQ2FsbFJlc3VsdCk7XG5cbiAgICBpZiAodGhpcy5fY2hhdENvbXBsZXRpb25zLnNvbWUoKGMpID0+IGMudXNhZ2UpKSB7XG4gICAgICB0aGlzLl9lbWl0KCd0b3RhbFVzYWdlJywgdGhpcy4jY2FsY3VsYXRlVG90YWxVc2FnZSgpKTtcbiAgICB9XG4gIH1cblxuICAjdmFsaWRhdGVQYXJhbXMocGFyYW1zOiBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtcyk6IHZvaWQge1xuICAgIGlmIChwYXJhbXMubiAhPSBudWxsICYmIHBhcmFtcy5uID4gMSkge1xuICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKFxuICAgICAgICAnQ2hhdENvbXBsZXRpb24gY29udmVuaWVuY2UgaGVscGVycyBvbmx5IHN1cHBvcnQgbj0xIGF0IHRoaXMgdGltZS4gVG8gdXNlIG4+MSwgcGxlYXNlIHVzZSBjaGF0LmNvbXBsZXRpb25zLmNyZWF0ZSgpIGRpcmVjdGx5LicsXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBfY3JlYXRlQ2hhdENvbXBsZXRpb24oXG4gICAgY2xpZW50OiBPcGVuQUksXG4gICAgcGFyYW1zOiBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogUHJvbWlzZTxQYXJzZWRDaGF0Q29tcGxldGlvbjxQYXJzZWRUPj4ge1xuICAgIGNvbnN0IHNpZ25hbCA9IG9wdGlvbnM/LnNpZ25hbDtcbiAgICBpZiAoc2lnbmFsKSB7XG4gICAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHRoaXMuY29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgKCkgPT4gdGhpcy5jb250cm9sbGVyLmFib3J0KCkpO1xuICAgIH1cbiAgICB0aGlzLiN2YWxpZGF0ZVBhcmFtcyhwYXJhbXMpO1xuXG4gICAgY29uc3QgY2hhdENvbXBsZXRpb24gPSBhd2FpdCBjbGllbnQuY2hhdC5jb21wbGV0aW9ucy5jcmVhdGUoXG4gICAgICB7IC4uLnBhcmFtcywgc3RyZWFtOiBmYWxzZSB9LFxuICAgICAgeyAuLi5vcHRpb25zLCBzaWduYWw6IHRoaXMuY29udHJvbGxlci5zaWduYWwgfSxcbiAgICApO1xuICAgIHRoaXMuX2Nvbm5lY3RlZCgpO1xuICAgIHJldHVybiB0aGlzLl9hZGRDaGF0Q29tcGxldGlvbihwYXJzZUNoYXRDb21wbGV0aW9uKGNoYXRDb21wbGV0aW9uLCBwYXJhbXMpKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBfcnVuQ2hhdENvbXBsZXRpb24oXG4gICAgY2xpZW50OiBPcGVuQUksXG4gICAgcGFyYW1zOiBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogUHJvbWlzZTxDaGF0Q29tcGxldGlvbj4ge1xuICAgIGZvciAoY29uc3QgbWVzc2FnZSBvZiBwYXJhbXMubWVzc2FnZXMpIHtcbiAgICAgIHRoaXMuX2FkZE1lc3NhZ2UobWVzc2FnZSwgZmFsc2UpO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5fY3JlYXRlQ2hhdENvbXBsZXRpb24oY2xpZW50LCBwYXJhbXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIF9ydW5GdW5jdGlvbnM8RnVuY3Rpb25zQXJncyBleHRlbmRzIEJhc2VGdW5jdGlvbnNBcmdzPihcbiAgICBjbGllbnQ6IE9wZW5BSSxcbiAgICBwYXJhbXM6XG4gICAgICB8IENoYXRDb21wbGV0aW9uRnVuY3Rpb25SdW5uZXJQYXJhbXM8RnVuY3Rpb25zQXJncz5cbiAgICAgIHwgQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdGdW5jdGlvblJ1bm5lclBhcmFtczxGdW5jdGlvbnNBcmdzPixcbiAgICBvcHRpb25zPzogUnVubmVyT3B0aW9ucyxcbiAgKSB7XG4gICAgY29uc3Qgcm9sZSA9ICdmdW5jdGlvbicgYXMgY29uc3Q7XG4gICAgY29uc3QgeyBmdW5jdGlvbl9jYWxsID0gJ2F1dG8nLCBzdHJlYW0sIC4uLnJlc3RQYXJhbXMgfSA9IHBhcmFtcztcbiAgICBjb25zdCBzaW5nbGVGdW5jdGlvblRvQ2FsbCA9IHR5cGVvZiBmdW5jdGlvbl9jYWxsICE9PSAnc3RyaW5nJyAmJiBmdW5jdGlvbl9jYWxsPy5uYW1lO1xuICAgIGNvbnN0IHsgbWF4Q2hhdENvbXBsZXRpb25zID0gREVGQVVMVF9NQVhfQ0hBVF9DT01QTEVUSU9OUyB9ID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIGNvbnN0IGZ1bmN0aW9uc0J5TmFtZTogUmVjb3JkPHN0cmluZywgUnVubmFibGVGdW5jdGlvbjxhbnk+PiA9IHt9O1xuICAgIGZvciAoY29uc3QgZiBvZiBwYXJhbXMuZnVuY3Rpb25zKSB7XG4gICAgICBmdW5jdGlvbnNCeU5hbWVbZi5uYW1lIHx8IGYuZnVuY3Rpb24ubmFtZV0gPSBmO1xuICAgIH1cblxuICAgIGNvbnN0IGZ1bmN0aW9uczogQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXMuRnVuY3Rpb25bXSA9IHBhcmFtcy5mdW5jdGlvbnMubWFwKFxuICAgICAgKGYpOiBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtcy5GdW5jdGlvbiA9PiAoe1xuICAgICAgICBuYW1lOiBmLm5hbWUgfHwgZi5mdW5jdGlvbi5uYW1lLFxuICAgICAgICBwYXJhbWV0ZXJzOiBmLnBhcmFtZXRlcnMgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG4gICAgICAgIGRlc2NyaXB0aW9uOiBmLmRlc2NyaXB0aW9uLFxuICAgICAgfSksXG4gICAgKTtcblxuICAgIGZvciAoY29uc3QgbWVzc2FnZSBvZiBwYXJhbXMubWVzc2FnZXMpIHtcbiAgICAgIHRoaXMuX2FkZE1lc3NhZ2UobWVzc2FnZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4Q2hhdENvbXBsZXRpb25zOyArK2kpIHtcbiAgICAgIGNvbnN0IGNoYXRDb21wbGV0aW9uOiBDaGF0Q29tcGxldGlvbiA9IGF3YWl0IHRoaXMuX2NyZWF0ZUNoYXRDb21wbGV0aW9uKFxuICAgICAgICBjbGllbnQsXG4gICAgICAgIHtcbiAgICAgICAgICAuLi5yZXN0UGFyYW1zLFxuICAgICAgICAgIGZ1bmN0aW9uX2NhbGwsXG4gICAgICAgICAgZnVuY3Rpb25zLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbLi4udGhpcy5tZXNzYWdlc10sXG4gICAgICAgIH0sXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICApO1xuICAgICAgY29uc3QgbWVzc2FnZSA9IGNoYXRDb21wbGV0aW9uLmNob2ljZXNbMF0/Lm1lc3NhZ2U7XG4gICAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBtaXNzaW5nIG1lc3NhZ2UgaW4gQ2hhdENvbXBsZXRpb24gcmVzcG9uc2VgKTtcbiAgICAgIH1cbiAgICAgIGlmICghbWVzc2FnZS5mdW5jdGlvbl9jYWxsKSByZXR1cm47XG4gICAgICBjb25zdCB7IG5hbWUsIGFyZ3VtZW50czogYXJncyB9ID0gbWVzc2FnZS5mdW5jdGlvbl9jYWxsO1xuICAgICAgY29uc3QgZm4gPSBmdW5jdGlvbnNCeU5hbWVbbmFtZV07XG4gICAgICBpZiAoIWZuKSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBgSW52YWxpZCBmdW5jdGlvbl9jYWxsOiAke0pTT04uc3RyaW5naWZ5KG5hbWUpfS4gQXZhaWxhYmxlIG9wdGlvbnMgYXJlOiAke2Z1bmN0aW9uc1xuICAgICAgICAgIC5tYXAoKGYpID0+IEpTT04uc3RyaW5naWZ5KGYubmFtZSkpXG4gICAgICAgICAgLmpvaW4oJywgJyl9LiBQbGVhc2UgdHJ5IGFnYWluYDtcblxuICAgICAgICB0aGlzLl9hZGRNZXNzYWdlKHsgcm9sZSwgbmFtZSwgY29udGVudCB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2UgaWYgKHNpbmdsZUZ1bmN0aW9uVG9DYWxsICYmIHNpbmdsZUZ1bmN0aW9uVG9DYWxsICE9PSBuYW1lKSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBgSW52YWxpZCBmdW5jdGlvbl9jYWxsOiAke0pTT04uc3RyaW5naWZ5KG5hbWUpfS4gJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICBzaW5nbGVGdW5jdGlvblRvQ2FsbCxcbiAgICAgICAgKX0gcmVxdWVzdGVkLiBQbGVhc2UgdHJ5IGFnYWluYDtcblxuICAgICAgICB0aGlzLl9hZGRNZXNzYWdlKHsgcm9sZSwgbmFtZSwgY29udGVudCB9KTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGxldCBwYXJzZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBwYXJzZWQgPSBpc1J1bm5hYmxlRnVuY3Rpb25XaXRoUGFyc2UoZm4pID8gYXdhaXQgZm4ucGFyc2UoYXJncykgOiBhcmdzO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5fYWRkTWVzc2FnZSh7XG4gICAgICAgICAgcm9sZSxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIGNvbnRlbnQ6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGl0IGNhbid0IHJ1bGUgb3V0IGBuZXZlcmAgdHlwZS5cbiAgICAgIGNvbnN0IHJhd0NvbnRlbnQgPSBhd2FpdCBmbi5mdW5jdGlvbihwYXJzZWQsIHRoaXMpO1xuICAgICAgY29uc3QgY29udGVudCA9IHRoaXMuI3N0cmluZ2lmeUZ1bmN0aW9uQ2FsbFJlc3VsdChyYXdDb250ZW50KTtcblxuICAgICAgdGhpcy5fYWRkTWVzc2FnZSh7IHJvbGUsIG5hbWUsIGNvbnRlbnQgfSk7XG5cbiAgICAgIGlmIChzaW5nbGVGdW5jdGlvblRvQ2FsbCkgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBfcnVuVG9vbHM8RnVuY3Rpb25zQXJncyBleHRlbmRzIEJhc2VGdW5jdGlvbnNBcmdzPihcbiAgICBjbGllbnQ6IE9wZW5BSSxcbiAgICBwYXJhbXM6XG4gICAgICB8IENoYXRDb21wbGV0aW9uVG9vbFJ1bm5lclBhcmFtczxGdW5jdGlvbnNBcmdzPlxuICAgICAgfCBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1Rvb2xSdW5uZXJQYXJhbXM8RnVuY3Rpb25zQXJncz4sXG4gICAgb3B0aW9ucz86IFJ1bm5lck9wdGlvbnMsXG4gICkge1xuICAgIGNvbnN0IHJvbGUgPSAndG9vbCcgYXMgY29uc3Q7XG4gICAgY29uc3QgeyB0b29sX2Nob2ljZSA9ICdhdXRvJywgc3RyZWFtLCAuLi5yZXN0UGFyYW1zIH0gPSBwYXJhbXM7XG4gICAgY29uc3Qgc2luZ2xlRnVuY3Rpb25Ub0NhbGwgPSB0eXBlb2YgdG9vbF9jaG9pY2UgIT09ICdzdHJpbmcnICYmIHRvb2xfY2hvaWNlPy5mdW5jdGlvbj8ubmFtZTtcbiAgICBjb25zdCB7IG1heENoYXRDb21wbGV0aW9ucyA9IERFRkFVTFRfTUFYX0NIQVRfQ09NUExFVElPTlMgfSA9IG9wdGlvbnMgfHwge307XG5cbiAgICAvLyBUT0RPKHNvbWVkYXkpOiBjbGVhbiB0aGlzIGxvZ2ljIHVwXG4gICAgY29uc3QgaW5wdXRUb29scyA9IHBhcmFtcy50b29scy5tYXAoKHRvb2wpOiBSdW5uYWJsZVRvb2xGdW5jdGlvbjxhbnk+ID0+IHtcbiAgICAgIGlmIChpc0F1dG9QYXJzYWJsZVRvb2wodG9vbCkpIHtcbiAgICAgICAgaWYgKCF0b29sLiRjYWxsYmFjaykge1xuICAgICAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcignVG9vbCBnaXZlbiB0byBgLnJ1blRvb2xzKClgIHRoYXQgZG9lcyBub3QgaGF2ZSBhbiBhc3NvY2lhdGVkIGZ1bmN0aW9uJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6ICdmdW5jdGlvbicsXG4gICAgICAgICAgZnVuY3Rpb246IHtcbiAgICAgICAgICAgIGZ1bmN0aW9uOiB0b29sLiRjYWxsYmFjayxcbiAgICAgICAgICAgIG5hbWU6IHRvb2wuZnVuY3Rpb24ubmFtZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0b29sLmZ1bmN0aW9uLmRlc2NyaXB0aW9uIHx8ICcnLFxuICAgICAgICAgICAgcGFyYW1ldGVyczogdG9vbC5mdW5jdGlvbi5wYXJhbWV0ZXJzIGFzIGFueSxcbiAgICAgICAgICAgIHBhcnNlOiB0b29sLiRwYXJzZVJhdyxcbiAgICAgICAgICAgIHN0cmljdDogdHJ1ZSxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdG9vbCBhcyBhbnkgYXMgUnVubmFibGVUb29sRnVuY3Rpb248YW55PjtcbiAgICB9KTtcblxuICAgIGNvbnN0IGZ1bmN0aW9uc0J5TmFtZTogUmVjb3JkPHN0cmluZywgUnVubmFibGVGdW5jdGlvbjxhbnk+PiA9IHt9O1xuICAgIGZvciAoY29uc3QgZiBvZiBpbnB1dFRvb2xzKSB7XG4gICAgICBpZiAoZi50eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZ1bmN0aW9uc0J5TmFtZVtmLmZ1bmN0aW9uLm5hbWUgfHwgZi5mdW5jdGlvbi5mdW5jdGlvbi5uYW1lXSA9IGYuZnVuY3Rpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgdG9vbHM6IENoYXRDb21wbGV0aW9uVG9vbFtdID1cbiAgICAgICd0b29scycgaW4gcGFyYW1zID9cbiAgICAgICAgaW5wdXRUb29scy5tYXAoKHQpID0+XG4gICAgICAgICAgdC50eXBlID09PSAnZnVuY3Rpb24nID9cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdHlwZTogJ2Z1bmN0aW9uJyxcbiAgICAgICAgICAgICAgZnVuY3Rpb246IHtcbiAgICAgICAgICAgICAgICBuYW1lOiB0LmZ1bmN0aW9uLm5hbWUgfHwgdC5mdW5jdGlvbi5mdW5jdGlvbi5uYW1lLFxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnM6IHQuZnVuY3Rpb24ucGFyYW1ldGVycyBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogdC5mdW5jdGlvbi5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICBzdHJpY3Q6IHQuZnVuY3Rpb24uc3RyaWN0LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfVxuICAgICAgICAgIDogKHQgYXMgdW5rbm93biBhcyBDaGF0Q29tcGxldGlvblRvb2wpLFxuICAgICAgICApXG4gICAgICA6ICh1bmRlZmluZWQgYXMgYW55KTtcblxuICAgIGZvciAoY29uc3QgbWVzc2FnZSBvZiBwYXJhbXMubWVzc2FnZXMpIHtcbiAgICAgIHRoaXMuX2FkZE1lc3NhZ2UobWVzc2FnZSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4Q2hhdENvbXBsZXRpb25zOyArK2kpIHtcbiAgICAgIGNvbnN0IGNoYXRDb21wbGV0aW9uOiBDaGF0Q29tcGxldGlvbiA9IGF3YWl0IHRoaXMuX2NyZWF0ZUNoYXRDb21wbGV0aW9uKFxuICAgICAgICBjbGllbnQsXG4gICAgICAgIHtcbiAgICAgICAgICAuLi5yZXN0UGFyYW1zLFxuICAgICAgICAgIHRvb2xfY2hvaWNlLFxuICAgICAgICAgIHRvb2xzLFxuICAgICAgICAgIG1lc3NhZ2VzOiBbLi4udGhpcy5tZXNzYWdlc10sXG4gICAgICAgIH0sXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICApO1xuICAgICAgY29uc3QgbWVzc2FnZSA9IGNoYXRDb21wbGV0aW9uLmNob2ljZXNbMF0/Lm1lc3NhZ2U7XG4gICAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBtaXNzaW5nIG1lc3NhZ2UgaW4gQ2hhdENvbXBsZXRpb24gcmVzcG9uc2VgKTtcbiAgICAgIH1cbiAgICAgIGlmICghbWVzc2FnZS50b29sX2NhbGxzPy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGNvbnN0IHRvb2xfY2FsbCBvZiBtZXNzYWdlLnRvb2xfY2FsbHMpIHtcbiAgICAgICAgaWYgKHRvb2xfY2FsbC50eXBlICE9PSAnZnVuY3Rpb24nKSBjb250aW51ZTtcbiAgICAgICAgY29uc3QgdG9vbF9jYWxsX2lkID0gdG9vbF9jYWxsLmlkO1xuICAgICAgICBjb25zdCB7IG5hbWUsIGFyZ3VtZW50czogYXJncyB9ID0gdG9vbF9jYWxsLmZ1bmN0aW9uO1xuICAgICAgICBjb25zdCBmbiA9IGZ1bmN0aW9uc0J5TmFtZVtuYW1lXTtcblxuICAgICAgICBpZiAoIWZuKSB7XG4gICAgICAgICAgY29uc3QgY29udGVudCA9IGBJbnZhbGlkIHRvb2xfY2FsbDogJHtKU09OLnN0cmluZ2lmeShuYW1lKX0uIEF2YWlsYWJsZSBvcHRpb25zIGFyZTogJHtPYmplY3Qua2V5cyhcbiAgICAgICAgICAgIGZ1bmN0aW9uc0J5TmFtZSxcbiAgICAgICAgICApXG4gICAgICAgICAgICAubWFwKChuYW1lKSA9PiBKU09OLnN0cmluZ2lmeShuYW1lKSlcbiAgICAgICAgICAgIC5qb2luKCcsICcpfS4gUGxlYXNlIHRyeSBhZ2FpbmA7XG5cbiAgICAgICAgICB0aGlzLl9hZGRNZXNzYWdlKHsgcm9sZSwgdG9vbF9jYWxsX2lkLCBjb250ZW50IH0pO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHNpbmdsZUZ1bmN0aW9uVG9DYWxsICYmIHNpbmdsZUZ1bmN0aW9uVG9DYWxsICE9PSBuYW1lKSB7XG4gICAgICAgICAgY29uc3QgY29udGVudCA9IGBJbnZhbGlkIHRvb2xfY2FsbDogJHtKU09OLnN0cmluZ2lmeShuYW1lKX0uICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICBzaW5nbGVGdW5jdGlvblRvQ2FsbCxcbiAgICAgICAgICApfSByZXF1ZXN0ZWQuIFBsZWFzZSB0cnkgYWdhaW5gO1xuXG4gICAgICAgICAgdGhpcy5fYWRkTWVzc2FnZSh7IHJvbGUsIHRvb2xfY2FsbF9pZCwgY29udGVudCB9KTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwYXJzZWQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcGFyc2VkID0gaXNSdW5uYWJsZUZ1bmN0aW9uV2l0aFBhcnNlKGZuKSA/IGF3YWl0IGZuLnBhcnNlKGFyZ3MpIDogYXJncztcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zdCBjb250ZW50ID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpO1xuICAgICAgICAgIHRoaXMuX2FkZE1lc3NhZ2UoeyByb2xlLCB0b29sX2NhbGxfaWQsIGNvbnRlbnQgfSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGl0IGNhbid0IHJ1bGUgb3V0IGBuZXZlcmAgdHlwZS5cbiAgICAgICAgY29uc3QgcmF3Q29udGVudCA9IGF3YWl0IGZuLmZ1bmN0aW9uKHBhcnNlZCwgdGhpcyk7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSB0aGlzLiNzdHJpbmdpZnlGdW5jdGlvbkNhbGxSZXN1bHQocmF3Q29udGVudCk7XG4gICAgICAgIHRoaXMuX2FkZE1lc3NhZ2UoeyByb2xlLCB0b29sX2NhbGxfaWQsIGNvbnRlbnQgfSk7XG5cbiAgICAgICAgaWYgKHNpbmdsZUZ1bmN0aW9uVG9DYWxsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgI3N0cmluZ2lmeUZ1bmN0aW9uQ2FsbFJlc3VsdChyYXdDb250ZW50OiB1bmtub3duKTogc3RyaW5nIHtcbiAgICByZXR1cm4gKFxuICAgICAgdHlwZW9mIHJhd0NvbnRlbnQgPT09ICdzdHJpbmcnID8gcmF3Q29udGVudFxuICAgICAgOiByYXdDb250ZW50ID09PSB1bmRlZmluZWQgPyAndW5kZWZpbmVkJ1xuICAgICAgOiBKU09OLnN0cmluZ2lmeShyYXdDb250ZW50KVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBYnN0cmFjdENoYXRDb21wbGV0aW9uUnVubmVyRXZlbnRzIGV4dGVuZHMgQmFzZUV2ZW50cyB7XG4gIGZ1bmN0aW9uQ2FsbDogKGZ1bmN0aW9uQ2FsbDogQ2hhdENvbXBsZXRpb25NZXNzYWdlLkZ1bmN0aW9uQ2FsbCkgPT4gdm9pZDtcbiAgbWVzc2FnZTogKG1lc3NhZ2U6IENoYXRDb21wbGV0aW9uTWVzc2FnZVBhcmFtKSA9PiB2b2lkO1xuICBjaGF0Q29tcGxldGlvbjogKGNvbXBsZXRpb246IENoYXRDb21wbGV0aW9uKSA9PiB2b2lkO1xuICBmaW5hbENvbnRlbnQ6IChjb250ZW50U25hcHNob3Q6IHN0cmluZykgPT4gdm9pZDtcbiAgZmluYWxNZXNzYWdlOiAobWVzc2FnZTogQ2hhdENvbXBsZXRpb25NZXNzYWdlUGFyYW0pID0+IHZvaWQ7XG4gIGZpbmFsQ2hhdENvbXBsZXRpb246IChjb21wbGV0aW9uOiBDaGF0Q29tcGxldGlvbikgPT4gdm9pZDtcbiAgZmluYWxGdW5jdGlvbkNhbGw6IChmdW5jdGlvbkNhbGw6IENoYXRDb21wbGV0aW9uTWVzc2FnZS5GdW5jdGlvbkNhbGwpID0+IHZvaWQ7XG4gIGZ1bmN0aW9uQ2FsbFJlc3VsdDogKGNvbnRlbnQ6IHN0cmluZykgPT4gdm9pZDtcbiAgZmluYWxGdW5jdGlvbkNhbGxSZXN1bHQ6IChjb250ZW50OiBzdHJpbmcpID0+IHZvaWQ7XG4gIHRvdGFsVXNhZ2U6ICh1c2FnZTogQ29tcGxldGlvblVzYWdlKSA9PiB2b2lkO1xufVxuIiwgImltcG9ydCB7XG4gIHR5cGUgQ2hhdENvbXBsZXRpb25NZXNzYWdlUGFyYW0sXG4gIHR5cGUgQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcsXG59IGZyb20gJy4uL3Jlc291cmNlcy9jaGF0L2NvbXBsZXRpb25zJztcbmltcG9ydCB7IHR5cGUgUnVubmFibGVGdW5jdGlvbnMsIHR5cGUgQmFzZUZ1bmN0aW9uc0FyZ3MsIFJ1bm5hYmxlVG9vbHMgfSBmcm9tICcuL1J1bm5hYmxlRnVuY3Rpb24nO1xuaW1wb3J0IHtcbiAgQWJzdHJhY3RDaGF0Q29tcGxldGlvblJ1bm5lcixcbiAgQWJzdHJhY3RDaGF0Q29tcGxldGlvblJ1bm5lckV2ZW50cyxcbiAgUnVubmVyT3B0aW9ucyxcbn0gZnJvbSAnLi9BYnN0cmFjdENoYXRDb21wbGV0aW9uUnVubmVyJztcbmltcG9ydCB7IGlzQXNzaXN0YW50TWVzc2FnZSB9IGZyb20gJy4vY2hhdENvbXBsZXRpb25VdGlscyc7XG5pbXBvcnQgT3BlbkFJIGZyb20gJy4uL2luZGV4JztcbmltcG9ydCB7IEF1dG9QYXJzZWFibGVUb29sIH0gZnJvbSAnLi4vbGliL3BhcnNlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhdENvbXBsZXRpb25SdW5uZXJFdmVudHMgZXh0ZW5kcyBBYnN0cmFjdENoYXRDb21wbGV0aW9uUnVubmVyRXZlbnRzIHtcbiAgY29udGVudDogKGNvbnRlbnQ6IHN0cmluZykgPT4gdm9pZDtcbn1cblxuZXhwb3J0IHR5cGUgQ2hhdENvbXBsZXRpb25GdW5jdGlvblJ1bm5lclBhcmFtczxGdW5jdGlvbnNBcmdzIGV4dGVuZHMgQmFzZUZ1bmN0aW9uc0FyZ3M+ID0gT21pdDxcbiAgQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcsXG4gICdmdW5jdGlvbnMnXG4+ICYge1xuICBmdW5jdGlvbnM6IFJ1bm5hYmxlRnVuY3Rpb25zPEZ1bmN0aW9uc0FyZ3M+O1xufTtcblxuZXhwb3J0IHR5cGUgQ2hhdENvbXBsZXRpb25Ub29sUnVubmVyUGFyYW1zPEZ1bmN0aW9uc0FyZ3MgZXh0ZW5kcyBCYXNlRnVuY3Rpb25zQXJncz4gPSBPbWl0PFxuICBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyxcbiAgJ3Rvb2xzJ1xuPiAmIHtcbiAgdG9vbHM6IFJ1bm5hYmxlVG9vbHM8RnVuY3Rpb25zQXJncz4gfCBBdXRvUGFyc2VhYmxlVG9vbDxhbnksIHRydWU+W107XG59O1xuXG5leHBvcnQgY2xhc3MgQ2hhdENvbXBsZXRpb25SdW5uZXI8UGFyc2VkVCA9IG51bGw+IGV4dGVuZHMgQWJzdHJhY3RDaGF0Q29tcGxldGlvblJ1bm5lcjxcbiAgQ2hhdENvbXBsZXRpb25SdW5uZXJFdmVudHMsXG4gIFBhcnNlZFRcbj4ge1xuICAvKiogQGRlcHJlY2F0ZWQgLSBwbGVhc2UgdXNlIGBydW5Ub29sc2AgaW5zdGVhZC4gKi9cbiAgc3RhdGljIHJ1bkZ1bmN0aW9ucyhcbiAgICBjbGllbnQ6IE9wZW5BSSxcbiAgICBwYXJhbXM6IENoYXRDb21wbGV0aW9uRnVuY3Rpb25SdW5uZXJQYXJhbXM8YW55W10+LFxuICAgIG9wdGlvbnM/OiBSdW5uZXJPcHRpb25zLFxuICApOiBDaGF0Q29tcGxldGlvblJ1bm5lcjxudWxsPiB7XG4gICAgY29uc3QgcnVubmVyID0gbmV3IENoYXRDb21wbGV0aW9uUnVubmVyKCk7XG4gICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBoZWFkZXJzOiB7IC4uLm9wdGlvbnM/LmhlYWRlcnMsICdYLVN0YWlubGVzcy1IZWxwZXItTWV0aG9kJzogJ3J1bkZ1bmN0aW9ucycgfSxcbiAgICB9O1xuICAgIHJ1bm5lci5fcnVuKCgpID0+IHJ1bm5lci5fcnVuRnVuY3Rpb25zKGNsaWVudCwgcGFyYW1zLCBvcHRzKSk7XG4gICAgcmV0dXJuIHJ1bm5lcjtcbiAgfVxuXG4gIHN0YXRpYyBydW5Ub29sczxQYXJzZWRUPihcbiAgICBjbGllbnQ6IE9wZW5BSSxcbiAgICBwYXJhbXM6IENoYXRDb21wbGV0aW9uVG9vbFJ1bm5lclBhcmFtczxhbnlbXT4sXG4gICAgb3B0aW9ucz86IFJ1bm5lck9wdGlvbnMsXG4gICk6IENoYXRDb21wbGV0aW9uUnVubmVyPFBhcnNlZFQ+IHtcbiAgICBjb25zdCBydW5uZXIgPSBuZXcgQ2hhdENvbXBsZXRpb25SdW5uZXI8UGFyc2VkVD4oKTtcbiAgICBjb25zdCBvcHRzID0ge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgLi4ub3B0aW9ucz8uaGVhZGVycywgJ1gtU3RhaW5sZXNzLUhlbHBlci1NZXRob2QnOiAncnVuVG9vbHMnIH0sXG4gICAgfTtcbiAgICBydW5uZXIuX3J1bigoKSA9PiBydW5uZXIuX3J1blRvb2xzKGNsaWVudCwgcGFyYW1zLCBvcHRzKSk7XG4gICAgcmV0dXJuIHJ1bm5lcjtcbiAgfVxuXG4gIG92ZXJyaWRlIF9hZGRNZXNzYWdlKFxuICAgIHRoaXM6IENoYXRDb21wbGV0aW9uUnVubmVyPFBhcnNlZFQ+LFxuICAgIG1lc3NhZ2U6IENoYXRDb21wbGV0aW9uTWVzc2FnZVBhcmFtLFxuICAgIGVtaXQ6IGJvb2xlYW4gPSB0cnVlLFxuICApIHtcbiAgICBzdXBlci5fYWRkTWVzc2FnZShtZXNzYWdlLCBlbWl0KTtcbiAgICBpZiAoaXNBc3Npc3RhbnRNZXNzYWdlKG1lc3NhZ2UpICYmIG1lc3NhZ2UuY29udGVudCkge1xuICAgICAgdGhpcy5fZW1pdCgnY29udGVudCcsIG1lc3NhZ2UuY29udGVudCBhcyBzdHJpbmcpO1xuICAgIH1cbiAgfVxufVxuIiwgImNvbnN0IFNUUiA9IDBiMDAwMDAwMDAxO1xuY29uc3QgTlVNID0gMGIwMDAwMDAwMTA7XG5jb25zdCBBUlIgPSAwYjAwMDAwMDEwMDtcbmNvbnN0IE9CSiA9IDBiMDAwMDAxMDAwO1xuY29uc3QgTlVMTCA9IDBiMDAwMDEwMDAwO1xuY29uc3QgQk9PTCA9IDBiMDAwMTAwMDAwO1xuY29uc3QgTkFOID0gMGIwMDEwMDAwMDA7XG5jb25zdCBJTkZJTklUWSA9IDBiMDEwMDAwMDAwO1xuY29uc3QgTUlOVVNfSU5GSU5JVFkgPSAwYjEwMDAwMDAwMDtcblxuY29uc3QgSU5GID0gSU5GSU5JVFkgfCBNSU5VU19JTkZJTklUWTtcbmNvbnN0IFNQRUNJQUwgPSBOVUxMIHwgQk9PTCB8IElORiB8IE5BTjtcbmNvbnN0IEFUT00gPSBTVFIgfCBOVU0gfCBTUEVDSUFMO1xuY29uc3QgQ09MTEVDVElPTiA9IEFSUiB8IE9CSjtcbmNvbnN0IEFMTCA9IEFUT00gfCBDT0xMRUNUSU9OO1xuXG5jb25zdCBBbGxvdyA9IHtcbiAgU1RSLFxuICBOVU0sXG4gIEFSUixcbiAgT0JKLFxuICBOVUxMLFxuICBCT09MLFxuICBOQU4sXG4gIElORklOSVRZLFxuICBNSU5VU19JTkZJTklUWSxcbiAgSU5GLFxuICBTUEVDSUFMLFxuICBBVE9NLFxuICBDT0xMRUNUSU9OLFxuICBBTEwsXG59O1xuXG4vLyBUaGUgSlNPTiBzdHJpbmcgc2VnbWVudCB3YXMgdW5hYmxlIHRvIGJlIHBhcnNlZCBjb21wbGV0ZWx5XG5jbGFzcyBQYXJ0aWFsSlNPTiBleHRlbmRzIEVycm9yIHt9XG5cbmNsYXNzIE1hbGZvcm1lZEpTT04gZXh0ZW5kcyBFcnJvciB7fVxuXG4vKipcbiAqIFBhcnNlIGluY29tcGxldGUgSlNPTlxuICogQHBhcmFtIHtzdHJpbmd9IGpzb25TdHJpbmcgUGFydGlhbCBKU09OIHRvIGJlIHBhcnNlZFxuICogQHBhcmFtIHtudW1iZXJ9IGFsbG93UGFydGlhbCBTcGVjaWZ5IHdoYXQgdHlwZXMgYXJlIGFsbG93ZWQgdG8gYmUgcGFydGlhbCwgc2VlIHtAbGluayBBbGxvd30gZm9yIGRldGFpbHNcbiAqIEByZXR1cm5zIFRoZSBwYXJzZWQgSlNPTlxuICogQHRocm93cyB7UGFydGlhbEpTT059IElmIHRoZSBKU09OIGlzIGluY29tcGxldGUgKHJlbGF0ZWQgdG8gdGhlIGBhbGxvd2AgcGFyYW1ldGVyKVxuICogQHRocm93cyB7TWFsZm9ybWVkSlNPTn0gSWYgdGhlIEpTT04gaXMgbWFsZm9ybWVkXG4gKi9cbmZ1bmN0aW9uIHBhcnNlSlNPTihqc29uU3RyaW5nOiBzdHJpbmcsIGFsbG93UGFydGlhbDogbnVtYmVyID0gQWxsb3cuQUxMKTogYW55IHtcbiAgaWYgKHR5cGVvZiBqc29uU3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYGV4cGVjdGluZyBzdHIsIGdvdCAke3R5cGVvZiBqc29uU3RyaW5nfWApO1xuICB9XG4gIGlmICghanNvblN0cmluZy50cmltKCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7anNvblN0cmluZ30gaXMgZW1wdHlgKTtcbiAgfVxuICByZXR1cm4gX3BhcnNlSlNPTihqc29uU3RyaW5nLnRyaW0oKSwgYWxsb3dQYXJ0aWFsKTtcbn1cblxuY29uc3QgX3BhcnNlSlNPTiA9IChqc29uU3RyaW5nOiBzdHJpbmcsIGFsbG93OiBudW1iZXIpID0+IHtcbiAgY29uc3QgbGVuZ3RoID0ganNvblN0cmluZy5sZW5ndGg7XG4gIGxldCBpbmRleCA9IDA7XG5cbiAgY29uc3QgbWFya1BhcnRpYWxKU09OID0gKG1zZzogc3RyaW5nKSA9PiB7XG4gICAgdGhyb3cgbmV3IFBhcnRpYWxKU09OKGAke21zZ30gYXQgcG9zaXRpb24gJHtpbmRleH1gKTtcbiAgfTtcblxuICBjb25zdCB0aHJvd01hbGZvcm1lZEVycm9yID0gKG1zZzogc3RyaW5nKSA9PiB7XG4gICAgdGhyb3cgbmV3IE1hbGZvcm1lZEpTT04oYCR7bXNnfSBhdCBwb3NpdGlvbiAke2luZGV4fWApO1xuICB9O1xuXG4gIGNvbnN0IHBhcnNlQW55OiAoKSA9PiBhbnkgPSAoKSA9PiB7XG4gICAgc2tpcEJsYW5rKCk7XG4gICAgaWYgKGluZGV4ID49IGxlbmd0aCkgbWFya1BhcnRpYWxKU09OKCdVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dCcpO1xuICAgIGlmIChqc29uU3RyaW5nW2luZGV4XSA9PT0gJ1wiJykgcmV0dXJuIHBhcnNlU3RyKCk7XG4gICAgaWYgKGpzb25TdHJpbmdbaW5kZXhdID09PSAneycpIHJldHVybiBwYXJzZU9iaigpO1xuICAgIGlmIChqc29uU3RyaW5nW2luZGV4XSA9PT0gJ1snKSByZXR1cm4gcGFyc2VBcnIoKTtcbiAgICBpZiAoXG4gICAgICBqc29uU3RyaW5nLnN1YnN0cmluZyhpbmRleCwgaW5kZXggKyA0KSA9PT0gJ251bGwnIHx8XG4gICAgICAoQWxsb3cuTlVMTCAmIGFsbG93ICYmIGxlbmd0aCAtIGluZGV4IDwgNCAmJiAnbnVsbCcuc3RhcnRzV2l0aChqc29uU3RyaW5nLnN1YnN0cmluZyhpbmRleCkpKVxuICAgICkge1xuICAgICAgaW5kZXggKz0gNDtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICBqc29uU3RyaW5nLnN1YnN0cmluZyhpbmRleCwgaW5kZXggKyA0KSA9PT0gJ3RydWUnIHx8XG4gICAgICAoQWxsb3cuQk9PTCAmIGFsbG93ICYmIGxlbmd0aCAtIGluZGV4IDwgNCAmJiAndHJ1ZScuc3RhcnRzV2l0aChqc29uU3RyaW5nLnN1YnN0cmluZyhpbmRleCkpKVxuICAgICkge1xuICAgICAgaW5kZXggKz0gNDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICBqc29uU3RyaW5nLnN1YnN0cmluZyhpbmRleCwgaW5kZXggKyA1KSA9PT0gJ2ZhbHNlJyB8fFxuICAgICAgKEFsbG93LkJPT0wgJiBhbGxvdyAmJiBsZW5ndGggLSBpbmRleCA8IDUgJiYgJ2ZhbHNlJy5zdGFydHNXaXRoKGpzb25TdHJpbmcuc3Vic3RyaW5nKGluZGV4KSkpXG4gICAgKSB7XG4gICAgICBpbmRleCArPSA1O1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICBqc29uU3RyaW5nLnN1YnN0cmluZyhpbmRleCwgaW5kZXggKyA4KSA9PT0gJ0luZmluaXR5JyB8fFxuICAgICAgKEFsbG93LklORklOSVRZICYgYWxsb3cgJiYgbGVuZ3RoIC0gaW5kZXggPCA4ICYmICdJbmZpbml0eScuc3RhcnRzV2l0aChqc29uU3RyaW5nLnN1YnN0cmluZyhpbmRleCkpKVxuICAgICkge1xuICAgICAgaW5kZXggKz0gODtcbiAgICAgIHJldHVybiBJbmZpbml0eTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAganNvblN0cmluZy5zdWJzdHJpbmcoaW5kZXgsIGluZGV4ICsgOSkgPT09ICctSW5maW5pdHknIHx8XG4gICAgICAoQWxsb3cuTUlOVVNfSU5GSU5JVFkgJiBhbGxvdyAmJlxuICAgICAgICAxIDwgbGVuZ3RoIC0gaW5kZXggJiZcbiAgICAgICAgbGVuZ3RoIC0gaW5kZXggPCA5ICYmXG4gICAgICAgICctSW5maW5pdHknLnN0YXJ0c1dpdGgoanNvblN0cmluZy5zdWJzdHJpbmcoaW5kZXgpKSlcbiAgICApIHtcbiAgICAgIGluZGV4ICs9IDk7XG4gICAgICByZXR1cm4gLUluZmluaXR5O1xuICAgIH1cbiAgICBpZiAoXG4gICAgICBqc29uU3RyaW5nLnN1YnN0cmluZyhpbmRleCwgaW5kZXggKyAzKSA9PT0gJ05hTicgfHxcbiAgICAgIChBbGxvdy5OQU4gJiBhbGxvdyAmJiBsZW5ndGggLSBpbmRleCA8IDMgJiYgJ05hTicuc3RhcnRzV2l0aChqc29uU3RyaW5nLnN1YnN0cmluZyhpbmRleCkpKVxuICAgICkge1xuICAgICAgaW5kZXggKz0gMztcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIHJldHVybiBwYXJzZU51bSgpO1xuICB9O1xuXG4gIGNvbnN0IHBhcnNlU3RyOiAoKSA9PiBzdHJpbmcgPSAoKSA9PiB7XG4gICAgY29uc3Qgc3RhcnQgPSBpbmRleDtcbiAgICBsZXQgZXNjYXBlID0gZmFsc2U7XG4gICAgaW5kZXgrKzsgLy8gc2tpcCBpbml0aWFsIHF1b3RlXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoICYmIChqc29uU3RyaW5nW2luZGV4XSAhPT0gJ1wiJyB8fCAoZXNjYXBlICYmIGpzb25TdHJpbmdbaW5kZXggLSAxXSA9PT0gJ1xcXFwnKSkpIHtcbiAgICAgIGVzY2FwZSA9IGpzb25TdHJpbmdbaW5kZXhdID09PSAnXFxcXCcgPyAhZXNjYXBlIDogZmFsc2U7XG4gICAgICBpbmRleCsrO1xuICAgIH1cbiAgICBpZiAoanNvblN0cmluZy5jaGFyQXQoaW5kZXgpID09ICdcIicpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGpzb25TdHJpbmcuc3Vic3RyaW5nKHN0YXJ0LCArK2luZGV4IC0gTnVtYmVyKGVzY2FwZSkpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3dNYWxmb3JtZWRFcnJvcihTdHJpbmcoZSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoQWxsb3cuU1RSICYgYWxsb3cpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGpzb25TdHJpbmcuc3Vic3RyaW5nKHN0YXJ0LCBpbmRleCAtIE51bWJlcihlc2NhcGUpKSArICdcIicpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBTeW50YXhFcnJvcjogSW52YWxpZCBlc2NhcGUgc2VxdWVuY2VcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoanNvblN0cmluZy5zdWJzdHJpbmcoc3RhcnQsIGpzb25TdHJpbmcubGFzdEluZGV4T2YoJ1xcXFwnKSkgKyAnXCInKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbWFya1BhcnRpYWxKU09OKCdVbnRlcm1pbmF0ZWQgc3RyaW5nIGxpdGVyYWwnKTtcbiAgfTtcblxuICBjb25zdCBwYXJzZU9iaiA9ICgpID0+IHtcbiAgICBpbmRleCsrOyAvLyBza2lwIGluaXRpYWwgYnJhY2VcbiAgICBza2lwQmxhbmsoKTtcbiAgICBjb25zdCBvYmo6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7fTtcbiAgICB0cnkge1xuICAgICAgd2hpbGUgKGpzb25TdHJpbmdbaW5kZXhdICE9PSAnfScpIHtcbiAgICAgICAgc2tpcEJsYW5rKCk7XG4gICAgICAgIGlmIChpbmRleCA+PSBsZW5ndGggJiYgQWxsb3cuT0JKICYgYWxsb3cpIHJldHVybiBvYmo7XG4gICAgICAgIGNvbnN0IGtleSA9IHBhcnNlU3RyKCk7XG4gICAgICAgIHNraXBCbGFuaygpO1xuICAgICAgICBpbmRleCsrOyAvLyBza2lwIGNvbG9uXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJzZUFueSgpO1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZSwgd3JpdGFibGU6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGlmIChBbGxvdy5PQkogJiBhbGxvdykgcmV0dXJuIG9iajtcbiAgICAgICAgICBlbHNlIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgICAgc2tpcEJsYW5rKCk7XG4gICAgICAgIGlmIChqc29uU3RyaW5nW2luZGV4XSA9PT0gJywnKSBpbmRleCsrOyAvLyBza2lwIGNvbW1hXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKEFsbG93Lk9CSiAmIGFsbG93KSByZXR1cm4gb2JqO1xuICAgICAgZWxzZSBtYXJrUGFydGlhbEpTT04oXCJFeHBlY3RlZCAnfScgYXQgZW5kIG9mIG9iamVjdFwiKTtcbiAgICB9XG4gICAgaW5kZXgrKzsgLy8gc2tpcCBmaW5hbCBicmFjZVxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgY29uc3QgcGFyc2VBcnIgPSAoKSA9PiB7XG4gICAgaW5kZXgrKzsgLy8gc2tpcCBpbml0aWFsIGJyYWNrZXRcbiAgICBjb25zdCBhcnIgPSBbXTtcbiAgICB0cnkge1xuICAgICAgd2hpbGUgKGpzb25TdHJpbmdbaW5kZXhdICE9PSAnXScpIHtcbiAgICAgICAgYXJyLnB1c2gocGFyc2VBbnkoKSk7XG4gICAgICAgIHNraXBCbGFuaygpO1xuICAgICAgICBpZiAoanNvblN0cmluZ1tpbmRleF0gPT09ICcsJykge1xuICAgICAgICAgIGluZGV4Kys7IC8vIHNraXAgY29tbWFcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChBbGxvdy5BUlIgJiBhbGxvdykge1xuICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgfVxuICAgICAgbWFya1BhcnRpYWxKU09OKFwiRXhwZWN0ZWQgJ10nIGF0IGVuZCBvZiBhcnJheVwiKTtcbiAgICB9XG4gICAgaW5kZXgrKzsgLy8gc2tpcCBmaW5hbCBicmFja2V0XG4gICAgcmV0dXJuIGFycjtcbiAgfTtcblxuICBjb25zdCBwYXJzZU51bSA9ICgpID0+IHtcbiAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgIGlmIChqc29uU3RyaW5nID09PSAnLScgJiYgQWxsb3cuTlVNICYgYWxsb3cpIG1hcmtQYXJ0aWFsSlNPTihcIk5vdCBzdXJlIHdoYXQgJy0nIGlzXCIpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoanNvblN0cmluZyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChBbGxvdy5OVU0gJiBhbGxvdykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoJy4nID09PSBqc29uU3RyaW5nW2pzb25TdHJpbmcubGVuZ3RoIC0gMV0pXG4gICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGpzb25TdHJpbmcuc3Vic3RyaW5nKDAsIGpzb25TdHJpbmcubGFzdEluZGV4T2YoJy4nKSkpO1xuICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoanNvblN0cmluZy5zdWJzdHJpbmcoMCwganNvblN0cmluZy5sYXN0SW5kZXhPZignZScpKSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfVxuICAgICAgICB0aHJvd01hbGZvcm1lZEVycm9yKFN0cmluZyhlKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc3RhcnQgPSBpbmRleDtcblxuICAgIGlmIChqc29uU3RyaW5nW2luZGV4XSA9PT0gJy0nKSBpbmRleCsrO1xuICAgIHdoaWxlIChqc29uU3RyaW5nW2luZGV4XSAmJiAhJyxdfScuaW5jbHVkZXMoanNvblN0cmluZ1tpbmRleF0hKSkgaW5kZXgrKztcblxuICAgIGlmIChpbmRleCA9PSBsZW5ndGggJiYgIShBbGxvdy5OVU0gJiBhbGxvdykpIG1hcmtQYXJ0aWFsSlNPTignVW50ZXJtaW5hdGVkIG51bWJlciBsaXRlcmFsJyk7XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UoanNvblN0cmluZy5zdWJzdHJpbmcoc3RhcnQsIGluZGV4KSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGpzb25TdHJpbmcuc3Vic3RyaW5nKHN0YXJ0LCBpbmRleCkgPT09ICctJyAmJiBBbGxvdy5OVU0gJiBhbGxvdylcbiAgICAgICAgbWFya1BhcnRpYWxKU09OKFwiTm90IHN1cmUgd2hhdCAnLScgaXNcIik7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShqc29uU3RyaW5nLnN1YnN0cmluZyhzdGFydCwganNvblN0cmluZy5sYXN0SW5kZXhPZignZScpKSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93TWFsZm9ybWVkRXJyb3IoU3RyaW5nKGUpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgc2tpcEJsYW5rID0gKCkgPT4ge1xuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCAmJiAnIFxcblxcclxcdCcuaW5jbHVkZXMoanNvblN0cmluZ1tpbmRleF0hKSkge1xuICAgICAgaW5kZXgrKztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHBhcnNlQW55KCk7XG59O1xuXG4vLyB1c2luZyB0aGlzIGZ1bmN0aW9uIHdpdGggbWFsZm9ybWVkIEpTT04gaXMgdW5kZWZpbmVkIGJlaGF2aW9yXG5jb25zdCBwYXJ0aWFsUGFyc2UgPSAoaW5wdXQ6IHN0cmluZykgPT4gcGFyc2VKU09OKGlucHV0LCBBbGxvdy5BTEwgXiBBbGxvdy5OVU0pO1xuXG5leHBvcnQgeyBwYXJ0aWFsUGFyc2UsIFBhcnRpYWxKU09OLCBNYWxmb3JtZWRKU09OIH07XG4iLCAiaW1wb3J0ICogYXMgQ29yZSBmcm9tICcuLi9jb3JlJztcbmltcG9ydCB7XG4gIE9wZW5BSUVycm9yLFxuICBBUElVc2VyQWJvcnRFcnJvcixcbiAgTGVuZ3RoRmluaXNoUmVhc29uRXJyb3IsXG4gIENvbnRlbnRGaWx0ZXJGaW5pc2hSZWFzb25FcnJvcixcbn0gZnJvbSAnLi4vZXJyb3InO1xuaW1wb3J0IHtcbiAgQ2hhdENvbXBsZXRpb25Ub2tlbkxvZ3Byb2IsXG4gIHR5cGUgQ2hhdENvbXBsZXRpb24sXG4gIHR5cGUgQ2hhdENvbXBsZXRpb25DaHVuayxcbiAgdHlwZSBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtcyxcbiAgdHlwZSBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtc1N0cmVhbWluZyxcbiAgdHlwZSBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtc0Jhc2UsXG4gIHR5cGUgQ2hhdENvbXBsZXRpb25Sb2xlLFxufSBmcm9tICcuLi9yZXNvdXJjZXMvY2hhdC9jb21wbGV0aW9ucy9jb21wbGV0aW9ucyc7XG5pbXBvcnQge1xuICBBYnN0cmFjdENoYXRDb21wbGV0aW9uUnVubmVyLFxuICB0eXBlIEFic3RyYWN0Q2hhdENvbXBsZXRpb25SdW5uZXJFdmVudHMsXG59IGZyb20gJy4vQWJzdHJhY3RDaGF0Q29tcGxldGlvblJ1bm5lcic7XG5pbXBvcnQgeyB0eXBlIFJlYWRhYmxlU3RyZWFtIH0gZnJvbSAnLi4vX3NoaW1zL2luZGV4JztcbmltcG9ydCB7IFN0cmVhbSB9IGZyb20gJy4uL3N0cmVhbWluZyc7XG5pbXBvcnQgT3BlbkFJIGZyb20gJy4uL2luZGV4JztcbmltcG9ydCB7IFBhcnNlZENoYXRDb21wbGV0aW9uIH0gZnJvbSAnLi4vcmVzb3VyY2VzL2JldGEvY2hhdC9jb21wbGV0aW9ucyc7XG5pbXBvcnQge1xuICBBdXRvUGFyc2VhYmxlUmVzcG9uc2VGb3JtYXQsXG4gIGhhc0F1dG9QYXJzZWFibGVJbnB1dCxcbiAgaXNBdXRvUGFyc2FibGVSZXNwb25zZUZvcm1hdCxcbiAgaXNBdXRvUGFyc2FibGVUb29sLFxuICBtYXliZVBhcnNlQ2hhdENvbXBsZXRpb24sXG4gIHNob3VsZFBhcnNlVG9vbENhbGwsXG59IGZyb20gJy4uL2xpYi9wYXJzZXInO1xuaW1wb3J0IHsgcGFydGlhbFBhcnNlIH0gZnJvbSAnLi4vX3ZlbmRvci9wYXJ0aWFsLWpzb24tcGFyc2VyL3BhcnNlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29udGVudERlbHRhRXZlbnQge1xuICBkZWx0YTogc3RyaW5nO1xuICBzbmFwc2hvdDogc3RyaW5nO1xuICBwYXJzZWQ6IHVua25vd24gfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbnRlbnREb25lRXZlbnQ8UGFyc2VkVCA9IG51bGw+IHtcbiAgY29udGVudDogc3RyaW5nO1xuICBwYXJzZWQ6IFBhcnNlZFQgfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlZnVzYWxEZWx0YUV2ZW50IHtcbiAgZGVsdGE6IHN0cmluZztcbiAgc25hcHNob3Q6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZWZ1c2FsRG9uZUV2ZW50IHtcbiAgcmVmdXNhbDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZ1bmN0aW9uVG9vbENhbGxBcmd1bWVudHNEZWx0YUV2ZW50IHtcbiAgbmFtZTogc3RyaW5nO1xuXG4gIGluZGV4OiBudW1iZXI7XG5cbiAgYXJndW1lbnRzOiBzdHJpbmc7XG5cbiAgcGFyc2VkX2FyZ3VtZW50czogdW5rbm93bjtcblxuICBhcmd1bWVudHNfZGVsdGE6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGdW5jdGlvblRvb2xDYWxsQXJndW1lbnRzRG9uZUV2ZW50IHtcbiAgbmFtZTogc3RyaW5nO1xuXG4gIGluZGV4OiBudW1iZXI7XG5cbiAgYXJndW1lbnRzOiBzdHJpbmc7XG5cbiAgcGFyc2VkX2FyZ3VtZW50czogdW5rbm93bjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMb2dQcm9ic0NvbnRlbnREZWx0YUV2ZW50IHtcbiAgY29udGVudDogQXJyYXk8Q2hhdENvbXBsZXRpb25Ub2tlbkxvZ3Byb2I+O1xuICBzbmFwc2hvdDogQXJyYXk8Q2hhdENvbXBsZXRpb25Ub2tlbkxvZ3Byb2I+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExvZ1Byb2JzQ29udGVudERvbmVFdmVudCB7XG4gIGNvbnRlbnQ6IEFycmF5PENoYXRDb21wbGV0aW9uVG9rZW5Mb2dwcm9iPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMb2dQcm9ic1JlZnVzYWxEZWx0YUV2ZW50IHtcbiAgcmVmdXNhbDogQXJyYXk8Q2hhdENvbXBsZXRpb25Ub2tlbkxvZ3Byb2I+O1xuICBzbmFwc2hvdDogQXJyYXk8Q2hhdENvbXBsZXRpb25Ub2tlbkxvZ3Byb2I+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExvZ1Byb2JzUmVmdXNhbERvbmVFdmVudCB7XG4gIHJlZnVzYWw6IEFycmF5PENoYXRDb21wbGV0aW9uVG9rZW5Mb2dwcm9iPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaGF0Q29tcGxldGlvblN0cmVhbUV2ZW50czxQYXJzZWRUID0gbnVsbD4gZXh0ZW5kcyBBYnN0cmFjdENoYXRDb21wbGV0aW9uUnVubmVyRXZlbnRzIHtcbiAgY29udGVudDogKGNvbnRlbnREZWx0YTogc3RyaW5nLCBjb250ZW50U25hcHNob3Q6IHN0cmluZykgPT4gdm9pZDtcbiAgY2h1bms6IChjaHVuazogQ2hhdENvbXBsZXRpb25DaHVuaywgc25hcHNob3Q6IENoYXRDb21wbGV0aW9uU25hcHNob3QpID0+IHZvaWQ7XG5cbiAgJ2NvbnRlbnQuZGVsdGEnOiAocHJvcHM6IENvbnRlbnREZWx0YUV2ZW50KSA9PiB2b2lkO1xuICAnY29udGVudC5kb25lJzogKHByb3BzOiBDb250ZW50RG9uZUV2ZW50PFBhcnNlZFQ+KSA9PiB2b2lkO1xuXG4gICdyZWZ1c2FsLmRlbHRhJzogKHByb3BzOiBSZWZ1c2FsRGVsdGFFdmVudCkgPT4gdm9pZDtcbiAgJ3JlZnVzYWwuZG9uZSc6IChwcm9wczogUmVmdXNhbERvbmVFdmVudCkgPT4gdm9pZDtcblxuICAndG9vbF9jYWxscy5mdW5jdGlvbi5hcmd1bWVudHMuZGVsdGEnOiAocHJvcHM6IEZ1bmN0aW9uVG9vbENhbGxBcmd1bWVudHNEZWx0YUV2ZW50KSA9PiB2b2lkO1xuICAndG9vbF9jYWxscy5mdW5jdGlvbi5hcmd1bWVudHMuZG9uZSc6IChwcm9wczogRnVuY3Rpb25Ub29sQ2FsbEFyZ3VtZW50c0RvbmVFdmVudCkgPT4gdm9pZDtcblxuICAnbG9ncHJvYnMuY29udGVudC5kZWx0YSc6IChwcm9wczogTG9nUHJvYnNDb250ZW50RGVsdGFFdmVudCkgPT4gdm9pZDtcbiAgJ2xvZ3Byb2JzLmNvbnRlbnQuZG9uZSc6IChwcm9wczogTG9nUHJvYnNDb250ZW50RG9uZUV2ZW50KSA9PiB2b2lkO1xuXG4gICdsb2dwcm9icy5yZWZ1c2FsLmRlbHRhJzogKHByb3BzOiBMb2dQcm9ic1JlZnVzYWxEZWx0YUV2ZW50KSA9PiB2b2lkO1xuICAnbG9ncHJvYnMucmVmdXNhbC5kb25lJzogKHByb3BzOiBMb2dQcm9ic1JlZnVzYWxEb25lRXZlbnQpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCB0eXBlIENoYXRDb21wbGV0aW9uU3RyZWFtUGFyYW1zID0gT21pdDxDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtc0Jhc2UsICdzdHJlYW0nPiAmIHtcbiAgc3RyZWFtPzogdHJ1ZTtcbn07XG5cbmludGVyZmFjZSBDaG9pY2VFdmVudFN0YXRlIHtcbiAgY29udGVudF9kb25lOiBib29sZWFuO1xuICByZWZ1c2FsX2RvbmU6IGJvb2xlYW47XG4gIGxvZ3Byb2JzX2NvbnRlbnRfZG9uZTogYm9vbGVhbjtcbiAgbG9ncHJvYnNfcmVmdXNhbF9kb25lOiBib29sZWFuO1xuICBjdXJyZW50X3Rvb2xfY2FsbF9pbmRleDogbnVtYmVyIHwgbnVsbDtcbiAgZG9uZV90b29sX2NhbGxzOiBTZXQ8bnVtYmVyPjtcbn1cblxuZXhwb3J0IGNsYXNzIENoYXRDb21wbGV0aW9uU3RyZWFtPFBhcnNlZFQgPSBudWxsPlxuICBleHRlbmRzIEFic3RyYWN0Q2hhdENvbXBsZXRpb25SdW5uZXI8Q2hhdENvbXBsZXRpb25TdHJlYW1FdmVudHM8UGFyc2VkVD4sIFBhcnNlZFQ+XG4gIGltcGxlbWVudHMgQXN5bmNJdGVyYWJsZTxDaGF0Q29tcGxldGlvbkNodW5rPlxue1xuICAjcGFyYW1zOiBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtcyB8IG51bGw7XG4gICNjaG9pY2VFdmVudFN0YXRlczogQ2hvaWNlRXZlbnRTdGF0ZVtdO1xuICAjY3VycmVudENoYXRDb21wbGV0aW9uU25hcHNob3Q6IENoYXRDb21wbGV0aW9uU25hcHNob3QgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IocGFyYW1zOiBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtcyB8IG51bGwpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuI3BhcmFtcyA9IHBhcmFtcztcbiAgICB0aGlzLiNjaG9pY2VFdmVudFN0YXRlcyA9IFtdO1xuICB9XG5cbiAgZ2V0IGN1cnJlbnRDaGF0Q29tcGxldGlvblNuYXBzaG90KCk6IENoYXRDb21wbGV0aW9uU25hcHNob3QgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLiNjdXJyZW50Q2hhdENvbXBsZXRpb25TbmFwc2hvdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnRlbmRlZCBmb3IgdXNlIG9uIHRoZSBmcm9udGVuZCwgY29uc3VtaW5nIGEgc3RyZWFtIHByb2R1Y2VkIHdpdGhcbiAgICogYC50b1JlYWRhYmxlU3RyZWFtKClgIG9uIHRoZSBiYWNrZW5kLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgbWVzc2FnZXMgc2VudCB0byB0aGUgbW9kZWwgZG8gbm90IGFwcGVhciBpbiBgLm9uKCdtZXNzYWdlJylgXG4gICAqIGluIHRoaXMgY29udGV4dC5cbiAgICovXG4gIHN0YXRpYyBmcm9tUmVhZGFibGVTdHJlYW0oc3RyZWFtOiBSZWFkYWJsZVN0cmVhbSk6IENoYXRDb21wbGV0aW9uU3RyZWFtPG51bGw+IHtcbiAgICBjb25zdCBydW5uZXIgPSBuZXcgQ2hhdENvbXBsZXRpb25TdHJlYW0obnVsbCk7XG4gICAgcnVubmVyLl9ydW4oKCkgPT4gcnVubmVyLl9mcm9tUmVhZGFibGVTdHJlYW0oc3RyZWFtKSk7XG4gICAgcmV0dXJuIHJ1bm5lcjtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVDaGF0Q29tcGxldGlvbjxQYXJzZWRUPihcbiAgICBjbGllbnQ6IE9wZW5BSSxcbiAgICBwYXJhbXM6IENoYXRDb21wbGV0aW9uU3RyZWFtUGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDaGF0Q29tcGxldGlvblN0cmVhbTxQYXJzZWRUPiB7XG4gICAgY29uc3QgcnVubmVyID0gbmV3IENoYXRDb21wbGV0aW9uU3RyZWFtPFBhcnNlZFQ+KHBhcmFtcyBhcyBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtc1N0cmVhbWluZyk7XG4gICAgcnVubmVyLl9ydW4oKCkgPT5cbiAgICAgIHJ1bm5lci5fcnVuQ2hhdENvbXBsZXRpb24oXG4gICAgICAgIGNsaWVudCxcbiAgICAgICAgeyAuLi5wYXJhbXMsIHN0cmVhbTogdHJ1ZSB9LFxuICAgICAgICB7IC4uLm9wdGlvbnMsIGhlYWRlcnM6IHsgLi4ub3B0aW9ucz8uaGVhZGVycywgJ1gtU3RhaW5sZXNzLUhlbHBlci1NZXRob2QnOiAnc3RyZWFtJyB9IH0sXG4gICAgICApLFxuICAgICk7XG4gICAgcmV0dXJuIHJ1bm5lcjtcbiAgfVxuXG4gICNiZWdpblJlcXVlc3QoKSB7XG4gICAgaWYgKHRoaXMuZW5kZWQpIHJldHVybjtcbiAgICB0aGlzLiNjdXJyZW50Q2hhdENvbXBsZXRpb25TbmFwc2hvdCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gICNnZXRDaG9pY2VFdmVudFN0YXRlKGNob2ljZTogQ2hhdENvbXBsZXRpb25TbmFwc2hvdC5DaG9pY2UpOiBDaG9pY2VFdmVudFN0YXRlIHtcbiAgICBsZXQgc3RhdGUgPSB0aGlzLiNjaG9pY2VFdmVudFN0YXRlc1tjaG9pY2UuaW5kZXhdO1xuICAgIGlmIChzdGF0ZSkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cblxuICAgIHN0YXRlID0ge1xuICAgICAgY29udGVudF9kb25lOiBmYWxzZSxcbiAgICAgIHJlZnVzYWxfZG9uZTogZmFsc2UsXG4gICAgICBsb2dwcm9ic19jb250ZW50X2RvbmU6IGZhbHNlLFxuICAgICAgbG9ncHJvYnNfcmVmdXNhbF9kb25lOiBmYWxzZSxcbiAgICAgIGRvbmVfdG9vbF9jYWxsczogbmV3IFNldCgpLFxuICAgICAgY3VycmVudF90b29sX2NhbGxfaW5kZXg6IG51bGwsXG4gICAgfTtcbiAgICB0aGlzLiNjaG9pY2VFdmVudFN0YXRlc1tjaG9pY2UuaW5kZXhdID0gc3RhdGU7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgI2FkZENodW5rKHRoaXM6IENoYXRDb21wbGV0aW9uU3RyZWFtPFBhcnNlZFQ+LCBjaHVuazogQ2hhdENvbXBsZXRpb25DaHVuaykge1xuICAgIGlmICh0aGlzLmVuZGVkKSByZXR1cm47XG5cbiAgICBjb25zdCBjb21wbGV0aW9uID0gdGhpcy4jYWNjdW11bGF0ZUNoYXRDb21wbGV0aW9uKGNodW5rKTtcbiAgICB0aGlzLl9lbWl0KCdjaHVuaycsIGNodW5rLCBjb21wbGV0aW9uKTtcblxuICAgIGZvciAoY29uc3QgY2hvaWNlIG9mIGNodW5rLmNob2ljZXMpIHtcbiAgICAgIGNvbnN0IGNob2ljZVNuYXBzaG90ID0gY29tcGxldGlvbi5jaG9pY2VzW2Nob2ljZS5pbmRleF0hO1xuXG4gICAgICBpZiAoXG4gICAgICAgIGNob2ljZS5kZWx0YS5jb250ZW50ICE9IG51bGwgJiZcbiAgICAgICAgY2hvaWNlU25hcHNob3QubWVzc2FnZT8ucm9sZSA9PT0gJ2Fzc2lzdGFudCcgJiZcbiAgICAgICAgY2hvaWNlU25hcHNob3QubWVzc2FnZT8uY29udGVudFxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuX2VtaXQoJ2NvbnRlbnQnLCBjaG9pY2UuZGVsdGEuY29udGVudCwgY2hvaWNlU25hcHNob3QubWVzc2FnZS5jb250ZW50KTtcbiAgICAgICAgdGhpcy5fZW1pdCgnY29udGVudC5kZWx0YScsIHtcbiAgICAgICAgICBkZWx0YTogY2hvaWNlLmRlbHRhLmNvbnRlbnQsXG4gICAgICAgICAgc25hcHNob3Q6IGNob2ljZVNuYXBzaG90Lm1lc3NhZ2UuY29udGVudCxcbiAgICAgICAgICBwYXJzZWQ6IGNob2ljZVNuYXBzaG90Lm1lc3NhZ2UucGFyc2VkLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBjaG9pY2UuZGVsdGEucmVmdXNhbCAhPSBudWxsICYmXG4gICAgICAgIGNob2ljZVNuYXBzaG90Lm1lc3NhZ2U/LnJvbGUgPT09ICdhc3Npc3RhbnQnICYmXG4gICAgICAgIGNob2ljZVNuYXBzaG90Lm1lc3NhZ2U/LnJlZnVzYWxcbiAgICAgICkge1xuICAgICAgICB0aGlzLl9lbWl0KCdyZWZ1c2FsLmRlbHRhJywge1xuICAgICAgICAgIGRlbHRhOiBjaG9pY2UuZGVsdGEucmVmdXNhbCxcbiAgICAgICAgICBzbmFwc2hvdDogY2hvaWNlU25hcHNob3QubWVzc2FnZS5yZWZ1c2FsLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNob2ljZS5sb2dwcm9icz8uY29udGVudCAhPSBudWxsICYmIGNob2ljZVNuYXBzaG90Lm1lc3NhZ2U/LnJvbGUgPT09ICdhc3Npc3RhbnQnKSB7XG4gICAgICAgIHRoaXMuX2VtaXQoJ2xvZ3Byb2JzLmNvbnRlbnQuZGVsdGEnLCB7XG4gICAgICAgICAgY29udGVudDogY2hvaWNlLmxvZ3Byb2JzPy5jb250ZW50LFxuICAgICAgICAgIHNuYXBzaG90OiBjaG9pY2VTbmFwc2hvdC5sb2dwcm9icz8uY29udGVudCA/PyBbXSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaG9pY2UubG9ncHJvYnM/LnJlZnVzYWwgIT0gbnVsbCAmJiBjaG9pY2VTbmFwc2hvdC5tZXNzYWdlPy5yb2xlID09PSAnYXNzaXN0YW50Jykge1xuICAgICAgICB0aGlzLl9lbWl0KCdsb2dwcm9icy5yZWZ1c2FsLmRlbHRhJywge1xuICAgICAgICAgIHJlZnVzYWw6IGNob2ljZS5sb2dwcm9icz8ucmVmdXNhbCxcbiAgICAgICAgICBzbmFwc2hvdDogY2hvaWNlU25hcHNob3QubG9ncHJvYnM/LnJlZnVzYWwgPz8gW10sXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuI2dldENob2ljZUV2ZW50U3RhdGUoY2hvaWNlU25hcHNob3QpO1xuXG4gICAgICBpZiAoY2hvaWNlU25hcHNob3QuZmluaXNoX3JlYXNvbikge1xuICAgICAgICB0aGlzLiNlbWl0Q29udGVudERvbmVFdmVudHMoY2hvaWNlU25hcHNob3QpO1xuXG4gICAgICAgIGlmIChzdGF0ZS5jdXJyZW50X3Rvb2xfY2FsbF9pbmRleCAhPSBudWxsKSB7XG4gICAgICAgICAgdGhpcy4jZW1pdFRvb2xDYWxsRG9uZUV2ZW50KGNob2ljZVNuYXBzaG90LCBzdGF0ZS5jdXJyZW50X3Rvb2xfY2FsbF9pbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCB0b29sQ2FsbCBvZiBjaG9pY2UuZGVsdGEudG9vbF9jYWxscyA/PyBbXSkge1xuICAgICAgICBpZiAoc3RhdGUuY3VycmVudF90b29sX2NhbGxfaW5kZXggIT09IHRvb2xDYWxsLmluZGV4KSB7XG4gICAgICAgICAgdGhpcy4jZW1pdENvbnRlbnREb25lRXZlbnRzKGNob2ljZVNuYXBzaG90KTtcblxuICAgICAgICAgIC8vIG5ldyB0b29sIGNhbGwgc3RhcnRlZCwgdGhlIHByZXZpb3VzIG9uZSBpcyBkb25lXG4gICAgICAgICAgaWYgKHN0YXRlLmN1cnJlbnRfdG9vbF9jYWxsX2luZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuI2VtaXRUb29sQ2FsbERvbmVFdmVudChjaG9pY2VTbmFwc2hvdCwgc3RhdGUuY3VycmVudF90b29sX2NhbGxfaW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlLmN1cnJlbnRfdG9vbF9jYWxsX2luZGV4ID0gdG9vbENhbGwuaW5kZXg7XG4gICAgICB9XG5cbiAgICAgIGZvciAoY29uc3QgdG9vbENhbGxEZWx0YSBvZiBjaG9pY2UuZGVsdGEudG9vbF9jYWxscyA/PyBbXSkge1xuICAgICAgICBjb25zdCB0b29sQ2FsbFNuYXBzaG90ID0gY2hvaWNlU25hcHNob3QubWVzc2FnZS50b29sX2NhbGxzPy5bdG9vbENhbGxEZWx0YS5pbmRleF07XG4gICAgICAgIGlmICghdG9vbENhbGxTbmFwc2hvdD8udHlwZSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRvb2xDYWxsU25hcHNob3Q/LnR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aGlzLl9lbWl0KCd0b29sX2NhbGxzLmZ1bmN0aW9uLmFyZ3VtZW50cy5kZWx0YScsIHtcbiAgICAgICAgICAgIG5hbWU6IHRvb2xDYWxsU25hcHNob3QuZnVuY3Rpb24/Lm5hbWUsXG4gICAgICAgICAgICBpbmRleDogdG9vbENhbGxEZWx0YS5pbmRleCxcbiAgICAgICAgICAgIGFyZ3VtZW50czogdG9vbENhbGxTbmFwc2hvdC5mdW5jdGlvbi5hcmd1bWVudHMsXG4gICAgICAgICAgICBwYXJzZWRfYXJndW1lbnRzOiB0b29sQ2FsbFNuYXBzaG90LmZ1bmN0aW9uLnBhcnNlZF9hcmd1bWVudHMsXG4gICAgICAgICAgICBhcmd1bWVudHNfZGVsdGE6IHRvb2xDYWxsRGVsdGEuZnVuY3Rpb24/LmFyZ3VtZW50cyA/PyAnJyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhc3NlcnROZXZlcih0b29sQ2FsbFNuYXBzaG90Py50eXBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICNlbWl0VG9vbENhbGxEb25lRXZlbnQoY2hvaWNlU25hcHNob3Q6IENoYXRDb21wbGV0aW9uU25hcHNob3QuQ2hvaWNlLCB0b29sQ2FsbEluZGV4OiBudW1iZXIpIHtcbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuI2dldENob2ljZUV2ZW50U3RhdGUoY2hvaWNlU25hcHNob3QpO1xuICAgIGlmIChzdGF0ZS5kb25lX3Rvb2xfY2FsbHMuaGFzKHRvb2xDYWxsSW5kZXgpKSB7XG4gICAgICAvLyB3ZSd2ZSBhbHJlYWR5IGZpcmVkIHRoZSBkb25lIGV2ZW50XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdG9vbENhbGxTbmFwc2hvdCA9IGNob2ljZVNuYXBzaG90Lm1lc3NhZ2UudG9vbF9jYWxscz8uW3Rvb2xDYWxsSW5kZXhdO1xuICAgIGlmICghdG9vbENhbGxTbmFwc2hvdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdubyB0b29sIGNhbGwgc25hcHNob3QnKTtcbiAgICB9XG4gICAgaWYgKCF0b29sQ2FsbFNuYXBzaG90LnR5cGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigndG9vbCBjYWxsIHNuYXBzaG90IG1pc3NpbmcgYHR5cGVgJyk7XG4gICAgfVxuXG4gICAgaWYgKHRvb2xDYWxsU25hcHNob3QudHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc3QgaW5wdXRUb29sID0gdGhpcy4jcGFyYW1zPy50b29scz8uZmluZChcbiAgICAgICAgKHRvb2wpID0+IHRvb2wudHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0b29sLmZ1bmN0aW9uLm5hbWUgPT09IHRvb2xDYWxsU25hcHNob3QuZnVuY3Rpb24ubmFtZSxcbiAgICAgICk7XG5cbiAgICAgIHRoaXMuX2VtaXQoJ3Rvb2xfY2FsbHMuZnVuY3Rpb24uYXJndW1lbnRzLmRvbmUnLCB7XG4gICAgICAgIG5hbWU6IHRvb2xDYWxsU25hcHNob3QuZnVuY3Rpb24ubmFtZSxcbiAgICAgICAgaW5kZXg6IHRvb2xDYWxsSW5kZXgsXG4gICAgICAgIGFyZ3VtZW50czogdG9vbENhbGxTbmFwc2hvdC5mdW5jdGlvbi5hcmd1bWVudHMsXG4gICAgICAgIHBhcnNlZF9hcmd1bWVudHM6XG4gICAgICAgICAgaXNBdXRvUGFyc2FibGVUb29sKGlucHV0VG9vbCkgPyBpbnB1dFRvb2wuJHBhcnNlUmF3KHRvb2xDYWxsU25hcHNob3QuZnVuY3Rpb24uYXJndW1lbnRzKVxuICAgICAgICAgIDogaW5wdXRUb29sPy5mdW5jdGlvbi5zdHJpY3QgPyBKU09OLnBhcnNlKHRvb2xDYWxsU25hcHNob3QuZnVuY3Rpb24uYXJndW1lbnRzKVxuICAgICAgICAgIDogbnVsbCxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnROZXZlcih0b29sQ2FsbFNuYXBzaG90LnR5cGUpO1xuICAgIH1cbiAgfVxuXG4gICNlbWl0Q29udGVudERvbmVFdmVudHMoY2hvaWNlU25hcHNob3Q6IENoYXRDb21wbGV0aW9uU25hcHNob3QuQ2hvaWNlKSB7XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLiNnZXRDaG9pY2VFdmVudFN0YXRlKGNob2ljZVNuYXBzaG90KTtcblxuICAgIGlmIChjaG9pY2VTbmFwc2hvdC5tZXNzYWdlLmNvbnRlbnQgJiYgIXN0YXRlLmNvbnRlbnRfZG9uZSkge1xuICAgICAgc3RhdGUuY29udGVudF9kb25lID0gdHJ1ZTtcblxuICAgICAgY29uc3QgcmVzcG9uc2VGb3JtYXQgPSB0aGlzLiNnZXRBdXRvUGFyc2VhYmxlUmVzcG9uc2VGb3JtYXQoKTtcblxuICAgICAgdGhpcy5fZW1pdCgnY29udGVudC5kb25lJywge1xuICAgICAgICBjb250ZW50OiBjaG9pY2VTbmFwc2hvdC5tZXNzYWdlLmNvbnRlbnQsXG4gICAgICAgIHBhcnNlZDogcmVzcG9uc2VGb3JtYXQgPyByZXNwb25zZUZvcm1hdC4kcGFyc2VSYXcoY2hvaWNlU25hcHNob3QubWVzc2FnZS5jb250ZW50KSA6IChudWxsIGFzIGFueSksXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoY2hvaWNlU25hcHNob3QubWVzc2FnZS5yZWZ1c2FsICYmICFzdGF0ZS5yZWZ1c2FsX2RvbmUpIHtcbiAgICAgIHN0YXRlLnJlZnVzYWxfZG9uZSA9IHRydWU7XG5cbiAgICAgIHRoaXMuX2VtaXQoJ3JlZnVzYWwuZG9uZScsIHsgcmVmdXNhbDogY2hvaWNlU25hcHNob3QubWVzc2FnZS5yZWZ1c2FsIH0pO1xuICAgIH1cblxuICAgIGlmIChjaG9pY2VTbmFwc2hvdC5sb2dwcm9icz8uY29udGVudCAmJiAhc3RhdGUubG9ncHJvYnNfY29udGVudF9kb25lKSB7XG4gICAgICBzdGF0ZS5sb2dwcm9ic19jb250ZW50X2RvbmUgPSB0cnVlO1xuXG4gICAgICB0aGlzLl9lbWl0KCdsb2dwcm9icy5jb250ZW50LmRvbmUnLCB7IGNvbnRlbnQ6IGNob2ljZVNuYXBzaG90LmxvZ3Byb2JzLmNvbnRlbnQgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNob2ljZVNuYXBzaG90LmxvZ3Byb2JzPy5yZWZ1c2FsICYmICFzdGF0ZS5sb2dwcm9ic19yZWZ1c2FsX2RvbmUpIHtcbiAgICAgIHN0YXRlLmxvZ3Byb2JzX3JlZnVzYWxfZG9uZSA9IHRydWU7XG5cbiAgICAgIHRoaXMuX2VtaXQoJ2xvZ3Byb2JzLnJlZnVzYWwuZG9uZScsIHsgcmVmdXNhbDogY2hvaWNlU25hcHNob3QubG9ncHJvYnMucmVmdXNhbCB9KTtcbiAgICB9XG4gIH1cblxuICAjZW5kUmVxdWVzdCgpOiBQYXJzZWRDaGF0Q29tcGxldGlvbjxQYXJzZWRUPiB7XG4gICAgaWYgKHRoaXMuZW5kZWQpIHtcbiAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihgc3RyZWFtIGhhcyBlbmRlZCwgdGhpcyBzaG91bGRuJ3QgaGFwcGVuYCk7XG4gICAgfVxuICAgIGNvbnN0IHNuYXBzaG90ID0gdGhpcy4jY3VycmVudENoYXRDb21wbGV0aW9uU25hcHNob3Q7XG4gICAgaWYgKCFzbmFwc2hvdCkge1xuICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGByZXF1ZXN0IGVuZGVkIHdpdGhvdXQgc2VuZGluZyBhbnkgY2h1bmtzYCk7XG4gICAgfVxuICAgIHRoaXMuI2N1cnJlbnRDaGF0Q29tcGxldGlvblNuYXBzaG90ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuI2Nob2ljZUV2ZW50U3RhdGVzID0gW107XG4gICAgcmV0dXJuIGZpbmFsaXplQ2hhdENvbXBsZXRpb24oc25hcHNob3QsIHRoaXMuI3BhcmFtcyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgYXN5bmMgX2NyZWF0ZUNoYXRDb21wbGV0aW9uKFxuICAgIGNsaWVudDogT3BlbkFJLFxuICAgIHBhcmFtczogQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXMsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IFByb21pc2U8UGFyc2VkQ2hhdENvbXBsZXRpb248UGFyc2VkVD4+IHtcbiAgICBzdXBlci5fY3JlYXRlQ2hhdENvbXBsZXRpb247XG4gICAgY29uc3Qgc2lnbmFsID0gb3B0aW9ucz8uc2lnbmFsO1xuICAgIGlmIChzaWduYWwpIHtcbiAgICAgIGlmIChzaWduYWwuYWJvcnRlZCkgdGhpcy5jb250cm9sbGVyLmFib3J0KCk7XG4gICAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCAoKSA9PiB0aGlzLmNvbnRyb2xsZXIuYWJvcnQoKSk7XG4gICAgfVxuICAgIHRoaXMuI2JlZ2luUmVxdWVzdCgpO1xuXG4gICAgY29uc3Qgc3RyZWFtID0gYXdhaXQgY2xpZW50LmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKFxuICAgICAgeyAuLi5wYXJhbXMsIHN0cmVhbTogdHJ1ZSB9LFxuICAgICAgeyAuLi5vcHRpb25zLCBzaWduYWw6IHRoaXMuY29udHJvbGxlci5zaWduYWwgfSxcbiAgICApO1xuICAgIHRoaXMuX2Nvbm5lY3RlZCgpO1xuICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2Ygc3RyZWFtKSB7XG4gICAgICB0aGlzLiNhZGRDaHVuayhjaHVuayk7XG4gICAgfVxuICAgIGlmIChzdHJlYW0uY29udHJvbGxlci5zaWduYWw/LmFib3J0ZWQpIHtcbiAgICAgIHRocm93IG5ldyBBUElVc2VyQWJvcnRFcnJvcigpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fYWRkQ2hhdENvbXBsZXRpb24odGhpcy4jZW5kUmVxdWVzdCgpKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBhc3luYyBfZnJvbVJlYWRhYmxlU3RyZWFtKFxuICAgIHJlYWRhYmxlU3RyZWFtOiBSZWFkYWJsZVN0cmVhbSxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogUHJvbWlzZTxDaGF0Q29tcGxldGlvbj4ge1xuICAgIGNvbnN0IHNpZ25hbCA9IG9wdGlvbnM/LnNpZ25hbDtcbiAgICBpZiAoc2lnbmFsKSB7XG4gICAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHRoaXMuY29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgKCkgPT4gdGhpcy5jb250cm9sbGVyLmFib3J0KCkpO1xuICAgIH1cbiAgICB0aGlzLiNiZWdpblJlcXVlc3QoKTtcbiAgICB0aGlzLl9jb25uZWN0ZWQoKTtcbiAgICBjb25zdCBzdHJlYW0gPSBTdHJlYW0uZnJvbVJlYWRhYmxlU3RyZWFtPENoYXRDb21wbGV0aW9uQ2h1bms+KHJlYWRhYmxlU3RyZWFtLCB0aGlzLmNvbnRyb2xsZXIpO1xuICAgIGxldCBjaGF0SWQ7XG4gICAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiBzdHJlYW0pIHtcbiAgICAgIGlmIChjaGF0SWQgJiYgY2hhdElkICE9PSBjaHVuay5pZCkge1xuICAgICAgICAvLyBBIG5ldyByZXF1ZXN0IGhhcyBiZWVuIG1hZGUuXG4gICAgICAgIHRoaXMuX2FkZENoYXRDb21wbGV0aW9uKHRoaXMuI2VuZFJlcXVlc3QoKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuI2FkZENodW5rKGNodW5rKTtcbiAgICAgIGNoYXRJZCA9IGNodW5rLmlkO1xuICAgIH1cbiAgICBpZiAoc3RyZWFtLmNvbnRyb2xsZXIuc2lnbmFsPy5hYm9ydGVkKSB7XG4gICAgICB0aHJvdyBuZXcgQVBJVXNlckFib3J0RXJyb3IoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2FkZENoYXRDb21wbGV0aW9uKHRoaXMuI2VuZFJlcXVlc3QoKSk7XG4gIH1cblxuICAjZ2V0QXV0b1BhcnNlYWJsZVJlc3BvbnNlRm9ybWF0KCk6IEF1dG9QYXJzZWFibGVSZXNwb25zZUZvcm1hdDxQYXJzZWRUPiB8IG51bGwge1xuICAgIGNvbnN0IHJlc3BvbnNlRm9ybWF0ID0gdGhpcy4jcGFyYW1zPy5yZXNwb25zZV9mb3JtYXQ7XG4gICAgaWYgKGlzQXV0b1BhcnNhYmxlUmVzcG9uc2VGb3JtYXQ8UGFyc2VkVD4ocmVzcG9uc2VGb3JtYXQpKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2VGb3JtYXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAjYWNjdW11bGF0ZUNoYXRDb21wbGV0aW9uKGNodW5rOiBDaGF0Q29tcGxldGlvbkNodW5rKTogQ2hhdENvbXBsZXRpb25TbmFwc2hvdCB7XG4gICAgbGV0IHNuYXBzaG90ID0gdGhpcy4jY3VycmVudENoYXRDb21wbGV0aW9uU25hcHNob3Q7XG4gICAgY29uc3QgeyBjaG9pY2VzLCAuLi5yZXN0IH0gPSBjaHVuaztcbiAgICBpZiAoIXNuYXBzaG90KSB7XG4gICAgICBzbmFwc2hvdCA9IHRoaXMuI2N1cnJlbnRDaGF0Q29tcGxldGlvblNuYXBzaG90ID0ge1xuICAgICAgICAuLi5yZXN0LFxuICAgICAgICBjaG9pY2VzOiBbXSxcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIE9iamVjdC5hc3NpZ24oc25hcHNob3QsIHJlc3QpO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgeyBkZWx0YSwgZmluaXNoX3JlYXNvbiwgaW5kZXgsIGxvZ3Byb2JzID0gbnVsbCwgLi4ub3RoZXIgfSBvZiBjaHVuay5jaG9pY2VzKSB7XG4gICAgICBsZXQgY2hvaWNlID0gc25hcHNob3QuY2hvaWNlc1tpbmRleF07XG4gICAgICBpZiAoIWNob2ljZSkge1xuICAgICAgICBjaG9pY2UgPSBzbmFwc2hvdC5jaG9pY2VzW2luZGV4XSA9IHsgZmluaXNoX3JlYXNvbiwgaW5kZXgsIG1lc3NhZ2U6IHt9LCBsb2dwcm9icywgLi4ub3RoZXIgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxvZ3Byb2JzKSB7XG4gICAgICAgIGlmICghY2hvaWNlLmxvZ3Byb2JzKSB7XG4gICAgICAgICAgY2hvaWNlLmxvZ3Byb2JzID0gT2JqZWN0LmFzc2lnbih7fSwgbG9ncHJvYnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHsgY29udGVudCwgcmVmdXNhbCwgLi4ucmVzdCB9ID0gbG9ncHJvYnM7XG4gICAgICAgICAgYXNzZXJ0SXNFbXB0eShyZXN0KTtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKGNob2ljZS5sb2dwcm9icywgcmVzdCk7XG5cbiAgICAgICAgICBpZiAoY29udGVudCkge1xuICAgICAgICAgICAgY2hvaWNlLmxvZ3Byb2JzLmNvbnRlbnQgPz89IFtdO1xuICAgICAgICAgICAgY2hvaWNlLmxvZ3Byb2JzLmNvbnRlbnQucHVzaCguLi5jb250ZW50KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocmVmdXNhbCkge1xuICAgICAgICAgICAgY2hvaWNlLmxvZ3Byb2JzLnJlZnVzYWwgPz89IFtdO1xuICAgICAgICAgICAgY2hvaWNlLmxvZ3Byb2JzLnJlZnVzYWwucHVzaCguLi5yZWZ1c2FsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmlzaF9yZWFzb24pIHtcbiAgICAgICAgY2hvaWNlLmZpbmlzaF9yZWFzb24gPSBmaW5pc2hfcmVhc29uO1xuXG4gICAgICAgIGlmICh0aGlzLiNwYXJhbXMgJiYgaGFzQXV0b1BhcnNlYWJsZUlucHV0KHRoaXMuI3BhcmFtcykpIHtcbiAgICAgICAgICBpZiAoZmluaXNoX3JlYXNvbiA9PT0gJ2xlbmd0aCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBMZW5ndGhGaW5pc2hSZWFzb25FcnJvcigpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChmaW5pc2hfcmVhc29uID09PSAnY29udGVudF9maWx0ZXInKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQ29udGVudEZpbHRlckZpbmlzaFJlYXNvbkVycm9yKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5hc3NpZ24oY2hvaWNlLCBvdGhlcik7XG5cbiAgICAgIGlmICghZGVsdGEpIGNvbnRpbnVlOyAvLyBTaG91bGRuJ3QgaGFwcGVuOyBqdXN0IGluIGNhc2UuXG5cbiAgICAgIGNvbnN0IHsgY29udGVudCwgcmVmdXNhbCwgZnVuY3Rpb25fY2FsbCwgcm9sZSwgdG9vbF9jYWxscywgLi4ucmVzdCB9ID0gZGVsdGE7XG4gICAgICBhc3NlcnRJc0VtcHR5KHJlc3QpO1xuICAgICAgT2JqZWN0LmFzc2lnbihjaG9pY2UubWVzc2FnZSwgcmVzdCk7XG5cbiAgICAgIGlmIChyZWZ1c2FsKSB7XG4gICAgICAgIGNob2ljZS5tZXNzYWdlLnJlZnVzYWwgPSAoY2hvaWNlLm1lc3NhZ2UucmVmdXNhbCB8fCAnJykgKyByZWZ1c2FsO1xuICAgICAgfVxuXG4gICAgICBpZiAocm9sZSkgY2hvaWNlLm1lc3NhZ2Uucm9sZSA9IHJvbGU7XG4gICAgICBpZiAoZnVuY3Rpb25fY2FsbCkge1xuICAgICAgICBpZiAoIWNob2ljZS5tZXNzYWdlLmZ1bmN0aW9uX2NhbGwpIHtcbiAgICAgICAgICBjaG9pY2UubWVzc2FnZS5mdW5jdGlvbl9jYWxsID0gZnVuY3Rpb25fY2FsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoZnVuY3Rpb25fY2FsbC5uYW1lKSBjaG9pY2UubWVzc2FnZS5mdW5jdGlvbl9jYWxsLm5hbWUgPSBmdW5jdGlvbl9jYWxsLm5hbWU7XG4gICAgICAgICAgaWYgKGZ1bmN0aW9uX2NhbGwuYXJndW1lbnRzKSB7XG4gICAgICAgICAgICBjaG9pY2UubWVzc2FnZS5mdW5jdGlvbl9jYWxsLmFyZ3VtZW50cyA/Pz0gJyc7XG4gICAgICAgICAgICBjaG9pY2UubWVzc2FnZS5mdW5jdGlvbl9jYWxsLmFyZ3VtZW50cyArPSBmdW5jdGlvbl9jYWxsLmFyZ3VtZW50cztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjb250ZW50KSB7XG4gICAgICAgIGNob2ljZS5tZXNzYWdlLmNvbnRlbnQgPSAoY2hvaWNlLm1lc3NhZ2UuY29udGVudCB8fCAnJykgKyBjb250ZW50O1xuXG4gICAgICAgIGlmICghY2hvaWNlLm1lc3NhZ2UucmVmdXNhbCAmJiB0aGlzLiNnZXRBdXRvUGFyc2VhYmxlUmVzcG9uc2VGb3JtYXQoKSkge1xuICAgICAgICAgIGNob2ljZS5tZXNzYWdlLnBhcnNlZCA9IHBhcnRpYWxQYXJzZShjaG9pY2UubWVzc2FnZS5jb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodG9vbF9jYWxscykge1xuICAgICAgICBpZiAoIWNob2ljZS5tZXNzYWdlLnRvb2xfY2FsbHMpIGNob2ljZS5tZXNzYWdlLnRvb2xfY2FsbHMgPSBbXTtcblxuICAgICAgICBmb3IgKGNvbnN0IHsgaW5kZXgsIGlkLCB0eXBlLCBmdW5jdGlvbjogZm4sIC4uLnJlc3QgfSBvZiB0b29sX2NhbGxzKSB7XG4gICAgICAgICAgY29uc3QgdG9vbF9jYWxsID0gKGNob2ljZS5tZXNzYWdlLnRvb2xfY2FsbHNbaW5kZXhdID8/PVxuICAgICAgICAgICAge30gYXMgQ2hhdENvbXBsZXRpb25TbmFwc2hvdC5DaG9pY2UuTWVzc2FnZS5Ub29sQ2FsbCk7XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbih0b29sX2NhbGwsIHJlc3QpO1xuICAgICAgICAgIGlmIChpZCkgdG9vbF9jYWxsLmlkID0gaWQ7XG4gICAgICAgICAgaWYgKHR5cGUpIHRvb2xfY2FsbC50eXBlID0gdHlwZTtcbiAgICAgICAgICBpZiAoZm4pIHRvb2xfY2FsbC5mdW5jdGlvbiA/Pz0geyBuYW1lOiBmbi5uYW1lID8/ICcnLCBhcmd1bWVudHM6ICcnIH07XG4gICAgICAgICAgaWYgKGZuPy5uYW1lKSB0b29sX2NhbGwuZnVuY3Rpb24hLm5hbWUgPSBmbi5uYW1lO1xuICAgICAgICAgIGlmIChmbj8uYXJndW1lbnRzKSB7XG4gICAgICAgICAgICB0b29sX2NhbGwuZnVuY3Rpb24hLmFyZ3VtZW50cyArPSBmbi5hcmd1bWVudHM7XG5cbiAgICAgICAgICAgIGlmIChzaG91bGRQYXJzZVRvb2xDYWxsKHRoaXMuI3BhcmFtcywgdG9vbF9jYWxsKSkge1xuICAgICAgICAgICAgICB0b29sX2NhbGwuZnVuY3Rpb24hLnBhcnNlZF9hcmd1bWVudHMgPSBwYXJ0aWFsUGFyc2UodG9vbF9jYWxsLmZ1bmN0aW9uIS5hcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc25hcHNob3Q7XG4gIH1cblxuICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKHRoaXM6IENoYXRDb21wbGV0aW9uU3RyZWFtPFBhcnNlZFQ+KTogQXN5bmNJdGVyYXRvcjxDaGF0Q29tcGxldGlvbkNodW5rPiB7XG4gICAgY29uc3QgcHVzaFF1ZXVlOiBDaGF0Q29tcGxldGlvbkNodW5rW10gPSBbXTtcbiAgICBjb25zdCByZWFkUXVldWU6IHtcbiAgICAgIHJlc29sdmU6IChjaHVuazogQ2hhdENvbXBsZXRpb25DaHVuayB8IHVuZGVmaW5lZCkgPT4gdm9pZDtcbiAgICAgIHJlamVjdDogKGVycjogdW5rbm93bikgPT4gdm9pZDtcbiAgICB9W10gPSBbXTtcbiAgICBsZXQgZG9uZSA9IGZhbHNlO1xuXG4gICAgdGhpcy5vbignY2h1bmsnLCAoY2h1bmspID0+IHtcbiAgICAgIGNvbnN0IHJlYWRlciA9IHJlYWRRdWV1ZS5zaGlmdCgpO1xuICAgICAgaWYgKHJlYWRlcikge1xuICAgICAgICByZWFkZXIucmVzb2x2ZShjaHVuayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoUXVldWUucHVzaChjaHVuayk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIGZvciAoY29uc3QgcmVhZGVyIG9mIHJlYWRRdWV1ZSkge1xuICAgICAgICByZWFkZXIucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgICAgfVxuICAgICAgcmVhZFF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9uKCdhYm9ydCcsIChlcnIpID0+IHtcbiAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgZm9yIChjb25zdCByZWFkZXIgb2YgcmVhZFF1ZXVlKSB7XG4gICAgICAgIHJlYWRlci5yZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICAgIHJlYWRRdWV1ZS5sZW5ndGggPSAwO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIGZvciAoY29uc3QgcmVhZGVyIG9mIHJlYWRRdWV1ZSkge1xuICAgICAgICByZWFkZXIucmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgICByZWFkUXVldWUubGVuZ3RoID0gMDtcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICBuZXh0OiBhc3luYyAoKTogUHJvbWlzZTxJdGVyYXRvclJlc3VsdDxDaGF0Q29tcGxldGlvbkNodW5rPj4gPT4ge1xuICAgICAgICBpZiAoIXB1c2hRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8Q2hhdENvbXBsZXRpb25DaHVuayB8IHVuZGVmaW5lZD4oKHJlc29sdmUsIHJlamVjdCkgPT5cbiAgICAgICAgICAgIHJlYWRRdWV1ZS5wdXNoKHsgcmVzb2x2ZSwgcmVqZWN0IH0pLFxuICAgICAgICAgICkudGhlbigoY2h1bmspID0+IChjaHVuayA/IHsgdmFsdWU6IGNodW5rLCBkb25lOiBmYWxzZSB9IDogeyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaHVuayA9IHB1c2hRdWV1ZS5zaGlmdCgpITtcbiAgICAgICAgcmV0dXJuIHsgdmFsdWU6IGNodW5rLCBkb25lOiBmYWxzZSB9O1xuICAgICAgfSxcbiAgICAgIHJldHVybjogYXN5bmMgKCkgPT4ge1xuICAgICAgICB0aGlzLmFib3J0KCk7XG4gICAgICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIHRvUmVhZGFibGVTdHJlYW0oKTogUmVhZGFibGVTdHJlYW0ge1xuICAgIGNvbnN0IHN0cmVhbSA9IG5ldyBTdHJlYW0odGhpc1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0uYmluZCh0aGlzKSwgdGhpcy5jb250cm9sbGVyKTtcbiAgICByZXR1cm4gc3RyZWFtLnRvUmVhZGFibGVTdHJlYW0oKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5hbGl6ZUNoYXRDb21wbGV0aW9uPFBhcnNlZFQ+KFxuICBzbmFwc2hvdDogQ2hhdENvbXBsZXRpb25TbmFwc2hvdCxcbiAgcGFyYW1zOiBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtcyB8IG51bGwsXG4pOiBQYXJzZWRDaGF0Q29tcGxldGlvbjxQYXJzZWRUPiB7XG4gIGNvbnN0IHsgaWQsIGNob2ljZXMsIGNyZWF0ZWQsIG1vZGVsLCBzeXN0ZW1fZmluZ2VycHJpbnQsIC4uLnJlc3QgfSA9IHNuYXBzaG90O1xuICBjb25zdCBjb21wbGV0aW9uOiBDaGF0Q29tcGxldGlvbiA9IHtcbiAgICAuLi5yZXN0LFxuICAgIGlkLFxuICAgIGNob2ljZXM6IGNob2ljZXMubWFwKFxuICAgICAgKHsgbWVzc2FnZSwgZmluaXNoX3JlYXNvbiwgaW5kZXgsIGxvZ3Byb2JzLCAuLi5jaG9pY2VSZXN0IH0pOiBDaGF0Q29tcGxldGlvbi5DaG9pY2UgPT4ge1xuICAgICAgICBpZiAoIWZpbmlzaF9yZWFzb24pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYG1pc3NpbmcgZmluaXNoX3JlYXNvbiBmb3IgY2hvaWNlICR7aW5kZXh9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IGNvbnRlbnQgPSBudWxsLCBmdW5jdGlvbl9jYWxsLCB0b29sX2NhbGxzLCAuLi5tZXNzYWdlUmVzdCB9ID0gbWVzc2FnZTtcbiAgICAgICAgY29uc3Qgcm9sZSA9IG1lc3NhZ2Uucm9sZSBhcyAnYXNzaXN0YW50JzsgLy8gdGhpcyBpcyB3aGF0IHdlIGV4cGVjdDsgaW4gdGhlb3J5IGl0IGNvdWxkIGJlIGRpZmZlcmVudCB3aGljaCB3b3VsZCBtYWtlIG91ciB0eXBlcyBhIHNsaWdodCBsaWUgYnV0IHdvdWxkIGJlIGZpbmUuXG4gICAgICAgIGlmICghcm9sZSkge1xuICAgICAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihgbWlzc2luZyByb2xlIGZvciBjaG9pY2UgJHtpbmRleH1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmdW5jdGlvbl9jYWxsKSB7XG4gICAgICAgICAgY29uc3QgeyBhcmd1bWVudHM6IGFyZ3MsIG5hbWUgfSA9IGZ1bmN0aW9uX2NhbGw7XG4gICAgICAgICAgaWYgKGFyZ3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBtaXNzaW5nIGZ1bmN0aW9uX2NhbGwuYXJndW1lbnRzIGZvciBjaG9pY2UgJHtpbmRleH1gKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihgbWlzc2luZyBmdW5jdGlvbl9jYWxsLm5hbWUgZm9yIGNob2ljZSAke2luZGV4fWApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5jaG9pY2VSZXN0LFxuICAgICAgICAgICAgbWVzc2FnZToge1xuICAgICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAgICBmdW5jdGlvbl9jYWxsOiB7IGFyZ3VtZW50czogYXJncywgbmFtZSB9LFxuICAgICAgICAgICAgICByb2xlLFxuICAgICAgICAgICAgICByZWZ1c2FsOiBtZXNzYWdlLnJlZnVzYWwgPz8gbnVsbCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaW5pc2hfcmVhc29uLFxuICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICBsb2dwcm9icyxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRvb2xfY2FsbHMpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uY2hvaWNlUmVzdCxcbiAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgZmluaXNoX3JlYXNvbixcbiAgICAgICAgICAgIGxvZ3Byb2JzLFxuICAgICAgICAgICAgbWVzc2FnZToge1xuICAgICAgICAgICAgICAuLi5tZXNzYWdlUmVzdCxcbiAgICAgICAgICAgICAgcm9sZSxcbiAgICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgICAgcmVmdXNhbDogbWVzc2FnZS5yZWZ1c2FsID8/IG51bGwsXG4gICAgICAgICAgICAgIHRvb2xfY2FsbHM6IHRvb2xfY2FsbHMubWFwKCh0b29sX2NhbGwsIGkpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGZ1bmN0aW9uOiBmbiwgdHlwZSwgaWQsIC4uLnRvb2xSZXN0IH0gPSB0b29sX2NhbGw7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBhcmd1bWVudHM6IGFyZ3MsIG5hbWUsIC4uLmZuUmVzdCB9ID0gZm4gfHwge307XG4gICAgICAgICAgICAgICAgaWYgKGlkID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihgbWlzc2luZyBjaG9pY2VzWyR7aW5kZXh9XS50b29sX2NhbGxzWyR7aX1dLmlkXFxuJHtzdHIoc25hcHNob3QpfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYG1pc3NpbmcgY2hvaWNlc1ske2luZGV4fV0udG9vbF9jYWxsc1ske2l9XS50eXBlXFxuJHtzdHIoc25hcHNob3QpfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmFtZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIGBtaXNzaW5nIGNob2ljZXNbJHtpbmRleH1dLnRvb2xfY2FsbHNbJHtpfV0uZnVuY3Rpb24ubmFtZVxcbiR7c3RyKHNuYXBzaG90KX1gLFxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFyZ3MgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgbWlzc2luZyBjaG9pY2VzWyR7aW5kZXh9XS50b29sX2NhbGxzWyR7aX1dLmZ1bmN0aW9uLmFyZ3VtZW50c1xcbiR7c3RyKHNuYXBzaG90KX1gLFxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi50b29sUmVzdCwgaWQsIHR5cGUsIGZ1bmN0aW9uOiB7IC4uLmZuUmVzdCwgbmFtZSwgYXJndW1lbnRzOiBhcmdzIH0gfTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5jaG9pY2VSZXN0LFxuICAgICAgICAgIG1lc3NhZ2U6IHsgLi4ubWVzc2FnZVJlc3QsIGNvbnRlbnQsIHJvbGUsIHJlZnVzYWw6IG1lc3NhZ2UucmVmdXNhbCA/PyBudWxsIH0sXG4gICAgICAgICAgZmluaXNoX3JlYXNvbixcbiAgICAgICAgICBpbmRleCxcbiAgICAgICAgICBsb2dwcm9icyxcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgKSxcbiAgICBjcmVhdGVkLFxuICAgIG1vZGVsLFxuICAgIG9iamVjdDogJ2NoYXQuY29tcGxldGlvbicsXG4gICAgLi4uKHN5c3RlbV9maW5nZXJwcmludCA/IHsgc3lzdGVtX2ZpbmdlcnByaW50IH0gOiB7fSksXG4gIH07XG5cbiAgcmV0dXJuIG1heWJlUGFyc2VDaGF0Q29tcGxldGlvbihjb21wbGV0aW9uLCBwYXJhbXMpO1xufVxuXG5mdW5jdGlvbiBzdHIoeDogdW5rbm93bikge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoeCk7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHN0cmVhbWVkIGNodW5rIG9mIGEgY2hhdCBjb21wbGV0aW9uIHJlc3BvbnNlIHJldHVybmVkIGJ5IG1vZGVsLFxuICogYmFzZWQgb24gdGhlIHByb3ZpZGVkIGlucHV0LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENoYXRDb21wbGV0aW9uU25hcHNob3Qge1xuICAvKipcbiAgICogQSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGNoYXQgY29tcGxldGlvbi5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgbGlzdCBvZiBjaGF0IGNvbXBsZXRpb24gY2hvaWNlcy4gQ2FuIGJlIG1vcmUgdGhhbiBvbmUgaWYgYG5gIGlzIGdyZWF0ZXJcbiAgICogdGhhbiAxLlxuICAgKi9cbiAgY2hvaWNlczogQXJyYXk8Q2hhdENvbXBsZXRpb25TbmFwc2hvdC5DaG9pY2U+O1xuXG4gIC8qKlxuICAgKiBUaGUgVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpIG9mIHdoZW4gdGhlIGNoYXQgY29tcGxldGlvbiB3YXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQ6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG1vZGVsIHRvIGdlbmVyYXRlIHRoZSBjb21wbGV0aW9uLlxuICAgKi9cbiAgbW9kZWw6IHN0cmluZztcblxuICAvLyBOb3RlIHdlIGRvIG5vdCBpbmNsdWRlIGFuIFwib2JqZWN0XCIgdHlwZSBvbiB0aGUgc25hcHNob3QsXG4gIC8vIGJlY2F1c2UgdGhlIG9iamVjdCBpcyBub3QgYSB2YWxpZCBcImNoYXQuY29tcGxldGlvblwiIHVudGlsIGZpbmFsaXplZC5cbiAgLy8gb2JqZWN0OiAnY2hhdC5jb21wbGV0aW9uJztcblxuICAvKipcbiAgICogVGhpcyBmaW5nZXJwcmludCByZXByZXNlbnRzIHRoZSBiYWNrZW5kIGNvbmZpZ3VyYXRpb24gdGhhdCB0aGUgbW9kZWwgcnVucyB3aXRoLlxuICAgKlxuICAgKiBDYW4gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHRoZSBgc2VlZGAgcmVxdWVzdCBwYXJhbWV0ZXIgdG8gdW5kZXJzdGFuZCB3aGVuXG4gICAqIGJhY2tlbmQgY2hhbmdlcyBoYXZlIGJlZW4gbWFkZSB0aGF0IG1pZ2h0IGltcGFjdCBkZXRlcm1pbmlzbS5cbiAgICovXG4gIHN5c3RlbV9maW5nZXJwcmludD86IHN0cmluZztcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBDaGF0Q29tcGxldGlvblNuYXBzaG90IHtcbiAgZXhwb3J0IGludGVyZmFjZSBDaG9pY2Uge1xuICAgIC8qKlxuICAgICAqIEEgY2hhdCBjb21wbGV0aW9uIGRlbHRhIGdlbmVyYXRlZCBieSBzdHJlYW1lZCBtb2RlbCByZXNwb25zZXMuXG4gICAgICovXG4gICAgbWVzc2FnZTogQ2hvaWNlLk1lc3NhZ2U7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmVhc29uIHRoZSBtb2RlbCBzdG9wcGVkIGdlbmVyYXRpbmcgdG9rZW5zLiBUaGlzIHdpbGwgYmUgYHN0b3BgIGlmIHRoZSBtb2RlbFxuICAgICAqIGhpdCBhIG5hdHVyYWwgc3RvcCBwb2ludCBvciBhIHByb3ZpZGVkIHN0b3Agc2VxdWVuY2UsIGBsZW5ndGhgIGlmIHRoZSBtYXhpbXVtXG4gICAgICogbnVtYmVyIG9mIHRva2VucyBzcGVjaWZpZWQgaW4gdGhlIHJlcXVlc3Qgd2FzIHJlYWNoZWQsIGBjb250ZW50X2ZpbHRlcmAgaWZcbiAgICAgKiBjb250ZW50IHdhcyBvbWl0dGVkIGR1ZSB0byBhIGZsYWcgZnJvbSBvdXIgY29udGVudCBmaWx0ZXJzLCBvciBgZnVuY3Rpb25fY2FsbGBcbiAgICAgKiBpZiB0aGUgbW9kZWwgY2FsbGVkIGEgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZmluaXNoX3JlYXNvbjogQ2hhdENvbXBsZXRpb24uQ2hvaWNlWydmaW5pc2hfcmVhc29uJ10gfCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogTG9nIHByb2JhYmlsaXR5IGluZm9ybWF0aW9uIGZvciB0aGUgY2hvaWNlLlxuICAgICAqL1xuICAgIGxvZ3Byb2JzOiBDaGF0Q29tcGxldGlvbi5DaG9pY2UuTG9ncHJvYnMgfCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGluZGV4IG9mIHRoZSBjaG9pY2UgaW4gdGhlIGxpc3Qgb2YgY2hvaWNlcy5cbiAgICAgKi9cbiAgICBpbmRleDogbnVtYmVyO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBDaG9pY2Uge1xuICAgIC8qKlxuICAgICAqIEEgY2hhdCBjb21wbGV0aW9uIGRlbHRhIGdlbmVyYXRlZCBieSBzdHJlYW1lZCBtb2RlbCByZXNwb25zZXMuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIGNvbnRlbnRzIG9mIHRoZSBjaHVuayBtZXNzYWdlLlxuICAgICAgICovXG4gICAgICBjb250ZW50Pzogc3RyaW5nIHwgbnVsbDtcblxuICAgICAgcmVmdXNhbD86IHN0cmluZyB8IG51bGw7XG5cbiAgICAgIHBhcnNlZD86IHVua25vd24gfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBuYW1lIGFuZCBhcmd1bWVudHMgb2YgYSBmdW5jdGlvbiB0aGF0IHNob3VsZCBiZSBjYWxsZWQsIGFzIGdlbmVyYXRlZCBieSB0aGVcbiAgICAgICAqIG1vZGVsLlxuICAgICAgICovXG4gICAgICBmdW5jdGlvbl9jYWxsPzogTWVzc2FnZS5GdW5jdGlvbkNhbGw7XG5cbiAgICAgIHRvb2xfY2FsbHM/OiBBcnJheTxNZXNzYWdlLlRvb2xDYWxsPjtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgcm9sZSBvZiB0aGUgYXV0aG9yIG9mIHRoaXMgbWVzc2FnZS5cbiAgICAgICAqL1xuICAgICAgcm9sZT86IENoYXRDb21wbGV0aW9uUm9sZTtcbiAgICB9XG5cbiAgICBleHBvcnQgbmFtZXNwYWNlIE1lc3NhZ2Uge1xuICAgICAgZXhwb3J0IGludGVyZmFjZSBUb29sQ2FsbCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgSUQgb2YgdGhlIHRvb2wgY2FsbC5cbiAgICAgICAgICovXG4gICAgICAgIGlkOiBzdHJpbmc7XG5cbiAgICAgICAgZnVuY3Rpb246IFRvb2xDYWxsLkZ1bmN0aW9uO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdHlwZSBvZiB0aGUgdG9vbC5cbiAgICAgICAgICovXG4gICAgICAgIHR5cGU6ICdmdW5jdGlvbic7XG4gICAgICB9XG5cbiAgICAgIGV4cG9ydCBuYW1lc3BhY2UgVG9vbENhbGwge1xuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIEZ1bmN0aW9uIHtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBUaGUgYXJndW1lbnRzIHRvIGNhbGwgdGhlIGZ1bmN0aW9uIHdpdGgsIGFzIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwgaW4gSlNPTlxuICAgICAgICAgICAqIGZvcm1hdC4gTm90ZSB0aGF0IHRoZSBtb2RlbCBkb2VzIG5vdCBhbHdheXMgZ2VuZXJhdGUgdmFsaWQgSlNPTiwgYW5kIG1heVxuICAgICAgICAgICAqIGhhbGx1Y2luYXRlIHBhcmFtZXRlcnMgbm90IGRlZmluZWQgYnkgeW91ciBmdW5jdGlvbiBzY2hlbWEuIFZhbGlkYXRlIHRoZVxuICAgICAgICAgICAqIGFyZ3VtZW50cyBpbiB5b3VyIGNvZGUgYmVmb3JlIGNhbGxpbmcgeW91ciBmdW5jdGlvbi5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBhcmd1bWVudHM6IHN0cmluZztcblxuICAgICAgICAgIHBhcnNlZF9hcmd1bWVudHM/OiB1bmtub3duO1xuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogVGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uIHRvIGNhbGwuXG4gICAgICAgICAgICovXG4gICAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIG5hbWUgYW5kIGFyZ3VtZW50cyBvZiBhIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCwgYXMgZ2VuZXJhdGVkIGJ5IHRoZVxuICAgICAgICogbW9kZWwuXG4gICAgICAgKi9cbiAgICAgIGV4cG9ydCBpbnRlcmZhY2UgRnVuY3Rpb25DYWxsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBhcmd1bWVudHMgdG8gY2FsbCB0aGUgZnVuY3Rpb24gd2l0aCwgYXMgZ2VuZXJhdGVkIGJ5IHRoZSBtb2RlbCBpbiBKU09OXG4gICAgICAgICAqIGZvcm1hdC4gTm90ZSB0aGF0IHRoZSBtb2RlbCBkb2VzIG5vdCBhbHdheXMgZ2VuZXJhdGUgdmFsaWQgSlNPTiwgYW5kIG1heVxuICAgICAgICAgKiBoYWxsdWNpbmF0ZSBwYXJhbWV0ZXJzIG5vdCBkZWZpbmVkIGJ5IHlvdXIgZnVuY3Rpb24gc2NoZW1hLiBWYWxpZGF0ZSB0aGVcbiAgICAgICAgICogYXJndW1lbnRzIGluIHlvdXIgY29kZSBiZWZvcmUgY2FsbGluZyB5b3VyIGZ1bmN0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgYXJndW1lbnRzPzogc3RyaW5nO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24gdG8gY2FsbC5cbiAgICAgICAgICovXG4gICAgICAgIG5hbWU/OiBzdHJpbmc7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnR5cGUgQXNzZXJ0SXNFbXB0eTxUIGV4dGVuZHMge30+ID0ga2V5b2YgVCBleHRlbmRzIG5ldmVyID8gVCA6IG5ldmVyO1xuXG4vKipcbiAqIEVuc3VyZXMgdGhlIGdpdmVuIGFyZ3VtZW50IGlzIGFuIGVtcHR5IG9iamVjdCwgdXNlZnVsIGZvclxuICogYXNzZXJ0aW5nIHRoYXQgYWxsIGtub3duIHByb3BlcnRpZXMgb24gYW4gb2JqZWN0IGhhdmUgYmVlblxuICogZGVzdHJ1Y3R1cmVkLlxuICovXG5mdW5jdGlvbiBhc3NlcnRJc0VtcHR5PFQgZXh0ZW5kcyB7fT4ob2JqOiBBc3NlcnRJc0VtcHR5PFQ+KTogYXNzZXJ0cyBvYmogaXMgQXNzZXJ0SXNFbXB0eTxUPiB7XG4gIHJldHVybjtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0TmV2ZXIoX3g6IG5ldmVyKSB7fVxuIiwgImltcG9ydCB7XG4gIHR5cGUgQ2hhdENvbXBsZXRpb25DaHVuayxcbiAgdHlwZSBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtc1N0cmVhbWluZyxcbn0gZnJvbSAnLi4vcmVzb3VyY2VzL2NoYXQvY29tcGxldGlvbnMnO1xuaW1wb3J0IHsgUnVubmVyT3B0aW9ucywgdHlwZSBBYnN0cmFjdENoYXRDb21wbGV0aW9uUnVubmVyRXZlbnRzIH0gZnJvbSAnLi9BYnN0cmFjdENoYXRDb21wbGV0aW9uUnVubmVyJztcbmltcG9ydCB7IHR5cGUgUmVhZGFibGVTdHJlYW0gfSBmcm9tICcuLi9fc2hpbXMvaW5kZXgnO1xuaW1wb3J0IHsgUnVubmFibGVUb29scywgdHlwZSBCYXNlRnVuY3Rpb25zQXJncywgdHlwZSBSdW5uYWJsZUZ1bmN0aW9ucyB9IGZyb20gJy4vUnVubmFibGVGdW5jdGlvbic7XG5pbXBvcnQgeyBDaGF0Q29tcGxldGlvblNuYXBzaG90LCBDaGF0Q29tcGxldGlvblN0cmVhbSB9IGZyb20gJy4vQ2hhdENvbXBsZXRpb25TdHJlYW0nO1xuaW1wb3J0IE9wZW5BSSBmcm9tICcuLi9pbmRleCc7XG5pbXBvcnQgeyBBdXRvUGFyc2VhYmxlVG9vbCB9IGZyb20gJy4uL2xpYi9wYXJzZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIENoYXRDb21wbGV0aW9uU3RyZWFtRXZlbnRzIGV4dGVuZHMgQWJzdHJhY3RDaGF0Q29tcGxldGlvblJ1bm5lckV2ZW50cyB7XG4gIGNvbnRlbnQ6IChjb250ZW50RGVsdGE6IHN0cmluZywgY29udGVudFNuYXBzaG90OiBzdHJpbmcpID0+IHZvaWQ7XG4gIGNodW5rOiAoY2h1bms6IENoYXRDb21wbGV0aW9uQ2h1bmssIHNuYXBzaG90OiBDaGF0Q29tcGxldGlvblNuYXBzaG90KSA9PiB2b2lkO1xufVxuXG5leHBvcnQgdHlwZSBDaGF0Q29tcGxldGlvblN0cmVhbWluZ0Z1bmN0aW9uUnVubmVyUGFyYW1zPEZ1bmN0aW9uc0FyZ3MgZXh0ZW5kcyBCYXNlRnVuY3Rpb25zQXJncz4gPSBPbWl0PFxuICBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtc1N0cmVhbWluZyxcbiAgJ2Z1bmN0aW9ucydcbj4gJiB7XG4gIGZ1bmN0aW9uczogUnVubmFibGVGdW5jdGlvbnM8RnVuY3Rpb25zQXJncz47XG59O1xuXG5leHBvcnQgdHlwZSBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1Rvb2xSdW5uZXJQYXJhbXM8RnVuY3Rpb25zQXJncyBleHRlbmRzIEJhc2VGdW5jdGlvbnNBcmdzPiA9IE9taXQ8XG4gIENoYXRDb21wbGV0aW9uQ3JlYXRlUGFyYW1zU3RyZWFtaW5nLFxuICAndG9vbHMnXG4+ICYge1xuICB0b29sczogUnVubmFibGVUb29sczxGdW5jdGlvbnNBcmdzPiB8IEF1dG9QYXJzZWFibGVUb29sPGFueSwgdHJ1ZT5bXTtcbn07XG5cbmV4cG9ydCBjbGFzcyBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lcjxQYXJzZWRUID0gbnVsbD5cbiAgZXh0ZW5kcyBDaGF0Q29tcGxldGlvblN0cmVhbTxQYXJzZWRUPlxuICBpbXBsZW1lbnRzIEFzeW5jSXRlcmFibGU8Q2hhdENvbXBsZXRpb25DaHVuaz5cbntcbiAgc3RhdGljIG92ZXJyaWRlIGZyb21SZWFkYWJsZVN0cmVhbShzdHJlYW06IFJlYWRhYmxlU3RyZWFtKTogQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXI8bnVsbD4ge1xuICAgIGNvbnN0IHJ1bm5lciA9IG5ldyBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lcihudWxsKTtcbiAgICBydW5uZXIuX3J1bigoKSA9PiBydW5uZXIuX2Zyb21SZWFkYWJsZVN0cmVhbShzdHJlYW0pKTtcbiAgICByZXR1cm4gcnVubmVyO1xuICB9XG5cbiAgLyoqIEBkZXByZWNhdGVkIC0gcGxlYXNlIHVzZSBgcnVuVG9vbHNgIGluc3RlYWQuICovXG4gIHN0YXRpYyBydW5GdW5jdGlvbnM8VCBleHRlbmRzIChzdHJpbmcgfCBvYmplY3QpW10+KFxuICAgIGNsaWVudDogT3BlbkFJLFxuICAgIHBhcmFtczogQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdGdW5jdGlvblJ1bm5lclBhcmFtczxUPixcbiAgICBvcHRpb25zPzogUnVubmVyT3B0aW9ucyxcbiAgKTogQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXI8bnVsbD4ge1xuICAgIGNvbnN0IHJ1bm5lciA9IG5ldyBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lcihudWxsKTtcbiAgICBjb25zdCBvcHRzID0ge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgLi4ub3B0aW9ucz8uaGVhZGVycywgJ1gtU3RhaW5sZXNzLUhlbHBlci1NZXRob2QnOiAncnVuRnVuY3Rpb25zJyB9LFxuICAgIH07XG4gICAgcnVubmVyLl9ydW4oKCkgPT4gcnVubmVyLl9ydW5GdW5jdGlvbnMoY2xpZW50LCBwYXJhbXMsIG9wdHMpKTtcbiAgICByZXR1cm4gcnVubmVyO1xuICB9XG5cbiAgc3RhdGljIHJ1blRvb2xzPFQgZXh0ZW5kcyAoc3RyaW5nIHwgb2JqZWN0KVtdLCBQYXJzZWRUID0gbnVsbD4oXG4gICAgY2xpZW50OiBPcGVuQUksXG4gICAgcGFyYW1zOiBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1Rvb2xSdW5uZXJQYXJhbXM8VD4sXG4gICAgb3B0aW9ucz86IFJ1bm5lck9wdGlvbnMsXG4gICk6IENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyPFBhcnNlZFQ+IHtcbiAgICBjb25zdCBydW5uZXIgPSBuZXcgQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXI8UGFyc2VkVD4oXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRPRE8gdGhlc2UgdHlwZXMgYXJlIGluY29tcGF0aWJsZVxuICAgICAgcGFyYW1zLFxuICAgICk7XG4gICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBoZWFkZXJzOiB7IC4uLm9wdGlvbnM/LmhlYWRlcnMsICdYLVN0YWlubGVzcy1IZWxwZXItTWV0aG9kJzogJ3J1blRvb2xzJyB9LFxuICAgIH07XG4gICAgcnVubmVyLl9ydW4oKCkgPT4gcnVubmVyLl9ydW5Ub29scyhjbGllbnQsIHBhcmFtcywgb3B0cykpO1xuICAgIHJldHVybiBydW5uZXI7XG4gIH1cbn1cbiIsICIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuXG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gJy4uLy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICcuLi8uLi8uLi9yZXNvdXJjZSc7XG5pbXBvcnQgeyBDaGF0Q29tcGxldGlvblJ1bm5lciwgQ2hhdENvbXBsZXRpb25GdW5jdGlvblJ1bm5lclBhcmFtcyB9IGZyb20gJy4uLy4uLy4uL2xpYi9DaGF0Q29tcGxldGlvblJ1bm5lcic7XG5pbXBvcnQge1xuICBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lcixcbiAgQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdGdW5jdGlvblJ1bm5lclBhcmFtcyxcbn0gZnJvbSAnLi4vLi4vLi4vbGliL0NoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyJztcbmltcG9ydCB7IEJhc2VGdW5jdGlvbnNBcmdzIH0gZnJvbSAnLi4vLi4vLi4vbGliL1J1bm5hYmxlRnVuY3Rpb24nO1xuaW1wb3J0IHsgUnVubmVyT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL2xpYi9BYnN0cmFjdENoYXRDb21wbGV0aW9uUnVubmVyJztcbmltcG9ydCB7IENoYXRDb21wbGV0aW9uVG9vbFJ1bm5lclBhcmFtcyB9IGZyb20gJy4uLy4uLy4uL2xpYi9DaGF0Q29tcGxldGlvblJ1bm5lcic7XG5pbXBvcnQgeyBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1Rvb2xSdW5uZXJQYXJhbXMgfSBmcm9tICcuLi8uLi8uLi9saWIvQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXInO1xuaW1wb3J0IHsgQ2hhdENvbXBsZXRpb25TdHJlYW0sIHR5cGUgQ2hhdENvbXBsZXRpb25TdHJlYW1QYXJhbXMgfSBmcm9tICcuLi8uLi8uLi9saWIvQ2hhdENvbXBsZXRpb25TdHJlYW0nO1xuaW1wb3J0IHtcbiAgQ2hhdENvbXBsZXRpb24sXG4gIENoYXRDb21wbGV0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nLFxuICBDaGF0Q29tcGxldGlvbk1lc3NhZ2UsXG4gIENoYXRDb21wbGV0aW9uTWVzc2FnZVRvb2xDYWxsLFxufSBmcm9tICcuLi8uLi9jaGF0L2NvbXBsZXRpb25zJztcbmltcG9ydCB7IEV4dHJhY3RQYXJzZWRDb250ZW50RnJvbVBhcmFtcywgcGFyc2VDaGF0Q29tcGxldGlvbiwgdmFsaWRhdGVJbnB1dFRvb2xzIH0gZnJvbSAnLi4vLi4vLi4vbGliL3BhcnNlcic7XG5cbmV4cG9ydCB7XG4gIENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyLFxuICB0eXBlIENoYXRDb21wbGV0aW9uU3RyZWFtaW5nRnVuY3Rpb25SdW5uZXJQYXJhbXMsXG59IGZyb20gJy4uLy4uLy4uL2xpYi9DaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lcic7XG5leHBvcnQge1xuICB0eXBlIFJ1bm5hYmxlRnVuY3Rpb24sXG4gIHR5cGUgUnVubmFibGVGdW5jdGlvbnMsXG4gIHR5cGUgUnVubmFibGVGdW5jdGlvbldpdGhQYXJzZSxcbiAgdHlwZSBSdW5uYWJsZUZ1bmN0aW9uV2l0aG91dFBhcnNlLFxuICBQYXJzaW5nRnVuY3Rpb24sXG4gIFBhcnNpbmdUb29sRnVuY3Rpb24sXG59IGZyb20gJy4uLy4uLy4uL2xpYi9SdW5uYWJsZUZ1bmN0aW9uJztcbmV4cG9ydCB7IHR5cGUgQ2hhdENvbXBsZXRpb25Ub29sUnVubmVyUGFyYW1zIH0gZnJvbSAnLi4vLi4vLi4vbGliL0NoYXRDb21wbGV0aW9uUnVubmVyJztcbmV4cG9ydCB7IHR5cGUgQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdUb29sUnVubmVyUGFyYW1zIH0gZnJvbSAnLi4vLi4vLi4vbGliL0NoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyJztcbmV4cG9ydCB7IENoYXRDb21wbGV0aW9uU3RyZWFtLCB0eXBlIENoYXRDb21wbGV0aW9uU3RyZWFtUGFyYW1zIH0gZnJvbSAnLi4vLi4vLi4vbGliL0NoYXRDb21wbGV0aW9uU3RyZWFtJztcbmV4cG9ydCB7XG4gIENoYXRDb21wbGV0aW9uUnVubmVyLFxuICB0eXBlIENoYXRDb21wbGV0aW9uRnVuY3Rpb25SdW5uZXJQYXJhbXMsXG59IGZyb20gJy4uLy4uLy4uL2xpYi9DaGF0Q29tcGxldGlvblJ1bm5lcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFyc2VkRnVuY3Rpb24gZXh0ZW5kcyBDaGF0Q29tcGxldGlvbk1lc3NhZ2VUb29sQ2FsbC5GdW5jdGlvbiB7XG4gIHBhcnNlZF9hcmd1bWVudHM/OiB1bmtub3duO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhcnNlZEZ1bmN0aW9uVG9vbENhbGwgZXh0ZW5kcyBDaGF0Q29tcGxldGlvbk1lc3NhZ2VUb29sQ2FsbCB7XG4gIGZ1bmN0aW9uOiBQYXJzZWRGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXJzZWRDaGF0Q29tcGxldGlvbk1lc3NhZ2U8UGFyc2VkVD4gZXh0ZW5kcyBDaGF0Q29tcGxldGlvbk1lc3NhZ2Uge1xuICBwYXJzZWQ6IFBhcnNlZFQgfCBudWxsO1xuICB0b29sX2NhbGxzPzogQXJyYXk8UGFyc2VkRnVuY3Rpb25Ub29sQ2FsbD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFyc2VkQ2hvaWNlPFBhcnNlZFQ+IGV4dGVuZHMgQ2hhdENvbXBsZXRpb24uQ2hvaWNlIHtcbiAgbWVzc2FnZTogUGFyc2VkQ2hhdENvbXBsZXRpb25NZXNzYWdlPFBhcnNlZFQ+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhcnNlZENoYXRDb21wbGV0aW9uPFBhcnNlZFQ+IGV4dGVuZHMgQ2hhdENvbXBsZXRpb24ge1xuICBjaG9pY2VzOiBBcnJheTxQYXJzZWRDaG9pY2U8UGFyc2VkVD4+O1xufVxuXG5leHBvcnQgdHlwZSBDaGF0Q29tcGxldGlvblBhcnNlUGFyYW1zID0gQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXNOb25TdHJlYW1pbmc7XG5cbmV4cG9ydCBjbGFzcyBDb21wbGV0aW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgcGFyc2U8UGFyYW1zIGV4dGVuZHMgQ2hhdENvbXBsZXRpb25QYXJzZVBhcmFtcywgUGFyc2VkVCA9IEV4dHJhY3RQYXJzZWRDb250ZW50RnJvbVBhcmFtczxQYXJhbXM+PihcbiAgICBib2R5OiBQYXJhbXMsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuQVBJUHJvbWlzZTxQYXJzZWRDaGF0Q29tcGxldGlvbjxQYXJzZWRUPj4ge1xuICAgIHZhbGlkYXRlSW5wdXRUb29scyhib2R5LnRvb2xzKTtcblxuICAgIHJldHVybiB0aGlzLl9jbGllbnQuY2hhdC5jb21wbGV0aW9uc1xuICAgICAgLmNyZWF0ZShib2R5LCB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAuLi5vcHRpb25zPy5oZWFkZXJzLFxuICAgICAgICAgICdYLVN0YWlubGVzcy1IZWxwZXItTWV0aG9kJzogJ2JldGEuY2hhdC5jb21wbGV0aW9ucy5wYXJzZScsXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgLl90aGVuVW53cmFwKChjb21wbGV0aW9uKSA9PiBwYXJzZUNoYXRDb21wbGV0aW9uKGNvbXBsZXRpb24sIGJvZHkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCAtIHVzZSBgcnVuVG9vbHNgIGluc3RlYWQuXG4gICAqL1xuICBydW5GdW5jdGlvbnM8RnVuY3Rpb25zQXJncyBleHRlbmRzIEJhc2VGdW5jdGlvbnNBcmdzPihcbiAgICBib2R5OiBDaGF0Q29tcGxldGlvbkZ1bmN0aW9uUnVubmVyUGFyYW1zPEZ1bmN0aW9uc0FyZ3M+LFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDaGF0Q29tcGxldGlvblJ1bm5lcjxudWxsPjtcbiAgcnVuRnVuY3Rpb25zPEZ1bmN0aW9uc0FyZ3MgZXh0ZW5kcyBCYXNlRnVuY3Rpb25zQXJncz4oXG4gICAgYm9keTogQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdGdW5jdGlvblJ1bm5lclBhcmFtczxGdW5jdGlvbnNBcmdzPixcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXI8bnVsbD47XG4gIHJ1bkZ1bmN0aW9uczxGdW5jdGlvbnNBcmdzIGV4dGVuZHMgQmFzZUZ1bmN0aW9uc0FyZ3M+KFxuICAgIGJvZHk6XG4gICAgICB8IENoYXRDb21wbGV0aW9uRnVuY3Rpb25SdW5uZXJQYXJhbXM8RnVuY3Rpb25zQXJncz5cbiAgICAgIHwgQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdGdW5jdGlvblJ1bm5lclBhcmFtczxGdW5jdGlvbnNBcmdzPixcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ2hhdENvbXBsZXRpb25SdW5uZXI8bnVsbD4gfCBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lcjxudWxsPiB7XG4gICAgaWYgKGJvZHkuc3RyZWFtKSB7XG4gICAgICByZXR1cm4gQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXIucnVuRnVuY3Rpb25zKFxuICAgICAgICB0aGlzLl9jbGllbnQsXG4gICAgICAgIGJvZHkgYXMgQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdGdW5jdGlvblJ1bm5lclBhcmFtczxGdW5jdGlvbnNBcmdzPixcbiAgICAgICAgb3B0aW9ucyxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBDaGF0Q29tcGxldGlvblJ1bm5lci5ydW5GdW5jdGlvbnMoXG4gICAgICB0aGlzLl9jbGllbnQsXG4gICAgICBib2R5IGFzIENoYXRDb21wbGV0aW9uRnVuY3Rpb25SdW5uZXJQYXJhbXM8RnVuY3Rpb25zQXJncz4sXG4gICAgICBvcHRpb25zLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBoZWxwZXIgZm9yIHVzaW5nIHRvb2wgY2FsbHMgd2l0aCB0aGUgL2NoYXQvY29tcGxldGlvbnMgZW5kcG9pbnRcbiAgICogd2hpY2ggYXV0b21hdGljYWxseSBjYWxscyB0aGUgSmF2YVNjcmlwdCBmdW5jdGlvbnMgeW91IHByb3ZpZGUgYW5kIHNlbmRzIHRoZWlyXG4gICAqIHJlc3VsdHMgYmFjayB0byB0aGUgL2NoYXQvY29tcGxldGlvbnMgZW5kcG9pbnQsIGxvb3BpbmcgYXMgbG9uZyBhcyB0aGUgbW9kZWxcbiAgICogcmVxdWVzdHMgZnVuY3Rpb24gY2FsbHMuXG4gICAqXG4gICAqIEZvciBtb3JlIGRldGFpbHMgYW5kIGV4YW1wbGVzLCBzZWVcbiAgICogW3RoZSBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vb3BlbmFpL29wZW5haS1ub2RlI2F1dG9tYXRlZC1mdW5jdGlvbi1jYWxscylcbiAgICovXG4gIHJ1blRvb2xzPFxuICAgIFBhcmFtcyBleHRlbmRzIENoYXRDb21wbGV0aW9uVG9vbFJ1bm5lclBhcmFtczxhbnk+LFxuICAgIFBhcnNlZFQgPSBFeHRyYWN0UGFyc2VkQ29udGVudEZyb21QYXJhbXM8UGFyYW1zPixcbiAgPihib2R5OiBQYXJhbXMsIG9wdGlvbnM/OiBSdW5uZXJPcHRpb25zKTogQ2hhdENvbXBsZXRpb25SdW5uZXI8UGFyc2VkVD47XG5cbiAgcnVuVG9vbHM8XG4gICAgUGFyYW1zIGV4dGVuZHMgQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdUb29sUnVubmVyUGFyYW1zPGFueT4sXG4gICAgUGFyc2VkVCA9IEV4dHJhY3RQYXJzZWRDb250ZW50RnJvbVBhcmFtczxQYXJhbXM+LFxuICA+KGJvZHk6IFBhcmFtcywgb3B0aW9ucz86IFJ1bm5lck9wdGlvbnMpOiBDaGF0Q29tcGxldGlvblN0cmVhbWluZ1J1bm5lcjxQYXJzZWRUPjtcblxuICBydW5Ub29sczxcbiAgICBQYXJhbXMgZXh0ZW5kcyBDaGF0Q29tcGxldGlvblRvb2xSdW5uZXJQYXJhbXM8YW55PiB8IENoYXRDb21wbGV0aW9uU3RyZWFtaW5nVG9vbFJ1bm5lclBhcmFtczxhbnk+LFxuICAgIFBhcnNlZFQgPSBFeHRyYWN0UGFyc2VkQ29udGVudEZyb21QYXJhbXM8UGFyYW1zPixcbiAgPihcbiAgICBib2R5OiBQYXJhbXMsXG4gICAgb3B0aW9ucz86IFJ1bm5lck9wdGlvbnMsXG4gICk6IENoYXRDb21wbGV0aW9uUnVubmVyPFBhcnNlZFQ+IHwgQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdSdW5uZXI8UGFyc2VkVD4ge1xuICAgIGlmIChib2R5LnN0cmVhbSkge1xuICAgICAgcmV0dXJuIENoYXRDb21wbGV0aW9uU3RyZWFtaW5nUnVubmVyLnJ1blRvb2xzKFxuICAgICAgICB0aGlzLl9jbGllbnQsXG4gICAgICAgIGJvZHkgYXMgQ2hhdENvbXBsZXRpb25TdHJlYW1pbmdUb29sUnVubmVyUGFyYW1zPGFueT4sXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBDaGF0Q29tcGxldGlvblJ1bm5lci5ydW5Ub29scyh0aGlzLl9jbGllbnQsIGJvZHkgYXMgQ2hhdENvbXBsZXRpb25Ub29sUnVubmVyUGFyYW1zPGFueT4sIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBjaGF0IGNvbXBsZXRpb24gc3RyZWFtXG4gICAqL1xuICBzdHJlYW08UGFyYW1zIGV4dGVuZHMgQ2hhdENvbXBsZXRpb25TdHJlYW1QYXJhbXMsIFBhcnNlZFQgPSBFeHRyYWN0UGFyc2VkQ29udGVudEZyb21QYXJhbXM8UGFyYW1zPj4oXG4gICAgYm9keTogUGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDaGF0Q29tcGxldGlvblN0cmVhbTxQYXJzZWRUPiB7XG4gICAgcmV0dXJuIENoYXRDb21wbGV0aW9uU3RyZWFtLmNyZWF0ZUNoYXRDb21wbGV0aW9uKHRoaXMuX2NsaWVudCwgYm9keSwgb3B0aW9ucyk7XG4gIH1cbn1cbiIsICIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJy4uLy4uLy4uL3Jlc291cmNlJztcbmltcG9ydCAqIGFzIENvbXBsZXRpb25zQVBJIGZyb20gJy4vY29tcGxldGlvbnMnO1xuXG5leHBvcnQgY2xhc3MgQ2hhdCBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgY29tcGxldGlvbnM6IENvbXBsZXRpb25zQVBJLkNvbXBsZXRpb25zID0gbmV3IENvbXBsZXRpb25zQVBJLkNvbXBsZXRpb25zKHRoaXMuX2NsaWVudCk7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ2hhdCB7XG4gIGV4cG9ydCBpbXBvcnQgQ29tcGxldGlvbnMgPSBDb21wbGV0aW9uc0FQSS5Db21wbGV0aW9ucztcbn1cbiIsICIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJy4uLy4uLy4uL3Jlc291cmNlJztcbmltcG9ydCAqIGFzIENvcmUgZnJvbSAnLi4vLi4vLi4vY29yZSc7XG5cbmV4cG9ydCBjbGFzcyBTZXNzaW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBlcGhlbWVyYWwgQVBJIHRva2VuIGZvciB1c2UgaW4gY2xpZW50LXNpZGUgYXBwbGljYXRpb25zIHdpdGggdGhlXG4gICAqIFJlYWx0aW1lIEFQSS4gQ2FuIGJlIGNvbmZpZ3VyZWQgd2l0aCB0aGUgc2FtZSBzZXNzaW9uIHBhcmFtZXRlcnMgYXMgdGhlXG4gICAqIGBzZXNzaW9uLnVwZGF0ZWAgY2xpZW50IGV2ZW50LlxuICAgKlxuICAgKiBJdCByZXNwb25kcyB3aXRoIGEgc2Vzc2lvbiBvYmplY3QsIHBsdXMgYSBgY2xpZW50X3NlY3JldGAga2V5IHdoaWNoIGNvbnRhaW5zIGFcbiAgICogdXNhYmxlIGVwaGVtZXJhbCBBUEkgdG9rZW4gdGhhdCBjYW4gYmUgdXNlZCB0byBhdXRoZW50aWNhdGUgYnJvd3NlciBjbGllbnRzIGZvclxuICAgKiB0aGUgUmVhbHRpbWUgQVBJLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0c1xuICAgKiBjb25zdCBzZXNzaW9uID1cbiAgICogICBhd2FpdCBjbGllbnQuYmV0YS5yZWFsdGltZS5zZXNzaW9ucy5jcmVhdGUoKTtcbiAgICogYGBgXG4gICAqL1xuICBjcmVhdGUoYm9keTogU2Vzc2lvbkNyZWF0ZVBhcmFtcywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkFQSVByb21pc2U8U2Vzc2lvbkNyZWF0ZVJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvcmVhbHRpbWUvc2Vzc2lvbnMnLCB7XG4gICAgICBib2R5LFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZWFsdGltZSBzZXNzaW9uIG9iamVjdCBjb25maWd1cmF0aW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNlc3Npb24ge1xuICAvKipcbiAgICogVW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBzZXNzaW9uIHRoYXQgbG9va3MgbGlrZSBgc2Vzc18xMjM0NTY3ODkwYWJjZGVmYC5cbiAgICovXG4gIGlkPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZm9ybWF0IG9mIGlucHV0IGF1ZGlvLiBPcHRpb25zIGFyZSBgcGNtMTZgLCBgZzcxMV91bGF3YCwgb3IgYGc3MTFfYWxhd2AuIEZvclxuICAgKiBgcGNtMTZgLCBpbnB1dCBhdWRpbyBtdXN0IGJlIDE2LWJpdCBQQ00gYXQgYSAyNGtIeiBzYW1wbGUgcmF0ZSwgc2luZ2xlIGNoYW5uZWxcbiAgICogKG1vbm8pLCBhbmQgbGl0dGxlLWVuZGlhbiBieXRlIG9yZGVyLlxuICAgKi9cbiAgaW5wdXRfYXVkaW9fZm9ybWF0PzogJ3BjbTE2JyB8ICdnNzExX3VsYXcnIHwgJ2c3MTFfYWxhdyc7XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gZm9yIGlucHV0IGF1ZGlvIG5vaXNlIHJlZHVjdGlvbi4gVGhpcyBjYW4gYmUgc2V0IHRvIGBudWxsYCB0byB0dXJuXG4gICAqIG9mZi4gTm9pc2UgcmVkdWN0aW9uIGZpbHRlcnMgYXVkaW8gYWRkZWQgdG8gdGhlIGlucHV0IGF1ZGlvIGJ1ZmZlciBiZWZvcmUgaXQgaXNcbiAgICogc2VudCB0byBWQUQgYW5kIHRoZSBtb2RlbC4gRmlsdGVyaW5nIHRoZSBhdWRpbyBjYW4gaW1wcm92ZSBWQUQgYW5kIHR1cm5cbiAgICogZGV0ZWN0aW9uIGFjY3VyYWN5IChyZWR1Y2luZyBmYWxzZSBwb3NpdGl2ZXMpIGFuZCBtb2RlbCBwZXJmb3JtYW5jZSBieSBpbXByb3ZpbmdcbiAgICogcGVyY2VwdGlvbiBvZiB0aGUgaW5wdXQgYXVkaW8uXG4gICAqL1xuICBpbnB1dF9hdWRpb19ub2lzZV9yZWR1Y3Rpb24/OiBTZXNzaW9uLklucHV0QXVkaW9Ob2lzZVJlZHVjdGlvbjtcblxuICAvKipcbiAgICogQ29uZmlndXJhdGlvbiBmb3IgaW5wdXQgYXVkaW8gdHJhbnNjcmlwdGlvbiwgZGVmYXVsdHMgdG8gb2ZmIGFuZCBjYW4gYmUgc2V0IHRvXG4gICAqIGBudWxsYCB0byB0dXJuIG9mZiBvbmNlIG9uLiBJbnB1dCBhdWRpbyB0cmFuc2NyaXB0aW9uIGlzIG5vdCBuYXRpdmUgdG8gdGhlXG4gICAqIG1vZGVsLCBzaW5jZSB0aGUgbW9kZWwgY29uc3VtZXMgYXVkaW8gZGlyZWN0bHkuIFRyYW5zY3JpcHRpb24gcnVuc1xuICAgKiBhc3luY2hyb25vdXNseSB0aHJvdWdoXG4gICAqIFt0aGUgL2F1ZGlvL3RyYW5zY3JpcHRpb25zIGVuZHBvaW50XShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2F1ZGlvL2NyZWF0ZVRyYW5zY3JpcHRpb24pXG4gICAqIGFuZCBzaG91bGQgYmUgdHJlYXRlZCBhcyBndWlkYW5jZSBvZiBpbnB1dCBhdWRpbyBjb250ZW50IHJhdGhlciB0aGFuIHByZWNpc2VseVxuICAgKiB3aGF0IHRoZSBtb2RlbCBoZWFyZC4gVGhlIGNsaWVudCBjYW4gb3B0aW9uYWxseSBzZXQgdGhlIGxhbmd1YWdlIGFuZCBwcm9tcHQgZm9yXG4gICAqIHRyYW5zY3JpcHRpb24sIHRoZXNlIG9mZmVyIGFkZGl0aW9uYWwgZ3VpZGFuY2UgdG8gdGhlIHRyYW5zY3JpcHRpb24gc2VydmljZS5cbiAgICovXG4gIGlucHV0X2F1ZGlvX3RyYW5zY3JpcHRpb24/OiBTZXNzaW9uLklucHV0QXVkaW9UcmFuc2NyaXB0aW9uO1xuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBzeXN0ZW0gaW5zdHJ1Y3Rpb25zIChpLmUuIHN5c3RlbSBtZXNzYWdlKSBwcmVwZW5kZWQgdG8gbW9kZWwgY2FsbHMuXG4gICAqIFRoaXMgZmllbGQgYWxsb3dzIHRoZSBjbGllbnQgdG8gZ3VpZGUgdGhlIG1vZGVsIG9uIGRlc2lyZWQgcmVzcG9uc2VzLiBUaGUgbW9kZWxcbiAgICogY2FuIGJlIGluc3RydWN0ZWQgb24gcmVzcG9uc2UgY29udGVudCBhbmQgZm9ybWF0LCAoZS5nLiBcImJlIGV4dHJlbWVseSBzdWNjaW5jdFwiLFxuICAgKiBcImFjdCBmcmllbmRseVwiLCBcImhlcmUgYXJlIGV4YW1wbGVzIG9mIGdvb2QgcmVzcG9uc2VzXCIpIGFuZCBvbiBhdWRpbyBiZWhhdmlvclxuICAgKiAoZS5nLiBcInRhbGsgcXVpY2tseVwiLCBcImluamVjdCBlbW90aW9uIGludG8geW91ciB2b2ljZVwiLCBcImxhdWdoIGZyZXF1ZW50bHlcIikuIFRoZVxuICAgKiBpbnN0cnVjdGlvbnMgYXJlIG5vdCBndWFyYW50ZWVkIHRvIGJlIGZvbGxvd2VkIGJ5IHRoZSBtb2RlbCwgYnV0IHRoZXkgcHJvdmlkZVxuICAgKiBndWlkYW5jZSB0byB0aGUgbW9kZWwgb24gdGhlIGRlc2lyZWQgYmVoYXZpb3IuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGUgc2VydmVyIHNldHMgZGVmYXVsdCBpbnN0cnVjdGlvbnMgd2hpY2ggd2lsbCBiZSB1c2VkIGlmIHRoaXMgZmllbGRcbiAgICogaXMgbm90IHNldCBhbmQgYXJlIHZpc2libGUgaW4gdGhlIGBzZXNzaW9uLmNyZWF0ZWRgIGV2ZW50IGF0IHRoZSBzdGFydCBvZiB0aGVcbiAgICogc2Vzc2lvbi5cbiAgICovXG4gIGluc3RydWN0aW9ucz86IHN0cmluZztcblxuICAvKipcbiAgICogTWF4aW11bSBudW1iZXIgb2Ygb3V0cHV0IHRva2VucyBmb3IgYSBzaW5nbGUgYXNzaXN0YW50IHJlc3BvbnNlLCBpbmNsdXNpdmUgb2ZcbiAgICogdG9vbCBjYWxscy4gUHJvdmlkZSBhbiBpbnRlZ2VyIGJldHdlZW4gMSBhbmQgNDA5NiB0byBsaW1pdCBvdXRwdXQgdG9rZW5zLCBvclxuICAgKiBgaW5mYCBmb3IgdGhlIG1heGltdW0gYXZhaWxhYmxlIHRva2VucyBmb3IgYSBnaXZlbiBtb2RlbC4gRGVmYXVsdHMgdG8gYGluZmAuXG4gICAqL1xuICBtYXhfcmVzcG9uc2Vfb3V0cHV0X3Rva2Vucz86IG51bWJlciB8ICdpbmYnO1xuXG4gIC8qKlxuICAgKiBUaGUgc2V0IG9mIG1vZGFsaXRpZXMgdGhlIG1vZGVsIGNhbiByZXNwb25kIHdpdGguIFRvIGRpc2FibGUgYXVkaW8sIHNldCB0aGlzIHRvXG4gICAqIFtcInRleHRcIl0uXG4gICAqL1xuICBtb2RhbGl0aWVzPzogQXJyYXk8J3RleHQnIHwgJ2F1ZGlvJz47XG5cbiAgLyoqXG4gICAqIFRoZSBSZWFsdGltZSBtb2RlbCB1c2VkIGZvciB0aGlzIHNlc3Npb24uXG4gICAqL1xuICBtb2RlbD86XG4gICAgfCAnZ3B0LTRvLXJlYWx0aW1lLXByZXZpZXcnXG4gICAgfCAnZ3B0LTRvLXJlYWx0aW1lLXByZXZpZXctMjAyNC0xMC0wMSdcbiAgICB8ICdncHQtNG8tcmVhbHRpbWUtcHJldmlldy0yMDI0LTEyLTE3J1xuICAgIHwgJ2dwdC00by1taW5pLXJlYWx0aW1lLXByZXZpZXcnXG4gICAgfCAnZ3B0LTRvLW1pbmktcmVhbHRpbWUtcHJldmlldy0yMDI0LTEyLTE3JztcblxuICAvKipcbiAgICogVGhlIGZvcm1hdCBvZiBvdXRwdXQgYXVkaW8uIE9wdGlvbnMgYXJlIGBwY20xNmAsIGBnNzExX3VsYXdgLCBvciBgZzcxMV9hbGF3YC5cbiAgICogRm9yIGBwY20xNmAsIG91dHB1dCBhdWRpbyBpcyBzYW1wbGVkIGF0IGEgcmF0ZSBvZiAyNGtIei5cbiAgICovXG4gIG91dHB1dF9hdWRpb19mb3JtYXQ/OiAncGNtMTYnIHwgJ2c3MTFfdWxhdycgfCAnZzcxMV9hbGF3JztcblxuICAvKipcbiAgICogU2FtcGxpbmcgdGVtcGVyYXR1cmUgZm9yIHRoZSBtb2RlbCwgbGltaXRlZCB0byBbMC42LCAxLjJdLiBGb3IgYXVkaW8gbW9kZWxzIGFcbiAgICogdGVtcGVyYXR1cmUgb2YgMC44IGlzIGhpZ2hseSByZWNvbW1lbmRlZCBmb3IgYmVzdCBwZXJmb3JtYW5jZS5cbiAgICovXG4gIHRlbXBlcmF0dXJlPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBIb3cgdGhlIG1vZGVsIGNob29zZXMgdG9vbHMuIE9wdGlvbnMgYXJlIGBhdXRvYCwgYG5vbmVgLCBgcmVxdWlyZWRgLCBvciBzcGVjaWZ5XG4gICAqIGEgZnVuY3Rpb24uXG4gICAqL1xuICB0b29sX2Nob2ljZT86IHN0cmluZztcblxuICAvKipcbiAgICogVG9vbHMgKGZ1bmN0aW9ucykgYXZhaWxhYmxlIHRvIHRoZSBtb2RlbC5cbiAgICovXG4gIHRvb2xzPzogQXJyYXk8U2Vzc2lvbi5Ub29sPjtcblxuICAvKipcbiAgICogQ29uZmlndXJhdGlvbiBmb3IgdHVybiBkZXRlY3Rpb24sIGV0aGVyIFNlcnZlciBWQUQgb3IgU2VtYW50aWMgVkFELiBUaGlzIGNhbiBiZVxuICAgKiBzZXQgdG8gYG51bGxgIHRvIHR1cm4gb2ZmLCBpbiB3aGljaCBjYXNlIHRoZSBjbGllbnQgbXVzdCBtYW51YWxseSB0cmlnZ2VyIG1vZGVsXG4gICAqIHJlc3BvbnNlLiBTZXJ2ZXIgVkFEIG1lYW5zIHRoYXQgdGhlIG1vZGVsIHdpbGwgZGV0ZWN0IHRoZSBzdGFydCBhbmQgZW5kIG9mXG4gICAqIHNwZWVjaCBiYXNlZCBvbiBhdWRpbyB2b2x1bWUgYW5kIHJlc3BvbmQgYXQgdGhlIGVuZCBvZiB1c2VyIHNwZWVjaC4gU2VtYW50aWMgVkFEXG4gICAqIGlzIG1vcmUgYWR2YW5jZWQgYW5kIHVzZXMgYSB0dXJuIGRldGVjdGlvbiBtb2RlbCAoaW4gY29uanVjdGlvbiB3aXRoIFZBRCkgdG9cbiAgICogc2VtYW50aWNhbGx5IGVzdGltYXRlIHdoZXRoZXIgdGhlIHVzZXIgaGFzIGZpbmlzaGVkIHNwZWFraW5nLCB0aGVuIGR5bmFtaWNhbGx5XG4gICAqIHNldHMgYSB0aW1lb3V0IGJhc2VkIG9uIHRoaXMgcHJvYmFiaWxpdHkuIEZvciBleGFtcGxlLCBpZiB1c2VyIGF1ZGlvIHRyYWlscyBvZmZcbiAgICogd2l0aCBcInVoaG1cIiwgdGhlIG1vZGVsIHdpbGwgc2NvcmUgYSBsb3cgcHJvYmFiaWxpdHkgb2YgdHVybiBlbmQgYW5kIHdhaXQgbG9uZ2VyXG4gICAqIGZvciB0aGUgdXNlciB0byBjb250aW51ZSBzcGVha2luZy4gVGhpcyBjYW4gYmUgdXNlZnVsIGZvciBtb3JlIG5hdHVyYWxcbiAgICogY29udmVyc2F0aW9ucywgYnV0IG1heSBoYXZlIGEgaGlnaGVyIGxhdGVuY3kuXG4gICAqL1xuICB0dXJuX2RldGVjdGlvbj86IFNlc3Npb24uVHVybkRldGVjdGlvbjtcblxuICAvKipcbiAgICogVGhlIHZvaWNlIHRoZSBtb2RlbCB1c2VzIHRvIHJlc3BvbmQuIFZvaWNlIGNhbm5vdCBiZSBjaGFuZ2VkIGR1cmluZyB0aGUgc2Vzc2lvblxuICAgKiBvbmNlIHRoZSBtb2RlbCBoYXMgcmVzcG9uZGVkIHdpdGggYXVkaW8gYXQgbGVhc3Qgb25jZS4gQ3VycmVudCB2b2ljZSBvcHRpb25zIGFyZVxuICAgKiBgYWxsb3lgLCBgYXNoYCwgYGJhbGxhZGAsIGBjb3JhbGAsIGBlY2hvYCBgc2FnZWAsIGBzaGltbWVyYCBhbmQgYHZlcnNlYC5cbiAgICovXG4gIHZvaWNlPzpcbiAgICB8IChzdHJpbmcgJiB7fSlcbiAgICB8ICdhbGxveSdcbiAgICB8ICdhc2gnXG4gICAgfCAnYmFsbGFkJ1xuICAgIHwgJ2NvcmFsJ1xuICAgIHwgJ2VjaG8nXG4gICAgfCAnZmFibGUnXG4gICAgfCAnb255eCdcbiAgICB8ICdub3ZhJ1xuICAgIHwgJ3NhZ2UnXG4gICAgfCAnc2hpbW1lcidcbiAgICB8ICd2ZXJzZSc7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgU2Vzc2lvbiB7XG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9uIGZvciBpbnB1dCBhdWRpbyBub2lzZSByZWR1Y3Rpb24uIFRoaXMgY2FuIGJlIHNldCB0byBgbnVsbGAgdG8gdHVyblxuICAgKiBvZmYuIE5vaXNlIHJlZHVjdGlvbiBmaWx0ZXJzIGF1ZGlvIGFkZGVkIHRvIHRoZSBpbnB1dCBhdWRpbyBidWZmZXIgYmVmb3JlIGl0IGlzXG4gICAqIHNlbnQgdG8gVkFEIGFuZCB0aGUgbW9kZWwuIEZpbHRlcmluZyB0aGUgYXVkaW8gY2FuIGltcHJvdmUgVkFEIGFuZCB0dXJuXG4gICAqIGRldGVjdGlvbiBhY2N1cmFjeSAocmVkdWNpbmcgZmFsc2UgcG9zaXRpdmVzKSBhbmQgbW9kZWwgcGVyZm9ybWFuY2UgYnkgaW1wcm92aW5nXG4gICAqIHBlcmNlcHRpb24gb2YgdGhlIGlucHV0IGF1ZGlvLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJbnB1dEF1ZGlvTm9pc2VSZWR1Y3Rpb24ge1xuICAgIC8qKlxuICAgICAqIFR5cGUgb2Ygbm9pc2UgcmVkdWN0aW9uLiBgbmVhcl9maWVsZGAgaXMgZm9yIGNsb3NlLXRhbGtpbmcgbWljcm9waG9uZXMgc3VjaCBhc1xuICAgICAqIGhlYWRwaG9uZXMsIGBmYXJfZmllbGRgIGlzIGZvciBmYXItZmllbGQgbWljcm9waG9uZXMgc3VjaCBhcyBsYXB0b3Agb3JcbiAgICAgKiBjb25mZXJlbmNlIHJvb20gbWljcm9waG9uZXMuXG4gICAgICovXG4gICAgdHlwZT86ICduZWFyX2ZpZWxkJyB8ICdmYXJfZmllbGQnO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gZm9yIGlucHV0IGF1ZGlvIHRyYW5zY3JpcHRpb24sIGRlZmF1bHRzIHRvIG9mZiBhbmQgY2FuIGJlIHNldCB0b1xuICAgKiBgbnVsbGAgdG8gdHVybiBvZmYgb25jZSBvbi4gSW5wdXQgYXVkaW8gdHJhbnNjcmlwdGlvbiBpcyBub3QgbmF0aXZlIHRvIHRoZVxuICAgKiBtb2RlbCwgc2luY2UgdGhlIG1vZGVsIGNvbnN1bWVzIGF1ZGlvIGRpcmVjdGx5LiBUcmFuc2NyaXB0aW9uIHJ1bnNcbiAgICogYXN5bmNocm9ub3VzbHkgdGhyb3VnaFxuICAgKiBbdGhlIC9hdWRpby90cmFuc2NyaXB0aW9ucyBlbmRwb2ludF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9hdWRpby9jcmVhdGVUcmFuc2NyaXB0aW9uKVxuICAgKiBhbmQgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgZ3VpZGFuY2Ugb2YgaW5wdXQgYXVkaW8gY29udGVudCByYXRoZXIgdGhhbiBwcmVjaXNlbHlcbiAgICogd2hhdCB0aGUgbW9kZWwgaGVhcmQuIFRoZSBjbGllbnQgY2FuIG9wdGlvbmFsbHkgc2V0IHRoZSBsYW5ndWFnZSBhbmQgcHJvbXB0IGZvclxuICAgKiB0cmFuc2NyaXB0aW9uLCB0aGVzZSBvZmZlciBhZGRpdGlvbmFsIGd1aWRhbmNlIHRvIHRoZSB0cmFuc2NyaXB0aW9uIHNlcnZpY2UuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIElucHV0QXVkaW9UcmFuc2NyaXB0aW9uIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbGFuZ3VhZ2Ugb2YgdGhlIGlucHV0IGF1ZGlvLiBTdXBwbHlpbmcgdGhlIGlucHV0IGxhbmd1YWdlIGluXG4gICAgICogW0lTTy02MzktMV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl9JU09fNjM5LTFfY29kZXMpIChlLmcuIGBlbmApXG4gICAgICogZm9ybWF0IHdpbGwgaW1wcm92ZSBhY2N1cmFjeSBhbmQgbGF0ZW5jeS5cbiAgICAgKi9cbiAgICBsYW5ndWFnZT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBtb2RlbCB0byB1c2UgZm9yIHRyYW5zY3JpcHRpb24sIGN1cnJlbnQgb3B0aW9ucyBhcmUgYGdwdC00by10cmFuc2NyaWJlYCxcbiAgICAgKiBgZ3B0LTRvLW1pbmktdHJhbnNjcmliZWAsIGFuZCBgd2hpc3Blci0xYC5cbiAgICAgKi9cbiAgICBtb2RlbD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEFuIG9wdGlvbmFsIHRleHQgdG8gZ3VpZGUgdGhlIG1vZGVsJ3Mgc3R5bGUgb3IgY29udGludWUgYSBwcmV2aW91cyBhdWRpb1xuICAgICAqIHNlZ21lbnQuIEZvciBgd2hpc3Blci0xYCwgdGhlXG4gICAgICogW3Byb21wdCBpcyBhIGxpc3Qgb2Yga2V5d29yZHNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9zcGVlY2gtdG8tdGV4dCNwcm9tcHRpbmcpLlxuICAgICAqIEZvciBgZ3B0LTRvLXRyYW5zY3JpYmVgIG1vZGVscywgdGhlIHByb21wdCBpcyBhIGZyZWUgdGV4dCBzdHJpbmcsIGZvciBleGFtcGxlXG4gICAgICogXCJleHBlY3Qgd29yZHMgcmVsYXRlZCB0byB0ZWNobm9sb2d5XCIuXG4gICAgICovXG4gICAgcHJvbXB0Pzogc3RyaW5nO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBUb29sIHtcbiAgICAvKipcbiAgICAgKiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIGZ1bmN0aW9uLCBpbmNsdWRpbmcgZ3VpZGFuY2Ugb24gd2hlbiBhbmQgaG93IHRvIGNhbGwgaXQsXG4gICAgICogYW5kIGd1aWRhbmNlIGFib3V0IHdoYXQgdG8gdGVsbCB0aGUgdXNlciB3aGVuIGNhbGxpbmcgKGlmIGFueXRoaW5nKS5cbiAgICAgKi9cbiAgICBkZXNjcmlwdGlvbj86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBuYW1lPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW1ldGVycyBvZiB0aGUgZnVuY3Rpb24gaW4gSlNPTiBTY2hlbWEuXG4gICAgICovXG4gICAgcGFyYW1ldGVycz86IHVua25vd247XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgdG9vbCwgaS5lLiBgZnVuY3Rpb25gLlxuICAgICAqL1xuICAgIHR5cGU/OiAnZnVuY3Rpb24nO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gZm9yIHR1cm4gZGV0ZWN0aW9uLCBldGhlciBTZXJ2ZXIgVkFEIG9yIFNlbWFudGljIFZBRC4gVGhpcyBjYW4gYmVcbiAgICogc2V0IHRvIGBudWxsYCB0byB0dXJuIG9mZiwgaW4gd2hpY2ggY2FzZSB0aGUgY2xpZW50IG11c3QgbWFudWFsbHkgdHJpZ2dlciBtb2RlbFxuICAgKiByZXNwb25zZS4gU2VydmVyIFZBRCBtZWFucyB0aGF0IHRoZSBtb2RlbCB3aWxsIGRldGVjdCB0aGUgc3RhcnQgYW5kIGVuZCBvZlxuICAgKiBzcGVlY2ggYmFzZWQgb24gYXVkaW8gdm9sdW1lIGFuZCByZXNwb25kIGF0IHRoZSBlbmQgb2YgdXNlciBzcGVlY2guIFNlbWFudGljIFZBRFxuICAgKiBpcyBtb3JlIGFkdmFuY2VkIGFuZCB1c2VzIGEgdHVybiBkZXRlY3Rpb24gbW9kZWwgKGluIGNvbmp1Y3Rpb24gd2l0aCBWQUQpIHRvXG4gICAqIHNlbWFudGljYWxseSBlc3RpbWF0ZSB3aGV0aGVyIHRoZSB1c2VyIGhhcyBmaW5pc2hlZCBzcGVha2luZywgdGhlbiBkeW5hbWljYWxseVxuICAgKiBzZXRzIGEgdGltZW91dCBiYXNlZCBvbiB0aGlzIHByb2JhYmlsaXR5LiBGb3IgZXhhbXBsZSwgaWYgdXNlciBhdWRpbyB0cmFpbHMgb2ZmXG4gICAqIHdpdGggXCJ1aGhtXCIsIHRoZSBtb2RlbCB3aWxsIHNjb3JlIGEgbG93IHByb2JhYmlsaXR5IG9mIHR1cm4gZW5kIGFuZCB3YWl0IGxvbmdlclxuICAgKiBmb3IgdGhlIHVzZXIgdG8gY29udGludWUgc3BlYWtpbmcuIFRoaXMgY2FuIGJlIHVzZWZ1bCBmb3IgbW9yZSBuYXR1cmFsXG4gICAqIGNvbnZlcnNhdGlvbnMsIGJ1dCBtYXkgaGF2ZSBhIGhpZ2hlciBsYXRlbmN5LlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUdXJuRGV0ZWN0aW9uIHtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0byBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlIGEgcmVzcG9uc2Ugd2hlbiBhIFZBRCBzdG9wIGV2ZW50XG4gICAgICogb2NjdXJzLlxuICAgICAqL1xuICAgIGNyZWF0ZV9yZXNwb25zZT86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIG9ubHkgZm9yIGBzZW1hbnRpY192YWRgIG1vZGUuIFRoZSBlYWdlcm5lc3Mgb2YgdGhlIG1vZGVsIHRvIHJlc3BvbmQuIGBsb3dgXG4gICAgICogd2lsbCB3YWl0IGxvbmdlciBmb3IgdGhlIHVzZXIgdG8gY29udGludWUgc3BlYWtpbmcsIGBoaWdoYCB3aWxsIHJlc3BvbmQgbW9yZVxuICAgICAqIHF1aWNrbHkuIGBhdXRvYCBpcyB0aGUgZGVmYXVsdCBhbmQgaXMgZXF1aXZhbGVudCB0byBgbWVkaXVtYC5cbiAgICAgKi9cbiAgICBlYWdlcm5lc3M/OiAnbG93JyB8ICdtZWRpdW0nIHwgJ2hpZ2gnIHwgJ2F1dG8nO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgdG8gYXV0b21hdGljYWxseSBpbnRlcnJ1cHQgYW55IG9uZ29pbmcgcmVzcG9uc2Ugd2l0aCBvdXRwdXQgdG9cbiAgICAgKiB0aGUgZGVmYXVsdCBjb252ZXJzYXRpb24gKGkuZS4gYGNvbnZlcnNhdGlvbmAgb2YgYGF1dG9gKSB3aGVuIGEgVkFEIHN0YXJ0IGV2ZW50XG4gICAgICogb2NjdXJzLlxuICAgICAqL1xuICAgIGludGVycnVwdF9yZXNwb25zZT86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIG9ubHkgZm9yIGBzZXJ2ZXJfdmFkYCBtb2RlLiBBbW91bnQgb2YgYXVkaW8gdG8gaW5jbHVkZSBiZWZvcmUgdGhlIFZBRFxuICAgICAqIGRldGVjdGVkIHNwZWVjaCAoaW4gbWlsbGlzZWNvbmRzKS4gRGVmYXVsdHMgdG8gMzAwbXMuXG4gICAgICovXG4gICAgcHJlZml4X3BhZGRpbmdfbXM/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIG9ubHkgZm9yIGBzZXJ2ZXJfdmFkYCBtb2RlLiBEdXJhdGlvbiBvZiBzaWxlbmNlIHRvIGRldGVjdCBzcGVlY2ggc3RvcCAoaW5cbiAgICAgKiBtaWxsaXNlY29uZHMpLiBEZWZhdWx0cyB0byA1MDBtcy4gV2l0aCBzaG9ydGVyIHZhbHVlcyB0aGUgbW9kZWwgd2lsbCByZXNwb25kXG4gICAgICogbW9yZSBxdWlja2x5LCBidXQgbWF5IGp1bXAgaW4gb24gc2hvcnQgcGF1c2VzIGZyb20gdGhlIHVzZXIuXG4gICAgICovXG4gICAgc2lsZW5jZV9kdXJhdGlvbl9tcz86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgb25seSBmb3IgYHNlcnZlcl92YWRgIG1vZGUuIEFjdGl2YXRpb24gdGhyZXNob2xkIGZvciBWQUQgKDAuMCB0byAxLjApLCB0aGlzXG4gICAgICogZGVmYXVsdHMgdG8gMC41LiBBIGhpZ2hlciB0aHJlc2hvbGQgd2lsbCByZXF1aXJlIGxvdWRlciBhdWRpbyB0byBhY3RpdmF0ZSB0aGVcbiAgICAgKiBtb2RlbCwgYW5kIHRodXMgbWlnaHQgcGVyZm9ybSBiZXR0ZXIgaW4gbm9pc3kgZW52aXJvbm1lbnRzLlxuICAgICAqL1xuICAgIHRocmVzaG9sZD86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFR5cGUgb2YgdHVybiBkZXRlY3Rpb24uXG4gICAgICovXG4gICAgdHlwZT86ICdzZXJ2ZXJfdmFkJyB8ICdzZW1hbnRpY192YWQnO1xuICB9XG59XG5cbi8qKlxuICogQSBuZXcgUmVhbHRpbWUgc2Vzc2lvbiBjb25maWd1cmF0aW9uLCB3aXRoIGFuIGVwaGVybWVyYWwga2V5LiBEZWZhdWx0IFRUTCBmb3JcbiAqIGtleXMgaXMgb25lIG1pbnV0ZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZXNzaW9uQ3JlYXRlUmVzcG9uc2Uge1xuICAvKipcbiAgICogRXBoZW1lcmFsIGtleSByZXR1cm5lZCBieSB0aGUgQVBJLlxuICAgKi9cbiAgY2xpZW50X3NlY3JldDogU2Vzc2lvbkNyZWF0ZVJlc3BvbnNlLkNsaWVudFNlY3JldDtcblxuICAvKipcbiAgICogVGhlIGZvcm1hdCBvZiBpbnB1dCBhdWRpby4gT3B0aW9ucyBhcmUgYHBjbTE2YCwgYGc3MTFfdWxhd2AsIG9yIGBnNzExX2FsYXdgLlxuICAgKi9cbiAgaW5wdXRfYXVkaW9fZm9ybWF0Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9uIGZvciBpbnB1dCBhdWRpbyB0cmFuc2NyaXB0aW9uLCBkZWZhdWx0cyB0byBvZmYgYW5kIGNhbiBiZSBzZXQgdG9cbiAgICogYG51bGxgIHRvIHR1cm4gb2ZmIG9uY2Ugb24uIElucHV0IGF1ZGlvIHRyYW5zY3JpcHRpb24gaXMgbm90IG5hdGl2ZSB0byB0aGVcbiAgICogbW9kZWwsIHNpbmNlIHRoZSBtb2RlbCBjb25zdW1lcyBhdWRpbyBkaXJlY3RseS4gVHJhbnNjcmlwdGlvbiBydW5zXG4gICAqIGFzeW5jaHJvbm91c2x5IHRocm91Z2ggV2hpc3BlciBhbmQgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgcm91Z2ggZ3VpZGFuY2UgcmF0aGVyXG4gICAqIHRoYW4gdGhlIHJlcHJlc2VudGF0aW9uIHVuZGVyc3Rvb2QgYnkgdGhlIG1vZGVsLlxuICAgKi9cbiAgaW5wdXRfYXVkaW9fdHJhbnNjcmlwdGlvbj86IFNlc3Npb25DcmVhdGVSZXNwb25zZS5JbnB1dEF1ZGlvVHJhbnNjcmlwdGlvbjtcblxuICAvKipcbiAgICogVGhlIGRlZmF1bHQgc3lzdGVtIGluc3RydWN0aW9ucyAoaS5lLiBzeXN0ZW0gbWVzc2FnZSkgcHJlcGVuZGVkIHRvIG1vZGVsIGNhbGxzLlxuICAgKiBUaGlzIGZpZWxkIGFsbG93cyB0aGUgY2xpZW50IHRvIGd1aWRlIHRoZSBtb2RlbCBvbiBkZXNpcmVkIHJlc3BvbnNlcy4gVGhlIG1vZGVsXG4gICAqIGNhbiBiZSBpbnN0cnVjdGVkIG9uIHJlc3BvbnNlIGNvbnRlbnQgYW5kIGZvcm1hdCwgKGUuZy4gXCJiZSBleHRyZW1lbHkgc3VjY2luY3RcIixcbiAgICogXCJhY3QgZnJpZW5kbHlcIiwgXCJoZXJlIGFyZSBleGFtcGxlcyBvZiBnb29kIHJlc3BvbnNlc1wiKSBhbmQgb24gYXVkaW8gYmVoYXZpb3JcbiAgICogKGUuZy4gXCJ0YWxrIHF1aWNrbHlcIiwgXCJpbmplY3QgZW1vdGlvbiBpbnRvIHlvdXIgdm9pY2VcIiwgXCJsYXVnaCBmcmVxdWVudGx5XCIpLiBUaGVcbiAgICogaW5zdHJ1Y3Rpb25zIGFyZSBub3QgZ3VhcmFudGVlZCB0byBiZSBmb2xsb3dlZCBieSB0aGUgbW9kZWwsIGJ1dCB0aGV5IHByb3ZpZGVcbiAgICogZ3VpZGFuY2UgdG8gdGhlIG1vZGVsIG9uIHRoZSBkZXNpcmVkIGJlaGF2aW9yLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhlIHNlcnZlciBzZXRzIGRlZmF1bHQgaW5zdHJ1Y3Rpb25zIHdoaWNoIHdpbGwgYmUgdXNlZCBpZiB0aGlzIGZpZWxkXG4gICAqIGlzIG5vdCBzZXQgYW5kIGFyZSB2aXNpYmxlIGluIHRoZSBgc2Vzc2lvbi5jcmVhdGVkYCBldmVudCBhdCB0aGUgc3RhcnQgb2YgdGhlXG4gICAqIHNlc3Npb24uXG4gICAqL1xuICBpbnN0cnVjdGlvbnM/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIG91dHB1dCB0b2tlbnMgZm9yIGEgc2luZ2xlIGFzc2lzdGFudCByZXNwb25zZSwgaW5jbHVzaXZlIG9mXG4gICAqIHRvb2wgY2FsbHMuIFByb3ZpZGUgYW4gaW50ZWdlciBiZXR3ZWVuIDEgYW5kIDQwOTYgdG8gbGltaXQgb3V0cHV0IHRva2Vucywgb3JcbiAgICogYGluZmAgZm9yIHRoZSBtYXhpbXVtIGF2YWlsYWJsZSB0b2tlbnMgZm9yIGEgZ2l2ZW4gbW9kZWwuIERlZmF1bHRzIHRvIGBpbmZgLlxuICAgKi9cbiAgbWF4X3Jlc3BvbnNlX291dHB1dF90b2tlbnM/OiBudW1iZXIgfCAnaW5mJztcblxuICAvKipcbiAgICogVGhlIHNldCBvZiBtb2RhbGl0aWVzIHRoZSBtb2RlbCBjYW4gcmVzcG9uZCB3aXRoLiBUbyBkaXNhYmxlIGF1ZGlvLCBzZXQgdGhpcyB0b1xuICAgKiBbXCJ0ZXh0XCJdLlxuICAgKi9cbiAgbW9kYWxpdGllcz86IEFycmF5PCd0ZXh0JyB8ICdhdWRpbyc+O1xuXG4gIC8qKlxuICAgKiBUaGUgZm9ybWF0IG9mIG91dHB1dCBhdWRpby4gT3B0aW9ucyBhcmUgYHBjbTE2YCwgYGc3MTFfdWxhd2AsIG9yIGBnNzExX2FsYXdgLlxuICAgKi9cbiAgb3V0cHV0X2F1ZGlvX2Zvcm1hdD86IHN0cmluZztcblxuICAvKipcbiAgICogU2FtcGxpbmcgdGVtcGVyYXR1cmUgZm9yIHRoZSBtb2RlbCwgbGltaXRlZCB0byBbMC42LCAxLjJdLiBEZWZhdWx0cyB0byAwLjguXG4gICAqL1xuICB0ZW1wZXJhdHVyZT86IG51bWJlcjtcblxuICAvKipcbiAgICogSG93IHRoZSBtb2RlbCBjaG9vc2VzIHRvb2xzLiBPcHRpb25zIGFyZSBgYXV0b2AsIGBub25lYCwgYHJlcXVpcmVkYCwgb3Igc3BlY2lmeVxuICAgKiBhIGZ1bmN0aW9uLlxuICAgKi9cbiAgdG9vbF9jaG9pY2U/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRvb2xzIChmdW5jdGlvbnMpIGF2YWlsYWJsZSB0byB0aGUgbW9kZWwuXG4gICAqL1xuICB0b29scz86IEFycmF5PFNlc3Npb25DcmVhdGVSZXNwb25zZS5Ub29sPjtcblxuICAvKipcbiAgICogQ29uZmlndXJhdGlvbiBmb3IgdHVybiBkZXRlY3Rpb24uIENhbiBiZSBzZXQgdG8gYG51bGxgIHRvIHR1cm4gb2ZmLiBTZXJ2ZXIgVkFEXG4gICAqIG1lYW5zIHRoYXQgdGhlIG1vZGVsIHdpbGwgZGV0ZWN0IHRoZSBzdGFydCBhbmQgZW5kIG9mIHNwZWVjaCBiYXNlZCBvbiBhdWRpb1xuICAgKiB2b2x1bWUgYW5kIHJlc3BvbmQgYXQgdGhlIGVuZCBvZiB1c2VyIHNwZWVjaC5cbiAgICovXG4gIHR1cm5fZGV0ZWN0aW9uPzogU2Vzc2lvbkNyZWF0ZVJlc3BvbnNlLlR1cm5EZXRlY3Rpb247XG5cbiAgLyoqXG4gICAqIFRoZSB2b2ljZSB0aGUgbW9kZWwgdXNlcyB0byByZXNwb25kLiBWb2ljZSBjYW5ub3QgYmUgY2hhbmdlZCBkdXJpbmcgdGhlIHNlc3Npb25cbiAgICogb25jZSB0aGUgbW9kZWwgaGFzIHJlc3BvbmRlZCB3aXRoIGF1ZGlvIGF0IGxlYXN0IG9uY2UuIEN1cnJlbnQgdm9pY2Ugb3B0aW9ucyBhcmVcbiAgICogYGFsbG95YCwgYGFzaGAsIGBiYWxsYWRgLCBgY29yYWxgLCBgZWNob2AgYHNhZ2VgLCBgc2hpbW1lcmAgYW5kIGB2ZXJzZWAuXG4gICAqL1xuICB2b2ljZT86XG4gICAgfCAoc3RyaW5nICYge30pXG4gICAgfCAnYWxsb3knXG4gICAgfCAnYXNoJ1xuICAgIHwgJ2JhbGxhZCdcbiAgICB8ICdjb3JhbCdcbiAgICB8ICdlY2hvJ1xuICAgIHwgJ2ZhYmxlJ1xuICAgIHwgJ29ueXgnXG4gICAgfCAnbm92YSdcbiAgICB8ICdzYWdlJ1xuICAgIHwgJ3NoaW1tZXInXG4gICAgfCAndmVyc2UnO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFNlc3Npb25DcmVhdGVSZXNwb25zZSB7XG4gIC8qKlxuICAgKiBFcGhlbWVyYWwga2V5IHJldHVybmVkIGJ5IHRoZSBBUEkuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIENsaWVudFNlY3JldCB7XG4gICAgLyoqXG4gICAgICogVGltZXN0YW1wIGZvciB3aGVuIHRoZSB0b2tlbiBleHBpcmVzLiBDdXJyZW50bHksIGFsbCB0b2tlbnMgZXhwaXJlIGFmdGVyIG9uZVxuICAgICAqIG1pbnV0ZS5cbiAgICAgKi9cbiAgICBleHBpcmVzX2F0OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBFcGhlbWVyYWwga2V5IHVzYWJsZSBpbiBjbGllbnQgZW52aXJvbm1lbnRzIHRvIGF1dGhlbnRpY2F0ZSBjb25uZWN0aW9ucyB0byB0aGVcbiAgICAgKiBSZWFsdGltZSBBUEkuIFVzZSB0aGlzIGluIGNsaWVudC1zaWRlIGVudmlyb25tZW50cyByYXRoZXIgdGhhbiBhIHN0YW5kYXJkIEFQSVxuICAgICAqIHRva2VuLCB3aGljaCBzaG91bGQgb25seSBiZSB1c2VkIHNlcnZlci1zaWRlLlxuICAgICAqL1xuICAgIHZhbHVlOiBzdHJpbmc7XG4gIH1cblxuICAvKipcbiAgICogQ29uZmlndXJhdGlvbiBmb3IgaW5wdXQgYXVkaW8gdHJhbnNjcmlwdGlvbiwgZGVmYXVsdHMgdG8gb2ZmIGFuZCBjYW4gYmUgc2V0IHRvXG4gICAqIGBudWxsYCB0byB0dXJuIG9mZiBvbmNlIG9uLiBJbnB1dCBhdWRpbyB0cmFuc2NyaXB0aW9uIGlzIG5vdCBuYXRpdmUgdG8gdGhlXG4gICAqIG1vZGVsLCBzaW5jZSB0aGUgbW9kZWwgY29uc3VtZXMgYXVkaW8gZGlyZWN0bHkuIFRyYW5zY3JpcHRpb24gcnVuc1xuICAgKiBhc3luY2hyb25vdXNseSB0aHJvdWdoIFdoaXNwZXIgYW5kIHNob3VsZCBiZSB0cmVhdGVkIGFzIHJvdWdoIGd1aWRhbmNlIHJhdGhlclxuICAgKiB0aGFuIHRoZSByZXByZXNlbnRhdGlvbiB1bmRlcnN0b29kIGJ5IHRoZSBtb2RlbC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgSW5wdXRBdWRpb1RyYW5zY3JpcHRpb24ge1xuICAgIC8qKlxuICAgICAqIFRoZSBtb2RlbCB0byB1c2UgZm9yIHRyYW5zY3JpcHRpb24sIGB3aGlzcGVyLTFgIGlzIHRoZSBvbmx5IGN1cnJlbnRseSBzdXBwb3J0ZWRcbiAgICAgKiBtb2RlbC5cbiAgICAgKi9cbiAgICBtb2RlbD86IHN0cmluZztcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgVG9vbCB7XG4gICAgLyoqXG4gICAgICogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBmdW5jdGlvbiwgaW5jbHVkaW5nIGd1aWRhbmNlIG9uIHdoZW4gYW5kIGhvdyB0byBjYWxsIGl0LFxuICAgICAqIGFuZCBndWlkYW5jZSBhYm91dCB3aGF0IHRvIHRlbGwgdGhlIHVzZXIgd2hlbiBjYWxsaW5nIChpZiBhbnl0aGluZykuXG4gICAgICovXG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgbmFtZT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFBhcmFtZXRlcnMgb2YgdGhlIGZ1bmN0aW9uIGluIEpTT04gU2NoZW1hLlxuICAgICAqL1xuICAgIHBhcmFtZXRlcnM/OiB1bmtub3duO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIHRvb2wsIGkuZS4gYGZ1bmN0aW9uYC5cbiAgICAgKi9cbiAgICB0eXBlPzogJ2Z1bmN0aW9uJztcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9uIGZvciB0dXJuIGRldGVjdGlvbi4gQ2FuIGJlIHNldCB0byBgbnVsbGAgdG8gdHVybiBvZmYuIFNlcnZlciBWQURcbiAgICogbWVhbnMgdGhhdCB0aGUgbW9kZWwgd2lsbCBkZXRlY3QgdGhlIHN0YXJ0IGFuZCBlbmQgb2Ygc3BlZWNoIGJhc2VkIG9uIGF1ZGlvXG4gICAqIHZvbHVtZSBhbmQgcmVzcG9uZCBhdCB0aGUgZW5kIG9mIHVzZXIgc3BlZWNoLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUdXJuRGV0ZWN0aW9uIHtcbiAgICAvKipcbiAgICAgKiBBbW91bnQgb2YgYXVkaW8gdG8gaW5jbHVkZSBiZWZvcmUgdGhlIFZBRCBkZXRlY3RlZCBzcGVlY2ggKGluIG1pbGxpc2Vjb25kcykuXG4gICAgICogRGVmYXVsdHMgdG8gMzAwbXMuXG4gICAgICovXG4gICAgcHJlZml4X3BhZGRpbmdfbXM/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBEdXJhdGlvbiBvZiBzaWxlbmNlIHRvIGRldGVjdCBzcGVlY2ggc3RvcCAoaW4gbWlsbGlzZWNvbmRzKS4gRGVmYXVsdHMgdG8gNTAwbXMuXG4gICAgICogV2l0aCBzaG9ydGVyIHZhbHVlcyB0aGUgbW9kZWwgd2lsbCByZXNwb25kIG1vcmUgcXVpY2tseSwgYnV0IG1heSBqdW1wIGluIG9uXG4gICAgICogc2hvcnQgcGF1c2VzIGZyb20gdGhlIHVzZXIuXG4gICAgICovXG4gICAgc2lsZW5jZV9kdXJhdGlvbl9tcz86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIEFjdGl2YXRpb24gdGhyZXNob2xkIGZvciBWQUQgKDAuMCB0byAxLjApLCB0aGlzIGRlZmF1bHRzIHRvIDAuNS4gQSBoaWdoZXJcbiAgICAgKiB0aHJlc2hvbGQgd2lsbCByZXF1aXJlIGxvdWRlciBhdWRpbyB0byBhY3RpdmF0ZSB0aGUgbW9kZWwsIGFuZCB0aHVzIG1pZ2h0XG4gICAgICogcGVyZm9ybSBiZXR0ZXIgaW4gbm9pc3kgZW52aXJvbm1lbnRzLlxuICAgICAqL1xuICAgIHRocmVzaG9sZD86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFR5cGUgb2YgdHVybiBkZXRlY3Rpb24sIG9ubHkgYHNlcnZlcl92YWRgIGlzIGN1cnJlbnRseSBzdXBwb3J0ZWQuXG4gICAgICovXG4gICAgdHlwZT86IHN0cmluZztcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlc3Npb25DcmVhdGVQYXJhbXMge1xuICAvKipcbiAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgZ2VuZXJhdGVkIGNsaWVudCBzZWNyZXQuXG4gICAqL1xuICBjbGllbnRfc2VjcmV0PzogU2Vzc2lvbkNyZWF0ZVBhcmFtcy5DbGllbnRTZWNyZXQ7XG5cbiAgLyoqXG4gICAqIFRoZSBmb3JtYXQgb2YgaW5wdXQgYXVkaW8uIE9wdGlvbnMgYXJlIGBwY20xNmAsIGBnNzExX3VsYXdgLCBvciBgZzcxMV9hbGF3YC4gRm9yXG4gICAqIGBwY20xNmAsIGlucHV0IGF1ZGlvIG11c3QgYmUgMTYtYml0IFBDTSBhdCBhIDI0a0h6IHNhbXBsZSByYXRlLCBzaW5nbGUgY2hhbm5lbFxuICAgKiAobW9ubyksIGFuZCBsaXR0bGUtZW5kaWFuIGJ5dGUgb3JkZXIuXG4gICAqL1xuICBpbnB1dF9hdWRpb19mb3JtYXQ/OiAncGNtMTYnIHwgJ2c3MTFfdWxhdycgfCAnZzcxMV9hbGF3JztcblxuICAvKipcbiAgICogQ29uZmlndXJhdGlvbiBmb3IgaW5wdXQgYXVkaW8gbm9pc2UgcmVkdWN0aW9uLiBUaGlzIGNhbiBiZSBzZXQgdG8gYG51bGxgIHRvIHR1cm5cbiAgICogb2ZmLiBOb2lzZSByZWR1Y3Rpb24gZmlsdGVycyBhdWRpbyBhZGRlZCB0byB0aGUgaW5wdXQgYXVkaW8gYnVmZmVyIGJlZm9yZSBpdCBpc1xuICAgKiBzZW50IHRvIFZBRCBhbmQgdGhlIG1vZGVsLiBGaWx0ZXJpbmcgdGhlIGF1ZGlvIGNhbiBpbXByb3ZlIFZBRCBhbmQgdHVyblxuICAgKiBkZXRlY3Rpb24gYWNjdXJhY3kgKHJlZHVjaW5nIGZhbHNlIHBvc2l0aXZlcykgYW5kIG1vZGVsIHBlcmZvcm1hbmNlIGJ5IGltcHJvdmluZ1xuICAgKiBwZXJjZXB0aW9uIG9mIHRoZSBpbnB1dCBhdWRpby5cbiAgICovXG4gIGlucHV0X2F1ZGlvX25vaXNlX3JlZHVjdGlvbj86IFNlc3Npb25DcmVhdGVQYXJhbXMuSW5wdXRBdWRpb05vaXNlUmVkdWN0aW9uO1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9uIGZvciBpbnB1dCBhdWRpbyB0cmFuc2NyaXB0aW9uLCBkZWZhdWx0cyB0byBvZmYgYW5kIGNhbiBiZSBzZXQgdG9cbiAgICogYG51bGxgIHRvIHR1cm4gb2ZmIG9uY2Ugb24uIElucHV0IGF1ZGlvIHRyYW5zY3JpcHRpb24gaXMgbm90IG5hdGl2ZSB0byB0aGVcbiAgICogbW9kZWwsIHNpbmNlIHRoZSBtb2RlbCBjb25zdW1lcyBhdWRpbyBkaXJlY3RseS4gVHJhbnNjcmlwdGlvbiBydW5zXG4gICAqIGFzeW5jaHJvbm91c2x5IHRocm91Z2hcbiAgICogW3RoZSAvYXVkaW8vdHJhbnNjcmlwdGlvbnMgZW5kcG9pbnRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvYXVkaW8vY3JlYXRlVHJhbnNjcmlwdGlvbilcbiAgICogYW5kIHNob3VsZCBiZSB0cmVhdGVkIGFzIGd1aWRhbmNlIG9mIGlucHV0IGF1ZGlvIGNvbnRlbnQgcmF0aGVyIHRoYW4gcHJlY2lzZWx5XG4gICAqIHdoYXQgdGhlIG1vZGVsIGhlYXJkLiBUaGUgY2xpZW50IGNhbiBvcHRpb25hbGx5IHNldCB0aGUgbGFuZ3VhZ2UgYW5kIHByb21wdCBmb3JcbiAgICogdHJhbnNjcmlwdGlvbiwgdGhlc2Ugb2ZmZXIgYWRkaXRpb25hbCBndWlkYW5jZSB0byB0aGUgdHJhbnNjcmlwdGlvbiBzZXJ2aWNlLlxuICAgKi9cbiAgaW5wdXRfYXVkaW9fdHJhbnNjcmlwdGlvbj86IFNlc3Npb25DcmVhdGVQYXJhbXMuSW5wdXRBdWRpb1RyYW5zY3JpcHRpb247XG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHN5c3RlbSBpbnN0cnVjdGlvbnMgKGkuZS4gc3lzdGVtIG1lc3NhZ2UpIHByZXBlbmRlZCB0byBtb2RlbCBjYWxscy5cbiAgICogVGhpcyBmaWVsZCBhbGxvd3MgdGhlIGNsaWVudCB0byBndWlkZSB0aGUgbW9kZWwgb24gZGVzaXJlZCByZXNwb25zZXMuIFRoZSBtb2RlbFxuICAgKiBjYW4gYmUgaW5zdHJ1Y3RlZCBvbiByZXNwb25zZSBjb250ZW50IGFuZCBmb3JtYXQsIChlLmcuIFwiYmUgZXh0cmVtZWx5IHN1Y2NpbmN0XCIsXG4gICAqIFwiYWN0IGZyaWVuZGx5XCIsIFwiaGVyZSBhcmUgZXhhbXBsZXMgb2YgZ29vZCByZXNwb25zZXNcIikgYW5kIG9uIGF1ZGlvIGJlaGF2aW9yXG4gICAqIChlLmcuIFwidGFsayBxdWlja2x5XCIsIFwiaW5qZWN0IGVtb3Rpb24gaW50byB5b3VyIHZvaWNlXCIsIFwibGF1Z2ggZnJlcXVlbnRseVwiKS4gVGhlXG4gICAqIGluc3RydWN0aW9ucyBhcmUgbm90IGd1YXJhbnRlZWQgdG8gYmUgZm9sbG93ZWQgYnkgdGhlIG1vZGVsLCBidXQgdGhleSBwcm92aWRlXG4gICAqIGd1aWRhbmNlIHRvIHRoZSBtb2RlbCBvbiB0aGUgZGVzaXJlZCBiZWhhdmlvci5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoZSBzZXJ2ZXIgc2V0cyBkZWZhdWx0IGluc3RydWN0aW9ucyB3aGljaCB3aWxsIGJlIHVzZWQgaWYgdGhpcyBmaWVsZFxuICAgKiBpcyBub3Qgc2V0IGFuZCBhcmUgdmlzaWJsZSBpbiB0aGUgYHNlc3Npb24uY3JlYXRlZGAgZXZlbnQgYXQgdGhlIHN0YXJ0IG9mIHRoZVxuICAgKiBzZXNzaW9uLlxuICAgKi9cbiAgaW5zdHJ1Y3Rpb25zPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiBvdXRwdXQgdG9rZW5zIGZvciBhIHNpbmdsZSBhc3Npc3RhbnQgcmVzcG9uc2UsIGluY2x1c2l2ZSBvZlxuICAgKiB0b29sIGNhbGxzLiBQcm92aWRlIGFuIGludGVnZXIgYmV0d2VlbiAxIGFuZCA0MDk2IHRvIGxpbWl0IG91dHB1dCB0b2tlbnMsIG9yXG4gICAqIGBpbmZgIGZvciB0aGUgbWF4aW11bSBhdmFpbGFibGUgdG9rZW5zIGZvciBhIGdpdmVuIG1vZGVsLiBEZWZhdWx0cyB0byBgaW5mYC5cbiAgICovXG4gIG1heF9yZXNwb25zZV9vdXRwdXRfdG9rZW5zPzogbnVtYmVyIHwgJ2luZic7XG5cbiAgLyoqXG4gICAqIFRoZSBzZXQgb2YgbW9kYWxpdGllcyB0aGUgbW9kZWwgY2FuIHJlc3BvbmQgd2l0aC4gVG8gZGlzYWJsZSBhdWRpbywgc2V0IHRoaXMgdG9cbiAgICogW1widGV4dFwiXS5cbiAgICovXG4gIG1vZGFsaXRpZXM/OiBBcnJheTwndGV4dCcgfCAnYXVkaW8nPjtcblxuICAvKipcbiAgICogVGhlIFJlYWx0aW1lIG1vZGVsIHVzZWQgZm9yIHRoaXMgc2Vzc2lvbi5cbiAgICovXG4gIG1vZGVsPzpcbiAgICB8ICdncHQtNG8tcmVhbHRpbWUtcHJldmlldydcbiAgICB8ICdncHQtNG8tcmVhbHRpbWUtcHJldmlldy0yMDI0LTEwLTAxJ1xuICAgIHwgJ2dwdC00by1yZWFsdGltZS1wcmV2aWV3LTIwMjQtMTItMTcnXG4gICAgfCAnZ3B0LTRvLW1pbmktcmVhbHRpbWUtcHJldmlldydcbiAgICB8ICdncHQtNG8tbWluaS1yZWFsdGltZS1wcmV2aWV3LTIwMjQtMTItMTcnO1xuXG4gIC8qKlxuICAgKiBUaGUgZm9ybWF0IG9mIG91dHB1dCBhdWRpby4gT3B0aW9ucyBhcmUgYHBjbTE2YCwgYGc3MTFfdWxhd2AsIG9yIGBnNzExX2FsYXdgLlxuICAgKiBGb3IgYHBjbTE2YCwgb3V0cHV0IGF1ZGlvIGlzIHNhbXBsZWQgYXQgYSByYXRlIG9mIDI0a0h6LlxuICAgKi9cbiAgb3V0cHV0X2F1ZGlvX2Zvcm1hdD86ICdwY20xNicgfCAnZzcxMV91bGF3JyB8ICdnNzExX2FsYXcnO1xuXG4gIC8qKlxuICAgKiBTYW1wbGluZyB0ZW1wZXJhdHVyZSBmb3IgdGhlIG1vZGVsLCBsaW1pdGVkIHRvIFswLjYsIDEuMl0uIEZvciBhdWRpbyBtb2RlbHMgYVxuICAgKiB0ZW1wZXJhdHVyZSBvZiAwLjggaXMgaGlnaGx5IHJlY29tbWVuZGVkIGZvciBiZXN0IHBlcmZvcm1hbmNlLlxuICAgKi9cbiAgdGVtcGVyYXR1cmU/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEhvdyB0aGUgbW9kZWwgY2hvb3NlcyB0b29scy4gT3B0aW9ucyBhcmUgYGF1dG9gLCBgbm9uZWAsIGByZXF1aXJlZGAsIG9yIHNwZWNpZnlcbiAgICogYSBmdW5jdGlvbi5cbiAgICovXG4gIHRvb2xfY2hvaWNlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUb29scyAoZnVuY3Rpb25zKSBhdmFpbGFibGUgdG8gdGhlIG1vZGVsLlxuICAgKi9cbiAgdG9vbHM/OiBBcnJheTxTZXNzaW9uQ3JlYXRlUGFyYW1zLlRvb2w+O1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9uIGZvciB0dXJuIGRldGVjdGlvbiwgZXRoZXIgU2VydmVyIFZBRCBvciBTZW1hbnRpYyBWQUQuIFRoaXMgY2FuIGJlXG4gICAqIHNldCB0byBgbnVsbGAgdG8gdHVybiBvZmYsIGluIHdoaWNoIGNhc2UgdGhlIGNsaWVudCBtdXN0IG1hbnVhbGx5IHRyaWdnZXIgbW9kZWxcbiAgICogcmVzcG9uc2UuIFNlcnZlciBWQUQgbWVhbnMgdGhhdCB0aGUgbW9kZWwgd2lsbCBkZXRlY3QgdGhlIHN0YXJ0IGFuZCBlbmQgb2ZcbiAgICogc3BlZWNoIGJhc2VkIG9uIGF1ZGlvIHZvbHVtZSBhbmQgcmVzcG9uZCBhdCB0aGUgZW5kIG9mIHVzZXIgc3BlZWNoLiBTZW1hbnRpYyBWQURcbiAgICogaXMgbW9yZSBhZHZhbmNlZCBhbmQgdXNlcyBhIHR1cm4gZGV0ZWN0aW9uIG1vZGVsIChpbiBjb25qdWN0aW9uIHdpdGggVkFEKSB0b1xuICAgKiBzZW1hbnRpY2FsbHkgZXN0aW1hdGUgd2hldGhlciB0aGUgdXNlciBoYXMgZmluaXNoZWQgc3BlYWtpbmcsIHRoZW4gZHluYW1pY2FsbHlcbiAgICogc2V0cyBhIHRpbWVvdXQgYmFzZWQgb24gdGhpcyBwcm9iYWJpbGl0eS4gRm9yIGV4YW1wbGUsIGlmIHVzZXIgYXVkaW8gdHJhaWxzIG9mZlxuICAgKiB3aXRoIFwidWhobVwiLCB0aGUgbW9kZWwgd2lsbCBzY29yZSBhIGxvdyBwcm9iYWJpbGl0eSBvZiB0dXJuIGVuZCBhbmQgd2FpdCBsb25nZXJcbiAgICogZm9yIHRoZSB1c2VyIHRvIGNvbnRpbnVlIHNwZWFraW5nLiBUaGlzIGNhbiBiZSB1c2VmdWwgZm9yIG1vcmUgbmF0dXJhbFxuICAgKiBjb252ZXJzYXRpb25zLCBidXQgbWF5IGhhdmUgYSBoaWdoZXIgbGF0ZW5jeS5cbiAgICovXG4gIHR1cm5fZGV0ZWN0aW9uPzogU2Vzc2lvbkNyZWF0ZVBhcmFtcy5UdXJuRGV0ZWN0aW9uO1xuXG4gIC8qKlxuICAgKiBUaGUgdm9pY2UgdGhlIG1vZGVsIHVzZXMgdG8gcmVzcG9uZC4gVm9pY2UgY2Fubm90IGJlIGNoYW5nZWQgZHVyaW5nIHRoZSBzZXNzaW9uXG4gICAqIG9uY2UgdGhlIG1vZGVsIGhhcyByZXNwb25kZWQgd2l0aCBhdWRpbyBhdCBsZWFzdCBvbmNlLiBDdXJyZW50IHZvaWNlIG9wdGlvbnMgYXJlXG4gICAqIGBhbGxveWAsIGBhc2hgLCBgYmFsbGFkYCwgYGNvcmFsYCwgYGVjaG9gLCBgZmFibGVgLCBgb255eGAsIGBub3ZhYCwgYHNhZ2VgLFxuICAgKiBgc2hpbW1lcmAsIGFuZCBgdmVyc2VgLlxuICAgKi9cbiAgdm9pY2U/OlxuICAgIHwgKHN0cmluZyAmIHt9KVxuICAgIHwgJ2FsbG95J1xuICAgIHwgJ2FzaCdcbiAgICB8ICdiYWxsYWQnXG4gICAgfCAnY29yYWwnXG4gICAgfCAnZWNobydcbiAgICB8ICdmYWJsZSdcbiAgICB8ICdvbnl4J1xuICAgIHwgJ25vdmEnXG4gICAgfCAnc2FnZSdcbiAgICB8ICdzaGltbWVyJ1xuICAgIHwgJ3ZlcnNlJztcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBTZXNzaW9uQ3JlYXRlUGFyYW1zIHtcbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGdlbmVyYXRlZCBjbGllbnQgc2VjcmV0LlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBDbGllbnRTZWNyZXQge1xuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyYXRpb24gZm9yIHRoZSBlcGhlbWVyYWwgdG9rZW4gZXhwaXJhdGlvbi5cbiAgICAgKi9cbiAgICBleHBpcmVzX2F0PzogQ2xpZW50U2VjcmV0LkV4cGlyZXNBdDtcbiAgfVxuXG4gIGV4cG9ydCBuYW1lc3BhY2UgQ2xpZW50U2VjcmV0IHtcbiAgICAvKipcbiAgICAgKiBDb25maWd1cmF0aW9uIGZvciB0aGUgZXBoZW1lcmFsIHRva2VuIGV4cGlyYXRpb24uXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBFeHBpcmVzQXQge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgYW5jaG9yIHBvaW50IGZvciB0aGUgZXBoZW1lcmFsIHRva2VuIGV4cGlyYXRpb24uIE9ubHkgYGNyZWF0ZWRfYXRgIGlzXG4gICAgICAgKiBjdXJyZW50bHkgc3VwcG9ydGVkLlxuICAgICAgICovXG4gICAgICBhbmNob3I/OiAnY3JlYXRlZF9hdCc7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIG51bWJlciBvZiBzZWNvbmRzIGZyb20gdGhlIGFuY2hvciBwb2ludCB0byB0aGUgZXhwaXJhdGlvbi4gU2VsZWN0IGEgdmFsdWVcbiAgICAgICAqIGJldHdlZW4gYDEwYCBhbmQgYDcyMDBgLlxuICAgICAgICovXG4gICAgICBzZWNvbmRzPzogbnVtYmVyO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9uIGZvciBpbnB1dCBhdWRpbyBub2lzZSByZWR1Y3Rpb24uIFRoaXMgY2FuIGJlIHNldCB0byBgbnVsbGAgdG8gdHVyblxuICAgKiBvZmYuIE5vaXNlIHJlZHVjdGlvbiBmaWx0ZXJzIGF1ZGlvIGFkZGVkIHRvIHRoZSBpbnB1dCBhdWRpbyBidWZmZXIgYmVmb3JlIGl0IGlzXG4gICAqIHNlbnQgdG8gVkFEIGFuZCB0aGUgbW9kZWwuIEZpbHRlcmluZyB0aGUgYXVkaW8gY2FuIGltcHJvdmUgVkFEIGFuZCB0dXJuXG4gICAqIGRldGVjdGlvbiBhY2N1cmFjeSAocmVkdWNpbmcgZmFsc2UgcG9zaXRpdmVzKSBhbmQgbW9kZWwgcGVyZm9ybWFuY2UgYnkgaW1wcm92aW5nXG4gICAqIHBlcmNlcHRpb24gb2YgdGhlIGlucHV0IGF1ZGlvLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJbnB1dEF1ZGlvTm9pc2VSZWR1Y3Rpb24ge1xuICAgIC8qKlxuICAgICAqIFR5cGUgb2Ygbm9pc2UgcmVkdWN0aW9uLiBgbmVhcl9maWVsZGAgaXMgZm9yIGNsb3NlLXRhbGtpbmcgbWljcm9waG9uZXMgc3VjaCBhc1xuICAgICAqIGhlYWRwaG9uZXMsIGBmYXJfZmllbGRgIGlzIGZvciBmYXItZmllbGQgbWljcm9waG9uZXMgc3VjaCBhcyBsYXB0b3Agb3JcbiAgICAgKiBjb25mZXJlbmNlIHJvb20gbWljcm9waG9uZXMuXG4gICAgICovXG4gICAgdHlwZT86ICduZWFyX2ZpZWxkJyB8ICdmYXJfZmllbGQnO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gZm9yIGlucHV0IGF1ZGlvIHRyYW5zY3JpcHRpb24sIGRlZmF1bHRzIHRvIG9mZiBhbmQgY2FuIGJlIHNldCB0b1xuICAgKiBgbnVsbGAgdG8gdHVybiBvZmYgb25jZSBvbi4gSW5wdXQgYXVkaW8gdHJhbnNjcmlwdGlvbiBpcyBub3QgbmF0aXZlIHRvIHRoZVxuICAgKiBtb2RlbCwgc2luY2UgdGhlIG1vZGVsIGNvbnN1bWVzIGF1ZGlvIGRpcmVjdGx5LiBUcmFuc2NyaXB0aW9uIHJ1bnNcbiAgICogYXN5bmNocm9ub3VzbHkgdGhyb3VnaFxuICAgKiBbdGhlIC9hdWRpby90cmFuc2NyaXB0aW9ucyBlbmRwb2ludF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9hdWRpby9jcmVhdGVUcmFuc2NyaXB0aW9uKVxuICAgKiBhbmQgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgZ3VpZGFuY2Ugb2YgaW5wdXQgYXVkaW8gY29udGVudCByYXRoZXIgdGhhbiBwcmVjaXNlbHlcbiAgICogd2hhdCB0aGUgbW9kZWwgaGVhcmQuIFRoZSBjbGllbnQgY2FuIG9wdGlvbmFsbHkgc2V0IHRoZSBsYW5ndWFnZSBhbmQgcHJvbXB0IGZvclxuICAgKiB0cmFuc2NyaXB0aW9uLCB0aGVzZSBvZmZlciBhZGRpdGlvbmFsIGd1aWRhbmNlIHRvIHRoZSB0cmFuc2NyaXB0aW9uIHNlcnZpY2UuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIElucHV0QXVkaW9UcmFuc2NyaXB0aW9uIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbGFuZ3VhZ2Ugb2YgdGhlIGlucHV0IGF1ZGlvLiBTdXBwbHlpbmcgdGhlIGlucHV0IGxhbmd1YWdlIGluXG4gICAgICogW0lTTy02MzktMV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl9JU09fNjM5LTFfY29kZXMpIChlLmcuIGBlbmApXG4gICAgICogZm9ybWF0IHdpbGwgaW1wcm92ZSBhY2N1cmFjeSBhbmQgbGF0ZW5jeS5cbiAgICAgKi9cbiAgICBsYW5ndWFnZT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBtb2RlbCB0byB1c2UgZm9yIHRyYW5zY3JpcHRpb24sIGN1cnJlbnQgb3B0aW9ucyBhcmUgYGdwdC00by10cmFuc2NyaWJlYCxcbiAgICAgKiBgZ3B0LTRvLW1pbmktdHJhbnNjcmliZWAsIGFuZCBgd2hpc3Blci0xYC5cbiAgICAgKi9cbiAgICBtb2RlbD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEFuIG9wdGlvbmFsIHRleHQgdG8gZ3VpZGUgdGhlIG1vZGVsJ3Mgc3R5bGUgb3IgY29udGludWUgYSBwcmV2aW91cyBhdWRpb1xuICAgICAqIHNlZ21lbnQuIEZvciBgd2hpc3Blci0xYCwgdGhlXG4gICAgICogW3Byb21wdCBpcyBhIGxpc3Qgb2Yga2V5d29yZHNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9zcGVlY2gtdG8tdGV4dCNwcm9tcHRpbmcpLlxuICAgICAqIEZvciBgZ3B0LTRvLXRyYW5zY3JpYmVgIG1vZGVscywgdGhlIHByb21wdCBpcyBhIGZyZWUgdGV4dCBzdHJpbmcsIGZvciBleGFtcGxlXG4gICAgICogXCJleHBlY3Qgd29yZHMgcmVsYXRlZCB0byB0ZWNobm9sb2d5XCIuXG4gICAgICovXG4gICAgcHJvbXB0Pzogc3RyaW5nO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBUb29sIHtcbiAgICAvKipcbiAgICAgKiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIGZ1bmN0aW9uLCBpbmNsdWRpbmcgZ3VpZGFuY2Ugb24gd2hlbiBhbmQgaG93IHRvIGNhbGwgaXQsXG4gICAgICogYW5kIGd1aWRhbmNlIGFib3V0IHdoYXQgdG8gdGVsbCB0aGUgdXNlciB3aGVuIGNhbGxpbmcgKGlmIGFueXRoaW5nKS5cbiAgICAgKi9cbiAgICBkZXNjcmlwdGlvbj86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBuYW1lPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW1ldGVycyBvZiB0aGUgZnVuY3Rpb24gaW4gSlNPTiBTY2hlbWEuXG4gICAgICovXG4gICAgcGFyYW1ldGVycz86IHVua25vd247XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgdG9vbCwgaS5lLiBgZnVuY3Rpb25gLlxuICAgICAqL1xuICAgIHR5cGU/OiAnZnVuY3Rpb24nO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gZm9yIHR1cm4gZGV0ZWN0aW9uLCBldGhlciBTZXJ2ZXIgVkFEIG9yIFNlbWFudGljIFZBRC4gVGhpcyBjYW4gYmVcbiAgICogc2V0IHRvIGBudWxsYCB0byB0dXJuIG9mZiwgaW4gd2hpY2ggY2FzZSB0aGUgY2xpZW50IG11c3QgbWFudWFsbHkgdHJpZ2dlciBtb2RlbFxuICAgKiByZXNwb25zZS4gU2VydmVyIFZBRCBtZWFucyB0aGF0IHRoZSBtb2RlbCB3aWxsIGRldGVjdCB0aGUgc3RhcnQgYW5kIGVuZCBvZlxuICAgKiBzcGVlY2ggYmFzZWQgb24gYXVkaW8gdm9sdW1lIGFuZCByZXNwb25kIGF0IHRoZSBlbmQgb2YgdXNlciBzcGVlY2guIFNlbWFudGljIFZBRFxuICAgKiBpcyBtb3JlIGFkdmFuY2VkIGFuZCB1c2VzIGEgdHVybiBkZXRlY3Rpb24gbW9kZWwgKGluIGNvbmp1Y3Rpb24gd2l0aCBWQUQpIHRvXG4gICAqIHNlbWFudGljYWxseSBlc3RpbWF0ZSB3aGV0aGVyIHRoZSB1c2VyIGhhcyBmaW5pc2hlZCBzcGVha2luZywgdGhlbiBkeW5hbWljYWxseVxuICAgKiBzZXRzIGEgdGltZW91dCBiYXNlZCBvbiB0aGlzIHByb2JhYmlsaXR5LiBGb3IgZXhhbXBsZSwgaWYgdXNlciBhdWRpbyB0cmFpbHMgb2ZmXG4gICAqIHdpdGggXCJ1aGhtXCIsIHRoZSBtb2RlbCB3aWxsIHNjb3JlIGEgbG93IHByb2JhYmlsaXR5IG9mIHR1cm4gZW5kIGFuZCB3YWl0IGxvbmdlclxuICAgKiBmb3IgdGhlIHVzZXIgdG8gY29udGludWUgc3BlYWtpbmcuIFRoaXMgY2FuIGJlIHVzZWZ1bCBmb3IgbW9yZSBuYXR1cmFsXG4gICAqIGNvbnZlcnNhdGlvbnMsIGJ1dCBtYXkgaGF2ZSBhIGhpZ2hlciBsYXRlbmN5LlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUdXJuRGV0ZWN0aW9uIHtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0byBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlIGEgcmVzcG9uc2Ugd2hlbiBhIFZBRCBzdG9wIGV2ZW50XG4gICAgICogb2NjdXJzLlxuICAgICAqL1xuICAgIGNyZWF0ZV9yZXNwb25zZT86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIG9ubHkgZm9yIGBzZW1hbnRpY192YWRgIG1vZGUuIFRoZSBlYWdlcm5lc3Mgb2YgdGhlIG1vZGVsIHRvIHJlc3BvbmQuIGBsb3dgXG4gICAgICogd2lsbCB3YWl0IGxvbmdlciBmb3IgdGhlIHVzZXIgdG8gY29udGludWUgc3BlYWtpbmcsIGBoaWdoYCB3aWxsIHJlc3BvbmQgbW9yZVxuICAgICAqIHF1aWNrbHkuIGBhdXRvYCBpcyB0aGUgZGVmYXVsdCBhbmQgaXMgZXF1aXZhbGVudCB0byBgbWVkaXVtYC5cbiAgICAgKi9cbiAgICBlYWdlcm5lc3M/OiAnbG93JyB8ICdtZWRpdW0nIHwgJ2hpZ2gnIHwgJ2F1dG8nO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgdG8gYXV0b21hdGljYWxseSBpbnRlcnJ1cHQgYW55IG9uZ29pbmcgcmVzcG9uc2Ugd2l0aCBvdXRwdXQgdG9cbiAgICAgKiB0aGUgZGVmYXVsdCBjb252ZXJzYXRpb24gKGkuZS4gYGNvbnZlcnNhdGlvbmAgb2YgYGF1dG9gKSB3aGVuIGEgVkFEIHN0YXJ0IGV2ZW50XG4gICAgICogb2NjdXJzLlxuICAgICAqL1xuICAgIGludGVycnVwdF9yZXNwb25zZT86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIG9ubHkgZm9yIGBzZXJ2ZXJfdmFkYCBtb2RlLiBBbW91bnQgb2YgYXVkaW8gdG8gaW5jbHVkZSBiZWZvcmUgdGhlIFZBRFxuICAgICAqIGRldGVjdGVkIHNwZWVjaCAoaW4gbWlsbGlzZWNvbmRzKS4gRGVmYXVsdHMgdG8gMzAwbXMuXG4gICAgICovXG4gICAgcHJlZml4X3BhZGRpbmdfbXM/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIG9ubHkgZm9yIGBzZXJ2ZXJfdmFkYCBtb2RlLiBEdXJhdGlvbiBvZiBzaWxlbmNlIHRvIGRldGVjdCBzcGVlY2ggc3RvcCAoaW5cbiAgICAgKiBtaWxsaXNlY29uZHMpLiBEZWZhdWx0cyB0byA1MDBtcy4gV2l0aCBzaG9ydGVyIHZhbHVlcyB0aGUgbW9kZWwgd2lsbCByZXNwb25kXG4gICAgICogbW9yZSBxdWlja2x5LCBidXQgbWF5IGp1bXAgaW4gb24gc2hvcnQgcGF1c2VzIGZyb20gdGhlIHVzZXIuXG4gICAgICovXG4gICAgc2lsZW5jZV9kdXJhdGlvbl9tcz86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgb25seSBmb3IgYHNlcnZlcl92YWRgIG1vZGUuIEFjdGl2YXRpb24gdGhyZXNob2xkIGZvciBWQUQgKDAuMCB0byAxLjApLCB0aGlzXG4gICAgICogZGVmYXVsdHMgdG8gMC41LiBBIGhpZ2hlciB0aHJlc2hvbGQgd2lsbCByZXF1aXJlIGxvdWRlciBhdWRpbyB0byBhY3RpdmF0ZSB0aGVcbiAgICAgKiBtb2RlbCwgYW5kIHRodXMgbWlnaHQgcGVyZm9ybSBiZXR0ZXIgaW4gbm9pc3kgZW52aXJvbm1lbnRzLlxuICAgICAqL1xuICAgIHRocmVzaG9sZD86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFR5cGUgb2YgdHVybiBkZXRlY3Rpb24uXG4gICAgICovXG4gICAgdHlwZT86ICdzZXJ2ZXJfdmFkJyB8ICdzZW1hbnRpY192YWQnO1xuICB9XG59XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBTZXNzaW9ucyB7XG4gIGV4cG9ydCB7XG4gICAgdHlwZSBTZXNzaW9uIGFzIFNlc3Npb24sXG4gICAgdHlwZSBTZXNzaW9uQ3JlYXRlUmVzcG9uc2UgYXMgU2Vzc2lvbkNyZWF0ZVJlc3BvbnNlLFxuICAgIHR5cGUgU2Vzc2lvbkNyZWF0ZVBhcmFtcyBhcyBTZXNzaW9uQ3JlYXRlUGFyYW1zLFxuICB9O1xufVxuIiwgIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnLi4vLi4vLi4vcmVzb3VyY2UnO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tICcuLi8uLi8uLi9jb3JlJztcblxuZXhwb3J0IGNsYXNzIFRyYW5zY3JpcHRpb25TZXNzaW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBlcGhlbWVyYWwgQVBJIHRva2VuIGZvciB1c2UgaW4gY2xpZW50LXNpZGUgYXBwbGljYXRpb25zIHdpdGggdGhlXG4gICAqIFJlYWx0aW1lIEFQSSBzcGVjaWZpY2FsbHkgZm9yIHJlYWx0aW1lIHRyYW5zY3JpcHRpb25zLiBDYW4gYmUgY29uZmlndXJlZCB3aXRoXG4gICAqIHRoZSBzYW1lIHNlc3Npb24gcGFyYW1ldGVycyBhcyB0aGUgYHRyYW5zY3JpcHRpb25fc2Vzc2lvbi51cGRhdGVgIGNsaWVudCBldmVudC5cbiAgICpcbiAgICogSXQgcmVzcG9uZHMgd2l0aCBhIHNlc3Npb24gb2JqZWN0LCBwbHVzIGEgYGNsaWVudF9zZWNyZXRgIGtleSB3aGljaCBjb250YWlucyBhXG4gICAqIHVzYWJsZSBlcGhlbWVyYWwgQVBJIHRva2VuIHRoYXQgY2FuIGJlIHVzZWQgdG8gYXV0aGVudGljYXRlIGJyb3dzZXIgY2xpZW50cyBmb3JcbiAgICogdGhlIFJlYWx0aW1lIEFQSS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHNcbiAgICogY29uc3QgdHJhbnNjcmlwdGlvblNlc3Npb24gPVxuICAgKiAgIGF3YWl0IGNsaWVudC5iZXRhLnJlYWx0aW1lLnRyYW5zY3JpcHRpb25TZXNzaW9ucy5jcmVhdGUoKTtcbiAgICogYGBgXG4gICAqL1xuICBjcmVhdGUoXG4gICAgYm9keTogVHJhbnNjcmlwdGlvblNlc3Npb25DcmVhdGVQYXJhbXMsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuQVBJUHJvbWlzZTxUcmFuc2NyaXB0aW9uU2Vzc2lvbj4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL3JlYWx0aW1lL3RyYW5zY3JpcHRpb25fc2Vzc2lvbnMnLCB7XG4gICAgICBib2R5LFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBIG5ldyBSZWFsdGltZSB0cmFuc2NyaXB0aW9uIHNlc3Npb24gY29uZmlndXJhdGlvbi5cbiAqXG4gKiBXaGVuIGEgc2Vzc2lvbiBpcyBjcmVhdGVkIG9uIHRoZSBzZXJ2ZXIgdmlhIFJFU1QgQVBJLCB0aGUgc2Vzc2lvbiBvYmplY3QgYWxzb1xuICogY29udGFpbnMgYW4gZXBoZW1lcmFsIGtleS4gRGVmYXVsdCBUVEwgZm9yIGtleXMgaXMgMTAgbWludXRlcy4gVGhpcyBwcm9wZXJ0eSBpc1xuICogbm90IHByZXNlbnQgd2hlbiBhIHNlc3Npb24gaXMgdXBkYXRlZCB2aWEgdGhlIFdlYlNvY2tldCBBUEkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNjcmlwdGlvblNlc3Npb24ge1xuICAvKipcbiAgICogRXBoZW1lcmFsIGtleSByZXR1cm5lZCBieSB0aGUgQVBJLiBPbmx5IHByZXNlbnQgd2hlbiB0aGUgc2Vzc2lvbiBpcyBjcmVhdGVkIG9uXG4gICAqIHRoZSBzZXJ2ZXIgdmlhIFJFU1QgQVBJLlxuICAgKi9cbiAgY2xpZW50X3NlY3JldDogVHJhbnNjcmlwdGlvblNlc3Npb24uQ2xpZW50U2VjcmV0O1xuXG4gIC8qKlxuICAgKiBUaGUgZm9ybWF0IG9mIGlucHV0IGF1ZGlvLiBPcHRpb25zIGFyZSBgcGNtMTZgLCBgZzcxMV91bGF3YCwgb3IgYGc3MTFfYWxhd2AuXG4gICAqL1xuICBpbnB1dF9hdWRpb19mb3JtYXQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gb2YgdGhlIHRyYW5zY3JpcHRpb24gbW9kZWwuXG4gICAqL1xuICBpbnB1dF9hdWRpb190cmFuc2NyaXB0aW9uPzogVHJhbnNjcmlwdGlvblNlc3Npb24uSW5wdXRBdWRpb1RyYW5zY3JpcHRpb247XG5cbiAgLyoqXG4gICAqIFRoZSBzZXQgb2YgbW9kYWxpdGllcyB0aGUgbW9kZWwgY2FuIHJlc3BvbmQgd2l0aC4gVG8gZGlzYWJsZSBhdWRpbywgc2V0IHRoaXMgdG9cbiAgICogW1widGV4dFwiXS5cbiAgICovXG4gIG1vZGFsaXRpZXM/OiBBcnJheTwndGV4dCcgfCAnYXVkaW8nPjtcblxuICAvKipcbiAgICogQ29uZmlndXJhdGlvbiBmb3IgdHVybiBkZXRlY3Rpb24uIENhbiBiZSBzZXQgdG8gYG51bGxgIHRvIHR1cm4gb2ZmLiBTZXJ2ZXIgVkFEXG4gICAqIG1lYW5zIHRoYXQgdGhlIG1vZGVsIHdpbGwgZGV0ZWN0IHRoZSBzdGFydCBhbmQgZW5kIG9mIHNwZWVjaCBiYXNlZCBvbiBhdWRpb1xuICAgKiB2b2x1bWUgYW5kIHJlc3BvbmQgYXQgdGhlIGVuZCBvZiB1c2VyIHNwZWVjaC5cbiAgICovXG4gIHR1cm5fZGV0ZWN0aW9uPzogVHJhbnNjcmlwdGlvblNlc3Npb24uVHVybkRldGVjdGlvbjtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBUcmFuc2NyaXB0aW9uU2Vzc2lvbiB7XG4gIC8qKlxuICAgKiBFcGhlbWVyYWwga2V5IHJldHVybmVkIGJ5IHRoZSBBUEkuIE9ubHkgcHJlc2VudCB3aGVuIHRoZSBzZXNzaW9uIGlzIGNyZWF0ZWQgb25cbiAgICogdGhlIHNlcnZlciB2aWEgUkVTVCBBUEkuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIENsaWVudFNlY3JldCB7XG4gICAgLyoqXG4gICAgICogVGltZXN0YW1wIGZvciB3aGVuIHRoZSB0b2tlbiBleHBpcmVzLiBDdXJyZW50bHksIGFsbCB0b2tlbnMgZXhwaXJlIGFmdGVyIG9uZVxuICAgICAqIG1pbnV0ZS5cbiAgICAgKi9cbiAgICBleHBpcmVzX2F0OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBFcGhlbWVyYWwga2V5IHVzYWJsZSBpbiBjbGllbnQgZW52aXJvbm1lbnRzIHRvIGF1dGhlbnRpY2F0ZSBjb25uZWN0aW9ucyB0byB0aGVcbiAgICAgKiBSZWFsdGltZSBBUEkuIFVzZSB0aGlzIGluIGNsaWVudC1zaWRlIGVudmlyb25tZW50cyByYXRoZXIgdGhhbiBhIHN0YW5kYXJkIEFQSVxuICAgICAqIHRva2VuLCB3aGljaCBzaG91bGQgb25seSBiZSB1c2VkIHNlcnZlci1zaWRlLlxuICAgICAqL1xuICAgIHZhbHVlOiBzdHJpbmc7XG4gIH1cblxuICAvKipcbiAgICogQ29uZmlndXJhdGlvbiBvZiB0aGUgdHJhbnNjcmlwdGlvbiBtb2RlbC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgSW5wdXRBdWRpb1RyYW5zY3JpcHRpb24ge1xuICAgIC8qKlxuICAgICAqIFRoZSBsYW5ndWFnZSBvZiB0aGUgaW5wdXQgYXVkaW8uIFN1cHBseWluZyB0aGUgaW5wdXQgbGFuZ3VhZ2UgaW5cbiAgICAgKiBbSVNPLTYzOS0xXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaXN0X29mX0lTT182MzktMV9jb2RlcykgKGUuZy4gYGVuYClcbiAgICAgKiBmb3JtYXQgd2lsbCBpbXByb3ZlIGFjY3VyYWN5IGFuZCBsYXRlbmN5LlxuICAgICAqL1xuICAgIGxhbmd1YWdlPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG1vZGVsIHRvIHVzZSBmb3IgdHJhbnNjcmlwdGlvbi4gQ2FuIGJlIGBncHQtNG8tdHJhbnNjcmliZWAsXG4gICAgICogYGdwdC00by1taW5pLXRyYW5zY3JpYmVgLCBvciBgd2hpc3Blci0xYC5cbiAgICAgKi9cbiAgICBtb2RlbD86ICdncHQtNG8tdHJhbnNjcmliZScgfCAnZ3B0LTRvLW1pbmktdHJhbnNjcmliZScgfCAnd2hpc3Blci0xJztcblxuICAgIC8qKlxuICAgICAqIEFuIG9wdGlvbmFsIHRleHQgdG8gZ3VpZGUgdGhlIG1vZGVsJ3Mgc3R5bGUgb3IgY29udGludWUgYSBwcmV2aW91cyBhdWRpb1xuICAgICAqIHNlZ21lbnQuIFRoZVxuICAgICAqIFtwcm9tcHRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9zcGVlY2gtdG8tdGV4dCNwcm9tcHRpbmcpXG4gICAgICogc2hvdWxkIG1hdGNoIHRoZSBhdWRpbyBsYW5ndWFnZS5cbiAgICAgKi9cbiAgICBwcm9tcHQ/OiBzdHJpbmc7XG4gIH1cblxuICAvKipcbiAgICogQ29uZmlndXJhdGlvbiBmb3IgdHVybiBkZXRlY3Rpb24uIENhbiBiZSBzZXQgdG8gYG51bGxgIHRvIHR1cm4gb2ZmLiBTZXJ2ZXIgVkFEXG4gICAqIG1lYW5zIHRoYXQgdGhlIG1vZGVsIHdpbGwgZGV0ZWN0IHRoZSBzdGFydCBhbmQgZW5kIG9mIHNwZWVjaCBiYXNlZCBvbiBhdWRpb1xuICAgKiB2b2x1bWUgYW5kIHJlc3BvbmQgYXQgdGhlIGVuZCBvZiB1c2VyIHNwZWVjaC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVHVybkRldGVjdGlvbiB7XG4gICAgLyoqXG4gICAgICogQW1vdW50IG9mIGF1ZGlvIHRvIGluY2x1ZGUgYmVmb3JlIHRoZSBWQUQgZGV0ZWN0ZWQgc3BlZWNoIChpbiBtaWxsaXNlY29uZHMpLlxuICAgICAqIERlZmF1bHRzIHRvIDMwMG1zLlxuICAgICAqL1xuICAgIHByZWZpeF9wYWRkaW5nX21zPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogRHVyYXRpb24gb2Ygc2lsZW5jZSB0byBkZXRlY3Qgc3BlZWNoIHN0b3AgKGluIG1pbGxpc2Vjb25kcykuIERlZmF1bHRzIHRvIDUwMG1zLlxuICAgICAqIFdpdGggc2hvcnRlciB2YWx1ZXMgdGhlIG1vZGVsIHdpbGwgcmVzcG9uZCBtb3JlIHF1aWNrbHksIGJ1dCBtYXkganVtcCBpbiBvblxuICAgICAqIHNob3J0IHBhdXNlcyBmcm9tIHRoZSB1c2VyLlxuICAgICAqL1xuICAgIHNpbGVuY2VfZHVyYXRpb25fbXM/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBBY3RpdmF0aW9uIHRocmVzaG9sZCBmb3IgVkFEICgwLjAgdG8gMS4wKSwgdGhpcyBkZWZhdWx0cyB0byAwLjUuIEEgaGlnaGVyXG4gICAgICogdGhyZXNob2xkIHdpbGwgcmVxdWlyZSBsb3VkZXIgYXVkaW8gdG8gYWN0aXZhdGUgdGhlIG1vZGVsLCBhbmQgdGh1cyBtaWdodFxuICAgICAqIHBlcmZvcm0gYmV0dGVyIGluIG5vaXN5IGVudmlyb25tZW50cy5cbiAgICAgKi9cbiAgICB0aHJlc2hvbGQ/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIHR1cm4gZGV0ZWN0aW9uLCBvbmx5IGBzZXJ2ZXJfdmFkYCBpcyBjdXJyZW50bHkgc3VwcG9ydGVkLlxuICAgICAqL1xuICAgIHR5cGU/OiBzdHJpbmc7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBUcmFuc2NyaXB0aW9uU2Vzc2lvbkNyZWF0ZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBnZW5lcmF0ZWQgY2xpZW50IHNlY3JldC5cbiAgICovXG4gIGNsaWVudF9zZWNyZXQ/OiBUcmFuc2NyaXB0aW9uU2Vzc2lvbkNyZWF0ZVBhcmFtcy5DbGllbnRTZWNyZXQ7XG5cbiAgLyoqXG4gICAqIFRoZSBzZXQgb2YgaXRlbXMgdG8gaW5jbHVkZSBpbiB0aGUgdHJhbnNjcmlwdGlvbi4gQ3VycmVudCBhdmFpbGFibGUgaXRlbXMgYXJlOlxuICAgKlxuICAgKiAtIGBpdGVtLmlucHV0X2F1ZGlvX3RyYW5zY3JpcHRpb24ubG9ncHJvYnNgXG4gICAqL1xuICBpbmNsdWRlPzogQXJyYXk8c3RyaW5nPjtcblxuICAvKipcbiAgICogVGhlIGZvcm1hdCBvZiBpbnB1dCBhdWRpby4gT3B0aW9ucyBhcmUgYHBjbTE2YCwgYGc3MTFfdWxhd2AsIG9yIGBnNzExX2FsYXdgLiBGb3JcbiAgICogYHBjbTE2YCwgaW5wdXQgYXVkaW8gbXVzdCBiZSAxNi1iaXQgUENNIGF0IGEgMjRrSHogc2FtcGxlIHJhdGUsIHNpbmdsZSBjaGFubmVsXG4gICAqIChtb25vKSwgYW5kIGxpdHRsZS1lbmRpYW4gYnl0ZSBvcmRlci5cbiAgICovXG4gIGlucHV0X2F1ZGlvX2Zvcm1hdD86ICdwY20xNicgfCAnZzcxMV91bGF3JyB8ICdnNzExX2FsYXcnO1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9uIGZvciBpbnB1dCBhdWRpbyBub2lzZSByZWR1Y3Rpb24uIFRoaXMgY2FuIGJlIHNldCB0byBgbnVsbGAgdG8gdHVyblxuICAgKiBvZmYuIE5vaXNlIHJlZHVjdGlvbiBmaWx0ZXJzIGF1ZGlvIGFkZGVkIHRvIHRoZSBpbnB1dCBhdWRpbyBidWZmZXIgYmVmb3JlIGl0IGlzXG4gICAqIHNlbnQgdG8gVkFEIGFuZCB0aGUgbW9kZWwuIEZpbHRlcmluZyB0aGUgYXVkaW8gY2FuIGltcHJvdmUgVkFEIGFuZCB0dXJuXG4gICAqIGRldGVjdGlvbiBhY2N1cmFjeSAocmVkdWNpbmcgZmFsc2UgcG9zaXRpdmVzKSBhbmQgbW9kZWwgcGVyZm9ybWFuY2UgYnkgaW1wcm92aW5nXG4gICAqIHBlcmNlcHRpb24gb2YgdGhlIGlucHV0IGF1ZGlvLlxuICAgKi9cbiAgaW5wdXRfYXVkaW9fbm9pc2VfcmVkdWN0aW9uPzogVHJhbnNjcmlwdGlvblNlc3Npb25DcmVhdGVQYXJhbXMuSW5wdXRBdWRpb05vaXNlUmVkdWN0aW9uO1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9uIGZvciBpbnB1dCBhdWRpbyB0cmFuc2NyaXB0aW9uLiBUaGUgY2xpZW50IGNhbiBvcHRpb25hbGx5IHNldCB0aGVcbiAgICogbGFuZ3VhZ2UgYW5kIHByb21wdCBmb3IgdHJhbnNjcmlwdGlvbiwgdGhlc2Ugb2ZmZXIgYWRkaXRpb25hbCBndWlkYW5jZSB0byB0aGVcbiAgICogdHJhbnNjcmlwdGlvbiBzZXJ2aWNlLlxuICAgKi9cbiAgaW5wdXRfYXVkaW9fdHJhbnNjcmlwdGlvbj86IFRyYW5zY3JpcHRpb25TZXNzaW9uQ3JlYXRlUGFyYW1zLklucHV0QXVkaW9UcmFuc2NyaXB0aW9uO1xuXG4gIC8qKlxuICAgKiBUaGUgc2V0IG9mIG1vZGFsaXRpZXMgdGhlIG1vZGVsIGNhbiByZXNwb25kIHdpdGguIFRvIGRpc2FibGUgYXVkaW8sIHNldCB0aGlzIHRvXG4gICAqIFtcInRleHRcIl0uXG4gICAqL1xuICBtb2RhbGl0aWVzPzogQXJyYXk8J3RleHQnIHwgJ2F1ZGlvJz47XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gZm9yIHR1cm4gZGV0ZWN0aW9uLCBldGhlciBTZXJ2ZXIgVkFEIG9yIFNlbWFudGljIFZBRC4gVGhpcyBjYW4gYmVcbiAgICogc2V0IHRvIGBudWxsYCB0byB0dXJuIG9mZiwgaW4gd2hpY2ggY2FzZSB0aGUgY2xpZW50IG11c3QgbWFudWFsbHkgdHJpZ2dlciBtb2RlbFxuICAgKiByZXNwb25zZS4gU2VydmVyIFZBRCBtZWFucyB0aGF0IHRoZSBtb2RlbCB3aWxsIGRldGVjdCB0aGUgc3RhcnQgYW5kIGVuZCBvZlxuICAgKiBzcGVlY2ggYmFzZWQgb24gYXVkaW8gdm9sdW1lIGFuZCByZXNwb25kIGF0IHRoZSBlbmQgb2YgdXNlciBzcGVlY2guIFNlbWFudGljIFZBRFxuICAgKiBpcyBtb3JlIGFkdmFuY2VkIGFuZCB1c2VzIGEgdHVybiBkZXRlY3Rpb24gbW9kZWwgKGluIGNvbmp1Y3Rpb24gd2l0aCBWQUQpIHRvXG4gICAqIHNlbWFudGljYWxseSBlc3RpbWF0ZSB3aGV0aGVyIHRoZSB1c2VyIGhhcyBmaW5pc2hlZCBzcGVha2luZywgdGhlbiBkeW5hbWljYWxseVxuICAgKiBzZXRzIGEgdGltZW91dCBiYXNlZCBvbiB0aGlzIHByb2JhYmlsaXR5LiBGb3IgZXhhbXBsZSwgaWYgdXNlciBhdWRpbyB0cmFpbHMgb2ZmXG4gICAqIHdpdGggXCJ1aGhtXCIsIHRoZSBtb2RlbCB3aWxsIHNjb3JlIGEgbG93IHByb2JhYmlsaXR5IG9mIHR1cm4gZW5kIGFuZCB3YWl0IGxvbmdlclxuICAgKiBmb3IgdGhlIHVzZXIgdG8gY29udGludWUgc3BlYWtpbmcuIFRoaXMgY2FuIGJlIHVzZWZ1bCBmb3IgbW9yZSBuYXR1cmFsXG4gICAqIGNvbnZlcnNhdGlvbnMsIGJ1dCBtYXkgaGF2ZSBhIGhpZ2hlciBsYXRlbmN5LlxuICAgKi9cbiAgdHVybl9kZXRlY3Rpb24/OiBUcmFuc2NyaXB0aW9uU2Vzc2lvbkNyZWF0ZVBhcmFtcy5UdXJuRGV0ZWN0aW9uO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFRyYW5zY3JpcHRpb25TZXNzaW9uQ3JlYXRlUGFyYW1zIHtcbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGdlbmVyYXRlZCBjbGllbnQgc2VjcmV0LlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBDbGllbnRTZWNyZXQge1xuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyYXRpb24gZm9yIHRoZSBlcGhlbWVyYWwgdG9rZW4gZXhwaXJhdGlvbi5cbiAgICAgKi9cbiAgICBleHBpcmVzX2F0PzogQ2xpZW50U2VjcmV0LkV4cGlyZXNBdDtcbiAgfVxuXG4gIGV4cG9ydCBuYW1lc3BhY2UgQ2xpZW50U2VjcmV0IHtcbiAgICAvKipcbiAgICAgKiBDb25maWd1cmF0aW9uIGZvciB0aGUgZXBoZW1lcmFsIHRva2VuIGV4cGlyYXRpb24uXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBFeHBpcmVzQXQge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgYW5jaG9yIHBvaW50IGZvciB0aGUgZXBoZW1lcmFsIHRva2VuIGV4cGlyYXRpb24uIE9ubHkgYGNyZWF0ZWRfYXRgIGlzXG4gICAgICAgKiBjdXJyZW50bHkgc3VwcG9ydGVkLlxuICAgICAgICovXG4gICAgICBhbmNob3I/OiAnY3JlYXRlZF9hdCc7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIG51bWJlciBvZiBzZWNvbmRzIGZyb20gdGhlIGFuY2hvciBwb2ludCB0byB0aGUgZXhwaXJhdGlvbi4gU2VsZWN0IGEgdmFsdWVcbiAgICAgICAqIGJldHdlZW4gYDEwYCBhbmQgYDcyMDBgLlxuICAgICAgICovXG4gICAgICBzZWNvbmRzPzogbnVtYmVyO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9uIGZvciBpbnB1dCBhdWRpbyBub2lzZSByZWR1Y3Rpb24uIFRoaXMgY2FuIGJlIHNldCB0byBgbnVsbGAgdG8gdHVyblxuICAgKiBvZmYuIE5vaXNlIHJlZHVjdGlvbiBmaWx0ZXJzIGF1ZGlvIGFkZGVkIHRvIHRoZSBpbnB1dCBhdWRpbyBidWZmZXIgYmVmb3JlIGl0IGlzXG4gICAqIHNlbnQgdG8gVkFEIGFuZCB0aGUgbW9kZWwuIEZpbHRlcmluZyB0aGUgYXVkaW8gY2FuIGltcHJvdmUgVkFEIGFuZCB0dXJuXG4gICAqIGRldGVjdGlvbiBhY2N1cmFjeSAocmVkdWNpbmcgZmFsc2UgcG9zaXRpdmVzKSBhbmQgbW9kZWwgcGVyZm9ybWFuY2UgYnkgaW1wcm92aW5nXG4gICAqIHBlcmNlcHRpb24gb2YgdGhlIGlucHV0IGF1ZGlvLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJbnB1dEF1ZGlvTm9pc2VSZWR1Y3Rpb24ge1xuICAgIC8qKlxuICAgICAqIFR5cGUgb2Ygbm9pc2UgcmVkdWN0aW9uLiBgbmVhcl9maWVsZGAgaXMgZm9yIGNsb3NlLXRhbGtpbmcgbWljcm9waG9uZXMgc3VjaCBhc1xuICAgICAqIGhlYWRwaG9uZXMsIGBmYXJfZmllbGRgIGlzIGZvciBmYXItZmllbGQgbWljcm9waG9uZXMgc3VjaCBhcyBsYXB0b3Agb3JcbiAgICAgKiBjb25mZXJlbmNlIHJvb20gbWljcm9waG9uZXMuXG4gICAgICovXG4gICAgdHlwZT86ICduZWFyX2ZpZWxkJyB8ICdmYXJfZmllbGQnO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gZm9yIGlucHV0IGF1ZGlvIHRyYW5zY3JpcHRpb24uIFRoZSBjbGllbnQgY2FuIG9wdGlvbmFsbHkgc2V0IHRoZVxuICAgKiBsYW5ndWFnZSBhbmQgcHJvbXB0IGZvciB0cmFuc2NyaXB0aW9uLCB0aGVzZSBvZmZlciBhZGRpdGlvbmFsIGd1aWRhbmNlIHRvIHRoZVxuICAgKiB0cmFuc2NyaXB0aW9uIHNlcnZpY2UuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIElucHV0QXVkaW9UcmFuc2NyaXB0aW9uIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbGFuZ3VhZ2Ugb2YgdGhlIGlucHV0IGF1ZGlvLiBTdXBwbHlpbmcgdGhlIGlucHV0IGxhbmd1YWdlIGluXG4gICAgICogW0lTTy02MzktMV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl9JU09fNjM5LTFfY29kZXMpIChlLmcuIGBlbmApXG4gICAgICogZm9ybWF0IHdpbGwgaW1wcm92ZSBhY2N1cmFjeSBhbmQgbGF0ZW5jeS5cbiAgICAgKi9cbiAgICBsYW5ndWFnZT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBtb2RlbCB0byB1c2UgZm9yIHRyYW5zY3JpcHRpb24sIGN1cnJlbnQgb3B0aW9ucyBhcmUgYGdwdC00by10cmFuc2NyaWJlYCxcbiAgICAgKiBgZ3B0LTRvLW1pbmktdHJhbnNjcmliZWAsIGFuZCBgd2hpc3Blci0xYC5cbiAgICAgKi9cbiAgICBtb2RlbD86ICdncHQtNG8tdHJhbnNjcmliZScgfCAnZ3B0LTRvLW1pbmktdHJhbnNjcmliZScgfCAnd2hpc3Blci0xJztcblxuICAgIC8qKlxuICAgICAqIEFuIG9wdGlvbmFsIHRleHQgdG8gZ3VpZGUgdGhlIG1vZGVsJ3Mgc3R5bGUgb3IgY29udGludWUgYSBwcmV2aW91cyBhdWRpb1xuICAgICAqIHNlZ21lbnQuIEZvciBgd2hpc3Blci0xYCwgdGhlXG4gICAgICogW3Byb21wdCBpcyBhIGxpc3Qgb2Yga2V5d29yZHNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9zcGVlY2gtdG8tdGV4dCNwcm9tcHRpbmcpLlxuICAgICAqIEZvciBgZ3B0LTRvLXRyYW5zY3JpYmVgIG1vZGVscywgdGhlIHByb21wdCBpcyBhIGZyZWUgdGV4dCBzdHJpbmcsIGZvciBleGFtcGxlXG4gICAgICogXCJleHBlY3Qgd29yZHMgcmVsYXRlZCB0byB0ZWNobm9sb2d5XCIuXG4gICAgICovXG4gICAgcHJvbXB0Pzogc3RyaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gZm9yIHR1cm4gZGV0ZWN0aW9uLCBldGhlciBTZXJ2ZXIgVkFEIG9yIFNlbWFudGljIFZBRC4gVGhpcyBjYW4gYmVcbiAgICogc2V0IHRvIGBudWxsYCB0byB0dXJuIG9mZiwgaW4gd2hpY2ggY2FzZSB0aGUgY2xpZW50IG11c3QgbWFudWFsbHkgdHJpZ2dlciBtb2RlbFxuICAgKiByZXNwb25zZS4gU2VydmVyIFZBRCBtZWFucyB0aGF0IHRoZSBtb2RlbCB3aWxsIGRldGVjdCB0aGUgc3RhcnQgYW5kIGVuZCBvZlxuICAgKiBzcGVlY2ggYmFzZWQgb24gYXVkaW8gdm9sdW1lIGFuZCByZXNwb25kIGF0IHRoZSBlbmQgb2YgdXNlciBzcGVlY2guIFNlbWFudGljIFZBRFxuICAgKiBpcyBtb3JlIGFkdmFuY2VkIGFuZCB1c2VzIGEgdHVybiBkZXRlY3Rpb24gbW9kZWwgKGluIGNvbmp1Y3Rpb24gd2l0aCBWQUQpIHRvXG4gICAqIHNlbWFudGljYWxseSBlc3RpbWF0ZSB3aGV0aGVyIHRoZSB1c2VyIGhhcyBmaW5pc2hlZCBzcGVha2luZywgdGhlbiBkeW5hbWljYWxseVxuICAgKiBzZXRzIGEgdGltZW91dCBiYXNlZCBvbiB0aGlzIHByb2JhYmlsaXR5LiBGb3IgZXhhbXBsZSwgaWYgdXNlciBhdWRpbyB0cmFpbHMgb2ZmXG4gICAqIHdpdGggXCJ1aGhtXCIsIHRoZSBtb2RlbCB3aWxsIHNjb3JlIGEgbG93IHByb2JhYmlsaXR5IG9mIHR1cm4gZW5kIGFuZCB3YWl0IGxvbmdlclxuICAgKiBmb3IgdGhlIHVzZXIgdG8gY29udGludWUgc3BlYWtpbmcuIFRoaXMgY2FuIGJlIHVzZWZ1bCBmb3IgbW9yZSBuYXR1cmFsXG4gICAqIGNvbnZlcnNhdGlvbnMsIGJ1dCBtYXkgaGF2ZSBhIGhpZ2hlciBsYXRlbmN5LlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUdXJuRGV0ZWN0aW9uIHtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0byBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlIGEgcmVzcG9uc2Ugd2hlbiBhIFZBRCBzdG9wIGV2ZW50XG4gICAgICogb2NjdXJzLiBOb3QgYXZhaWxhYmxlIGZvciB0cmFuc2NyaXB0aW9uIHNlc3Npb25zLlxuICAgICAqL1xuICAgIGNyZWF0ZV9yZXNwb25zZT86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIG9ubHkgZm9yIGBzZW1hbnRpY192YWRgIG1vZGUuIFRoZSBlYWdlcm5lc3Mgb2YgdGhlIG1vZGVsIHRvIHJlc3BvbmQuIGBsb3dgXG4gICAgICogd2lsbCB3YWl0IGxvbmdlciBmb3IgdGhlIHVzZXIgdG8gY29udGludWUgc3BlYWtpbmcsIGBoaWdoYCB3aWxsIHJlc3BvbmQgbW9yZVxuICAgICAqIHF1aWNrbHkuIGBhdXRvYCBpcyB0aGUgZGVmYXVsdCBhbmQgaXMgZXF1aXZhbGVudCB0byBgbWVkaXVtYC5cbiAgICAgKi9cbiAgICBlYWdlcm5lc3M/OiAnbG93JyB8ICdtZWRpdW0nIHwgJ2hpZ2gnIHwgJ2F1dG8nO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgdG8gYXV0b21hdGljYWxseSBpbnRlcnJ1cHQgYW55IG9uZ29pbmcgcmVzcG9uc2Ugd2l0aCBvdXRwdXQgdG9cbiAgICAgKiB0aGUgZGVmYXVsdCBjb252ZXJzYXRpb24gKGkuZS4gYGNvbnZlcnNhdGlvbmAgb2YgYGF1dG9gKSB3aGVuIGEgVkFEIHN0YXJ0IGV2ZW50XG4gICAgICogb2NjdXJzLiBOb3QgYXZhaWxhYmxlIGZvciB0cmFuc2NyaXB0aW9uIHNlc3Npb25zLlxuICAgICAqL1xuICAgIGludGVycnVwdF9yZXNwb25zZT86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIG9ubHkgZm9yIGBzZXJ2ZXJfdmFkYCBtb2RlLiBBbW91bnQgb2YgYXVkaW8gdG8gaW5jbHVkZSBiZWZvcmUgdGhlIFZBRFxuICAgICAqIGRldGVjdGVkIHNwZWVjaCAoaW4gbWlsbGlzZWNvbmRzKS4gRGVmYXVsdHMgdG8gMzAwbXMuXG4gICAgICovXG4gICAgcHJlZml4X3BhZGRpbmdfbXM/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIG9ubHkgZm9yIGBzZXJ2ZXJfdmFkYCBtb2RlLiBEdXJhdGlvbiBvZiBzaWxlbmNlIHRvIGRldGVjdCBzcGVlY2ggc3RvcCAoaW5cbiAgICAgKiBtaWxsaXNlY29uZHMpLiBEZWZhdWx0cyB0byA1MDBtcy4gV2l0aCBzaG9ydGVyIHZhbHVlcyB0aGUgbW9kZWwgd2lsbCByZXNwb25kXG4gICAgICogbW9yZSBxdWlja2x5LCBidXQgbWF5IGp1bXAgaW4gb24gc2hvcnQgcGF1c2VzIGZyb20gdGhlIHVzZXIuXG4gICAgICovXG4gICAgc2lsZW5jZV9kdXJhdGlvbl9tcz86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgb25seSBmb3IgYHNlcnZlcl92YWRgIG1vZGUuIEFjdGl2YXRpb24gdGhyZXNob2xkIGZvciBWQUQgKDAuMCB0byAxLjApLCB0aGlzXG4gICAgICogZGVmYXVsdHMgdG8gMC41LiBBIGhpZ2hlciB0aHJlc2hvbGQgd2lsbCByZXF1aXJlIGxvdWRlciBhdWRpbyB0byBhY3RpdmF0ZSB0aGVcbiAgICAgKiBtb2RlbCwgYW5kIHRodXMgbWlnaHQgcGVyZm9ybSBiZXR0ZXIgaW4gbm9pc3kgZW52aXJvbm1lbnRzLlxuICAgICAqL1xuICAgIHRocmVzaG9sZD86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFR5cGUgb2YgdHVybiBkZXRlY3Rpb24uXG4gICAgICovXG4gICAgdHlwZT86ICdzZXJ2ZXJfdmFkJyB8ICdzZW1hbnRpY192YWQnO1xuICB9XG59XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBUcmFuc2NyaXB0aW9uU2Vzc2lvbnMge1xuICBleHBvcnQge1xuICAgIHR5cGUgVHJhbnNjcmlwdGlvblNlc3Npb24gYXMgVHJhbnNjcmlwdGlvblNlc3Npb24sXG4gICAgdHlwZSBUcmFuc2NyaXB0aW9uU2Vzc2lvbkNyZWF0ZVBhcmFtcyBhcyBUcmFuc2NyaXB0aW9uU2Vzc2lvbkNyZWF0ZVBhcmFtcyxcbiAgfTtcbn1cbiIsICIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJy4uLy4uLy4uL3Jlc291cmNlJztcbmltcG9ydCAqIGFzIFJlYWx0aW1lQVBJIGZyb20gJy4vcmVhbHRpbWUnO1xuaW1wb3J0ICogYXMgU2hhcmVkIGZyb20gJy4uLy4uL3NoYXJlZCc7XG5pbXBvcnQgKiBhcyBTZXNzaW9uc0FQSSBmcm9tICcuL3Nlc3Npb25zJztcbmltcG9ydCB7XG4gIFNlc3Npb24gYXMgU2Vzc2lvbnNBUElTZXNzaW9uLFxuICBTZXNzaW9uQ3JlYXRlUGFyYW1zLFxuICBTZXNzaW9uQ3JlYXRlUmVzcG9uc2UsXG4gIFNlc3Npb25zLFxufSBmcm9tICcuL3Nlc3Npb25zJztcbmltcG9ydCAqIGFzIFRyYW5zY3JpcHRpb25TZXNzaW9uc0FQSSBmcm9tICcuL3RyYW5zY3JpcHRpb24tc2Vzc2lvbnMnO1xuaW1wb3J0IHtcbiAgVHJhbnNjcmlwdGlvblNlc3Npb24sXG4gIFRyYW5zY3JpcHRpb25TZXNzaW9uQ3JlYXRlUGFyYW1zLFxuICBUcmFuc2NyaXB0aW9uU2Vzc2lvbnMsXG59IGZyb20gJy4vdHJhbnNjcmlwdGlvbi1zZXNzaW9ucyc7XG5cbmV4cG9ydCBjbGFzcyBSZWFsdGltZSBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgc2Vzc2lvbnM6IFNlc3Npb25zQVBJLlNlc3Npb25zID0gbmV3IFNlc3Npb25zQVBJLlNlc3Npb25zKHRoaXMuX2NsaWVudCk7XG4gIHRyYW5zY3JpcHRpb25TZXNzaW9uczogVHJhbnNjcmlwdGlvblNlc3Npb25zQVBJLlRyYW5zY3JpcHRpb25TZXNzaW9ucyA9XG4gICAgbmV3IFRyYW5zY3JpcHRpb25TZXNzaW9uc0FQSS5UcmFuc2NyaXB0aW9uU2Vzc2lvbnModGhpcy5fY2xpZW50KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5lZCB3aGVuIGEgY29udmVyc2F0aW9uIGlzIGNyZWF0ZWQuIEVtaXR0ZWQgcmlnaHQgYWZ0ZXIgc2Vzc2lvbiBjcmVhdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb252ZXJzYXRpb25DcmVhdGVkRXZlbnQge1xuICAvKipcbiAgICogVGhlIGNvbnZlcnNhdGlvbiByZXNvdXJjZS5cbiAgICovXG4gIGNvbnZlcnNhdGlvbjogQ29udmVyc2F0aW9uQ3JlYXRlZEV2ZW50LkNvbnZlcnNhdGlvbjtcblxuICAvKipcbiAgICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgc2VydmVyIGV2ZW50LlxuICAgKi9cbiAgZXZlbnRfaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGV2ZW50IHR5cGUsIG11c3QgYmUgYGNvbnZlcnNhdGlvbi5jcmVhdGVkYC5cbiAgICovXG4gIHR5cGU6ICdjb252ZXJzYXRpb24uY3JlYXRlZCc7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ29udmVyc2F0aW9uQ3JlYXRlZEV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBjb252ZXJzYXRpb24gcmVzb3VyY2UuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIENvbnZlcnNhdGlvbiB7XG4gICAgLyoqXG4gICAgICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgY29udmVyc2F0aW9uLlxuICAgICAqL1xuICAgIGlkPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9iamVjdCB0eXBlLCBtdXN0IGJlIGByZWFsdGltZS5jb252ZXJzYXRpb25gLlxuICAgICAqL1xuICAgIG9iamVjdD86ICdyZWFsdGltZS5jb252ZXJzYXRpb24nO1xuICB9XG59XG5cbi8qKlxuICogVGhlIGl0ZW0gdG8gYWRkIHRvIHRoZSBjb252ZXJzYXRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29udmVyc2F0aW9uSXRlbSB7XG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBpdGVtLCB0aGlzIGNhbiBiZSBnZW5lcmF0ZWQgYnkgdGhlIGNsaWVudCB0byBoZWxwIG1hbmFnZVxuICAgKiBzZXJ2ZXItc2lkZSBjb250ZXh0LCBidXQgaXMgbm90IHJlcXVpcmVkIGJlY2F1c2UgdGhlIHNlcnZlciB3aWxsIGdlbmVyYXRlIG9uZSBpZlxuICAgKiBub3QgcHJvdmlkZWQuXG4gICAqL1xuICBpZD86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGFyZ3VtZW50cyBvZiB0aGUgZnVuY3Rpb24gY2FsbCAoZm9yIGBmdW5jdGlvbl9jYWxsYCBpdGVtcykuXG4gICAqL1xuICBhcmd1bWVudHM/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgZnVuY3Rpb24gY2FsbCAoZm9yIGBmdW5jdGlvbl9jYWxsYCBhbmQgYGZ1bmN0aW9uX2NhbGxfb3V0cHV0YFxuICAgKiBpdGVtcykuIElmIHBhc3NlZCBvbiBhIGBmdW5jdGlvbl9jYWxsX291dHB1dGAgaXRlbSwgdGhlIHNlcnZlciB3aWxsIGNoZWNrIHRoYXQgYVxuICAgKiBgZnVuY3Rpb25fY2FsbGAgaXRlbSB3aXRoIHRoZSBzYW1lIElEIGV4aXN0cyBpbiB0aGUgY29udmVyc2F0aW9uIGhpc3RvcnkuXG4gICAqL1xuICBjYWxsX2lkPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgbWVzc2FnZSwgYXBwbGljYWJsZSBmb3IgYG1lc3NhZ2VgIGl0ZW1zLlxuICAgKlxuICAgKiAtIE1lc3NhZ2UgaXRlbXMgb2Ygcm9sZSBgc3lzdGVtYCBzdXBwb3J0IG9ubHkgYGlucHV0X3RleHRgIGNvbnRlbnRcbiAgICogLSBNZXNzYWdlIGl0ZW1zIG9mIHJvbGUgYHVzZXJgIHN1cHBvcnQgYGlucHV0X3RleHRgIGFuZCBgaW5wdXRfYXVkaW9gIGNvbnRlbnRcbiAgICogLSBNZXNzYWdlIGl0ZW1zIG9mIHJvbGUgYGFzc2lzdGFudGAgc3VwcG9ydCBgdGV4dGAgY29udGVudC5cbiAgICovXG4gIGNvbnRlbnQ/OiBBcnJheTxDb252ZXJzYXRpb25JdGVtQ29udGVudD47XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbiBiZWluZyBjYWxsZWQgKGZvciBgZnVuY3Rpb25fY2FsbGAgaXRlbXMpLlxuICAgKi9cbiAgbmFtZT86IHN0cmluZztcblxuICAvKipcbiAgICogSWRlbnRpZmllciBmb3IgdGhlIEFQSSBvYmplY3QgYmVpbmcgcmV0dXJuZWQgLSBhbHdheXMgYHJlYWx0aW1lLml0ZW1gLlxuICAgKi9cbiAgb2JqZWN0PzogJ3JlYWx0aW1lLml0ZW0nO1xuXG4gIC8qKlxuICAgKiBUaGUgb3V0cHV0IG9mIHRoZSBmdW5jdGlvbiBjYWxsIChmb3IgYGZ1bmN0aW9uX2NhbGxfb3V0cHV0YCBpdGVtcykuXG4gICAqL1xuICBvdXRwdXQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSByb2xlIG9mIHRoZSBtZXNzYWdlIHNlbmRlciAoYHVzZXJgLCBgYXNzaXN0YW50YCwgYHN5c3RlbWApLCBvbmx5IGFwcGxpY2FibGVcbiAgICogZm9yIGBtZXNzYWdlYCBpdGVtcy5cbiAgICovXG4gIHJvbGU/OiAndXNlcicgfCAnYXNzaXN0YW50JyB8ICdzeXN0ZW0nO1xuXG4gIC8qKlxuICAgKiBUaGUgc3RhdHVzIG9mIHRoZSBpdGVtIChgY29tcGxldGVkYCwgYGluY29tcGxldGVgKS4gVGhlc2UgaGF2ZSBubyBlZmZlY3Qgb24gdGhlXG4gICAqIGNvbnZlcnNhdGlvbiwgYnV0IGFyZSBhY2NlcHRlZCBmb3IgY29uc2lzdGVuY3kgd2l0aCB0aGVcbiAgICogYGNvbnZlcnNhdGlvbi5pdGVtLmNyZWF0ZWRgIGV2ZW50LlxuICAgKi9cbiAgc3RhdHVzPzogJ2NvbXBsZXRlZCcgfCAnaW5jb21wbGV0ZSc7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBpdGVtIChgbWVzc2FnZWAsIGBmdW5jdGlvbl9jYWxsYCwgYGZ1bmN0aW9uX2NhbGxfb3V0cHV0YCkuXG4gICAqL1xuICB0eXBlPzogJ21lc3NhZ2UnIHwgJ2Z1bmN0aW9uX2NhbGwnIHwgJ2Z1bmN0aW9uX2NhbGxfb3V0cHV0Jztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb252ZXJzYXRpb25JdGVtQ29udGVudCB7XG4gIC8qKlxuICAgKiBJRCBvZiBhIHByZXZpb3VzIGNvbnZlcnNhdGlvbiBpdGVtIHRvIHJlZmVyZW5jZSAoZm9yIGBpdGVtX3JlZmVyZW5jZWAgY29udGVudFxuICAgKiB0eXBlcyBpbiBgcmVzcG9uc2UuY3JlYXRlYCBldmVudHMpLiBUaGVzZSBjYW4gcmVmZXJlbmNlIGJvdGggY2xpZW50IGFuZCBzZXJ2ZXJcbiAgICogY3JlYXRlZCBpdGVtcy5cbiAgICovXG4gIGlkPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBCYXNlNjQtZW5jb2RlZCBhdWRpbyBieXRlcywgdXNlZCBmb3IgYGlucHV0X2F1ZGlvYCBjb250ZW50IHR5cGUuXG4gICAqL1xuICBhdWRpbz86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHRleHQgY29udGVudCwgdXNlZCBmb3IgYGlucHV0X3RleHRgIGFuZCBgdGV4dGAgY29udGVudCB0eXBlcy5cbiAgICovXG4gIHRleHQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB0cmFuc2NyaXB0IG9mIHRoZSBhdWRpbywgdXNlZCBmb3IgYGlucHV0X2F1ZGlvYCBjb250ZW50IHR5cGUuXG4gICAqL1xuICB0cmFuc2NyaXB0Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCB0eXBlIChgaW5wdXRfdGV4dGAsIGBpbnB1dF9hdWRpb2AsIGBpdGVtX3JlZmVyZW5jZWAsIGB0ZXh0YCkuXG4gICAqL1xuICB0eXBlPzogJ2lucHV0X3RleHQnIHwgJ2lucHV0X2F1ZGlvJyB8ICdpdGVtX3JlZmVyZW5jZScgfCAndGV4dCc7XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IEl0ZW0gdG8gdGhlIENvbnZlcnNhdGlvbidzIGNvbnRleHQsIGluY2x1ZGluZyBtZXNzYWdlcywgZnVuY3Rpb25cbiAqIGNhbGxzLCBhbmQgZnVuY3Rpb24gY2FsbCByZXNwb25zZXMuIFRoaXMgZXZlbnQgY2FuIGJlIHVzZWQgYm90aCB0byBwb3B1bGF0ZSBhXG4gKiBcImhpc3RvcnlcIiBvZiB0aGUgY29udmVyc2F0aW9uIGFuZCB0byBhZGQgbmV3IGl0ZW1zIG1pZC1zdHJlYW0sIGJ1dCBoYXMgdGhlXG4gKiBjdXJyZW50IGxpbWl0YXRpb24gdGhhdCBpdCBjYW5ub3QgcG9wdWxhdGUgYXNzaXN0YW50IGF1ZGlvIG1lc3NhZ2VzLlxuICpcbiAqIElmIHN1Y2Nlc3NmdWwsIHRoZSBzZXJ2ZXIgd2lsbCByZXNwb25kIHdpdGggYSBgY29udmVyc2F0aW9uLml0ZW0uY3JlYXRlZGAgZXZlbnQsXG4gKiBvdGhlcndpc2UgYW4gYGVycm9yYCBldmVudCB3aWxsIGJlIHNlbnQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29udmVyc2F0aW9uSXRlbUNyZWF0ZUV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBpdGVtIHRvIGFkZCB0byB0aGUgY29udmVyc2F0aW9uLlxuICAgKi9cbiAgaXRlbTogQ29udmVyc2F0aW9uSXRlbTtcblxuICAvKipcbiAgICogVGhlIGV2ZW50IHR5cGUsIG11c3QgYmUgYGNvbnZlcnNhdGlvbi5pdGVtLmNyZWF0ZWAuXG4gICAqL1xuICB0eXBlOiAnY29udmVyc2F0aW9uLml0ZW0uY3JlYXRlJztcblxuICAvKipcbiAgICogT3B0aW9uYWwgY2xpZW50LWdlbmVyYXRlZCBJRCB1c2VkIHRvIGlkZW50aWZ5IHRoaXMgZXZlbnQuXG4gICAqL1xuICBldmVudF9pZD86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBwcmVjZWRpbmcgaXRlbSBhZnRlciB3aGljaCB0aGUgbmV3IGl0ZW0gd2lsbCBiZSBpbnNlcnRlZC4gSWYgbm90XG4gICAqIHNldCwgdGhlIG5ldyBpdGVtIHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhlIGVuZCBvZiB0aGUgY29udmVyc2F0aW9uLiBJZiBzZXQgdG9cbiAgICogYHJvb3RgLCB0aGUgbmV3IGl0ZW0gd2lsbCBiZSBhZGRlZCB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBjb252ZXJzYXRpb24uIElmIHNldFxuICAgKiB0byBhbiBleGlzdGluZyBJRCwgaXQgYWxsb3dzIGFuIGl0ZW0gdG8gYmUgaW5zZXJ0ZWQgbWlkLWNvbnZlcnNhdGlvbi4gSWYgdGhlIElEXG4gICAqIGNhbm5vdCBiZSBmb3VuZCwgYW4gZXJyb3Igd2lsbCBiZSByZXR1cm5lZCBhbmQgdGhlIGl0ZW0gd2lsbCBub3QgYmUgYWRkZWQuXG4gICAqL1xuICBwcmV2aW91c19pdGVtX2lkPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIFJldHVybmVkIHdoZW4gYSBjb252ZXJzYXRpb24gaXRlbSBpcyBjcmVhdGVkLiBUaGVyZSBhcmUgc2V2ZXJhbCBzY2VuYXJpb3MgdGhhdFxuICogcHJvZHVjZSB0aGlzIGV2ZW50OlxuICpcbiAqIC0gVGhlIHNlcnZlciBpcyBnZW5lcmF0aW5nIGEgUmVzcG9uc2UsIHdoaWNoIGlmIHN1Y2Nlc3NmdWwgd2lsbCBwcm9kdWNlIGVpdGhlclxuICogICBvbmUgb3IgdHdvIEl0ZW1zLCB3aGljaCB3aWxsIGJlIG9mIHR5cGUgYG1lc3NhZ2VgIChyb2xlIGBhc3Npc3RhbnRgKSBvciB0eXBlXG4gKiAgIGBmdW5jdGlvbl9jYWxsYC5cbiAqIC0gVGhlIGlucHV0IGF1ZGlvIGJ1ZmZlciBoYXMgYmVlbiBjb21taXR0ZWQsIGVpdGhlciBieSB0aGUgY2xpZW50IG9yIHRoZSBzZXJ2ZXJcbiAqICAgKGluIGBzZXJ2ZXJfdmFkYCBtb2RlKS4gVGhlIHNlcnZlciB3aWxsIHRha2UgdGhlIGNvbnRlbnQgb2YgdGhlIGlucHV0IGF1ZGlvXG4gKiAgIGJ1ZmZlciBhbmQgYWRkIGl0IHRvIGEgbmV3IHVzZXIgbWVzc2FnZSBJdGVtLlxuICogLSBUaGUgY2xpZW50IGhhcyBzZW50IGEgYGNvbnZlcnNhdGlvbi5pdGVtLmNyZWF0ZWAgZXZlbnQgdG8gYWRkIGEgbmV3IEl0ZW0gdG9cbiAqICAgdGhlIENvbnZlcnNhdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb252ZXJzYXRpb25JdGVtQ3JlYXRlZEV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHNlcnZlciBldmVudC5cbiAgICovXG4gIGV2ZW50X2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBpdGVtIHRvIGFkZCB0byB0aGUgY29udmVyc2F0aW9uLlxuICAgKi9cbiAgaXRlbTogQ29udmVyc2F0aW9uSXRlbTtcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBwcmVjZWRpbmcgaXRlbSBpbiB0aGUgQ29udmVyc2F0aW9uIGNvbnRleHQsIGFsbG93cyB0aGUgY2xpZW50IHRvXG4gICAqIHVuZGVyc3RhbmQgdGhlIG9yZGVyIG9mIHRoZSBjb252ZXJzYXRpb24uXG4gICAqL1xuICBwcmV2aW91c19pdGVtX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBldmVudCB0eXBlLCBtdXN0IGJlIGBjb252ZXJzYXRpb24uaXRlbS5jcmVhdGVkYC5cbiAgICovXG4gIHR5cGU6ICdjb252ZXJzYXRpb24uaXRlbS5jcmVhdGVkJztcbn1cblxuLyoqXG4gKiBTZW5kIHRoaXMgZXZlbnQgd2hlbiB5b3Ugd2FudCB0byByZW1vdmUgYW55IGl0ZW0gZnJvbSB0aGUgY29udmVyc2F0aW9uIGhpc3RvcnkuXG4gKiBUaGUgc2VydmVyIHdpbGwgcmVzcG9uZCB3aXRoIGEgYGNvbnZlcnNhdGlvbi5pdGVtLmRlbGV0ZWRgIGV2ZW50LCB1bmxlc3MgdGhlXG4gKiBpdGVtIGRvZXMgbm90IGV4aXN0IGluIHRoZSBjb252ZXJzYXRpb24gaGlzdG9yeSwgaW4gd2hpY2ggY2FzZSB0aGUgc2VydmVyIHdpbGxcbiAqIHJlc3BvbmQgd2l0aCBhbiBlcnJvci5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb252ZXJzYXRpb25JdGVtRGVsZXRlRXZlbnQge1xuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBpdGVtIHRvIGRlbGV0ZS5cbiAgICovXG4gIGl0ZW1faWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGV2ZW50IHR5cGUsIG11c3QgYmUgYGNvbnZlcnNhdGlvbi5pdGVtLmRlbGV0ZWAuXG4gICAqL1xuICB0eXBlOiAnY29udmVyc2F0aW9uLml0ZW0uZGVsZXRlJztcblxuICAvKipcbiAgICogT3B0aW9uYWwgY2xpZW50LWdlbmVyYXRlZCBJRCB1c2VkIHRvIGlkZW50aWZ5IHRoaXMgZXZlbnQuXG4gICAqL1xuICBldmVudF9pZD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBSZXR1cm5lZCB3aGVuIGFuIGl0ZW0gaW4gdGhlIGNvbnZlcnNhdGlvbiBpcyBkZWxldGVkIGJ5IHRoZSBjbGllbnQgd2l0aCBhXG4gKiBgY29udmVyc2F0aW9uLml0ZW0uZGVsZXRlYCBldmVudC4gVGhpcyBldmVudCBpcyB1c2VkIHRvIHN5bmNocm9uaXplIHRoZSBzZXJ2ZXInc1xuICogdW5kZXJzdGFuZGluZyBvZiB0aGUgY29udmVyc2F0aW9uIGhpc3Rvcnkgd2l0aCB0aGUgY2xpZW50J3Mgdmlldy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb252ZXJzYXRpb25JdGVtRGVsZXRlZEV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHNlcnZlciBldmVudC5cbiAgICovXG4gIGV2ZW50X2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgaXRlbSB0aGF0IHdhcyBkZWxldGVkLlxuICAgKi9cbiAgaXRlbV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZXZlbnQgdHlwZSwgbXVzdCBiZSBgY29udmVyc2F0aW9uLml0ZW0uZGVsZXRlZGAuXG4gICAqL1xuICB0eXBlOiAnY29udmVyc2F0aW9uLml0ZW0uZGVsZXRlZCc7XG59XG5cbi8qKlxuICogVGhpcyBldmVudCBpcyB0aGUgb3V0cHV0IG9mIGF1ZGlvIHRyYW5zY3JpcHRpb24gZm9yIHVzZXIgYXVkaW8gd3JpdHRlbiB0byB0aGVcbiAqIHVzZXIgYXVkaW8gYnVmZmVyLiBUcmFuc2NyaXB0aW9uIGJlZ2lucyB3aGVuIHRoZSBpbnB1dCBhdWRpbyBidWZmZXIgaXMgY29tbWl0dGVkXG4gKiBieSB0aGUgY2xpZW50IG9yIHNlcnZlciAoaW4gYHNlcnZlcl92YWRgIG1vZGUpLiBUcmFuc2NyaXB0aW9uIHJ1bnNcbiAqIGFzeW5jaHJvbm91c2x5IHdpdGggUmVzcG9uc2UgY3JlYXRpb24sIHNvIHRoaXMgZXZlbnQgbWF5IGNvbWUgYmVmb3JlIG9yIGFmdGVyXG4gKiB0aGUgUmVzcG9uc2UgZXZlbnRzLlxuICpcbiAqIFJlYWx0aW1lIEFQSSBtb2RlbHMgYWNjZXB0IGF1ZGlvIG5hdGl2ZWx5LCBhbmQgdGh1cyBpbnB1dCB0cmFuc2NyaXB0aW9uIGlzIGFcbiAqIHNlcGFyYXRlIHByb2Nlc3MgcnVuIG9uIGEgc2VwYXJhdGUgQVNSIChBdXRvbWF0aWMgU3BlZWNoIFJlY29nbml0aW9uKSBtb2RlbCxcbiAqIGN1cnJlbnRseSBhbHdheXMgYHdoaXNwZXItMWAuIFRodXMgdGhlIHRyYW5zY3JpcHQgbWF5IGRpdmVyZ2Ugc29tZXdoYXQgZnJvbSB0aGVcbiAqIG1vZGVsJ3MgaW50ZXJwcmV0YXRpb24sIGFuZCBzaG91bGQgYmUgdHJlYXRlZCBhcyBhIHJvdWdoIGd1aWRlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbnZlcnNhdGlvbkl0ZW1JbnB1dEF1ZGlvVHJhbnNjcmlwdGlvbkNvbXBsZXRlZEV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgY29udGVudCBwYXJ0IGNvbnRhaW5pbmcgdGhlIGF1ZGlvLlxuICAgKi9cbiAgY29udGVudF9pbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBzZXJ2ZXIgZXZlbnQuXG4gICAqL1xuICBldmVudF9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIHVzZXIgbWVzc2FnZSBpdGVtIGNvbnRhaW5pbmcgdGhlIGF1ZGlvLlxuICAgKi9cbiAgaXRlbV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdHJhbnNjcmliZWQgdGV4dC5cbiAgICovXG4gIHRyYW5zY3JpcHQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGV2ZW50IHR5cGUsIG11c3QgYmUgYGNvbnZlcnNhdGlvbi5pdGVtLmlucHV0X2F1ZGlvX3RyYW5zY3JpcHRpb24uY29tcGxldGVkYC5cbiAgICovXG4gIHR5cGU6ICdjb252ZXJzYXRpb24uaXRlbS5pbnB1dF9hdWRpb190cmFuc2NyaXB0aW9uLmNvbXBsZXRlZCc7XG5cbiAgLyoqXG4gICAqIFRoZSBsb2cgcHJvYmFiaWxpdGllcyBvZiB0aGUgdHJhbnNjcmlwdGlvbi5cbiAgICovXG4gIGxvZ3Byb2JzPzogQXJyYXk8Q29udmVyc2F0aW9uSXRlbUlucHV0QXVkaW9UcmFuc2NyaXB0aW9uQ29tcGxldGVkRXZlbnQuTG9ncHJvYj4gfCBudWxsO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIENvbnZlcnNhdGlvbkl0ZW1JbnB1dEF1ZGlvVHJhbnNjcmlwdGlvbkNvbXBsZXRlZEV2ZW50IHtcbiAgLyoqXG4gICAqIEEgbG9nIHByb2JhYmlsaXR5IG9iamVjdC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgTG9ncHJvYiB7XG4gICAgLyoqXG4gICAgICogVGhlIHRva2VuIHRoYXQgd2FzIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGxvZyBwcm9iYWJpbGl0eS5cbiAgICAgKi9cbiAgICB0b2tlbjogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJ5dGVzIHRoYXQgd2VyZSB1c2VkIHRvIGdlbmVyYXRlIHRoZSBsb2cgcHJvYmFiaWxpdHkuXG4gICAgICovXG4gICAgYnl0ZXM6IEFycmF5PG51bWJlcj47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbG9nIHByb2JhYmlsaXR5IG9mIHRoZSB0b2tlbi5cbiAgICAgKi9cbiAgICBsb2dwcm9iOiBudW1iZXI7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5lZCB3aGVuIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGlucHV0IGF1ZGlvIHRyYW5zY3JpcHRpb24gY29udGVudCBwYXJ0IGlzXG4gKiB1cGRhdGVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbnZlcnNhdGlvbkl0ZW1JbnB1dEF1ZGlvVHJhbnNjcmlwdGlvbkRlbHRhRXZlbnQge1xuICAvKipcbiAgICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgc2VydmVyIGV2ZW50LlxuICAgKi9cbiAgZXZlbnRfaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBpdGVtLlxuICAgKi9cbiAgaXRlbV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZXZlbnQgdHlwZSwgbXVzdCBiZSBgY29udmVyc2F0aW9uLml0ZW0uaW5wdXRfYXVkaW9fdHJhbnNjcmlwdGlvbi5kZWx0YWAuXG4gICAqL1xuICB0eXBlOiAnY29udmVyc2F0aW9uLml0ZW0uaW5wdXRfYXVkaW9fdHJhbnNjcmlwdGlvbi5kZWx0YSc7XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgY29udGVudCBwYXJ0IGluIHRoZSBpdGVtJ3MgY29udGVudCBhcnJheS5cbiAgICovXG4gIGNvbnRlbnRfaW5kZXg/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0ZXh0IGRlbHRhLlxuICAgKi9cbiAgZGVsdGE/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBsb2cgcHJvYmFiaWxpdGllcyBvZiB0aGUgdHJhbnNjcmlwdGlvbi5cbiAgICovXG4gIGxvZ3Byb2JzPzogQXJyYXk8Q29udmVyc2F0aW9uSXRlbUlucHV0QXVkaW9UcmFuc2NyaXB0aW9uRGVsdGFFdmVudC5Mb2dwcm9iPiB8IG51bGw7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ29udmVyc2F0aW9uSXRlbUlucHV0QXVkaW9UcmFuc2NyaXB0aW9uRGVsdGFFdmVudCB7XG4gIC8qKlxuICAgKiBBIGxvZyBwcm9iYWJpbGl0eSBvYmplY3QuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIExvZ3Byb2Ige1xuICAgIC8qKlxuICAgICAqIFRoZSB0b2tlbiB0aGF0IHdhcyB1c2VkIHRvIGdlbmVyYXRlIHRoZSBsb2cgcHJvYmFiaWxpdHkuXG4gICAgICovXG4gICAgdG9rZW46IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBieXRlcyB0aGF0IHdlcmUgdXNlZCB0byBnZW5lcmF0ZSB0aGUgbG9nIHByb2JhYmlsaXR5LlxuICAgICAqL1xuICAgIGJ5dGVzOiBBcnJheTxudW1iZXI+O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGxvZyBwcm9iYWJpbGl0eSBvZiB0aGUgdG9rZW4uXG4gICAgICovXG4gICAgbG9ncHJvYjogbnVtYmVyO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJuZWQgd2hlbiBpbnB1dCBhdWRpbyB0cmFuc2NyaXB0aW9uIGlzIGNvbmZpZ3VyZWQsIGFuZCBhIHRyYW5zY3JpcHRpb25cbiAqIHJlcXVlc3QgZm9yIGEgdXNlciBtZXNzYWdlIGZhaWxlZC4gVGhlc2UgZXZlbnRzIGFyZSBzZXBhcmF0ZSBmcm9tIG90aGVyIGBlcnJvcmBcbiAqIGV2ZW50cyBzbyB0aGF0IHRoZSBjbGllbnQgY2FuIGlkZW50aWZ5IHRoZSByZWxhdGVkIEl0ZW0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29udmVyc2F0aW9uSXRlbUlucHV0QXVkaW9UcmFuc2NyaXB0aW9uRmFpbGVkRXZlbnQge1xuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBjb250ZW50IHBhcnQgY29udGFpbmluZyB0aGUgYXVkaW8uXG4gICAqL1xuICBjb250ZW50X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIERldGFpbHMgb2YgdGhlIHRyYW5zY3JpcHRpb24gZXJyb3IuXG4gICAqL1xuICBlcnJvcjogQ29udmVyc2F0aW9uSXRlbUlucHV0QXVkaW9UcmFuc2NyaXB0aW9uRmFpbGVkRXZlbnQuRXJyb3I7XG5cbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHNlcnZlciBldmVudC5cbiAgICovXG4gIGV2ZW50X2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgdXNlciBtZXNzYWdlIGl0ZW0uXG4gICAqL1xuICBpdGVtX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBldmVudCB0eXBlLCBtdXN0IGJlIGBjb252ZXJzYXRpb24uaXRlbS5pbnB1dF9hdWRpb190cmFuc2NyaXB0aW9uLmZhaWxlZGAuXG4gICAqL1xuICB0eXBlOiAnY29udmVyc2F0aW9uLml0ZW0uaW5wdXRfYXVkaW9fdHJhbnNjcmlwdGlvbi5mYWlsZWQnO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIENvbnZlcnNhdGlvbkl0ZW1JbnB1dEF1ZGlvVHJhbnNjcmlwdGlvbkZhaWxlZEV2ZW50IHtcbiAgLyoqXG4gICAqIERldGFpbHMgb2YgdGhlIHRyYW5zY3JpcHRpb24gZXJyb3IuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIEVycm9yIHtcbiAgICAvKipcbiAgICAgKiBFcnJvciBjb2RlLCBpZiBhbnkuXG4gICAgICovXG4gICAgY29kZT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEEgaHVtYW4tcmVhZGFibGUgZXJyb3IgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBtZXNzYWdlPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogUGFyYW1ldGVyIHJlbGF0ZWQgdG8gdGhlIGVycm9yLCBpZiBhbnkuXG4gICAgICovXG4gICAgcGFyYW0/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiBlcnJvci5cbiAgICAgKi9cbiAgICB0eXBlPzogc3RyaW5nO1xuICB9XG59XG5cbi8qKlxuICogU2VuZCB0aGlzIGV2ZW50IHdoZW4geW91IHdhbnQgdG8gcmV0cmlldmUgdGhlIHNlcnZlcidzIHJlcHJlc2VudGF0aW9uIG9mIGFcbiAqIHNwZWNpZmljIGl0ZW0gaW4gdGhlIGNvbnZlcnNhdGlvbiBoaXN0b3J5LiBUaGlzIGlzIHVzZWZ1bCwgZm9yIGV4YW1wbGUsIHRvXG4gKiBpbnNwZWN0IHVzZXIgYXVkaW8gYWZ0ZXIgbm9pc2UgY2FuY2VsbGF0aW9uIGFuZCBWQUQuIFRoZSBzZXJ2ZXIgd2lsbCByZXNwb25kXG4gKiB3aXRoIGEgYGNvbnZlcnNhdGlvbi5pdGVtLnJldHJpZXZlZGAgZXZlbnQsIHVubGVzcyB0aGUgaXRlbSBkb2VzIG5vdCBleGlzdCBpblxuICogdGhlIGNvbnZlcnNhdGlvbiBoaXN0b3J5LCBpbiB3aGljaCBjYXNlIHRoZSBzZXJ2ZXIgd2lsbCByZXNwb25kIHdpdGggYW4gZXJyb3IuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29udmVyc2F0aW9uSXRlbVJldHJpZXZlRXZlbnQge1xuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBpdGVtIHRvIHJldHJpZXZlLlxuICAgKi9cbiAgaXRlbV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZXZlbnQgdHlwZSwgbXVzdCBiZSBgY29udmVyc2F0aW9uLml0ZW0ucmV0cmlldmVgLlxuICAgKi9cbiAgdHlwZTogJ2NvbnZlcnNhdGlvbi5pdGVtLnJldHJpZXZlJztcblxuICAvKipcbiAgICogT3B0aW9uYWwgY2xpZW50LWdlbmVyYXRlZCBJRCB1c2VkIHRvIGlkZW50aWZ5IHRoaXMgZXZlbnQuXG4gICAqL1xuICBldmVudF9pZD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBTZW5kIHRoaXMgZXZlbnQgdG8gdHJ1bmNhdGUgYSBwcmV2aW91cyBhc3Npc3RhbnQgbWVzc2FnZVx1MjAxOXMgYXVkaW8uIFRoZSBzZXJ2ZXJcbiAqIHdpbGwgcHJvZHVjZSBhdWRpbyBmYXN0ZXIgdGhhbiByZWFsdGltZSwgc28gdGhpcyBldmVudCBpcyB1c2VmdWwgd2hlbiB0aGUgdXNlclxuICogaW50ZXJydXB0cyB0byB0cnVuY2F0ZSBhdWRpbyB0aGF0IGhhcyBhbHJlYWR5IGJlZW4gc2VudCB0byB0aGUgY2xpZW50IGJ1dCBub3RcbiAqIHlldCBwbGF5ZWQuIFRoaXMgd2lsbCBzeW5jaHJvbml6ZSB0aGUgc2VydmVyJ3MgdW5kZXJzdGFuZGluZyBvZiB0aGUgYXVkaW8gd2l0aFxuICogdGhlIGNsaWVudCdzIHBsYXliYWNrLlxuICpcbiAqIFRydW5jYXRpbmcgYXVkaW8gd2lsbCBkZWxldGUgdGhlIHNlcnZlci1zaWRlIHRleHQgdHJhbnNjcmlwdCB0byBlbnN1cmUgdGhlcmUgaXNcbiAqIG5vdCB0ZXh0IGluIHRoZSBjb250ZXh0IHRoYXQgaGFzbid0IGJlZW4gaGVhcmQgYnkgdGhlIHVzZXIuXG4gKlxuICogSWYgc3VjY2Vzc2Z1bCwgdGhlIHNlcnZlciB3aWxsIHJlc3BvbmQgd2l0aCBhIGBjb252ZXJzYXRpb24uaXRlbS50cnVuY2F0ZWRgXG4gKiBldmVudC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb252ZXJzYXRpb25JdGVtVHJ1bmNhdGVFdmVudCB7XG4gIC8qKlxuICAgKiBJbmNsdXNpdmUgZHVyYXRpb24gdXAgdG8gd2hpY2ggYXVkaW8gaXMgdHJ1bmNhdGVkLCBpbiBtaWxsaXNlY29uZHMuIElmIHRoZVxuICAgKiBhdWRpb19lbmRfbXMgaXMgZ3JlYXRlciB0aGFuIHRoZSBhY3R1YWwgYXVkaW8gZHVyYXRpb24sIHRoZSBzZXJ2ZXIgd2lsbCByZXNwb25kXG4gICAqIHdpdGggYW4gZXJyb3IuXG4gICAqL1xuICBhdWRpb19lbmRfbXM6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBjb250ZW50IHBhcnQgdG8gdHJ1bmNhdGUuIFNldCB0aGlzIHRvIDAuXG4gICAqL1xuICBjb250ZW50X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgYXNzaXN0YW50IG1lc3NhZ2UgaXRlbSB0byB0cnVuY2F0ZS4gT25seSBhc3Npc3RhbnQgbWVzc2FnZSBpdGVtc1xuICAgKiBjYW4gYmUgdHJ1bmNhdGVkLlxuICAgKi9cbiAgaXRlbV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZXZlbnQgdHlwZSwgbXVzdCBiZSBgY29udmVyc2F0aW9uLml0ZW0udHJ1bmNhdGVgLlxuICAgKi9cbiAgdHlwZTogJ2NvbnZlcnNhdGlvbi5pdGVtLnRydW5jYXRlJztcblxuICAvKipcbiAgICogT3B0aW9uYWwgY2xpZW50LWdlbmVyYXRlZCBJRCB1c2VkIHRvIGlkZW50aWZ5IHRoaXMgZXZlbnQuXG4gICAqL1xuICBldmVudF9pZD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBSZXR1cm5lZCB3aGVuIGFuIGVhcmxpZXIgYXNzaXN0YW50IGF1ZGlvIG1lc3NhZ2UgaXRlbSBpcyB0cnVuY2F0ZWQgYnkgdGhlIGNsaWVudFxuICogd2l0aCBhIGBjb252ZXJzYXRpb24uaXRlbS50cnVuY2F0ZWAgZXZlbnQuIFRoaXMgZXZlbnQgaXMgdXNlZCB0byBzeW5jaHJvbml6ZSB0aGVcbiAqIHNlcnZlcidzIHVuZGVyc3RhbmRpbmcgb2YgdGhlIGF1ZGlvIHdpdGggdGhlIGNsaWVudCdzIHBsYXliYWNrLlxuICpcbiAqIFRoaXMgYWN0aW9uIHdpbGwgdHJ1bmNhdGUgdGhlIGF1ZGlvIGFuZCByZW1vdmUgdGhlIHNlcnZlci1zaWRlIHRleHQgdHJhbnNjcmlwdFxuICogdG8gZW5zdXJlIHRoZXJlIGlzIG5vIHRleHQgaW4gdGhlIGNvbnRleHQgdGhhdCBoYXNuJ3QgYmVlbiBoZWFyZCBieSB0aGUgdXNlci5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb252ZXJzYXRpb25JdGVtVHJ1bmNhdGVkRXZlbnQge1xuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIHVwIHRvIHdoaWNoIHRoZSBhdWRpbyB3YXMgdHJ1bmNhdGVkLCBpbiBtaWxsaXNlY29uZHMuXG4gICAqL1xuICBhdWRpb19lbmRfbXM6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBjb250ZW50IHBhcnQgdGhhdCB3YXMgdHJ1bmNhdGVkLlxuICAgKi9cbiAgY29udGVudF9pbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBzZXJ2ZXIgZXZlbnQuXG4gICAqL1xuICBldmVudF9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIGFzc2lzdGFudCBtZXNzYWdlIGl0ZW0gdGhhdCB3YXMgdHJ1bmNhdGVkLlxuICAgKi9cbiAgaXRlbV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZXZlbnQgdHlwZSwgbXVzdCBiZSBgY29udmVyc2F0aW9uLml0ZW0udHJ1bmNhdGVkYC5cbiAgICovXG4gIHR5cGU6ICdjb252ZXJzYXRpb24uaXRlbS50cnVuY2F0ZWQnO1xufVxuXG4vKipcbiAqIFRoZSBpdGVtIHRvIGFkZCB0byB0aGUgY29udmVyc2F0aW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbnZlcnNhdGlvbkl0ZW1XaXRoUmVmZXJlbmNlIHtcbiAgLyoqXG4gICAqIEZvciBhbiBpdGVtIG9mIHR5cGUgKGBtZXNzYWdlYCB8IGBmdW5jdGlvbl9jYWxsYCB8IGBmdW5jdGlvbl9jYWxsX291dHB1dGApIHRoaXNcbiAgICogZmllbGQgYWxsb3dzIHRoZSBjbGllbnQgdG8gYXNzaWduIHRoZSB1bmlxdWUgSUQgb2YgdGhlIGl0ZW0uIEl0IGlzIG5vdCByZXF1aXJlZFxuICAgKiBiZWNhdXNlIHRoZSBzZXJ2ZXIgd2lsbCBnZW5lcmF0ZSBvbmUgaWYgbm90IHByb3ZpZGVkLlxuICAgKlxuICAgKiBGb3IgYW4gaXRlbSBvZiB0eXBlIGBpdGVtX3JlZmVyZW5jZWAsIHRoaXMgZmllbGQgaXMgcmVxdWlyZWQgYW5kIGlzIGEgcmVmZXJlbmNlXG4gICAqIHRvIGFueSBpdGVtIHRoYXQgaGFzIHByZXZpb3VzbHkgZXhpc3RlZCBpbiB0aGUgY29udmVyc2F0aW9uLlxuICAgKi9cbiAgaWQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBhcmd1bWVudHMgb2YgdGhlIGZ1bmN0aW9uIGNhbGwgKGZvciBgZnVuY3Rpb25fY2FsbGAgaXRlbXMpLlxuICAgKi9cbiAgYXJndW1lbnRzPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIGZ1bmN0aW9uIGNhbGwgKGZvciBgZnVuY3Rpb25fY2FsbGAgYW5kIGBmdW5jdGlvbl9jYWxsX291dHB1dGBcbiAgICogaXRlbXMpLiBJZiBwYXNzZWQgb24gYSBgZnVuY3Rpb25fY2FsbF9vdXRwdXRgIGl0ZW0sIHRoZSBzZXJ2ZXIgd2lsbCBjaGVjayB0aGF0IGFcbiAgICogYGZ1bmN0aW9uX2NhbGxgIGl0ZW0gd2l0aCB0aGUgc2FtZSBJRCBleGlzdHMgaW4gdGhlIGNvbnZlcnNhdGlvbiBoaXN0b3J5LlxuICAgKi9cbiAgY2FsbF9pZD86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIG1lc3NhZ2UsIGFwcGxpY2FibGUgZm9yIGBtZXNzYWdlYCBpdGVtcy5cbiAgICpcbiAgICogLSBNZXNzYWdlIGl0ZW1zIG9mIHJvbGUgYHN5c3RlbWAgc3VwcG9ydCBvbmx5IGBpbnB1dF90ZXh0YCBjb250ZW50XG4gICAqIC0gTWVzc2FnZSBpdGVtcyBvZiByb2xlIGB1c2VyYCBzdXBwb3J0IGBpbnB1dF90ZXh0YCBhbmQgYGlucHV0X2F1ZGlvYCBjb250ZW50XG4gICAqIC0gTWVzc2FnZSBpdGVtcyBvZiByb2xlIGBhc3Npc3RhbnRgIHN1cHBvcnQgYHRleHRgIGNvbnRlbnQuXG4gICAqL1xuICBjb250ZW50PzogQXJyYXk8Q29udmVyc2F0aW9uSXRlbUNvbnRlbnQ+O1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24gYmVpbmcgY2FsbGVkIChmb3IgYGZ1bmN0aW9uX2NhbGxgIGl0ZW1zKS5cbiAgICovXG4gIG5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIElkZW50aWZpZXIgZm9yIHRoZSBBUEkgb2JqZWN0IGJlaW5nIHJldHVybmVkIC0gYWx3YXlzIGByZWFsdGltZS5pdGVtYC5cbiAgICovXG4gIG9iamVjdD86ICdyZWFsdGltZS5pdGVtJztcblxuICAvKipcbiAgICogVGhlIG91dHB1dCBvZiB0aGUgZnVuY3Rpb24gY2FsbCAoZm9yIGBmdW5jdGlvbl9jYWxsX291dHB1dGAgaXRlbXMpLlxuICAgKi9cbiAgb3V0cHV0Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgcm9sZSBvZiB0aGUgbWVzc2FnZSBzZW5kZXIgKGB1c2VyYCwgYGFzc2lzdGFudGAsIGBzeXN0ZW1gKSwgb25seSBhcHBsaWNhYmxlXG4gICAqIGZvciBgbWVzc2FnZWAgaXRlbXMuXG4gICAqL1xuICByb2xlPzogJ3VzZXInIHwgJ2Fzc2lzdGFudCcgfCAnc3lzdGVtJztcblxuICAvKipcbiAgICogVGhlIHN0YXR1cyBvZiB0aGUgaXRlbSAoYGNvbXBsZXRlZGAsIGBpbmNvbXBsZXRlYCkuIFRoZXNlIGhhdmUgbm8gZWZmZWN0IG9uIHRoZVxuICAgKiBjb252ZXJzYXRpb24sIGJ1dCBhcmUgYWNjZXB0ZWQgZm9yIGNvbnNpc3RlbmN5IHdpdGggdGhlXG4gICAqIGBjb252ZXJzYXRpb24uaXRlbS5jcmVhdGVkYCBldmVudC5cbiAgICovXG4gIHN0YXR1cz86ICdjb21wbGV0ZWQnIHwgJ2luY29tcGxldGUnO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgaXRlbSAoYG1lc3NhZ2VgLCBgZnVuY3Rpb25fY2FsbGAsIGBmdW5jdGlvbl9jYWxsX291dHB1dGAsXG4gICAqIGBpdGVtX3JlZmVyZW5jZWApLlxuICAgKi9cbiAgdHlwZT86ICdtZXNzYWdlJyB8ICdmdW5jdGlvbl9jYWxsJyB8ICdmdW5jdGlvbl9jYWxsX291dHB1dCcgfCAnaXRlbV9yZWZlcmVuY2UnO1xufVxuXG4vKipcbiAqIFJldHVybmVkIHdoZW4gYW4gZXJyb3Igb2NjdXJzLCB3aGljaCBjb3VsZCBiZSBhIGNsaWVudCBwcm9ibGVtIG9yIGEgc2VydmVyXG4gKiBwcm9ibGVtLiBNb3N0IGVycm9ycyBhcmUgcmVjb3ZlcmFibGUgYW5kIHRoZSBzZXNzaW9uIHdpbGwgc3RheSBvcGVuLCB3ZVxuICogcmVjb21tZW5kIHRvIGltcGxlbWVudG9ycyB0byBtb25pdG9yIGFuZCBsb2cgZXJyb3IgbWVzc2FnZXMgYnkgZGVmYXVsdC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFcnJvckV2ZW50IHtcbiAgLyoqXG4gICAqIERldGFpbHMgb2YgdGhlIGVycm9yLlxuICAgKi9cbiAgZXJyb3I6IEVycm9yRXZlbnQuRXJyb3I7XG5cbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHNlcnZlciBldmVudC5cbiAgICovXG4gIGV2ZW50X2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBldmVudCB0eXBlLCBtdXN0IGJlIGBlcnJvcmAuXG4gICAqL1xuICB0eXBlOiAnZXJyb3InO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIEVycm9yRXZlbnQge1xuICAvKipcbiAgICogRGV0YWlscyBvZiB0aGUgZXJyb3IuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIEVycm9yIHtcbiAgICAvKipcbiAgICAgKiBBIGh1bWFuLXJlYWRhYmxlIGVycm9yIG1lc3NhZ2UuXG4gICAgICovXG4gICAgbWVzc2FnZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgZXJyb3IgKGUuZy4sIFwiaW52YWxpZF9yZXF1ZXN0X2Vycm9yXCIsIFwic2VydmVyX2Vycm9yXCIpLlxuICAgICAqL1xuICAgIHR5cGU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEVycm9yIGNvZGUsIGlmIGFueS5cbiAgICAgKi9cbiAgICBjb2RlPzogc3RyaW5nIHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBldmVudF9pZCBvZiB0aGUgY2xpZW50IGV2ZW50IHRoYXQgY2F1c2VkIHRoZSBlcnJvciwgaWYgYXBwbGljYWJsZS5cbiAgICAgKi9cbiAgICBldmVudF9pZD86IHN0cmluZyB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBQYXJhbWV0ZXIgcmVsYXRlZCB0byB0aGUgZXJyb3IsIGlmIGFueS5cbiAgICAgKi9cbiAgICBwYXJhbT86IHN0cmluZyB8IG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBTZW5kIHRoaXMgZXZlbnQgdG8gYXBwZW5kIGF1ZGlvIGJ5dGVzIHRvIHRoZSBpbnB1dCBhdWRpbyBidWZmZXIuIFRoZSBhdWRpb1xuICogYnVmZmVyIGlzIHRlbXBvcmFyeSBzdG9yYWdlIHlvdSBjYW4gd3JpdGUgdG8gYW5kIGxhdGVyIGNvbW1pdC4gSW4gU2VydmVyIFZBRFxuICogbW9kZSwgdGhlIGF1ZGlvIGJ1ZmZlciBpcyB1c2VkIHRvIGRldGVjdCBzcGVlY2ggYW5kIHRoZSBzZXJ2ZXIgd2lsbCBkZWNpZGUgd2hlblxuICogdG8gY29tbWl0LiBXaGVuIFNlcnZlciBWQUQgaXMgZGlzYWJsZWQsIHlvdSBtdXN0IGNvbW1pdCB0aGUgYXVkaW8gYnVmZmVyXG4gKiBtYW51YWxseS5cbiAqXG4gKiBUaGUgY2xpZW50IG1heSBjaG9vc2UgaG93IG11Y2ggYXVkaW8gdG8gcGxhY2UgaW4gZWFjaCBldmVudCB1cCB0byBhIG1heGltdW0gb2ZcbiAqIDE1IE1pQiwgZm9yIGV4YW1wbGUgc3RyZWFtaW5nIHNtYWxsZXIgY2h1bmtzIGZyb20gdGhlIGNsaWVudCBtYXkgYWxsb3cgdGhlIFZBRFxuICogdG8gYmUgbW9yZSByZXNwb25zaXZlLiBVbmxpa2UgbWFkZSBvdGhlciBjbGllbnQgZXZlbnRzLCB0aGUgc2VydmVyIHdpbGwgbm90IHNlbmRcbiAqIGEgY29uZmlybWF0aW9uIHJlc3BvbnNlIHRvIHRoaXMgZXZlbnQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5wdXRBdWRpb0J1ZmZlckFwcGVuZEV2ZW50IHtcbiAgLyoqXG4gICAqIEJhc2U2NC1lbmNvZGVkIGF1ZGlvIGJ5dGVzLiBUaGlzIG11c3QgYmUgaW4gdGhlIGZvcm1hdCBzcGVjaWZpZWQgYnkgdGhlXG4gICAqIGBpbnB1dF9hdWRpb19mb3JtYXRgIGZpZWxkIGluIHRoZSBzZXNzaW9uIGNvbmZpZ3VyYXRpb24uXG4gICAqL1xuICBhdWRpbzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZXZlbnQgdHlwZSwgbXVzdCBiZSBgaW5wdXRfYXVkaW9fYnVmZmVyLmFwcGVuZGAuXG4gICAqL1xuICB0eXBlOiAnaW5wdXRfYXVkaW9fYnVmZmVyLmFwcGVuZCc7XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsIGNsaWVudC1nZW5lcmF0ZWQgSUQgdXNlZCB0byBpZGVudGlmeSB0aGlzIGV2ZW50LlxuICAgKi9cbiAgZXZlbnRfaWQ/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogU2VuZCB0aGlzIGV2ZW50IHRvIGNsZWFyIHRoZSBhdWRpbyBieXRlcyBpbiB0aGUgYnVmZmVyLiBUaGUgc2VydmVyIHdpbGwgcmVzcG9uZFxuICogd2l0aCBhbiBgaW5wdXRfYXVkaW9fYnVmZmVyLmNsZWFyZWRgIGV2ZW50LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElucHV0QXVkaW9CdWZmZXJDbGVhckV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBldmVudCB0eXBlLCBtdXN0IGJlIGBpbnB1dF9hdWRpb19idWZmZXIuY2xlYXJgLlxuICAgKi9cbiAgdHlwZTogJ2lucHV0X2F1ZGlvX2J1ZmZlci5jbGVhcic7XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsIGNsaWVudC1nZW5lcmF0ZWQgSUQgdXNlZCB0byBpZGVudGlmeSB0aGlzIGV2ZW50LlxuICAgKi9cbiAgZXZlbnRfaWQ/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogUmV0dXJuZWQgd2hlbiB0aGUgaW5wdXQgYXVkaW8gYnVmZmVyIGlzIGNsZWFyZWQgYnkgdGhlIGNsaWVudCB3aXRoIGFcbiAqIGBpbnB1dF9hdWRpb19idWZmZXIuY2xlYXJgIGV2ZW50LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElucHV0QXVkaW9CdWZmZXJDbGVhcmVkRXZlbnQge1xuICAvKipcbiAgICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgc2VydmVyIGV2ZW50LlxuICAgKi9cbiAgZXZlbnRfaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGV2ZW50IHR5cGUsIG11c3QgYmUgYGlucHV0X2F1ZGlvX2J1ZmZlci5jbGVhcmVkYC5cbiAgICovXG4gIHR5cGU6ICdpbnB1dF9hdWRpb19idWZmZXIuY2xlYXJlZCc7XG59XG5cbi8qKlxuICogU2VuZCB0aGlzIGV2ZW50IHRvIGNvbW1pdCB0aGUgdXNlciBpbnB1dCBhdWRpbyBidWZmZXIsIHdoaWNoIHdpbGwgY3JlYXRlIGEgbmV3XG4gKiB1c2VyIG1lc3NhZ2UgaXRlbSBpbiB0aGUgY29udmVyc2F0aW9uLiBUaGlzIGV2ZW50IHdpbGwgcHJvZHVjZSBhbiBlcnJvciBpZiB0aGVcbiAqIGlucHV0IGF1ZGlvIGJ1ZmZlciBpcyBlbXB0eS4gV2hlbiBpbiBTZXJ2ZXIgVkFEIG1vZGUsIHRoZSBjbGllbnQgZG9lcyBub3QgbmVlZFxuICogdG8gc2VuZCB0aGlzIGV2ZW50LCB0aGUgc2VydmVyIHdpbGwgY29tbWl0IHRoZSBhdWRpbyBidWZmZXIgYXV0b21hdGljYWxseS5cbiAqXG4gKiBDb21taXR0aW5nIHRoZSBpbnB1dCBhdWRpbyBidWZmZXIgd2lsbCB0cmlnZ2VyIGlucHV0IGF1ZGlvIHRyYW5zY3JpcHRpb24gKGlmXG4gKiBlbmFibGVkIGluIHNlc3Npb24gY29uZmlndXJhdGlvbiksIGJ1dCBpdCB3aWxsIG5vdCBjcmVhdGUgYSByZXNwb25zZSBmcm9tIHRoZVxuICogbW9kZWwuIFRoZSBzZXJ2ZXIgd2lsbCByZXNwb25kIHdpdGggYW4gYGlucHV0X2F1ZGlvX2J1ZmZlci5jb21taXR0ZWRgIGV2ZW50LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElucHV0QXVkaW9CdWZmZXJDb21taXRFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgZXZlbnQgdHlwZSwgbXVzdCBiZSBgaW5wdXRfYXVkaW9fYnVmZmVyLmNvbW1pdGAuXG4gICAqL1xuICB0eXBlOiAnaW5wdXRfYXVkaW9fYnVmZmVyLmNvbW1pdCc7XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsIGNsaWVudC1nZW5lcmF0ZWQgSUQgdXNlZCB0byBpZGVudGlmeSB0aGlzIGV2ZW50LlxuICAgKi9cbiAgZXZlbnRfaWQ/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogUmV0dXJuZWQgd2hlbiBhbiBpbnB1dCBhdWRpbyBidWZmZXIgaXMgY29tbWl0dGVkLCBlaXRoZXIgYnkgdGhlIGNsaWVudCBvclxuICogYXV0b21hdGljYWxseSBpbiBzZXJ2ZXIgVkFEIG1vZGUuIFRoZSBgaXRlbV9pZGAgcHJvcGVydHkgaXMgdGhlIElEIG9mIHRoZSB1c2VyXG4gKiBtZXNzYWdlIGl0ZW0gdGhhdCB3aWxsIGJlIGNyZWF0ZWQsIHRodXMgYSBgY29udmVyc2F0aW9uLml0ZW0uY3JlYXRlZGAgZXZlbnQgd2lsbFxuICogYWxzbyBiZSBzZW50IHRvIHRoZSBjbGllbnQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5wdXRBdWRpb0J1ZmZlckNvbW1pdHRlZEV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHNlcnZlciBldmVudC5cbiAgICovXG4gIGV2ZW50X2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgdXNlciBtZXNzYWdlIGl0ZW0gdGhhdCB3aWxsIGJlIGNyZWF0ZWQuXG4gICAqL1xuICBpdGVtX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgcHJlY2VkaW5nIGl0ZW0gYWZ0ZXIgd2hpY2ggdGhlIG5ldyBpdGVtIHdpbGwgYmUgaW5zZXJ0ZWQuXG4gICAqL1xuICBwcmV2aW91c19pdGVtX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBldmVudCB0eXBlLCBtdXN0IGJlIGBpbnB1dF9hdWRpb19idWZmZXIuY29tbWl0dGVkYC5cbiAgICovXG4gIHR5cGU6ICdpbnB1dF9hdWRpb19idWZmZXIuY29tbWl0dGVkJztcbn1cblxuLyoqXG4gKiBTZW50IGJ5IHRoZSBzZXJ2ZXIgd2hlbiBpbiBgc2VydmVyX3ZhZGAgbW9kZSB0byBpbmRpY2F0ZSB0aGF0IHNwZWVjaCBoYXMgYmVlblxuICogZGV0ZWN0ZWQgaW4gdGhlIGF1ZGlvIGJ1ZmZlci4gVGhpcyBjYW4gaGFwcGVuIGFueSB0aW1lIGF1ZGlvIGlzIGFkZGVkIHRvIHRoZVxuICogYnVmZmVyICh1bmxlc3Mgc3BlZWNoIGlzIGFscmVhZHkgZGV0ZWN0ZWQpLiBUaGUgY2xpZW50IG1heSB3YW50IHRvIHVzZSB0aGlzXG4gKiBldmVudCB0byBpbnRlcnJ1cHQgYXVkaW8gcGxheWJhY2sgb3IgcHJvdmlkZSB2aXN1YWwgZmVlZGJhY2sgdG8gdGhlIHVzZXIuXG4gKlxuICogVGhlIGNsaWVudCBzaG91bGQgZXhwZWN0IHRvIHJlY2VpdmUgYSBgaW5wdXRfYXVkaW9fYnVmZmVyLnNwZWVjaF9zdG9wcGVkYCBldmVudFxuICogd2hlbiBzcGVlY2ggc3RvcHMuIFRoZSBgaXRlbV9pZGAgcHJvcGVydHkgaXMgdGhlIElEIG9mIHRoZSB1c2VyIG1lc3NhZ2UgaXRlbVxuICogdGhhdCB3aWxsIGJlIGNyZWF0ZWQgd2hlbiBzcGVlY2ggc3RvcHMgYW5kIHdpbGwgYWxzbyBiZSBpbmNsdWRlZCBpbiB0aGVcbiAqIGBpbnB1dF9hdWRpb19idWZmZXIuc3BlZWNoX3N0b3BwZWRgIGV2ZW50ICh1bmxlc3MgdGhlIGNsaWVudCBtYW51YWxseSBjb21taXRzXG4gKiB0aGUgYXVkaW8gYnVmZmVyIGR1cmluZyBWQUQgYWN0aXZhdGlvbikuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5wdXRBdWRpb0J1ZmZlclNwZWVjaFN0YXJ0ZWRFdmVudCB7XG4gIC8qKlxuICAgKiBNaWxsaXNlY29uZHMgZnJvbSB0aGUgc3RhcnQgb2YgYWxsIGF1ZGlvIHdyaXR0ZW4gdG8gdGhlIGJ1ZmZlciBkdXJpbmcgdGhlXG4gICAqIHNlc3Npb24gd2hlbiBzcGVlY2ggd2FzIGZpcnN0IGRldGVjdGVkLiBUaGlzIHdpbGwgY29ycmVzcG9uZCB0byB0aGUgYmVnaW5uaW5nIG9mXG4gICAqIGF1ZGlvIHNlbnQgdG8gdGhlIG1vZGVsLCBhbmQgdGh1cyBpbmNsdWRlcyB0aGUgYHByZWZpeF9wYWRkaW5nX21zYCBjb25maWd1cmVkIGluXG4gICAqIHRoZSBTZXNzaW9uLlxuICAgKi9cbiAgYXVkaW9fc3RhcnRfbXM6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgc2VydmVyIGV2ZW50LlxuICAgKi9cbiAgZXZlbnRfaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSB1c2VyIG1lc3NhZ2UgaXRlbSB0aGF0IHdpbGwgYmUgY3JlYXRlZCB3aGVuIHNwZWVjaCBzdG9wcy5cbiAgICovXG4gIGl0ZW1faWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGV2ZW50IHR5cGUsIG11c3QgYmUgYGlucHV0X2F1ZGlvX2J1ZmZlci5zcGVlY2hfc3RhcnRlZGAuXG4gICAqL1xuICB0eXBlOiAnaW5wdXRfYXVkaW9fYnVmZmVyLnNwZWVjaF9zdGFydGVkJztcbn1cblxuLyoqXG4gKiBSZXR1cm5lZCBpbiBgc2VydmVyX3ZhZGAgbW9kZSB3aGVuIHRoZSBzZXJ2ZXIgZGV0ZWN0cyB0aGUgZW5kIG9mIHNwZWVjaCBpbiB0aGVcbiAqIGF1ZGlvIGJ1ZmZlci4gVGhlIHNlcnZlciB3aWxsIGFsc28gc2VuZCBhbiBgY29udmVyc2F0aW9uLml0ZW0uY3JlYXRlZGAgZXZlbnRcbiAqIHdpdGggdGhlIHVzZXIgbWVzc2FnZSBpdGVtIHRoYXQgaXMgY3JlYXRlZCBmcm9tIHRoZSBhdWRpbyBidWZmZXIuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5wdXRBdWRpb0J1ZmZlclNwZWVjaFN0b3BwZWRFdmVudCB7XG4gIC8qKlxuICAgKiBNaWxsaXNlY29uZHMgc2luY2UgdGhlIHNlc3Npb24gc3RhcnRlZCB3aGVuIHNwZWVjaCBzdG9wcGVkLiBUaGlzIHdpbGwgY29ycmVzcG9uZFxuICAgKiB0byB0aGUgZW5kIG9mIGF1ZGlvIHNlbnQgdG8gdGhlIG1vZGVsLCBhbmQgdGh1cyBpbmNsdWRlcyB0aGVcbiAgICogYG1pbl9zaWxlbmNlX2R1cmF0aW9uX21zYCBjb25maWd1cmVkIGluIHRoZSBTZXNzaW9uLlxuICAgKi9cbiAgYXVkaW9fZW5kX21zOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHNlcnZlciBldmVudC5cbiAgICovXG4gIGV2ZW50X2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgdXNlciBtZXNzYWdlIGl0ZW0gdGhhdCB3aWxsIGJlIGNyZWF0ZWQuXG4gICAqL1xuICBpdGVtX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBldmVudCB0eXBlLCBtdXN0IGJlIGBpbnB1dF9hdWRpb19idWZmZXIuc3BlZWNoX3N0b3BwZWRgLlxuICAgKi9cbiAgdHlwZTogJ2lucHV0X2F1ZGlvX2J1ZmZlci5zcGVlY2hfc3RvcHBlZCc7XG59XG5cbi8qKlxuICogRW1pdHRlZCBhdCB0aGUgYmVnaW5uaW5nIG9mIGEgUmVzcG9uc2UgdG8gaW5kaWNhdGUgdGhlIHVwZGF0ZWQgcmF0ZSBsaW1pdHMuIFdoZW5cbiAqIGEgUmVzcG9uc2UgaXMgY3JlYXRlZCBzb21lIHRva2VucyB3aWxsIGJlIFwicmVzZXJ2ZWRcIiBmb3IgdGhlIG91dHB1dCB0b2tlbnMsIHRoZVxuICogcmF0ZSBsaW1pdHMgc2hvd24gaGVyZSByZWZsZWN0IHRoYXQgcmVzZXJ2YXRpb24sIHdoaWNoIGlzIHRoZW4gYWRqdXN0ZWRcbiAqIGFjY29yZGluZ2x5IG9uY2UgdGhlIFJlc3BvbnNlIGlzIGNvbXBsZXRlZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSYXRlTGltaXRzVXBkYXRlZEV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHNlcnZlciBldmVudC5cbiAgICovXG4gIGV2ZW50X2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIExpc3Qgb2YgcmF0ZSBsaW1pdCBpbmZvcm1hdGlvbi5cbiAgICovXG4gIHJhdGVfbGltaXRzOiBBcnJheTxSYXRlTGltaXRzVXBkYXRlZEV2ZW50LlJhdGVMaW1pdD47XG5cbiAgLyoqXG4gICAqIFRoZSBldmVudCB0eXBlLCBtdXN0IGJlIGByYXRlX2xpbWl0cy51cGRhdGVkYC5cbiAgICovXG4gIHR5cGU6ICdyYXRlX2xpbWl0cy51cGRhdGVkJztcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBSYXRlTGltaXRzVXBkYXRlZEV2ZW50IHtcbiAgZXhwb3J0IGludGVyZmFjZSBSYXRlTGltaXQge1xuICAgIC8qKlxuICAgICAqIFRoZSBtYXhpbXVtIGFsbG93ZWQgdmFsdWUgZm9yIHRoZSByYXRlIGxpbWl0LlxuICAgICAqL1xuICAgIGxpbWl0PzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIHJhdGUgbGltaXQgKGByZXF1ZXN0c2AsIGB0b2tlbnNgKS5cbiAgICAgKi9cbiAgICBuYW1lPzogJ3JlcXVlc3RzJyB8ICd0b2tlbnMnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJlbWFpbmluZyB2YWx1ZSBiZWZvcmUgdGhlIGxpbWl0IGlzIHJlYWNoZWQuXG4gICAgICovXG4gICAgcmVtYWluaW5nPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogU2Vjb25kcyB1bnRpbCB0aGUgcmF0ZSBsaW1pdCByZXNldHMuXG4gICAgICovXG4gICAgcmVzZXRfc2Vjb25kcz86IG51bWJlcjtcbiAgfVxufVxuXG4vKipcbiAqIEEgcmVhbHRpbWUgY2xpZW50IGV2ZW50LlxuICovXG5leHBvcnQgdHlwZSBSZWFsdGltZUNsaWVudEV2ZW50ID1cbiAgfCBDb252ZXJzYXRpb25JdGVtQ3JlYXRlRXZlbnRcbiAgfCBDb252ZXJzYXRpb25JdGVtRGVsZXRlRXZlbnRcbiAgfCBDb252ZXJzYXRpb25JdGVtUmV0cmlldmVFdmVudFxuICB8IENvbnZlcnNhdGlvbkl0ZW1UcnVuY2F0ZUV2ZW50XG4gIHwgSW5wdXRBdWRpb0J1ZmZlckFwcGVuZEV2ZW50XG4gIHwgSW5wdXRBdWRpb0J1ZmZlckNsZWFyRXZlbnRcbiAgfCBSZWFsdGltZUNsaWVudEV2ZW50Lk91dHB1dEF1ZGlvQnVmZmVyQ2xlYXJcbiAgfCBJbnB1dEF1ZGlvQnVmZmVyQ29tbWl0RXZlbnRcbiAgfCBSZXNwb25zZUNhbmNlbEV2ZW50XG4gIHwgUmVzcG9uc2VDcmVhdGVFdmVudFxuICB8IFNlc3Npb25VcGRhdGVFdmVudFxuICB8IFRyYW5zY3JpcHRpb25TZXNzaW9uVXBkYXRlO1xuXG5leHBvcnQgbmFtZXNwYWNlIFJlYWx0aW1lQ2xpZW50RXZlbnQge1xuICAvKipcbiAgICogKipXZWJSVEMgT25seToqKiBFbWl0IHRvIGN1dCBvZmYgdGhlIGN1cnJlbnQgYXVkaW8gcmVzcG9uc2UuIFRoaXMgd2lsbCB0cmlnZ2VyXG4gICAqIHRoZSBzZXJ2ZXIgdG8gc3RvcCBnZW5lcmF0aW5nIGF1ZGlvIGFuZCBlbWl0IGEgYG91dHB1dF9hdWRpb19idWZmZXIuY2xlYXJlZGBcbiAgICogZXZlbnQuIFRoaXMgZXZlbnQgc2hvdWxkIGJlIHByZWNlZGVkIGJ5IGEgYHJlc3BvbnNlLmNhbmNlbGAgY2xpZW50IGV2ZW50IHRvIHN0b3BcbiAgICogdGhlIGdlbmVyYXRpb24gb2YgdGhlIGN1cnJlbnQgcmVzcG9uc2UuXG4gICAqIFtMZWFybiBtb3JlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvcmVhbHRpbWUtY29udmVyc2F0aW9ucyNjbGllbnQtYW5kLXNlcnZlci1ldmVudHMtZm9yLWF1ZGlvLWluLXdlYnJ0YykuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIE91dHB1dEF1ZGlvQnVmZmVyQ2xlYXIge1xuICAgIC8qKlxuICAgICAqIFRoZSBldmVudCB0eXBlLCBtdXN0IGJlIGBvdXRwdXRfYXVkaW9fYnVmZmVyLmNsZWFyYC5cbiAgICAgKi9cbiAgICB0eXBlOiAnb3V0cHV0X2F1ZGlvX2J1ZmZlci5jbGVhcic7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBjbGllbnQgZXZlbnQgdXNlZCBmb3IgZXJyb3IgaGFuZGxpbmcuXG4gICAgICovXG4gICAgZXZlbnRfaWQ/OiBzdHJpbmc7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgcmVzcG9uc2UgcmVzb3VyY2UuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVhbHRpbWVSZXNwb25zZSB7XG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSByZXNwb25zZS5cbiAgICovXG4gIGlkPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBXaGljaCBjb252ZXJzYXRpb24gdGhlIHJlc3BvbnNlIGlzIGFkZGVkIHRvLCBkZXRlcm1pbmVkIGJ5IHRoZSBgY29udmVyc2F0aW9uYFxuICAgKiBmaWVsZCBpbiB0aGUgYHJlc3BvbnNlLmNyZWF0ZWAgZXZlbnQuIElmIGBhdXRvYCwgdGhlIHJlc3BvbnNlIHdpbGwgYmUgYWRkZWQgdG9cbiAgICogdGhlIGRlZmF1bHQgY29udmVyc2F0aW9uIGFuZCB0aGUgdmFsdWUgb2YgYGNvbnZlcnNhdGlvbl9pZGAgd2lsbCBiZSBhbiBpZCBsaWtlXG4gICAqIGBjb252XzEyMzRgLiBJZiBgbm9uZWAsIHRoZSByZXNwb25zZSB3aWxsIG5vdCBiZSBhZGRlZCB0byBhbnkgY29udmVyc2F0aW9uIGFuZFxuICAgKiB0aGUgdmFsdWUgb2YgYGNvbnZlcnNhdGlvbl9pZGAgd2lsbCBiZSBgbnVsbGAuIElmIHJlc3BvbnNlcyBhcmUgYmVpbmcgdHJpZ2dlcmVkXG4gICAqIGJ5IHNlcnZlciBWQUQsIHRoZSByZXNwb25zZSB3aWxsIGJlIGFkZGVkIHRvIHRoZSBkZWZhdWx0IGNvbnZlcnNhdGlvbiwgdGh1cyB0aGVcbiAgICogYGNvbnZlcnNhdGlvbl9pZGAgd2lsbCBiZSBhbiBpZCBsaWtlIGBjb252XzEyMzRgLlxuICAgKi9cbiAgY29udmVyc2F0aW9uX2lkPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG51bWJlciBvZiBvdXRwdXQgdG9rZW5zIGZvciBhIHNpbmdsZSBhc3Npc3RhbnQgcmVzcG9uc2UsIGluY2x1c2l2ZSBvZlxuICAgKiB0b29sIGNhbGxzLCB0aGF0IHdhcyB1c2VkIGluIHRoaXMgcmVzcG9uc2UuXG4gICAqL1xuICBtYXhfb3V0cHV0X3Rva2Vucz86IG51bWJlciB8ICdpbmYnO1xuXG4gIC8qKlxuICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgKlxuICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbWV0YWRhdGE/OiBTaGFyZWQuTWV0YWRhdGEgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgc2V0IG9mIG1vZGFsaXRpZXMgdGhlIG1vZGVsIHVzZWQgdG8gcmVzcG9uZC4gSWYgdGhlcmUgYXJlIG11bHRpcGxlXG4gICAqIG1vZGFsaXRpZXMsIHRoZSBtb2RlbCB3aWxsIHBpY2sgb25lLCBmb3IgZXhhbXBsZSBpZiBgbW9kYWxpdGllc2AgaXNcbiAgICogYFtcInRleHRcIiwgXCJhdWRpb1wiXWAsIHRoZSBtb2RlbCBjb3VsZCBiZSByZXNwb25kaW5nIGluIGVpdGhlciB0ZXh0IG9yIGF1ZGlvLlxuICAgKi9cbiAgbW9kYWxpdGllcz86IEFycmF5PCd0ZXh0JyB8ICdhdWRpbyc+O1xuXG4gIC8qKlxuICAgKiBUaGUgb2JqZWN0IHR5cGUsIG11c3QgYmUgYHJlYWx0aW1lLnJlc3BvbnNlYC5cbiAgICovXG4gIG9iamVjdD86ICdyZWFsdGltZS5yZXNwb25zZSc7XG5cbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIG91dHB1dCBpdGVtcyBnZW5lcmF0ZWQgYnkgdGhlIHJlc3BvbnNlLlxuICAgKi9cbiAgb3V0cHV0PzogQXJyYXk8Q29udmVyc2F0aW9uSXRlbT47XG5cbiAgLyoqXG4gICAqIFRoZSBmb3JtYXQgb2Ygb3V0cHV0IGF1ZGlvLiBPcHRpb25zIGFyZSBgcGNtMTZgLCBgZzcxMV91bGF3YCwgb3IgYGc3MTFfYWxhd2AuXG4gICAqL1xuICBvdXRwdXRfYXVkaW9fZm9ybWF0PzogJ3BjbTE2JyB8ICdnNzExX3VsYXcnIHwgJ2c3MTFfYWxhdyc7XG5cbiAgLyoqXG4gICAqIFRoZSBmaW5hbCBzdGF0dXMgb2YgdGhlIHJlc3BvbnNlIChgY29tcGxldGVkYCwgYGNhbmNlbGxlZGAsIGBmYWlsZWRgLCBvclxuICAgKiBgaW5jb21wbGV0ZWApLlxuICAgKi9cbiAgc3RhdHVzPzogJ2NvbXBsZXRlZCcgfCAnY2FuY2VsbGVkJyB8ICdmYWlsZWQnIHwgJ2luY29tcGxldGUnO1xuXG4gIC8qKlxuICAgKiBBZGRpdGlvbmFsIGRldGFpbHMgYWJvdXQgdGhlIHN0YXR1cy5cbiAgICovXG4gIHN0YXR1c19kZXRhaWxzPzogUmVhbHRpbWVSZXNwb25zZVN0YXR1cztcblxuICAvKipcbiAgICogU2FtcGxpbmcgdGVtcGVyYXR1cmUgZm9yIHRoZSBtb2RlbCwgbGltaXRlZCB0byBbMC42LCAxLjJdLiBEZWZhdWx0cyB0byAwLjguXG4gICAqL1xuICB0ZW1wZXJhdHVyZT86IG51bWJlcjtcblxuICAvKipcbiAgICogVXNhZ2Ugc3RhdGlzdGljcyBmb3IgdGhlIFJlc3BvbnNlLCB0aGlzIHdpbGwgY29ycmVzcG9uZCB0byBiaWxsaW5nLiBBIFJlYWx0aW1lXG4gICAqIEFQSSBzZXNzaW9uIHdpbGwgbWFpbnRhaW4gYSBjb252ZXJzYXRpb24gY29udGV4dCBhbmQgYXBwZW5kIG5ldyBJdGVtcyB0byB0aGVcbiAgICogQ29udmVyc2F0aW9uLCB0aHVzIG91dHB1dCBmcm9tIHByZXZpb3VzIHR1cm5zICh0ZXh0IGFuZCBhdWRpbyB0b2tlbnMpIHdpbGxcbiAgICogYmVjb21lIHRoZSBpbnB1dCBmb3IgbGF0ZXIgdHVybnMuXG4gICAqL1xuICB1c2FnZT86IFJlYWx0aW1lUmVzcG9uc2VVc2FnZTtcblxuICAvKipcbiAgICogVGhlIHZvaWNlIHRoZSBtb2RlbCB1c2VkIHRvIHJlc3BvbmQuIEN1cnJlbnQgdm9pY2Ugb3B0aW9ucyBhcmUgYGFsbG95YCwgYGFzaGAsXG4gICAqIGBiYWxsYWRgLCBgY29yYWxgLCBgZWNob2AsIGBmYWJsZWAsIGBvbnl4YCwgYG5vdmFgLCBgc2FnZWAsIGBzaGltbWVyYCwgYW5kXG4gICAqIGB2ZXJzZWAuXG4gICAqL1xuICB2b2ljZT86XG4gICAgfCAoc3RyaW5nICYge30pXG4gICAgfCAnYWxsb3knXG4gICAgfCAnYXNoJ1xuICAgIHwgJ2JhbGxhZCdcbiAgICB8ICdjb3JhbCdcbiAgICB8ICdlY2hvJ1xuICAgIHwgJ2ZhYmxlJ1xuICAgIHwgJ29ueXgnXG4gICAgfCAnbm92YSdcbiAgICB8ICdzYWdlJ1xuICAgIHwgJ3NoaW1tZXInXG4gICAgfCAndmVyc2UnO1xufVxuXG4vKipcbiAqIEFkZGl0aW9uYWwgZGV0YWlscyBhYm91dCB0aGUgc3RhdHVzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlYWx0aW1lUmVzcG9uc2VTdGF0dXMge1xuICAvKipcbiAgICogQSBkZXNjcmlwdGlvbiBvZiB0aGUgZXJyb3IgdGhhdCBjYXVzZWQgdGhlIHJlc3BvbnNlIHRvIGZhaWwsIHBvcHVsYXRlZCB3aGVuIHRoZVxuICAgKiBgc3RhdHVzYCBpcyBgZmFpbGVkYC5cbiAgICovXG4gIGVycm9yPzogUmVhbHRpbWVSZXNwb25zZVN0YXR1cy5FcnJvcjtcblxuICAvKipcbiAgICogVGhlIHJlYXNvbiB0aGUgUmVzcG9uc2UgZGlkIG5vdCBjb21wbGV0ZS4gRm9yIGEgYGNhbmNlbGxlZGAgUmVzcG9uc2UsIG9uZSBvZlxuICAgKiBgdHVybl9kZXRlY3RlZGAgKHRoZSBzZXJ2ZXIgVkFEIGRldGVjdGVkIGEgbmV3IHN0YXJ0IG9mIHNwZWVjaCkgb3JcbiAgICogYGNsaWVudF9jYW5jZWxsZWRgICh0aGUgY2xpZW50IHNlbnQgYSBjYW5jZWwgZXZlbnQpLiBGb3IgYW4gYGluY29tcGxldGVgXG4gICAqIFJlc3BvbnNlLCBvbmUgb2YgYG1heF9vdXRwdXRfdG9rZW5zYCBvciBgY29udGVudF9maWx0ZXJgICh0aGUgc2VydmVyLXNpZGUgc2FmZXR5XG4gICAqIGZpbHRlciBhY3RpdmF0ZWQgYW5kIGN1dCBvZmYgdGhlIHJlc3BvbnNlKS5cbiAgICovXG4gIHJlYXNvbj86ICd0dXJuX2RldGVjdGVkJyB8ICdjbGllbnRfY2FuY2VsbGVkJyB8ICdtYXhfb3V0cHV0X3Rva2VucycgfCAnY29udGVudF9maWx0ZXInO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiBlcnJvciB0aGF0IGNhdXNlZCB0aGUgcmVzcG9uc2UgdG8gZmFpbCwgY29ycmVzcG9uZGluZyB3aXRoIHRoZVxuICAgKiBgc3RhdHVzYCBmaWVsZCAoYGNvbXBsZXRlZGAsIGBjYW5jZWxsZWRgLCBgaW5jb21wbGV0ZWAsIGBmYWlsZWRgKS5cbiAgICovXG4gIHR5cGU/OiAnY29tcGxldGVkJyB8ICdjYW5jZWxsZWQnIHwgJ2luY29tcGxldGUnIHwgJ2ZhaWxlZCc7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgUmVhbHRpbWVSZXNwb25zZVN0YXR1cyB7XG4gIC8qKlxuICAgKiBBIGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvciB0aGF0IGNhdXNlZCB0aGUgcmVzcG9uc2UgdG8gZmFpbCwgcG9wdWxhdGVkIHdoZW4gdGhlXG4gICAqIGBzdGF0dXNgIGlzIGBmYWlsZWRgLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBFcnJvciB7XG4gICAgLyoqXG4gICAgICogRXJyb3IgY29kZSwgaWYgYW55LlxuICAgICAqL1xuICAgIGNvZGU/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiBlcnJvci5cbiAgICAgKi9cbiAgICB0eXBlPzogc3RyaW5nO1xuICB9XG59XG5cbi8qKlxuICogVXNhZ2Ugc3RhdGlzdGljcyBmb3IgdGhlIFJlc3BvbnNlLCB0aGlzIHdpbGwgY29ycmVzcG9uZCB0byBiaWxsaW5nLiBBIFJlYWx0aW1lXG4gKiBBUEkgc2Vzc2lvbiB3aWxsIG1haW50YWluIGEgY29udmVyc2F0aW9uIGNvbnRleHQgYW5kIGFwcGVuZCBuZXcgSXRlbXMgdG8gdGhlXG4gKiBDb252ZXJzYXRpb24sIHRodXMgb3V0cHV0IGZyb20gcHJldmlvdXMgdHVybnMgKHRleHQgYW5kIGF1ZGlvIHRva2Vucykgd2lsbFxuICogYmVjb21lIHRoZSBpbnB1dCBmb3IgbGF0ZXIgdHVybnMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVhbHRpbWVSZXNwb25zZVVzYWdlIHtcbiAgLyoqXG4gICAqIERldGFpbHMgYWJvdXQgdGhlIGlucHV0IHRva2VucyB1c2VkIGluIHRoZSBSZXNwb25zZS5cbiAgICovXG4gIGlucHV0X3Rva2VuX2RldGFpbHM/OiBSZWFsdGltZVJlc3BvbnNlVXNhZ2UuSW5wdXRUb2tlbkRldGFpbHM7XG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgaW5wdXQgdG9rZW5zIHVzZWQgaW4gdGhlIFJlc3BvbnNlLCBpbmNsdWRpbmcgdGV4dCBhbmQgYXVkaW9cbiAgICogdG9rZW5zLlxuICAgKi9cbiAgaW5wdXRfdG9rZW5zPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBEZXRhaWxzIGFib3V0IHRoZSBvdXRwdXQgdG9rZW5zIHVzZWQgaW4gdGhlIFJlc3BvbnNlLlxuICAgKi9cbiAgb3V0cHV0X3Rva2VuX2RldGFpbHM/OiBSZWFsdGltZVJlc3BvbnNlVXNhZ2UuT3V0cHV0VG9rZW5EZXRhaWxzO1xuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIG91dHB1dCB0b2tlbnMgc2VudCBpbiB0aGUgUmVzcG9uc2UsIGluY2x1ZGluZyB0ZXh0IGFuZCBhdWRpb1xuICAgKiB0b2tlbnMuXG4gICAqL1xuICBvdXRwdXRfdG9rZW5zPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdG90YWwgbnVtYmVyIG9mIHRva2VucyBpbiB0aGUgUmVzcG9uc2UgaW5jbHVkaW5nIGlucHV0IGFuZCBvdXRwdXQgdGV4dCBhbmRcbiAgICogYXVkaW8gdG9rZW5zLlxuICAgKi9cbiAgdG90YWxfdG9rZW5zPzogbnVtYmVyO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFJlYWx0aW1lUmVzcG9uc2VVc2FnZSB7XG4gIC8qKlxuICAgKiBEZXRhaWxzIGFib3V0IHRoZSBpbnB1dCB0b2tlbnMgdXNlZCBpbiB0aGUgUmVzcG9uc2UuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIElucHV0VG9rZW5EZXRhaWxzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGF1ZGlvIHRva2VucyB1c2VkIGluIHRoZSBSZXNwb25zZS5cbiAgICAgKi9cbiAgICBhdWRpb190b2tlbnM/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGNhY2hlZCB0b2tlbnMgdXNlZCBpbiB0aGUgUmVzcG9uc2UuXG4gICAgICovXG4gICAgY2FjaGVkX3Rva2Vucz86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgdGV4dCB0b2tlbnMgdXNlZCBpbiB0aGUgUmVzcG9uc2UuXG4gICAgICovXG4gICAgdGV4dF90b2tlbnM/OiBudW1iZXI7XG4gIH1cblxuICAvKipcbiAgICogRGV0YWlscyBhYm91dCB0aGUgb3V0cHV0IHRva2VucyB1c2VkIGluIHRoZSBSZXNwb25zZS5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgT3V0cHV0VG9rZW5EZXRhaWxzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGF1ZGlvIHRva2VucyB1c2VkIGluIHRoZSBSZXNwb25zZS5cbiAgICAgKi9cbiAgICBhdWRpb190b2tlbnM/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIHRleHQgdG9rZW5zIHVzZWQgaW4gdGhlIFJlc3BvbnNlLlxuICAgICAqL1xuICAgIHRleHRfdG9rZW5zPzogbnVtYmVyO1xuICB9XG59XG5cbi8qKlxuICogQSByZWFsdGltZSBzZXJ2ZXIgZXZlbnQuXG4gKi9cbmV4cG9ydCB0eXBlIFJlYWx0aW1lU2VydmVyRXZlbnQgPVxuICB8IENvbnZlcnNhdGlvbkNyZWF0ZWRFdmVudFxuICB8IENvbnZlcnNhdGlvbkl0ZW1DcmVhdGVkRXZlbnRcbiAgfCBDb252ZXJzYXRpb25JdGVtRGVsZXRlZEV2ZW50XG4gIHwgQ29udmVyc2F0aW9uSXRlbUlucHV0QXVkaW9UcmFuc2NyaXB0aW9uQ29tcGxldGVkRXZlbnRcbiAgfCBDb252ZXJzYXRpb25JdGVtSW5wdXRBdWRpb1RyYW5zY3JpcHRpb25EZWx0YUV2ZW50XG4gIHwgQ29udmVyc2F0aW9uSXRlbUlucHV0QXVkaW9UcmFuc2NyaXB0aW9uRmFpbGVkRXZlbnRcbiAgfCBSZWFsdGltZVNlcnZlckV2ZW50LkNvbnZlcnNhdGlvbkl0ZW1SZXRyaWV2ZWRcbiAgfCBDb252ZXJzYXRpb25JdGVtVHJ1bmNhdGVkRXZlbnRcbiAgfCBFcnJvckV2ZW50XG4gIHwgSW5wdXRBdWRpb0J1ZmZlckNsZWFyZWRFdmVudFxuICB8IElucHV0QXVkaW9CdWZmZXJDb21taXR0ZWRFdmVudFxuICB8IElucHV0QXVkaW9CdWZmZXJTcGVlY2hTdGFydGVkRXZlbnRcbiAgfCBJbnB1dEF1ZGlvQnVmZmVyU3BlZWNoU3RvcHBlZEV2ZW50XG4gIHwgUmF0ZUxpbWl0c1VwZGF0ZWRFdmVudFxuICB8IFJlc3BvbnNlQXVkaW9EZWx0YUV2ZW50XG4gIHwgUmVzcG9uc2VBdWRpb0RvbmVFdmVudFxuICB8IFJlc3BvbnNlQXVkaW9UcmFuc2NyaXB0RGVsdGFFdmVudFxuICB8IFJlc3BvbnNlQXVkaW9UcmFuc2NyaXB0RG9uZUV2ZW50XG4gIHwgUmVzcG9uc2VDb250ZW50UGFydEFkZGVkRXZlbnRcbiAgfCBSZXNwb25zZUNvbnRlbnRQYXJ0RG9uZUV2ZW50XG4gIHwgUmVzcG9uc2VDcmVhdGVkRXZlbnRcbiAgfCBSZXNwb25zZURvbmVFdmVudFxuICB8IFJlc3BvbnNlRnVuY3Rpb25DYWxsQXJndW1lbnRzRGVsdGFFdmVudFxuICB8IFJlc3BvbnNlRnVuY3Rpb25DYWxsQXJndW1lbnRzRG9uZUV2ZW50XG4gIHwgUmVzcG9uc2VPdXRwdXRJdGVtQWRkZWRFdmVudFxuICB8IFJlc3BvbnNlT3V0cHV0SXRlbURvbmVFdmVudFxuICB8IFJlc3BvbnNlVGV4dERlbHRhRXZlbnRcbiAgfCBSZXNwb25zZVRleHREb25lRXZlbnRcbiAgfCBTZXNzaW9uQ3JlYXRlZEV2ZW50XG4gIHwgU2Vzc2lvblVwZGF0ZWRFdmVudFxuICB8IFRyYW5zY3JpcHRpb25TZXNzaW9uVXBkYXRlZEV2ZW50XG4gIHwgUmVhbHRpbWVTZXJ2ZXJFdmVudC5PdXRwdXRBdWRpb0J1ZmZlclN0YXJ0ZWRcbiAgfCBSZWFsdGltZVNlcnZlckV2ZW50Lk91dHB1dEF1ZGlvQnVmZmVyU3RvcHBlZFxuICB8IFJlYWx0aW1lU2VydmVyRXZlbnQuT3V0cHV0QXVkaW9CdWZmZXJDbGVhcmVkO1xuXG5leHBvcnQgbmFtZXNwYWNlIFJlYWx0aW1lU2VydmVyRXZlbnQge1xuICAvKipcbiAgICogUmV0dXJuZWQgd2hlbiBhIGNvbnZlcnNhdGlvbiBpdGVtIGlzIHJldHJpZXZlZCB3aXRoXG4gICAqIGBjb252ZXJzYXRpb24uaXRlbS5yZXRyaWV2ZWAuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIENvbnZlcnNhdGlvbkl0ZW1SZXRyaWV2ZWQge1xuICAgIC8qKlxuICAgICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHNlcnZlciBldmVudC5cbiAgICAgKi9cbiAgICBldmVudF9pZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGl0ZW0gdG8gYWRkIHRvIHRoZSBjb252ZXJzYXRpb24uXG4gICAgICovXG4gICAgaXRlbTogUmVhbHRpbWVBUEkuQ29udmVyc2F0aW9uSXRlbTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBldmVudCB0eXBlLCBtdXN0IGJlIGBjb252ZXJzYXRpb24uaXRlbS5yZXRyaWV2ZWRgLlxuICAgICAqL1xuICAgIHR5cGU6ICdjb252ZXJzYXRpb24uaXRlbS5yZXRyaWV2ZWQnO1xuICB9XG5cbiAgLyoqXG4gICAqICoqV2ViUlRDIE9ubHk6KiogRW1pdHRlZCB3aGVuIHRoZSBzZXJ2ZXIgYmVnaW5zIHN0cmVhbWluZyBhdWRpbyB0byB0aGUgY2xpZW50LlxuICAgKiBUaGlzIGV2ZW50IGlzIGVtaXR0ZWQgYWZ0ZXIgYW4gYXVkaW8gY29udGVudCBwYXJ0IGhhcyBiZWVuIGFkZGVkXG4gICAqIChgcmVzcG9uc2UuY29udGVudF9wYXJ0LmFkZGVkYCkgdG8gdGhlIHJlc3BvbnNlLlxuICAgKiBbTGVhcm4gbW9yZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3JlYWx0aW1lLWNvbnZlcnNhdGlvbnMjY2xpZW50LWFuZC1zZXJ2ZXItZXZlbnRzLWZvci1hdWRpby1pbi13ZWJydGMpLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBPdXRwdXRBdWRpb0J1ZmZlclN0YXJ0ZWQge1xuICAgIC8qKlxuICAgICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHNlcnZlciBldmVudC5cbiAgICAgKi9cbiAgICBldmVudF9pZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgcmVzcG9uc2UgdGhhdCBwcm9kdWNlZCB0aGUgYXVkaW8uXG4gICAgICovXG4gICAgcmVzcG9uc2VfaWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBldmVudCB0eXBlLCBtdXN0IGJlIGBvdXRwdXRfYXVkaW9fYnVmZmVyLnN0YXJ0ZWRgLlxuICAgICAqL1xuICAgIHR5cGU6ICdvdXRwdXRfYXVkaW9fYnVmZmVyLnN0YXJ0ZWQnO1xuICB9XG5cbiAgLyoqXG4gICAqICoqV2ViUlRDIE9ubHk6KiogRW1pdHRlZCB3aGVuIHRoZSBvdXRwdXQgYXVkaW8gYnVmZmVyIGhhcyBiZWVuIGNvbXBsZXRlbHlcbiAgICogZHJhaW5lZCBvbiB0aGUgc2VydmVyLCBhbmQgbm8gbW9yZSBhdWRpbyBpcyBmb3J0aGNvbWluZy4gVGhpcyBldmVudCBpcyBlbWl0dGVkXG4gICAqIGFmdGVyIHRoZSBmdWxsIHJlc3BvbnNlIGRhdGEgaGFzIGJlZW4gc2VudCB0byB0aGUgY2xpZW50IChgcmVzcG9uc2UuZG9uZWApLlxuICAgKiBbTGVhcm4gbW9yZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3JlYWx0aW1lLWNvbnZlcnNhdGlvbnMjY2xpZW50LWFuZC1zZXJ2ZXItZXZlbnRzLWZvci1hdWRpby1pbi13ZWJydGMpLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBPdXRwdXRBdWRpb0J1ZmZlclN0b3BwZWQge1xuICAgIC8qKlxuICAgICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHNlcnZlciBldmVudC5cbiAgICAgKi9cbiAgICBldmVudF9pZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgcmVzcG9uc2UgdGhhdCBwcm9kdWNlZCB0aGUgYXVkaW8uXG4gICAgICovXG4gICAgcmVzcG9uc2VfaWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBldmVudCB0eXBlLCBtdXN0IGJlIGBvdXRwdXRfYXVkaW9fYnVmZmVyLnN0b3BwZWRgLlxuICAgICAqL1xuICAgIHR5cGU6ICdvdXRwdXRfYXVkaW9fYnVmZmVyLnN0b3BwZWQnO1xuICB9XG5cbiAgLyoqXG4gICAqICoqV2ViUlRDIE9ubHk6KiogRW1pdHRlZCB3aGVuIHRoZSBvdXRwdXQgYXVkaW8gYnVmZmVyIGlzIGNsZWFyZWQuIFRoaXMgaGFwcGVuc1xuICAgKiBlaXRoZXIgaW4gVkFEIG1vZGUgd2hlbiB0aGUgdXNlciBoYXMgaW50ZXJydXB0ZWRcbiAgICogKGBpbnB1dF9hdWRpb19idWZmZXIuc3BlZWNoX3N0YXJ0ZWRgKSwgb3Igd2hlbiB0aGUgY2xpZW50IGhhcyBlbWl0dGVkIHRoZVxuICAgKiBgb3V0cHV0X2F1ZGlvX2J1ZmZlci5jbGVhcmAgZXZlbnQgdG8gbWFudWFsbHkgY3V0IG9mZiB0aGUgY3VycmVudCBhdWRpb1xuICAgKiByZXNwb25zZS5cbiAgICogW0xlYXJuIG1vcmVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9yZWFsdGltZS1jb252ZXJzYXRpb25zI2NsaWVudC1hbmQtc2VydmVyLWV2ZW50cy1mb3ItYXVkaW8taW4td2VicnRjKS5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgT3V0cHV0QXVkaW9CdWZmZXJDbGVhcmVkIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBzZXJ2ZXIgZXZlbnQuXG4gICAgICovXG4gICAgZXZlbnRfaWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHJlc3BvbnNlIHRoYXQgcHJvZHVjZWQgdGhlIGF1ZGlvLlxuICAgICAqL1xuICAgIHJlc3BvbnNlX2lkOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZXZlbnQgdHlwZSwgbXVzdCBiZSBgb3V0cHV0X2F1ZGlvX2J1ZmZlci5jbGVhcmVkYC5cbiAgICAgKi9cbiAgICB0eXBlOiAnb3V0cHV0X2F1ZGlvX2J1ZmZlci5jbGVhcmVkJztcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybmVkIHdoZW4gdGhlIG1vZGVsLWdlbmVyYXRlZCBhdWRpbyBpcyB1cGRhdGVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlQXVkaW9EZWx0YUV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgY29udGVudCBwYXJ0IGluIHRoZSBpdGVtJ3MgY29udGVudCBhcnJheS5cbiAgICovXG4gIGNvbnRlbnRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogQmFzZTY0LWVuY29kZWQgYXVkaW8gZGF0YSBkZWx0YS5cbiAgICovXG4gIGRlbHRhOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHNlcnZlciBldmVudC5cbiAgICovXG4gIGV2ZW50X2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgaXRlbS5cbiAgICovXG4gIGl0ZW1faWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBvdXRwdXQgaXRlbSBpbiB0aGUgcmVzcG9uc2UuXG4gICAqL1xuICBvdXRwdXRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSByZXNwb25zZS5cbiAgICovXG4gIHJlc3BvbnNlX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBldmVudCB0eXBlLCBtdXN0IGJlIGByZXNwb25zZS5hdWRpby5kZWx0YWAuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2UuYXVkaW8uZGVsdGEnO1xufVxuXG4vKipcbiAqIFJldHVybmVkIHdoZW4gdGhlIG1vZGVsLWdlbmVyYXRlZCBhdWRpbyBpcyBkb25lLiBBbHNvIGVtaXR0ZWQgd2hlbiBhIFJlc3BvbnNlIGlzXG4gKiBpbnRlcnJ1cHRlZCwgaW5jb21wbGV0ZSwgb3IgY2FuY2VsbGVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlQXVkaW9Eb25lRXZlbnQge1xuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBjb250ZW50IHBhcnQgaW4gdGhlIGl0ZW0ncyBjb250ZW50IGFycmF5LlxuICAgKi9cbiAgY29udGVudF9pbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBzZXJ2ZXIgZXZlbnQuXG4gICAqL1xuICBldmVudF9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIGl0ZW0uXG4gICAqL1xuICBpdGVtX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgb3V0cHV0IGl0ZW0gaW4gdGhlIHJlc3BvbnNlLlxuICAgKi9cbiAgb3V0cHV0X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgcmVzcG9uc2UuXG4gICAqL1xuICByZXNwb25zZV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZXZlbnQgdHlwZSwgbXVzdCBiZSBgcmVzcG9uc2UuYXVkaW8uZG9uZWAuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2UuYXVkaW8uZG9uZSc7XG59XG5cbi8qKlxuICogUmV0dXJuZWQgd2hlbiB0aGUgbW9kZWwtZ2VuZXJhdGVkIHRyYW5zY3JpcHRpb24gb2YgYXVkaW8gb3V0cHV0IGlzIHVwZGF0ZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VBdWRpb1RyYW5zY3JpcHREZWx0YUV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgY29udGVudCBwYXJ0IGluIHRoZSBpdGVtJ3MgY29udGVudCBhcnJheS5cbiAgICovXG4gIGNvbnRlbnRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHRyYW5zY3JpcHQgZGVsdGEuXG4gICAqL1xuICBkZWx0YTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBzZXJ2ZXIgZXZlbnQuXG4gICAqL1xuICBldmVudF9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIGl0ZW0uXG4gICAqL1xuICBpdGVtX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgb3V0cHV0IGl0ZW0gaW4gdGhlIHJlc3BvbnNlLlxuICAgKi9cbiAgb3V0cHV0X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgcmVzcG9uc2UuXG4gICAqL1xuICByZXNwb25zZV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZXZlbnQgdHlwZSwgbXVzdCBiZSBgcmVzcG9uc2UuYXVkaW9fdHJhbnNjcmlwdC5kZWx0YWAuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2UuYXVkaW9fdHJhbnNjcmlwdC5kZWx0YSc7XG59XG5cbi8qKlxuICogUmV0dXJuZWQgd2hlbiB0aGUgbW9kZWwtZ2VuZXJhdGVkIHRyYW5zY3JpcHRpb24gb2YgYXVkaW8gb3V0cHV0IGlzIGRvbmVcbiAqIHN0cmVhbWluZy4gQWxzbyBlbWl0dGVkIHdoZW4gYSBSZXNwb25zZSBpcyBpbnRlcnJ1cHRlZCwgaW5jb21wbGV0ZSwgb3JcbiAqIGNhbmNlbGxlZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUF1ZGlvVHJhbnNjcmlwdERvbmVFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIGNvbnRlbnQgcGFydCBpbiB0aGUgaXRlbSdzIGNvbnRlbnQgYXJyYXkuXG4gICAqL1xuICBjb250ZW50X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHNlcnZlciBldmVudC5cbiAgICovXG4gIGV2ZW50X2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgaXRlbS5cbiAgICovXG4gIGl0ZW1faWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBvdXRwdXQgaXRlbSBpbiB0aGUgcmVzcG9uc2UuXG4gICAqL1xuICBvdXRwdXRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSByZXNwb25zZS5cbiAgICovXG4gIHJlc3BvbnNlX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBmaW5hbCB0cmFuc2NyaXB0IG9mIHRoZSBhdWRpby5cbiAgICovXG4gIHRyYW5zY3JpcHQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGV2ZW50IHR5cGUsIG11c3QgYmUgYHJlc3BvbnNlLmF1ZGlvX3RyYW5zY3JpcHQuZG9uZWAuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2UuYXVkaW9fdHJhbnNjcmlwdC5kb25lJztcbn1cblxuLyoqXG4gKiBTZW5kIHRoaXMgZXZlbnQgdG8gY2FuY2VsIGFuIGluLXByb2dyZXNzIHJlc3BvbnNlLiBUaGUgc2VydmVyIHdpbGwgcmVzcG9uZCB3aXRoXG4gKiBhIGByZXNwb25zZS5jYW5jZWxsZWRgIGV2ZW50IG9yIGFuIGVycm9yIGlmIHRoZXJlIGlzIG5vIHJlc3BvbnNlIHRvIGNhbmNlbC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUNhbmNlbEV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBldmVudCB0eXBlLCBtdXN0IGJlIGByZXNwb25zZS5jYW5jZWxgLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLmNhbmNlbCc7XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsIGNsaWVudC1nZW5lcmF0ZWQgSUQgdXNlZCB0byBpZGVudGlmeSB0aGlzIGV2ZW50LlxuICAgKi9cbiAgZXZlbnRfaWQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lmaWMgcmVzcG9uc2UgSUQgdG8gY2FuY2VsIC0gaWYgbm90IHByb3ZpZGVkLCB3aWxsIGNhbmNlbCBhbiBpbi1wcm9ncmVzc1xuICAgKiByZXNwb25zZSBpbiB0aGUgZGVmYXVsdCBjb252ZXJzYXRpb24uXG4gICAqL1xuICByZXNwb25zZV9pZD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBSZXR1cm5lZCB3aGVuIGEgbmV3IGNvbnRlbnQgcGFydCBpcyBhZGRlZCB0byBhbiBhc3Npc3RhbnQgbWVzc2FnZSBpdGVtIGR1cmluZ1xuICogcmVzcG9uc2UgZ2VuZXJhdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUNvbnRlbnRQYXJ0QWRkZWRFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIGNvbnRlbnQgcGFydCBpbiB0aGUgaXRlbSdzIGNvbnRlbnQgYXJyYXkuXG4gICAqL1xuICBjb250ZW50X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHNlcnZlciBldmVudC5cbiAgICovXG4gIGV2ZW50X2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgaXRlbSB0byB3aGljaCB0aGUgY29udGVudCBwYXJ0IHdhcyBhZGRlZC5cbiAgICovXG4gIGl0ZW1faWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBvdXRwdXQgaXRlbSBpbiB0aGUgcmVzcG9uc2UuXG4gICAqL1xuICBvdXRwdXRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgcGFydCB0aGF0IHdhcyBhZGRlZC5cbiAgICovXG4gIHBhcnQ6IFJlc3BvbnNlQ29udGVudFBhcnRBZGRlZEV2ZW50LlBhcnQ7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgcmVzcG9uc2UuXG4gICAqL1xuICByZXNwb25zZV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZXZlbnQgdHlwZSwgbXVzdCBiZSBgcmVzcG9uc2UuY29udGVudF9wYXJ0LmFkZGVkYC5cbiAgICovXG4gIHR5cGU6ICdyZXNwb25zZS5jb250ZW50X3BhcnQuYWRkZWQnO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFJlc3BvbnNlQ29udGVudFBhcnRBZGRlZEV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IHBhcnQgdGhhdCB3YXMgYWRkZWQuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFBhcnQge1xuICAgIC8qKlxuICAgICAqIEJhc2U2NC1lbmNvZGVkIGF1ZGlvIGRhdGEgKGlmIHR5cGUgaXMgXCJhdWRpb1wiKS5cbiAgICAgKi9cbiAgICBhdWRpbz86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0ZXh0IGNvbnRlbnQgKGlmIHR5cGUgaXMgXCJ0ZXh0XCIpLlxuICAgICAqL1xuICAgIHRleHQ/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHJhbnNjcmlwdCBvZiB0aGUgYXVkaW8gKGlmIHR5cGUgaXMgXCJhdWRpb1wiKS5cbiAgICAgKi9cbiAgICB0cmFuc2NyaXB0Pzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRlbnQgdHlwZSAoXCJ0ZXh0XCIsIFwiYXVkaW9cIikuXG4gICAgICovXG4gICAgdHlwZT86ICd0ZXh0JyB8ICdhdWRpbyc7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5lZCB3aGVuIGEgY29udGVudCBwYXJ0IGlzIGRvbmUgc3RyZWFtaW5nIGluIGFuIGFzc2lzdGFudCBtZXNzYWdlIGl0ZW0uXG4gKiBBbHNvIGVtaXR0ZWQgd2hlbiBhIFJlc3BvbnNlIGlzIGludGVycnVwdGVkLCBpbmNvbXBsZXRlLCBvciBjYW5jZWxsZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VDb250ZW50UGFydERvbmVFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIGNvbnRlbnQgcGFydCBpbiB0aGUgaXRlbSdzIGNvbnRlbnQgYXJyYXkuXG4gICAqL1xuICBjb250ZW50X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHNlcnZlciBldmVudC5cbiAgICovXG4gIGV2ZW50X2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgaXRlbS5cbiAgICovXG4gIGl0ZW1faWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBvdXRwdXQgaXRlbSBpbiB0aGUgcmVzcG9uc2UuXG4gICAqL1xuICBvdXRwdXRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgcGFydCB0aGF0IGlzIGRvbmUuXG4gICAqL1xuICBwYXJ0OiBSZXNwb25zZUNvbnRlbnRQYXJ0RG9uZUV2ZW50LlBhcnQ7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgcmVzcG9uc2UuXG4gICAqL1xuICByZXNwb25zZV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZXZlbnQgdHlwZSwgbXVzdCBiZSBgcmVzcG9uc2UuY29udGVudF9wYXJ0LmRvbmVgLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLmNvbnRlbnRfcGFydC5kb25lJztcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBSZXNwb25zZUNvbnRlbnRQYXJ0RG9uZUV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IHBhcnQgdGhhdCBpcyBkb25lLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBQYXJ0IHtcbiAgICAvKipcbiAgICAgKiBCYXNlNjQtZW5jb2RlZCBhdWRpbyBkYXRhIChpZiB0eXBlIGlzIFwiYXVkaW9cIikuXG4gICAgICovXG4gICAgYXVkaW8/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGV4dCBjb250ZW50IChpZiB0eXBlIGlzIFwidGV4dFwiKS5cbiAgICAgKi9cbiAgICB0ZXh0Pzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRyYW5zY3JpcHQgb2YgdGhlIGF1ZGlvIChpZiB0eXBlIGlzIFwiYXVkaW9cIikuXG4gICAgICovXG4gICAgdHJhbnNjcmlwdD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBjb250ZW50IHR5cGUgKFwidGV4dFwiLCBcImF1ZGlvXCIpLlxuICAgICAqL1xuICAgIHR5cGU/OiAndGV4dCcgfCAnYXVkaW8nO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBldmVudCBpbnN0cnVjdHMgdGhlIHNlcnZlciB0byBjcmVhdGUgYSBSZXNwb25zZSwgd2hpY2ggbWVhbnMgdHJpZ2dlcmluZ1xuICogbW9kZWwgaW5mZXJlbmNlLiBXaGVuIGluIFNlcnZlciBWQUQgbW9kZSwgdGhlIHNlcnZlciB3aWxsIGNyZWF0ZSBSZXNwb25zZXNcbiAqIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogQSBSZXNwb25zZSB3aWxsIGluY2x1ZGUgYXQgbGVhc3Qgb25lIEl0ZW0sIGFuZCBtYXkgaGF2ZSB0d28sIGluIHdoaWNoIGNhc2UgdGhlXG4gKiBzZWNvbmQgd2lsbCBiZSBhIGZ1bmN0aW9uIGNhbGwuIFRoZXNlIEl0ZW1zIHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhlIGNvbnZlcnNhdGlvblxuICogaGlzdG9yeS5cbiAqXG4gKiBUaGUgc2VydmVyIHdpbGwgcmVzcG9uZCB3aXRoIGEgYHJlc3BvbnNlLmNyZWF0ZWRgIGV2ZW50LCBldmVudHMgZm9yIEl0ZW1zIGFuZFxuICogY29udGVudCBjcmVhdGVkLCBhbmQgZmluYWxseSBhIGByZXNwb25zZS5kb25lYCBldmVudCB0byBpbmRpY2F0ZSB0aGUgUmVzcG9uc2UgaXNcbiAqIGNvbXBsZXRlLlxuICpcbiAqIFRoZSBgcmVzcG9uc2UuY3JlYXRlYCBldmVudCBpbmNsdWRlcyBpbmZlcmVuY2UgY29uZmlndXJhdGlvbiBsaWtlXG4gKiBgaW5zdHJ1Y3Rpb25zYCwgYW5kIGB0ZW1wZXJhdHVyZWAuIFRoZXNlIGZpZWxkcyB3aWxsIG92ZXJyaWRlIHRoZSBTZXNzaW9uJ3NcbiAqIGNvbmZpZ3VyYXRpb24gZm9yIHRoaXMgUmVzcG9uc2Ugb25seS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUNyZWF0ZUV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBldmVudCB0eXBlLCBtdXN0IGJlIGByZXNwb25zZS5jcmVhdGVgLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLmNyZWF0ZSc7XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsIGNsaWVudC1nZW5lcmF0ZWQgSUQgdXNlZCB0byBpZGVudGlmeSB0aGlzIGV2ZW50LlxuICAgKi9cbiAgZXZlbnRfaWQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBSZWFsdGltZSByZXNwb25zZSB3aXRoIHRoZXNlIHBhcmFtZXRlcnNcbiAgICovXG4gIHJlc3BvbnNlPzogUmVzcG9uc2VDcmVhdGVFdmVudC5SZXNwb25zZTtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBSZXNwb25zZUNyZWF0ZUV2ZW50IHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBSZWFsdGltZSByZXNwb25zZSB3aXRoIHRoZXNlIHBhcmFtZXRlcnNcbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2Uge1xuICAgIC8qKlxuICAgICAqIENvbnRyb2xzIHdoaWNoIGNvbnZlcnNhdGlvbiB0aGUgcmVzcG9uc2UgaXMgYWRkZWQgdG8uIEN1cnJlbnRseSBzdXBwb3J0cyBgYXV0b2BcbiAgICAgKiBhbmQgYG5vbmVgLCB3aXRoIGBhdXRvYCBhcyB0aGUgZGVmYXVsdCB2YWx1ZS4gVGhlIGBhdXRvYCB2YWx1ZSBtZWFucyB0aGF0IHRoZVxuICAgICAqIGNvbnRlbnRzIG9mIHRoZSByZXNwb25zZSB3aWxsIGJlIGFkZGVkIHRvIHRoZSBkZWZhdWx0IGNvbnZlcnNhdGlvbi4gU2V0IHRoaXMgdG9cbiAgICAgKiBgbm9uZWAgdG8gY3JlYXRlIGFuIG91dC1vZi1iYW5kIHJlc3BvbnNlIHdoaWNoIHdpbGwgbm90IGFkZCBpdGVtcyB0byBkZWZhdWx0XG4gICAgICogY29udmVyc2F0aW9uLlxuICAgICAqL1xuICAgIGNvbnZlcnNhdGlvbj86IChzdHJpbmcgJiB7fSkgfCAnYXV0bycgfCAnbm9uZSc7XG5cbiAgICAvKipcbiAgICAgKiBJbnB1dCBpdGVtcyB0byBpbmNsdWRlIGluIHRoZSBwcm9tcHQgZm9yIHRoZSBtb2RlbC4gVXNpbmcgdGhpcyBmaWVsZCBjcmVhdGVzIGFcbiAgICAgKiBuZXcgY29udGV4dCBmb3IgdGhpcyBSZXNwb25zZSBpbnN0ZWFkIG9mIHVzaW5nIHRoZSBkZWZhdWx0IGNvbnZlcnNhdGlvbi4gQW5cbiAgICAgKiBlbXB0eSBhcnJheSBgW11gIHdpbGwgY2xlYXIgdGhlIGNvbnRleHQgZm9yIHRoaXMgUmVzcG9uc2UuIE5vdGUgdGhhdCB0aGlzIGNhblxuICAgICAqIGluY2x1ZGUgcmVmZXJlbmNlcyB0byBpdGVtcyBmcm9tIHRoZSBkZWZhdWx0IGNvbnZlcnNhdGlvbi5cbiAgICAgKi9cbiAgICBpbnB1dD86IEFycmF5PFJlYWx0aW1lQVBJLkNvbnZlcnNhdGlvbkl0ZW1XaXRoUmVmZXJlbmNlPjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBkZWZhdWx0IHN5c3RlbSBpbnN0cnVjdGlvbnMgKGkuZS4gc3lzdGVtIG1lc3NhZ2UpIHByZXBlbmRlZCB0byBtb2RlbCBjYWxscy5cbiAgICAgKiBUaGlzIGZpZWxkIGFsbG93cyB0aGUgY2xpZW50IHRvIGd1aWRlIHRoZSBtb2RlbCBvbiBkZXNpcmVkIHJlc3BvbnNlcy4gVGhlIG1vZGVsXG4gICAgICogY2FuIGJlIGluc3RydWN0ZWQgb24gcmVzcG9uc2UgY29udGVudCBhbmQgZm9ybWF0LCAoZS5nLiBcImJlIGV4dHJlbWVseSBzdWNjaW5jdFwiLFxuICAgICAqIFwiYWN0IGZyaWVuZGx5XCIsIFwiaGVyZSBhcmUgZXhhbXBsZXMgb2YgZ29vZCByZXNwb25zZXNcIikgYW5kIG9uIGF1ZGlvIGJlaGF2aW9yXG4gICAgICogKGUuZy4gXCJ0YWxrIHF1aWNrbHlcIiwgXCJpbmplY3QgZW1vdGlvbiBpbnRvIHlvdXIgdm9pY2VcIiwgXCJsYXVnaCBmcmVxdWVudGx5XCIpLiBUaGVcbiAgICAgKiBpbnN0cnVjdGlvbnMgYXJlIG5vdCBndWFyYW50ZWVkIHRvIGJlIGZvbGxvd2VkIGJ5IHRoZSBtb2RlbCwgYnV0IHRoZXkgcHJvdmlkZVxuICAgICAqIGd1aWRhbmNlIHRvIHRoZSBtb2RlbCBvbiB0aGUgZGVzaXJlZCBiZWhhdmlvci5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCB0aGUgc2VydmVyIHNldHMgZGVmYXVsdCBpbnN0cnVjdGlvbnMgd2hpY2ggd2lsbCBiZSB1c2VkIGlmIHRoaXMgZmllbGRcbiAgICAgKiBpcyBub3Qgc2V0IGFuZCBhcmUgdmlzaWJsZSBpbiB0aGUgYHNlc3Npb24uY3JlYXRlZGAgZXZlbnQgYXQgdGhlIHN0YXJ0IG9mIHRoZVxuICAgICAqIHNlc3Npb24uXG4gICAgICovXG4gICAgaW5zdHJ1Y3Rpb25zPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogTWF4aW11bSBudW1iZXIgb2Ygb3V0cHV0IHRva2VucyBmb3IgYSBzaW5nbGUgYXNzaXN0YW50IHJlc3BvbnNlLCBpbmNsdXNpdmUgb2ZcbiAgICAgKiB0b29sIGNhbGxzLiBQcm92aWRlIGFuIGludGVnZXIgYmV0d2VlbiAxIGFuZCA0MDk2IHRvIGxpbWl0IG91dHB1dCB0b2tlbnMsIG9yXG4gICAgICogYGluZmAgZm9yIHRoZSBtYXhpbXVtIGF2YWlsYWJsZSB0b2tlbnMgZm9yIGEgZ2l2ZW4gbW9kZWwuIERlZmF1bHRzIHRvIGBpbmZgLlxuICAgICAqL1xuICAgIG1heF9yZXNwb25zZV9vdXRwdXRfdG9rZW5zPzogbnVtYmVyIHwgJ2luZic7XG5cbiAgICAvKipcbiAgICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAgICogZm9yIHN0b3JpbmcgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb2JqZWN0IGluIGEgc3RydWN0dXJlZCBmb3JtYXQsIGFuZFxuICAgICAqIHF1ZXJ5aW5nIGZvciBvYmplY3RzIHZpYSBBUEkgb3IgdGhlIGRhc2hib2FyZC5cbiAgICAgKlxuICAgICAqIEtleXMgYXJlIHN0cmluZ3Mgd2l0aCBhIG1heGltdW0gbGVuZ3RoIG9mIDY0IGNoYXJhY3RlcnMuIFZhbHVlcyBhcmUgc3RyaW5ncyB3aXRoXG4gICAgICogYSBtYXhpbXVtIGxlbmd0aCBvZiA1MTIgY2hhcmFjdGVycy5cbiAgICAgKi9cbiAgICBtZXRhZGF0YT86IFNoYXJlZC5NZXRhZGF0YSB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2V0IG9mIG1vZGFsaXRpZXMgdGhlIG1vZGVsIGNhbiByZXNwb25kIHdpdGguIFRvIGRpc2FibGUgYXVkaW8sIHNldCB0aGlzIHRvXG4gICAgICogW1widGV4dFwiXS5cbiAgICAgKi9cbiAgICBtb2RhbGl0aWVzPzogQXJyYXk8J3RleHQnIHwgJ2F1ZGlvJz47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZm9ybWF0IG9mIG91dHB1dCBhdWRpby4gT3B0aW9ucyBhcmUgYHBjbTE2YCwgYGc3MTFfdWxhd2AsIG9yIGBnNzExX2FsYXdgLlxuICAgICAqL1xuICAgIG91dHB1dF9hdWRpb19mb3JtYXQ/OiAncGNtMTYnIHwgJ2c3MTFfdWxhdycgfCAnZzcxMV9hbGF3JztcblxuICAgIC8qKlxuICAgICAqIFNhbXBsaW5nIHRlbXBlcmF0dXJlIGZvciB0aGUgbW9kZWwsIGxpbWl0ZWQgdG8gWzAuNiwgMS4yXS4gRGVmYXVsdHMgdG8gMC44LlxuICAgICAqL1xuICAgIHRlbXBlcmF0dXJlPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogSG93IHRoZSBtb2RlbCBjaG9vc2VzIHRvb2xzLiBPcHRpb25zIGFyZSBgYXV0b2AsIGBub25lYCwgYHJlcXVpcmVkYCwgb3Igc3BlY2lmeVxuICAgICAqIGEgZnVuY3Rpb24sIGxpa2UgYHtcInR5cGVcIjogXCJmdW5jdGlvblwiLCBcImZ1bmN0aW9uXCI6IHtcIm5hbWVcIjogXCJteV9mdW5jdGlvblwifX1gLlxuICAgICAqL1xuICAgIHRvb2xfY2hvaWNlPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVG9vbHMgKGZ1bmN0aW9ucykgYXZhaWxhYmxlIHRvIHRoZSBtb2RlbC5cbiAgICAgKi9cbiAgICB0b29scz86IEFycmF5PFJlc3BvbnNlLlRvb2w+O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHZvaWNlIHRoZSBtb2RlbCB1c2VzIHRvIHJlc3BvbmQuIFZvaWNlIGNhbm5vdCBiZSBjaGFuZ2VkIGR1cmluZyB0aGUgc2Vzc2lvblxuICAgICAqIG9uY2UgdGhlIG1vZGVsIGhhcyByZXNwb25kZWQgd2l0aCBhdWRpbyBhdCBsZWFzdCBvbmNlLiBDdXJyZW50IHZvaWNlIG9wdGlvbnMgYXJlXG4gICAgICogYGFsbG95YCwgYGFzaGAsIGBiYWxsYWRgLCBgY29yYWxgLCBgZWNob2AsIGBmYWJsZWAsIGBvbnl4YCwgYG5vdmFgLCBgc2FnZWAsXG4gICAgICogYHNoaW1tZXJgLCBhbmQgYHZlcnNlYC5cbiAgICAgKi9cbiAgICB2b2ljZT86XG4gICAgICB8IChzdHJpbmcgJiB7fSlcbiAgICAgIHwgJ2FsbG95J1xuICAgICAgfCAnYXNoJ1xuICAgICAgfCAnYmFsbGFkJ1xuICAgICAgfCAnY29yYWwnXG4gICAgICB8ICdlY2hvJ1xuICAgICAgfCAnZmFibGUnXG4gICAgICB8ICdvbnl4J1xuICAgICAgfCAnbm92YSdcbiAgICAgIHwgJ3NhZ2UnXG4gICAgICB8ICdzaGltbWVyJ1xuICAgICAgfCAndmVyc2UnO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBSZXNwb25zZSB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBUb29sIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBmdW5jdGlvbiwgaW5jbHVkaW5nIGd1aWRhbmNlIG9uIHdoZW4gYW5kIGhvdyB0byBjYWxsIGl0LFxuICAgICAgICogYW5kIGd1aWRhbmNlIGFib3V0IHdoYXQgdG8gdGVsbCB0aGUgdXNlciB3aGVuIGNhbGxpbmcgKGlmIGFueXRoaW5nKS5cbiAgICAgICAqL1xuICAgICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uLlxuICAgICAgICovXG4gICAgICBuYW1lPzogc3RyaW5nO1xuXG4gICAgICAvKipcbiAgICAgICAqIFBhcmFtZXRlcnMgb2YgdGhlIGZ1bmN0aW9uIGluIEpTT04gU2NoZW1hLlxuICAgICAgICovXG4gICAgICBwYXJhbWV0ZXJzPzogdW5rbm93bjtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdHlwZSBvZiB0aGUgdG9vbCwgaS5lLiBgZnVuY3Rpb25gLlxuICAgICAgICovXG4gICAgICB0eXBlPzogJ2Z1bmN0aW9uJztcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5lZCB3aGVuIGEgbmV3IFJlc3BvbnNlIGlzIGNyZWF0ZWQuIFRoZSBmaXJzdCBldmVudCBvZiByZXNwb25zZSBjcmVhdGlvbixcbiAqIHdoZXJlIHRoZSByZXNwb25zZSBpcyBpbiBhbiBpbml0aWFsIHN0YXRlIG9mIGBpbl9wcm9ncmVzc2AuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VDcmVhdGVkRXZlbnQge1xuICAvKipcbiAgICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgc2VydmVyIGV2ZW50LlxuICAgKi9cbiAgZXZlbnRfaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHJlc3BvbnNlIHJlc291cmNlLlxuICAgKi9cbiAgcmVzcG9uc2U6IFJlYWx0aW1lUmVzcG9uc2U7XG5cbiAgLyoqXG4gICAqIFRoZSBldmVudCB0eXBlLCBtdXN0IGJlIGByZXNwb25zZS5jcmVhdGVkYC5cbiAgICovXG4gIHR5cGU6ICdyZXNwb25zZS5jcmVhdGVkJztcbn1cblxuLyoqXG4gKiBSZXR1cm5lZCB3aGVuIGEgUmVzcG9uc2UgaXMgZG9uZSBzdHJlYW1pbmcuIEFsd2F5cyBlbWl0dGVkLCBubyBtYXR0ZXIgdGhlIGZpbmFsXG4gKiBzdGF0ZS4gVGhlIFJlc3BvbnNlIG9iamVjdCBpbmNsdWRlZCBpbiB0aGUgYHJlc3BvbnNlLmRvbmVgIGV2ZW50IHdpbGwgaW5jbHVkZVxuICogYWxsIG91dHB1dCBJdGVtcyBpbiB0aGUgUmVzcG9uc2UgYnV0IHdpbGwgb21pdCB0aGUgcmF3IGF1ZGlvIGRhdGEuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VEb25lRXZlbnQge1xuICAvKipcbiAgICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgc2VydmVyIGV2ZW50LlxuICAgKi9cbiAgZXZlbnRfaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHJlc3BvbnNlIHJlc291cmNlLlxuICAgKi9cbiAgcmVzcG9uc2U6IFJlYWx0aW1lUmVzcG9uc2U7XG5cbiAgLyoqXG4gICAqIFRoZSBldmVudCB0eXBlLCBtdXN0IGJlIGByZXNwb25zZS5kb25lYC5cbiAgICovXG4gIHR5cGU6ICdyZXNwb25zZS5kb25lJztcbn1cblxuLyoqXG4gKiBSZXR1cm5lZCB3aGVuIHRoZSBtb2RlbC1nZW5lcmF0ZWQgZnVuY3Rpb24gY2FsbCBhcmd1bWVudHMgYXJlIHVwZGF0ZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VGdW5jdGlvbkNhbGxBcmd1bWVudHNEZWx0YUV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgZnVuY3Rpb24gY2FsbC5cbiAgICovXG4gIGNhbGxfaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGFyZ3VtZW50cyBkZWx0YSBhcyBhIEpTT04gc3RyaW5nLlxuICAgKi9cbiAgZGVsdGE6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgc2VydmVyIGV2ZW50LlxuICAgKi9cbiAgZXZlbnRfaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBmdW5jdGlvbiBjYWxsIGl0ZW0uXG4gICAqL1xuICBpdGVtX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgb3V0cHV0IGl0ZW0gaW4gdGhlIHJlc3BvbnNlLlxuICAgKi9cbiAgb3V0cHV0X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgcmVzcG9uc2UuXG4gICAqL1xuICByZXNwb25zZV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZXZlbnQgdHlwZSwgbXVzdCBiZSBgcmVzcG9uc2UuZnVuY3Rpb25fY2FsbF9hcmd1bWVudHMuZGVsdGFgLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLmZ1bmN0aW9uX2NhbGxfYXJndW1lbnRzLmRlbHRhJztcbn1cblxuLyoqXG4gKiBSZXR1cm5lZCB3aGVuIHRoZSBtb2RlbC1nZW5lcmF0ZWQgZnVuY3Rpb24gY2FsbCBhcmd1bWVudHMgYXJlIGRvbmUgc3RyZWFtaW5nLlxuICogQWxzbyBlbWl0dGVkIHdoZW4gYSBSZXNwb25zZSBpcyBpbnRlcnJ1cHRlZCwgaW5jb21wbGV0ZSwgb3IgY2FuY2VsbGVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlRnVuY3Rpb25DYWxsQXJndW1lbnRzRG9uZUV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBmaW5hbCBhcmd1bWVudHMgYXMgYSBKU09OIHN0cmluZy5cbiAgICovXG4gIGFyZ3VtZW50czogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIGZ1bmN0aW9uIGNhbGwuXG4gICAqL1xuICBjYWxsX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHNlcnZlciBldmVudC5cbiAgICovXG4gIGV2ZW50X2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgZnVuY3Rpb24gY2FsbCBpdGVtLlxuICAgKi9cbiAgaXRlbV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIG91dHB1dCBpdGVtIGluIHRoZSByZXNwb25zZS5cbiAgICovXG4gIG91dHB1dF9pbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIHJlc3BvbnNlLlxuICAgKi9cbiAgcmVzcG9uc2VfaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGV2ZW50IHR5cGUsIG11c3QgYmUgYHJlc3BvbnNlLmZ1bmN0aW9uX2NhbGxfYXJndW1lbnRzLmRvbmVgLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLmZ1bmN0aW9uX2NhbGxfYXJndW1lbnRzLmRvbmUnO1xufVxuXG4vKipcbiAqIFJldHVybmVkIHdoZW4gYSBuZXcgSXRlbSBpcyBjcmVhdGVkIGR1cmluZyBSZXNwb25zZSBnZW5lcmF0aW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlT3V0cHV0SXRlbUFkZGVkRXZlbnQge1xuICAvKipcbiAgICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgc2VydmVyIGV2ZW50LlxuICAgKi9cbiAgZXZlbnRfaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGl0ZW0gdG8gYWRkIHRvIHRoZSBjb252ZXJzYXRpb24uXG4gICAqL1xuICBpdGVtOiBDb252ZXJzYXRpb25JdGVtO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIG91dHB1dCBpdGVtIGluIHRoZSBSZXNwb25zZS5cbiAgICovXG4gIG91dHB1dF9pbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIFJlc3BvbnNlIHRvIHdoaWNoIHRoZSBpdGVtIGJlbG9uZ3MuXG4gICAqL1xuICByZXNwb25zZV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZXZlbnQgdHlwZSwgbXVzdCBiZSBgcmVzcG9uc2Uub3V0cHV0X2l0ZW0uYWRkZWRgLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLm91dHB1dF9pdGVtLmFkZGVkJztcbn1cblxuLyoqXG4gKiBSZXR1cm5lZCB3aGVuIGFuIEl0ZW0gaXMgZG9uZSBzdHJlYW1pbmcuIEFsc28gZW1pdHRlZCB3aGVuIGEgUmVzcG9uc2UgaXNcbiAqIGludGVycnVwdGVkLCBpbmNvbXBsZXRlLCBvciBjYW5jZWxsZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VPdXRwdXRJdGVtRG9uZUV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHNlcnZlciBldmVudC5cbiAgICovXG4gIGV2ZW50X2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBpdGVtIHRvIGFkZCB0byB0aGUgY29udmVyc2F0aW9uLlxuICAgKi9cbiAgaXRlbTogQ29udmVyc2F0aW9uSXRlbTtcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBvdXRwdXQgaXRlbSBpbiB0aGUgUmVzcG9uc2UuXG4gICAqL1xuICBvdXRwdXRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBSZXNwb25zZSB0byB3aGljaCB0aGUgaXRlbSBiZWxvbmdzLlxuICAgKi9cbiAgcmVzcG9uc2VfaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGV2ZW50IHR5cGUsIG11c3QgYmUgYHJlc3BvbnNlLm91dHB1dF9pdGVtLmRvbmVgLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLm91dHB1dF9pdGVtLmRvbmUnO1xufVxuXG4vKipcbiAqIFJldHVybmVkIHdoZW4gdGhlIHRleHQgdmFsdWUgb2YgYSBcInRleHRcIiBjb250ZW50IHBhcnQgaXMgdXBkYXRlZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZVRleHREZWx0YUV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgY29udGVudCBwYXJ0IGluIHRoZSBpdGVtJ3MgY29udGVudCBhcnJheS5cbiAgICovXG4gIGNvbnRlbnRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHRleHQgZGVsdGEuXG4gICAqL1xuICBkZWx0YTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBzZXJ2ZXIgZXZlbnQuXG4gICAqL1xuICBldmVudF9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIGl0ZW0uXG4gICAqL1xuICBpdGVtX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgb3V0cHV0IGl0ZW0gaW4gdGhlIHJlc3BvbnNlLlxuICAgKi9cbiAgb3V0cHV0X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgcmVzcG9uc2UuXG4gICAqL1xuICByZXNwb25zZV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZXZlbnQgdHlwZSwgbXVzdCBiZSBgcmVzcG9uc2UudGV4dC5kZWx0YWAuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2UudGV4dC5kZWx0YSc7XG59XG5cbi8qKlxuICogUmV0dXJuZWQgd2hlbiB0aGUgdGV4dCB2YWx1ZSBvZiBhIFwidGV4dFwiIGNvbnRlbnQgcGFydCBpcyBkb25lIHN0cmVhbWluZy4gQWxzb1xuICogZW1pdHRlZCB3aGVuIGEgUmVzcG9uc2UgaXMgaW50ZXJydXB0ZWQsIGluY29tcGxldGUsIG9yIGNhbmNlbGxlZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZVRleHREb25lRXZlbnQge1xuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBjb250ZW50IHBhcnQgaW4gdGhlIGl0ZW0ncyBjb250ZW50IGFycmF5LlxuICAgKi9cbiAgY29udGVudF9pbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBzZXJ2ZXIgZXZlbnQuXG4gICAqL1xuICBldmVudF9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIGl0ZW0uXG4gICAqL1xuICBpdGVtX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgb3V0cHV0IGl0ZW0gaW4gdGhlIHJlc3BvbnNlLlxuICAgKi9cbiAgb3V0cHV0X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgcmVzcG9uc2UuXG4gICAqL1xuICByZXNwb25zZV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZmluYWwgdGV4dCBjb250ZW50LlxuICAgKi9cbiAgdGV4dDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZXZlbnQgdHlwZSwgbXVzdCBiZSBgcmVzcG9uc2UudGV4dC5kb25lYC5cbiAgICovXG4gIHR5cGU6ICdyZXNwb25zZS50ZXh0LmRvbmUnO1xufVxuXG4vKipcbiAqIFJldHVybmVkIHdoZW4gYSBTZXNzaW9uIGlzIGNyZWF0ZWQuIEVtaXR0ZWQgYXV0b21hdGljYWxseSB3aGVuIGEgbmV3IGNvbm5lY3Rpb25cbiAqIGlzIGVzdGFibGlzaGVkIGFzIHRoZSBmaXJzdCBzZXJ2ZXIgZXZlbnQuIFRoaXMgZXZlbnQgd2lsbCBjb250YWluIHRoZSBkZWZhdWx0XG4gKiBTZXNzaW9uIGNvbmZpZ3VyYXRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2Vzc2lvbkNyZWF0ZWRFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBzZXJ2ZXIgZXZlbnQuXG4gICAqL1xuICBldmVudF9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBSZWFsdGltZSBzZXNzaW9uIG9iamVjdCBjb25maWd1cmF0aW9uLlxuICAgKi9cbiAgc2Vzc2lvbjogU2Vzc2lvbnNBUEkuU2Vzc2lvbjtcblxuICAvKipcbiAgICogVGhlIGV2ZW50IHR5cGUsIG11c3QgYmUgYHNlc3Npb24uY3JlYXRlZGAuXG4gICAqL1xuICB0eXBlOiAnc2Vzc2lvbi5jcmVhdGVkJztcbn1cblxuLyoqXG4gKiBTZW5kIHRoaXMgZXZlbnQgdG8gdXBkYXRlIHRoZSBzZXNzaW9uXHUyMDE5cyBkZWZhdWx0IGNvbmZpZ3VyYXRpb24uIFRoZSBjbGllbnQgbWF5XG4gKiBzZW5kIHRoaXMgZXZlbnQgYXQgYW55IHRpbWUgdG8gdXBkYXRlIGFueSBmaWVsZCwgZXhjZXB0IGZvciBgdm9pY2VgLiBIb3dldmVyLFxuICogbm90ZSB0aGF0IG9uY2UgYSBzZXNzaW9uIGhhcyBiZWVuIGluaXRpYWxpemVkIHdpdGggYSBwYXJ0aWN1bGFyIGBtb2RlbGAsIGl0XG4gKiBjYW5cdTIwMTl0IGJlIGNoYW5nZWQgdG8gYW5vdGhlciBtb2RlbCB1c2luZyBgc2Vzc2lvbi51cGRhdGVgLlxuICpcbiAqIFdoZW4gdGhlIHNlcnZlciByZWNlaXZlcyBhIGBzZXNzaW9uLnVwZGF0ZWAsIGl0IHdpbGwgcmVzcG9uZCB3aXRoIGFcbiAqIGBzZXNzaW9uLnVwZGF0ZWRgIGV2ZW50IHNob3dpbmcgdGhlIGZ1bGwsIGVmZmVjdGl2ZSBjb25maWd1cmF0aW9uLiBPbmx5IHRoZVxuICogZmllbGRzIHRoYXQgYXJlIHByZXNlbnQgYXJlIHVwZGF0ZWQuIFRvIGNsZWFyIGEgZmllbGQgbGlrZSBgaW5zdHJ1Y3Rpb25zYCwgcGFzc1xuICogYW4gZW1wdHkgc3RyaW5nLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNlc3Npb25VcGRhdGVFdmVudCB7XG4gIC8qKlxuICAgKiBSZWFsdGltZSBzZXNzaW9uIG9iamVjdCBjb25maWd1cmF0aW9uLlxuICAgKi9cbiAgc2Vzc2lvbjogU2Vzc2lvblVwZGF0ZUV2ZW50LlNlc3Npb247XG5cbiAgLyoqXG4gICAqIFRoZSBldmVudCB0eXBlLCBtdXN0IGJlIGBzZXNzaW9uLnVwZGF0ZWAuXG4gICAqL1xuICB0eXBlOiAnc2Vzc2lvbi51cGRhdGUnO1xuXG4gIC8qKlxuICAgKiBPcHRpb25hbCBjbGllbnQtZ2VuZXJhdGVkIElEIHVzZWQgdG8gaWRlbnRpZnkgdGhpcyBldmVudC5cbiAgICovXG4gIGV2ZW50X2lkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFNlc3Npb25VcGRhdGVFdmVudCB7XG4gIC8qKlxuICAgKiBSZWFsdGltZSBzZXNzaW9uIG9iamVjdCBjb25maWd1cmF0aW9uLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBTZXNzaW9uIHtcbiAgICAvKipcbiAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBnZW5lcmF0ZWQgY2xpZW50IHNlY3JldC5cbiAgICAgKi9cbiAgICBjbGllbnRfc2VjcmV0PzogU2Vzc2lvbi5DbGllbnRTZWNyZXQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZm9ybWF0IG9mIGlucHV0IGF1ZGlvLiBPcHRpb25zIGFyZSBgcGNtMTZgLCBgZzcxMV91bGF3YCwgb3IgYGc3MTFfYWxhd2AuIEZvclxuICAgICAqIGBwY20xNmAsIGlucHV0IGF1ZGlvIG11c3QgYmUgMTYtYml0IFBDTSBhdCBhIDI0a0h6IHNhbXBsZSByYXRlLCBzaW5nbGUgY2hhbm5lbFxuICAgICAqIChtb25vKSwgYW5kIGxpdHRsZS1lbmRpYW4gYnl0ZSBvcmRlci5cbiAgICAgKi9cbiAgICBpbnB1dF9hdWRpb19mb3JtYXQ/OiAncGNtMTYnIHwgJ2c3MTFfdWxhdycgfCAnZzcxMV9hbGF3JztcblxuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyYXRpb24gZm9yIGlucHV0IGF1ZGlvIG5vaXNlIHJlZHVjdGlvbi4gVGhpcyBjYW4gYmUgc2V0IHRvIGBudWxsYCB0byB0dXJuXG4gICAgICogb2ZmLiBOb2lzZSByZWR1Y3Rpb24gZmlsdGVycyBhdWRpbyBhZGRlZCB0byB0aGUgaW5wdXQgYXVkaW8gYnVmZmVyIGJlZm9yZSBpdCBpc1xuICAgICAqIHNlbnQgdG8gVkFEIGFuZCB0aGUgbW9kZWwuIEZpbHRlcmluZyB0aGUgYXVkaW8gY2FuIGltcHJvdmUgVkFEIGFuZCB0dXJuXG4gICAgICogZGV0ZWN0aW9uIGFjY3VyYWN5IChyZWR1Y2luZyBmYWxzZSBwb3NpdGl2ZXMpIGFuZCBtb2RlbCBwZXJmb3JtYW5jZSBieSBpbXByb3ZpbmdcbiAgICAgKiBwZXJjZXB0aW9uIG9mIHRoZSBpbnB1dCBhdWRpby5cbiAgICAgKi9cbiAgICBpbnB1dF9hdWRpb19ub2lzZV9yZWR1Y3Rpb24/OiBTZXNzaW9uLklucHV0QXVkaW9Ob2lzZVJlZHVjdGlvbjtcblxuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyYXRpb24gZm9yIGlucHV0IGF1ZGlvIHRyYW5zY3JpcHRpb24sIGRlZmF1bHRzIHRvIG9mZiBhbmQgY2FuIGJlIHNldCB0b1xuICAgICAqIGBudWxsYCB0byB0dXJuIG9mZiBvbmNlIG9uLiBJbnB1dCBhdWRpbyB0cmFuc2NyaXB0aW9uIGlzIG5vdCBuYXRpdmUgdG8gdGhlXG4gICAgICogbW9kZWwsIHNpbmNlIHRoZSBtb2RlbCBjb25zdW1lcyBhdWRpbyBkaXJlY3RseS4gVHJhbnNjcmlwdGlvbiBydW5zXG4gICAgICogYXN5bmNocm9ub3VzbHkgdGhyb3VnaFxuICAgICAqIFt0aGUgL2F1ZGlvL3RyYW5zY3JpcHRpb25zIGVuZHBvaW50XShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2F1ZGlvL2NyZWF0ZVRyYW5zY3JpcHRpb24pXG4gICAgICogYW5kIHNob3VsZCBiZSB0cmVhdGVkIGFzIGd1aWRhbmNlIG9mIGlucHV0IGF1ZGlvIGNvbnRlbnQgcmF0aGVyIHRoYW4gcHJlY2lzZWx5XG4gICAgICogd2hhdCB0aGUgbW9kZWwgaGVhcmQuIFRoZSBjbGllbnQgY2FuIG9wdGlvbmFsbHkgc2V0IHRoZSBsYW5ndWFnZSBhbmQgcHJvbXB0IGZvclxuICAgICAqIHRyYW5zY3JpcHRpb24sIHRoZXNlIG9mZmVyIGFkZGl0aW9uYWwgZ3VpZGFuY2UgdG8gdGhlIHRyYW5zY3JpcHRpb24gc2VydmljZS5cbiAgICAgKi9cbiAgICBpbnB1dF9hdWRpb190cmFuc2NyaXB0aW9uPzogU2Vzc2lvbi5JbnB1dEF1ZGlvVHJhbnNjcmlwdGlvbjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBkZWZhdWx0IHN5c3RlbSBpbnN0cnVjdGlvbnMgKGkuZS4gc3lzdGVtIG1lc3NhZ2UpIHByZXBlbmRlZCB0byBtb2RlbCBjYWxscy5cbiAgICAgKiBUaGlzIGZpZWxkIGFsbG93cyB0aGUgY2xpZW50IHRvIGd1aWRlIHRoZSBtb2RlbCBvbiBkZXNpcmVkIHJlc3BvbnNlcy4gVGhlIG1vZGVsXG4gICAgICogY2FuIGJlIGluc3RydWN0ZWQgb24gcmVzcG9uc2UgY29udGVudCBhbmQgZm9ybWF0LCAoZS5nLiBcImJlIGV4dHJlbWVseSBzdWNjaW5jdFwiLFxuICAgICAqIFwiYWN0IGZyaWVuZGx5XCIsIFwiaGVyZSBhcmUgZXhhbXBsZXMgb2YgZ29vZCByZXNwb25zZXNcIikgYW5kIG9uIGF1ZGlvIGJlaGF2aW9yXG4gICAgICogKGUuZy4gXCJ0YWxrIHF1aWNrbHlcIiwgXCJpbmplY3QgZW1vdGlvbiBpbnRvIHlvdXIgdm9pY2VcIiwgXCJsYXVnaCBmcmVxdWVudGx5XCIpLiBUaGVcbiAgICAgKiBpbnN0cnVjdGlvbnMgYXJlIG5vdCBndWFyYW50ZWVkIHRvIGJlIGZvbGxvd2VkIGJ5IHRoZSBtb2RlbCwgYnV0IHRoZXkgcHJvdmlkZVxuICAgICAqIGd1aWRhbmNlIHRvIHRoZSBtb2RlbCBvbiB0aGUgZGVzaXJlZCBiZWhhdmlvci5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCB0aGUgc2VydmVyIHNldHMgZGVmYXVsdCBpbnN0cnVjdGlvbnMgd2hpY2ggd2lsbCBiZSB1c2VkIGlmIHRoaXMgZmllbGRcbiAgICAgKiBpcyBub3Qgc2V0IGFuZCBhcmUgdmlzaWJsZSBpbiB0aGUgYHNlc3Npb24uY3JlYXRlZGAgZXZlbnQgYXQgdGhlIHN0YXJ0IG9mIHRoZVxuICAgICAqIHNlc3Npb24uXG4gICAgICovXG4gICAgaW5zdHJ1Y3Rpb25zPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogTWF4aW11bSBudW1iZXIgb2Ygb3V0cHV0IHRva2VucyBmb3IgYSBzaW5nbGUgYXNzaXN0YW50IHJlc3BvbnNlLCBpbmNsdXNpdmUgb2ZcbiAgICAgKiB0b29sIGNhbGxzLiBQcm92aWRlIGFuIGludGVnZXIgYmV0d2VlbiAxIGFuZCA0MDk2IHRvIGxpbWl0IG91dHB1dCB0b2tlbnMsIG9yXG4gICAgICogYGluZmAgZm9yIHRoZSBtYXhpbXVtIGF2YWlsYWJsZSB0b2tlbnMgZm9yIGEgZ2l2ZW4gbW9kZWwuIERlZmF1bHRzIHRvIGBpbmZgLlxuICAgICAqL1xuICAgIG1heF9yZXNwb25zZV9vdXRwdXRfdG9rZW5zPzogbnVtYmVyIHwgJ2luZic7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2V0IG9mIG1vZGFsaXRpZXMgdGhlIG1vZGVsIGNhbiByZXNwb25kIHdpdGguIFRvIGRpc2FibGUgYXVkaW8sIHNldCB0aGlzIHRvXG4gICAgICogW1widGV4dFwiXS5cbiAgICAgKi9cbiAgICBtb2RhbGl0aWVzPzogQXJyYXk8J3RleHQnIHwgJ2F1ZGlvJz47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgUmVhbHRpbWUgbW9kZWwgdXNlZCBmb3IgdGhpcyBzZXNzaW9uLlxuICAgICAqL1xuICAgIG1vZGVsPzpcbiAgICAgIHwgJ2dwdC00by1yZWFsdGltZS1wcmV2aWV3J1xuICAgICAgfCAnZ3B0LTRvLXJlYWx0aW1lLXByZXZpZXctMjAyNC0xMC0wMSdcbiAgICAgIHwgJ2dwdC00by1yZWFsdGltZS1wcmV2aWV3LTIwMjQtMTItMTcnXG4gICAgICB8ICdncHQtNG8tbWluaS1yZWFsdGltZS1wcmV2aWV3J1xuICAgICAgfCAnZ3B0LTRvLW1pbmktcmVhbHRpbWUtcHJldmlldy0yMDI0LTEyLTE3JztcblxuICAgIC8qKlxuICAgICAqIFRoZSBmb3JtYXQgb2Ygb3V0cHV0IGF1ZGlvLiBPcHRpb25zIGFyZSBgcGNtMTZgLCBgZzcxMV91bGF3YCwgb3IgYGc3MTFfYWxhd2AuXG4gICAgICogRm9yIGBwY20xNmAsIG91dHB1dCBhdWRpbyBpcyBzYW1wbGVkIGF0IGEgcmF0ZSBvZiAyNGtIei5cbiAgICAgKi9cbiAgICBvdXRwdXRfYXVkaW9fZm9ybWF0PzogJ3BjbTE2JyB8ICdnNzExX3VsYXcnIHwgJ2c3MTFfYWxhdyc7XG5cbiAgICAvKipcbiAgICAgKiBTYW1wbGluZyB0ZW1wZXJhdHVyZSBmb3IgdGhlIG1vZGVsLCBsaW1pdGVkIHRvIFswLjYsIDEuMl0uIEZvciBhdWRpbyBtb2RlbHMgYVxuICAgICAqIHRlbXBlcmF0dXJlIG9mIDAuOCBpcyBoaWdobHkgcmVjb21tZW5kZWQgZm9yIGJlc3QgcGVyZm9ybWFuY2UuXG4gICAgICovXG4gICAgdGVtcGVyYXR1cmU/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBIb3cgdGhlIG1vZGVsIGNob29zZXMgdG9vbHMuIE9wdGlvbnMgYXJlIGBhdXRvYCwgYG5vbmVgLCBgcmVxdWlyZWRgLCBvciBzcGVjaWZ5XG4gICAgICogYSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICB0b29sX2Nob2ljZT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRvb2xzIChmdW5jdGlvbnMpIGF2YWlsYWJsZSB0byB0aGUgbW9kZWwuXG4gICAgICovXG4gICAgdG9vbHM/OiBBcnJheTxTZXNzaW9uLlRvb2w+O1xuXG4gICAgLyoqXG4gICAgICogQ29uZmlndXJhdGlvbiBmb3IgdHVybiBkZXRlY3Rpb24sIGV0aGVyIFNlcnZlciBWQUQgb3IgU2VtYW50aWMgVkFELiBUaGlzIGNhbiBiZVxuICAgICAqIHNldCB0byBgbnVsbGAgdG8gdHVybiBvZmYsIGluIHdoaWNoIGNhc2UgdGhlIGNsaWVudCBtdXN0IG1hbnVhbGx5IHRyaWdnZXIgbW9kZWxcbiAgICAgKiByZXNwb25zZS4gU2VydmVyIFZBRCBtZWFucyB0aGF0IHRoZSBtb2RlbCB3aWxsIGRldGVjdCB0aGUgc3RhcnQgYW5kIGVuZCBvZlxuICAgICAqIHNwZWVjaCBiYXNlZCBvbiBhdWRpbyB2b2x1bWUgYW5kIHJlc3BvbmQgYXQgdGhlIGVuZCBvZiB1c2VyIHNwZWVjaC4gU2VtYW50aWMgVkFEXG4gICAgICogaXMgbW9yZSBhZHZhbmNlZCBhbmQgdXNlcyBhIHR1cm4gZGV0ZWN0aW9uIG1vZGVsIChpbiBjb25qdWN0aW9uIHdpdGggVkFEKSB0b1xuICAgICAqIHNlbWFudGljYWxseSBlc3RpbWF0ZSB3aGV0aGVyIHRoZSB1c2VyIGhhcyBmaW5pc2hlZCBzcGVha2luZywgdGhlbiBkeW5hbWljYWxseVxuICAgICAqIHNldHMgYSB0aW1lb3V0IGJhc2VkIG9uIHRoaXMgcHJvYmFiaWxpdHkuIEZvciBleGFtcGxlLCBpZiB1c2VyIGF1ZGlvIHRyYWlscyBvZmZcbiAgICAgKiB3aXRoIFwidWhobVwiLCB0aGUgbW9kZWwgd2lsbCBzY29yZSBhIGxvdyBwcm9iYWJpbGl0eSBvZiB0dXJuIGVuZCBhbmQgd2FpdCBsb25nZXJcbiAgICAgKiBmb3IgdGhlIHVzZXIgdG8gY29udGludWUgc3BlYWtpbmcuIFRoaXMgY2FuIGJlIHVzZWZ1bCBmb3IgbW9yZSBuYXR1cmFsXG4gICAgICogY29udmVyc2F0aW9ucywgYnV0IG1heSBoYXZlIGEgaGlnaGVyIGxhdGVuY3kuXG4gICAgICovXG4gICAgdHVybl9kZXRlY3Rpb24/OiBTZXNzaW9uLlR1cm5EZXRlY3Rpb247XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdm9pY2UgdGhlIG1vZGVsIHVzZXMgdG8gcmVzcG9uZC4gVm9pY2UgY2Fubm90IGJlIGNoYW5nZWQgZHVyaW5nIHRoZSBzZXNzaW9uXG4gICAgICogb25jZSB0aGUgbW9kZWwgaGFzIHJlc3BvbmRlZCB3aXRoIGF1ZGlvIGF0IGxlYXN0IG9uY2UuIEN1cnJlbnQgdm9pY2Ugb3B0aW9ucyBhcmVcbiAgICAgKiBgYWxsb3lgLCBgYXNoYCwgYGJhbGxhZGAsIGBjb3JhbGAsIGBlY2hvYCwgYGZhYmxlYCwgYG9ueXhgLCBgbm92YWAsIGBzYWdlYCxcbiAgICAgKiBgc2hpbW1lcmAsIGFuZCBgdmVyc2VgLlxuICAgICAqL1xuICAgIHZvaWNlPzpcbiAgICAgIHwgKHN0cmluZyAmIHt9KVxuICAgICAgfCAnYWxsb3knXG4gICAgICB8ICdhc2gnXG4gICAgICB8ICdiYWxsYWQnXG4gICAgICB8ICdjb3JhbCdcbiAgICAgIHwgJ2VjaG8nXG4gICAgICB8ICdmYWJsZSdcbiAgICAgIHwgJ29ueXgnXG4gICAgICB8ICdub3ZhJ1xuICAgICAgfCAnc2FnZSdcbiAgICAgIHwgJ3NoaW1tZXInXG4gICAgICB8ICd2ZXJzZSc7XG4gIH1cblxuICBleHBvcnQgbmFtZXNwYWNlIFNlc3Npb24ge1xuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGdlbmVyYXRlZCBjbGllbnQgc2VjcmV0LlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ2xpZW50U2VjcmV0IHtcbiAgICAgIC8qKlxuICAgICAgICogQ29uZmlndXJhdGlvbiBmb3IgdGhlIGVwaGVtZXJhbCB0b2tlbiBleHBpcmF0aW9uLlxuICAgICAgICovXG4gICAgICBleHBpcmVzX2F0PzogQ2xpZW50U2VjcmV0LkV4cGlyZXNBdDtcbiAgICB9XG5cbiAgICBleHBvcnQgbmFtZXNwYWNlIENsaWVudFNlY3JldCB7XG4gICAgICAvKipcbiAgICAgICAqIENvbmZpZ3VyYXRpb24gZm9yIHRoZSBlcGhlbWVyYWwgdG9rZW4gZXhwaXJhdGlvbi5cbiAgICAgICAqL1xuICAgICAgZXhwb3J0IGludGVyZmFjZSBFeHBpcmVzQXQge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGFuY2hvciBwb2ludCBmb3IgdGhlIGVwaGVtZXJhbCB0b2tlbiBleHBpcmF0aW9uLiBPbmx5IGBjcmVhdGVkX2F0YCBpc1xuICAgICAgICAgKiBjdXJyZW50bHkgc3VwcG9ydGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgYW5jaG9yPzogJ2NyZWF0ZWRfYXQnO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbnVtYmVyIG9mIHNlY29uZHMgZnJvbSB0aGUgYW5jaG9yIHBvaW50IHRvIHRoZSBleHBpcmF0aW9uLiBTZWxlY3QgYSB2YWx1ZVxuICAgICAgICAgKiBiZXR3ZWVuIGAxMGAgYW5kIGA3MjAwYC5cbiAgICAgICAgICovXG4gICAgICAgIHNlY29uZHM/OiBudW1iZXI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29uZmlndXJhdGlvbiBmb3IgaW5wdXQgYXVkaW8gbm9pc2UgcmVkdWN0aW9uLiBUaGlzIGNhbiBiZSBzZXQgdG8gYG51bGxgIHRvIHR1cm5cbiAgICAgKiBvZmYuIE5vaXNlIHJlZHVjdGlvbiBmaWx0ZXJzIGF1ZGlvIGFkZGVkIHRvIHRoZSBpbnB1dCBhdWRpbyBidWZmZXIgYmVmb3JlIGl0IGlzXG4gICAgICogc2VudCB0byBWQUQgYW5kIHRoZSBtb2RlbC4gRmlsdGVyaW5nIHRoZSBhdWRpbyBjYW4gaW1wcm92ZSBWQUQgYW5kIHR1cm5cbiAgICAgKiBkZXRlY3Rpb24gYWNjdXJhY3kgKHJlZHVjaW5nIGZhbHNlIHBvc2l0aXZlcykgYW5kIG1vZGVsIHBlcmZvcm1hbmNlIGJ5IGltcHJvdmluZ1xuICAgICAqIHBlcmNlcHRpb24gb2YgdGhlIGlucHV0IGF1ZGlvLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSW5wdXRBdWRpb05vaXNlUmVkdWN0aW9uIHtcbiAgICAgIC8qKlxuICAgICAgICogVHlwZSBvZiBub2lzZSByZWR1Y3Rpb24uIGBuZWFyX2ZpZWxkYCBpcyBmb3IgY2xvc2UtdGFsa2luZyBtaWNyb3Bob25lcyBzdWNoIGFzXG4gICAgICAgKiBoZWFkcGhvbmVzLCBgZmFyX2ZpZWxkYCBpcyBmb3IgZmFyLWZpZWxkIG1pY3JvcGhvbmVzIHN1Y2ggYXMgbGFwdG9wIG9yXG4gICAgICAgKiBjb25mZXJlbmNlIHJvb20gbWljcm9waG9uZXMuXG4gICAgICAgKi9cbiAgICAgIHR5cGU/OiAnbmVhcl9maWVsZCcgfCAnZmFyX2ZpZWxkJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25maWd1cmF0aW9uIGZvciBpbnB1dCBhdWRpbyB0cmFuc2NyaXB0aW9uLCBkZWZhdWx0cyB0byBvZmYgYW5kIGNhbiBiZSBzZXQgdG9cbiAgICAgKiBgbnVsbGAgdG8gdHVybiBvZmYgb25jZSBvbi4gSW5wdXQgYXVkaW8gdHJhbnNjcmlwdGlvbiBpcyBub3QgbmF0aXZlIHRvIHRoZVxuICAgICAqIG1vZGVsLCBzaW5jZSB0aGUgbW9kZWwgY29uc3VtZXMgYXVkaW8gZGlyZWN0bHkuIFRyYW5zY3JpcHRpb24gcnVuc1xuICAgICAqIGFzeW5jaHJvbm91c2x5IHRocm91Z2hcbiAgICAgKiBbdGhlIC9hdWRpby90cmFuc2NyaXB0aW9ucyBlbmRwb2ludF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9hdWRpby9jcmVhdGVUcmFuc2NyaXB0aW9uKVxuICAgICAqIGFuZCBzaG91bGQgYmUgdHJlYXRlZCBhcyBndWlkYW5jZSBvZiBpbnB1dCBhdWRpbyBjb250ZW50IHJhdGhlciB0aGFuIHByZWNpc2VseVxuICAgICAqIHdoYXQgdGhlIG1vZGVsIGhlYXJkLiBUaGUgY2xpZW50IGNhbiBvcHRpb25hbGx5IHNldCB0aGUgbGFuZ3VhZ2UgYW5kIHByb21wdCBmb3JcbiAgICAgKiB0cmFuc2NyaXB0aW9uLCB0aGVzZSBvZmZlciBhZGRpdGlvbmFsIGd1aWRhbmNlIHRvIHRoZSB0cmFuc2NyaXB0aW9uIHNlcnZpY2UuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJbnB1dEF1ZGlvVHJhbnNjcmlwdGlvbiB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBsYW5ndWFnZSBvZiB0aGUgaW5wdXQgYXVkaW8uIFN1cHBseWluZyB0aGUgaW5wdXQgbGFuZ3VhZ2UgaW5cbiAgICAgICAqIFtJU08tNjM5LTFdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpc3Rfb2ZfSVNPXzYzOS0xX2NvZGVzKSAoZS5nLiBgZW5gKVxuICAgICAgICogZm9ybWF0IHdpbGwgaW1wcm92ZSBhY2N1cmFjeSBhbmQgbGF0ZW5jeS5cbiAgICAgICAqL1xuICAgICAgbGFuZ3VhZ2U/OiBzdHJpbmc7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1vZGVsIHRvIHVzZSBmb3IgdHJhbnNjcmlwdGlvbiwgY3VycmVudCBvcHRpb25zIGFyZSBgZ3B0LTRvLXRyYW5zY3JpYmVgLFxuICAgICAgICogYGdwdC00by1taW5pLXRyYW5zY3JpYmVgLCBhbmQgYHdoaXNwZXItMWAuXG4gICAgICAgKi9cbiAgICAgIG1vZGVsPzogc3RyaW5nO1xuXG4gICAgICAvKipcbiAgICAgICAqIEFuIG9wdGlvbmFsIHRleHQgdG8gZ3VpZGUgdGhlIG1vZGVsJ3Mgc3R5bGUgb3IgY29udGludWUgYSBwcmV2aW91cyBhdWRpb1xuICAgICAgICogc2VnbWVudC4gRm9yIGB3aGlzcGVyLTFgLCB0aGVcbiAgICAgICAqIFtwcm9tcHQgaXMgYSBsaXN0IG9mIGtleXdvcmRzXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvc3BlZWNoLXRvLXRleHQjcHJvbXB0aW5nKS5cbiAgICAgICAqIEZvciBgZ3B0LTRvLXRyYW5zY3JpYmVgIG1vZGVscywgdGhlIHByb21wdCBpcyBhIGZyZWUgdGV4dCBzdHJpbmcsIGZvciBleGFtcGxlXG4gICAgICAgKiBcImV4cGVjdCB3b3JkcyByZWxhdGVkIHRvIHRlY2hub2xvZ3lcIi5cbiAgICAgICAqL1xuICAgICAgcHJvbXB0Pzogc3RyaW5nO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgVG9vbCB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgZnVuY3Rpb24sIGluY2x1ZGluZyBndWlkYW5jZSBvbiB3aGVuIGFuZCBob3cgdG8gY2FsbCBpdCxcbiAgICAgICAqIGFuZCBndWlkYW5jZSBhYm91dCB3aGF0IHRvIHRlbGwgdGhlIHVzZXIgd2hlbiBjYWxsaW5nIChpZiBhbnl0aGluZykuXG4gICAgICAgKi9cbiAgICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbi5cbiAgICAgICAqL1xuICAgICAgbmFtZT86IHN0cmluZztcblxuICAgICAgLyoqXG4gICAgICAgKiBQYXJhbWV0ZXJzIG9mIHRoZSBmdW5jdGlvbiBpbiBKU09OIFNjaGVtYS5cbiAgICAgICAqL1xuICAgICAgcGFyYW1ldGVycz86IHVua25vd247XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHR5cGUgb2YgdGhlIHRvb2wsIGkuZS4gYGZ1bmN0aW9uYC5cbiAgICAgICAqL1xuICAgICAgdHlwZT86ICdmdW5jdGlvbic7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29uZmlndXJhdGlvbiBmb3IgdHVybiBkZXRlY3Rpb24sIGV0aGVyIFNlcnZlciBWQUQgb3IgU2VtYW50aWMgVkFELiBUaGlzIGNhbiBiZVxuICAgICAqIHNldCB0byBgbnVsbGAgdG8gdHVybiBvZmYsIGluIHdoaWNoIGNhc2UgdGhlIGNsaWVudCBtdXN0IG1hbnVhbGx5IHRyaWdnZXIgbW9kZWxcbiAgICAgKiByZXNwb25zZS4gU2VydmVyIFZBRCBtZWFucyB0aGF0IHRoZSBtb2RlbCB3aWxsIGRldGVjdCB0aGUgc3RhcnQgYW5kIGVuZCBvZlxuICAgICAqIHNwZWVjaCBiYXNlZCBvbiBhdWRpbyB2b2x1bWUgYW5kIHJlc3BvbmQgYXQgdGhlIGVuZCBvZiB1c2VyIHNwZWVjaC4gU2VtYW50aWMgVkFEXG4gICAgICogaXMgbW9yZSBhZHZhbmNlZCBhbmQgdXNlcyBhIHR1cm4gZGV0ZWN0aW9uIG1vZGVsIChpbiBjb25qdWN0aW9uIHdpdGggVkFEKSB0b1xuICAgICAqIHNlbWFudGljYWxseSBlc3RpbWF0ZSB3aGV0aGVyIHRoZSB1c2VyIGhhcyBmaW5pc2hlZCBzcGVha2luZywgdGhlbiBkeW5hbWljYWxseVxuICAgICAqIHNldHMgYSB0aW1lb3V0IGJhc2VkIG9uIHRoaXMgcHJvYmFiaWxpdHkuIEZvciBleGFtcGxlLCBpZiB1c2VyIGF1ZGlvIHRyYWlscyBvZmZcbiAgICAgKiB3aXRoIFwidWhobVwiLCB0aGUgbW9kZWwgd2lsbCBzY29yZSBhIGxvdyBwcm9iYWJpbGl0eSBvZiB0dXJuIGVuZCBhbmQgd2FpdCBsb25nZXJcbiAgICAgKiBmb3IgdGhlIHVzZXIgdG8gY29udGludWUgc3BlYWtpbmcuIFRoaXMgY2FuIGJlIHVzZWZ1bCBmb3IgbW9yZSBuYXR1cmFsXG4gICAgICogY29udmVyc2F0aW9ucywgYnV0IG1heSBoYXZlIGEgaGlnaGVyIGxhdGVuY3kuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBUdXJuRGV0ZWN0aW9uIHtcbiAgICAgIC8qKlxuICAgICAgICogV2hldGhlciBvciBub3QgdG8gYXV0b21hdGljYWxseSBnZW5lcmF0ZSBhIHJlc3BvbnNlIHdoZW4gYSBWQUQgc3RvcCBldmVudFxuICAgICAgICogb2NjdXJzLlxuICAgICAgICovXG4gICAgICBjcmVhdGVfcmVzcG9uc2U/OiBib29sZWFuO1xuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgb25seSBmb3IgYHNlbWFudGljX3ZhZGAgbW9kZS4gVGhlIGVhZ2VybmVzcyBvZiB0aGUgbW9kZWwgdG8gcmVzcG9uZC4gYGxvd2BcbiAgICAgICAqIHdpbGwgd2FpdCBsb25nZXIgZm9yIHRoZSB1c2VyIHRvIGNvbnRpbnVlIHNwZWFraW5nLCBgaGlnaGAgd2lsbCByZXNwb25kIG1vcmVcbiAgICAgICAqIHF1aWNrbHkuIGBhdXRvYCBpcyB0aGUgZGVmYXVsdCBhbmQgaXMgZXF1aXZhbGVudCB0byBgbWVkaXVtYC5cbiAgICAgICAqL1xuICAgICAgZWFnZXJuZXNzPzogJ2xvdycgfCAnbWVkaXVtJyB8ICdoaWdoJyB8ICdhdXRvJztcblxuICAgICAgLyoqXG4gICAgICAgKiBXaGV0aGVyIG9yIG5vdCB0byBhdXRvbWF0aWNhbGx5IGludGVycnVwdCBhbnkgb25nb2luZyByZXNwb25zZSB3aXRoIG91dHB1dCB0b1xuICAgICAgICogdGhlIGRlZmF1bHQgY29udmVyc2F0aW9uIChpLmUuIGBjb252ZXJzYXRpb25gIG9mIGBhdXRvYCkgd2hlbiBhIFZBRCBzdGFydCBldmVudFxuICAgICAgICogb2NjdXJzLlxuICAgICAgICovXG4gICAgICBpbnRlcnJ1cHRfcmVzcG9uc2U/OiBib29sZWFuO1xuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgb25seSBmb3IgYHNlcnZlcl92YWRgIG1vZGUuIEFtb3VudCBvZiBhdWRpbyB0byBpbmNsdWRlIGJlZm9yZSB0aGUgVkFEXG4gICAgICAgKiBkZXRlY3RlZCBzcGVlY2ggKGluIG1pbGxpc2Vjb25kcykuIERlZmF1bHRzIHRvIDMwMG1zLlxuICAgICAgICovXG4gICAgICBwcmVmaXhfcGFkZGluZ19tcz86IG51bWJlcjtcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIG9ubHkgZm9yIGBzZXJ2ZXJfdmFkYCBtb2RlLiBEdXJhdGlvbiBvZiBzaWxlbmNlIHRvIGRldGVjdCBzcGVlY2ggc3RvcCAoaW5cbiAgICAgICAqIG1pbGxpc2Vjb25kcykuIERlZmF1bHRzIHRvIDUwMG1zLiBXaXRoIHNob3J0ZXIgdmFsdWVzIHRoZSBtb2RlbCB3aWxsIHJlc3BvbmRcbiAgICAgICAqIG1vcmUgcXVpY2tseSwgYnV0IG1heSBqdW1wIGluIG9uIHNob3J0IHBhdXNlcyBmcm9tIHRoZSB1c2VyLlxuICAgICAgICovXG4gICAgICBzaWxlbmNlX2R1cmF0aW9uX21zPzogbnVtYmVyO1xuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgb25seSBmb3IgYHNlcnZlcl92YWRgIG1vZGUuIEFjdGl2YXRpb24gdGhyZXNob2xkIGZvciBWQUQgKDAuMCB0byAxLjApLCB0aGlzXG4gICAgICAgKiBkZWZhdWx0cyB0byAwLjUuIEEgaGlnaGVyIHRocmVzaG9sZCB3aWxsIHJlcXVpcmUgbG91ZGVyIGF1ZGlvIHRvIGFjdGl2YXRlIHRoZVxuICAgICAgICogbW9kZWwsIGFuZCB0aHVzIG1pZ2h0IHBlcmZvcm0gYmV0dGVyIGluIG5vaXN5IGVudmlyb25tZW50cy5cbiAgICAgICAqL1xuICAgICAgdGhyZXNob2xkPzogbnVtYmVyO1xuXG4gICAgICAvKipcbiAgICAgICAqIFR5cGUgb2YgdHVybiBkZXRlY3Rpb24uXG4gICAgICAgKi9cbiAgICAgIHR5cGU/OiAnc2VydmVyX3ZhZCcgfCAnc2VtYW50aWNfdmFkJztcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5lZCB3aGVuIGEgc2Vzc2lvbiBpcyB1cGRhdGVkIHdpdGggYSBgc2Vzc2lvbi51cGRhdGVgIGV2ZW50LCB1bmxlc3MgdGhlcmVcbiAqIGlzIGFuIGVycm9yLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNlc3Npb25VcGRhdGVkRXZlbnQge1xuICAvKipcbiAgICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgc2VydmVyIGV2ZW50LlxuICAgKi9cbiAgZXZlbnRfaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogUmVhbHRpbWUgc2Vzc2lvbiBvYmplY3QgY29uZmlndXJhdGlvbi5cbiAgICovXG4gIHNlc3Npb246IFNlc3Npb25zQVBJLlNlc3Npb247XG5cbiAgLyoqXG4gICAqIFRoZSBldmVudCB0eXBlLCBtdXN0IGJlIGBzZXNzaW9uLnVwZGF0ZWRgLlxuICAgKi9cbiAgdHlwZTogJ3Nlc3Npb24udXBkYXRlZCc7XG59XG5cbi8qKlxuICogU2VuZCB0aGlzIGV2ZW50IHRvIHVwZGF0ZSBhIHRyYW5zY3JpcHRpb24gc2Vzc2lvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUcmFuc2NyaXB0aW9uU2Vzc2lvblVwZGF0ZSB7XG4gIC8qKlxuICAgKiBSZWFsdGltZSB0cmFuc2NyaXB0aW9uIHNlc3Npb24gb2JqZWN0IGNvbmZpZ3VyYXRpb24uXG4gICAqL1xuICBzZXNzaW9uOiBUcmFuc2NyaXB0aW9uU2Vzc2lvblVwZGF0ZS5TZXNzaW9uO1xuXG4gIC8qKlxuICAgKiBUaGUgZXZlbnQgdHlwZSwgbXVzdCBiZSBgdHJhbnNjcmlwdGlvbl9zZXNzaW9uLnVwZGF0ZWAuXG4gICAqL1xuICB0eXBlOiAndHJhbnNjcmlwdGlvbl9zZXNzaW9uLnVwZGF0ZSc7XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsIGNsaWVudC1nZW5lcmF0ZWQgSUQgdXNlZCB0byBpZGVudGlmeSB0aGlzIGV2ZW50LlxuICAgKi9cbiAgZXZlbnRfaWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgVHJhbnNjcmlwdGlvblNlc3Npb25VcGRhdGUge1xuICAvKipcbiAgICogUmVhbHRpbWUgdHJhbnNjcmlwdGlvbiBzZXNzaW9uIG9iamVjdCBjb25maWd1cmF0aW9uLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBTZXNzaW9uIHtcbiAgICAvKipcbiAgICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBnZW5lcmF0ZWQgY2xpZW50IHNlY3JldC5cbiAgICAgKi9cbiAgICBjbGllbnRfc2VjcmV0PzogU2Vzc2lvbi5DbGllbnRTZWNyZXQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2V0IG9mIGl0ZW1zIHRvIGluY2x1ZGUgaW4gdGhlIHRyYW5zY3JpcHRpb24uIEN1cnJlbnQgYXZhaWxhYmxlIGl0ZW1zIGFyZTpcbiAgICAgKlxuICAgICAqIC0gYGl0ZW0uaW5wdXRfYXVkaW9fdHJhbnNjcmlwdGlvbi5sb2dwcm9ic2BcbiAgICAgKi9cbiAgICBpbmNsdWRlPzogQXJyYXk8c3RyaW5nPjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmb3JtYXQgb2YgaW5wdXQgYXVkaW8uIE9wdGlvbnMgYXJlIGBwY20xNmAsIGBnNzExX3VsYXdgLCBvciBgZzcxMV9hbGF3YC4gRm9yXG4gICAgICogYHBjbTE2YCwgaW5wdXQgYXVkaW8gbXVzdCBiZSAxNi1iaXQgUENNIGF0IGEgMjRrSHogc2FtcGxlIHJhdGUsIHNpbmdsZSBjaGFubmVsXG4gICAgICogKG1vbm8pLCBhbmQgbGl0dGxlLWVuZGlhbiBieXRlIG9yZGVyLlxuICAgICAqL1xuICAgIGlucHV0X2F1ZGlvX2Zvcm1hdD86ICdwY20xNicgfCAnZzcxMV91bGF3JyB8ICdnNzExX2FsYXcnO1xuXG4gICAgLyoqXG4gICAgICogQ29uZmlndXJhdGlvbiBmb3IgaW5wdXQgYXVkaW8gbm9pc2UgcmVkdWN0aW9uLiBUaGlzIGNhbiBiZSBzZXQgdG8gYG51bGxgIHRvIHR1cm5cbiAgICAgKiBvZmYuIE5vaXNlIHJlZHVjdGlvbiBmaWx0ZXJzIGF1ZGlvIGFkZGVkIHRvIHRoZSBpbnB1dCBhdWRpbyBidWZmZXIgYmVmb3JlIGl0IGlzXG4gICAgICogc2VudCB0byBWQUQgYW5kIHRoZSBtb2RlbC4gRmlsdGVyaW5nIHRoZSBhdWRpbyBjYW4gaW1wcm92ZSBWQUQgYW5kIHR1cm5cbiAgICAgKiBkZXRlY3Rpb24gYWNjdXJhY3kgKHJlZHVjaW5nIGZhbHNlIHBvc2l0aXZlcykgYW5kIG1vZGVsIHBlcmZvcm1hbmNlIGJ5IGltcHJvdmluZ1xuICAgICAqIHBlcmNlcHRpb24gb2YgdGhlIGlucHV0IGF1ZGlvLlxuICAgICAqL1xuICAgIGlucHV0X2F1ZGlvX25vaXNlX3JlZHVjdGlvbj86IFNlc3Npb24uSW5wdXRBdWRpb05vaXNlUmVkdWN0aW9uO1xuXG4gICAgLyoqXG4gICAgICogQ29uZmlndXJhdGlvbiBmb3IgaW5wdXQgYXVkaW8gdHJhbnNjcmlwdGlvbi4gVGhlIGNsaWVudCBjYW4gb3B0aW9uYWxseSBzZXQgdGhlXG4gICAgICogbGFuZ3VhZ2UgYW5kIHByb21wdCBmb3IgdHJhbnNjcmlwdGlvbiwgdGhlc2Ugb2ZmZXIgYWRkaXRpb25hbCBndWlkYW5jZSB0byB0aGVcbiAgICAgKiB0cmFuc2NyaXB0aW9uIHNlcnZpY2UuXG4gICAgICovXG4gICAgaW5wdXRfYXVkaW9fdHJhbnNjcmlwdGlvbj86IFNlc3Npb24uSW5wdXRBdWRpb1RyYW5zY3JpcHRpb247XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2V0IG9mIG1vZGFsaXRpZXMgdGhlIG1vZGVsIGNhbiByZXNwb25kIHdpdGguIFRvIGRpc2FibGUgYXVkaW8sIHNldCB0aGlzIHRvXG4gICAgICogW1widGV4dFwiXS5cbiAgICAgKi9cbiAgICBtb2RhbGl0aWVzPzogQXJyYXk8J3RleHQnIHwgJ2F1ZGlvJz47XG5cbiAgICAvKipcbiAgICAgKiBDb25maWd1cmF0aW9uIGZvciB0dXJuIGRldGVjdGlvbiwgZXRoZXIgU2VydmVyIFZBRCBvciBTZW1hbnRpYyBWQUQuIFRoaXMgY2FuIGJlXG4gICAgICogc2V0IHRvIGBudWxsYCB0byB0dXJuIG9mZiwgaW4gd2hpY2ggY2FzZSB0aGUgY2xpZW50IG11c3QgbWFudWFsbHkgdHJpZ2dlciBtb2RlbFxuICAgICAqIHJlc3BvbnNlLiBTZXJ2ZXIgVkFEIG1lYW5zIHRoYXQgdGhlIG1vZGVsIHdpbGwgZGV0ZWN0IHRoZSBzdGFydCBhbmQgZW5kIG9mXG4gICAgICogc3BlZWNoIGJhc2VkIG9uIGF1ZGlvIHZvbHVtZSBhbmQgcmVzcG9uZCBhdCB0aGUgZW5kIG9mIHVzZXIgc3BlZWNoLiBTZW1hbnRpYyBWQURcbiAgICAgKiBpcyBtb3JlIGFkdmFuY2VkIGFuZCB1c2VzIGEgdHVybiBkZXRlY3Rpb24gbW9kZWwgKGluIGNvbmp1Y3Rpb24gd2l0aCBWQUQpIHRvXG4gICAgICogc2VtYW50aWNhbGx5IGVzdGltYXRlIHdoZXRoZXIgdGhlIHVzZXIgaGFzIGZpbmlzaGVkIHNwZWFraW5nLCB0aGVuIGR5bmFtaWNhbGx5XG4gICAgICogc2V0cyBhIHRpbWVvdXQgYmFzZWQgb24gdGhpcyBwcm9iYWJpbGl0eS4gRm9yIGV4YW1wbGUsIGlmIHVzZXIgYXVkaW8gdHJhaWxzIG9mZlxuICAgICAqIHdpdGggXCJ1aGhtXCIsIHRoZSBtb2RlbCB3aWxsIHNjb3JlIGEgbG93IHByb2JhYmlsaXR5IG9mIHR1cm4gZW5kIGFuZCB3YWl0IGxvbmdlclxuICAgICAqIGZvciB0aGUgdXNlciB0byBjb250aW51ZSBzcGVha2luZy4gVGhpcyBjYW4gYmUgdXNlZnVsIGZvciBtb3JlIG5hdHVyYWxcbiAgICAgKiBjb252ZXJzYXRpb25zLCBidXQgbWF5IGhhdmUgYSBoaWdoZXIgbGF0ZW5jeS5cbiAgICAgKi9cbiAgICB0dXJuX2RldGVjdGlvbj86IFNlc3Npb24uVHVybkRldGVjdGlvbjtcbiAgfVxuXG4gIGV4cG9ydCBuYW1lc3BhY2UgU2Vzc2lvbiB7XG4gICAgLyoqXG4gICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgZ2VuZXJhdGVkIGNsaWVudCBzZWNyZXQuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBDbGllbnRTZWNyZXQge1xuICAgICAgLyoqXG4gICAgICAgKiBDb25maWd1cmF0aW9uIGZvciB0aGUgZXBoZW1lcmFsIHRva2VuIGV4cGlyYXRpb24uXG4gICAgICAgKi9cbiAgICAgIGV4cGlyZXNfYXQ/OiBDbGllbnRTZWNyZXQuRXhwaXJlc0F0O1xuICAgIH1cblxuICAgIGV4cG9ydCBuYW1lc3BhY2UgQ2xpZW50U2VjcmV0IHtcbiAgICAgIC8qKlxuICAgICAgICogQ29uZmlndXJhdGlvbiBmb3IgdGhlIGVwaGVtZXJhbCB0b2tlbiBleHBpcmF0aW9uLlxuICAgICAgICovXG4gICAgICBleHBvcnQgaW50ZXJmYWNlIEV4cGlyZXNBdCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYW5jaG9yIHBvaW50IGZvciB0aGUgZXBoZW1lcmFsIHRva2VuIGV4cGlyYXRpb24uIE9ubHkgYGNyZWF0ZWRfYXRgIGlzXG4gICAgICAgICAqIGN1cnJlbnRseSBzdXBwb3J0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICBhbmNob3I/OiAnY3JlYXRlZF9hdCc7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyBmcm9tIHRoZSBhbmNob3IgcG9pbnQgdG8gdGhlIGV4cGlyYXRpb24uIFNlbGVjdCBhIHZhbHVlXG4gICAgICAgICAqIGJldHdlZW4gYDEwYCBhbmQgYDcyMDBgLlxuICAgICAgICAgKi9cbiAgICAgICAgc2Vjb25kcz86IG51bWJlcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25maWd1cmF0aW9uIGZvciBpbnB1dCBhdWRpbyBub2lzZSByZWR1Y3Rpb24uIFRoaXMgY2FuIGJlIHNldCB0byBgbnVsbGAgdG8gdHVyblxuICAgICAqIG9mZi4gTm9pc2UgcmVkdWN0aW9uIGZpbHRlcnMgYXVkaW8gYWRkZWQgdG8gdGhlIGlucHV0IGF1ZGlvIGJ1ZmZlciBiZWZvcmUgaXQgaXNcbiAgICAgKiBzZW50IHRvIFZBRCBhbmQgdGhlIG1vZGVsLiBGaWx0ZXJpbmcgdGhlIGF1ZGlvIGNhbiBpbXByb3ZlIFZBRCBhbmQgdHVyblxuICAgICAqIGRldGVjdGlvbiBhY2N1cmFjeSAocmVkdWNpbmcgZmFsc2UgcG9zaXRpdmVzKSBhbmQgbW9kZWwgcGVyZm9ybWFuY2UgYnkgaW1wcm92aW5nXG4gICAgICogcGVyY2VwdGlvbiBvZiB0aGUgaW5wdXQgYXVkaW8uXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJbnB1dEF1ZGlvTm9pc2VSZWR1Y3Rpb24ge1xuICAgICAgLyoqXG4gICAgICAgKiBUeXBlIG9mIG5vaXNlIHJlZHVjdGlvbi4gYG5lYXJfZmllbGRgIGlzIGZvciBjbG9zZS10YWxraW5nIG1pY3JvcGhvbmVzIHN1Y2ggYXNcbiAgICAgICAqIGhlYWRwaG9uZXMsIGBmYXJfZmllbGRgIGlzIGZvciBmYXItZmllbGQgbWljcm9waG9uZXMgc3VjaCBhcyBsYXB0b3Agb3JcbiAgICAgICAqIGNvbmZlcmVuY2Ugcm9vbSBtaWNyb3Bob25lcy5cbiAgICAgICAqL1xuICAgICAgdHlwZT86ICduZWFyX2ZpZWxkJyB8ICdmYXJfZmllbGQnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyYXRpb24gZm9yIGlucHV0IGF1ZGlvIHRyYW5zY3JpcHRpb24uIFRoZSBjbGllbnQgY2FuIG9wdGlvbmFsbHkgc2V0IHRoZVxuICAgICAqIGxhbmd1YWdlIGFuZCBwcm9tcHQgZm9yIHRyYW5zY3JpcHRpb24sIHRoZXNlIG9mZmVyIGFkZGl0aW9uYWwgZ3VpZGFuY2UgdG8gdGhlXG4gICAgICogdHJhbnNjcmlwdGlvbiBzZXJ2aWNlLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSW5wdXRBdWRpb1RyYW5zY3JpcHRpb24ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbGFuZ3VhZ2Ugb2YgdGhlIGlucHV0IGF1ZGlvLiBTdXBwbHlpbmcgdGhlIGlucHV0IGxhbmd1YWdlIGluXG4gICAgICAgKiBbSVNPLTYzOS0xXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaXN0X29mX0lTT182MzktMV9jb2RlcykgKGUuZy4gYGVuYClcbiAgICAgICAqIGZvcm1hdCB3aWxsIGltcHJvdmUgYWNjdXJhY3kgYW5kIGxhdGVuY3kuXG4gICAgICAgKi9cbiAgICAgIGxhbmd1YWdlPzogc3RyaW5nO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtb2RlbCB0byB1c2UgZm9yIHRyYW5zY3JpcHRpb24sIGN1cnJlbnQgb3B0aW9ucyBhcmUgYGdwdC00by10cmFuc2NyaWJlYCxcbiAgICAgICAqIGBncHQtNG8tbWluaS10cmFuc2NyaWJlYCwgYW5kIGB3aGlzcGVyLTFgLlxuICAgICAgICovXG4gICAgICBtb2RlbD86ICdncHQtNG8tdHJhbnNjcmliZScgfCAnZ3B0LTRvLW1pbmktdHJhbnNjcmliZScgfCAnd2hpc3Blci0xJztcblxuICAgICAgLyoqXG4gICAgICAgKiBBbiBvcHRpb25hbCB0ZXh0IHRvIGd1aWRlIHRoZSBtb2RlbCdzIHN0eWxlIG9yIGNvbnRpbnVlIGEgcHJldmlvdXMgYXVkaW9cbiAgICAgICAqIHNlZ21lbnQuIEZvciBgd2hpc3Blci0xYCwgdGhlXG4gICAgICAgKiBbcHJvbXB0IGlzIGEgbGlzdCBvZiBrZXl3b3Jkc10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3NwZWVjaC10by10ZXh0I3Byb21wdGluZykuXG4gICAgICAgKiBGb3IgYGdwdC00by10cmFuc2NyaWJlYCBtb2RlbHMsIHRoZSBwcm9tcHQgaXMgYSBmcmVlIHRleHQgc3RyaW5nLCBmb3IgZXhhbXBsZVxuICAgICAgICogXCJleHBlY3Qgd29yZHMgcmVsYXRlZCB0byB0ZWNobm9sb2d5XCIuXG4gICAgICAgKi9cbiAgICAgIHByb21wdD86IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25maWd1cmF0aW9uIGZvciB0dXJuIGRldGVjdGlvbiwgZXRoZXIgU2VydmVyIFZBRCBvciBTZW1hbnRpYyBWQUQuIFRoaXMgY2FuIGJlXG4gICAgICogc2V0IHRvIGBudWxsYCB0byB0dXJuIG9mZiwgaW4gd2hpY2ggY2FzZSB0aGUgY2xpZW50IG11c3QgbWFudWFsbHkgdHJpZ2dlciBtb2RlbFxuICAgICAqIHJlc3BvbnNlLiBTZXJ2ZXIgVkFEIG1lYW5zIHRoYXQgdGhlIG1vZGVsIHdpbGwgZGV0ZWN0IHRoZSBzdGFydCBhbmQgZW5kIG9mXG4gICAgICogc3BlZWNoIGJhc2VkIG9uIGF1ZGlvIHZvbHVtZSBhbmQgcmVzcG9uZCBhdCB0aGUgZW5kIG9mIHVzZXIgc3BlZWNoLiBTZW1hbnRpYyBWQURcbiAgICAgKiBpcyBtb3JlIGFkdmFuY2VkIGFuZCB1c2VzIGEgdHVybiBkZXRlY3Rpb24gbW9kZWwgKGluIGNvbmp1Y3Rpb24gd2l0aCBWQUQpIHRvXG4gICAgICogc2VtYW50aWNhbGx5IGVzdGltYXRlIHdoZXRoZXIgdGhlIHVzZXIgaGFzIGZpbmlzaGVkIHNwZWFraW5nLCB0aGVuIGR5bmFtaWNhbGx5XG4gICAgICogc2V0cyBhIHRpbWVvdXQgYmFzZWQgb24gdGhpcyBwcm9iYWJpbGl0eS4gRm9yIGV4YW1wbGUsIGlmIHVzZXIgYXVkaW8gdHJhaWxzIG9mZlxuICAgICAqIHdpdGggXCJ1aGhtXCIsIHRoZSBtb2RlbCB3aWxsIHNjb3JlIGEgbG93IHByb2JhYmlsaXR5IG9mIHR1cm4gZW5kIGFuZCB3YWl0IGxvbmdlclxuICAgICAqIGZvciB0aGUgdXNlciB0byBjb250aW51ZSBzcGVha2luZy4gVGhpcyBjYW4gYmUgdXNlZnVsIGZvciBtb3JlIG5hdHVyYWxcbiAgICAgKiBjb252ZXJzYXRpb25zLCBidXQgbWF5IGhhdmUgYSBoaWdoZXIgbGF0ZW5jeS5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIFR1cm5EZXRlY3Rpb24ge1xuICAgICAgLyoqXG4gICAgICAgKiBXaGV0aGVyIG9yIG5vdCB0byBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlIGEgcmVzcG9uc2Ugd2hlbiBhIFZBRCBzdG9wIGV2ZW50XG4gICAgICAgKiBvY2N1cnMuIE5vdCBhdmFpbGFibGUgZm9yIHRyYW5zY3JpcHRpb24gc2Vzc2lvbnMuXG4gICAgICAgKi9cbiAgICAgIGNyZWF0ZV9yZXNwb25zZT86IGJvb2xlYW47XG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCBvbmx5IGZvciBgc2VtYW50aWNfdmFkYCBtb2RlLiBUaGUgZWFnZXJuZXNzIG9mIHRoZSBtb2RlbCB0byByZXNwb25kLiBgbG93YFxuICAgICAgICogd2lsbCB3YWl0IGxvbmdlciBmb3IgdGhlIHVzZXIgdG8gY29udGludWUgc3BlYWtpbmcsIGBoaWdoYCB3aWxsIHJlc3BvbmQgbW9yZVxuICAgICAgICogcXVpY2tseS4gYGF1dG9gIGlzIHRoZSBkZWZhdWx0IGFuZCBpcyBlcXVpdmFsZW50IHRvIGBtZWRpdW1gLlxuICAgICAgICovXG4gICAgICBlYWdlcm5lc3M/OiAnbG93JyB8ICdtZWRpdW0nIHwgJ2hpZ2gnIHwgJ2F1dG8nO1xuXG4gICAgICAvKipcbiAgICAgICAqIFdoZXRoZXIgb3Igbm90IHRvIGF1dG9tYXRpY2FsbHkgaW50ZXJydXB0IGFueSBvbmdvaW5nIHJlc3BvbnNlIHdpdGggb3V0cHV0IHRvXG4gICAgICAgKiB0aGUgZGVmYXVsdCBjb252ZXJzYXRpb24gKGkuZS4gYGNvbnZlcnNhdGlvbmAgb2YgYGF1dG9gKSB3aGVuIGEgVkFEIHN0YXJ0IGV2ZW50XG4gICAgICAgKiBvY2N1cnMuIE5vdCBhdmFpbGFibGUgZm9yIHRyYW5zY3JpcHRpb24gc2Vzc2lvbnMuXG4gICAgICAgKi9cbiAgICAgIGludGVycnVwdF9yZXNwb25zZT86IGJvb2xlYW47XG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCBvbmx5IGZvciBgc2VydmVyX3ZhZGAgbW9kZS4gQW1vdW50IG9mIGF1ZGlvIHRvIGluY2x1ZGUgYmVmb3JlIHRoZSBWQURcbiAgICAgICAqIGRldGVjdGVkIHNwZWVjaCAoaW4gbWlsbGlzZWNvbmRzKS4gRGVmYXVsdHMgdG8gMzAwbXMuXG4gICAgICAgKi9cbiAgICAgIHByZWZpeF9wYWRkaW5nX21zPzogbnVtYmVyO1xuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgb25seSBmb3IgYHNlcnZlcl92YWRgIG1vZGUuIER1cmF0aW9uIG9mIHNpbGVuY2UgdG8gZGV0ZWN0IHNwZWVjaCBzdG9wIChpblxuICAgICAgICogbWlsbGlzZWNvbmRzKS4gRGVmYXVsdHMgdG8gNTAwbXMuIFdpdGggc2hvcnRlciB2YWx1ZXMgdGhlIG1vZGVsIHdpbGwgcmVzcG9uZFxuICAgICAgICogbW9yZSBxdWlja2x5LCBidXQgbWF5IGp1bXAgaW4gb24gc2hvcnQgcGF1c2VzIGZyb20gdGhlIHVzZXIuXG4gICAgICAgKi9cbiAgICAgIHNpbGVuY2VfZHVyYXRpb25fbXM/OiBudW1iZXI7XG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCBvbmx5IGZvciBgc2VydmVyX3ZhZGAgbW9kZS4gQWN0aXZhdGlvbiB0aHJlc2hvbGQgZm9yIFZBRCAoMC4wIHRvIDEuMCksIHRoaXNcbiAgICAgICAqIGRlZmF1bHRzIHRvIDAuNS4gQSBoaWdoZXIgdGhyZXNob2xkIHdpbGwgcmVxdWlyZSBsb3VkZXIgYXVkaW8gdG8gYWN0aXZhdGUgdGhlXG4gICAgICAgKiBtb2RlbCwgYW5kIHRodXMgbWlnaHQgcGVyZm9ybSBiZXR0ZXIgaW4gbm9pc3kgZW52aXJvbm1lbnRzLlxuICAgICAgICovXG4gICAgICB0aHJlc2hvbGQ/OiBudW1iZXI7XG5cbiAgICAgIC8qKlxuICAgICAgICogVHlwZSBvZiB0dXJuIGRldGVjdGlvbi5cbiAgICAgICAqL1xuICAgICAgdHlwZT86ICdzZXJ2ZXJfdmFkJyB8ICdzZW1hbnRpY192YWQnO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJldHVybmVkIHdoZW4gYSB0cmFuc2NyaXB0aW9uIHNlc3Npb24gaXMgdXBkYXRlZCB3aXRoIGFcbiAqIGB0cmFuc2NyaXB0aW9uX3Nlc3Npb24udXBkYXRlYCBldmVudCwgdW5sZXNzIHRoZXJlIGlzIGFuIGVycm9yLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zY3JpcHRpb25TZXNzaW9uVXBkYXRlZEV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHNlcnZlciBldmVudC5cbiAgICovXG4gIGV2ZW50X2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgbmV3IFJlYWx0aW1lIHRyYW5zY3JpcHRpb24gc2Vzc2lvbiBjb25maWd1cmF0aW9uLlxuICAgKlxuICAgKiBXaGVuIGEgc2Vzc2lvbiBpcyBjcmVhdGVkIG9uIHRoZSBzZXJ2ZXIgdmlhIFJFU1QgQVBJLCB0aGUgc2Vzc2lvbiBvYmplY3QgYWxzb1xuICAgKiBjb250YWlucyBhbiBlcGhlbWVyYWwga2V5LiBEZWZhdWx0IFRUTCBmb3Iga2V5cyBpcyAxMCBtaW51dGVzLiBUaGlzIHByb3BlcnR5IGlzXG4gICAqIG5vdCBwcmVzZW50IHdoZW4gYSBzZXNzaW9uIGlzIHVwZGF0ZWQgdmlhIHRoZSBXZWJTb2NrZXQgQVBJLlxuICAgKi9cbiAgc2Vzc2lvbjogVHJhbnNjcmlwdGlvblNlc3Npb25zQVBJLlRyYW5zY3JpcHRpb25TZXNzaW9uO1xuXG4gIC8qKlxuICAgKiBUaGUgZXZlbnQgdHlwZSwgbXVzdCBiZSBgdHJhbnNjcmlwdGlvbl9zZXNzaW9uLnVwZGF0ZWRgLlxuICAgKi9cbiAgdHlwZTogJ3RyYW5zY3JpcHRpb25fc2Vzc2lvbi51cGRhdGVkJztcbn1cblxuUmVhbHRpbWUuU2Vzc2lvbnMgPSBTZXNzaW9ucztcblJlYWx0aW1lLlRyYW5zY3JpcHRpb25TZXNzaW9ucyA9IFRyYW5zY3JpcHRpb25TZXNzaW9ucztcblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIFJlYWx0aW1lIHtcbiAgZXhwb3J0IHtcbiAgICB0eXBlIENvbnZlcnNhdGlvbkNyZWF0ZWRFdmVudCBhcyBDb252ZXJzYXRpb25DcmVhdGVkRXZlbnQsXG4gICAgdHlwZSBDb252ZXJzYXRpb25JdGVtIGFzIENvbnZlcnNhdGlvbkl0ZW0sXG4gICAgdHlwZSBDb252ZXJzYXRpb25JdGVtQ29udGVudCBhcyBDb252ZXJzYXRpb25JdGVtQ29udGVudCxcbiAgICB0eXBlIENvbnZlcnNhdGlvbkl0ZW1DcmVhdGVFdmVudCBhcyBDb252ZXJzYXRpb25JdGVtQ3JlYXRlRXZlbnQsXG4gICAgdHlwZSBDb252ZXJzYXRpb25JdGVtQ3JlYXRlZEV2ZW50IGFzIENvbnZlcnNhdGlvbkl0ZW1DcmVhdGVkRXZlbnQsXG4gICAgdHlwZSBDb252ZXJzYXRpb25JdGVtRGVsZXRlRXZlbnQgYXMgQ29udmVyc2F0aW9uSXRlbURlbGV0ZUV2ZW50LFxuICAgIHR5cGUgQ29udmVyc2F0aW9uSXRlbURlbGV0ZWRFdmVudCBhcyBDb252ZXJzYXRpb25JdGVtRGVsZXRlZEV2ZW50LFxuICAgIHR5cGUgQ29udmVyc2F0aW9uSXRlbUlucHV0QXVkaW9UcmFuc2NyaXB0aW9uQ29tcGxldGVkRXZlbnQgYXMgQ29udmVyc2F0aW9uSXRlbUlucHV0QXVkaW9UcmFuc2NyaXB0aW9uQ29tcGxldGVkRXZlbnQsXG4gICAgdHlwZSBDb252ZXJzYXRpb25JdGVtSW5wdXRBdWRpb1RyYW5zY3JpcHRpb25EZWx0YUV2ZW50IGFzIENvbnZlcnNhdGlvbkl0ZW1JbnB1dEF1ZGlvVHJhbnNjcmlwdGlvbkRlbHRhRXZlbnQsXG4gICAgdHlwZSBDb252ZXJzYXRpb25JdGVtSW5wdXRBdWRpb1RyYW5zY3JpcHRpb25GYWlsZWRFdmVudCBhcyBDb252ZXJzYXRpb25JdGVtSW5wdXRBdWRpb1RyYW5zY3JpcHRpb25GYWlsZWRFdmVudCxcbiAgICB0eXBlIENvbnZlcnNhdGlvbkl0ZW1SZXRyaWV2ZUV2ZW50IGFzIENvbnZlcnNhdGlvbkl0ZW1SZXRyaWV2ZUV2ZW50LFxuICAgIHR5cGUgQ29udmVyc2F0aW9uSXRlbVRydW5jYXRlRXZlbnQgYXMgQ29udmVyc2F0aW9uSXRlbVRydW5jYXRlRXZlbnQsXG4gICAgdHlwZSBDb252ZXJzYXRpb25JdGVtVHJ1bmNhdGVkRXZlbnQgYXMgQ29udmVyc2F0aW9uSXRlbVRydW5jYXRlZEV2ZW50LFxuICAgIHR5cGUgQ29udmVyc2F0aW9uSXRlbVdpdGhSZWZlcmVuY2UgYXMgQ29udmVyc2F0aW9uSXRlbVdpdGhSZWZlcmVuY2UsXG4gICAgdHlwZSBFcnJvckV2ZW50IGFzIEVycm9yRXZlbnQsXG4gICAgdHlwZSBJbnB1dEF1ZGlvQnVmZmVyQXBwZW5kRXZlbnQgYXMgSW5wdXRBdWRpb0J1ZmZlckFwcGVuZEV2ZW50LFxuICAgIHR5cGUgSW5wdXRBdWRpb0J1ZmZlckNsZWFyRXZlbnQgYXMgSW5wdXRBdWRpb0J1ZmZlckNsZWFyRXZlbnQsXG4gICAgdHlwZSBJbnB1dEF1ZGlvQnVmZmVyQ2xlYXJlZEV2ZW50IGFzIElucHV0QXVkaW9CdWZmZXJDbGVhcmVkRXZlbnQsXG4gICAgdHlwZSBJbnB1dEF1ZGlvQnVmZmVyQ29tbWl0RXZlbnQgYXMgSW5wdXRBdWRpb0J1ZmZlckNvbW1pdEV2ZW50LFxuICAgIHR5cGUgSW5wdXRBdWRpb0J1ZmZlckNvbW1pdHRlZEV2ZW50IGFzIElucHV0QXVkaW9CdWZmZXJDb21taXR0ZWRFdmVudCxcbiAgICB0eXBlIElucHV0QXVkaW9CdWZmZXJTcGVlY2hTdGFydGVkRXZlbnQgYXMgSW5wdXRBdWRpb0J1ZmZlclNwZWVjaFN0YXJ0ZWRFdmVudCxcbiAgICB0eXBlIElucHV0QXVkaW9CdWZmZXJTcGVlY2hTdG9wcGVkRXZlbnQgYXMgSW5wdXRBdWRpb0J1ZmZlclNwZWVjaFN0b3BwZWRFdmVudCxcbiAgICB0eXBlIFJhdGVMaW1pdHNVcGRhdGVkRXZlbnQgYXMgUmF0ZUxpbWl0c1VwZGF0ZWRFdmVudCxcbiAgICB0eXBlIFJlYWx0aW1lQ2xpZW50RXZlbnQgYXMgUmVhbHRpbWVDbGllbnRFdmVudCxcbiAgICB0eXBlIFJlYWx0aW1lUmVzcG9uc2UgYXMgUmVhbHRpbWVSZXNwb25zZSxcbiAgICB0eXBlIFJlYWx0aW1lUmVzcG9uc2VTdGF0dXMgYXMgUmVhbHRpbWVSZXNwb25zZVN0YXR1cyxcbiAgICB0eXBlIFJlYWx0aW1lUmVzcG9uc2VVc2FnZSBhcyBSZWFsdGltZVJlc3BvbnNlVXNhZ2UsXG4gICAgdHlwZSBSZWFsdGltZVNlcnZlckV2ZW50IGFzIFJlYWx0aW1lU2VydmVyRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZUF1ZGlvRGVsdGFFdmVudCBhcyBSZXNwb25zZUF1ZGlvRGVsdGFFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlQXVkaW9Eb25lRXZlbnQgYXMgUmVzcG9uc2VBdWRpb0RvbmVFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlQXVkaW9UcmFuc2NyaXB0RGVsdGFFdmVudCBhcyBSZXNwb25zZUF1ZGlvVHJhbnNjcmlwdERlbHRhRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZUF1ZGlvVHJhbnNjcmlwdERvbmVFdmVudCBhcyBSZXNwb25zZUF1ZGlvVHJhbnNjcmlwdERvbmVFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlQ2FuY2VsRXZlbnQgYXMgUmVzcG9uc2VDYW5jZWxFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlQ29udGVudFBhcnRBZGRlZEV2ZW50IGFzIFJlc3BvbnNlQ29udGVudFBhcnRBZGRlZEV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VDb250ZW50UGFydERvbmVFdmVudCBhcyBSZXNwb25zZUNvbnRlbnRQYXJ0RG9uZUV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VDcmVhdGVFdmVudCBhcyBSZXNwb25zZUNyZWF0ZUV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VDcmVhdGVkRXZlbnQgYXMgUmVzcG9uc2VDcmVhdGVkRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZURvbmVFdmVudCBhcyBSZXNwb25zZURvbmVFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlRnVuY3Rpb25DYWxsQXJndW1lbnRzRGVsdGFFdmVudCBhcyBSZXNwb25zZUZ1bmN0aW9uQ2FsbEFyZ3VtZW50c0RlbHRhRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZUZ1bmN0aW9uQ2FsbEFyZ3VtZW50c0RvbmVFdmVudCBhcyBSZXNwb25zZUZ1bmN0aW9uQ2FsbEFyZ3VtZW50c0RvbmVFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlT3V0cHV0SXRlbUFkZGVkRXZlbnQgYXMgUmVzcG9uc2VPdXRwdXRJdGVtQWRkZWRFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlT3V0cHV0SXRlbURvbmVFdmVudCBhcyBSZXNwb25zZU91dHB1dEl0ZW1Eb25lRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZVRleHREZWx0YUV2ZW50IGFzIFJlc3BvbnNlVGV4dERlbHRhRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZVRleHREb25lRXZlbnQgYXMgUmVzcG9uc2VUZXh0RG9uZUV2ZW50LFxuICAgIHR5cGUgU2Vzc2lvbkNyZWF0ZWRFdmVudCBhcyBTZXNzaW9uQ3JlYXRlZEV2ZW50LFxuICAgIHR5cGUgU2Vzc2lvblVwZGF0ZUV2ZW50IGFzIFNlc3Npb25VcGRhdGVFdmVudCxcbiAgICB0eXBlIFNlc3Npb25VcGRhdGVkRXZlbnQgYXMgU2Vzc2lvblVwZGF0ZWRFdmVudCxcbiAgICB0eXBlIFRyYW5zY3JpcHRpb25TZXNzaW9uVXBkYXRlIGFzIFRyYW5zY3JpcHRpb25TZXNzaW9uVXBkYXRlLFxuICAgIHR5cGUgVHJhbnNjcmlwdGlvblNlc3Npb25VcGRhdGVkRXZlbnQgYXMgVHJhbnNjcmlwdGlvblNlc3Npb25VcGRhdGVkRXZlbnQsXG4gIH07XG5cbiAgZXhwb3J0IHtcbiAgICBTZXNzaW9ucyBhcyBTZXNzaW9ucyxcbiAgICB0eXBlIFNlc3Npb25zQVBJU2Vzc2lvbiBhcyBTZXNzaW9uLFxuICAgIHR5cGUgU2Vzc2lvbkNyZWF0ZVJlc3BvbnNlIGFzIFNlc3Npb25DcmVhdGVSZXNwb25zZSxcbiAgICB0eXBlIFNlc3Npb25DcmVhdGVQYXJhbXMgYXMgU2Vzc2lvbkNyZWF0ZVBhcmFtcyxcbiAgfTtcblxuICBleHBvcnQge1xuICAgIFRyYW5zY3JpcHRpb25TZXNzaW9ucyBhcyBUcmFuc2NyaXB0aW9uU2Vzc2lvbnMsXG4gICAgdHlwZSBUcmFuc2NyaXB0aW9uU2Vzc2lvbiBhcyBUcmFuc2NyaXB0aW9uU2Vzc2lvbixcbiAgICB0eXBlIFRyYW5zY3JpcHRpb25TZXNzaW9uQ3JlYXRlUGFyYW1zIGFzIFRyYW5zY3JpcHRpb25TZXNzaW9uQ3JlYXRlUGFyYW1zLFxuICB9O1xufVxuIiwgIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnLi4vLi4vLi4vcmVzb3VyY2UnO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tICcuLi8uLi8uLi9jb3JlJztcbmltcG9ydCAqIGFzIFNoYXJlZCBmcm9tICcuLi8uLi9zaGFyZWQnO1xuaW1wb3J0ICogYXMgQXNzaXN0YW50c0FQSSBmcm9tICcuLi9hc3Npc3RhbnRzJztcbmltcG9ydCB7IEN1cnNvclBhZ2UsIHR5cGUgQ3Vyc29yUGFnZVBhcmFtcyB9IGZyb20gJy4uLy4uLy4uL3BhZ2luYXRpb24nO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFRoZSBBc3Npc3RhbnRzIEFQSSBpcyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIHRoZSBSZXNwb25zZXMgQVBJXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXNzYWdlcyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG1lc3NhZ2UuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFRoZSBBc3Npc3RhbnRzIEFQSSBpcyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIHRoZSBSZXNwb25zZXMgQVBJXG4gICAqL1xuICBjcmVhdGUoXG4gICAgdGhyZWFkSWQ6IHN0cmluZyxcbiAgICBib2R5OiBNZXNzYWdlQ3JlYXRlUGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLkFQSVByb21pc2U8TWVzc2FnZT4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3RocmVhZHMvJHt0aHJlYWRJZH0vbWVzc2FnZXNgLCB7XG4gICAgICBib2R5LFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgYSBtZXNzYWdlLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBUaGUgQXNzaXN0YW50cyBBUEkgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgUmVzcG9uc2VzIEFQSVxuICAgKi9cbiAgcmV0cmlldmUodGhyZWFkSWQ6IHN0cmluZywgbWVzc2FnZUlkOiBzdHJpbmcsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5BUElQcm9taXNlPE1lc3NhZ2U+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL3RocmVhZHMvJHt0aHJlYWRJZH0vbWVzc2FnZXMvJHttZXNzYWdlSWR9YCwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTW9kaWZpZXMgYSBtZXNzYWdlLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBUaGUgQXNzaXN0YW50cyBBUEkgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgUmVzcG9uc2VzIEFQSVxuICAgKi9cbiAgdXBkYXRlKFxuICAgIHRocmVhZElkOiBzdHJpbmcsXG4gICAgbWVzc2FnZUlkOiBzdHJpbmcsXG4gICAgYm9keTogTWVzc2FnZVVwZGF0ZVBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5BUElQcm9taXNlPE1lc3NhZ2U+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC90aHJlYWRzLyR7dGhyZWFkSWR9L21lc3NhZ2VzLyR7bWVzc2FnZUlkfWAsIHtcbiAgICAgIGJvZHksXG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBtZXNzYWdlcyBmb3IgYSBnaXZlbiB0aHJlYWQuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFRoZSBBc3Npc3RhbnRzIEFQSSBpcyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIHRoZSBSZXNwb25zZXMgQVBJXG4gICAqL1xuICBsaXN0KFxuICAgIHRocmVhZElkOiBzdHJpbmcsXG4gICAgcXVlcnk/OiBNZXNzYWdlTGlzdFBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5QYWdlUHJvbWlzZTxNZXNzYWdlc1BhZ2UsIE1lc3NhZ2U+O1xuICBsaXN0KHRocmVhZElkOiBzdHJpbmcsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5QYWdlUHJvbWlzZTxNZXNzYWdlc1BhZ2UsIE1lc3NhZ2U+O1xuICBsaXN0KFxuICAgIHRocmVhZElkOiBzdHJpbmcsXG4gICAgcXVlcnk6IE1lc3NhZ2VMaXN0UGFyYW1zIHwgQ29yZS5SZXF1ZXN0T3B0aW9ucyA9IHt9LFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLlBhZ2VQcm9taXNlPE1lc3NhZ2VzUGFnZSwgTWVzc2FnZT4ge1xuICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xuICAgICAgcmV0dXJuIHRoaXMubGlzdCh0aHJlYWRJZCwge30sIHF1ZXJ5KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KGAvdGhyZWFkcy8ke3RocmVhZElkfS9tZXNzYWdlc2AsIE1lc3NhZ2VzUGFnZSwge1xuICAgICAgcXVlcnksXG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGEgbWVzc2FnZS5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVGhlIEFzc2lzdGFudHMgQVBJIGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgdGhlIFJlc3BvbnNlcyBBUElcbiAgICovXG4gIGRlbCh0aHJlYWRJZDogc3RyaW5nLCBtZXNzYWdlSWQ6IHN0cmluZywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkFQSVByb21pc2U8TWVzc2FnZURlbGV0ZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmRlbGV0ZShgL3RocmVhZHMvJHt0aHJlYWRJZH0vbWVzc2FnZXMvJHttZXNzYWdlSWR9YCwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VzUGFnZSBleHRlbmRzIEN1cnNvclBhZ2U8TWVzc2FnZT4ge31cblxuLyoqXG4gKiBBIGNpdGF0aW9uIHdpdGhpbiB0aGUgbWVzc2FnZSB0aGF0IHBvaW50cyB0byBhIHNwZWNpZmljIHF1b3RlIGZyb20gYSBzcGVjaWZpY1xuICogRmlsZSBhc3NvY2lhdGVkIHdpdGggdGhlIGFzc2lzdGFudCBvciB0aGUgbWVzc2FnZS4gR2VuZXJhdGVkIHdoZW4gdGhlIGFzc2lzdGFudFxuICogdXNlcyB0aGUgXCJmaWxlX3NlYXJjaFwiIHRvb2wgdG8gc2VhcmNoIGZpbGVzLlxuICovXG5leHBvcnQgdHlwZSBBbm5vdGF0aW9uID0gRmlsZUNpdGF0aW9uQW5ub3RhdGlvbiB8IEZpbGVQYXRoQW5ub3RhdGlvbjtcblxuLyoqXG4gKiBBIGNpdGF0aW9uIHdpdGhpbiB0aGUgbWVzc2FnZSB0aGF0IHBvaW50cyB0byBhIHNwZWNpZmljIHF1b3RlIGZyb20gYSBzcGVjaWZpY1xuICogRmlsZSBhc3NvY2lhdGVkIHdpdGggdGhlIGFzc2lzdGFudCBvciB0aGUgbWVzc2FnZS4gR2VuZXJhdGVkIHdoZW4gdGhlIGFzc2lzdGFudFxuICogdXNlcyB0aGUgXCJmaWxlX3NlYXJjaFwiIHRvb2wgdG8gc2VhcmNoIGZpbGVzLlxuICovXG5leHBvcnQgdHlwZSBBbm5vdGF0aW9uRGVsdGEgPSBGaWxlQ2l0YXRpb25EZWx0YUFubm90YXRpb24gfCBGaWxlUGF0aERlbHRhQW5ub3RhdGlvbjtcblxuLyoqXG4gKiBBIGNpdGF0aW9uIHdpdGhpbiB0aGUgbWVzc2FnZSB0aGF0IHBvaW50cyB0byBhIHNwZWNpZmljIHF1b3RlIGZyb20gYSBzcGVjaWZpY1xuICogRmlsZSBhc3NvY2lhdGVkIHdpdGggdGhlIGFzc2lzdGFudCBvciB0aGUgbWVzc2FnZS4gR2VuZXJhdGVkIHdoZW4gdGhlIGFzc2lzdGFudFxuICogdXNlcyB0aGUgXCJmaWxlX3NlYXJjaFwiIHRvb2wgdG8gc2VhcmNoIGZpbGVzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVDaXRhdGlvbkFubm90YXRpb24ge1xuICBlbmRfaW5kZXg6IG51bWJlcjtcblxuICBmaWxlX2NpdGF0aW9uOiBGaWxlQ2l0YXRpb25Bbm5vdGF0aW9uLkZpbGVDaXRhdGlvbjtcblxuICBzdGFydF9pbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdGV4dCBpbiB0aGUgbWVzc2FnZSBjb250ZW50IHRoYXQgbmVlZHMgdG8gYmUgcmVwbGFjZWQuXG4gICAqL1xuICB0ZXh0OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEFsd2F5cyBgZmlsZV9jaXRhdGlvbmAuXG4gICAqL1xuICB0eXBlOiAnZmlsZV9jaXRhdGlvbic7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgRmlsZUNpdGF0aW9uQW5ub3RhdGlvbiB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgRmlsZUNpdGF0aW9uIHtcbiAgICAvKipcbiAgICAgKiBUaGUgSUQgb2YgdGhlIHNwZWNpZmljIEZpbGUgdGhlIGNpdGF0aW9uIGlzIGZyb20uXG4gICAgICovXG4gICAgZmlsZV9pZDogc3RyaW5nO1xuICB9XG59XG5cbi8qKlxuICogQSBjaXRhdGlvbiB3aXRoaW4gdGhlIG1lc3NhZ2UgdGhhdCBwb2ludHMgdG8gYSBzcGVjaWZpYyBxdW90ZSBmcm9tIGEgc3BlY2lmaWNcbiAqIEZpbGUgYXNzb2NpYXRlZCB3aXRoIHRoZSBhc3Npc3RhbnQgb3IgdGhlIG1lc3NhZ2UuIEdlbmVyYXRlZCB3aGVuIHRoZSBhc3Npc3RhbnRcbiAqIHVzZXMgdGhlIFwiZmlsZV9zZWFyY2hcIiB0b29sIHRvIHNlYXJjaCBmaWxlcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBGaWxlQ2l0YXRpb25EZWx0YUFubm90YXRpb24ge1xuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBhbm5vdGF0aW9uIGluIHRoZSB0ZXh0IGNvbnRlbnQgcGFydC5cbiAgICovXG4gIGluZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEFsd2F5cyBgZmlsZV9jaXRhdGlvbmAuXG4gICAqL1xuICB0eXBlOiAnZmlsZV9jaXRhdGlvbic7XG5cbiAgZW5kX2luZGV4PzogbnVtYmVyO1xuXG4gIGZpbGVfY2l0YXRpb24/OiBGaWxlQ2l0YXRpb25EZWx0YUFubm90YXRpb24uRmlsZUNpdGF0aW9uO1xuXG4gIHN0YXJ0X2luZGV4PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdGV4dCBpbiB0aGUgbWVzc2FnZSBjb250ZW50IHRoYXQgbmVlZHMgdG8gYmUgcmVwbGFjZWQuXG4gICAqL1xuICB0ZXh0Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIEZpbGVDaXRhdGlvbkRlbHRhQW5ub3RhdGlvbiB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgRmlsZUNpdGF0aW9uIHtcbiAgICAvKipcbiAgICAgKiBUaGUgSUQgb2YgdGhlIHNwZWNpZmljIEZpbGUgdGhlIGNpdGF0aW9uIGlzIGZyb20uXG4gICAgICovXG4gICAgZmlsZV9pZD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBzcGVjaWZpYyBxdW90ZSBpbiB0aGUgZmlsZS5cbiAgICAgKi9cbiAgICBxdW90ZT86IHN0cmluZztcbiAgfVxufVxuXG4vKipcbiAqIEEgVVJMIGZvciB0aGUgZmlsZSB0aGF0J3MgZ2VuZXJhdGVkIHdoZW4gdGhlIGFzc2lzdGFudCB1c2VkIHRoZVxuICogYGNvZGVfaW50ZXJwcmV0ZXJgIHRvb2wgdG8gZ2VuZXJhdGUgYSBmaWxlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVQYXRoQW5ub3RhdGlvbiB7XG4gIGVuZF9pbmRleDogbnVtYmVyO1xuXG4gIGZpbGVfcGF0aDogRmlsZVBhdGhBbm5vdGF0aW9uLkZpbGVQYXRoO1xuXG4gIHN0YXJ0X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0ZXh0IGluIHRoZSBtZXNzYWdlIGNvbnRlbnQgdGhhdCBuZWVkcyB0byBiZSByZXBsYWNlZC5cbiAgICovXG4gIHRleHQ6IHN0cmluZztcblxuICAvKipcbiAgICogQWx3YXlzIGBmaWxlX3BhdGhgLlxuICAgKi9cbiAgdHlwZTogJ2ZpbGVfcGF0aCc7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgRmlsZVBhdGhBbm5vdGF0aW9uIHtcbiAgZXhwb3J0IGludGVyZmFjZSBGaWxlUGF0aCB7XG4gICAgLyoqXG4gICAgICogVGhlIElEIG9mIHRoZSBmaWxlIHRoYXQgd2FzIGdlbmVyYXRlZC5cbiAgICAgKi9cbiAgICBmaWxlX2lkOiBzdHJpbmc7XG4gIH1cbn1cblxuLyoqXG4gKiBBIFVSTCBmb3IgdGhlIGZpbGUgdGhhdCdzIGdlbmVyYXRlZCB3aGVuIHRoZSBhc3Npc3RhbnQgdXNlZCB0aGVcbiAqIGBjb2RlX2ludGVycHJldGVyYCB0b29sIHRvIGdlbmVyYXRlIGEgZmlsZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBGaWxlUGF0aERlbHRhQW5ub3RhdGlvbiB7XG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIGFubm90YXRpb24gaW4gdGhlIHRleHQgY29udGVudCBwYXJ0LlxuICAgKi9cbiAgaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogQWx3YXlzIGBmaWxlX3BhdGhgLlxuICAgKi9cbiAgdHlwZTogJ2ZpbGVfcGF0aCc7XG5cbiAgZW5kX2luZGV4PzogbnVtYmVyO1xuXG4gIGZpbGVfcGF0aD86IEZpbGVQYXRoRGVsdGFBbm5vdGF0aW9uLkZpbGVQYXRoO1xuXG4gIHN0YXJ0X2luZGV4PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdGV4dCBpbiB0aGUgbWVzc2FnZSBjb250ZW50IHRoYXQgbmVlZHMgdG8gYmUgcmVwbGFjZWQuXG4gICAqL1xuICB0ZXh0Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIEZpbGVQYXRoRGVsdGFBbm5vdGF0aW9uIHtcbiAgZXhwb3J0IGludGVyZmFjZSBGaWxlUGF0aCB7XG4gICAgLyoqXG4gICAgICogVGhlIElEIG9mIHRoZSBmaWxlIHRoYXQgd2FzIGdlbmVyYXRlZC5cbiAgICAgKi9cbiAgICBmaWxlX2lkPzogc3RyaW5nO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW1hZ2VGaWxlIHtcbiAgLyoqXG4gICAqIFRoZSBbRmlsZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maWxlcykgSUQgb2YgdGhlIGltYWdlXG4gICAqIGluIHRoZSBtZXNzYWdlIGNvbnRlbnQuIFNldCBgcHVycG9zZT1cInZpc2lvblwiYCB3aGVuIHVwbG9hZGluZyB0aGUgRmlsZSBpZiB5b3VcbiAgICogbmVlZCB0byBsYXRlciBkaXNwbGF5IHRoZSBmaWxlIGNvbnRlbnQuXG4gICAqL1xuICBmaWxlX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgZGV0YWlsIGxldmVsIG9mIHRoZSBpbWFnZSBpZiBzcGVjaWZpZWQgYnkgdGhlIHVzZXIuIGBsb3dgIHVzZXNcbiAgICogZmV3ZXIgdG9rZW5zLCB5b3UgY2FuIG9wdCBpbiB0byBoaWdoIHJlc29sdXRpb24gdXNpbmcgYGhpZ2hgLlxuICAgKi9cbiAgZGV0YWlsPzogJ2F1dG8nIHwgJ2xvdycgfCAnaGlnaCc7XG59XG5cbi8qKlxuICogUmVmZXJlbmNlcyBhbiBpbWFnZSBbRmlsZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maWxlcylcbiAqIGluIHRoZSBjb250ZW50IG9mIGEgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbWFnZUZpbGVDb250ZW50QmxvY2sge1xuICBpbWFnZV9maWxlOiBJbWFnZUZpbGU7XG5cbiAgLyoqXG4gICAqIEFsd2F5cyBgaW1hZ2VfZmlsZWAuXG4gICAqL1xuICB0eXBlOiAnaW1hZ2VfZmlsZSc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW1hZ2VGaWxlRGVsdGEge1xuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSBkZXRhaWwgbGV2ZWwgb2YgdGhlIGltYWdlIGlmIHNwZWNpZmllZCBieSB0aGUgdXNlci4gYGxvd2AgdXNlc1xuICAgKiBmZXdlciB0b2tlbnMsIHlvdSBjYW4gb3B0IGluIHRvIGhpZ2ggcmVzb2x1dGlvbiB1c2luZyBgaGlnaGAuXG4gICAqL1xuICBkZXRhaWw/OiAnYXV0bycgfCAnbG93JyB8ICdoaWdoJztcblxuICAvKipcbiAgICogVGhlIFtGaWxlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2ZpbGVzKSBJRCBvZiB0aGUgaW1hZ2VcbiAgICogaW4gdGhlIG1lc3NhZ2UgY29udGVudC4gU2V0IGBwdXJwb3NlPVwidmlzaW9uXCJgIHdoZW4gdXBsb2FkaW5nIHRoZSBGaWxlIGlmIHlvdVxuICAgKiBuZWVkIHRvIGxhdGVyIGRpc3BsYXkgdGhlIGZpbGUgY29udGVudC5cbiAgICovXG4gIGZpbGVfaWQ/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogUmVmZXJlbmNlcyBhbiBpbWFnZSBbRmlsZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maWxlcylcbiAqIGluIHRoZSBjb250ZW50IG9mIGEgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbWFnZUZpbGVEZWx0YUJsb2NrIHtcbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgY29udGVudCBwYXJ0IGluIHRoZSBtZXNzYWdlLlxuICAgKi9cbiAgaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogQWx3YXlzIGBpbWFnZV9maWxlYC5cbiAgICovXG4gIHR5cGU6ICdpbWFnZV9maWxlJztcblxuICBpbWFnZV9maWxlPzogSW1hZ2VGaWxlRGVsdGE7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW1hZ2VVUkwge1xuICAvKipcbiAgICogVGhlIGV4dGVybmFsIFVSTCBvZiB0aGUgaW1hZ2UsIG11c3QgYmUgYSBzdXBwb3J0ZWQgaW1hZ2UgdHlwZXM6IGpwZWcsIGpwZywgcG5nLFxuICAgKiBnaWYsIHdlYnAuXG4gICAqL1xuICB1cmw6IHN0cmluZztcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSBkZXRhaWwgbGV2ZWwgb2YgdGhlIGltYWdlLiBgbG93YCB1c2VzIGZld2VyIHRva2VucywgeW91IGNhbiBvcHQgaW5cbiAgICogdG8gaGlnaCByZXNvbHV0aW9uIHVzaW5nIGBoaWdoYC4gRGVmYXVsdCB2YWx1ZSBpcyBgYXV0b2BcbiAgICovXG4gIGRldGFpbD86ICdhdXRvJyB8ICdsb3cnIHwgJ2hpZ2gnO1xufVxuXG4vKipcbiAqIFJlZmVyZW5jZXMgYW4gaW1hZ2UgVVJMIGluIHRoZSBjb250ZW50IG9mIGEgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbWFnZVVSTENvbnRlbnRCbG9jayB7XG4gIGltYWdlX3VybDogSW1hZ2VVUkw7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBjb250ZW50IHBhcnQuXG4gICAqL1xuICB0eXBlOiAnaW1hZ2VfdXJsJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbWFnZVVSTERlbHRhIHtcbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgZGV0YWlsIGxldmVsIG9mIHRoZSBpbWFnZS4gYGxvd2AgdXNlcyBmZXdlciB0b2tlbnMsIHlvdSBjYW4gb3B0IGluXG4gICAqIHRvIGhpZ2ggcmVzb2x1dGlvbiB1c2luZyBgaGlnaGAuXG4gICAqL1xuICBkZXRhaWw/OiAnYXV0bycgfCAnbG93JyB8ICdoaWdoJztcblxuICAvKipcbiAgICogVGhlIFVSTCBvZiB0aGUgaW1hZ2UsIG11c3QgYmUgYSBzdXBwb3J0ZWQgaW1hZ2UgdHlwZXM6IGpwZWcsIGpwZywgcG5nLCBnaWYsXG4gICAqIHdlYnAuXG4gICAqL1xuICB1cmw/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogUmVmZXJlbmNlcyBhbiBpbWFnZSBVUkwgaW4gdGhlIGNvbnRlbnQgb2YgYSBtZXNzYWdlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEltYWdlVVJMRGVsdGFCbG9jayB7XG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIGNvbnRlbnQgcGFydCBpbiB0aGUgbWVzc2FnZS5cbiAgICovXG4gIGluZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEFsd2F5cyBgaW1hZ2VfdXJsYC5cbiAgICovXG4gIHR5cGU6ICdpbWFnZV91cmwnO1xuXG4gIGltYWdlX3VybD86IEltYWdlVVJMRGVsdGE7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIG1lc3NhZ2Ugd2l0aGluIGFcbiAqIFt0aHJlYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdGhyZWFkcykuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZSB7XG4gIC8qKlxuICAgKiBUaGUgaWRlbnRpZmllciwgd2hpY2ggY2FuIGJlIHJlZmVyZW5jZWQgaW4gQVBJIGVuZHBvaW50cy5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIElmIGFwcGxpY2FibGUsIHRoZSBJRCBvZiB0aGVcbiAgICogW2Fzc2lzdGFudF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9hc3Npc3RhbnRzKSB0aGF0XG4gICAqIGF1dGhvcmVkIHRoaXMgbWVzc2FnZS5cbiAgICovXG4gIGFzc2lzdGFudF9pZDogc3RyaW5nIHwgbnVsbDtcblxuICAvKipcbiAgICogQSBsaXN0IG9mIGZpbGVzIGF0dGFjaGVkIHRvIHRoZSBtZXNzYWdlLCBhbmQgdGhlIHRvb2xzIHRoZXkgd2VyZSBhZGRlZCB0by5cbiAgICovXG4gIGF0dGFjaG1lbnRzOiBBcnJheTxNZXNzYWdlLkF0dGFjaG1lbnQ+IHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSBmb3Igd2hlbiB0aGUgbWVzc2FnZSB3YXMgY29tcGxldGVkLlxuICAgKi9cbiAgY29tcGxldGVkX2F0OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgbWVzc2FnZSBpbiBhcnJheSBvZiB0ZXh0IGFuZC9vciBpbWFnZXMuXG4gICAqL1xuICBjb250ZW50OiBBcnJheTxNZXNzYWdlQ29udGVudD47XG5cbiAgLyoqXG4gICAqIFRoZSBVbml4IHRpbWVzdGFtcCAoaW4gc2Vjb25kcykgZm9yIHdoZW4gdGhlIG1lc3NhZ2Ugd2FzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkX2F0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBVbml4IHRpbWVzdGFtcCAoaW4gc2Vjb25kcykgZm9yIHdoZW4gdGhlIG1lc3NhZ2Ugd2FzIG1hcmtlZCBhcyBpbmNvbXBsZXRlLlxuICAgKi9cbiAgaW5jb21wbGV0ZV9hdDogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogT24gYW4gaW5jb21wbGV0ZSBtZXNzYWdlLCBkZXRhaWxzIGFib3V0IHdoeSB0aGUgbWVzc2FnZSBpcyBpbmNvbXBsZXRlLlxuICAgKi9cbiAgaW5jb21wbGV0ZV9kZXRhaWxzOiBNZXNzYWdlLkluY29tcGxldGVEZXRhaWxzIHwgbnVsbDtcblxuICAvKipcbiAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdCwgYW5kXG4gICAqIHF1ZXJ5aW5nIGZvciBvYmplY3RzIHZpYSBBUEkgb3IgdGhlIGRhc2hib2FyZC5cbiAgICpcbiAgICogS2V5cyBhcmUgc3RyaW5ncyB3aXRoIGEgbWF4aW11bSBsZW5ndGggb2YgNjQgY2hhcmFjdGVycy4gVmFsdWVzIGFyZSBzdHJpbmdzIHdpdGhcbiAgICogYSBtYXhpbXVtIGxlbmd0aCBvZiA1MTIgY2hhcmFjdGVycy5cbiAgICovXG4gIG1ldGFkYXRhOiBTaGFyZWQuTWV0YWRhdGEgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgb2JqZWN0IHR5cGUsIHdoaWNoIGlzIGFsd2F5cyBgdGhyZWFkLm1lc3NhZ2VgLlxuICAgKi9cbiAgb2JqZWN0OiAndGhyZWFkLm1lc3NhZ2UnO1xuXG4gIC8qKlxuICAgKiBUaGUgZW50aXR5IHRoYXQgcHJvZHVjZWQgdGhlIG1lc3NhZ2UuIE9uZSBvZiBgdXNlcmAgb3IgYGFzc2lzdGFudGAuXG4gICAqL1xuICByb2xlOiAndXNlcicgfCAnYXNzaXN0YW50JztcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBbcnVuXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3J1bnMpXG4gICAqIGFzc29jaWF0ZWQgd2l0aCB0aGUgY3JlYXRpb24gb2YgdGhpcyBtZXNzYWdlLiBWYWx1ZSBpcyBgbnVsbGAgd2hlbiBtZXNzYWdlcyBhcmVcbiAgICogY3JlYXRlZCBtYW51YWxseSB1c2luZyB0aGUgY3JlYXRlIG1lc3NhZ2Ugb3IgY3JlYXRlIHRocmVhZCBlbmRwb2ludHMuXG4gICAqL1xuICBydW5faWQ6IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBzdGF0dXMgb2YgdGhlIG1lc3NhZ2UsIHdoaWNoIGNhbiBiZSBlaXRoZXIgYGluX3Byb2dyZXNzYCwgYGluY29tcGxldGVgLCBvclxuICAgKiBgY29tcGxldGVkYC5cbiAgICovXG4gIHN0YXR1czogJ2luX3Byb2dyZXNzJyB8ICdpbmNvbXBsZXRlJyB8ICdjb21wbGV0ZWQnO1xuXG4gIC8qKlxuICAgKiBUaGUgW3RocmVhZF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS90aHJlYWRzKSBJRCB0aGF0XG4gICAqIHRoaXMgbWVzc2FnZSBiZWxvbmdzIHRvLlxuICAgKi9cbiAgdGhyZWFkX2lkOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgTWVzc2FnZSB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgQXR0YWNobWVudCB7XG4gICAgLyoqXG4gICAgICogVGhlIElEIG9mIHRoZSBmaWxlIHRvIGF0dGFjaCB0byB0aGUgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBmaWxlX2lkPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRvb2xzIHRvIGFkZCB0aGlzIGZpbGUgdG8uXG4gICAgICovXG4gICAgdG9vbHM/OiBBcnJheTxBc3Npc3RhbnRzQVBJLkNvZGVJbnRlcnByZXRlclRvb2wgfCBBdHRhY2htZW50LkFzc2lzdGFudFRvb2xzRmlsZVNlYXJjaFR5cGVPbmx5PjtcbiAgfVxuXG4gIGV4cG9ydCBuYW1lc3BhY2UgQXR0YWNobWVudCB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBBc3Npc3RhbnRUb29sc0ZpbGVTZWFyY2hUeXBlT25seSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSB0eXBlIG9mIHRvb2wgYmVpbmcgZGVmaW5lZDogYGZpbGVfc2VhcmNoYFxuICAgICAgICovXG4gICAgICB0eXBlOiAnZmlsZV9zZWFyY2gnO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBPbiBhbiBpbmNvbXBsZXRlIG1lc3NhZ2UsIGRldGFpbHMgYWJvdXQgd2h5IHRoZSBtZXNzYWdlIGlzIGluY29tcGxldGUuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIEluY29tcGxldGVEZXRhaWxzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgcmVhc29uIHRoZSBtZXNzYWdlIGlzIGluY29tcGxldGUuXG4gICAgICovXG4gICAgcmVhc29uOiAnY29udGVudF9maWx0ZXInIHwgJ21heF90b2tlbnMnIHwgJ3J1bl9jYW5jZWxsZWQnIHwgJ3J1bl9leHBpcmVkJyB8ICdydW5fZmFpbGVkJztcbiAgfVxufVxuXG4vKipcbiAqIFJlZmVyZW5jZXMgYW4gaW1hZ2UgW0ZpbGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvZmlsZXMpXG4gKiBpbiB0aGUgY29udGVudCBvZiBhIG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCB0eXBlIE1lc3NhZ2VDb250ZW50ID1cbiAgfCBJbWFnZUZpbGVDb250ZW50QmxvY2tcbiAgfCBJbWFnZVVSTENvbnRlbnRCbG9ja1xuICB8IFRleHRDb250ZW50QmxvY2tcbiAgfCBSZWZ1c2FsQ29udGVudEJsb2NrO1xuXG4vKipcbiAqIFJlZmVyZW5jZXMgYW4gaW1hZ2UgW0ZpbGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvZmlsZXMpXG4gKiBpbiB0aGUgY29udGVudCBvZiBhIG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCB0eXBlIE1lc3NhZ2VDb250ZW50RGVsdGEgPVxuICB8IEltYWdlRmlsZURlbHRhQmxvY2tcbiAgfCBUZXh0RGVsdGFCbG9ja1xuICB8IFJlZnVzYWxEZWx0YUJsb2NrXG4gIHwgSW1hZ2VVUkxEZWx0YUJsb2NrO1xuXG4vKipcbiAqIFJlZmVyZW5jZXMgYW4gaW1hZ2UgW0ZpbGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvZmlsZXMpXG4gKiBpbiB0aGUgY29udGVudCBvZiBhIG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCB0eXBlIE1lc3NhZ2VDb250ZW50UGFydFBhcmFtID0gSW1hZ2VGaWxlQ29udGVudEJsb2NrIHwgSW1hZ2VVUkxDb250ZW50QmxvY2sgfCBUZXh0Q29udGVudEJsb2NrUGFyYW07XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZURlbGV0ZWQge1xuICBpZDogc3RyaW5nO1xuXG4gIGRlbGV0ZWQ6IGJvb2xlYW47XG5cbiAgb2JqZWN0OiAndGhyZWFkLm1lc3NhZ2UuZGVsZXRlZCc7XG59XG5cbi8qKlxuICogVGhlIGRlbHRhIGNvbnRhaW5pbmcgdGhlIGZpZWxkcyB0aGF0IGhhdmUgY2hhbmdlZCBvbiB0aGUgTWVzc2FnZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlRGVsdGEge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIG1lc3NhZ2UgaW4gYXJyYXkgb2YgdGV4dCBhbmQvb3IgaW1hZ2VzLlxuICAgKi9cbiAgY29udGVudD86IEFycmF5PE1lc3NhZ2VDb250ZW50RGVsdGE+O1xuXG4gIC8qKlxuICAgKiBUaGUgZW50aXR5IHRoYXQgcHJvZHVjZWQgdGhlIG1lc3NhZ2UuIE9uZSBvZiBgdXNlcmAgb3IgYGFzc2lzdGFudGAuXG4gICAqL1xuICByb2xlPzogJ3VzZXInIHwgJ2Fzc2lzdGFudCc7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIG1lc3NhZ2UgZGVsdGEgaS5lLiBhbnkgY2hhbmdlZCBmaWVsZHMgb24gYSBtZXNzYWdlIGR1cmluZ1xuICogc3RyZWFtaW5nLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VEZWx0YUV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBtZXNzYWdlLCB3aGljaCBjYW4gYmUgcmVmZXJlbmNlZCBpbiBBUEkgZW5kcG9pbnRzLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGRlbHRhIGNvbnRhaW5pbmcgdGhlIGZpZWxkcyB0aGF0IGhhdmUgY2hhbmdlZCBvbiB0aGUgTWVzc2FnZS5cbiAgICovXG4gIGRlbHRhOiBNZXNzYWdlRGVsdGE7XG5cbiAgLyoqXG4gICAqIFRoZSBvYmplY3QgdHlwZSwgd2hpY2ggaXMgYWx3YXlzIGB0aHJlYWQubWVzc2FnZS5kZWx0YWAuXG4gICAqL1xuICBvYmplY3Q6ICd0aHJlYWQubWVzc2FnZS5kZWx0YSc7XG59XG5cbi8qKlxuICogVGhlIHJlZnVzYWwgY29udGVudCBnZW5lcmF0ZWQgYnkgdGhlIGFzc2lzdGFudC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZWZ1c2FsQ29udGVudEJsb2NrIHtcbiAgcmVmdXNhbDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBbHdheXMgYHJlZnVzYWxgLlxuICAgKi9cbiAgdHlwZTogJ3JlZnVzYWwnO1xufVxuXG4vKipcbiAqIFRoZSByZWZ1c2FsIGNvbnRlbnQgdGhhdCBpcyBwYXJ0IG9mIGEgbWVzc2FnZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZWZ1c2FsRGVsdGFCbG9jayB7XG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIHJlZnVzYWwgcGFydCBpbiB0aGUgbWVzc2FnZS5cbiAgICovXG4gIGluZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEFsd2F5cyBgcmVmdXNhbGAuXG4gICAqL1xuICB0eXBlOiAncmVmdXNhbCc7XG5cbiAgcmVmdXNhbD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUZXh0IHtcbiAgYW5ub3RhdGlvbnM6IEFycmF5PEFubm90YXRpb24+O1xuXG4gIC8qKlxuICAgKiBUaGUgZGF0YSB0aGF0IG1ha2VzIHVwIHRoZSB0ZXh0LlxuICAgKi9cbiAgdmFsdWU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBUaGUgdGV4dCBjb250ZW50IHRoYXQgaXMgcGFydCBvZiBhIG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGV4dENvbnRlbnRCbG9jayB7XG4gIHRleHQ6IFRleHQ7XG5cbiAgLyoqXG4gICAqIEFsd2F5cyBgdGV4dGAuXG4gICAqL1xuICB0eXBlOiAndGV4dCc7XG59XG5cbi8qKlxuICogVGhlIHRleHQgY29udGVudCB0aGF0IGlzIHBhcnQgb2YgYSBtZXNzYWdlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRleHRDb250ZW50QmxvY2tQYXJhbSB7XG4gIC8qKlxuICAgKiBUZXh0IGNvbnRlbnQgdG8gYmUgc2VudCB0byB0aGUgbW9kZWxcbiAgICovXG4gIHRleHQ6IHN0cmluZztcblxuICAvKipcbiAgICogQWx3YXlzIGB0ZXh0YC5cbiAgICovXG4gIHR5cGU6ICd0ZXh0Jztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUZXh0RGVsdGEge1xuICBhbm5vdGF0aW9ucz86IEFycmF5PEFubm90YXRpb25EZWx0YT47XG5cbiAgLyoqXG4gICAqIFRoZSBkYXRhIHRoYXQgbWFrZXMgdXAgdGhlIHRleHQuXG4gICAqL1xuICB2YWx1ZT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBUaGUgdGV4dCBjb250ZW50IHRoYXQgaXMgcGFydCBvZiBhIG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGV4dERlbHRhQmxvY2sge1xuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBjb250ZW50IHBhcnQgaW4gdGhlIG1lc3NhZ2UuXG4gICAqL1xuICBpbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBBbHdheXMgYHRleHRgLlxuICAgKi9cbiAgdHlwZTogJ3RleHQnO1xuXG4gIHRleHQ/OiBUZXh0RGVsdGE7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZUNyZWF0ZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBUaGUgdGV4dCBjb250ZW50cyBvZiB0aGUgbWVzc2FnZS5cbiAgICovXG4gIGNvbnRlbnQ6IHN0cmluZyB8IEFycmF5PE1lc3NhZ2VDb250ZW50UGFydFBhcmFtPjtcblxuICAvKipcbiAgICogVGhlIHJvbGUgb2YgdGhlIGVudGl0eSB0aGF0IGlzIGNyZWF0aW5nIHRoZSBtZXNzYWdlLiBBbGxvd2VkIHZhbHVlcyBpbmNsdWRlOlxuICAgKlxuICAgKiAtIGB1c2VyYDogSW5kaWNhdGVzIHRoZSBtZXNzYWdlIGlzIHNlbnQgYnkgYW4gYWN0dWFsIHVzZXIgYW5kIHNob3VsZCBiZSB1c2VkIGluXG4gICAqICAgbW9zdCBjYXNlcyB0byByZXByZXNlbnQgdXNlci1nZW5lcmF0ZWQgbWVzc2FnZXMuXG4gICAqIC0gYGFzc2lzdGFudGA6IEluZGljYXRlcyB0aGUgbWVzc2FnZSBpcyBnZW5lcmF0ZWQgYnkgdGhlIGFzc2lzdGFudC4gVXNlIHRoaXNcbiAgICogICB2YWx1ZSB0byBpbnNlcnQgbWVzc2FnZXMgZnJvbSB0aGUgYXNzaXN0YW50IGludG8gdGhlIGNvbnZlcnNhdGlvbi5cbiAgICovXG4gIHJvbGU6ICd1c2VyJyB8ICdhc3Npc3RhbnQnO1xuXG4gIC8qKlxuICAgKiBBIGxpc3Qgb2YgZmlsZXMgYXR0YWNoZWQgdG8gdGhlIG1lc3NhZ2UsIGFuZCB0aGUgdG9vbHMgdGhleSBzaG91bGQgYmUgYWRkZWQgdG8uXG4gICAqL1xuICBhdHRhY2htZW50cz86IEFycmF5PE1lc3NhZ2VDcmVhdGVQYXJhbXMuQXR0YWNobWVudD4gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgKlxuICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbWV0YWRhdGE/OiBTaGFyZWQuTWV0YWRhdGEgfCBudWxsO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIE1lc3NhZ2VDcmVhdGVQYXJhbXMge1xuICBleHBvcnQgaW50ZXJmYWNlIEF0dGFjaG1lbnQge1xuICAgIC8qKlxuICAgICAqIFRoZSBJRCBvZiB0aGUgZmlsZSB0byBhdHRhY2ggdG8gdGhlIG1lc3NhZ2UuXG4gICAgICovXG4gICAgZmlsZV9pZD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0b29scyB0byBhZGQgdGhpcyBmaWxlIHRvLlxuICAgICAqL1xuICAgIHRvb2xzPzogQXJyYXk8QXNzaXN0YW50c0FQSS5Db2RlSW50ZXJwcmV0ZXJUb29sIHwgQXR0YWNobWVudC5GaWxlU2VhcmNoPjtcbiAgfVxuXG4gIGV4cG9ydCBuYW1lc3BhY2UgQXR0YWNobWVudCB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBGaWxlU2VhcmNoIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIHR5cGUgb2YgdG9vbCBiZWluZyBkZWZpbmVkOiBgZmlsZV9zZWFyY2hgXG4gICAgICAgKi9cbiAgICAgIHR5cGU6ICdmaWxlX3NlYXJjaCc7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZVVwZGF0ZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgKlxuICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbWV0YWRhdGE/OiBTaGFyZWQuTWV0YWRhdGEgfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VMaXN0UGFyYW1zIGV4dGVuZHMgQ3Vyc29yUGFnZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24uIGBiZWZvcmVgIGlzIGFuIG9iamVjdCBJRCB0aGF0IGRlZmluZXMgeW91ciBwbGFjZVxuICAgKiBpbiB0aGUgbGlzdC4gRm9yIGluc3RhbmNlLCBpZiB5b3UgbWFrZSBhIGxpc3QgcmVxdWVzdCBhbmQgcmVjZWl2ZSAxMDAgb2JqZWN0cyxcbiAgICogc3RhcnRpbmcgd2l0aCBvYmpfZm9vLCB5b3VyIHN1YnNlcXVlbnQgY2FsbCBjYW4gaW5jbHVkZSBiZWZvcmU9b2JqX2ZvbyBpbiBvcmRlclxuICAgKiB0byBmZXRjaCB0aGUgcHJldmlvdXMgcGFnZSBvZiB0aGUgbGlzdC5cbiAgICovXG4gIGJlZm9yZT86IHN0cmluZztcblxuICAvKipcbiAgICogU29ydCBvcmRlciBieSB0aGUgYGNyZWF0ZWRfYXRgIHRpbWVzdGFtcCBvZiB0aGUgb2JqZWN0cy4gYGFzY2AgZm9yIGFzY2VuZGluZ1xuICAgKiBvcmRlciBhbmQgYGRlc2NgIGZvciBkZXNjZW5kaW5nIG9yZGVyLlxuICAgKi9cbiAgb3JkZXI/OiAnYXNjJyB8ICdkZXNjJztcblxuICAvKipcbiAgICogRmlsdGVyIG1lc3NhZ2VzIGJ5IHRoZSBydW4gSUQgdGhhdCBnZW5lcmF0ZWQgdGhlbS5cbiAgICovXG4gIHJ1bl9pZD86IHN0cmluZztcbn1cblxuTWVzc2FnZXMuTWVzc2FnZXNQYWdlID0gTWVzc2FnZXNQYWdlO1xuXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgTWVzc2FnZXMge1xuICBleHBvcnQge1xuICAgIHR5cGUgQW5ub3RhdGlvbiBhcyBBbm5vdGF0aW9uLFxuICAgIHR5cGUgQW5ub3RhdGlvbkRlbHRhIGFzIEFubm90YXRpb25EZWx0YSxcbiAgICB0eXBlIEZpbGVDaXRhdGlvbkFubm90YXRpb24gYXMgRmlsZUNpdGF0aW9uQW5ub3RhdGlvbixcbiAgICB0eXBlIEZpbGVDaXRhdGlvbkRlbHRhQW5ub3RhdGlvbiBhcyBGaWxlQ2l0YXRpb25EZWx0YUFubm90YXRpb24sXG4gICAgdHlwZSBGaWxlUGF0aEFubm90YXRpb24gYXMgRmlsZVBhdGhBbm5vdGF0aW9uLFxuICAgIHR5cGUgRmlsZVBhdGhEZWx0YUFubm90YXRpb24gYXMgRmlsZVBhdGhEZWx0YUFubm90YXRpb24sXG4gICAgdHlwZSBJbWFnZUZpbGUgYXMgSW1hZ2VGaWxlLFxuICAgIHR5cGUgSW1hZ2VGaWxlQ29udGVudEJsb2NrIGFzIEltYWdlRmlsZUNvbnRlbnRCbG9jayxcbiAgICB0eXBlIEltYWdlRmlsZURlbHRhIGFzIEltYWdlRmlsZURlbHRhLFxuICAgIHR5cGUgSW1hZ2VGaWxlRGVsdGFCbG9jayBhcyBJbWFnZUZpbGVEZWx0YUJsb2NrLFxuICAgIHR5cGUgSW1hZ2VVUkwgYXMgSW1hZ2VVUkwsXG4gICAgdHlwZSBJbWFnZVVSTENvbnRlbnRCbG9jayBhcyBJbWFnZVVSTENvbnRlbnRCbG9jayxcbiAgICB0eXBlIEltYWdlVVJMRGVsdGEgYXMgSW1hZ2VVUkxEZWx0YSxcbiAgICB0eXBlIEltYWdlVVJMRGVsdGFCbG9jayBhcyBJbWFnZVVSTERlbHRhQmxvY2ssXG4gICAgdHlwZSBNZXNzYWdlIGFzIE1lc3NhZ2UsXG4gICAgdHlwZSBNZXNzYWdlQ29udGVudCBhcyBNZXNzYWdlQ29udGVudCxcbiAgICB0eXBlIE1lc3NhZ2VDb250ZW50RGVsdGEgYXMgTWVzc2FnZUNvbnRlbnREZWx0YSxcbiAgICB0eXBlIE1lc3NhZ2VDb250ZW50UGFydFBhcmFtIGFzIE1lc3NhZ2VDb250ZW50UGFydFBhcmFtLFxuICAgIHR5cGUgTWVzc2FnZURlbGV0ZWQgYXMgTWVzc2FnZURlbGV0ZWQsXG4gICAgdHlwZSBNZXNzYWdlRGVsdGEgYXMgTWVzc2FnZURlbHRhLFxuICAgIHR5cGUgTWVzc2FnZURlbHRhRXZlbnQgYXMgTWVzc2FnZURlbHRhRXZlbnQsXG4gICAgdHlwZSBSZWZ1c2FsQ29udGVudEJsb2NrIGFzIFJlZnVzYWxDb250ZW50QmxvY2ssXG4gICAgdHlwZSBSZWZ1c2FsRGVsdGFCbG9jayBhcyBSZWZ1c2FsRGVsdGFCbG9jayxcbiAgICB0eXBlIFRleHQgYXMgVGV4dCxcbiAgICB0eXBlIFRleHRDb250ZW50QmxvY2sgYXMgVGV4dENvbnRlbnRCbG9jayxcbiAgICB0eXBlIFRleHRDb250ZW50QmxvY2tQYXJhbSBhcyBUZXh0Q29udGVudEJsb2NrUGFyYW0sXG4gICAgdHlwZSBUZXh0RGVsdGEgYXMgVGV4dERlbHRhLFxuICAgIHR5cGUgVGV4dERlbHRhQmxvY2sgYXMgVGV4dERlbHRhQmxvY2ssXG4gICAgTWVzc2FnZXNQYWdlIGFzIE1lc3NhZ2VzUGFnZSxcbiAgICB0eXBlIE1lc3NhZ2VDcmVhdGVQYXJhbXMgYXMgTWVzc2FnZUNyZWF0ZVBhcmFtcyxcbiAgICB0eXBlIE1lc3NhZ2VVcGRhdGVQYXJhbXMgYXMgTWVzc2FnZVVwZGF0ZVBhcmFtcyxcbiAgICB0eXBlIE1lc3NhZ2VMaXN0UGFyYW1zIGFzIE1lc3NhZ2VMaXN0UGFyYW1zLFxuICB9O1xufVxuIiwgIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vcmVzb3VyY2UnO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tICcuLi8uLi8uLi8uLi9jb3JlJztcbmltcG9ydCAqIGFzIFN0ZXBzQVBJIGZyb20gJy4vc3RlcHMnO1xuaW1wb3J0ICogYXMgU2hhcmVkIGZyb20gJy4uLy4uLy4uL3NoYXJlZCc7XG5pbXBvcnQgeyBDdXJzb3JQYWdlLCB0eXBlIEN1cnNvclBhZ2VQYXJhbXMgfSBmcm9tICcuLi8uLi8uLi8uLi9wYWdpbmF0aW9uJztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGUgQXNzaXN0YW50cyBBUEkgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgUmVzcG9uc2VzIEFQSVxuICovXG5leHBvcnQgY2xhc3MgU3RlcHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYSBydW4gc3RlcC5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVGhlIEFzc2lzdGFudHMgQVBJIGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgdGhlIFJlc3BvbnNlcyBBUElcbiAgICovXG4gIHJldHJpZXZlKFxuICAgIHRocmVhZElkOiBzdHJpbmcsXG4gICAgcnVuSWQ6IHN0cmluZyxcbiAgICBzdGVwSWQ6IHN0cmluZyxcbiAgICBxdWVyeT86IFN0ZXBSZXRyaWV2ZVBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5BUElQcm9taXNlPFJ1blN0ZXA+O1xuICByZXRyaWV2ZShcbiAgICB0aHJlYWRJZDogc3RyaW5nLFxuICAgIHJ1bklkOiBzdHJpbmcsXG4gICAgc3RlcElkOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuQVBJUHJvbWlzZTxSdW5TdGVwPjtcbiAgcmV0cmlldmUoXG4gICAgdGhyZWFkSWQ6IHN0cmluZyxcbiAgICBydW5JZDogc3RyaW5nLFxuICAgIHN0ZXBJZDogc3RyaW5nLFxuICAgIHF1ZXJ5OiBTdGVwUmV0cmlldmVQYXJhbXMgfCBDb3JlLlJlcXVlc3RPcHRpb25zID0ge30sXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuQVBJUHJvbWlzZTxSdW5TdGVwPiB7XG4gICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXRyaWV2ZSh0aHJlYWRJZCwgcnVuSWQsIHN0ZXBJZCwge30sIHF1ZXJ5KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC90aHJlYWRzLyR7dGhyZWFkSWR9L3J1bnMvJHtydW5JZH0vc3RlcHMvJHtzdGVwSWR9YCwge1xuICAgICAgcXVlcnksXG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBydW4gc3RlcHMgYmVsb25naW5nIHRvIGEgcnVuLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBUaGUgQXNzaXN0YW50cyBBUEkgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgUmVzcG9uc2VzIEFQSVxuICAgKi9cbiAgbGlzdChcbiAgICB0aHJlYWRJZDogc3RyaW5nLFxuICAgIHJ1bklkOiBzdHJpbmcsXG4gICAgcXVlcnk/OiBTdGVwTGlzdFBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5QYWdlUHJvbWlzZTxSdW5TdGVwc1BhZ2UsIFJ1blN0ZXA+O1xuICBsaXN0KFxuICAgIHRocmVhZElkOiBzdHJpbmcsXG4gICAgcnVuSWQ6IHN0cmluZyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5QYWdlUHJvbWlzZTxSdW5TdGVwc1BhZ2UsIFJ1blN0ZXA+O1xuICBsaXN0KFxuICAgIHRocmVhZElkOiBzdHJpbmcsXG4gICAgcnVuSWQ6IHN0cmluZyxcbiAgICBxdWVyeTogU3RlcExpc3RQYXJhbXMgfCBDb3JlLlJlcXVlc3RPcHRpb25zID0ge30sXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuUGFnZVByb21pc2U8UnVuU3RlcHNQYWdlLCBSdW5TdGVwPiB7XG4gICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5saXN0KHRocmVhZElkLCBydW5JZCwge30sIHF1ZXJ5KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KGAvdGhyZWFkcy8ke3RocmVhZElkfS9ydW5zLyR7cnVuSWR9L3N0ZXBzYCwgUnVuU3RlcHNQYWdlLCB7XG4gICAgICBxdWVyeSxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSdW5TdGVwc1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlPFJ1blN0ZXA+IHt9XG5cbi8qKlxuICogVGV4dCBvdXRwdXQgZnJvbSB0aGUgQ29kZSBJbnRlcnByZXRlciB0b29sIGNhbGwgYXMgcGFydCBvZiBhIHJ1biBzdGVwLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvZGVJbnRlcnByZXRlckxvZ3Mge1xuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBvdXRwdXQgaW4gdGhlIG91dHB1dHMgYXJyYXkuXG4gICAqL1xuICBpbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBBbHdheXMgYGxvZ3NgLlxuICAgKi9cbiAgdHlwZTogJ2xvZ3MnO1xuXG4gIC8qKlxuICAgKiBUaGUgdGV4dCBvdXRwdXQgZnJvbSB0aGUgQ29kZSBJbnRlcnByZXRlciB0b29sIGNhbGwuXG4gICAqL1xuICBsb2dzPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvZGVJbnRlcnByZXRlck91dHB1dEltYWdlIHtcbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgb3V0cHV0IGluIHRoZSBvdXRwdXRzIGFycmF5LlxuICAgKi9cbiAgaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogQWx3YXlzIGBpbWFnZWAuXG4gICAqL1xuICB0eXBlOiAnaW1hZ2UnO1xuXG4gIGltYWdlPzogQ29kZUludGVycHJldGVyT3V0cHV0SW1hZ2UuSW1hZ2U7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ29kZUludGVycHJldGVyT3V0cHV0SW1hZ2Uge1xuICBleHBvcnQgaW50ZXJmYWNlIEltYWdlIHtcbiAgICAvKipcbiAgICAgKiBUaGUgW2ZpbGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvZmlsZXMpIElEIG9mIHRoZVxuICAgICAqIGltYWdlLlxuICAgICAqL1xuICAgIGZpbGVfaWQ/OiBzdHJpbmc7XG4gIH1cbn1cblxuLyoqXG4gKiBEZXRhaWxzIG9mIHRoZSBDb2RlIEludGVycHJldGVyIHRvb2wgY2FsbCB0aGUgcnVuIHN0ZXAgd2FzIGludm9sdmVkIGluLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvZGVJbnRlcnByZXRlclRvb2xDYWxsIHtcbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgdG9vbCBjYWxsLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIENvZGUgSW50ZXJwcmV0ZXIgdG9vbCBjYWxsIGRlZmluaXRpb24uXG4gICAqL1xuICBjb2RlX2ludGVycHJldGVyOiBDb2RlSW50ZXJwcmV0ZXJUb29sQ2FsbC5Db2RlSW50ZXJwcmV0ZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRvb2wgY2FsbC4gVGhpcyBpcyBhbHdheXMgZ29pbmcgdG8gYmUgYGNvZGVfaW50ZXJwcmV0ZXJgIGZvciB0aGlzXG4gICAqIHR5cGUgb2YgdG9vbCBjYWxsLlxuICAgKi9cbiAgdHlwZTogJ2NvZGVfaW50ZXJwcmV0ZXInO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIENvZGVJbnRlcnByZXRlclRvb2xDYWxsIHtcbiAgLyoqXG4gICAqIFRoZSBDb2RlIEludGVycHJldGVyIHRvb2wgY2FsbCBkZWZpbml0aW9uLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBDb2RlSW50ZXJwcmV0ZXIge1xuICAgIC8qKlxuICAgICAqIFRoZSBpbnB1dCB0byB0aGUgQ29kZSBJbnRlcnByZXRlciB0b29sIGNhbGwuXG4gICAgICovXG4gICAgaW5wdXQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBvdXRwdXRzIGZyb20gdGhlIENvZGUgSW50ZXJwcmV0ZXIgdG9vbCBjYWxsLiBDb2RlIEludGVycHJldGVyIGNhbiBvdXRwdXQgb25lXG4gICAgICogb3IgbW9yZSBpdGVtcywgaW5jbHVkaW5nIHRleHQgKGBsb2dzYCkgb3IgaW1hZ2VzIChgaW1hZ2VgKS4gRWFjaCBvZiB0aGVzZSBhcmVcbiAgICAgKiByZXByZXNlbnRlZCBieSBhIGRpZmZlcmVudCBvYmplY3QgdHlwZS5cbiAgICAgKi9cbiAgICBvdXRwdXRzOiBBcnJheTxDb2RlSW50ZXJwcmV0ZXIuTG9ncyB8IENvZGVJbnRlcnByZXRlci5JbWFnZT47XG4gIH1cblxuICBleHBvcnQgbmFtZXNwYWNlIENvZGVJbnRlcnByZXRlciB7XG4gICAgLyoqXG4gICAgICogVGV4dCBvdXRwdXQgZnJvbSB0aGUgQ29kZSBJbnRlcnByZXRlciB0b29sIGNhbGwgYXMgcGFydCBvZiBhIHJ1biBzdGVwLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgTG9ncyB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSB0ZXh0IG91dHB1dCBmcm9tIHRoZSBDb2RlIEludGVycHJldGVyIHRvb2wgY2FsbC5cbiAgICAgICAqL1xuICAgICAgbG9nczogc3RyaW5nO1xuXG4gICAgICAvKipcbiAgICAgICAqIEFsd2F5cyBgbG9nc2AuXG4gICAgICAgKi9cbiAgICAgIHR5cGU6ICdsb2dzJztcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIEltYWdlIHtcbiAgICAgIGltYWdlOiBJbWFnZS5JbWFnZTtcblxuICAgICAgLyoqXG4gICAgICAgKiBBbHdheXMgYGltYWdlYC5cbiAgICAgICAqL1xuICAgICAgdHlwZTogJ2ltYWdlJztcbiAgICB9XG5cbiAgICBleHBvcnQgbmFtZXNwYWNlIEltYWdlIHtcbiAgICAgIGV4cG9ydCBpbnRlcmZhY2UgSW1hZ2Uge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIFtmaWxlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2ZpbGVzKSBJRCBvZiB0aGVcbiAgICAgICAgICogaW1hZ2UuXG4gICAgICAgICAqL1xuICAgICAgICBmaWxlX2lkOiBzdHJpbmc7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRGV0YWlscyBvZiB0aGUgQ29kZSBJbnRlcnByZXRlciB0b29sIGNhbGwgdGhlIHJ1biBzdGVwIHdhcyBpbnZvbHZlZCBpbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb2RlSW50ZXJwcmV0ZXJUb29sQ2FsbERlbHRhIHtcbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgdG9vbCBjYWxsIGluIHRoZSB0b29sIGNhbGxzIGFycmF5LlxuICAgKi9cbiAgaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdG9vbCBjYWxsLiBUaGlzIGlzIGFsd2F5cyBnb2luZyB0byBiZSBgY29kZV9pbnRlcnByZXRlcmAgZm9yIHRoaXNcbiAgICogdHlwZSBvZiB0b29sIGNhbGwuXG4gICAqL1xuICB0eXBlOiAnY29kZV9pbnRlcnByZXRlcic7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgdG9vbCBjYWxsLlxuICAgKi9cbiAgaWQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBDb2RlIEludGVycHJldGVyIHRvb2wgY2FsbCBkZWZpbml0aW9uLlxuICAgKi9cbiAgY29kZV9pbnRlcnByZXRlcj86IENvZGVJbnRlcnByZXRlclRvb2xDYWxsRGVsdGEuQ29kZUludGVycHJldGVyO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIENvZGVJbnRlcnByZXRlclRvb2xDYWxsRGVsdGEge1xuICAvKipcbiAgICogVGhlIENvZGUgSW50ZXJwcmV0ZXIgdG9vbCBjYWxsIGRlZmluaXRpb24uXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIENvZGVJbnRlcnByZXRlciB7XG4gICAgLyoqXG4gICAgICogVGhlIGlucHV0IHRvIHRoZSBDb2RlIEludGVycHJldGVyIHRvb2wgY2FsbC5cbiAgICAgKi9cbiAgICBpbnB1dD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBvdXRwdXRzIGZyb20gdGhlIENvZGUgSW50ZXJwcmV0ZXIgdG9vbCBjYWxsLiBDb2RlIEludGVycHJldGVyIGNhbiBvdXRwdXQgb25lXG4gICAgICogb3IgbW9yZSBpdGVtcywgaW5jbHVkaW5nIHRleHQgKGBsb2dzYCkgb3IgaW1hZ2VzIChgaW1hZ2VgKS4gRWFjaCBvZiB0aGVzZSBhcmVcbiAgICAgKiByZXByZXNlbnRlZCBieSBhIGRpZmZlcmVudCBvYmplY3QgdHlwZS5cbiAgICAgKi9cbiAgICBvdXRwdXRzPzogQXJyYXk8U3RlcHNBUEkuQ29kZUludGVycHJldGVyTG9ncyB8IFN0ZXBzQVBJLkNvZGVJbnRlcnByZXRlck91dHB1dEltYWdlPjtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVTZWFyY2hUb29sQ2FsbCB7XG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIHRvb2wgY2FsbCBvYmplY3QuXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBGb3Igbm93LCB0aGlzIGlzIGFsd2F5cyBnb2luZyB0byBiZSBhbiBlbXB0eSBvYmplY3QuXG4gICAqL1xuICBmaWxlX3NlYXJjaDogRmlsZVNlYXJjaFRvb2xDYWxsLkZpbGVTZWFyY2g7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRvb2wgY2FsbC4gVGhpcyBpcyBhbHdheXMgZ29pbmcgdG8gYmUgYGZpbGVfc2VhcmNoYCBmb3IgdGhpcyB0eXBlIG9mXG4gICAqIHRvb2wgY2FsbC5cbiAgICovXG4gIHR5cGU6ICdmaWxlX3NlYXJjaCc7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgRmlsZVNlYXJjaFRvb2xDYWxsIHtcbiAgLyoqXG4gICAqIEZvciBub3csIHRoaXMgaXMgYWx3YXlzIGdvaW5nIHRvIGJlIGFuIGVtcHR5IG9iamVjdC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgRmlsZVNlYXJjaCB7XG4gICAgLyoqXG4gICAgICogVGhlIHJhbmtpbmcgb3B0aW9ucyBmb3IgdGhlIGZpbGUgc2VhcmNoLlxuICAgICAqL1xuICAgIHJhbmtpbmdfb3B0aW9ucz86IEZpbGVTZWFyY2guUmFua2luZ09wdGlvbnM7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmVzdWx0cyBvZiB0aGUgZmlsZSBzZWFyY2guXG4gICAgICovXG4gICAgcmVzdWx0cz86IEFycmF5PEZpbGVTZWFyY2guUmVzdWx0PjtcbiAgfVxuXG4gIGV4cG9ydCBuYW1lc3BhY2UgRmlsZVNlYXJjaCB7XG4gICAgLyoqXG4gICAgICogVGhlIHJhbmtpbmcgb3B0aW9ucyBmb3IgdGhlIGZpbGUgc2VhcmNoLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgUmFua2luZ09wdGlvbnMge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgcmFua2VyIHVzZWQgZm9yIHRoZSBmaWxlIHNlYXJjaC5cbiAgICAgICAqL1xuICAgICAgcmFua2VyOiAnZGVmYXVsdF8yMDI0XzA4XzIxJztcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgc2NvcmUgdGhyZXNob2xkIGZvciB0aGUgZmlsZSBzZWFyY2guIEFsbCB2YWx1ZXMgbXVzdCBiZSBhIGZsb2F0aW5nIHBvaW50XG4gICAgICAgKiBudW1iZXIgYmV0d2VlbiAwIGFuZCAxLlxuICAgICAgICovXG4gICAgICBzY29yZV90aHJlc2hvbGQ6IG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHJlc3VsdCBpbnN0YW5jZSBvZiB0aGUgZmlsZSBzZWFyY2guXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBSZXN1bHQge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgSUQgb2YgdGhlIGZpbGUgdGhhdCByZXN1bHQgd2FzIGZvdW5kIGluLlxuICAgICAgICovXG4gICAgICBmaWxlX2lkOiBzdHJpbmc7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIG5hbWUgb2YgdGhlIGZpbGUgdGhhdCByZXN1bHQgd2FzIGZvdW5kIGluLlxuICAgICAgICovXG4gICAgICBmaWxlX25hbWU6IHN0cmluZztcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgc2NvcmUgb2YgdGhlIHJlc3VsdC4gQWxsIHZhbHVlcyBtdXN0IGJlIGEgZmxvYXRpbmcgcG9pbnQgbnVtYmVyIGJldHdlZW4gMFxuICAgICAgICogYW5kIDEuXG4gICAgICAgKi9cbiAgICAgIHNjb3JlOiBudW1iZXI7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIGNvbnRlbnQgb2YgdGhlIHJlc3VsdCB0aGF0IHdhcyBmb3VuZC4gVGhlIGNvbnRlbnQgaXMgb25seSBpbmNsdWRlZCBpZlxuICAgICAgICogcmVxdWVzdGVkIHZpYSB0aGUgaW5jbHVkZSBxdWVyeSBwYXJhbWV0ZXIuXG4gICAgICAgKi9cbiAgICAgIGNvbnRlbnQ/OiBBcnJheTxSZXN1bHQuQ29udGVudD47XG4gICAgfVxuXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBSZXN1bHQge1xuICAgICAgZXhwb3J0IGludGVyZmFjZSBDb250ZW50IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIGZpbGUuXG4gICAgICAgICAqL1xuICAgICAgICB0ZXh0Pzogc3RyaW5nO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdHlwZSBvZiB0aGUgY29udGVudC5cbiAgICAgICAgICovXG4gICAgICAgIHR5cGU/OiAndGV4dCc7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZVNlYXJjaFRvb2xDYWxsRGVsdGEge1xuICAvKipcbiAgICogRm9yIG5vdywgdGhpcyBpcyBhbHdheXMgZ29pbmcgdG8gYmUgYW4gZW1wdHkgb2JqZWN0LlxuICAgKi9cbiAgZmlsZV9zZWFyY2g6IHVua25vd247XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgdG9vbCBjYWxsIGluIHRoZSB0b29sIGNhbGxzIGFycmF5LlxuICAgKi9cbiAgaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdG9vbCBjYWxsLiBUaGlzIGlzIGFsd2F5cyBnb2luZyB0byBiZSBgZmlsZV9zZWFyY2hgIGZvciB0aGlzIHR5cGUgb2ZcbiAgICogdG9vbCBjYWxsLlxuICAgKi9cbiAgdHlwZTogJ2ZpbGVfc2VhcmNoJztcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSB0b29sIGNhbGwgb2JqZWN0LlxuICAgKi9cbiAgaWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRnVuY3Rpb25Ub29sQ2FsbCB7XG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIHRvb2wgY2FsbCBvYmplY3QuXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZGVmaW5pdGlvbiBvZiB0aGUgZnVuY3Rpb24gdGhhdCB3YXMgY2FsbGVkLlxuICAgKi9cbiAgZnVuY3Rpb246IEZ1bmN0aW9uVG9vbENhbGwuRnVuY3Rpb247XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRvb2wgY2FsbC4gVGhpcyBpcyBhbHdheXMgZ29pbmcgdG8gYmUgYGZ1bmN0aW9uYCBmb3IgdGhpcyB0eXBlIG9mXG4gICAqIHRvb2wgY2FsbC5cbiAgICovXG4gIHR5cGU6ICdmdW5jdGlvbic7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgRnVuY3Rpb25Ub29sQ2FsbCB7XG4gIC8qKlxuICAgKiBUaGUgZGVmaW5pdGlvbiBvZiB0aGUgZnVuY3Rpb24gdGhhdCB3YXMgY2FsbGVkLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBGdW5jdGlvbiB7XG4gICAgLyoqXG4gICAgICogVGhlIGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGFyZ3VtZW50czogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIG5hbWU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBvdXRwdXQgb2YgdGhlIGZ1bmN0aW9uLiBUaGlzIHdpbGwgYmUgYG51bGxgIGlmIHRoZSBvdXRwdXRzIGhhdmUgbm90IGJlZW5cbiAgICAgKiBbc3VibWl0dGVkXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3J1bnMvc3VibWl0VG9vbE91dHB1dHMpXG4gICAgICogeWV0LlxuICAgICAqL1xuICAgIG91dHB1dDogc3RyaW5nIHwgbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZ1bmN0aW9uVG9vbENhbGxEZWx0YSB7XG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIHRvb2wgY2FsbCBpbiB0aGUgdG9vbCBjYWxscyBhcnJheS5cbiAgICovXG4gIGluZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRvb2wgY2FsbC4gVGhpcyBpcyBhbHdheXMgZ29pbmcgdG8gYmUgYGZ1bmN0aW9uYCBmb3IgdGhpcyB0eXBlIG9mXG4gICAqIHRvb2wgY2FsbC5cbiAgICovXG4gIHR5cGU6ICdmdW5jdGlvbic7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgdG9vbCBjYWxsIG9iamVjdC5cbiAgICovXG4gIGlkPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZGVmaW5pdGlvbiBvZiB0aGUgZnVuY3Rpb24gdGhhdCB3YXMgY2FsbGVkLlxuICAgKi9cbiAgZnVuY3Rpb24/OiBGdW5jdGlvblRvb2xDYWxsRGVsdGEuRnVuY3Rpb247XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgRnVuY3Rpb25Ub29sQ2FsbERlbHRhIHtcbiAgLyoqXG4gICAqIFRoZSBkZWZpbml0aW9uIG9mIHRoZSBmdW5jdGlvbiB0aGF0IHdhcyBjYWxsZWQuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIEZ1bmN0aW9uIHtcbiAgICAvKipcbiAgICAgKiBUaGUgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgYXJndW1lbnRzPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIG5hbWU/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3V0cHV0IG9mIHRoZSBmdW5jdGlvbi4gVGhpcyB3aWxsIGJlIGBudWxsYCBpZiB0aGUgb3V0cHV0cyBoYXZlIG5vdCBiZWVuXG4gICAgICogW3N1Ym1pdHRlZF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9ydW5zL3N1Ym1pdFRvb2xPdXRwdXRzKVxuICAgICAqIHlldC5cbiAgICAgKi9cbiAgICBvdXRwdXQ/OiBzdHJpbmcgfCBudWxsO1xuICB9XG59XG5cbi8qKlxuICogRGV0YWlscyBvZiB0aGUgbWVzc2FnZSBjcmVhdGlvbiBieSB0aGUgcnVuIHN0ZXAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZUNyZWF0aW9uU3RlcERldGFpbHMge1xuICBtZXNzYWdlX2NyZWF0aW9uOiBNZXNzYWdlQ3JlYXRpb25TdGVwRGV0YWlscy5NZXNzYWdlQ3JlYXRpb247XG5cbiAgLyoqXG4gICAqIEFsd2F5cyBgbWVzc2FnZV9jcmVhdGlvbmAuXG4gICAqL1xuICB0eXBlOiAnbWVzc2FnZV9jcmVhdGlvbic7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgTWVzc2FnZUNyZWF0aW9uU3RlcERldGFpbHMge1xuICBleHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VDcmVhdGlvbiB7XG4gICAgLyoqXG4gICAgICogVGhlIElEIG9mIHRoZSBtZXNzYWdlIHRoYXQgd2FzIGNyZWF0ZWQgYnkgdGhpcyBydW4gc3RlcC5cbiAgICAgKi9cbiAgICBtZXNzYWdlX2lkOiBzdHJpbmc7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgc3RlcCBpbiBleGVjdXRpb24gb2YgYSBydW4uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUnVuU3RlcCB7XG4gIC8qKlxuICAgKiBUaGUgaWRlbnRpZmllciBvZiB0aGUgcnVuIHN0ZXAsIHdoaWNoIGNhbiBiZSByZWZlcmVuY2VkIGluIEFQSSBlbmRwb2ludHMuXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlXG4gICAqIFthc3Npc3RhbnRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvYXNzaXN0YW50cylcbiAgICogYXNzb2NpYXRlZCB3aXRoIHRoZSBydW4gc3RlcC5cbiAgICovXG4gIGFzc2lzdGFudF9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpIGZvciB3aGVuIHRoZSBydW4gc3RlcCB3YXMgY2FuY2VsbGVkLlxuICAgKi9cbiAgY2FuY2VsbGVkX2F0OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpIGZvciB3aGVuIHRoZSBydW4gc3RlcCBjb21wbGV0ZWQuXG4gICAqL1xuICBjb21wbGV0ZWRfYXQ6IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBVbml4IHRpbWVzdGFtcCAoaW4gc2Vjb25kcykgZm9yIHdoZW4gdGhlIHJ1biBzdGVwIHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZF9hdDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpIGZvciB3aGVuIHRoZSBydW4gc3RlcCBleHBpcmVkLiBBIHN0ZXAgaXNcbiAgICogY29uc2lkZXJlZCBleHBpcmVkIGlmIHRoZSBwYXJlbnQgcnVuIGlzIGV4cGlyZWQuXG4gICAqL1xuICBleHBpcmVkX2F0OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpIGZvciB3aGVuIHRoZSBydW4gc3RlcCBmYWlsZWQuXG4gICAqL1xuICBmYWlsZWRfYXQ6IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBsYXN0IGVycm9yIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHJ1biBzdGVwLiBXaWxsIGJlIGBudWxsYCBpZiB0aGVyZSBhcmUgbm9cbiAgICogZXJyb3JzLlxuICAgKi9cbiAgbGFzdF9lcnJvcjogUnVuU3RlcC5MYXN0RXJyb3IgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgKlxuICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbWV0YWRhdGE6IFNoYXJlZC5NZXRhZGF0YSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBvYmplY3QgdHlwZSwgd2hpY2ggaXMgYWx3YXlzIGB0aHJlYWQucnVuLnN0ZXBgLlxuICAgKi9cbiAgb2JqZWN0OiAndGhyZWFkLnJ1bi5zdGVwJztcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBbcnVuXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3J1bnMpIHRoYXRcbiAgICogdGhpcyBydW4gc3RlcCBpcyBhIHBhcnQgb2YuXG4gICAqL1xuICBydW5faWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHN0YXR1cyBvZiB0aGUgcnVuIHN0ZXAsIHdoaWNoIGNhbiBiZSBlaXRoZXIgYGluX3Byb2dyZXNzYCwgYGNhbmNlbGxlZGAsXG4gICAqIGBmYWlsZWRgLCBgY29tcGxldGVkYCwgb3IgYGV4cGlyZWRgLlxuICAgKi9cbiAgc3RhdHVzOiAnaW5fcHJvZ3Jlc3MnIHwgJ2NhbmNlbGxlZCcgfCAnZmFpbGVkJyB8ICdjb21wbGV0ZWQnIHwgJ2V4cGlyZWQnO1xuXG4gIC8qKlxuICAgKiBUaGUgZGV0YWlscyBvZiB0aGUgcnVuIHN0ZXAuXG4gICAqL1xuICBzdGVwX2RldGFpbHM6IE1lc3NhZ2VDcmVhdGlvblN0ZXBEZXRhaWxzIHwgVG9vbENhbGxzU3RlcERldGFpbHM7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgW3RocmVhZF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS90aHJlYWRzKVxuICAgKiB0aGF0IHdhcyBydW4uXG4gICAqL1xuICB0aHJlYWRfaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgcnVuIHN0ZXAsIHdoaWNoIGNhbiBiZSBlaXRoZXIgYG1lc3NhZ2VfY3JlYXRpb25gIG9yIGB0b29sX2NhbGxzYC5cbiAgICovXG4gIHR5cGU6ICdtZXNzYWdlX2NyZWF0aW9uJyB8ICd0b29sX2NhbGxzJztcblxuICAvKipcbiAgICogVXNhZ2Ugc3RhdGlzdGljcyByZWxhdGVkIHRvIHRoZSBydW4gc3RlcC4gVGhpcyB2YWx1ZSB3aWxsIGJlIGBudWxsYCB3aGlsZSB0aGVcbiAgICogcnVuIHN0ZXAncyBzdGF0dXMgaXMgYGluX3Byb2dyZXNzYC5cbiAgICovXG4gIHVzYWdlOiBSdW5TdGVwLlVzYWdlIHwgbnVsbDtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBSdW5TdGVwIHtcbiAgLyoqXG4gICAqIFRoZSBsYXN0IGVycm9yIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHJ1biBzdGVwLiBXaWxsIGJlIGBudWxsYCBpZiB0aGVyZSBhcmUgbm9cbiAgICogZXJyb3JzLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBMYXN0RXJyb3Ige1xuICAgIC8qKlxuICAgICAqIE9uZSBvZiBgc2VydmVyX2Vycm9yYCBvciBgcmF0ZV9saW1pdF9leGNlZWRlZGAuXG4gICAgICovXG4gICAgY29kZTogJ3NlcnZlcl9lcnJvcicgfCAncmF0ZV9saW1pdF9leGNlZWRlZCc7XG5cbiAgICAvKipcbiAgICAgKiBBIGh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvci5cbiAgICAgKi9cbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gIH1cblxuICAvKipcbiAgICogVXNhZ2Ugc3RhdGlzdGljcyByZWxhdGVkIHRvIHRoZSBydW4gc3RlcC4gVGhpcyB2YWx1ZSB3aWxsIGJlIGBudWxsYCB3aGlsZSB0aGVcbiAgICogcnVuIHN0ZXAncyBzdGF0dXMgaXMgYGluX3Byb2dyZXNzYC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVXNhZ2Uge1xuICAgIC8qKlxuICAgICAqIE51bWJlciBvZiBjb21wbGV0aW9uIHRva2VucyB1c2VkIG92ZXIgdGhlIGNvdXJzZSBvZiB0aGUgcnVuIHN0ZXAuXG4gICAgICovXG4gICAgY29tcGxldGlvbl90b2tlbnM6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIE51bWJlciBvZiBwcm9tcHQgdG9rZW5zIHVzZWQgb3ZlciB0aGUgY291cnNlIG9mIHRoZSBydW4gc3RlcC5cbiAgICAgKi9cbiAgICBwcm9tcHRfdG9rZW5zOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUb3RhbCBudW1iZXIgb2YgdG9rZW5zIHVzZWQgKHByb21wdCArIGNvbXBsZXRpb24pLlxuICAgICAqL1xuICAgIHRvdGFsX3Rva2VuczogbnVtYmVyO1xuICB9XG59XG5cbi8qKlxuICogVGhlIGRlbHRhIGNvbnRhaW5pbmcgdGhlIGZpZWxkcyB0aGF0IGhhdmUgY2hhbmdlZCBvbiB0aGUgcnVuIHN0ZXAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUnVuU3RlcERlbHRhIHtcbiAgLyoqXG4gICAqIFRoZSBkZXRhaWxzIG9mIHRoZSBydW4gc3RlcC5cbiAgICovXG4gIHN0ZXBfZGV0YWlscz86IFJ1blN0ZXBEZWx0YU1lc3NhZ2VEZWx0YSB8IFRvb2xDYWxsRGVsdGFPYmplY3Q7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHJ1biBzdGVwIGRlbHRhIGkuZS4gYW55IGNoYW5nZWQgZmllbGRzIG9uIGEgcnVuIHN0ZXAgZHVyaW5nXG4gKiBzdHJlYW1pbmcuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUnVuU3RlcERlbHRhRXZlbnQge1xuICAvKipcbiAgICogVGhlIGlkZW50aWZpZXIgb2YgdGhlIHJ1biBzdGVwLCB3aGljaCBjYW4gYmUgcmVmZXJlbmNlZCBpbiBBUEkgZW5kcG9pbnRzLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGRlbHRhIGNvbnRhaW5pbmcgdGhlIGZpZWxkcyB0aGF0IGhhdmUgY2hhbmdlZCBvbiB0aGUgcnVuIHN0ZXAuXG4gICAqL1xuICBkZWx0YTogUnVuU3RlcERlbHRhO1xuXG4gIC8qKlxuICAgKiBUaGUgb2JqZWN0IHR5cGUsIHdoaWNoIGlzIGFsd2F5cyBgdGhyZWFkLnJ1bi5zdGVwLmRlbHRhYC5cbiAgICovXG4gIG9iamVjdDogJ3RocmVhZC5ydW4uc3RlcC5kZWx0YSc7XG59XG5cbi8qKlxuICogRGV0YWlscyBvZiB0aGUgbWVzc2FnZSBjcmVhdGlvbiBieSB0aGUgcnVuIHN0ZXAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUnVuU3RlcERlbHRhTWVzc2FnZURlbHRhIHtcbiAgLyoqXG4gICAqIEFsd2F5cyBgbWVzc2FnZV9jcmVhdGlvbmAuXG4gICAqL1xuICB0eXBlOiAnbWVzc2FnZV9jcmVhdGlvbic7XG5cbiAgbWVzc2FnZV9jcmVhdGlvbj86IFJ1blN0ZXBEZWx0YU1lc3NhZ2VEZWx0YS5NZXNzYWdlQ3JlYXRpb247XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgUnVuU3RlcERlbHRhTWVzc2FnZURlbHRhIHtcbiAgZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlQ3JlYXRpb24ge1xuICAgIC8qKlxuICAgICAqIFRoZSBJRCBvZiB0aGUgbWVzc2FnZSB0aGF0IHdhcyBjcmVhdGVkIGJ5IHRoaXMgcnVuIHN0ZXAuXG4gICAgICovXG4gICAgbWVzc2FnZV9pZD86IHN0cmluZztcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBSdW5TdGVwSW5jbHVkZSA9ICdzdGVwX2RldGFpbHMudG9vbF9jYWxsc1sqXS5maWxlX3NlYXJjaC5yZXN1bHRzWypdLmNvbnRlbnQnO1xuXG4vKipcbiAqIERldGFpbHMgb2YgdGhlIENvZGUgSW50ZXJwcmV0ZXIgdG9vbCBjYWxsIHRoZSBydW4gc3RlcCB3YXMgaW52b2x2ZWQgaW4uXG4gKi9cbmV4cG9ydCB0eXBlIFRvb2xDYWxsID0gQ29kZUludGVycHJldGVyVG9vbENhbGwgfCBGaWxlU2VhcmNoVG9vbENhbGwgfCBGdW5jdGlvblRvb2xDYWxsO1xuXG4vKipcbiAqIERldGFpbHMgb2YgdGhlIENvZGUgSW50ZXJwcmV0ZXIgdG9vbCBjYWxsIHRoZSBydW4gc3RlcCB3YXMgaW52b2x2ZWQgaW4uXG4gKi9cbmV4cG9ydCB0eXBlIFRvb2xDYWxsRGVsdGEgPSBDb2RlSW50ZXJwcmV0ZXJUb29sQ2FsbERlbHRhIHwgRmlsZVNlYXJjaFRvb2xDYWxsRGVsdGEgfCBGdW5jdGlvblRvb2xDYWxsRGVsdGE7XG5cbi8qKlxuICogRGV0YWlscyBvZiB0aGUgdG9vbCBjYWxsLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRvb2xDYWxsRGVsdGFPYmplY3Qge1xuICAvKipcbiAgICogQWx3YXlzIGB0b29sX2NhbGxzYC5cbiAgICovXG4gIHR5cGU6ICd0b29sX2NhbGxzJztcblxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgdG9vbCBjYWxscyB0aGUgcnVuIHN0ZXAgd2FzIGludm9sdmVkIGluLiBUaGVzZSBjYW4gYmUgYXNzb2NpYXRlZFxuICAgKiB3aXRoIG9uZSBvZiB0aHJlZSB0eXBlcyBvZiB0b29sczogYGNvZGVfaW50ZXJwcmV0ZXJgLCBgZmlsZV9zZWFyY2hgLCBvclxuICAgKiBgZnVuY3Rpb25gLlxuICAgKi9cbiAgdG9vbF9jYWxscz86IEFycmF5PFRvb2xDYWxsRGVsdGE+O1xufVxuXG4vKipcbiAqIERldGFpbHMgb2YgdGhlIHRvb2wgY2FsbC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUb29sQ2FsbHNTdGVwRGV0YWlscyB7XG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiB0b29sIGNhbGxzIHRoZSBydW4gc3RlcCB3YXMgaW52b2x2ZWQgaW4uIFRoZXNlIGNhbiBiZSBhc3NvY2lhdGVkXG4gICAqIHdpdGggb25lIG9mIHRocmVlIHR5cGVzIG9mIHRvb2xzOiBgY29kZV9pbnRlcnByZXRlcmAsIGBmaWxlX3NlYXJjaGAsIG9yXG4gICAqIGBmdW5jdGlvbmAuXG4gICAqL1xuICB0b29sX2NhbGxzOiBBcnJheTxUb29sQ2FsbD47XG5cbiAgLyoqXG4gICAqIEFsd2F5cyBgdG9vbF9jYWxsc2AuXG4gICAqL1xuICB0eXBlOiAndG9vbF9jYWxscyc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RlcFJldHJpZXZlUGFyYW1zIHtcbiAgLyoqXG4gICAqIEEgbGlzdCBvZiBhZGRpdGlvbmFsIGZpZWxkcyB0byBpbmNsdWRlIGluIHRoZSByZXNwb25zZS4gQ3VycmVudGx5IHRoZSBvbmx5XG4gICAqIHN1cHBvcnRlZCB2YWx1ZSBpcyBgc3RlcF9kZXRhaWxzLnRvb2xfY2FsbHNbKl0uZmlsZV9zZWFyY2gucmVzdWx0c1sqXS5jb250ZW50YFxuICAgKiB0byBmZXRjaCB0aGUgZmlsZSBzZWFyY2ggcmVzdWx0IGNvbnRlbnQuXG4gICAqXG4gICAqIFNlZSB0aGVcbiAgICogW2ZpbGUgc2VhcmNoIHRvb2wgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXNzaXN0YW50cy90b29scy9maWxlLXNlYXJjaCNjdXN0b21pemluZy1maWxlLXNlYXJjaC1zZXR0aW5ncylcbiAgICogZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqL1xuICBpbmNsdWRlPzogQXJyYXk8UnVuU3RlcEluY2x1ZGU+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0ZXBMaXN0UGFyYW1zIGV4dGVuZHMgQ3Vyc29yUGFnZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24uIGBiZWZvcmVgIGlzIGFuIG9iamVjdCBJRCB0aGF0IGRlZmluZXMgeW91ciBwbGFjZVxuICAgKiBpbiB0aGUgbGlzdC4gRm9yIGluc3RhbmNlLCBpZiB5b3UgbWFrZSBhIGxpc3QgcmVxdWVzdCBhbmQgcmVjZWl2ZSAxMDAgb2JqZWN0cyxcbiAgICogc3RhcnRpbmcgd2l0aCBvYmpfZm9vLCB5b3VyIHN1YnNlcXVlbnQgY2FsbCBjYW4gaW5jbHVkZSBiZWZvcmU9b2JqX2ZvbyBpbiBvcmRlclxuICAgKiB0byBmZXRjaCB0aGUgcHJldmlvdXMgcGFnZSBvZiB0aGUgbGlzdC5cbiAgICovXG4gIGJlZm9yZT86IHN0cmluZztcblxuICAvKipcbiAgICogQSBsaXN0IG9mIGFkZGl0aW9uYWwgZmllbGRzIHRvIGluY2x1ZGUgaW4gdGhlIHJlc3BvbnNlLiBDdXJyZW50bHkgdGhlIG9ubHlcbiAgICogc3VwcG9ydGVkIHZhbHVlIGlzIGBzdGVwX2RldGFpbHMudG9vbF9jYWxsc1sqXS5maWxlX3NlYXJjaC5yZXN1bHRzWypdLmNvbnRlbnRgXG4gICAqIHRvIGZldGNoIHRoZSBmaWxlIHNlYXJjaCByZXN1bHQgY29udGVudC5cbiAgICpcbiAgICogU2VlIHRoZVxuICAgKiBbZmlsZSBzZWFyY2ggdG9vbCBkb2N1bWVudGF0aW9uXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hc3Npc3RhbnRzL3Rvb2xzL2ZpbGUtc2VhcmNoI2N1c3RvbWl6aW5nLWZpbGUtc2VhcmNoLXNldHRpbmdzKVxuICAgKiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICovXG4gIGluY2x1ZGU/OiBBcnJheTxSdW5TdGVwSW5jbHVkZT47XG5cbiAgLyoqXG4gICAqIFNvcnQgb3JkZXIgYnkgdGhlIGBjcmVhdGVkX2F0YCB0aW1lc3RhbXAgb2YgdGhlIG9iamVjdHMuIGBhc2NgIGZvciBhc2NlbmRpbmdcbiAgICogb3JkZXIgYW5kIGBkZXNjYCBmb3IgZGVzY2VuZGluZyBvcmRlci5cbiAgICovXG4gIG9yZGVyPzogJ2FzYycgfCAnZGVzYyc7XG59XG5cblN0ZXBzLlJ1blN0ZXBzUGFnZSA9IFJ1blN0ZXBzUGFnZTtcblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIFN0ZXBzIHtcbiAgZXhwb3J0IHtcbiAgICB0eXBlIENvZGVJbnRlcnByZXRlckxvZ3MgYXMgQ29kZUludGVycHJldGVyTG9ncyxcbiAgICB0eXBlIENvZGVJbnRlcnByZXRlck91dHB1dEltYWdlIGFzIENvZGVJbnRlcnByZXRlck91dHB1dEltYWdlLFxuICAgIHR5cGUgQ29kZUludGVycHJldGVyVG9vbENhbGwgYXMgQ29kZUludGVycHJldGVyVG9vbENhbGwsXG4gICAgdHlwZSBDb2RlSW50ZXJwcmV0ZXJUb29sQ2FsbERlbHRhIGFzIENvZGVJbnRlcnByZXRlclRvb2xDYWxsRGVsdGEsXG4gICAgdHlwZSBGaWxlU2VhcmNoVG9vbENhbGwgYXMgRmlsZVNlYXJjaFRvb2xDYWxsLFxuICAgIHR5cGUgRmlsZVNlYXJjaFRvb2xDYWxsRGVsdGEgYXMgRmlsZVNlYXJjaFRvb2xDYWxsRGVsdGEsXG4gICAgdHlwZSBGdW5jdGlvblRvb2xDYWxsIGFzIEZ1bmN0aW9uVG9vbENhbGwsXG4gICAgdHlwZSBGdW5jdGlvblRvb2xDYWxsRGVsdGEgYXMgRnVuY3Rpb25Ub29sQ2FsbERlbHRhLFxuICAgIHR5cGUgTWVzc2FnZUNyZWF0aW9uU3RlcERldGFpbHMgYXMgTWVzc2FnZUNyZWF0aW9uU3RlcERldGFpbHMsXG4gICAgdHlwZSBSdW5TdGVwIGFzIFJ1blN0ZXAsXG4gICAgdHlwZSBSdW5TdGVwRGVsdGEgYXMgUnVuU3RlcERlbHRhLFxuICAgIHR5cGUgUnVuU3RlcERlbHRhRXZlbnQgYXMgUnVuU3RlcERlbHRhRXZlbnQsXG4gICAgdHlwZSBSdW5TdGVwRGVsdGFNZXNzYWdlRGVsdGEgYXMgUnVuU3RlcERlbHRhTWVzc2FnZURlbHRhLFxuICAgIHR5cGUgUnVuU3RlcEluY2x1ZGUgYXMgUnVuU3RlcEluY2x1ZGUsXG4gICAgdHlwZSBUb29sQ2FsbCBhcyBUb29sQ2FsbCxcbiAgICB0eXBlIFRvb2xDYWxsRGVsdGEgYXMgVG9vbENhbGxEZWx0YSxcbiAgICB0eXBlIFRvb2xDYWxsRGVsdGFPYmplY3QgYXMgVG9vbENhbGxEZWx0YU9iamVjdCxcbiAgICB0eXBlIFRvb2xDYWxsc1N0ZXBEZXRhaWxzIGFzIFRvb2xDYWxsc1N0ZXBEZXRhaWxzLFxuICAgIFJ1blN0ZXBzUGFnZSBhcyBSdW5TdGVwc1BhZ2UsXG4gICAgdHlwZSBTdGVwUmV0cmlldmVQYXJhbXMgYXMgU3RlcFJldHJpZXZlUGFyYW1zLFxuICAgIHR5cGUgU3RlcExpc3RQYXJhbXMgYXMgU3RlcExpc3RQYXJhbXMsXG4gIH07XG59XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICcuLi8uLi8uLi8uLi9yZXNvdXJjZSc7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29yZSc7XG5pbXBvcnQgeyBBUElQcm9taXNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gJy4uLy4uLy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgQXNzaXN0YW50U3RyZWFtLCBSdW5DcmVhdGVQYXJhbXNCYXNlU3RyZWFtIH0gZnJvbSAnLi4vLi4vLi4vLi4vbGliL0Fzc2lzdGFudFN0cmVhbSc7XG5pbXBvcnQgeyBzbGVlcCB9IGZyb20gJy4uLy4uLy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgUnVuU3VibWl0VG9vbE91dHB1dHNQYXJhbXNTdHJlYW0gfSBmcm9tICcuLi8uLi8uLi8uLi9saWIvQXNzaXN0YW50U3RyZWFtJztcbmltcG9ydCAqIGFzIFJ1bnNBUEkgZnJvbSAnLi9ydW5zJztcbmltcG9ydCAqIGFzIFNoYXJlZCBmcm9tICcuLi8uLi8uLi9zaGFyZWQnO1xuaW1wb3J0ICogYXMgQXNzaXN0YW50c0FQSSBmcm9tICcuLi8uLi9hc3Npc3RhbnRzJztcbmltcG9ydCAqIGFzIE1lc3NhZ2VzQVBJIGZyb20gJy4uL21lc3NhZ2VzJztcbmltcG9ydCAqIGFzIFRocmVhZHNBUEkgZnJvbSAnLi4vdGhyZWFkcyc7XG5pbXBvcnQgKiBhcyBTdGVwc0FQSSBmcm9tICcuL3N0ZXBzJztcbmltcG9ydCB7XG4gIENvZGVJbnRlcnByZXRlckxvZ3MsXG4gIENvZGVJbnRlcnByZXRlck91dHB1dEltYWdlLFxuICBDb2RlSW50ZXJwcmV0ZXJUb29sQ2FsbCxcbiAgQ29kZUludGVycHJldGVyVG9vbENhbGxEZWx0YSxcbiAgRmlsZVNlYXJjaFRvb2xDYWxsLFxuICBGaWxlU2VhcmNoVG9vbENhbGxEZWx0YSxcbiAgRnVuY3Rpb25Ub29sQ2FsbCxcbiAgRnVuY3Rpb25Ub29sQ2FsbERlbHRhLFxuICBNZXNzYWdlQ3JlYXRpb25TdGVwRGV0YWlscyxcbiAgUnVuU3RlcCxcbiAgUnVuU3RlcERlbHRhLFxuICBSdW5TdGVwRGVsdGFFdmVudCxcbiAgUnVuU3RlcERlbHRhTWVzc2FnZURlbHRhLFxuICBSdW5TdGVwSW5jbHVkZSxcbiAgUnVuU3RlcHNQYWdlLFxuICBTdGVwTGlzdFBhcmFtcyxcbiAgU3RlcFJldHJpZXZlUGFyYW1zLFxuICBTdGVwcyxcbiAgVG9vbENhbGwsXG4gIFRvb2xDYWxsRGVsdGEsXG4gIFRvb2xDYWxsRGVsdGFPYmplY3QsXG4gIFRvb2xDYWxsc1N0ZXBEZXRhaWxzLFxufSBmcm9tICcuL3N0ZXBzJztcbmltcG9ydCB7IEN1cnNvclBhZ2UsIHR5cGUgQ3Vyc29yUGFnZVBhcmFtcyB9IGZyb20gJy4uLy4uLy4uLy4uL3BhZ2luYXRpb24nO1xuaW1wb3J0IHsgU3RyZWFtIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3RyZWFtaW5nJztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGUgQXNzaXN0YW50cyBBUEkgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgUmVzcG9uc2VzIEFQSVxuICovXG5leHBvcnQgY2xhc3MgUnVucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgc3RlcHM6IFN0ZXBzQVBJLlN0ZXBzID0gbmV3IFN0ZXBzQVBJLlN0ZXBzKHRoaXMuX2NsaWVudCk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHJ1bi5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVGhlIEFzc2lzdGFudHMgQVBJIGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgdGhlIFJlc3BvbnNlcyBBUElcbiAgICovXG4gIGNyZWF0ZShcbiAgICB0aHJlYWRJZDogc3RyaW5nLFxuICAgIHBhcmFtczogUnVuQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBBUElQcm9taXNlPFJ1bj47XG4gIGNyZWF0ZShcbiAgICB0aHJlYWRJZDogc3RyaW5nLFxuICAgIHBhcmFtczogUnVuQ3JlYXRlUGFyYW1zU3RyZWFtaW5nLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBBUElQcm9taXNlPFN0cmVhbTxBc3Npc3RhbnRzQVBJLkFzc2lzdGFudFN0cmVhbUV2ZW50Pj47XG4gIGNyZWF0ZShcbiAgICB0aHJlYWRJZDogc3RyaW5nLFxuICAgIHBhcmFtczogUnVuQ3JlYXRlUGFyYW1zQmFzZSxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQVBJUHJvbWlzZTxTdHJlYW08QXNzaXN0YW50c0FQSS5Bc3Npc3RhbnRTdHJlYW1FdmVudD4gfCBSdW4+O1xuICBjcmVhdGUoXG4gICAgdGhyZWFkSWQ6IHN0cmluZyxcbiAgICBwYXJhbXM6IFJ1bkNyZWF0ZVBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQVBJUHJvbWlzZTxSdW4+IHwgQVBJUHJvbWlzZTxTdHJlYW08QXNzaXN0YW50c0FQSS5Bc3Npc3RhbnRTdHJlYW1FdmVudD4+IHtcbiAgICBjb25zdCB7IGluY2x1ZGUsIC4uLmJvZHkgfSA9IHBhcmFtcztcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC90aHJlYWRzLyR7dGhyZWFkSWR9L3J1bnNgLCB7XG4gICAgICBxdWVyeTogeyBpbmNsdWRlIH0sXG4gICAgICBib2R5LFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICBzdHJlYW06IHBhcmFtcy5zdHJlYW0gPz8gZmFsc2UsXG4gICAgfSkgYXMgQVBJUHJvbWlzZTxSdW4+IHwgQVBJUHJvbWlzZTxTdHJlYW08QXNzaXN0YW50c0FQSS5Bc3Npc3RhbnRTdHJlYW1FdmVudD4+O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBhIHJ1bi5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVGhlIEFzc2lzdGFudHMgQVBJIGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgdGhlIFJlc3BvbnNlcyBBUElcbiAgICovXG4gIHJldHJpZXZlKHRocmVhZElkOiBzdHJpbmcsIHJ1bklkOiBzdHJpbmcsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5BUElQcm9taXNlPFJ1bj4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvdGhyZWFkcy8ke3RocmVhZElkfS9ydW5zLyR7cnVuSWR9YCwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTW9kaWZpZXMgYSBydW4uXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFRoZSBBc3Npc3RhbnRzIEFQSSBpcyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIHRoZSBSZXNwb25zZXMgQVBJXG4gICAqL1xuICB1cGRhdGUoXG4gICAgdGhyZWFkSWQ6IHN0cmluZyxcbiAgICBydW5JZDogc3RyaW5nLFxuICAgIGJvZHk6IFJ1blVwZGF0ZVBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5BUElQcm9taXNlPFJ1bj4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3RocmVhZHMvJHt0aHJlYWRJZH0vcnVucy8ke3J1bklkfWAsIHtcbiAgICAgIGJvZHksXG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBydW5zIGJlbG9uZ2luZyB0byBhIHRocmVhZC5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVGhlIEFzc2lzdGFudHMgQVBJIGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgdGhlIFJlc3BvbnNlcyBBUElcbiAgICovXG4gIGxpc3QoXG4gICAgdGhyZWFkSWQ6IHN0cmluZyxcbiAgICBxdWVyeT86IFJ1bkxpc3RQYXJhbXMsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuUGFnZVByb21pc2U8UnVuc1BhZ2UsIFJ1bj47XG4gIGxpc3QodGhyZWFkSWQ6IHN0cmluZywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLlBhZ2VQcm9taXNlPFJ1bnNQYWdlLCBSdW4+O1xuICBsaXN0KFxuICAgIHRocmVhZElkOiBzdHJpbmcsXG4gICAgcXVlcnk6IFJ1bkxpc3RQYXJhbXMgfCBDb3JlLlJlcXVlc3RPcHRpb25zID0ge30sXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuUGFnZVByb21pc2U8UnVuc1BhZ2UsIFJ1bj4ge1xuICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xuICAgICAgcmV0dXJuIHRoaXMubGlzdCh0aHJlYWRJZCwge30sIHF1ZXJ5KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KGAvdGhyZWFkcy8ke3RocmVhZElkfS9ydW5zYCwgUnVuc1BhZ2UsIHtcbiAgICAgIHF1ZXJ5LFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VscyBhIHJ1biB0aGF0IGlzIGBpbl9wcm9ncmVzc2AuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFRoZSBBc3Npc3RhbnRzIEFQSSBpcyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIHRoZSBSZXNwb25zZXMgQVBJXG4gICAqL1xuICBjYW5jZWwodGhyZWFkSWQ6IHN0cmluZywgcnVuSWQ6IHN0cmluZywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkFQSVByb21pc2U8UnVuPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvdGhyZWFkcy8ke3RocmVhZElkfS9ydW5zLyR7cnVuSWR9L2NhbmNlbGAsIHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgaGVscGVyIHRvIGNyZWF0ZSBhIHJ1biBhbiBwb2xsIGZvciBhIHRlcm1pbmFsIHN0YXRlLiBNb3JlIGluZm9ybWF0aW9uIG9uIFJ1blxuICAgKiBsaWZlY3ljbGVzIGNhbiBiZSBmb3VuZCBoZXJlOlxuICAgKiBodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hc3Npc3RhbnRzL2hvdy1pdC13b3Jrcy9ydW5zLWFuZC1ydW4tc3RlcHNcbiAgICovXG4gIGFzeW5jIGNyZWF0ZUFuZFBvbGwoXG4gICAgdGhyZWFkSWQ6IHN0cmluZyxcbiAgICBib2R5OiBSdW5DcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMgJiB7IHBvbGxJbnRlcnZhbE1zPzogbnVtYmVyIH0sXG4gICk6IFByb21pc2U8UnVuPiB7XG4gICAgY29uc3QgcnVuID0gYXdhaXQgdGhpcy5jcmVhdGUodGhyZWFkSWQsIGJvZHksIG9wdGlvbnMpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnBvbGwodGhyZWFkSWQsIHJ1bi5pZCwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgUnVuIHN0cmVhbVxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCB1c2UgYHN0cmVhbWAgaW5zdGVhZFxuICAgKi9cbiAgY3JlYXRlQW5kU3RyZWFtKFxuICAgIHRocmVhZElkOiBzdHJpbmcsXG4gICAgYm9keTogUnVuQ3JlYXRlUGFyYW1zQmFzZVN0cmVhbSxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQXNzaXN0YW50U3RyZWFtIHtcbiAgICByZXR1cm4gQXNzaXN0YW50U3RyZWFtLmNyZWF0ZUFzc2lzdGFudFN0cmVhbSh0aHJlYWRJZCwgdGhpcy5fY2xpZW50LmJldGEudGhyZWFkcy5ydW5zLCBib2R5LCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGhlbHBlciB0byBwb2xsIGEgcnVuIHN0YXR1cyB1bnRpbCBpdCByZWFjaGVzIGEgdGVybWluYWwgc3RhdGUuIE1vcmVcbiAgICogaW5mb3JtYXRpb24gb24gUnVuIGxpZmVjeWNsZXMgY2FuIGJlIGZvdW5kIGhlcmU6XG4gICAqIGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2Fzc2lzdGFudHMvaG93LWl0LXdvcmtzL3J1bnMtYW5kLXJ1bi1zdGVwc1xuICAgKi9cbiAgYXN5bmMgcG9sbChcbiAgICB0aHJlYWRJZDogc3RyaW5nLFxuICAgIHJ1bklkOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMgJiB7IHBvbGxJbnRlcnZhbE1zPzogbnVtYmVyIH0sXG4gICk6IFByb21pc2U8UnVuPiB7XG4gICAgY29uc3QgaGVhZGVyczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHsgLi4ub3B0aW9ucz8uaGVhZGVycywgJ1gtU3RhaW5sZXNzLVBvbGwtSGVscGVyJzogJ3RydWUnIH07XG5cbiAgICBpZiAob3B0aW9ucz8ucG9sbEludGVydmFsTXMpIHtcbiAgICAgIGhlYWRlcnNbJ1gtU3RhaW5sZXNzLUN1c3RvbS1Qb2xsLUludGVydmFsJ10gPSBvcHRpb25zLnBvbGxJbnRlcnZhbE1zLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGNvbnN0IHsgZGF0YTogcnVuLCByZXNwb25zZSB9ID0gYXdhaXQgdGhpcy5yZXRyaWV2ZSh0aHJlYWRJZCwgcnVuSWQsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgaGVhZGVyczogeyAuLi5vcHRpb25zPy5oZWFkZXJzLCAuLi5oZWFkZXJzIH0sXG4gICAgICB9KS53aXRoUmVzcG9uc2UoKTtcblxuICAgICAgc3dpdGNoIChydW4uc3RhdHVzKSB7XG4gICAgICAgIC8vSWYgd2UgYXJlIGluIGFueSBzb3J0IG9mIGludGVybWVkaWF0ZSBzdGF0ZSB3ZSBwb2xsXG4gICAgICAgIGNhc2UgJ3F1ZXVlZCc6XG4gICAgICAgIGNhc2UgJ2luX3Byb2dyZXNzJzpcbiAgICAgICAgY2FzZSAnY2FuY2VsbGluZyc6XG4gICAgICAgICAgbGV0IHNsZWVwSW50ZXJ2YWwgPSA1MDAwO1xuXG4gICAgICAgICAgaWYgKG9wdGlvbnM/LnBvbGxJbnRlcnZhbE1zKSB7XG4gICAgICAgICAgICBzbGVlcEludGVydmFsID0gb3B0aW9ucy5wb2xsSW50ZXJ2YWxNcztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgaGVhZGVySW50ZXJ2YWwgPSByZXNwb25zZS5oZWFkZXJzLmdldCgnb3BlbmFpLXBvbGwtYWZ0ZXItbXMnKTtcbiAgICAgICAgICAgIGlmIChoZWFkZXJJbnRlcnZhbCkge1xuICAgICAgICAgICAgICBjb25zdCBoZWFkZXJJbnRlcnZhbE1zID0gcGFyc2VJbnQoaGVhZGVySW50ZXJ2YWwpO1xuICAgICAgICAgICAgICBpZiAoIWlzTmFOKGhlYWRlckludGVydmFsTXMpKSB7XG4gICAgICAgICAgICAgICAgc2xlZXBJbnRlcnZhbCA9IGhlYWRlckludGVydmFsTXM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYXdhaXQgc2xlZXAoc2xlZXBJbnRlcnZhbCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIC8vV2UgcmV0dXJuIHRoZSBydW4gaW4gYW55IHRlcm1pbmFsIHN0YXRlLlxuICAgICAgICBjYXNlICdyZXF1aXJlc19hY3Rpb24nOlxuICAgICAgICBjYXNlICdpbmNvbXBsZXRlJzpcbiAgICAgICAgY2FzZSAnY2FuY2VsbGVkJzpcbiAgICAgICAgY2FzZSAnY29tcGxldGVkJzpcbiAgICAgICAgY2FzZSAnZmFpbGVkJzpcbiAgICAgICAgY2FzZSAnZXhwaXJlZCc6XG4gICAgICAgICAgcmV0dXJuIHJ1bjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgUnVuIHN0cmVhbVxuICAgKi9cbiAgc3RyZWFtKHRocmVhZElkOiBzdHJpbmcsIGJvZHk6IFJ1bkNyZWF0ZVBhcmFtc0Jhc2VTdHJlYW0sIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQXNzaXN0YW50U3RyZWFtIHtcbiAgICByZXR1cm4gQXNzaXN0YW50U3RyZWFtLmNyZWF0ZUFzc2lzdGFudFN0cmVhbSh0aHJlYWRJZCwgdGhpcy5fY2xpZW50LmJldGEudGhyZWFkcy5ydW5zLCBib2R5LCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIGEgcnVuIGhhcyB0aGUgYHN0YXR1czogXCJyZXF1aXJlc19hY3Rpb25cImAgYW5kIGByZXF1aXJlZF9hY3Rpb24udHlwZWAgaXNcbiAgICogYHN1Ym1pdF90b29sX291dHB1dHNgLCB0aGlzIGVuZHBvaW50IGNhbiBiZSB1c2VkIHRvIHN1Ym1pdCB0aGUgb3V0cHV0cyBmcm9tIHRoZVxuICAgKiB0b29sIGNhbGxzIG9uY2UgdGhleSdyZSBhbGwgY29tcGxldGVkLiBBbGwgb3V0cHV0cyBtdXN0IGJlIHN1Ym1pdHRlZCBpbiBhIHNpbmdsZVxuICAgKiByZXF1ZXN0LlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBUaGUgQXNzaXN0YW50cyBBUEkgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgUmVzcG9uc2VzIEFQSVxuICAgKi9cbiAgc3VibWl0VG9vbE91dHB1dHMoXG4gICAgdGhyZWFkSWQ6IHN0cmluZyxcbiAgICBydW5JZDogc3RyaW5nLFxuICAgIGJvZHk6IFJ1blN1Ym1pdFRvb2xPdXRwdXRzUGFyYW1zTm9uU3RyZWFtaW5nLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBBUElQcm9taXNlPFJ1bj47XG4gIHN1Ym1pdFRvb2xPdXRwdXRzKFxuICAgIHRocmVhZElkOiBzdHJpbmcsXG4gICAgcnVuSWQ6IHN0cmluZyxcbiAgICBib2R5OiBSdW5TdWJtaXRUb29sT3V0cHV0c1BhcmFtc1N0cmVhbWluZyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQVBJUHJvbWlzZTxTdHJlYW08QXNzaXN0YW50c0FQSS5Bc3Npc3RhbnRTdHJlYW1FdmVudD4+O1xuICBzdWJtaXRUb29sT3V0cHV0cyhcbiAgICB0aHJlYWRJZDogc3RyaW5nLFxuICAgIHJ1bklkOiBzdHJpbmcsXG4gICAgYm9keTogUnVuU3VibWl0VG9vbE91dHB1dHNQYXJhbXNCYXNlLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBBUElQcm9taXNlPFN0cmVhbTxBc3Npc3RhbnRzQVBJLkFzc2lzdGFudFN0cmVhbUV2ZW50PiB8IFJ1bj47XG4gIHN1Ym1pdFRvb2xPdXRwdXRzKFxuICAgIHRocmVhZElkOiBzdHJpbmcsXG4gICAgcnVuSWQ6IHN0cmluZyxcbiAgICBib2R5OiBSdW5TdWJtaXRUb29sT3V0cHV0c1BhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQVBJUHJvbWlzZTxSdW4+IHwgQVBJUHJvbWlzZTxTdHJlYW08QXNzaXN0YW50c0FQSS5Bc3Npc3RhbnRTdHJlYW1FdmVudD4+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC90aHJlYWRzLyR7dGhyZWFkSWR9L3J1bnMvJHtydW5JZH0vc3VibWl0X3Rvb2xfb3V0cHV0c2AsIHtcbiAgICAgIGJvZHksXG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgIHN0cmVhbTogYm9keS5zdHJlYW0gPz8gZmFsc2UsXG4gICAgfSkgYXMgQVBJUHJvbWlzZTxSdW4+IHwgQVBJUHJvbWlzZTxTdHJlYW08QXNzaXN0YW50c0FQSS5Bc3Npc3RhbnRTdHJlYW1FdmVudD4+O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgaGVscGVyIHRvIHN1Ym1pdCBhIHRvb2wgb3V0cHV0IHRvIGEgcnVuIGFuZCBwb2xsIGZvciBhIHRlcm1pbmFsIHJ1biBzdGF0ZS5cbiAgICogTW9yZSBpbmZvcm1hdGlvbiBvbiBSdW4gbGlmZWN5Y2xlcyBjYW4gYmUgZm91bmQgaGVyZTpcbiAgICogaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXNzaXN0YW50cy9ob3ctaXQtd29ya3MvcnVucy1hbmQtcnVuLXN0ZXBzXG4gICAqL1xuICBhc3luYyBzdWJtaXRUb29sT3V0cHV0c0FuZFBvbGwoXG4gICAgdGhyZWFkSWQ6IHN0cmluZyxcbiAgICBydW5JZDogc3RyaW5nLFxuICAgIGJvZHk6IFJ1blN1Ym1pdFRvb2xPdXRwdXRzUGFyYW1zTm9uU3RyZWFtaW5nLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zICYgeyBwb2xsSW50ZXJ2YWxNcz86IG51bWJlciB9LFxuICApOiBQcm9taXNlPFJ1bj4ge1xuICAgIGNvbnN0IHJ1biA9IGF3YWl0IHRoaXMuc3VibWl0VG9vbE91dHB1dHModGhyZWFkSWQsIHJ1bklkLCBib2R5LCBvcHRpb25zKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5wb2xsKHRocmVhZElkLCBydW4uaWQsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN1Ym1pdCB0aGUgdG9vbCBvdXRwdXRzIGZyb20gYSBwcmV2aW91cyBydW4gYW5kIHN0cmVhbSB0aGUgcnVuIHRvIGEgdGVybWluYWxcbiAgICogc3RhdGUuIE1vcmUgaW5mb3JtYXRpb24gb24gUnVuIGxpZmVjeWNsZXMgY2FuIGJlIGZvdW5kIGhlcmU6XG4gICAqIGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2Fzc2lzdGFudHMvaG93LWl0LXdvcmtzL3J1bnMtYW5kLXJ1bi1zdGVwc1xuICAgKi9cbiAgc3VibWl0VG9vbE91dHB1dHNTdHJlYW0oXG4gICAgdGhyZWFkSWQ6IHN0cmluZyxcbiAgICBydW5JZDogc3RyaW5nLFxuICAgIGJvZHk6IFJ1blN1Ym1pdFRvb2xPdXRwdXRzUGFyYW1zU3RyZWFtLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBBc3Npc3RhbnRTdHJlYW0ge1xuICAgIHJldHVybiBBc3Npc3RhbnRTdHJlYW0uY3JlYXRlVG9vbEFzc2lzdGFudFN0cmVhbShcbiAgICAgIHRocmVhZElkLFxuICAgICAgcnVuSWQsXG4gICAgICB0aGlzLl9jbGllbnQuYmV0YS50aHJlYWRzLnJ1bnMsXG4gICAgICBib2R5LFxuICAgICAgb3B0aW9ucyxcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSdW5zUGFnZSBleHRlbmRzIEN1cnNvclBhZ2U8UnVuPiB7fVxuXG4vKipcbiAqIFRvb2wgY2FsbCBvYmplY3RzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVxdWlyZWRBY3Rpb25GdW5jdGlvblRvb2xDYWxsIHtcbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgdG9vbCBjYWxsLiBUaGlzIElEIG11c3QgYmUgcmVmZXJlbmNlZCB3aGVuIHlvdSBzdWJtaXQgdGhlIHRvb2xcbiAgICogb3V0cHV0cyBpbiB1c2luZyB0aGVcbiAgICogW1N1Ym1pdCB0b29sIG91dHB1dHMgdG8gcnVuXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3J1bnMvc3VibWl0VG9vbE91dHB1dHMpXG4gICAqIGVuZHBvaW50LlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGZ1bmN0aW9uIGRlZmluaXRpb24uXG4gICAqL1xuICBmdW5jdGlvbjogUmVxdWlyZWRBY3Rpb25GdW5jdGlvblRvb2xDYWxsLkZ1bmN0aW9uO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0b29sIGNhbGwgdGhlIG91dHB1dCBpcyByZXF1aXJlZCBmb3IuIEZvciBub3csIHRoaXMgaXMgYWx3YXlzXG4gICAqIGBmdW5jdGlvbmAuXG4gICAqL1xuICB0eXBlOiAnZnVuY3Rpb24nO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFJlcXVpcmVkQWN0aW9uRnVuY3Rpb25Ub29sQ2FsbCB7XG4gIC8qKlxuICAgKiBUaGUgZnVuY3Rpb24gZGVmaW5pdGlvbi5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgRnVuY3Rpb24ge1xuICAgIC8qKlxuICAgICAqIFRoZSBhcmd1bWVudHMgdGhhdCB0aGUgbW9kZWwgZXhwZWN0cyB5b3UgdG8gcGFzcyB0byB0aGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgYXJndW1lbnRzOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgbmFtZTogc3RyaW5nO1xuICB9XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiBleGVjdXRpb24gcnVuIG9uIGFcbiAqIFt0aHJlYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdGhyZWFkcykuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUnVuIHtcbiAgLyoqXG4gICAqIFRoZSBpZGVudGlmaWVyLCB3aGljaCBjYW4gYmUgcmVmZXJlbmNlZCBpbiBBUEkgZW5kcG9pbnRzLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZVxuICAgKiBbYXNzaXN0YW50XShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2Fzc2lzdGFudHMpIHVzZWQgZm9yXG4gICAqIGV4ZWN1dGlvbiBvZiB0aGlzIHJ1bi5cbiAgICovXG4gIGFzc2lzdGFudF9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpIGZvciB3aGVuIHRoZSBydW4gd2FzIGNhbmNlbGxlZC5cbiAgICovXG4gIGNhbmNlbGxlZF9hdDogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSBmb3Igd2hlbiB0aGUgcnVuIHdhcyBjb21wbGV0ZWQuXG4gICAqL1xuICBjb21wbGV0ZWRfYXQ6IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBVbml4IHRpbWVzdGFtcCAoaW4gc2Vjb25kcykgZm9yIHdoZW4gdGhlIHJ1biB3YXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWRfYXQ6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSBmb3Igd2hlbiB0aGUgcnVuIHdpbGwgZXhwaXJlLlxuICAgKi9cbiAgZXhwaXJlc19hdDogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSBmb3Igd2hlbiB0aGUgcnVuIGZhaWxlZC5cbiAgICovXG4gIGZhaWxlZF9hdDogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogRGV0YWlscyBvbiB3aHkgdGhlIHJ1biBpcyBpbmNvbXBsZXRlLiBXaWxsIGJlIGBudWxsYCBpZiB0aGUgcnVuIGlzIG5vdFxuICAgKiBpbmNvbXBsZXRlLlxuICAgKi9cbiAgaW5jb21wbGV0ZV9kZXRhaWxzOiBSdW4uSW5jb21wbGV0ZURldGFpbHMgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5zdHJ1Y3Rpb25zIHRoYXQgdGhlXG4gICAqIFthc3Npc3RhbnRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvYXNzaXN0YW50cykgdXNlZCBmb3JcbiAgICogdGhpcyBydW4uXG4gICAqL1xuICBpbnN0cnVjdGlvbnM6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGxhc3QgZXJyb3IgYXNzb2NpYXRlZCB3aXRoIHRoaXMgcnVuLiBXaWxsIGJlIGBudWxsYCBpZiB0aGVyZSBhcmUgbm8gZXJyb3JzLlxuICAgKi9cbiAgbGFzdF9lcnJvcjogUnVuLkxhc3RFcnJvciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiBjb21wbGV0aW9uIHRva2VucyBzcGVjaWZpZWQgdG8gaGF2ZSBiZWVuIHVzZWQgb3ZlciB0aGVcbiAgICogY291cnNlIG9mIHRoZSBydW4uXG4gICAqL1xuICBtYXhfY29tcGxldGlvbl90b2tlbnM6IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiBwcm9tcHQgdG9rZW5zIHNwZWNpZmllZCB0byBoYXZlIGJlZW4gdXNlZCBvdmVyIHRoZSBjb3Vyc2VcbiAgICogb2YgdGhlIHJ1bi5cbiAgICovXG4gIG1heF9wcm9tcHRfdG9rZW5zOiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgKlxuICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbWV0YWRhdGE6IFNoYXJlZC5NZXRhZGF0YSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBtb2RlbCB0aGF0IHRoZVxuICAgKiBbYXNzaXN0YW50XShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2Fzc2lzdGFudHMpIHVzZWQgZm9yXG4gICAqIHRoaXMgcnVuLlxuICAgKi9cbiAgbW9kZWw6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG9iamVjdCB0eXBlLCB3aGljaCBpcyBhbHdheXMgYHRocmVhZC5ydW5gLlxuICAgKi9cbiAgb2JqZWN0OiAndGhyZWFkLnJ1bic7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlXG4gICAqIFtwYXJhbGxlbCBmdW5jdGlvbiBjYWxsaW5nXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvZnVuY3Rpb24tY2FsbGluZyNjb25maWd1cmluZy1wYXJhbGxlbC1mdW5jdGlvbi1jYWxsaW5nKVxuICAgKiBkdXJpbmcgdG9vbCB1c2UuXG4gICAqL1xuICBwYXJhbGxlbF90b29sX2NhbGxzOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBEZXRhaWxzIG9uIHRoZSBhY3Rpb24gcmVxdWlyZWQgdG8gY29udGludWUgdGhlIHJ1bi4gV2lsbCBiZSBgbnVsbGAgaWYgbm8gYWN0aW9uXG4gICAqIGlzIHJlcXVpcmVkLlxuICAgKi9cbiAgcmVxdWlyZWRfYWN0aW9uOiBSdW4uUmVxdWlyZWRBY3Rpb24gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGZvcm1hdCB0aGF0IHRoZSBtb2RlbCBtdXN0IG91dHB1dC4gQ29tcGF0aWJsZSB3aXRoXG4gICAqIFtHUFQtNG9dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL21vZGVscyNncHQtNG8pLFxuICAgKiBbR1BULTQgVHVyYm9dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL21vZGVscyNncHQtNC10dXJiby1hbmQtZ3B0LTQpLFxuICAgKiBhbmQgYWxsIEdQVC0zLjUgVHVyYm8gbW9kZWxzIHNpbmNlIGBncHQtMy41LXR1cmJvLTExMDZgLlxuICAgKlxuICAgKiBTZXR0aW5nIHRvIGB7IFwidHlwZVwiOiBcImpzb25fc2NoZW1hXCIsIFwianNvbl9zY2hlbWFcIjogey4uLn0gfWAgZW5hYmxlcyBTdHJ1Y3R1cmVkXG4gICAqIE91dHB1dHMgd2hpY2ggZW5zdXJlcyB0aGUgbW9kZWwgd2lsbCBtYXRjaCB5b3VyIHN1cHBsaWVkIEpTT04gc2NoZW1hLiBMZWFybiBtb3JlXG4gICAqIGluIHRoZVxuICAgKiBbU3RydWN0dXJlZCBPdXRwdXRzIGd1aWRlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvc3RydWN0dXJlZC1vdXRwdXRzKS5cbiAgICpcbiAgICogU2V0dGluZyB0byBgeyBcInR5cGVcIjogXCJqc29uX29iamVjdFwiIH1gIGVuYWJsZXMgSlNPTiBtb2RlLCB3aGljaCBlbnN1cmVzIHRoZVxuICAgKiBtZXNzYWdlIHRoZSBtb2RlbCBnZW5lcmF0ZXMgaXMgdmFsaWQgSlNPTi5cbiAgICpcbiAgICogKipJbXBvcnRhbnQ6Kiogd2hlbiB1c2luZyBKU09OIG1vZGUsIHlvdSAqKm11c3QqKiBhbHNvIGluc3RydWN0IHRoZSBtb2RlbCB0b1xuICAgKiBwcm9kdWNlIEpTT04geW91cnNlbGYgdmlhIGEgc3lzdGVtIG9yIHVzZXIgbWVzc2FnZS4gV2l0aG91dCB0aGlzLCB0aGUgbW9kZWwgbWF5XG4gICAqIGdlbmVyYXRlIGFuIHVuZW5kaW5nIHN0cmVhbSBvZiB3aGl0ZXNwYWNlIHVudGlsIHRoZSBnZW5lcmF0aW9uIHJlYWNoZXMgdGhlIHRva2VuXG4gICAqIGxpbWl0LCByZXN1bHRpbmcgaW4gYSBsb25nLXJ1bm5pbmcgYW5kIHNlZW1pbmdseSBcInN0dWNrXCIgcmVxdWVzdC4gQWxzbyBub3RlIHRoYXRcbiAgICogdGhlIG1lc3NhZ2UgY29udGVudCBtYXkgYmUgcGFydGlhbGx5IGN1dCBvZmYgaWYgYGZpbmlzaF9yZWFzb249XCJsZW5ndGhcImAsIHdoaWNoXG4gICAqIGluZGljYXRlcyB0aGUgZ2VuZXJhdGlvbiBleGNlZWRlZCBgbWF4X3Rva2Vuc2Agb3IgdGhlIGNvbnZlcnNhdGlvbiBleGNlZWRlZCB0aGVcbiAgICogbWF4IGNvbnRleHQgbGVuZ3RoLlxuICAgKi9cbiAgcmVzcG9uc2VfZm9ybWF0OiBUaHJlYWRzQVBJLkFzc2lzdGFudFJlc3BvbnNlRm9ybWF0T3B0aW9uIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSBmb3Igd2hlbiB0aGUgcnVuIHdhcyBzdGFydGVkLlxuICAgKi9cbiAgc3RhcnRlZF9hdDogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIHN0YXR1cyBvZiB0aGUgcnVuLCB3aGljaCBjYW4gYmUgZWl0aGVyIGBxdWV1ZWRgLCBgaW5fcHJvZ3Jlc3NgLFxuICAgKiBgcmVxdWlyZXNfYWN0aW9uYCwgYGNhbmNlbGxpbmdgLCBgY2FuY2VsbGVkYCwgYGZhaWxlZGAsIGBjb21wbGV0ZWRgLFxuICAgKiBgaW5jb21wbGV0ZWAsIG9yIGBleHBpcmVkYC5cbiAgICovXG4gIHN0YXR1czogUnVuU3RhdHVzO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIFt0aHJlYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdGhyZWFkcylcbiAgICogdGhhdCB3YXMgZXhlY3V0ZWQgb24gYXMgYSBwYXJ0IG9mIHRoaXMgcnVuLlxuICAgKi9cbiAgdGhyZWFkX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIHdoaWNoIChpZiBhbnkpIHRvb2wgaXMgY2FsbGVkIGJ5IHRoZSBtb2RlbC4gYG5vbmVgIG1lYW5zIHRoZSBtb2RlbCB3aWxsXG4gICAqIG5vdCBjYWxsIGFueSB0b29scyBhbmQgaW5zdGVhZCBnZW5lcmF0ZXMgYSBtZXNzYWdlLiBgYXV0b2AgaXMgdGhlIGRlZmF1bHQgdmFsdWVcbiAgICogYW5kIG1lYW5zIHRoZSBtb2RlbCBjYW4gcGljayBiZXR3ZWVuIGdlbmVyYXRpbmcgYSBtZXNzYWdlIG9yIGNhbGxpbmcgb25lIG9yIG1vcmVcbiAgICogdG9vbHMuIGByZXF1aXJlZGAgbWVhbnMgdGhlIG1vZGVsIG11c3QgY2FsbCBvbmUgb3IgbW9yZSB0b29scyBiZWZvcmUgcmVzcG9uZGluZ1xuICAgKiB0byB0aGUgdXNlci4gU3BlY2lmeWluZyBhIHBhcnRpY3VsYXIgdG9vbCBsaWtlIGB7XCJ0eXBlXCI6IFwiZmlsZV9zZWFyY2hcIn1gIG9yXG4gICAqIGB7XCJ0eXBlXCI6IFwiZnVuY3Rpb25cIiwgXCJmdW5jdGlvblwiOiB7XCJuYW1lXCI6IFwibXlfZnVuY3Rpb25cIn19YCBmb3JjZXMgdGhlIG1vZGVsIHRvXG4gICAqIGNhbGwgdGhhdCB0b29sLlxuICAgKi9cbiAgdG9vbF9jaG9pY2U6IFRocmVhZHNBUEkuQXNzaXN0YW50VG9vbENob2ljZU9wdGlvbiB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIHRvb2xzIHRoYXQgdGhlXG4gICAqIFthc3Npc3RhbnRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvYXNzaXN0YW50cykgdXNlZCBmb3JcbiAgICogdGhpcyBydW4uXG4gICAqL1xuICB0b29sczogQXJyYXk8QXNzaXN0YW50c0FQSS5Bc3Npc3RhbnRUb29sPjtcblxuICAvKipcbiAgICogQ29udHJvbHMgZm9yIGhvdyBhIHRocmVhZCB3aWxsIGJlIHRydW5jYXRlZCBwcmlvciB0byB0aGUgcnVuLiBVc2UgdGhpcyB0b1xuICAgKiBjb250cm9sIHRoZSBpbnRpYWwgY29udGV4dCB3aW5kb3cgb2YgdGhlIHJ1bi5cbiAgICovXG4gIHRydW5jYXRpb25fc3RyYXRlZ3k6IFJ1bi5UcnVuY2F0aW9uU3RyYXRlZ3kgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBVc2FnZSBzdGF0aXN0aWNzIHJlbGF0ZWQgdG8gdGhlIHJ1bi4gVGhpcyB2YWx1ZSB3aWxsIGJlIGBudWxsYCBpZiB0aGUgcnVuIGlzIG5vdFxuICAgKiBpbiBhIHRlcm1pbmFsIHN0YXRlIChpLmUuIGBpbl9wcm9ncmVzc2AsIGBxdWV1ZWRgLCBldGMuKS5cbiAgICovXG4gIHVzYWdlOiBSdW4uVXNhZ2UgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgc2FtcGxpbmcgdGVtcGVyYXR1cmUgdXNlZCBmb3IgdGhpcyBydW4uIElmIG5vdCBzZXQsIGRlZmF1bHRzIHRvIDEuXG4gICAqL1xuICB0ZW1wZXJhdHVyZT86IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBudWNsZXVzIHNhbXBsaW5nIHZhbHVlIHVzZWQgZm9yIHRoaXMgcnVuLiBJZiBub3Qgc2V0LCBkZWZhdWx0cyB0byAxLlxuICAgKi9cbiAgdG9wX3A/OiBudW1iZXIgfCBudWxsO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFJ1biB7XG4gIC8qKlxuICAgKiBEZXRhaWxzIG9uIHdoeSB0aGUgcnVuIGlzIGluY29tcGxldGUuIFdpbGwgYmUgYG51bGxgIGlmIHRoZSBydW4gaXMgbm90XG4gICAqIGluY29tcGxldGUuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIEluY29tcGxldGVEZXRhaWxzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgcmVhc29uIHdoeSB0aGUgcnVuIGlzIGluY29tcGxldGUuIFRoaXMgd2lsbCBwb2ludCB0byB3aGljaCBzcGVjaWZpYyB0b2tlblxuICAgICAqIGxpbWl0IHdhcyByZWFjaGVkIG92ZXIgdGhlIGNvdXJzZSBvZiB0aGUgcnVuLlxuICAgICAqL1xuICAgIHJlYXNvbj86ICdtYXhfY29tcGxldGlvbl90b2tlbnMnIHwgJ21heF9wcm9tcHRfdG9rZW5zJztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgbGFzdCBlcnJvciBhc3NvY2lhdGVkIHdpdGggdGhpcyBydW4uIFdpbGwgYmUgYG51bGxgIGlmIHRoZXJlIGFyZSBubyBlcnJvcnMuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIExhc3RFcnJvciB7XG4gICAgLyoqXG4gICAgICogT25lIG9mIGBzZXJ2ZXJfZXJyb3JgLCBgcmF0ZV9saW1pdF9leGNlZWRlZGAsIG9yIGBpbnZhbGlkX3Byb21wdGAuXG4gICAgICovXG4gICAgY29kZTogJ3NlcnZlcl9lcnJvcicgfCAncmF0ZV9saW1pdF9leGNlZWRlZCcgfCAnaW52YWxpZF9wcm9tcHQnO1xuXG4gICAgLyoqXG4gICAgICogQSBodW1hbi1yZWFkYWJsZSBkZXNjcmlwdGlvbiBvZiB0aGUgZXJyb3IuXG4gICAgICovXG4gICAgbWVzc2FnZTogc3RyaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGFpbHMgb24gdGhlIGFjdGlvbiByZXF1aXJlZCB0byBjb250aW51ZSB0aGUgcnVuLiBXaWxsIGJlIGBudWxsYCBpZiBubyBhY3Rpb25cbiAgICogaXMgcmVxdWlyZWQuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFJlcXVpcmVkQWN0aW9uIHtcbiAgICAvKipcbiAgICAgKiBEZXRhaWxzIG9uIHRoZSB0b29sIG91dHB1dHMgbmVlZGVkIGZvciB0aGlzIHJ1biB0byBjb250aW51ZS5cbiAgICAgKi9cbiAgICBzdWJtaXRfdG9vbF9vdXRwdXRzOiBSZXF1aXJlZEFjdGlvbi5TdWJtaXRUb29sT3V0cHV0cztcblxuICAgIC8qKlxuICAgICAqIEZvciBub3csIHRoaXMgaXMgYWx3YXlzIGBzdWJtaXRfdG9vbF9vdXRwdXRzYC5cbiAgICAgKi9cbiAgICB0eXBlOiAnc3VibWl0X3Rvb2xfb3V0cHV0cyc7XG4gIH1cblxuICBleHBvcnQgbmFtZXNwYWNlIFJlcXVpcmVkQWN0aW9uIHtcbiAgICAvKipcbiAgICAgKiBEZXRhaWxzIG9uIHRoZSB0b29sIG91dHB1dHMgbmVlZGVkIGZvciB0aGlzIHJ1biB0byBjb250aW51ZS5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIFN1Ym1pdFRvb2xPdXRwdXRzIHtcbiAgICAgIC8qKlxuICAgICAgICogQSBsaXN0IG9mIHRoZSByZWxldmFudCB0b29sIGNhbGxzLlxuICAgICAgICovXG4gICAgICB0b29sX2NhbGxzOiBBcnJheTxSdW5zQVBJLlJlcXVpcmVkQWN0aW9uRnVuY3Rpb25Ub29sQ2FsbD47XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIGZvciBob3cgYSB0aHJlYWQgd2lsbCBiZSB0cnVuY2F0ZWQgcHJpb3IgdG8gdGhlIHJ1bi4gVXNlIHRoaXMgdG9cbiAgICogY29udHJvbCB0aGUgaW50aWFsIGNvbnRleHQgd2luZG93IG9mIHRoZSBydW4uXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRydW5jYXRpb25TdHJhdGVneSB7XG4gICAgLyoqXG4gICAgICogVGhlIHRydW5jYXRpb24gc3RyYXRlZ3kgdG8gdXNlIGZvciB0aGUgdGhyZWFkLiBUaGUgZGVmYXVsdCBpcyBgYXV0b2AuIElmIHNldCB0b1xuICAgICAqIGBsYXN0X21lc3NhZ2VzYCwgdGhlIHRocmVhZCB3aWxsIGJlIHRydW5jYXRlZCB0byB0aGUgbiBtb3N0IHJlY2VudCBtZXNzYWdlcyBpblxuICAgICAqIHRoZSB0aHJlYWQuIFdoZW4gc2V0IHRvIGBhdXRvYCwgbWVzc2FnZXMgaW4gdGhlIG1pZGRsZSBvZiB0aGUgdGhyZWFkIHdpbGwgYmVcbiAgICAgKiBkcm9wcGVkIHRvIGZpdCB0aGUgY29udGV4dCBsZW5ndGggb2YgdGhlIG1vZGVsLCBgbWF4X3Byb21wdF90b2tlbnNgLlxuICAgICAqL1xuICAgIHR5cGU6ICdhdXRvJyB8ICdsYXN0X21lc3NhZ2VzJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgbW9zdCByZWNlbnQgbWVzc2FnZXMgZnJvbSB0aGUgdGhyZWFkIHdoZW4gY29uc3RydWN0aW5nIHRoZSBjb250ZXh0XG4gICAgICogZm9yIHRoZSBydW4uXG4gICAgICovXG4gICAgbGFzdF9tZXNzYWdlcz86IG51bWJlciB8IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogVXNhZ2Ugc3RhdGlzdGljcyByZWxhdGVkIHRvIHRoZSBydW4uIFRoaXMgdmFsdWUgd2lsbCBiZSBgbnVsbGAgaWYgdGhlIHJ1biBpcyBub3RcbiAgICogaW4gYSB0ZXJtaW5hbCBzdGF0ZSAoaS5lLiBgaW5fcHJvZ3Jlc3NgLCBgcXVldWVkYCwgZXRjLikuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFVzYWdlIHtcbiAgICAvKipcbiAgICAgKiBOdW1iZXIgb2YgY29tcGxldGlvbiB0b2tlbnMgdXNlZCBvdmVyIHRoZSBjb3Vyc2Ugb2YgdGhlIHJ1bi5cbiAgICAgKi9cbiAgICBjb21wbGV0aW9uX3Rva2VuczogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogTnVtYmVyIG9mIHByb21wdCB0b2tlbnMgdXNlZCBvdmVyIHRoZSBjb3Vyc2Ugb2YgdGhlIHJ1bi5cbiAgICAgKi9cbiAgICBwcm9tcHRfdG9rZW5zOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUb3RhbCBudW1iZXIgb2YgdG9rZW5zIHVzZWQgKHByb21wdCArIGNvbXBsZXRpb24pLlxuICAgICAqL1xuICAgIHRvdGFsX3Rva2VuczogbnVtYmVyO1xuICB9XG59XG5cbi8qKlxuICogVGhlIHN0YXR1cyBvZiB0aGUgcnVuLCB3aGljaCBjYW4gYmUgZWl0aGVyIGBxdWV1ZWRgLCBgaW5fcHJvZ3Jlc3NgLFxuICogYHJlcXVpcmVzX2FjdGlvbmAsIGBjYW5jZWxsaW5nYCwgYGNhbmNlbGxlZGAsIGBmYWlsZWRgLCBgY29tcGxldGVkYCxcbiAqIGBpbmNvbXBsZXRlYCwgb3IgYGV4cGlyZWRgLlxuICovXG5leHBvcnQgdHlwZSBSdW5TdGF0dXMgPVxuICB8ICdxdWV1ZWQnXG4gIHwgJ2luX3Byb2dyZXNzJ1xuICB8ICdyZXF1aXJlc19hY3Rpb24nXG4gIHwgJ2NhbmNlbGxpbmcnXG4gIHwgJ2NhbmNlbGxlZCdcbiAgfCAnZmFpbGVkJ1xuICB8ICdjb21wbGV0ZWQnXG4gIHwgJ2luY29tcGxldGUnXG4gIHwgJ2V4cGlyZWQnO1xuXG5leHBvcnQgdHlwZSBSdW5DcmVhdGVQYXJhbXMgPSBSdW5DcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcgfCBSdW5DcmVhdGVQYXJhbXNTdHJlYW1pbmc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUnVuQ3JlYXRlUGFyYW1zQmFzZSB7XG4gIC8qKlxuICAgKiBCb2R5IHBhcmFtOiBUaGUgSUQgb2YgdGhlXG4gICAqIFthc3Npc3RhbnRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvYXNzaXN0YW50cykgdG8gdXNlIHRvXG4gICAqIGV4ZWN1dGUgdGhpcyBydW4uXG4gICAqL1xuICBhc3Npc3RhbnRfaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogUXVlcnkgcGFyYW06IEEgbGlzdCBvZiBhZGRpdGlvbmFsIGZpZWxkcyB0byBpbmNsdWRlIGluIHRoZSByZXNwb25zZS4gQ3VycmVudGx5XG4gICAqIHRoZSBvbmx5IHN1cHBvcnRlZCB2YWx1ZSBpc1xuICAgKiBgc3RlcF9kZXRhaWxzLnRvb2xfY2FsbHNbKl0uZmlsZV9zZWFyY2gucmVzdWx0c1sqXS5jb250ZW50YCB0byBmZXRjaCB0aGUgZmlsZVxuICAgKiBzZWFyY2ggcmVzdWx0IGNvbnRlbnQuXG4gICAqXG4gICAqIFNlZSB0aGVcbiAgICogW2ZpbGUgc2VhcmNoIHRvb2wgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXNzaXN0YW50cy90b29scy9maWxlLXNlYXJjaCNjdXN0b21pemluZy1maWxlLXNlYXJjaC1zZXR0aW5ncylcbiAgICogZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqL1xuICBpbmNsdWRlPzogQXJyYXk8U3RlcHNBUEkuUnVuU3RlcEluY2x1ZGU+O1xuXG4gIC8qKlxuICAgKiBCb2R5IHBhcmFtOiBBcHBlbmRzIGFkZGl0aW9uYWwgaW5zdHJ1Y3Rpb25zIGF0IHRoZSBlbmQgb2YgdGhlIGluc3RydWN0aW9ucyBmb3JcbiAgICogdGhlIHJ1bi4gVGhpcyBpcyB1c2VmdWwgZm9yIG1vZGlmeWluZyB0aGUgYmVoYXZpb3Igb24gYSBwZXItcnVuIGJhc2lzIHdpdGhvdXRcbiAgICogb3ZlcnJpZGluZyBvdGhlciBpbnN0cnVjdGlvbnMuXG4gICAqL1xuICBhZGRpdGlvbmFsX2luc3RydWN0aW9ucz86IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEJvZHkgcGFyYW06IEFkZHMgYWRkaXRpb25hbCBtZXNzYWdlcyB0byB0aGUgdGhyZWFkIGJlZm9yZSBjcmVhdGluZyB0aGUgcnVuLlxuICAgKi9cbiAgYWRkaXRpb25hbF9tZXNzYWdlcz86IEFycmF5PFJ1bkNyZWF0ZVBhcmFtcy5BZGRpdGlvbmFsTWVzc2FnZT4gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBCb2R5IHBhcmFtOiBPdmVycmlkZXMgdGhlXG4gICAqIFtpbnN0cnVjdGlvbnNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvYXNzaXN0YW50cy9jcmVhdGVBc3Npc3RhbnQpXG4gICAqIG9mIHRoZSBhc3Npc3RhbnQuIFRoaXMgaXMgdXNlZnVsIGZvciBtb2RpZnlpbmcgdGhlIGJlaGF2aW9yIG9uIGEgcGVyLXJ1biBiYXNpcy5cbiAgICovXG4gIGluc3RydWN0aW9ucz86IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEJvZHkgcGFyYW06IFRoZSBtYXhpbXVtIG51bWJlciBvZiBjb21wbGV0aW9uIHRva2VucyB0aGF0IG1heSBiZSB1c2VkIG92ZXIgdGhlXG4gICAqIGNvdXJzZSBvZiB0aGUgcnVuLiBUaGUgcnVuIHdpbGwgbWFrZSBhIGJlc3QgZWZmb3J0IHRvIHVzZSBvbmx5IHRoZSBudW1iZXIgb2ZcbiAgICogY29tcGxldGlvbiB0b2tlbnMgc3BlY2lmaWVkLCBhY3Jvc3MgbXVsdGlwbGUgdHVybnMgb2YgdGhlIHJ1bi4gSWYgdGhlIHJ1blxuICAgKiBleGNlZWRzIHRoZSBudW1iZXIgb2YgY29tcGxldGlvbiB0b2tlbnMgc3BlY2lmaWVkLCB0aGUgcnVuIHdpbGwgZW5kIHdpdGggc3RhdHVzXG4gICAqIGBpbmNvbXBsZXRlYC4gU2VlIGBpbmNvbXBsZXRlX2RldGFpbHNgIGZvciBtb3JlIGluZm8uXG4gICAqL1xuICBtYXhfY29tcGxldGlvbl90b2tlbnM/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBCb2R5IHBhcmFtOiBUaGUgbWF4aW11bSBudW1iZXIgb2YgcHJvbXB0IHRva2VucyB0aGF0IG1heSBiZSB1c2VkIG92ZXIgdGhlIGNvdXJzZVxuICAgKiBvZiB0aGUgcnVuLiBUaGUgcnVuIHdpbGwgbWFrZSBhIGJlc3QgZWZmb3J0IHRvIHVzZSBvbmx5IHRoZSBudW1iZXIgb2YgcHJvbXB0XG4gICAqIHRva2VucyBzcGVjaWZpZWQsIGFjcm9zcyBtdWx0aXBsZSB0dXJucyBvZiB0aGUgcnVuLiBJZiB0aGUgcnVuIGV4Y2VlZHMgdGhlXG4gICAqIG51bWJlciBvZiBwcm9tcHQgdG9rZW5zIHNwZWNpZmllZCwgdGhlIHJ1biB3aWxsIGVuZCB3aXRoIHN0YXR1cyBgaW5jb21wbGV0ZWAuXG4gICAqIFNlZSBgaW5jb21wbGV0ZV9kZXRhaWxzYCBmb3IgbW9yZSBpbmZvLlxuICAgKi9cbiAgbWF4X3Byb21wdF90b2tlbnM/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBCb2R5IHBhcmFtOiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpc1xuICAgKiBjYW4gYmUgdXNlZnVsIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhXG4gICAqIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmQgcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgKlxuICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbWV0YWRhdGE/OiBTaGFyZWQuTWV0YWRhdGEgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBCb2R5IHBhcmFtOiBUaGUgSUQgb2YgdGhlXG4gICAqIFtNb2RlbF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9tb2RlbHMpIHRvIGJlIHVzZWQgdG9cbiAgICogZXhlY3V0ZSB0aGlzIHJ1bi4gSWYgYSB2YWx1ZSBpcyBwcm92aWRlZCBoZXJlLCBpdCB3aWxsIG92ZXJyaWRlIHRoZSBtb2RlbFxuICAgKiBhc3NvY2lhdGVkIHdpdGggdGhlIGFzc2lzdGFudC4gSWYgbm90LCB0aGUgbW9kZWwgYXNzb2NpYXRlZCB3aXRoIHRoZSBhc3Npc3RhbnRcbiAgICogd2lsbCBiZSB1c2VkLlxuICAgKi9cbiAgbW9kZWw/OiAoc3RyaW5nICYge30pIHwgU2hhcmVkLkNoYXRNb2RlbCB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEJvZHkgcGFyYW06IFdoZXRoZXIgdG8gZW5hYmxlXG4gICAqIFtwYXJhbGxlbCBmdW5jdGlvbiBjYWxsaW5nXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvZnVuY3Rpb24tY2FsbGluZyNjb25maWd1cmluZy1wYXJhbGxlbC1mdW5jdGlvbi1jYWxsaW5nKVxuICAgKiBkdXJpbmcgdG9vbCB1c2UuXG4gICAqL1xuICBwYXJhbGxlbF90b29sX2NhbGxzPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogQm9keSBwYXJhbTogKipvLXNlcmllcyBtb2RlbHMgb25seSoqXG4gICAqXG4gICAqIENvbnN0cmFpbnMgZWZmb3J0IG9uIHJlYXNvbmluZyBmb3JcbiAgICogW3JlYXNvbmluZyBtb2RlbHNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9yZWFzb25pbmcpLiBDdXJyZW50bHlcbiAgICogc3VwcG9ydGVkIHZhbHVlcyBhcmUgYGxvd2AsIGBtZWRpdW1gLCBhbmQgYGhpZ2hgLiBSZWR1Y2luZyByZWFzb25pbmcgZWZmb3J0IGNhblxuICAgKiByZXN1bHQgaW4gZmFzdGVyIHJlc3BvbnNlcyBhbmQgZmV3ZXIgdG9rZW5zIHVzZWQgb24gcmVhc29uaW5nIGluIGEgcmVzcG9uc2UuXG4gICAqL1xuICByZWFzb25pbmdfZWZmb3J0PzogU2hhcmVkLlJlYXNvbmluZ0VmZm9ydCB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEJvZHkgcGFyYW06IFNwZWNpZmllcyB0aGUgZm9ybWF0IHRoYXQgdGhlIG1vZGVsIG11c3Qgb3V0cHV0LiBDb21wYXRpYmxlIHdpdGhcbiAgICogW0dQVC00b10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvbW9kZWxzI2dwdC00byksXG4gICAqIFtHUFQtNCBUdXJib10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvbW9kZWxzI2dwdC00LXR1cmJvLWFuZC1ncHQtNCksXG4gICAqIGFuZCBhbGwgR1BULTMuNSBUdXJibyBtb2RlbHMgc2luY2UgYGdwdC0zLjUtdHVyYm8tMTEwNmAuXG4gICAqXG4gICAqIFNldHRpbmcgdG8gYHsgXCJ0eXBlXCI6IFwianNvbl9zY2hlbWFcIiwgXCJqc29uX3NjaGVtYVwiOiB7Li4ufSB9YCBlbmFibGVzIFN0cnVjdHVyZWRcbiAgICogT3V0cHV0cyB3aGljaCBlbnN1cmVzIHRoZSBtb2RlbCB3aWxsIG1hdGNoIHlvdXIgc3VwcGxpZWQgSlNPTiBzY2hlbWEuIExlYXJuIG1vcmVcbiAgICogaW4gdGhlXG4gICAqIFtTdHJ1Y3R1cmVkIE91dHB1dHMgZ3VpZGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9zdHJ1Y3R1cmVkLW91dHB1dHMpLlxuICAgKlxuICAgKiBTZXR0aW5nIHRvIGB7IFwidHlwZVwiOiBcImpzb25fb2JqZWN0XCIgfWAgZW5hYmxlcyBKU09OIG1vZGUsIHdoaWNoIGVuc3VyZXMgdGhlXG4gICAqIG1lc3NhZ2UgdGhlIG1vZGVsIGdlbmVyYXRlcyBpcyB2YWxpZCBKU09OLlxuICAgKlxuICAgKiAqKkltcG9ydGFudDoqKiB3aGVuIHVzaW5nIEpTT04gbW9kZSwgeW91ICoqbXVzdCoqIGFsc28gaW5zdHJ1Y3QgdGhlIG1vZGVsIHRvXG4gICAqIHByb2R1Y2UgSlNPTiB5b3Vyc2VsZiB2aWEgYSBzeXN0ZW0gb3IgdXNlciBtZXNzYWdlLiBXaXRob3V0IHRoaXMsIHRoZSBtb2RlbCBtYXlcbiAgICogZ2VuZXJhdGUgYW4gdW5lbmRpbmcgc3RyZWFtIG9mIHdoaXRlc3BhY2UgdW50aWwgdGhlIGdlbmVyYXRpb24gcmVhY2hlcyB0aGUgdG9rZW5cbiAgICogbGltaXQsIHJlc3VsdGluZyBpbiBhIGxvbmctcnVubmluZyBhbmQgc2VlbWluZ2x5IFwic3R1Y2tcIiByZXF1ZXN0LiBBbHNvIG5vdGUgdGhhdFxuICAgKiB0aGUgbWVzc2FnZSBjb250ZW50IG1heSBiZSBwYXJ0aWFsbHkgY3V0IG9mZiBpZiBgZmluaXNoX3JlYXNvbj1cImxlbmd0aFwiYCwgd2hpY2hcbiAgICogaW5kaWNhdGVzIHRoZSBnZW5lcmF0aW9uIGV4Y2VlZGVkIGBtYXhfdG9rZW5zYCBvciB0aGUgY29udmVyc2F0aW9uIGV4Y2VlZGVkIHRoZVxuICAgKiBtYXggY29udGV4dCBsZW5ndGguXG4gICAqL1xuICByZXNwb25zZV9mb3JtYXQ/OiBUaHJlYWRzQVBJLkFzc2lzdGFudFJlc3BvbnNlRm9ybWF0T3B0aW9uIHwgbnVsbDtcblxuICAvKipcbiAgICogQm9keSBwYXJhbTogSWYgYHRydWVgLCByZXR1cm5zIGEgc3RyZWFtIG9mIGV2ZW50cyB0aGF0IGhhcHBlbiBkdXJpbmcgdGhlIFJ1biBhc1xuICAgKiBzZXJ2ZXItc2VudCBldmVudHMsIHRlcm1pbmF0aW5nIHdoZW4gdGhlIFJ1biBlbnRlcnMgYSB0ZXJtaW5hbCBzdGF0ZSB3aXRoIGFcbiAgICogYGRhdGE6IFtET05FXWAgbWVzc2FnZS5cbiAgICovXG4gIHN0cmVhbT86IGJvb2xlYW4gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBCb2R5IHBhcmFtOiBXaGF0IHNhbXBsaW5nIHRlbXBlcmF0dXJlIHRvIHVzZSwgYmV0d2VlbiAwIGFuZCAyLiBIaWdoZXIgdmFsdWVzXG4gICAqIGxpa2UgMC44IHdpbGwgbWFrZSB0aGUgb3V0cHV0IG1vcmUgcmFuZG9tLCB3aGlsZSBsb3dlciB2YWx1ZXMgbGlrZSAwLjIgd2lsbCBtYWtlXG4gICAqIGl0IG1vcmUgZm9jdXNlZCBhbmQgZGV0ZXJtaW5pc3RpYy5cbiAgICovXG4gIHRlbXBlcmF0dXJlPzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogQm9keSBwYXJhbTogQ29udHJvbHMgd2hpY2ggKGlmIGFueSkgdG9vbCBpcyBjYWxsZWQgYnkgdGhlIG1vZGVsLiBgbm9uZWAgbWVhbnNcbiAgICogdGhlIG1vZGVsIHdpbGwgbm90IGNhbGwgYW55IHRvb2xzIGFuZCBpbnN0ZWFkIGdlbmVyYXRlcyBhIG1lc3NhZ2UuIGBhdXRvYCBpcyB0aGVcbiAgICogZGVmYXVsdCB2YWx1ZSBhbmQgbWVhbnMgdGhlIG1vZGVsIGNhbiBwaWNrIGJldHdlZW4gZ2VuZXJhdGluZyBhIG1lc3NhZ2Ugb3JcbiAgICogY2FsbGluZyBvbmUgb3IgbW9yZSB0b29scy4gYHJlcXVpcmVkYCBtZWFucyB0aGUgbW9kZWwgbXVzdCBjYWxsIG9uZSBvciBtb3JlXG4gICAqIHRvb2xzIGJlZm9yZSByZXNwb25kaW5nIHRvIHRoZSB1c2VyLiBTcGVjaWZ5aW5nIGEgcGFydGljdWxhciB0b29sIGxpa2VcbiAgICogYHtcInR5cGVcIjogXCJmaWxlX3NlYXJjaFwifWAgb3JcbiAgICogYHtcInR5cGVcIjogXCJmdW5jdGlvblwiLCBcImZ1bmN0aW9uXCI6IHtcIm5hbWVcIjogXCJteV9mdW5jdGlvblwifX1gIGZvcmNlcyB0aGUgbW9kZWwgdG9cbiAgICogY2FsbCB0aGF0IHRvb2wuXG4gICAqL1xuICB0b29sX2Nob2ljZT86IFRocmVhZHNBUEkuQXNzaXN0YW50VG9vbENob2ljZU9wdGlvbiB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEJvZHkgcGFyYW06IE92ZXJyaWRlIHRoZSB0b29scyB0aGUgYXNzaXN0YW50IGNhbiB1c2UgZm9yIHRoaXMgcnVuLiBUaGlzIGlzXG4gICAqIHVzZWZ1bCBmb3IgbW9kaWZ5aW5nIHRoZSBiZWhhdmlvciBvbiBhIHBlci1ydW4gYmFzaXMuXG4gICAqL1xuICB0b29scz86IEFycmF5PEFzc2lzdGFudHNBUEkuQXNzaXN0YW50VG9vbD4gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBCb2R5IHBhcmFtOiBBbiBhbHRlcm5hdGl2ZSB0byBzYW1wbGluZyB3aXRoIHRlbXBlcmF0dXJlLCBjYWxsZWQgbnVjbGV1c1xuICAgKiBzYW1wbGluZywgd2hlcmUgdGhlIG1vZGVsIGNvbnNpZGVycyB0aGUgcmVzdWx0cyBvZiB0aGUgdG9rZW5zIHdpdGggdG9wX3BcbiAgICogcHJvYmFiaWxpdHkgbWFzcy4gU28gMC4xIG1lYW5zIG9ubHkgdGhlIHRva2VucyBjb21wcmlzaW5nIHRoZSB0b3AgMTAlXG4gICAqIHByb2JhYmlsaXR5IG1hc3MgYXJlIGNvbnNpZGVyZWQuXG4gICAqXG4gICAqIFdlIGdlbmVyYWxseSByZWNvbW1lbmQgYWx0ZXJpbmcgdGhpcyBvciB0ZW1wZXJhdHVyZSBidXQgbm90IGJvdGguXG4gICAqL1xuICB0b3BfcD86IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEJvZHkgcGFyYW06IENvbnRyb2xzIGZvciBob3cgYSB0aHJlYWQgd2lsbCBiZSB0cnVuY2F0ZWQgcHJpb3IgdG8gdGhlIHJ1bi4gVXNlXG4gICAqIHRoaXMgdG8gY29udHJvbCB0aGUgaW50aWFsIGNvbnRleHQgd2luZG93IG9mIHRoZSBydW4uXG4gICAqL1xuICB0cnVuY2F0aW9uX3N0cmF0ZWd5PzogUnVuQ3JlYXRlUGFyYW1zLlRydW5jYXRpb25TdHJhdGVneSB8IG51bGw7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgUnVuQ3JlYXRlUGFyYW1zIHtcbiAgZXhwb3J0IGludGVyZmFjZSBBZGRpdGlvbmFsTWVzc2FnZSB7XG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgY29udGVudHMgb2YgdGhlIG1lc3NhZ2UuXG4gICAgICovXG4gICAgY29udGVudDogc3RyaW5nIHwgQXJyYXk8TWVzc2FnZXNBUEkuTWVzc2FnZUNvbnRlbnRQYXJ0UGFyYW0+O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJvbGUgb2YgdGhlIGVudGl0eSB0aGF0IGlzIGNyZWF0aW5nIHRoZSBtZXNzYWdlLiBBbGxvd2VkIHZhbHVlcyBpbmNsdWRlOlxuICAgICAqXG4gICAgICogLSBgdXNlcmA6IEluZGljYXRlcyB0aGUgbWVzc2FnZSBpcyBzZW50IGJ5IGFuIGFjdHVhbCB1c2VyIGFuZCBzaG91bGQgYmUgdXNlZCBpblxuICAgICAqICAgbW9zdCBjYXNlcyB0byByZXByZXNlbnQgdXNlci1nZW5lcmF0ZWQgbWVzc2FnZXMuXG4gICAgICogLSBgYXNzaXN0YW50YDogSW5kaWNhdGVzIHRoZSBtZXNzYWdlIGlzIGdlbmVyYXRlZCBieSB0aGUgYXNzaXN0YW50LiBVc2UgdGhpc1xuICAgICAqICAgdmFsdWUgdG8gaW5zZXJ0IG1lc3NhZ2VzIGZyb20gdGhlIGFzc2lzdGFudCBpbnRvIHRoZSBjb252ZXJzYXRpb24uXG4gICAgICovXG4gICAgcm9sZTogJ3VzZXInIHwgJ2Fzc2lzdGFudCc7XG5cbiAgICAvKipcbiAgICAgKiBBIGxpc3Qgb2YgZmlsZXMgYXR0YWNoZWQgdG8gdGhlIG1lc3NhZ2UsIGFuZCB0aGUgdG9vbHMgdGhleSBzaG91bGQgYmUgYWRkZWQgdG8uXG4gICAgICovXG4gICAgYXR0YWNobWVudHM/OiBBcnJheTxBZGRpdGlvbmFsTWVzc2FnZS5BdHRhY2htZW50PiB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAgICogZm9yIHN0b3JpbmcgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb2JqZWN0IGluIGEgc3RydWN0dXJlZCBmb3JtYXQsIGFuZFxuICAgICAqIHF1ZXJ5aW5nIGZvciBvYmplY3RzIHZpYSBBUEkgb3IgdGhlIGRhc2hib2FyZC5cbiAgICAgKlxuICAgICAqIEtleXMgYXJlIHN0cmluZ3Mgd2l0aCBhIG1heGltdW0gbGVuZ3RoIG9mIDY0IGNoYXJhY3RlcnMuIFZhbHVlcyBhcmUgc3RyaW5ncyB3aXRoXG4gICAgICogYSBtYXhpbXVtIGxlbmd0aCBvZiA1MTIgY2hhcmFjdGVycy5cbiAgICAgKi9cbiAgICBtZXRhZGF0YT86IFNoYXJlZC5NZXRhZGF0YSB8IG51bGw7XG4gIH1cblxuICBleHBvcnQgbmFtZXNwYWNlIEFkZGl0aW9uYWxNZXNzYWdlIHtcbiAgICBleHBvcnQgaW50ZXJmYWNlIEF0dGFjaG1lbnQge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgSUQgb2YgdGhlIGZpbGUgdG8gYXR0YWNoIHRvIHRoZSBtZXNzYWdlLlxuICAgICAgICovXG4gICAgICBmaWxlX2lkPzogc3RyaW5nO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSB0b29scyB0byBhZGQgdGhpcyBmaWxlIHRvLlxuICAgICAgICovXG4gICAgICB0b29scz86IEFycmF5PEFzc2lzdGFudHNBUEkuQ29kZUludGVycHJldGVyVG9vbCB8IEF0dGFjaG1lbnQuRmlsZVNlYXJjaD47XG4gICAgfVxuXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBBdHRhY2htZW50IHtcbiAgICAgIGV4cG9ydCBpbnRlcmZhY2UgRmlsZVNlYXJjaCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdHlwZSBvZiB0b29sIGJlaW5nIGRlZmluZWQ6IGBmaWxlX3NlYXJjaGBcbiAgICAgICAgICovXG4gICAgICAgIHR5cGU6ICdmaWxlX3NlYXJjaCc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIGZvciBob3cgYSB0aHJlYWQgd2lsbCBiZSB0cnVuY2F0ZWQgcHJpb3IgdG8gdGhlIHJ1bi4gVXNlIHRoaXMgdG9cbiAgICogY29udHJvbCB0aGUgaW50aWFsIGNvbnRleHQgd2luZG93IG9mIHRoZSBydW4uXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRydW5jYXRpb25TdHJhdGVneSB7XG4gICAgLyoqXG4gICAgICogVGhlIHRydW5jYXRpb24gc3RyYXRlZ3kgdG8gdXNlIGZvciB0aGUgdGhyZWFkLiBUaGUgZGVmYXVsdCBpcyBgYXV0b2AuIElmIHNldCB0b1xuICAgICAqIGBsYXN0X21lc3NhZ2VzYCwgdGhlIHRocmVhZCB3aWxsIGJlIHRydW5jYXRlZCB0byB0aGUgbiBtb3N0IHJlY2VudCBtZXNzYWdlcyBpblxuICAgICAqIHRoZSB0aHJlYWQuIFdoZW4gc2V0IHRvIGBhdXRvYCwgbWVzc2FnZXMgaW4gdGhlIG1pZGRsZSBvZiB0aGUgdGhyZWFkIHdpbGwgYmVcbiAgICAgKiBkcm9wcGVkIHRvIGZpdCB0aGUgY29udGV4dCBsZW5ndGggb2YgdGhlIG1vZGVsLCBgbWF4X3Byb21wdF90b2tlbnNgLlxuICAgICAqL1xuICAgIHR5cGU6ICdhdXRvJyB8ICdsYXN0X21lc3NhZ2VzJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgbW9zdCByZWNlbnQgbWVzc2FnZXMgZnJvbSB0aGUgdGhyZWFkIHdoZW4gY29uc3RydWN0aW5nIHRoZSBjb250ZXh0XG4gICAgICogZm9yIHRoZSBydW4uXG4gICAgICovXG4gICAgbGFzdF9tZXNzYWdlcz86IG51bWJlciB8IG51bGw7XG4gIH1cblxuICBleHBvcnQgdHlwZSBSdW5DcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcgPSBSdW5zQVBJLlJ1bkNyZWF0ZVBhcmFtc05vblN0cmVhbWluZztcbiAgZXhwb3J0IHR5cGUgUnVuQ3JlYXRlUGFyYW1zU3RyZWFtaW5nID0gUnVuc0FQSS5SdW5DcmVhdGVQYXJhbXNTdHJlYW1pbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUnVuQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nIGV4dGVuZHMgUnVuQ3JlYXRlUGFyYW1zQmFzZSB7XG4gIC8qKlxuICAgKiBCb2R5IHBhcmFtOiBJZiBgdHJ1ZWAsIHJldHVybnMgYSBzdHJlYW0gb2YgZXZlbnRzIHRoYXQgaGFwcGVuIGR1cmluZyB0aGUgUnVuIGFzXG4gICAqIHNlcnZlci1zZW50IGV2ZW50cywgdGVybWluYXRpbmcgd2hlbiB0aGUgUnVuIGVudGVycyBhIHRlcm1pbmFsIHN0YXRlIHdpdGggYVxuICAgKiBgZGF0YTogW0RPTkVdYCBtZXNzYWdlLlxuICAgKi9cbiAgc3RyZWFtPzogZmFsc2UgfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJ1bkNyZWF0ZVBhcmFtc1N0cmVhbWluZyBleHRlbmRzIFJ1bkNyZWF0ZVBhcmFtc0Jhc2Uge1xuICAvKipcbiAgICogQm9keSBwYXJhbTogSWYgYHRydWVgLCByZXR1cm5zIGEgc3RyZWFtIG9mIGV2ZW50cyB0aGF0IGhhcHBlbiBkdXJpbmcgdGhlIFJ1biBhc1xuICAgKiBzZXJ2ZXItc2VudCBldmVudHMsIHRlcm1pbmF0aW5nIHdoZW4gdGhlIFJ1biBlbnRlcnMgYSB0ZXJtaW5hbCBzdGF0ZSB3aXRoIGFcbiAgICogYGRhdGE6IFtET05FXWAgbWVzc2FnZS5cbiAgICovXG4gIHN0cmVhbTogdHJ1ZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSdW5VcGRhdGVQYXJhbXMge1xuICAvKipcbiAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdCwgYW5kXG4gICAqIHF1ZXJ5aW5nIGZvciBvYmplY3RzIHZpYSBBUEkgb3IgdGhlIGRhc2hib2FyZC5cbiAgICpcbiAgICogS2V5cyBhcmUgc3RyaW5ncyB3aXRoIGEgbWF4aW11bSBsZW5ndGggb2YgNjQgY2hhcmFjdGVycy4gVmFsdWVzIGFyZSBzdHJpbmdzIHdpdGhcbiAgICogYSBtYXhpbXVtIGxlbmd0aCBvZiA1MTIgY2hhcmFjdGVycy5cbiAgICovXG4gIG1ldGFkYXRhPzogU2hhcmVkLk1ldGFkYXRhIHwgbnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSdW5MaXN0UGFyYW1zIGV4dGVuZHMgQ3Vyc29yUGFnZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBBIGN1cnNvciBmb3IgdXNlIGluIHBhZ2luYXRpb24uIGBiZWZvcmVgIGlzIGFuIG9iamVjdCBJRCB0aGF0IGRlZmluZXMgeW91ciBwbGFjZVxuICAgKiBpbiB0aGUgbGlzdC4gRm9yIGluc3RhbmNlLCBpZiB5b3UgbWFrZSBhIGxpc3QgcmVxdWVzdCBhbmQgcmVjZWl2ZSAxMDAgb2JqZWN0cyxcbiAgICogc3RhcnRpbmcgd2l0aCBvYmpfZm9vLCB5b3VyIHN1YnNlcXVlbnQgY2FsbCBjYW4gaW5jbHVkZSBiZWZvcmU9b2JqX2ZvbyBpbiBvcmRlclxuICAgKiB0byBmZXRjaCB0aGUgcHJldmlvdXMgcGFnZSBvZiB0aGUgbGlzdC5cbiAgICovXG4gIGJlZm9yZT86IHN0cmluZztcblxuICAvKipcbiAgICogU29ydCBvcmRlciBieSB0aGUgYGNyZWF0ZWRfYXRgIHRpbWVzdGFtcCBvZiB0aGUgb2JqZWN0cy4gYGFzY2AgZm9yIGFzY2VuZGluZ1xuICAgKiBvcmRlciBhbmQgYGRlc2NgIGZvciBkZXNjZW5kaW5nIG9yZGVyLlxuICAgKi9cbiAgb3JkZXI/OiAnYXNjJyB8ICdkZXNjJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSdW5DcmVhdGVBbmRQb2xsUGFyYW1zIHtcbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGVcbiAgICogW2Fzc2lzdGFudF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9hc3Npc3RhbnRzKSB0byB1c2UgdG9cbiAgICogZXhlY3V0ZSB0aGlzIHJ1bi5cbiAgICovXG4gIGFzc2lzdGFudF9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBcHBlbmRzIGFkZGl0aW9uYWwgaW5zdHJ1Y3Rpb25zIGF0IHRoZSBlbmQgb2YgdGhlIGluc3RydWN0aW9ucyBmb3IgdGhlIHJ1bi4gVGhpc1xuICAgKiBpcyB1c2VmdWwgZm9yIG1vZGlmeWluZyB0aGUgYmVoYXZpb3Igb24gYSBwZXItcnVuIGJhc2lzIHdpdGhvdXQgb3ZlcnJpZGluZyBvdGhlclxuICAgKiBpbnN0cnVjdGlvbnMuXG4gICAqL1xuICBhZGRpdGlvbmFsX2luc3RydWN0aW9ucz86IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEFkZHMgYWRkaXRpb25hbCBtZXNzYWdlcyB0byB0aGUgdGhyZWFkIGJlZm9yZSBjcmVhdGluZyB0aGUgcnVuLlxuICAgKi9cbiAgYWRkaXRpb25hbF9tZXNzYWdlcz86IEFycmF5PFJ1bkNyZWF0ZUFuZFBvbGxQYXJhbXMuQWRkaXRpb25hbE1lc3NhZ2U+IHwgbnVsbDtcblxuICAvKipcbiAgICogT3ZlcnJpZGVzIHRoZVxuICAgKiBbaW5zdHJ1Y3Rpb25zXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2Fzc2lzdGFudHMvY3JlYXRlQXNzaXN0YW50KVxuICAgKiBvZiB0aGUgYXNzaXN0YW50LiBUaGlzIGlzIHVzZWZ1bCBmb3IgbW9kaWZ5aW5nIHRoZSBiZWhhdmlvciBvbiBhIHBlci1ydW4gYmFzaXMuXG4gICAqL1xuICBpbnN0cnVjdGlvbnM/OiBzdHJpbmcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgY29tcGxldGlvbiB0b2tlbnMgdGhhdCBtYXkgYmUgdXNlZCBvdmVyIHRoZSBjb3Vyc2Ugb2YgdGhlXG4gICAqIHJ1bi4gVGhlIHJ1biB3aWxsIG1ha2UgYSBiZXN0IGVmZm9ydCB0byB1c2Ugb25seSB0aGUgbnVtYmVyIG9mIGNvbXBsZXRpb24gdG9rZW5zXG4gICAqIHNwZWNpZmllZCwgYWNyb3NzIG11bHRpcGxlIHR1cm5zIG9mIHRoZSBydW4uIElmIHRoZSBydW4gZXhjZWVkcyB0aGUgbnVtYmVyIG9mXG4gICAqIGNvbXBsZXRpb24gdG9rZW5zIHNwZWNpZmllZCwgdGhlIHJ1biB3aWxsIGVuZCB3aXRoIHN0YXR1cyBgaW5jb21wbGV0ZWAuIFNlZVxuICAgKiBgaW5jb21wbGV0ZV9kZXRhaWxzYCBmb3IgbW9yZSBpbmZvLlxuICAgKi9cbiAgbWF4X2NvbXBsZXRpb25fdG9rZW5zPzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHByb21wdCB0b2tlbnMgdGhhdCBtYXkgYmUgdXNlZCBvdmVyIHRoZSBjb3Vyc2Ugb2YgdGhlIHJ1bi5cbiAgICogVGhlIHJ1biB3aWxsIG1ha2UgYSBiZXN0IGVmZm9ydCB0byB1c2Ugb25seSB0aGUgbnVtYmVyIG9mIHByb21wdCB0b2tlbnNcbiAgICogc3BlY2lmaWVkLCBhY3Jvc3MgbXVsdGlwbGUgdHVybnMgb2YgdGhlIHJ1bi4gSWYgdGhlIHJ1biBleGNlZWRzIHRoZSBudW1iZXIgb2ZcbiAgICogcHJvbXB0IHRva2VucyBzcGVjaWZpZWQsIHRoZSBydW4gd2lsbCBlbmQgd2l0aCBzdGF0dXMgYGluY29tcGxldGVgLiBTZWVcbiAgICogYGluY29tcGxldGVfZGV0YWlsc2AgZm9yIG1vcmUgaW5mby5cbiAgICovXG4gIG1heF9wcm9tcHRfdG9rZW5zPzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdC4gS2V5c1xuICAgKiBjYW4gYmUgYSBtYXhpbXVtIG9mIDY0IGNoYXJhY3RlcnMgbG9uZyBhbmQgdmFsdWVzIGNhbiBiZSBhIG1heGl1bSBvZiA1MTJcbiAgICogY2hhcmFjdGVycyBsb25nLlxuICAgKi9cbiAgbWV0YWRhdGE/OiB1bmtub3duIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBbTW9kZWxdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvbW9kZWxzKSB0b1xuICAgKiBiZSB1c2VkIHRvIGV4ZWN1dGUgdGhpcyBydW4uIElmIGEgdmFsdWUgaXMgcHJvdmlkZWQgaGVyZSwgaXQgd2lsbCBvdmVycmlkZSB0aGVcbiAgICogbW9kZWwgYXNzb2NpYXRlZCB3aXRoIHRoZSBhc3Npc3RhbnQuIElmIG5vdCwgdGhlIG1vZGVsIGFzc29jaWF0ZWQgd2l0aCB0aGVcbiAgICogYXNzaXN0YW50IHdpbGwgYmUgdXNlZC5cbiAgICovXG4gIG1vZGVsPzpcbiAgICB8IChzdHJpbmcgJiB7fSlcbiAgICB8ICdncHQtNG8nXG4gICAgfCAnZ3B0LTRvLTIwMjQtMDUtMTMnXG4gICAgfCAnZ3B0LTQtdHVyYm8nXG4gICAgfCAnZ3B0LTQtdHVyYm8tMjAyNC0wNC0wOSdcbiAgICB8ICdncHQtNC0wMTI1LXByZXZpZXcnXG4gICAgfCAnZ3B0LTQtdHVyYm8tcHJldmlldydcbiAgICB8ICdncHQtNC0xMTA2LXByZXZpZXcnXG4gICAgfCAnZ3B0LTQtdmlzaW9uLXByZXZpZXcnXG4gICAgfCAnZ3B0LTQnXG4gICAgfCAnZ3B0LTQtMDMxNCdcbiAgICB8ICdncHQtNC0wNjEzJ1xuICAgIHwgJ2dwdC00LTMyaydcbiAgICB8ICdncHQtNC0zMmstMDMxNCdcbiAgICB8ICdncHQtNC0zMmstMDYxMydcbiAgICB8ICdncHQtMy41LXR1cmJvJ1xuICAgIHwgJ2dwdC0zLjUtdHVyYm8tMTZrJ1xuICAgIHwgJ2dwdC0zLjUtdHVyYm8tMDYxMydcbiAgICB8ICdncHQtMy41LXR1cmJvLTExMDYnXG4gICAgfCAnZ3B0LTMuNS10dXJiby0wMTI1J1xuICAgIHwgJ2dwdC0zLjUtdHVyYm8tMTZrLTA2MTMnXG4gICAgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGZvcm1hdCB0aGF0IHRoZSBtb2RlbCBtdXN0IG91dHB1dC4gQ29tcGF0aWJsZSB3aXRoXG4gICAqIFtHUFQtNG9dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL21vZGVscy9ncHQtNG8pLFxuICAgKiBbR1BULTQgVHVyYm9dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL21vZGVscy9ncHQtNC10dXJiby1hbmQtZ3B0LTQpLFxuICAgKiBhbmQgYWxsIEdQVC0zLjUgVHVyYm8gbW9kZWxzIHNpbmNlIGBncHQtMy41LXR1cmJvLTExMDZgLlxuICAgKlxuICAgKiBTZXR0aW5nIHRvIGB7IFwidHlwZVwiOiBcImpzb25fb2JqZWN0XCIgfWAgZW5hYmxlcyBKU09OIG1vZGUsIHdoaWNoIGd1YXJhbnRlZXMgdGhlXG4gICAqIG1lc3NhZ2UgdGhlIG1vZGVsIGdlbmVyYXRlcyBpcyB2YWxpZCBKU09OLlxuICAgKlxuICAgKiAqKkltcG9ydGFudDoqKiB3aGVuIHVzaW5nIEpTT04gbW9kZSwgeW91ICoqbXVzdCoqIGFsc28gaW5zdHJ1Y3QgdGhlIG1vZGVsIHRvXG4gICAqIHByb2R1Y2UgSlNPTiB5b3Vyc2VsZiB2aWEgYSBzeXN0ZW0gb3IgdXNlciBtZXNzYWdlLiBXaXRob3V0IHRoaXMsIHRoZSBtb2RlbCBtYXlcbiAgICogZ2VuZXJhdGUgYW4gdW5lbmRpbmcgc3RyZWFtIG9mIHdoaXRlc3BhY2UgdW50aWwgdGhlIGdlbmVyYXRpb24gcmVhY2hlcyB0aGUgdG9rZW5cbiAgICogbGltaXQsIHJlc3VsdGluZyBpbiBhIGxvbmctcnVubmluZyBhbmQgc2VlbWluZ2x5IFwic3R1Y2tcIiByZXF1ZXN0LiBBbHNvIG5vdGUgdGhhdFxuICAgKiB0aGUgbWVzc2FnZSBjb250ZW50IG1heSBiZSBwYXJ0aWFsbHkgY3V0IG9mZiBpZiBgZmluaXNoX3JlYXNvbj1cImxlbmd0aFwiYCwgd2hpY2hcbiAgICogaW5kaWNhdGVzIHRoZSBnZW5lcmF0aW9uIGV4Y2VlZGVkIGBtYXhfdG9rZW5zYCBvciB0aGUgY29udmVyc2F0aW9uIGV4Y2VlZGVkIHRoZVxuICAgKiBtYXggY29udGV4dCBsZW5ndGguXG4gICAqL1xuICByZXNwb25zZV9mb3JtYXQ/OiBUaHJlYWRzQVBJLkFzc2lzdGFudFJlc3BvbnNlRm9ybWF0T3B0aW9uIHwgbnVsbDtcblxuICAvKipcbiAgICogV2hhdCBzYW1wbGluZyB0ZW1wZXJhdHVyZSB0byB1c2UsIGJldHdlZW4gMCBhbmQgMi4gSGlnaGVyIHZhbHVlcyBsaWtlIDAuOCB3aWxsXG4gICAqIG1ha2UgdGhlIG91dHB1dCBtb3JlIHJhbmRvbSwgd2hpbGUgbG93ZXIgdmFsdWVzIGxpa2UgMC4yIHdpbGwgbWFrZSBpdCBtb3JlXG4gICAqIGZvY3VzZWQgYW5kIGRldGVybWluaXN0aWMuXG4gICAqL1xuICB0ZW1wZXJhdHVyZT86IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIHdoaWNoIChpZiBhbnkpIHRvb2wgaXMgY2FsbGVkIGJ5IHRoZSBtb2RlbC4gYG5vbmVgIG1lYW5zIHRoZSBtb2RlbCB3aWxsXG4gICAqIG5vdCBjYWxsIGFueSB0b29scyBhbmQgaW5zdGVhZCBnZW5lcmF0ZXMgYSBtZXNzYWdlLiBgYXV0b2AgaXMgdGhlIGRlZmF1bHQgdmFsdWVcbiAgICogYW5kIG1lYW5zIHRoZSBtb2RlbCBjYW4gcGljayBiZXR3ZWVuIGdlbmVyYXRpbmcgYSBtZXNzYWdlIG9yIGNhbGxpbmcgb25lIG9yIG1vcmVcbiAgICogdG9vbHMuIGByZXF1aXJlZGAgbWVhbnMgdGhlIG1vZGVsIG11c3QgY2FsbCBvbmUgb3IgbW9yZSB0b29scyBiZWZvcmUgcmVzcG9uZGluZ1xuICAgKiB0byB0aGUgdXNlci4gU3BlY2lmeWluZyBhIHBhcnRpY3VsYXIgdG9vbCBsaWtlIGB7XCJ0eXBlXCI6IFwiZmlsZV9zZWFyY2hcIn1gIG9yXG4gICAqIGB7XCJ0eXBlXCI6IFwiZnVuY3Rpb25cIiwgXCJmdW5jdGlvblwiOiB7XCJuYW1lXCI6IFwibXlfZnVuY3Rpb25cIn19YCBmb3JjZXMgdGhlIG1vZGVsIHRvXG4gICAqIGNhbGwgdGhhdCB0b29sLlxuICAgKi9cbiAgdG9vbF9jaG9pY2U/OiBUaHJlYWRzQVBJLkFzc2lzdGFudFRvb2xDaG9pY2VPcHRpb24gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgdG9vbHMgdGhlIGFzc2lzdGFudCBjYW4gdXNlIGZvciB0aGlzIHJ1bi4gVGhpcyBpcyB1c2VmdWwgZm9yXG4gICAqIG1vZGlmeWluZyB0aGUgYmVoYXZpb3Igb24gYSBwZXItcnVuIGJhc2lzLlxuICAgKi9cbiAgdG9vbHM/OiBBcnJheTxBc3Npc3RhbnRzQVBJLkFzc2lzdGFudFRvb2w+IHwgbnVsbDtcblxuICAvKipcbiAgICogQW4gYWx0ZXJuYXRpdmUgdG8gc2FtcGxpbmcgd2l0aCB0ZW1wZXJhdHVyZSwgY2FsbGVkIG51Y2xldXMgc2FtcGxpbmcsIHdoZXJlIHRoZVxuICAgKiBtb2RlbCBjb25zaWRlcnMgdGhlIHJlc3VsdHMgb2YgdGhlIHRva2VucyB3aXRoIHRvcF9wIHByb2JhYmlsaXR5IG1hc3MuIFNvIDAuMVxuICAgKiBtZWFucyBvbmx5IHRoZSB0b2tlbnMgY29tcHJpc2luZyB0aGUgdG9wIDEwJSBwcm9iYWJpbGl0eSBtYXNzIGFyZSBjb25zaWRlcmVkLlxuICAgKlxuICAgKiBXZSBnZW5lcmFsbHkgcmVjb21tZW5kIGFsdGVyaW5nIHRoaXMgb3IgdGVtcGVyYXR1cmUgYnV0IG5vdCBib3RoLlxuICAgKi9cbiAgdG9wX3A/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBDb250cm9scyBmb3IgaG93IGEgdGhyZWFkIHdpbGwgYmUgdHJ1bmNhdGVkIHByaW9yIHRvIHRoZSBydW4uIFVzZSB0aGlzIHRvXG4gICAqIGNvbnRyb2wgdGhlIGludGlhbCBjb250ZXh0IHdpbmRvdyBvZiB0aGUgcnVuLlxuICAgKi9cbiAgdHJ1bmNhdGlvbl9zdHJhdGVneT86IFJ1bkNyZWF0ZUFuZFBvbGxQYXJhbXMuVHJ1bmNhdGlvblN0cmF0ZWd5IHwgbnVsbDtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBSdW5DcmVhdGVBbmRQb2xsUGFyYW1zIHtcbiAgZXhwb3J0IGludGVyZmFjZSBBZGRpdGlvbmFsTWVzc2FnZSB7XG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgY29udGVudHMgb2YgdGhlIG1lc3NhZ2UuXG4gICAgICovXG4gICAgY29udGVudDogc3RyaW5nIHwgQXJyYXk8TWVzc2FnZXNBUEkuTWVzc2FnZUNvbnRlbnRQYXJ0UGFyYW0+O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJvbGUgb2YgdGhlIGVudGl0eSB0aGF0IGlzIGNyZWF0aW5nIHRoZSBtZXNzYWdlLiBBbGxvd2VkIHZhbHVlcyBpbmNsdWRlOlxuICAgICAqXG4gICAgICogLSBgdXNlcmA6IEluZGljYXRlcyB0aGUgbWVzc2FnZSBpcyBzZW50IGJ5IGFuIGFjdHVhbCB1c2VyIGFuZCBzaG91bGQgYmUgdXNlZCBpblxuICAgICAqICAgbW9zdCBjYXNlcyB0byByZXByZXNlbnQgdXNlci1nZW5lcmF0ZWQgbWVzc2FnZXMuXG4gICAgICogLSBgYXNzaXN0YW50YDogSW5kaWNhdGVzIHRoZSBtZXNzYWdlIGlzIGdlbmVyYXRlZCBieSB0aGUgYXNzaXN0YW50LiBVc2UgdGhpc1xuICAgICAqICAgdmFsdWUgdG8gaW5zZXJ0IG1lc3NhZ2VzIGZyb20gdGhlIGFzc2lzdGFudCBpbnRvIHRoZSBjb252ZXJzYXRpb24uXG4gICAgICovXG4gICAgcm9sZTogJ3VzZXInIHwgJ2Fzc2lzdGFudCc7XG5cbiAgICAvKipcbiAgICAgKiBBIGxpc3Qgb2YgZmlsZXMgYXR0YWNoZWQgdG8gdGhlIG1lc3NhZ2UsIGFuZCB0aGUgdG9vbHMgdGhleSBzaG91bGQgYmUgYWRkZWQgdG8uXG4gICAgICovXG4gICAgYXR0YWNobWVudHM/OiBBcnJheTxBZGRpdGlvbmFsTWVzc2FnZS5BdHRhY2htZW50PiB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAgICogZm9yIHN0b3JpbmcgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb2JqZWN0IGluIGEgc3RydWN0dXJlZCBmb3JtYXQuIEtleXNcbiAgICAgKiBjYW4gYmUgYSBtYXhpbXVtIG9mIDY0IGNoYXJhY3RlcnMgbG9uZyBhbmQgdmFsdWVzIGNhbiBiZSBhIG1heGl1bSBvZiA1MTJcbiAgICAgKiBjaGFyYWN0ZXJzIGxvbmcuXG4gICAgICovXG4gICAgbWV0YWRhdGE/OiB1bmtub3duIHwgbnVsbDtcbiAgfVxuXG4gIGV4cG9ydCBuYW1lc3BhY2UgQWRkaXRpb25hbE1lc3NhZ2Uge1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgQXR0YWNobWVudCB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBJRCBvZiB0aGUgZmlsZSB0byBhdHRhY2ggdG8gdGhlIG1lc3NhZ2UuXG4gICAgICAgKi9cbiAgICAgIGZpbGVfaWQ/OiBzdHJpbmc7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHRvb2xzIHRvIGFkZCB0aGlzIGZpbGUgdG8uXG4gICAgICAgKi9cbiAgICAgIHRvb2xzPzogQXJyYXk8QXNzaXN0YW50c0FQSS5Db2RlSW50ZXJwcmV0ZXJUb29sIHwgQXNzaXN0YW50c0FQSS5GaWxlU2VhcmNoVG9vbD47XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIGZvciBob3cgYSB0aHJlYWQgd2lsbCBiZSB0cnVuY2F0ZWQgcHJpb3IgdG8gdGhlIHJ1bi4gVXNlIHRoaXMgdG9cbiAgICogY29udHJvbCB0aGUgaW50aWFsIGNvbnRleHQgd2luZG93IG9mIHRoZSBydW4uXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRydW5jYXRpb25TdHJhdGVneSB7XG4gICAgLyoqXG4gICAgICogVGhlIHRydW5jYXRpb24gc3RyYXRlZ3kgdG8gdXNlIGZvciB0aGUgdGhyZWFkLiBUaGUgZGVmYXVsdCBpcyBgYXV0b2AuIElmIHNldCB0b1xuICAgICAqIGBsYXN0X21lc3NhZ2VzYCwgdGhlIHRocmVhZCB3aWxsIGJlIHRydW5jYXRlZCB0byB0aGUgbiBtb3N0IHJlY2VudCBtZXNzYWdlcyBpblxuICAgICAqIHRoZSB0aHJlYWQuIFdoZW4gc2V0IHRvIGBhdXRvYCwgbWVzc2FnZXMgaW4gdGhlIG1pZGRsZSBvZiB0aGUgdGhyZWFkIHdpbGwgYmVcbiAgICAgKiBkcm9wcGVkIHRvIGZpdCB0aGUgY29udGV4dCBsZW5ndGggb2YgdGhlIG1vZGVsLCBgbWF4X3Byb21wdF90b2tlbnNgLlxuICAgICAqL1xuICAgIHR5cGU6ICdhdXRvJyB8ICdsYXN0X21lc3NhZ2VzJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgbW9zdCByZWNlbnQgbWVzc2FnZXMgZnJvbSB0aGUgdGhyZWFkIHdoZW4gY29uc3RydWN0aW5nIHRoZSBjb250ZXh0XG4gICAgICogZm9yIHRoZSBydW4uXG4gICAgICovXG4gICAgbGFzdF9tZXNzYWdlcz86IG51bWJlciB8IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBSdW5DcmVhdGVBbmRTdHJlYW1QYXJhbXMge1xuICAvKipcbiAgICogVGhlIElEIG9mIHRoZVxuICAgKiBbYXNzaXN0YW50XShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2Fzc2lzdGFudHMpIHRvIHVzZSB0b1xuICAgKiBleGVjdXRlIHRoaXMgcnVuLlxuICAgKi9cbiAgYXNzaXN0YW50X2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgYWRkaXRpb25hbCBpbnN0cnVjdGlvbnMgYXQgdGhlIGVuZCBvZiB0aGUgaW5zdHJ1Y3Rpb25zIGZvciB0aGUgcnVuLiBUaGlzXG4gICAqIGlzIHVzZWZ1bCBmb3IgbW9kaWZ5aW5nIHRoZSBiZWhhdmlvciBvbiBhIHBlci1ydW4gYmFzaXMgd2l0aG91dCBvdmVycmlkaW5nIG90aGVyXG4gICAqIGluc3RydWN0aW9ucy5cbiAgICovXG4gIGFkZGl0aW9uYWxfaW5zdHJ1Y3Rpb25zPzogc3RyaW5nIHwgbnVsbDtcblxuICAvKipcbiAgICogQWRkcyBhZGRpdGlvbmFsIG1lc3NhZ2VzIHRvIHRoZSB0aHJlYWQgYmVmb3JlIGNyZWF0aW5nIHRoZSBydW4uXG4gICAqL1xuICBhZGRpdGlvbmFsX21lc3NhZ2VzPzogQXJyYXk8UnVuQ3JlYXRlQW5kU3RyZWFtUGFyYW1zLkFkZGl0aW9uYWxNZXNzYWdlPiB8IG51bGw7XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlcyB0aGVcbiAgICogW2luc3RydWN0aW9uc10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9hc3Npc3RhbnRzL2NyZWF0ZUFzc2lzdGFudClcbiAgICogb2YgdGhlIGFzc2lzdGFudC4gVGhpcyBpcyB1c2VmdWwgZm9yIG1vZGlmeWluZyB0aGUgYmVoYXZpb3Igb24gYSBwZXItcnVuIGJhc2lzLlxuICAgKi9cbiAgaW5zdHJ1Y3Rpb25zPzogc3RyaW5nIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIGNvbXBsZXRpb24gdG9rZW5zIHRoYXQgbWF5IGJlIHVzZWQgb3ZlciB0aGUgY291cnNlIG9mIHRoZVxuICAgKiBydW4uIFRoZSBydW4gd2lsbCBtYWtlIGEgYmVzdCBlZmZvcnQgdG8gdXNlIG9ubHkgdGhlIG51bWJlciBvZiBjb21wbGV0aW9uIHRva2Vuc1xuICAgKiBzcGVjaWZpZWQsIGFjcm9zcyBtdWx0aXBsZSB0dXJucyBvZiB0aGUgcnVuLiBJZiB0aGUgcnVuIGV4Y2VlZHMgdGhlIG51bWJlciBvZlxuICAgKiBjb21wbGV0aW9uIHRva2VucyBzcGVjaWZpZWQsIHRoZSBydW4gd2lsbCBlbmQgd2l0aCBzdGF0dXMgYGluY29tcGxldGVgLiBTZWVcbiAgICogYGluY29tcGxldGVfZGV0YWlsc2AgZm9yIG1vcmUgaW5mby5cbiAgICovXG4gIG1heF9jb21wbGV0aW9uX3Rva2Vucz86IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiBwcm9tcHQgdG9rZW5zIHRoYXQgbWF5IGJlIHVzZWQgb3ZlciB0aGUgY291cnNlIG9mIHRoZSBydW4uXG4gICAqIFRoZSBydW4gd2lsbCBtYWtlIGEgYmVzdCBlZmZvcnQgdG8gdXNlIG9ubHkgdGhlIG51bWJlciBvZiBwcm9tcHQgdG9rZW5zXG4gICAqIHNwZWNpZmllZCwgYWNyb3NzIG11bHRpcGxlIHR1cm5zIG9mIHRoZSBydW4uIElmIHRoZSBydW4gZXhjZWVkcyB0aGUgbnVtYmVyIG9mXG4gICAqIHByb21wdCB0b2tlbnMgc3BlY2lmaWVkLCB0aGUgcnVuIHdpbGwgZW5kIHdpdGggc3RhdHVzIGBpbmNvbXBsZXRlYC4gU2VlXG4gICAqIGBpbmNvbXBsZXRlX2RldGFpbHNgIGZvciBtb3JlIGluZm8uXG4gICAqL1xuICBtYXhfcHJvbXB0X3Rva2Vucz86IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFNldCBvZiAxNiBrZXktdmFsdWUgcGFpcnMgdGhhdCBjYW4gYmUgYXR0YWNoZWQgdG8gYW4gb2JqZWN0LiBUaGlzIGNhbiBiZSB1c2VmdWxcbiAgICogZm9yIHN0b3JpbmcgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb2JqZWN0IGluIGEgc3RydWN0dXJlZCBmb3JtYXQuIEtleXNcbiAgICogY2FuIGJlIGEgbWF4aW11bSBvZiA2NCBjaGFyYWN0ZXJzIGxvbmcgYW5kIHZhbHVlcyBjYW4gYmUgYSBtYXhpdW0gb2YgNTEyXG4gICAqIGNoYXJhY3RlcnMgbG9uZy5cbiAgICovXG4gIG1ldGFkYXRhPzogdW5rbm93biB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgW01vZGVsXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL21vZGVscykgdG9cbiAgICogYmUgdXNlZCB0byBleGVjdXRlIHRoaXMgcnVuLiBJZiBhIHZhbHVlIGlzIHByb3ZpZGVkIGhlcmUsIGl0IHdpbGwgb3ZlcnJpZGUgdGhlXG4gICAqIG1vZGVsIGFzc29jaWF0ZWQgd2l0aCB0aGUgYXNzaXN0YW50LiBJZiBub3QsIHRoZSBtb2RlbCBhc3NvY2lhdGVkIHdpdGggdGhlXG4gICAqIGFzc2lzdGFudCB3aWxsIGJlIHVzZWQuXG4gICAqL1xuICBtb2RlbD86XG4gICAgfCAoc3RyaW5nICYge30pXG4gICAgfCAnZ3B0LTRvJ1xuICAgIHwgJ2dwdC00by0yMDI0LTA1LTEzJ1xuICAgIHwgJ2dwdC00LXR1cmJvJ1xuICAgIHwgJ2dwdC00LXR1cmJvLTIwMjQtMDQtMDknXG4gICAgfCAnZ3B0LTQtMDEyNS1wcmV2aWV3J1xuICAgIHwgJ2dwdC00LXR1cmJvLXByZXZpZXcnXG4gICAgfCAnZ3B0LTQtMTEwNi1wcmV2aWV3J1xuICAgIHwgJ2dwdC00LXZpc2lvbi1wcmV2aWV3J1xuICAgIHwgJ2dwdC00J1xuICAgIHwgJ2dwdC00LTAzMTQnXG4gICAgfCAnZ3B0LTQtMDYxMydcbiAgICB8ICdncHQtNC0zMmsnXG4gICAgfCAnZ3B0LTQtMzJrLTAzMTQnXG4gICAgfCAnZ3B0LTQtMzJrLTA2MTMnXG4gICAgfCAnZ3B0LTMuNS10dXJibydcbiAgICB8ICdncHQtMy41LXR1cmJvLTE2aydcbiAgICB8ICdncHQtMy41LXR1cmJvLTA2MTMnXG4gICAgfCAnZ3B0LTMuNS10dXJiby0xMTA2J1xuICAgIHwgJ2dwdC0zLjUtdHVyYm8tMDEyNSdcbiAgICB8ICdncHQtMy41LXR1cmJvLTE2ay0wNjEzJ1xuICAgIHwgbnVsbDtcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSBmb3JtYXQgdGhhdCB0aGUgbW9kZWwgbXVzdCBvdXRwdXQuIENvbXBhdGlibGUgd2l0aFxuICAgKiBbR1BULTRvXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9tb2RlbHMvZ3B0LTRvKSxcbiAgICogW0dQVC00IFR1cmJvXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9tb2RlbHMvZ3B0LTQtdHVyYm8tYW5kLWdwdC00KSxcbiAgICogYW5kIGFsbCBHUFQtMy41IFR1cmJvIG1vZGVscyBzaW5jZSBgZ3B0LTMuNS10dXJiby0xMTA2YC5cbiAgICpcbiAgICogU2V0dGluZyB0byBgeyBcInR5cGVcIjogXCJqc29uX29iamVjdFwiIH1gIGVuYWJsZXMgSlNPTiBtb2RlLCB3aGljaCBndWFyYW50ZWVzIHRoZVxuICAgKiBtZXNzYWdlIHRoZSBtb2RlbCBnZW5lcmF0ZXMgaXMgdmFsaWQgSlNPTi5cbiAgICpcbiAgICogKipJbXBvcnRhbnQ6Kiogd2hlbiB1c2luZyBKU09OIG1vZGUsIHlvdSAqKm11c3QqKiBhbHNvIGluc3RydWN0IHRoZSBtb2RlbCB0b1xuICAgKiBwcm9kdWNlIEpTT04geW91cnNlbGYgdmlhIGEgc3lzdGVtIG9yIHVzZXIgbWVzc2FnZS4gV2l0aG91dCB0aGlzLCB0aGUgbW9kZWwgbWF5XG4gICAqIGdlbmVyYXRlIGFuIHVuZW5kaW5nIHN0cmVhbSBvZiB3aGl0ZXNwYWNlIHVudGlsIHRoZSBnZW5lcmF0aW9uIHJlYWNoZXMgdGhlIHRva2VuXG4gICAqIGxpbWl0LCByZXN1bHRpbmcgaW4gYSBsb25nLXJ1bm5pbmcgYW5kIHNlZW1pbmdseSBcInN0dWNrXCIgcmVxdWVzdC4gQWxzbyBub3RlIHRoYXRcbiAgICogdGhlIG1lc3NhZ2UgY29udGVudCBtYXkgYmUgcGFydGlhbGx5IGN1dCBvZmYgaWYgYGZpbmlzaF9yZWFzb249XCJsZW5ndGhcImAsIHdoaWNoXG4gICAqIGluZGljYXRlcyB0aGUgZ2VuZXJhdGlvbiBleGNlZWRlZCBgbWF4X3Rva2Vuc2Agb3IgdGhlIGNvbnZlcnNhdGlvbiBleGNlZWRlZCB0aGVcbiAgICogbWF4IGNvbnRleHQgbGVuZ3RoLlxuICAgKi9cbiAgcmVzcG9uc2VfZm9ybWF0PzogVGhyZWFkc0FQSS5Bc3Npc3RhbnRSZXNwb25zZUZvcm1hdE9wdGlvbiB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFdoYXQgc2FtcGxpbmcgdGVtcGVyYXR1cmUgdG8gdXNlLCBiZXR3ZWVuIDAgYW5kIDIuIEhpZ2hlciB2YWx1ZXMgbGlrZSAwLjggd2lsbFxuICAgKiBtYWtlIHRoZSBvdXRwdXQgbW9yZSByYW5kb20sIHdoaWxlIGxvd2VyIHZhbHVlcyBsaWtlIDAuMiB3aWxsIG1ha2UgaXQgbW9yZVxuICAgKiBmb2N1c2VkIGFuZCBkZXRlcm1pbmlzdGljLlxuICAgKi9cbiAgdGVtcGVyYXR1cmU/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBDb250cm9scyB3aGljaCAoaWYgYW55KSB0b29sIGlzIGNhbGxlZCBieSB0aGUgbW9kZWwuIGBub25lYCBtZWFucyB0aGUgbW9kZWwgd2lsbFxuICAgKiBub3QgY2FsbCBhbnkgdG9vbHMgYW5kIGluc3RlYWQgZ2VuZXJhdGVzIGEgbWVzc2FnZS4gYGF1dG9gIGlzIHRoZSBkZWZhdWx0IHZhbHVlXG4gICAqIGFuZCBtZWFucyB0aGUgbW9kZWwgY2FuIHBpY2sgYmV0d2VlbiBnZW5lcmF0aW5nIGEgbWVzc2FnZSBvciBjYWxsaW5nIG9uZSBvciBtb3JlXG4gICAqIHRvb2xzLiBgcmVxdWlyZWRgIG1lYW5zIHRoZSBtb2RlbCBtdXN0IGNhbGwgb25lIG9yIG1vcmUgdG9vbHMgYmVmb3JlIHJlc3BvbmRpbmdcbiAgICogdG8gdGhlIHVzZXIuIFNwZWNpZnlpbmcgYSBwYXJ0aWN1bGFyIHRvb2wgbGlrZSBge1widHlwZVwiOiBcImZpbGVfc2VhcmNoXCJ9YCBvclxuICAgKiBge1widHlwZVwiOiBcImZ1bmN0aW9uXCIsIFwiZnVuY3Rpb25cIjoge1wibmFtZVwiOiBcIm15X2Z1bmN0aW9uXCJ9fWAgZm9yY2VzIHRoZSBtb2RlbCB0b1xuICAgKiBjYWxsIHRoYXQgdG9vbC5cbiAgICovXG4gIHRvb2xfY2hvaWNlPzogVGhyZWFkc0FQSS5Bc3Npc3RhbnRUb29sQ2hvaWNlT3B0aW9uIHwgbnVsbDtcblxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIHRvb2xzIHRoZSBhc3Npc3RhbnQgY2FuIHVzZSBmb3IgdGhpcyBydW4uIFRoaXMgaXMgdXNlZnVsIGZvclxuICAgKiBtb2RpZnlpbmcgdGhlIGJlaGF2aW9yIG9uIGEgcGVyLXJ1biBiYXNpcy5cbiAgICovXG4gIHRvb2xzPzogQXJyYXk8QXNzaXN0YW50c0FQSS5Bc3Npc3RhbnRUb29sPiB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEFuIGFsdGVybmF0aXZlIHRvIHNhbXBsaW5nIHdpdGggdGVtcGVyYXR1cmUsIGNhbGxlZCBudWNsZXVzIHNhbXBsaW5nLCB3aGVyZSB0aGVcbiAgICogbW9kZWwgY29uc2lkZXJzIHRoZSByZXN1bHRzIG9mIHRoZSB0b2tlbnMgd2l0aCB0b3BfcCBwcm9iYWJpbGl0eSBtYXNzLiBTbyAwLjFcbiAgICogbWVhbnMgb25seSB0aGUgdG9rZW5zIGNvbXByaXNpbmcgdGhlIHRvcCAxMCUgcHJvYmFiaWxpdHkgbWFzcyBhcmUgY29uc2lkZXJlZC5cbiAgICpcbiAgICogV2UgZ2VuZXJhbGx5IHJlY29tbWVuZCBhbHRlcmluZyB0aGlzIG9yIHRlbXBlcmF0dXJlIGJ1dCBub3QgYm90aC5cbiAgICovXG4gIHRvcF9wPzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogQ29udHJvbHMgZm9yIGhvdyBhIHRocmVhZCB3aWxsIGJlIHRydW5jYXRlZCBwcmlvciB0byB0aGUgcnVuLiBVc2UgdGhpcyB0b1xuICAgKiBjb250cm9sIHRoZSBpbnRpYWwgY29udGV4dCB3aW5kb3cgb2YgdGhlIHJ1bi5cbiAgICovXG4gIHRydW5jYXRpb25fc3RyYXRlZ3k/OiBSdW5DcmVhdGVBbmRTdHJlYW1QYXJhbXMuVHJ1bmNhdGlvblN0cmF0ZWd5IHwgbnVsbDtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBSdW5DcmVhdGVBbmRTdHJlYW1QYXJhbXMge1xuICBleHBvcnQgaW50ZXJmYWNlIEFkZGl0aW9uYWxNZXNzYWdlIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdGV4dCBjb250ZW50cyBvZiB0aGUgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBjb250ZW50OiBzdHJpbmcgfCBBcnJheTxNZXNzYWdlc0FQSS5NZXNzYWdlQ29udGVudFBhcnRQYXJhbT47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcm9sZSBvZiB0aGUgZW50aXR5IHRoYXQgaXMgY3JlYXRpbmcgdGhlIG1lc3NhZ2UuIEFsbG93ZWQgdmFsdWVzIGluY2x1ZGU6XG4gICAgICpcbiAgICAgKiAtIGB1c2VyYDogSW5kaWNhdGVzIHRoZSBtZXNzYWdlIGlzIHNlbnQgYnkgYW4gYWN0dWFsIHVzZXIgYW5kIHNob3VsZCBiZSB1c2VkIGluXG4gICAgICogICBtb3N0IGNhc2VzIHRvIHJlcHJlc2VudCB1c2VyLWdlbmVyYXRlZCBtZXNzYWdlcy5cbiAgICAgKiAtIGBhc3Npc3RhbnRgOiBJbmRpY2F0ZXMgdGhlIG1lc3NhZ2UgaXMgZ2VuZXJhdGVkIGJ5IHRoZSBhc3Npc3RhbnQuIFVzZSB0aGlzXG4gICAgICogICB2YWx1ZSB0byBpbnNlcnQgbWVzc2FnZXMgZnJvbSB0aGUgYXNzaXN0YW50IGludG8gdGhlIGNvbnZlcnNhdGlvbi5cbiAgICAgKi9cbiAgICByb2xlOiAndXNlcicgfCAnYXNzaXN0YW50JztcblxuICAgIC8qKlxuICAgICAqIEEgbGlzdCBvZiBmaWxlcyBhdHRhY2hlZCB0byB0aGUgbWVzc2FnZSwgYW5kIHRoZSB0b29scyB0aGV5IHNob3VsZCBiZSBhZGRlZCB0by5cbiAgICAgKi9cbiAgICBhdHRhY2htZW50cz86IEFycmF5PEFkZGl0aW9uYWxNZXNzYWdlLkF0dGFjaG1lbnQ+IHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFNldCBvZiAxNiBrZXktdmFsdWUgcGFpcnMgdGhhdCBjYW4gYmUgYXR0YWNoZWQgdG8gYW4gb2JqZWN0LiBUaGlzIGNhbiBiZSB1c2VmdWxcbiAgICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdC4gS2V5c1xuICAgICAqIGNhbiBiZSBhIG1heGltdW0gb2YgNjQgY2hhcmFjdGVycyBsb25nIGFuZCB2YWx1ZXMgY2FuIGJlIGEgbWF4aXVtIG9mIDUxMlxuICAgICAqIGNoYXJhY3RlcnMgbG9uZy5cbiAgICAgKi9cbiAgICBtZXRhZGF0YT86IHVua25vd24gfCBudWxsO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBBZGRpdGlvbmFsTWVzc2FnZSB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBBdHRhY2htZW50IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIElEIG9mIHRoZSBmaWxlIHRvIGF0dGFjaCB0byB0aGUgbWVzc2FnZS5cbiAgICAgICAqL1xuICAgICAgZmlsZV9pZD86IHN0cmluZztcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdG9vbHMgdG8gYWRkIHRoaXMgZmlsZSB0by5cbiAgICAgICAqL1xuICAgICAgdG9vbHM/OiBBcnJheTxBc3Npc3RhbnRzQVBJLkNvZGVJbnRlcnByZXRlclRvb2wgfCBBc3Npc3RhbnRzQVBJLkZpbGVTZWFyY2hUb29sPjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29udHJvbHMgZm9yIGhvdyBhIHRocmVhZCB3aWxsIGJlIHRydW5jYXRlZCBwcmlvciB0byB0aGUgcnVuLiBVc2UgdGhpcyB0b1xuICAgKiBjb250cm9sIHRoZSBpbnRpYWwgY29udGV4dCB3aW5kb3cgb2YgdGhlIHJ1bi5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVHJ1bmNhdGlvblN0cmF0ZWd5IHtcbiAgICAvKipcbiAgICAgKiBUaGUgdHJ1bmNhdGlvbiBzdHJhdGVneSB0byB1c2UgZm9yIHRoZSB0aHJlYWQuIFRoZSBkZWZhdWx0IGlzIGBhdXRvYC4gSWYgc2V0IHRvXG4gICAgICogYGxhc3RfbWVzc2FnZXNgLCB0aGUgdGhyZWFkIHdpbGwgYmUgdHJ1bmNhdGVkIHRvIHRoZSBuIG1vc3QgcmVjZW50IG1lc3NhZ2VzIGluXG4gICAgICogdGhlIHRocmVhZC4gV2hlbiBzZXQgdG8gYGF1dG9gLCBtZXNzYWdlcyBpbiB0aGUgbWlkZGxlIG9mIHRoZSB0aHJlYWQgd2lsbCBiZVxuICAgICAqIGRyb3BwZWQgdG8gZml0IHRoZSBjb250ZXh0IGxlbmd0aCBvZiB0aGUgbW9kZWwsIGBtYXhfcHJvbXB0X3Rva2Vuc2AuXG4gICAgICovXG4gICAgdHlwZTogJ2F1dG8nIHwgJ2xhc3RfbWVzc2FnZXMnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBtb3N0IHJlY2VudCBtZXNzYWdlcyBmcm9tIHRoZSB0aHJlYWQgd2hlbiBjb25zdHJ1Y3RpbmcgdGhlIGNvbnRleHRcbiAgICAgKiBmb3IgdGhlIHJ1bi5cbiAgICAgKi9cbiAgICBsYXN0X21lc3NhZ2VzPzogbnVtYmVyIHwgbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJ1blN0cmVhbVBhcmFtcyB7XG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlXG4gICAqIFthc3Npc3RhbnRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvYXNzaXN0YW50cykgdG8gdXNlIHRvXG4gICAqIGV4ZWN1dGUgdGhpcyBydW4uXG4gICAqL1xuICBhc3Npc3RhbnRfaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogQXBwZW5kcyBhZGRpdGlvbmFsIGluc3RydWN0aW9ucyBhdCB0aGUgZW5kIG9mIHRoZSBpbnN0cnVjdGlvbnMgZm9yIHRoZSBydW4uIFRoaXNcbiAgICogaXMgdXNlZnVsIGZvciBtb2RpZnlpbmcgdGhlIGJlaGF2aW9yIG9uIGEgcGVyLXJ1biBiYXNpcyB3aXRob3V0IG92ZXJyaWRpbmcgb3RoZXJcbiAgICogaW5zdHJ1Y3Rpb25zLlxuICAgKi9cbiAgYWRkaXRpb25hbF9pbnN0cnVjdGlvbnM/OiBzdHJpbmcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBBZGRzIGFkZGl0aW9uYWwgbWVzc2FnZXMgdG8gdGhlIHRocmVhZCBiZWZvcmUgY3JlYXRpbmcgdGhlIHJ1bi5cbiAgICovXG4gIGFkZGl0aW9uYWxfbWVzc2FnZXM/OiBBcnJheTxSdW5TdHJlYW1QYXJhbXMuQWRkaXRpb25hbE1lc3NhZ2U+IHwgbnVsbDtcblxuICAvKipcbiAgICogT3ZlcnJpZGVzIHRoZVxuICAgKiBbaW5zdHJ1Y3Rpb25zXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2Fzc2lzdGFudHMvY3JlYXRlQXNzaXN0YW50KVxuICAgKiBvZiB0aGUgYXNzaXN0YW50LiBUaGlzIGlzIHVzZWZ1bCBmb3IgbW9kaWZ5aW5nIHRoZSBiZWhhdmlvciBvbiBhIHBlci1ydW4gYmFzaXMuXG4gICAqL1xuICBpbnN0cnVjdGlvbnM/OiBzdHJpbmcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgY29tcGxldGlvbiB0b2tlbnMgdGhhdCBtYXkgYmUgdXNlZCBvdmVyIHRoZSBjb3Vyc2Ugb2YgdGhlXG4gICAqIHJ1bi4gVGhlIHJ1biB3aWxsIG1ha2UgYSBiZXN0IGVmZm9ydCB0byB1c2Ugb25seSB0aGUgbnVtYmVyIG9mIGNvbXBsZXRpb24gdG9rZW5zXG4gICAqIHNwZWNpZmllZCwgYWNyb3NzIG11bHRpcGxlIHR1cm5zIG9mIHRoZSBydW4uIElmIHRoZSBydW4gZXhjZWVkcyB0aGUgbnVtYmVyIG9mXG4gICAqIGNvbXBsZXRpb24gdG9rZW5zIHNwZWNpZmllZCwgdGhlIHJ1biB3aWxsIGVuZCB3aXRoIHN0YXR1cyBgaW5jb21wbGV0ZWAuIFNlZVxuICAgKiBgaW5jb21wbGV0ZV9kZXRhaWxzYCBmb3IgbW9yZSBpbmZvLlxuICAgKi9cbiAgbWF4X2NvbXBsZXRpb25fdG9rZW5zPzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHByb21wdCB0b2tlbnMgdGhhdCBtYXkgYmUgdXNlZCBvdmVyIHRoZSBjb3Vyc2Ugb2YgdGhlIHJ1bi5cbiAgICogVGhlIHJ1biB3aWxsIG1ha2UgYSBiZXN0IGVmZm9ydCB0byB1c2Ugb25seSB0aGUgbnVtYmVyIG9mIHByb21wdCB0b2tlbnNcbiAgICogc3BlY2lmaWVkLCBhY3Jvc3MgbXVsdGlwbGUgdHVybnMgb2YgdGhlIHJ1bi4gSWYgdGhlIHJ1biBleGNlZWRzIHRoZSBudW1iZXIgb2ZcbiAgICogcHJvbXB0IHRva2VucyBzcGVjaWZpZWQsIHRoZSBydW4gd2lsbCBlbmQgd2l0aCBzdGF0dXMgYGluY29tcGxldGVgLiBTZWVcbiAgICogYGluY29tcGxldGVfZGV0YWlsc2AgZm9yIG1vcmUgaW5mby5cbiAgICovXG4gIG1heF9wcm9tcHRfdG9rZW5zPzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdC4gS2V5c1xuICAgKiBjYW4gYmUgYSBtYXhpbXVtIG9mIDY0IGNoYXJhY3RlcnMgbG9uZyBhbmQgdmFsdWVzIGNhbiBiZSBhIG1heGl1bSBvZiA1MTJcbiAgICogY2hhcmFjdGVycyBsb25nLlxuICAgKi9cbiAgbWV0YWRhdGE/OiB1bmtub3duIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBbTW9kZWxdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvbW9kZWxzKSB0b1xuICAgKiBiZSB1c2VkIHRvIGV4ZWN1dGUgdGhpcyBydW4uIElmIGEgdmFsdWUgaXMgcHJvdmlkZWQgaGVyZSwgaXQgd2lsbCBvdmVycmlkZSB0aGVcbiAgICogbW9kZWwgYXNzb2NpYXRlZCB3aXRoIHRoZSBhc3Npc3RhbnQuIElmIG5vdCwgdGhlIG1vZGVsIGFzc29jaWF0ZWQgd2l0aCB0aGVcbiAgICogYXNzaXN0YW50IHdpbGwgYmUgdXNlZC5cbiAgICovXG4gIG1vZGVsPzpcbiAgICB8IChzdHJpbmcgJiB7fSlcbiAgICB8ICdncHQtNG8nXG4gICAgfCAnZ3B0LTRvLTIwMjQtMDUtMTMnXG4gICAgfCAnZ3B0LTQtdHVyYm8nXG4gICAgfCAnZ3B0LTQtdHVyYm8tMjAyNC0wNC0wOSdcbiAgICB8ICdncHQtNC0wMTI1LXByZXZpZXcnXG4gICAgfCAnZ3B0LTQtdHVyYm8tcHJldmlldydcbiAgICB8ICdncHQtNC0xMTA2LXByZXZpZXcnXG4gICAgfCAnZ3B0LTQtdmlzaW9uLXByZXZpZXcnXG4gICAgfCAnZ3B0LTQnXG4gICAgfCAnZ3B0LTQtMDMxNCdcbiAgICB8ICdncHQtNC0wNjEzJ1xuICAgIHwgJ2dwdC00LTMyaydcbiAgICB8ICdncHQtNC0zMmstMDMxNCdcbiAgICB8ICdncHQtNC0zMmstMDYxMydcbiAgICB8ICdncHQtMy41LXR1cmJvJ1xuICAgIHwgJ2dwdC0zLjUtdHVyYm8tMTZrJ1xuICAgIHwgJ2dwdC0zLjUtdHVyYm8tMDYxMydcbiAgICB8ICdncHQtMy41LXR1cmJvLTExMDYnXG4gICAgfCAnZ3B0LTMuNS10dXJiby0wMTI1J1xuICAgIHwgJ2dwdC0zLjUtdHVyYm8tMTZrLTA2MTMnXG4gICAgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGZvcm1hdCB0aGF0IHRoZSBtb2RlbCBtdXN0IG91dHB1dC4gQ29tcGF0aWJsZSB3aXRoXG4gICAqIFtHUFQtNG9dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL21vZGVscy9ncHQtNG8pLFxuICAgKiBbR1BULTQgVHVyYm9dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL21vZGVscy9ncHQtNC10dXJiby1hbmQtZ3B0LTQpLFxuICAgKiBhbmQgYWxsIEdQVC0zLjUgVHVyYm8gbW9kZWxzIHNpbmNlIGBncHQtMy41LXR1cmJvLTExMDZgLlxuICAgKlxuICAgKiBTZXR0aW5nIHRvIGB7IFwidHlwZVwiOiBcImpzb25fb2JqZWN0XCIgfWAgZW5hYmxlcyBKU09OIG1vZGUsIHdoaWNoIGd1YXJhbnRlZXMgdGhlXG4gICAqIG1lc3NhZ2UgdGhlIG1vZGVsIGdlbmVyYXRlcyBpcyB2YWxpZCBKU09OLlxuICAgKlxuICAgKiAqKkltcG9ydGFudDoqKiB3aGVuIHVzaW5nIEpTT04gbW9kZSwgeW91ICoqbXVzdCoqIGFsc28gaW5zdHJ1Y3QgdGhlIG1vZGVsIHRvXG4gICAqIHByb2R1Y2UgSlNPTiB5b3Vyc2VsZiB2aWEgYSBzeXN0ZW0gb3IgdXNlciBtZXNzYWdlLiBXaXRob3V0IHRoaXMsIHRoZSBtb2RlbCBtYXlcbiAgICogZ2VuZXJhdGUgYW4gdW5lbmRpbmcgc3RyZWFtIG9mIHdoaXRlc3BhY2UgdW50aWwgdGhlIGdlbmVyYXRpb24gcmVhY2hlcyB0aGUgdG9rZW5cbiAgICogbGltaXQsIHJlc3VsdGluZyBpbiBhIGxvbmctcnVubmluZyBhbmQgc2VlbWluZ2x5IFwic3R1Y2tcIiByZXF1ZXN0LiBBbHNvIG5vdGUgdGhhdFxuICAgKiB0aGUgbWVzc2FnZSBjb250ZW50IG1heSBiZSBwYXJ0aWFsbHkgY3V0IG9mZiBpZiBgZmluaXNoX3JlYXNvbj1cImxlbmd0aFwiYCwgd2hpY2hcbiAgICogaW5kaWNhdGVzIHRoZSBnZW5lcmF0aW9uIGV4Y2VlZGVkIGBtYXhfdG9rZW5zYCBvciB0aGUgY29udmVyc2F0aW9uIGV4Y2VlZGVkIHRoZVxuICAgKiBtYXggY29udGV4dCBsZW5ndGguXG4gICAqL1xuICByZXNwb25zZV9mb3JtYXQ/OiBUaHJlYWRzQVBJLkFzc2lzdGFudFJlc3BvbnNlRm9ybWF0T3B0aW9uIHwgbnVsbDtcblxuICAvKipcbiAgICogV2hhdCBzYW1wbGluZyB0ZW1wZXJhdHVyZSB0byB1c2UsIGJldHdlZW4gMCBhbmQgMi4gSGlnaGVyIHZhbHVlcyBsaWtlIDAuOCB3aWxsXG4gICAqIG1ha2UgdGhlIG91dHB1dCBtb3JlIHJhbmRvbSwgd2hpbGUgbG93ZXIgdmFsdWVzIGxpa2UgMC4yIHdpbGwgbWFrZSBpdCBtb3JlXG4gICAqIGZvY3VzZWQgYW5kIGRldGVybWluaXN0aWMuXG4gICAqL1xuICB0ZW1wZXJhdHVyZT86IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIHdoaWNoIChpZiBhbnkpIHRvb2wgaXMgY2FsbGVkIGJ5IHRoZSBtb2RlbC4gYG5vbmVgIG1lYW5zIHRoZSBtb2RlbCB3aWxsXG4gICAqIG5vdCBjYWxsIGFueSB0b29scyBhbmQgaW5zdGVhZCBnZW5lcmF0ZXMgYSBtZXNzYWdlLiBgYXV0b2AgaXMgdGhlIGRlZmF1bHQgdmFsdWVcbiAgICogYW5kIG1lYW5zIHRoZSBtb2RlbCBjYW4gcGljayBiZXR3ZWVuIGdlbmVyYXRpbmcgYSBtZXNzYWdlIG9yIGNhbGxpbmcgb25lIG9yIG1vcmVcbiAgICogdG9vbHMuIGByZXF1aXJlZGAgbWVhbnMgdGhlIG1vZGVsIG11c3QgY2FsbCBvbmUgb3IgbW9yZSB0b29scyBiZWZvcmUgcmVzcG9uZGluZ1xuICAgKiB0byB0aGUgdXNlci4gU3BlY2lmeWluZyBhIHBhcnRpY3VsYXIgdG9vbCBsaWtlIGB7XCJ0eXBlXCI6IFwiZmlsZV9zZWFyY2hcIn1gIG9yXG4gICAqIGB7XCJ0eXBlXCI6IFwiZnVuY3Rpb25cIiwgXCJmdW5jdGlvblwiOiB7XCJuYW1lXCI6IFwibXlfZnVuY3Rpb25cIn19YCBmb3JjZXMgdGhlIG1vZGVsIHRvXG4gICAqIGNhbGwgdGhhdCB0b29sLlxuICAgKi9cbiAgdG9vbF9jaG9pY2U/OiBUaHJlYWRzQVBJLkFzc2lzdGFudFRvb2xDaG9pY2VPcHRpb24gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgdG9vbHMgdGhlIGFzc2lzdGFudCBjYW4gdXNlIGZvciB0aGlzIHJ1bi4gVGhpcyBpcyB1c2VmdWwgZm9yXG4gICAqIG1vZGlmeWluZyB0aGUgYmVoYXZpb3Igb24gYSBwZXItcnVuIGJhc2lzLlxuICAgKi9cbiAgdG9vbHM/OiBBcnJheTxBc3Npc3RhbnRzQVBJLkFzc2lzdGFudFRvb2w+IHwgbnVsbDtcblxuICAvKipcbiAgICogQW4gYWx0ZXJuYXRpdmUgdG8gc2FtcGxpbmcgd2l0aCB0ZW1wZXJhdHVyZSwgY2FsbGVkIG51Y2xldXMgc2FtcGxpbmcsIHdoZXJlIHRoZVxuICAgKiBtb2RlbCBjb25zaWRlcnMgdGhlIHJlc3VsdHMgb2YgdGhlIHRva2VucyB3aXRoIHRvcF9wIHByb2JhYmlsaXR5IG1hc3MuIFNvIDAuMVxuICAgKiBtZWFucyBvbmx5IHRoZSB0b2tlbnMgY29tcHJpc2luZyB0aGUgdG9wIDEwJSBwcm9iYWJpbGl0eSBtYXNzIGFyZSBjb25zaWRlcmVkLlxuICAgKlxuICAgKiBXZSBnZW5lcmFsbHkgcmVjb21tZW5kIGFsdGVyaW5nIHRoaXMgb3IgdGVtcGVyYXR1cmUgYnV0IG5vdCBib3RoLlxuICAgKi9cbiAgdG9wX3A/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBDb250cm9scyBmb3IgaG93IGEgdGhyZWFkIHdpbGwgYmUgdHJ1bmNhdGVkIHByaW9yIHRvIHRoZSBydW4uIFVzZSB0aGlzIHRvXG4gICAqIGNvbnRyb2wgdGhlIGludGlhbCBjb250ZXh0IHdpbmRvdyBvZiB0aGUgcnVuLlxuICAgKi9cbiAgdHJ1bmNhdGlvbl9zdHJhdGVneT86IFJ1blN0cmVhbVBhcmFtcy5UcnVuY2F0aW9uU3RyYXRlZ3kgfCBudWxsO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFJ1blN0cmVhbVBhcmFtcyB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgQWRkaXRpb25hbE1lc3NhZ2Uge1xuICAgIC8qKlxuICAgICAqIFRoZSB0ZXh0IGNvbnRlbnRzIG9mIHRoZSBtZXNzYWdlLlxuICAgICAqL1xuICAgIGNvbnRlbnQ6IHN0cmluZyB8IEFycmF5PE1lc3NhZ2VzQVBJLk1lc3NhZ2VDb250ZW50UGFydFBhcmFtPjtcblxuICAgIC8qKlxuICAgICAqIFRoZSByb2xlIG9mIHRoZSBlbnRpdHkgdGhhdCBpcyBjcmVhdGluZyB0aGUgbWVzc2FnZS4gQWxsb3dlZCB2YWx1ZXMgaW5jbHVkZTpcbiAgICAgKlxuICAgICAqIC0gYHVzZXJgOiBJbmRpY2F0ZXMgdGhlIG1lc3NhZ2UgaXMgc2VudCBieSBhbiBhY3R1YWwgdXNlciBhbmQgc2hvdWxkIGJlIHVzZWQgaW5cbiAgICAgKiAgIG1vc3QgY2FzZXMgdG8gcmVwcmVzZW50IHVzZXItZ2VuZXJhdGVkIG1lc3NhZ2VzLlxuICAgICAqIC0gYGFzc2lzdGFudGA6IEluZGljYXRlcyB0aGUgbWVzc2FnZSBpcyBnZW5lcmF0ZWQgYnkgdGhlIGFzc2lzdGFudC4gVXNlIHRoaXNcbiAgICAgKiAgIHZhbHVlIHRvIGluc2VydCBtZXNzYWdlcyBmcm9tIHRoZSBhc3Npc3RhbnQgaW50byB0aGUgY29udmVyc2F0aW9uLlxuICAgICAqL1xuICAgIHJvbGU6ICd1c2VyJyB8ICdhc3Npc3RhbnQnO1xuXG4gICAgLyoqXG4gICAgICogQSBsaXN0IG9mIGZpbGVzIGF0dGFjaGVkIHRvIHRoZSBtZXNzYWdlLCBhbmQgdGhlIHRvb2xzIHRoZXkgc2hvdWxkIGJlIGFkZGVkIHRvLlxuICAgICAqL1xuICAgIGF0dGFjaG1lbnRzPzogQXJyYXk8QWRkaXRpb25hbE1lc3NhZ2UuQXR0YWNobWVudD4gfCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LiBLZXlzXG4gICAgICogY2FuIGJlIGEgbWF4aW11bSBvZiA2NCBjaGFyYWN0ZXJzIGxvbmcgYW5kIHZhbHVlcyBjYW4gYmUgYSBtYXhpdW0gb2YgNTEyXG4gICAgICogY2hhcmFjdGVycyBsb25nLlxuICAgICAqL1xuICAgIG1ldGFkYXRhPzogdW5rbm93biB8IG51bGw7XG4gIH1cblxuICBleHBvcnQgbmFtZXNwYWNlIEFkZGl0aW9uYWxNZXNzYWdlIHtcbiAgICBleHBvcnQgaW50ZXJmYWNlIEF0dGFjaG1lbnQge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgSUQgb2YgdGhlIGZpbGUgdG8gYXR0YWNoIHRvIHRoZSBtZXNzYWdlLlxuICAgICAgICovXG4gICAgICBmaWxlX2lkPzogc3RyaW5nO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSB0b29scyB0byBhZGQgdGhpcyBmaWxlIHRvLlxuICAgICAgICovXG4gICAgICB0b29scz86IEFycmF5PEFzc2lzdGFudHNBUEkuQ29kZUludGVycHJldGVyVG9vbCB8IEFzc2lzdGFudHNBUEkuRmlsZVNlYXJjaFRvb2w+O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb250cm9scyBmb3IgaG93IGEgdGhyZWFkIHdpbGwgYmUgdHJ1bmNhdGVkIHByaW9yIHRvIHRoZSBydW4uIFVzZSB0aGlzIHRvXG4gICAqIGNvbnRyb2wgdGhlIGludGlhbCBjb250ZXh0IHdpbmRvdyBvZiB0aGUgcnVuLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUcnVuY2F0aW9uU3RyYXRlZ3kge1xuICAgIC8qKlxuICAgICAqIFRoZSB0cnVuY2F0aW9uIHN0cmF0ZWd5IHRvIHVzZSBmb3IgdGhlIHRocmVhZC4gVGhlIGRlZmF1bHQgaXMgYGF1dG9gLiBJZiBzZXQgdG9cbiAgICAgKiBgbGFzdF9tZXNzYWdlc2AsIHRoZSB0aHJlYWQgd2lsbCBiZSB0cnVuY2F0ZWQgdG8gdGhlIG4gbW9zdCByZWNlbnQgbWVzc2FnZXMgaW5cbiAgICAgKiB0aGUgdGhyZWFkLiBXaGVuIHNldCB0byBgYXV0b2AsIG1lc3NhZ2VzIGluIHRoZSBtaWRkbGUgb2YgdGhlIHRocmVhZCB3aWxsIGJlXG4gICAgICogZHJvcHBlZCB0byBmaXQgdGhlIGNvbnRleHQgbGVuZ3RoIG9mIHRoZSBtb2RlbCwgYG1heF9wcm9tcHRfdG9rZW5zYC5cbiAgICAgKi9cbiAgICB0eXBlOiAnYXV0bycgfCAnbGFzdF9tZXNzYWdlcyc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIG1vc3QgcmVjZW50IG1lc3NhZ2VzIGZyb20gdGhlIHRocmVhZCB3aGVuIGNvbnN0cnVjdGluZyB0aGUgY29udGV4dFxuICAgICAqIGZvciB0aGUgcnVuLlxuICAgICAqL1xuICAgIGxhc3RfbWVzc2FnZXM/OiBudW1iZXIgfCBudWxsO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIFJ1blN1Ym1pdFRvb2xPdXRwdXRzUGFyYW1zID1cbiAgfCBSdW5TdWJtaXRUb29sT3V0cHV0c1BhcmFtc05vblN0cmVhbWluZ1xuICB8IFJ1blN1Ym1pdFRvb2xPdXRwdXRzUGFyYW1zU3RyZWFtaW5nO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJ1blN1Ym1pdFRvb2xPdXRwdXRzUGFyYW1zQmFzZSB7XG4gIC8qKlxuICAgKiBBIGxpc3Qgb2YgdG9vbHMgZm9yIHdoaWNoIHRoZSBvdXRwdXRzIGFyZSBiZWluZyBzdWJtaXR0ZWQuXG4gICAqL1xuICB0b29sX291dHB1dHM6IEFycmF5PFJ1blN1Ym1pdFRvb2xPdXRwdXRzUGFyYW1zLlRvb2xPdXRwdXQ+O1xuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHJldHVybnMgYSBzdHJlYW0gb2YgZXZlbnRzIHRoYXQgaGFwcGVuIGR1cmluZyB0aGUgUnVuIGFzIHNlcnZlci1zZW50XG4gICAqIGV2ZW50cywgdGVybWluYXRpbmcgd2hlbiB0aGUgUnVuIGVudGVycyBhIHRlcm1pbmFsIHN0YXRlIHdpdGggYSBgZGF0YTogW0RPTkVdYFxuICAgKiBtZXNzYWdlLlxuICAgKi9cbiAgc3RyZWFtPzogYm9vbGVhbiB8IG51bGw7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgUnVuU3VibWl0VG9vbE91dHB1dHNQYXJhbXMge1xuICBleHBvcnQgaW50ZXJmYWNlIFRvb2xPdXRwdXQge1xuICAgIC8qKlxuICAgICAqIFRoZSBvdXRwdXQgb2YgdGhlIHRvb2wgY2FsbCB0byBiZSBzdWJtaXR0ZWQgdG8gY29udGludWUgdGhlIHJ1bi5cbiAgICAgKi9cbiAgICBvdXRwdXQ/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgSUQgb2YgdGhlIHRvb2wgY2FsbCBpbiB0aGUgYHJlcXVpcmVkX2FjdGlvbmAgb2JqZWN0IHdpdGhpbiB0aGUgcnVuIG9iamVjdFxuICAgICAqIHRoZSBvdXRwdXQgaXMgYmVpbmcgc3VibWl0dGVkIGZvci5cbiAgICAgKi9cbiAgICB0b29sX2NhbGxfaWQ/OiBzdHJpbmc7XG4gIH1cblxuICBleHBvcnQgdHlwZSBSdW5TdWJtaXRUb29sT3V0cHV0c1BhcmFtc05vblN0cmVhbWluZyA9IFJ1bnNBUEkuUnVuU3VibWl0VG9vbE91dHB1dHNQYXJhbXNOb25TdHJlYW1pbmc7XG4gIGV4cG9ydCB0eXBlIFJ1blN1Ym1pdFRvb2xPdXRwdXRzUGFyYW1zU3RyZWFtaW5nID0gUnVuc0FQSS5SdW5TdWJtaXRUb29sT3V0cHV0c1BhcmFtc1N0cmVhbWluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSdW5TdWJtaXRUb29sT3V0cHV0c1BhcmFtc05vblN0cmVhbWluZyBleHRlbmRzIFJ1blN1Ym1pdFRvb2xPdXRwdXRzUGFyYW1zQmFzZSB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHJldHVybnMgYSBzdHJlYW0gb2YgZXZlbnRzIHRoYXQgaGFwcGVuIGR1cmluZyB0aGUgUnVuIGFzIHNlcnZlci1zZW50XG4gICAqIGV2ZW50cywgdGVybWluYXRpbmcgd2hlbiB0aGUgUnVuIGVudGVycyBhIHRlcm1pbmFsIHN0YXRlIHdpdGggYSBgZGF0YTogW0RPTkVdYFxuICAgKiBtZXNzYWdlLlxuICAgKi9cbiAgc3RyZWFtPzogZmFsc2UgfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJ1blN1Ym1pdFRvb2xPdXRwdXRzUGFyYW1zU3RyZWFtaW5nIGV4dGVuZHMgUnVuU3VibWl0VG9vbE91dHB1dHNQYXJhbXNCYXNlIHtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgcmV0dXJucyBhIHN0cmVhbSBvZiBldmVudHMgdGhhdCBoYXBwZW4gZHVyaW5nIHRoZSBSdW4gYXMgc2VydmVyLXNlbnRcbiAgICogZXZlbnRzLCB0ZXJtaW5hdGluZyB3aGVuIHRoZSBSdW4gZW50ZXJzIGEgdGVybWluYWwgc3RhdGUgd2l0aCBhIGBkYXRhOiBbRE9ORV1gXG4gICAqIG1lc3NhZ2UuXG4gICAqL1xuICBzdHJlYW06IHRydWU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUnVuU3VibWl0VG9vbE91dHB1dHNBbmRQb2xsUGFyYW1zIHtcbiAgLyoqXG4gICAqIEEgbGlzdCBvZiB0b29scyBmb3Igd2hpY2ggdGhlIG91dHB1dHMgYXJlIGJlaW5nIHN1Ym1pdHRlZC5cbiAgICovXG4gIHRvb2xfb3V0cHV0czogQXJyYXk8UnVuU3VibWl0VG9vbE91dHB1dHNBbmRQb2xsUGFyYW1zLlRvb2xPdXRwdXQ+O1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFJ1blN1Ym1pdFRvb2xPdXRwdXRzQW5kUG9sbFBhcmFtcyB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgVG9vbE91dHB1dCB7XG4gICAgLyoqXG4gICAgICogVGhlIG91dHB1dCBvZiB0aGUgdG9vbCBjYWxsIHRvIGJlIHN1Ym1pdHRlZCB0byBjb250aW51ZSB0aGUgcnVuLlxuICAgICAqL1xuICAgIG91dHB1dD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBJRCBvZiB0aGUgdG9vbCBjYWxsIGluIHRoZSBgcmVxdWlyZWRfYWN0aW9uYCBvYmplY3Qgd2l0aGluIHRoZSBydW4gb2JqZWN0XG4gICAgICogdGhlIG91dHB1dCBpcyBiZWluZyBzdWJtaXR0ZWQgZm9yLlxuICAgICAqL1xuICAgIHRvb2xfY2FsbF9pZD86IHN0cmluZztcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJ1blN1Ym1pdFRvb2xPdXRwdXRzU3RyZWFtUGFyYW1zIHtcbiAgLyoqXG4gICAqIEEgbGlzdCBvZiB0b29scyBmb3Igd2hpY2ggdGhlIG91dHB1dHMgYXJlIGJlaW5nIHN1Ym1pdHRlZC5cbiAgICovXG4gIHRvb2xfb3V0cHV0czogQXJyYXk8UnVuU3VibWl0VG9vbE91dHB1dHNTdHJlYW1QYXJhbXMuVG9vbE91dHB1dD47XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgUnVuU3VibWl0VG9vbE91dHB1dHNTdHJlYW1QYXJhbXMge1xuICBleHBvcnQgaW50ZXJmYWNlIFRvb2xPdXRwdXQge1xuICAgIC8qKlxuICAgICAqIFRoZSBvdXRwdXQgb2YgdGhlIHRvb2wgY2FsbCB0byBiZSBzdWJtaXR0ZWQgdG8gY29udGludWUgdGhlIHJ1bi5cbiAgICAgKi9cbiAgICBvdXRwdXQ/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgSUQgb2YgdGhlIHRvb2wgY2FsbCBpbiB0aGUgYHJlcXVpcmVkX2FjdGlvbmAgb2JqZWN0IHdpdGhpbiB0aGUgcnVuIG9iamVjdFxuICAgICAqIHRoZSBvdXRwdXQgaXMgYmVpbmcgc3VibWl0dGVkIGZvci5cbiAgICAgKi9cbiAgICB0b29sX2NhbGxfaWQ/OiBzdHJpbmc7XG4gIH1cbn1cblxuUnVucy5SdW5zUGFnZSA9IFJ1bnNQYWdlO1xuUnVucy5TdGVwcyA9IFN0ZXBzO1xuUnVucy5SdW5TdGVwc1BhZ2UgPSBSdW5TdGVwc1BhZ2U7XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBSdW5zIHtcbiAgZXhwb3J0IHtcbiAgICB0eXBlIFJlcXVpcmVkQWN0aW9uRnVuY3Rpb25Ub29sQ2FsbCBhcyBSZXF1aXJlZEFjdGlvbkZ1bmN0aW9uVG9vbENhbGwsXG4gICAgdHlwZSBSdW4gYXMgUnVuLFxuICAgIHR5cGUgUnVuU3RhdHVzIGFzIFJ1blN0YXR1cyxcbiAgICBSdW5zUGFnZSBhcyBSdW5zUGFnZSxcbiAgICB0eXBlIFJ1bkNyZWF0ZVBhcmFtcyBhcyBSdW5DcmVhdGVQYXJhbXMsXG4gICAgdHlwZSBSdW5DcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcgYXMgUnVuQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nLFxuICAgIHR5cGUgUnVuQ3JlYXRlUGFyYW1zU3RyZWFtaW5nIGFzIFJ1bkNyZWF0ZVBhcmFtc1N0cmVhbWluZyxcbiAgICB0eXBlIFJ1blVwZGF0ZVBhcmFtcyBhcyBSdW5VcGRhdGVQYXJhbXMsXG4gICAgdHlwZSBSdW5MaXN0UGFyYW1zIGFzIFJ1bkxpc3RQYXJhbXMsXG4gICAgdHlwZSBSdW5DcmVhdGVBbmRQb2xsUGFyYW1zLFxuICAgIHR5cGUgUnVuQ3JlYXRlQW5kU3RyZWFtUGFyYW1zLFxuICAgIHR5cGUgUnVuU3RyZWFtUGFyYW1zLFxuICAgIHR5cGUgUnVuU3VibWl0VG9vbE91dHB1dHNQYXJhbXMgYXMgUnVuU3VibWl0VG9vbE91dHB1dHNQYXJhbXMsXG4gICAgdHlwZSBSdW5TdWJtaXRUb29sT3V0cHV0c1BhcmFtc05vblN0cmVhbWluZyBhcyBSdW5TdWJtaXRUb29sT3V0cHV0c1BhcmFtc05vblN0cmVhbWluZyxcbiAgICB0eXBlIFJ1blN1Ym1pdFRvb2xPdXRwdXRzUGFyYW1zU3RyZWFtaW5nIGFzIFJ1blN1Ym1pdFRvb2xPdXRwdXRzUGFyYW1zU3RyZWFtaW5nLFxuICAgIHR5cGUgUnVuU3VibWl0VG9vbE91dHB1dHNBbmRQb2xsUGFyYW1zLFxuICAgIHR5cGUgUnVuU3VibWl0VG9vbE91dHB1dHNTdHJlYW1QYXJhbXMsXG4gIH07XG5cbiAgZXhwb3J0IHtcbiAgICBTdGVwcyBhcyBTdGVwcyxcbiAgICB0eXBlIENvZGVJbnRlcnByZXRlckxvZ3MgYXMgQ29kZUludGVycHJldGVyTG9ncyxcbiAgICB0eXBlIENvZGVJbnRlcnByZXRlck91dHB1dEltYWdlIGFzIENvZGVJbnRlcnByZXRlck91dHB1dEltYWdlLFxuICAgIHR5cGUgQ29kZUludGVycHJldGVyVG9vbENhbGwgYXMgQ29kZUludGVycHJldGVyVG9vbENhbGwsXG4gICAgdHlwZSBDb2RlSW50ZXJwcmV0ZXJUb29sQ2FsbERlbHRhIGFzIENvZGVJbnRlcnByZXRlclRvb2xDYWxsRGVsdGEsXG4gICAgdHlwZSBGaWxlU2VhcmNoVG9vbENhbGwgYXMgRmlsZVNlYXJjaFRvb2xDYWxsLFxuICAgIHR5cGUgRmlsZVNlYXJjaFRvb2xDYWxsRGVsdGEgYXMgRmlsZVNlYXJjaFRvb2xDYWxsRGVsdGEsXG4gICAgdHlwZSBGdW5jdGlvblRvb2xDYWxsIGFzIEZ1bmN0aW9uVG9vbENhbGwsXG4gICAgdHlwZSBGdW5jdGlvblRvb2xDYWxsRGVsdGEgYXMgRnVuY3Rpb25Ub29sQ2FsbERlbHRhLFxuICAgIHR5cGUgTWVzc2FnZUNyZWF0aW9uU3RlcERldGFpbHMgYXMgTWVzc2FnZUNyZWF0aW9uU3RlcERldGFpbHMsXG4gICAgdHlwZSBSdW5TdGVwIGFzIFJ1blN0ZXAsXG4gICAgdHlwZSBSdW5TdGVwRGVsdGEgYXMgUnVuU3RlcERlbHRhLFxuICAgIHR5cGUgUnVuU3RlcERlbHRhRXZlbnQgYXMgUnVuU3RlcERlbHRhRXZlbnQsXG4gICAgdHlwZSBSdW5TdGVwRGVsdGFNZXNzYWdlRGVsdGEgYXMgUnVuU3RlcERlbHRhTWVzc2FnZURlbHRhLFxuICAgIHR5cGUgUnVuU3RlcEluY2x1ZGUgYXMgUnVuU3RlcEluY2x1ZGUsXG4gICAgdHlwZSBUb29sQ2FsbCBhcyBUb29sQ2FsbCxcbiAgICB0eXBlIFRvb2xDYWxsRGVsdGEgYXMgVG9vbENhbGxEZWx0YSxcbiAgICB0eXBlIFRvb2xDYWxsRGVsdGFPYmplY3QgYXMgVG9vbENhbGxEZWx0YU9iamVjdCxcbiAgICB0eXBlIFRvb2xDYWxsc1N0ZXBEZXRhaWxzIGFzIFRvb2xDYWxsc1N0ZXBEZXRhaWxzLFxuICAgIFJ1blN0ZXBzUGFnZSBhcyBSdW5TdGVwc1BhZ2UsXG4gICAgdHlwZSBTdGVwUmV0cmlldmVQYXJhbXMgYXMgU3RlcFJldHJpZXZlUGFyYW1zLFxuICAgIHR5cGUgU3RlcExpc3RQYXJhbXMgYXMgU3RlcExpc3RQYXJhbXMsXG4gIH07XG59XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICcuLi8uLi8uLi9yZXNvdXJjZSc7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vY29yZSc7XG5pbXBvcnQgeyBBc3Npc3RhbnRTdHJlYW0sIFRocmVhZENyZWF0ZUFuZFJ1blBhcmFtc0Jhc2VTdHJlYW0gfSBmcm9tICcuLi8uLi8uLi9saWIvQXNzaXN0YW50U3RyZWFtJztcbmltcG9ydCB7IEFQSVByb21pc2UgfSBmcm9tICcuLi8uLi8uLi9jb3JlJztcbmltcG9ydCAqIGFzIENvcmUgZnJvbSAnLi4vLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyBUaHJlYWRzQVBJIGZyb20gJy4vdGhyZWFkcyc7XG5pbXBvcnQgKiBhcyBTaGFyZWQgZnJvbSAnLi4vLi4vc2hhcmVkJztcbmltcG9ydCAqIGFzIEFzc2lzdGFudHNBUEkgZnJvbSAnLi4vYXNzaXN0YW50cyc7XG5pbXBvcnQgKiBhcyBNZXNzYWdlc0FQSSBmcm9tICcuL21lc3NhZ2VzJztcbmltcG9ydCB7XG4gIEFubm90YXRpb24sXG4gIEFubm90YXRpb25EZWx0YSxcbiAgRmlsZUNpdGF0aW9uQW5ub3RhdGlvbixcbiAgRmlsZUNpdGF0aW9uRGVsdGFBbm5vdGF0aW9uLFxuICBGaWxlUGF0aEFubm90YXRpb24sXG4gIEZpbGVQYXRoRGVsdGFBbm5vdGF0aW9uLFxuICBJbWFnZUZpbGUsXG4gIEltYWdlRmlsZUNvbnRlbnRCbG9jayxcbiAgSW1hZ2VGaWxlRGVsdGEsXG4gIEltYWdlRmlsZURlbHRhQmxvY2ssXG4gIEltYWdlVVJMLFxuICBJbWFnZVVSTENvbnRlbnRCbG9jayxcbiAgSW1hZ2VVUkxEZWx0YSxcbiAgSW1hZ2VVUkxEZWx0YUJsb2NrLFxuICBNZXNzYWdlIGFzIE1lc3NhZ2VzQVBJTWVzc2FnZSxcbiAgTWVzc2FnZUNvbnRlbnQsXG4gIE1lc3NhZ2VDb250ZW50RGVsdGEsXG4gIE1lc3NhZ2VDb250ZW50UGFydFBhcmFtLFxuICBNZXNzYWdlQ3JlYXRlUGFyYW1zLFxuICBNZXNzYWdlRGVsZXRlZCxcbiAgTWVzc2FnZURlbHRhLFxuICBNZXNzYWdlRGVsdGFFdmVudCxcbiAgTWVzc2FnZUxpc3RQYXJhbXMsXG4gIE1lc3NhZ2VVcGRhdGVQYXJhbXMsXG4gIE1lc3NhZ2VzLFxuICBNZXNzYWdlc1BhZ2UsXG4gIFJlZnVzYWxDb250ZW50QmxvY2ssXG4gIFJlZnVzYWxEZWx0YUJsb2NrLFxuICBUZXh0LFxuICBUZXh0Q29udGVudEJsb2NrLFxuICBUZXh0Q29udGVudEJsb2NrUGFyYW0sXG4gIFRleHREZWx0YSxcbiAgVGV4dERlbHRhQmxvY2ssXG59IGZyb20gJy4vbWVzc2FnZXMnO1xuaW1wb3J0ICogYXMgUnVuc0FQSSBmcm9tICcuL3J1bnMvcnVucyc7XG5pbXBvcnQge1xuICBSZXF1aXJlZEFjdGlvbkZ1bmN0aW9uVG9vbENhbGwsXG4gIFJ1bixcbiAgUnVuQ3JlYXRlQW5kUG9sbFBhcmFtcyxcbiAgUnVuQ3JlYXRlQW5kU3RyZWFtUGFyYW1zLFxuICBSdW5DcmVhdGVQYXJhbXMsXG4gIFJ1bkNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyxcbiAgUnVuQ3JlYXRlUGFyYW1zU3RyZWFtaW5nLFxuICBSdW5MaXN0UGFyYW1zLFxuICBSdW5TdGF0dXMsXG4gIFJ1blN0cmVhbVBhcmFtcyxcbiAgUnVuU3VibWl0VG9vbE91dHB1dHNBbmRQb2xsUGFyYW1zLFxuICBSdW5TdWJtaXRUb29sT3V0cHV0c1BhcmFtcyxcbiAgUnVuU3VibWl0VG9vbE91dHB1dHNQYXJhbXNOb25TdHJlYW1pbmcsXG4gIFJ1blN1Ym1pdFRvb2xPdXRwdXRzUGFyYW1zU3RyZWFtaW5nLFxuICBSdW5TdWJtaXRUb29sT3V0cHV0c1N0cmVhbVBhcmFtcyxcbiAgUnVuVXBkYXRlUGFyYW1zLFxuICBSdW5zLFxuICBSdW5zUGFnZSxcbn0gZnJvbSAnLi9ydW5zL3J1bnMnO1xuaW1wb3J0IHsgU3RyZWFtIH0gZnJvbSAnLi4vLi4vLi4vc3RyZWFtaW5nJztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGUgQXNzaXN0YW50cyBBUEkgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgUmVzcG9uc2VzIEFQSVxuICovXG5leHBvcnQgY2xhc3MgVGhyZWFkcyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgcnVuczogUnVuc0FQSS5SdW5zID0gbmV3IFJ1bnNBUEkuUnVucyh0aGlzLl9jbGllbnQpO1xuICBtZXNzYWdlczogTWVzc2FnZXNBUEkuTWVzc2FnZXMgPSBuZXcgTWVzc2FnZXNBUEkuTWVzc2FnZXModGhpcy5fY2xpZW50KTtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgdGhyZWFkLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBUaGUgQXNzaXN0YW50cyBBUEkgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgUmVzcG9uc2VzIEFQSVxuICAgKi9cbiAgY3JlYXRlKGJvZHk/OiBUaHJlYWRDcmVhdGVQYXJhbXMsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5BUElQcm9taXNlPFRocmVhZD47XG4gIGNyZWF0ZShvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IENvcmUuQVBJUHJvbWlzZTxUaHJlYWQ+O1xuICBjcmVhdGUoXG4gICAgYm9keTogVGhyZWFkQ3JlYXRlUGFyYW1zIHwgQ29yZS5SZXF1ZXN0T3B0aW9ucyA9IHt9LFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLkFQSVByb21pc2U8VGhyZWFkPiB7XG4gICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMoYm9keSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZSh7fSwgYm9keSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL3RocmVhZHMnLCB7XG4gICAgICBib2R5LFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIGEgdGhyZWFkLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBUaGUgQXNzaXN0YW50cyBBUEkgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgUmVzcG9uc2VzIEFQSVxuICAgKi9cbiAgcmV0cmlldmUodGhyZWFkSWQ6IHN0cmluZywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkFQSVByb21pc2U8VGhyZWFkPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC90aHJlYWRzLyR7dGhyZWFkSWR9YCwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTW9kaWZpZXMgYSB0aHJlYWQuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFRoZSBBc3Npc3RhbnRzIEFQSSBpcyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIHRoZSBSZXNwb25zZXMgQVBJXG4gICAqL1xuICB1cGRhdGUodGhyZWFkSWQ6IHN0cmluZywgYm9keTogVGhyZWFkVXBkYXRlUGFyYW1zLCBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IENvcmUuQVBJUHJvbWlzZTxUaHJlYWQ+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC90aHJlYWRzLyR7dGhyZWFkSWR9YCwge1xuICAgICAgYm9keSxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHRocmVhZC5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVGhlIEFzc2lzdGFudHMgQVBJIGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3Igb2YgdGhlIFJlc3BvbnNlcyBBUElcbiAgICovXG4gIGRlbCh0aHJlYWRJZDogc3RyaW5nLCBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IENvcmUuQVBJUHJvbWlzZTxUaHJlYWREZWxldGVkPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5kZWxldGUoYC90aHJlYWRzLyR7dGhyZWFkSWR9YCwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgdGhyZWFkIGFuZCBydW4gaXQgaW4gb25lIHJlcXVlc3QuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFRoZSBBc3Npc3RhbnRzIEFQSSBpcyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIHRoZSBSZXNwb25zZXMgQVBJXG4gICAqL1xuICBjcmVhdGVBbmRSdW4oXG4gICAgYm9keTogVGhyZWFkQ3JlYXRlQW5kUnVuUGFyYW1zTm9uU3RyZWFtaW5nLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBBUElQcm9taXNlPFJ1bnNBUEkuUnVuPjtcbiAgY3JlYXRlQW5kUnVuKFxuICAgIGJvZHk6IFRocmVhZENyZWF0ZUFuZFJ1blBhcmFtc1N0cmVhbWluZyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQVBJUHJvbWlzZTxTdHJlYW08QXNzaXN0YW50c0FQSS5Bc3Npc3RhbnRTdHJlYW1FdmVudD4+O1xuICBjcmVhdGVBbmRSdW4oXG4gICAgYm9keTogVGhyZWFkQ3JlYXRlQW5kUnVuUGFyYW1zQmFzZSxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQVBJUHJvbWlzZTxTdHJlYW08QXNzaXN0YW50c0FQSS5Bc3Npc3RhbnRTdHJlYW1FdmVudD4gfCBSdW5zQVBJLlJ1bj47XG4gIGNyZWF0ZUFuZFJ1bihcbiAgICBib2R5OiBUaHJlYWRDcmVhdGVBbmRSdW5QYXJhbXMsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IEFQSVByb21pc2U8UnVuc0FQSS5SdW4+IHwgQVBJUHJvbWlzZTxTdHJlYW08QXNzaXN0YW50c0FQSS5Bc3Npc3RhbnRTdHJlYW1FdmVudD4+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy90aHJlYWRzL3J1bnMnLCB7XG4gICAgICBib2R5LFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgICBzdHJlYW06IGJvZHkuc3RyZWFtID8/IGZhbHNlLFxuICAgIH0pIGFzIEFQSVByb21pc2U8UnVuc0FQSS5SdW4+IHwgQVBJUHJvbWlzZTxTdHJlYW08QXNzaXN0YW50c0FQSS5Bc3Npc3RhbnRTdHJlYW1FdmVudD4+O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgaGVscGVyIHRvIGNyZWF0ZSBhIHRocmVhZCwgc3RhcnQgYSBydW4gYW5kIHRoZW4gcG9sbCBmb3IgYSB0ZXJtaW5hbCBzdGF0ZS5cbiAgICogTW9yZSBpbmZvcm1hdGlvbiBvbiBSdW4gbGlmZWN5Y2xlcyBjYW4gYmUgZm91bmQgaGVyZTpcbiAgICogaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXNzaXN0YW50cy9ob3ctaXQtd29ya3MvcnVucy1hbmQtcnVuLXN0ZXBzXG4gICAqL1xuICBhc3luYyBjcmVhdGVBbmRSdW5Qb2xsKFxuICAgIGJvZHk6IFRocmVhZENyZWF0ZUFuZFJ1blBhcmFtc05vblN0cmVhbWluZyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyAmIHsgcG9sbEludGVydmFsTXM/OiBudW1iZXIgfSxcbiAgKTogUHJvbWlzZTxUaHJlYWRzLlJ1bj4ge1xuICAgIGNvbnN0IHJ1biA9IGF3YWl0IHRoaXMuY3JlYXRlQW5kUnVuKGJvZHksIG9wdGlvbnMpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnJ1bnMucG9sbChydW4udGhyZWFkX2lkLCBydW4uaWQsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHRocmVhZCBhbmQgc3RyZWFtIHRoZSBydW4gYmFja1xuICAgKi9cbiAgY3JlYXRlQW5kUnVuU3RyZWFtKFxuICAgIGJvZHk6IFRocmVhZENyZWF0ZUFuZFJ1blBhcmFtc0Jhc2VTdHJlYW0sXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IEFzc2lzdGFudFN0cmVhbSB7XG4gICAgcmV0dXJuIEFzc2lzdGFudFN0cmVhbS5jcmVhdGVUaHJlYWRBc3Npc3RhbnRTdHJlYW0oYm9keSwgdGhpcy5fY2xpZW50LmJldGEudGhyZWFkcywgb3B0aW9ucyk7XG4gIH1cbn1cblxuLyoqXG4gKiBTcGVjaWZpZXMgdGhlIGZvcm1hdCB0aGF0IHRoZSBtb2RlbCBtdXN0IG91dHB1dC4gQ29tcGF0aWJsZSB3aXRoXG4gKiBbR1BULTRvXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9tb2RlbHMjZ3B0LTRvKSxcbiAqIFtHUFQtNCBUdXJib10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvbW9kZWxzI2dwdC00LXR1cmJvLWFuZC1ncHQtNCksXG4gKiBhbmQgYWxsIEdQVC0zLjUgVHVyYm8gbW9kZWxzIHNpbmNlIGBncHQtMy41LXR1cmJvLTExMDZgLlxuICpcbiAqIFNldHRpbmcgdG8gYHsgXCJ0eXBlXCI6IFwianNvbl9zY2hlbWFcIiwgXCJqc29uX3NjaGVtYVwiOiB7Li4ufSB9YCBlbmFibGVzIFN0cnVjdHVyZWRcbiAqIE91dHB1dHMgd2hpY2ggZW5zdXJlcyB0aGUgbW9kZWwgd2lsbCBtYXRjaCB5b3VyIHN1cHBsaWVkIEpTT04gc2NoZW1hLiBMZWFybiBtb3JlXG4gKiBpbiB0aGVcbiAqIFtTdHJ1Y3R1cmVkIE91dHB1dHMgZ3VpZGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9zdHJ1Y3R1cmVkLW91dHB1dHMpLlxuICpcbiAqIFNldHRpbmcgdG8gYHsgXCJ0eXBlXCI6IFwianNvbl9vYmplY3RcIiB9YCBlbmFibGVzIEpTT04gbW9kZSwgd2hpY2ggZW5zdXJlcyB0aGVcbiAqIG1lc3NhZ2UgdGhlIG1vZGVsIGdlbmVyYXRlcyBpcyB2YWxpZCBKU09OLlxuICpcbiAqICoqSW1wb3J0YW50OioqIHdoZW4gdXNpbmcgSlNPTiBtb2RlLCB5b3UgKiptdXN0KiogYWxzbyBpbnN0cnVjdCB0aGUgbW9kZWwgdG9cbiAqIHByb2R1Y2UgSlNPTiB5b3Vyc2VsZiB2aWEgYSBzeXN0ZW0gb3IgdXNlciBtZXNzYWdlLiBXaXRob3V0IHRoaXMsIHRoZSBtb2RlbCBtYXlcbiAqIGdlbmVyYXRlIGFuIHVuZW5kaW5nIHN0cmVhbSBvZiB3aGl0ZXNwYWNlIHVudGlsIHRoZSBnZW5lcmF0aW9uIHJlYWNoZXMgdGhlIHRva2VuXG4gKiBsaW1pdCwgcmVzdWx0aW5nIGluIGEgbG9uZy1ydW5uaW5nIGFuZCBzZWVtaW5nbHkgXCJzdHVja1wiIHJlcXVlc3QuIEFsc28gbm90ZSB0aGF0XG4gKiB0aGUgbWVzc2FnZSBjb250ZW50IG1heSBiZSBwYXJ0aWFsbHkgY3V0IG9mZiBpZiBgZmluaXNoX3JlYXNvbj1cImxlbmd0aFwiYCwgd2hpY2hcbiAqIGluZGljYXRlcyB0aGUgZ2VuZXJhdGlvbiBleGNlZWRlZCBgbWF4X3Rva2Vuc2Agb3IgdGhlIGNvbnZlcnNhdGlvbiBleGNlZWRlZCB0aGVcbiAqIG1heCBjb250ZXh0IGxlbmd0aC5cbiAqL1xuZXhwb3J0IHR5cGUgQXNzaXN0YW50UmVzcG9uc2VGb3JtYXRPcHRpb24gPVxuICB8ICdhdXRvJ1xuICB8IFNoYXJlZC5SZXNwb25zZUZvcm1hdFRleHRcbiAgfCBTaGFyZWQuUmVzcG9uc2VGb3JtYXRKU09OT2JqZWN0XG4gIHwgU2hhcmVkLlJlc3BvbnNlRm9ybWF0SlNPTlNjaGVtYTtcblxuLyoqXG4gKiBTcGVjaWZpZXMgYSB0b29sIHRoZSBtb2RlbCBzaG91bGQgdXNlLiBVc2UgdG8gZm9yY2UgdGhlIG1vZGVsIHRvIGNhbGwgYSBzcGVjaWZpY1xuICogdG9vbC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBc3Npc3RhbnRUb29sQ2hvaWNlIHtcbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSB0b29sLiBJZiB0eXBlIGlzIGBmdW5jdGlvbmAsIHRoZSBmdW5jdGlvbiBuYW1lIG11c3QgYmUgc2V0XG4gICAqL1xuICB0eXBlOiAnZnVuY3Rpb24nIHwgJ2NvZGVfaW50ZXJwcmV0ZXInIHwgJ2ZpbGVfc2VhcmNoJztcblxuICBmdW5jdGlvbj86IEFzc2lzdGFudFRvb2xDaG9pY2VGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBc3Npc3RhbnRUb29sQ2hvaWNlRnVuY3Rpb24ge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uIHRvIGNhbGwuXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQ29udHJvbHMgd2hpY2ggKGlmIGFueSkgdG9vbCBpcyBjYWxsZWQgYnkgdGhlIG1vZGVsLiBgbm9uZWAgbWVhbnMgdGhlIG1vZGVsIHdpbGxcbiAqIG5vdCBjYWxsIGFueSB0b29scyBhbmQgaW5zdGVhZCBnZW5lcmF0ZXMgYSBtZXNzYWdlLiBgYXV0b2AgaXMgdGhlIGRlZmF1bHQgdmFsdWVcbiAqIGFuZCBtZWFucyB0aGUgbW9kZWwgY2FuIHBpY2sgYmV0d2VlbiBnZW5lcmF0aW5nIGEgbWVzc2FnZSBvciBjYWxsaW5nIG9uZSBvciBtb3JlXG4gKiB0b29scy4gYHJlcXVpcmVkYCBtZWFucyB0aGUgbW9kZWwgbXVzdCBjYWxsIG9uZSBvciBtb3JlIHRvb2xzIGJlZm9yZSByZXNwb25kaW5nXG4gKiB0byB0aGUgdXNlci4gU3BlY2lmeWluZyBhIHBhcnRpY3VsYXIgdG9vbCBsaWtlIGB7XCJ0eXBlXCI6IFwiZmlsZV9zZWFyY2hcIn1gIG9yXG4gKiBge1widHlwZVwiOiBcImZ1bmN0aW9uXCIsIFwiZnVuY3Rpb25cIjoge1wibmFtZVwiOiBcIm15X2Z1bmN0aW9uXCJ9fWAgZm9yY2VzIHRoZSBtb2RlbCB0b1xuICogY2FsbCB0aGF0IHRvb2wuXG4gKi9cbmV4cG9ydCB0eXBlIEFzc2lzdGFudFRvb2xDaG9pY2VPcHRpb24gPSAnbm9uZScgfCAnYXV0bycgfCAncmVxdWlyZWQnIHwgQXNzaXN0YW50VG9vbENob2ljZTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgdGhyZWFkIHRoYXQgY29udGFpbnNcbiAqIFttZXNzYWdlc10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9tZXNzYWdlcykuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkIHtcbiAgLyoqXG4gICAqIFRoZSBpZGVudGlmaWVyLCB3aGljaCBjYW4gYmUgcmVmZXJlbmNlZCBpbiBBUEkgZW5kcG9pbnRzLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSBmb3Igd2hlbiB0aGUgdGhyZWFkIHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZF9hdDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgKlxuICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbWV0YWRhdGE6IFNoYXJlZC5NZXRhZGF0YSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBvYmplY3QgdHlwZSwgd2hpY2ggaXMgYWx3YXlzIGB0aHJlYWRgLlxuICAgKi9cbiAgb2JqZWN0OiAndGhyZWFkJztcblxuICAvKipcbiAgICogQSBzZXQgb2YgcmVzb3VyY2VzIHRoYXQgYXJlIG1hZGUgYXZhaWxhYmxlIHRvIHRoZSBhc3Npc3RhbnQncyB0b29scyBpbiB0aGlzXG4gICAqIHRocmVhZC4gVGhlIHJlc291cmNlcyBhcmUgc3BlY2lmaWMgdG8gdGhlIHR5cGUgb2YgdG9vbC4gRm9yIGV4YW1wbGUsIHRoZVxuICAgKiBgY29kZV9pbnRlcnByZXRlcmAgdG9vbCByZXF1aXJlcyBhIGxpc3Qgb2YgZmlsZSBJRHMsIHdoaWxlIHRoZSBgZmlsZV9zZWFyY2hgXG4gICAqIHRvb2wgcmVxdWlyZXMgYSBsaXN0IG9mIHZlY3RvciBzdG9yZSBJRHMuXG4gICAqL1xuICB0b29sX3Jlc291cmNlczogVGhyZWFkLlRvb2xSZXNvdXJjZXMgfCBudWxsO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFRocmVhZCB7XG4gIC8qKlxuICAgKiBBIHNldCBvZiByZXNvdXJjZXMgdGhhdCBhcmUgbWFkZSBhdmFpbGFibGUgdG8gdGhlIGFzc2lzdGFudCdzIHRvb2xzIGluIHRoaXNcbiAgICogdGhyZWFkLiBUaGUgcmVzb3VyY2VzIGFyZSBzcGVjaWZpYyB0byB0aGUgdHlwZSBvZiB0b29sLiBGb3IgZXhhbXBsZSwgdGhlXG4gICAqIGBjb2RlX2ludGVycHJldGVyYCB0b29sIHJlcXVpcmVzIGEgbGlzdCBvZiBmaWxlIElEcywgd2hpbGUgdGhlIGBmaWxlX3NlYXJjaGBcbiAgICogdG9vbCByZXF1aXJlcyBhIGxpc3Qgb2YgdmVjdG9yIHN0b3JlIElEcy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVG9vbFJlc291cmNlcyB7XG4gICAgY29kZV9pbnRlcnByZXRlcj86IFRvb2xSZXNvdXJjZXMuQ29kZUludGVycHJldGVyO1xuXG4gICAgZmlsZV9zZWFyY2g/OiBUb29sUmVzb3VyY2VzLkZpbGVTZWFyY2g7XG4gIH1cblxuICBleHBvcnQgbmFtZXNwYWNlIFRvb2xSZXNvdXJjZXMge1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29kZUludGVycHJldGVyIHtcbiAgICAgIC8qKlxuICAgICAgICogQSBsaXN0IG9mIFtmaWxlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2ZpbGVzKSBJRHMgbWFkZVxuICAgICAgICogYXZhaWxhYmxlIHRvIHRoZSBgY29kZV9pbnRlcnByZXRlcmAgdG9vbC4gVGhlcmUgY2FuIGJlIGEgbWF4aW11bSBvZiAyMCBmaWxlc1xuICAgICAgICogYXNzb2NpYXRlZCB3aXRoIHRoZSB0b29sLlxuICAgICAgICovXG4gICAgICBmaWxlX2lkcz86IEFycmF5PHN0cmluZz47XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBGaWxlU2VhcmNoIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlXG4gICAgICAgKiBbdmVjdG9yIHN0b3JlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3ZlY3Rvci1zdG9yZXMvb2JqZWN0KVxuICAgICAgICogYXR0YWNoZWQgdG8gdGhpcyB0aHJlYWQuIFRoZXJlIGNhbiBiZSBhIG1heGltdW0gb2YgMSB2ZWN0b3Igc3RvcmUgYXR0YWNoZWQgdG9cbiAgICAgICAqIHRoZSB0aHJlYWQuXG4gICAgICAgKi9cbiAgICAgIHZlY3Rvcl9zdG9yZV9pZHM/OiBBcnJheTxzdHJpbmc+O1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRocmVhZERlbGV0ZWQge1xuICBpZDogc3RyaW5nO1xuXG4gIGRlbGV0ZWQ6IGJvb2xlYW47XG5cbiAgb2JqZWN0OiAndGhyZWFkLmRlbGV0ZWQnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRocmVhZENyZWF0ZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBBIGxpc3Qgb2YgW21lc3NhZ2VzXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL21lc3NhZ2VzKSB0b1xuICAgKiBzdGFydCB0aGUgdGhyZWFkIHdpdGguXG4gICAqL1xuICBtZXNzYWdlcz86IEFycmF5PFRocmVhZENyZWF0ZVBhcmFtcy5NZXNzYWdlPjtcblxuICAvKipcbiAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdCwgYW5kXG4gICAqIHF1ZXJ5aW5nIGZvciBvYmplY3RzIHZpYSBBUEkgb3IgdGhlIGRhc2hib2FyZC5cbiAgICpcbiAgICogS2V5cyBhcmUgc3RyaW5ncyB3aXRoIGEgbWF4aW11bSBsZW5ndGggb2YgNjQgY2hhcmFjdGVycy4gVmFsdWVzIGFyZSBzdHJpbmdzIHdpdGhcbiAgICogYSBtYXhpbXVtIGxlbmd0aCBvZiA1MTIgY2hhcmFjdGVycy5cbiAgICovXG4gIG1ldGFkYXRhPzogU2hhcmVkLk1ldGFkYXRhIHwgbnVsbDtcblxuICAvKipcbiAgICogQSBzZXQgb2YgcmVzb3VyY2VzIHRoYXQgYXJlIG1hZGUgYXZhaWxhYmxlIHRvIHRoZSBhc3Npc3RhbnQncyB0b29scyBpbiB0aGlzXG4gICAqIHRocmVhZC4gVGhlIHJlc291cmNlcyBhcmUgc3BlY2lmaWMgdG8gdGhlIHR5cGUgb2YgdG9vbC4gRm9yIGV4YW1wbGUsIHRoZVxuICAgKiBgY29kZV9pbnRlcnByZXRlcmAgdG9vbCByZXF1aXJlcyBhIGxpc3Qgb2YgZmlsZSBJRHMsIHdoaWxlIHRoZSBgZmlsZV9zZWFyY2hgXG4gICAqIHRvb2wgcmVxdWlyZXMgYSBsaXN0IG9mIHZlY3RvciBzdG9yZSBJRHMuXG4gICAqL1xuICB0b29sX3Jlc291cmNlcz86IFRocmVhZENyZWF0ZVBhcmFtcy5Ub29sUmVzb3VyY2VzIHwgbnVsbDtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBUaHJlYWRDcmVhdGVQYXJhbXMge1xuICBleHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2Uge1xuICAgIC8qKlxuICAgICAqIFRoZSB0ZXh0IGNvbnRlbnRzIG9mIHRoZSBtZXNzYWdlLlxuICAgICAqL1xuICAgIGNvbnRlbnQ6IHN0cmluZyB8IEFycmF5PE1lc3NhZ2VzQVBJLk1lc3NhZ2VDb250ZW50UGFydFBhcmFtPjtcblxuICAgIC8qKlxuICAgICAqIFRoZSByb2xlIG9mIHRoZSBlbnRpdHkgdGhhdCBpcyBjcmVhdGluZyB0aGUgbWVzc2FnZS4gQWxsb3dlZCB2YWx1ZXMgaW5jbHVkZTpcbiAgICAgKlxuICAgICAqIC0gYHVzZXJgOiBJbmRpY2F0ZXMgdGhlIG1lc3NhZ2UgaXMgc2VudCBieSBhbiBhY3R1YWwgdXNlciBhbmQgc2hvdWxkIGJlIHVzZWQgaW5cbiAgICAgKiAgIG1vc3QgY2FzZXMgdG8gcmVwcmVzZW50IHVzZXItZ2VuZXJhdGVkIG1lc3NhZ2VzLlxuICAgICAqIC0gYGFzc2lzdGFudGA6IEluZGljYXRlcyB0aGUgbWVzc2FnZSBpcyBnZW5lcmF0ZWQgYnkgdGhlIGFzc2lzdGFudC4gVXNlIHRoaXNcbiAgICAgKiAgIHZhbHVlIHRvIGluc2VydCBtZXNzYWdlcyBmcm9tIHRoZSBhc3Npc3RhbnQgaW50byB0aGUgY29udmVyc2F0aW9uLlxuICAgICAqL1xuICAgIHJvbGU6ICd1c2VyJyB8ICdhc3Npc3RhbnQnO1xuXG4gICAgLyoqXG4gICAgICogQSBsaXN0IG9mIGZpbGVzIGF0dGFjaGVkIHRvIHRoZSBtZXNzYWdlLCBhbmQgdGhlIHRvb2xzIHRoZXkgc2hvdWxkIGJlIGFkZGVkIHRvLlxuICAgICAqL1xuICAgIGF0dGFjaG1lbnRzPzogQXJyYXk8TWVzc2FnZS5BdHRhY2htZW50PiB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAgICogZm9yIHN0b3JpbmcgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb2JqZWN0IGluIGEgc3RydWN0dXJlZCBmb3JtYXQsIGFuZFxuICAgICAqIHF1ZXJ5aW5nIGZvciBvYmplY3RzIHZpYSBBUEkgb3IgdGhlIGRhc2hib2FyZC5cbiAgICAgKlxuICAgICAqIEtleXMgYXJlIHN0cmluZ3Mgd2l0aCBhIG1heGltdW0gbGVuZ3RoIG9mIDY0IGNoYXJhY3RlcnMuIFZhbHVlcyBhcmUgc3RyaW5ncyB3aXRoXG4gICAgICogYSBtYXhpbXVtIGxlbmd0aCBvZiA1MTIgY2hhcmFjdGVycy5cbiAgICAgKi9cbiAgICBtZXRhZGF0YT86IFNoYXJlZC5NZXRhZGF0YSB8IG51bGw7XG4gIH1cblxuICBleHBvcnQgbmFtZXNwYWNlIE1lc3NhZ2Uge1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgQXR0YWNobWVudCB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBJRCBvZiB0aGUgZmlsZSB0byBhdHRhY2ggdG8gdGhlIG1lc3NhZ2UuXG4gICAgICAgKi9cbiAgICAgIGZpbGVfaWQ/OiBzdHJpbmc7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHRvb2xzIHRvIGFkZCB0aGlzIGZpbGUgdG8uXG4gICAgICAgKi9cbiAgICAgIHRvb2xzPzogQXJyYXk8QXNzaXN0YW50c0FQSS5Db2RlSW50ZXJwcmV0ZXJUb29sIHwgQXR0YWNobWVudC5GaWxlU2VhcmNoPjtcbiAgICB9XG5cbiAgICBleHBvcnQgbmFtZXNwYWNlIEF0dGFjaG1lbnQge1xuICAgICAgZXhwb3J0IGludGVyZmFjZSBGaWxlU2VhcmNoIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB0eXBlIG9mIHRvb2wgYmVpbmcgZGVmaW5lZDogYGZpbGVfc2VhcmNoYFxuICAgICAgICAgKi9cbiAgICAgICAgdHlwZTogJ2ZpbGVfc2VhcmNoJztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQSBzZXQgb2YgcmVzb3VyY2VzIHRoYXQgYXJlIG1hZGUgYXZhaWxhYmxlIHRvIHRoZSBhc3Npc3RhbnQncyB0b29scyBpbiB0aGlzXG4gICAqIHRocmVhZC4gVGhlIHJlc291cmNlcyBhcmUgc3BlY2lmaWMgdG8gdGhlIHR5cGUgb2YgdG9vbC4gRm9yIGV4YW1wbGUsIHRoZVxuICAgKiBgY29kZV9pbnRlcnByZXRlcmAgdG9vbCByZXF1aXJlcyBhIGxpc3Qgb2YgZmlsZSBJRHMsIHdoaWxlIHRoZSBgZmlsZV9zZWFyY2hgXG4gICAqIHRvb2wgcmVxdWlyZXMgYSBsaXN0IG9mIHZlY3RvciBzdG9yZSBJRHMuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRvb2xSZXNvdXJjZXMge1xuICAgIGNvZGVfaW50ZXJwcmV0ZXI/OiBUb29sUmVzb3VyY2VzLkNvZGVJbnRlcnByZXRlcjtcblxuICAgIGZpbGVfc2VhcmNoPzogVG9vbFJlc291cmNlcy5GaWxlU2VhcmNoO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBUb29sUmVzb3VyY2VzIHtcbiAgICBleHBvcnQgaW50ZXJmYWNlIENvZGVJbnRlcnByZXRlciB7XG4gICAgICAvKipcbiAgICAgICAqIEEgbGlzdCBvZiBbZmlsZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maWxlcykgSURzIG1hZGVcbiAgICAgICAqIGF2YWlsYWJsZSB0byB0aGUgYGNvZGVfaW50ZXJwcmV0ZXJgIHRvb2wuIFRoZXJlIGNhbiBiZSBhIG1heGltdW0gb2YgMjAgZmlsZXNcbiAgICAgICAqIGFzc29jaWF0ZWQgd2l0aCB0aGUgdG9vbC5cbiAgICAgICAqL1xuICAgICAgZmlsZV9pZHM/OiBBcnJheTxzdHJpbmc+O1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRmlsZVNlYXJjaCB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZVxuICAgICAgICogW3ZlY3RvciBzdG9yZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS92ZWN0b3Itc3RvcmVzL29iamVjdClcbiAgICAgICAqIGF0dGFjaGVkIHRvIHRoaXMgdGhyZWFkLiBUaGVyZSBjYW4gYmUgYSBtYXhpbXVtIG9mIDEgdmVjdG9yIHN0b3JlIGF0dGFjaGVkIHRvXG4gICAgICAgKiB0aGUgdGhyZWFkLlxuICAgICAgICovXG4gICAgICB2ZWN0b3Jfc3RvcmVfaWRzPzogQXJyYXk8c3RyaW5nPjtcblxuICAgICAgLyoqXG4gICAgICAgKiBBIGhlbHBlciB0byBjcmVhdGUgYVxuICAgICAgICogW3ZlY3RvciBzdG9yZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS92ZWN0b3Itc3RvcmVzL29iamVjdClcbiAgICAgICAqIHdpdGggZmlsZV9pZHMgYW5kIGF0dGFjaCBpdCB0byB0aGlzIHRocmVhZC4gVGhlcmUgY2FuIGJlIGEgbWF4aW11bSBvZiAxIHZlY3RvclxuICAgICAgICogc3RvcmUgYXR0YWNoZWQgdG8gdGhlIHRocmVhZC5cbiAgICAgICAqL1xuICAgICAgdmVjdG9yX3N0b3Jlcz86IEFycmF5PEZpbGVTZWFyY2guVmVjdG9yU3RvcmU+O1xuICAgIH1cblxuICAgIGV4cG9ydCBuYW1lc3BhY2UgRmlsZVNlYXJjaCB7XG4gICAgICBleHBvcnQgaW50ZXJmYWNlIFZlY3RvclN0b3JlIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjaHVua2luZyBzdHJhdGVneSB1c2VkIHRvIGNodW5rIHRoZSBmaWxlKHMpLiBJZiBub3Qgc2V0LCB3aWxsIHVzZSB0aGUgYGF1dG9gXG4gICAgICAgICAqIHN0cmF0ZWd5LlxuICAgICAgICAgKi9cbiAgICAgICAgY2h1bmtpbmdfc3RyYXRlZ3k/OiBWZWN0b3JTdG9yZS5BdXRvIHwgVmVjdG9yU3RvcmUuU3RhdGljO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGxpc3Qgb2YgW2ZpbGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvZmlsZXMpIElEcyB0b1xuICAgICAgICAgKiBhZGQgdG8gdGhlIHZlY3RvciBzdG9yZS4gVGhlcmUgY2FuIGJlIGEgbWF4aW11bSBvZiAxMDAwMCBmaWxlcyBpbiBhIHZlY3RvclxuICAgICAgICAgKiBzdG9yZS5cbiAgICAgICAgICovXG4gICAgICAgIGZpbGVfaWRzPzogQXJyYXk8c3RyaW5nPjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgICAgICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdCwgYW5kXG4gICAgICAgICAqIHF1ZXJ5aW5nIGZvciBvYmplY3RzIHZpYSBBUEkgb3IgdGhlIGRhc2hib2FyZC5cbiAgICAgICAgICpcbiAgICAgICAgICogS2V5cyBhcmUgc3RyaW5ncyB3aXRoIGEgbWF4aW11bSBsZW5ndGggb2YgNjQgY2hhcmFjdGVycy4gVmFsdWVzIGFyZSBzdHJpbmdzIHdpdGhcbiAgICAgICAgICogYSBtYXhpbXVtIGxlbmd0aCBvZiA1MTIgY2hhcmFjdGVycy5cbiAgICAgICAgICovXG4gICAgICAgIG1ldGFkYXRhPzogU2hhcmVkLk1ldGFkYXRhIHwgbnVsbDtcbiAgICAgIH1cblxuICAgICAgZXhwb3J0IG5hbWVzcGFjZSBWZWN0b3JTdG9yZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZGVmYXVsdCBzdHJhdGVneS4gVGhpcyBzdHJhdGVneSBjdXJyZW50bHkgdXNlcyBhIGBtYXhfY2h1bmtfc2l6ZV90b2tlbnNgIG9mXG4gICAgICAgICAqIGA4MDBgIGFuZCBgY2h1bmtfb3ZlcmxhcF90b2tlbnNgIG9mIGA0MDBgLlxuICAgICAgICAgKi9cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBBdXRvIHtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBBbHdheXMgYGF1dG9gLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHR5cGU6ICdhdXRvJztcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgU3RhdGljIHtcbiAgICAgICAgICBzdGF0aWM6IFN0YXRpYy5TdGF0aWM7XG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBBbHdheXMgYHN0YXRpY2AuXG4gICAgICAgICAgICovXG4gICAgICAgICAgdHlwZTogJ3N0YXRpYyc7XG4gICAgICAgIH1cblxuICAgICAgICBleHBvcnQgbmFtZXNwYWNlIFN0YXRpYyB7XG4gICAgICAgICAgZXhwb3J0IGludGVyZmFjZSBTdGF0aWMge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgbnVtYmVyIG9mIHRva2VucyB0aGF0IG92ZXJsYXAgYmV0d2VlbiBjaHVua3MuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGA0MDBgLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIE5vdGUgdGhhdCB0aGUgb3ZlcmxhcCBtdXN0IG5vdCBleGNlZWQgaGFsZiBvZiBgbWF4X2NodW5rX3NpemVfdG9rZW5zYC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY2h1bmtfb3ZlcmxhcF90b2tlbnM6IG51bWJlcjtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgdG9rZW5zIGluIGVhY2ggY2h1bmsuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGA4MDBgLiBUaGVcbiAgICAgICAgICAgICAqIG1pbmltdW0gdmFsdWUgaXMgYDEwMGAgYW5kIHRoZSBtYXhpbXVtIHZhbHVlIGlzIGA0MDk2YC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbWF4X2NodW5rX3NpemVfdG9rZW5zOiBudW1iZXI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkVXBkYXRlUGFyYW1zIHtcbiAgLyoqXG4gICAqIFNldCBvZiAxNiBrZXktdmFsdWUgcGFpcnMgdGhhdCBjYW4gYmUgYXR0YWNoZWQgdG8gYW4gb2JqZWN0LiBUaGlzIGNhbiBiZSB1c2VmdWxcbiAgICogZm9yIHN0b3JpbmcgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb2JqZWN0IGluIGEgc3RydWN0dXJlZCBmb3JtYXQsIGFuZFxuICAgKiBxdWVyeWluZyBmb3Igb2JqZWN0cyB2aWEgQVBJIG9yIHRoZSBkYXNoYm9hcmQuXG4gICAqXG4gICAqIEtleXMgYXJlIHN0cmluZ3Mgd2l0aCBhIG1heGltdW0gbGVuZ3RoIG9mIDY0IGNoYXJhY3RlcnMuIFZhbHVlcyBhcmUgc3RyaW5ncyB3aXRoXG4gICAqIGEgbWF4aW11bSBsZW5ndGggb2YgNTEyIGNoYXJhY3RlcnMuXG4gICAqL1xuICBtZXRhZGF0YT86IFNoYXJlZC5NZXRhZGF0YSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIHJlc291cmNlcyB0aGF0IGFyZSBtYWRlIGF2YWlsYWJsZSB0byB0aGUgYXNzaXN0YW50J3MgdG9vbHMgaW4gdGhpc1xuICAgKiB0aHJlYWQuIFRoZSByZXNvdXJjZXMgYXJlIHNwZWNpZmljIHRvIHRoZSB0eXBlIG9mIHRvb2wuIEZvciBleGFtcGxlLCB0aGVcbiAgICogYGNvZGVfaW50ZXJwcmV0ZXJgIHRvb2wgcmVxdWlyZXMgYSBsaXN0IG9mIGZpbGUgSURzLCB3aGlsZSB0aGUgYGZpbGVfc2VhcmNoYFxuICAgKiB0b29sIHJlcXVpcmVzIGEgbGlzdCBvZiB2ZWN0b3Igc3RvcmUgSURzLlxuICAgKi9cbiAgdG9vbF9yZXNvdXJjZXM/OiBUaHJlYWRVcGRhdGVQYXJhbXMuVG9vbFJlc291cmNlcyB8IG51bGw7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgVGhyZWFkVXBkYXRlUGFyYW1zIHtcbiAgLyoqXG4gICAqIEEgc2V0IG9mIHJlc291cmNlcyB0aGF0IGFyZSBtYWRlIGF2YWlsYWJsZSB0byB0aGUgYXNzaXN0YW50J3MgdG9vbHMgaW4gdGhpc1xuICAgKiB0aHJlYWQuIFRoZSByZXNvdXJjZXMgYXJlIHNwZWNpZmljIHRvIHRoZSB0eXBlIG9mIHRvb2wuIEZvciBleGFtcGxlLCB0aGVcbiAgICogYGNvZGVfaW50ZXJwcmV0ZXJgIHRvb2wgcmVxdWlyZXMgYSBsaXN0IG9mIGZpbGUgSURzLCB3aGlsZSB0aGUgYGZpbGVfc2VhcmNoYFxuICAgKiB0b29sIHJlcXVpcmVzIGEgbGlzdCBvZiB2ZWN0b3Igc3RvcmUgSURzLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUb29sUmVzb3VyY2VzIHtcbiAgICBjb2RlX2ludGVycHJldGVyPzogVG9vbFJlc291cmNlcy5Db2RlSW50ZXJwcmV0ZXI7XG5cbiAgICBmaWxlX3NlYXJjaD86IFRvb2xSZXNvdXJjZXMuRmlsZVNlYXJjaDtcbiAgfVxuXG4gIGV4cG9ydCBuYW1lc3BhY2UgVG9vbFJlc291cmNlcyB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBDb2RlSW50ZXJwcmV0ZXIge1xuICAgICAgLyoqXG4gICAgICAgKiBBIGxpc3Qgb2YgW2ZpbGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvZmlsZXMpIElEcyBtYWRlXG4gICAgICAgKiBhdmFpbGFibGUgdG8gdGhlIGBjb2RlX2ludGVycHJldGVyYCB0b29sLiBUaGVyZSBjYW4gYmUgYSBtYXhpbXVtIG9mIDIwIGZpbGVzXG4gICAgICAgKiBhc3NvY2lhdGVkIHdpdGggdGhlIHRvb2wuXG4gICAgICAgKi9cbiAgICAgIGZpbGVfaWRzPzogQXJyYXk8c3RyaW5nPjtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIEZpbGVTZWFyY2gge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGVcbiAgICAgICAqIFt2ZWN0b3Igc3RvcmVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdmVjdG9yLXN0b3Jlcy9vYmplY3QpXG4gICAgICAgKiBhdHRhY2hlZCB0byB0aGlzIHRocmVhZC4gVGhlcmUgY2FuIGJlIGEgbWF4aW11bSBvZiAxIHZlY3RvciBzdG9yZSBhdHRhY2hlZCB0b1xuICAgICAgICogdGhlIHRocmVhZC5cbiAgICAgICAqL1xuICAgICAgdmVjdG9yX3N0b3JlX2lkcz86IEFycmF5PHN0cmluZz47XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB0eXBlIFRocmVhZENyZWF0ZUFuZFJ1blBhcmFtcyA9XG4gIHwgVGhyZWFkQ3JlYXRlQW5kUnVuUGFyYW1zTm9uU3RyZWFtaW5nXG4gIHwgVGhyZWFkQ3JlYXRlQW5kUnVuUGFyYW1zU3RyZWFtaW5nO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRocmVhZENyZWF0ZUFuZFJ1blBhcmFtc0Jhc2Uge1xuICAvKipcbiAgICogVGhlIElEIG9mIHRoZVxuICAgKiBbYXNzaXN0YW50XShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2Fzc2lzdGFudHMpIHRvIHVzZSB0b1xuICAgKiBleGVjdXRlIHRoaXMgcnVuLlxuICAgKi9cbiAgYXNzaXN0YW50X2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBkZWZhdWx0IHN5c3RlbSBtZXNzYWdlIG9mIHRoZSBhc3Npc3RhbnQuIFRoaXMgaXMgdXNlZnVsIGZvclxuICAgKiBtb2RpZnlpbmcgdGhlIGJlaGF2aW9yIG9uIGEgcGVyLXJ1biBiYXNpcy5cbiAgICovXG4gIGluc3RydWN0aW9ucz86IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiBjb21wbGV0aW9uIHRva2VucyB0aGF0IG1heSBiZSB1c2VkIG92ZXIgdGhlIGNvdXJzZSBvZiB0aGVcbiAgICogcnVuLiBUaGUgcnVuIHdpbGwgbWFrZSBhIGJlc3QgZWZmb3J0IHRvIHVzZSBvbmx5IHRoZSBudW1iZXIgb2YgY29tcGxldGlvbiB0b2tlbnNcbiAgICogc3BlY2lmaWVkLCBhY3Jvc3MgbXVsdGlwbGUgdHVybnMgb2YgdGhlIHJ1bi4gSWYgdGhlIHJ1biBleGNlZWRzIHRoZSBudW1iZXIgb2ZcbiAgICogY29tcGxldGlvbiB0b2tlbnMgc3BlY2lmaWVkLCB0aGUgcnVuIHdpbGwgZW5kIHdpdGggc3RhdHVzIGBpbmNvbXBsZXRlYC4gU2VlXG4gICAqIGBpbmNvbXBsZXRlX2RldGFpbHNgIGZvciBtb3JlIGluZm8uXG4gICAqL1xuICBtYXhfY29tcGxldGlvbl90b2tlbnM/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgcHJvbXB0IHRva2VucyB0aGF0IG1heSBiZSB1c2VkIG92ZXIgdGhlIGNvdXJzZSBvZiB0aGUgcnVuLlxuICAgKiBUaGUgcnVuIHdpbGwgbWFrZSBhIGJlc3QgZWZmb3J0IHRvIHVzZSBvbmx5IHRoZSBudW1iZXIgb2YgcHJvbXB0IHRva2Vuc1xuICAgKiBzcGVjaWZpZWQsIGFjcm9zcyBtdWx0aXBsZSB0dXJucyBvZiB0aGUgcnVuLiBJZiB0aGUgcnVuIGV4Y2VlZHMgdGhlIG51bWJlciBvZlxuICAgKiBwcm9tcHQgdG9rZW5zIHNwZWNpZmllZCwgdGhlIHJ1biB3aWxsIGVuZCB3aXRoIHN0YXR1cyBgaW5jb21wbGV0ZWAuIFNlZVxuICAgKiBgaW5jb21wbGV0ZV9kZXRhaWxzYCBmb3IgbW9yZSBpbmZvLlxuICAgKi9cbiAgbWF4X3Byb21wdF90b2tlbnM/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgKlxuICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbWV0YWRhdGE/OiBTaGFyZWQuTWV0YWRhdGEgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIFtNb2RlbF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9tb2RlbHMpIHRvXG4gICAqIGJlIHVzZWQgdG8gZXhlY3V0ZSB0aGlzIHJ1bi4gSWYgYSB2YWx1ZSBpcyBwcm92aWRlZCBoZXJlLCBpdCB3aWxsIG92ZXJyaWRlIHRoZVxuICAgKiBtb2RlbCBhc3NvY2lhdGVkIHdpdGggdGhlIGFzc2lzdGFudC4gSWYgbm90LCB0aGUgbW9kZWwgYXNzb2NpYXRlZCB3aXRoIHRoZVxuICAgKiBhc3Npc3RhbnQgd2lsbCBiZSB1c2VkLlxuICAgKi9cbiAgbW9kZWw/OiAoc3RyaW5nICYge30pIHwgU2hhcmVkLkNoYXRNb2RlbCB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlXG4gICAqIFtwYXJhbGxlbCBmdW5jdGlvbiBjYWxsaW5nXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvZnVuY3Rpb24tY2FsbGluZyNjb25maWd1cmluZy1wYXJhbGxlbC1mdW5jdGlvbi1jYWxsaW5nKVxuICAgKiBkdXJpbmcgdG9vbCB1c2UuXG4gICAqL1xuICBwYXJhbGxlbF90b29sX2NhbGxzPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSBmb3JtYXQgdGhhdCB0aGUgbW9kZWwgbXVzdCBvdXRwdXQuIENvbXBhdGlibGUgd2l0aFxuICAgKiBbR1BULTRvXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9tb2RlbHMjZ3B0LTRvKSxcbiAgICogW0dQVC00IFR1cmJvXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9tb2RlbHMjZ3B0LTQtdHVyYm8tYW5kLWdwdC00KSxcbiAgICogYW5kIGFsbCBHUFQtMy41IFR1cmJvIG1vZGVscyBzaW5jZSBgZ3B0LTMuNS10dXJiby0xMTA2YC5cbiAgICpcbiAgICogU2V0dGluZyB0byBgeyBcInR5cGVcIjogXCJqc29uX3NjaGVtYVwiLCBcImpzb25fc2NoZW1hXCI6IHsuLi59IH1gIGVuYWJsZXMgU3RydWN0dXJlZFxuICAgKiBPdXRwdXRzIHdoaWNoIGVuc3VyZXMgdGhlIG1vZGVsIHdpbGwgbWF0Y2ggeW91ciBzdXBwbGllZCBKU09OIHNjaGVtYS4gTGVhcm4gbW9yZVxuICAgKiBpbiB0aGVcbiAgICogW1N0cnVjdHVyZWQgT3V0cHV0cyBndWlkZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3N0cnVjdHVyZWQtb3V0cHV0cykuXG4gICAqXG4gICAqIFNldHRpbmcgdG8gYHsgXCJ0eXBlXCI6IFwianNvbl9vYmplY3RcIiB9YCBlbmFibGVzIEpTT04gbW9kZSwgd2hpY2ggZW5zdXJlcyB0aGVcbiAgICogbWVzc2FnZSB0aGUgbW9kZWwgZ2VuZXJhdGVzIGlzIHZhbGlkIEpTT04uXG4gICAqXG4gICAqICoqSW1wb3J0YW50OioqIHdoZW4gdXNpbmcgSlNPTiBtb2RlLCB5b3UgKiptdXN0KiogYWxzbyBpbnN0cnVjdCB0aGUgbW9kZWwgdG9cbiAgICogcHJvZHVjZSBKU09OIHlvdXJzZWxmIHZpYSBhIHN5c3RlbSBvciB1c2VyIG1lc3NhZ2UuIFdpdGhvdXQgdGhpcywgdGhlIG1vZGVsIG1heVxuICAgKiBnZW5lcmF0ZSBhbiB1bmVuZGluZyBzdHJlYW0gb2Ygd2hpdGVzcGFjZSB1bnRpbCB0aGUgZ2VuZXJhdGlvbiByZWFjaGVzIHRoZSB0b2tlblxuICAgKiBsaW1pdCwgcmVzdWx0aW5nIGluIGEgbG9uZy1ydW5uaW5nIGFuZCBzZWVtaW5nbHkgXCJzdHVja1wiIHJlcXVlc3QuIEFsc28gbm90ZSB0aGF0XG4gICAqIHRoZSBtZXNzYWdlIGNvbnRlbnQgbWF5IGJlIHBhcnRpYWxseSBjdXQgb2ZmIGlmIGBmaW5pc2hfcmVhc29uPVwibGVuZ3RoXCJgLCB3aGljaFxuICAgKiBpbmRpY2F0ZXMgdGhlIGdlbmVyYXRpb24gZXhjZWVkZWQgYG1heF90b2tlbnNgIG9yIHRoZSBjb252ZXJzYXRpb24gZXhjZWVkZWQgdGhlXG4gICAqIG1heCBjb250ZXh0IGxlbmd0aC5cbiAgICovXG4gIHJlc3BvbnNlX2Zvcm1hdD86IEFzc2lzdGFudFJlc3BvbnNlRm9ybWF0T3B0aW9uIHwgbnVsbDtcblxuICAvKipcbiAgICogSWYgYHRydWVgLCByZXR1cm5zIGEgc3RyZWFtIG9mIGV2ZW50cyB0aGF0IGhhcHBlbiBkdXJpbmcgdGhlIFJ1biBhcyBzZXJ2ZXItc2VudFxuICAgKiBldmVudHMsIHRlcm1pbmF0aW5nIHdoZW4gdGhlIFJ1biBlbnRlcnMgYSB0ZXJtaW5hbCBzdGF0ZSB3aXRoIGEgYGRhdGE6IFtET05FXWBcbiAgICogbWVzc2FnZS5cbiAgICovXG4gIHN0cmVhbT86IGJvb2xlYW4gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBXaGF0IHNhbXBsaW5nIHRlbXBlcmF0dXJlIHRvIHVzZSwgYmV0d2VlbiAwIGFuZCAyLiBIaWdoZXIgdmFsdWVzIGxpa2UgMC44IHdpbGxcbiAgICogbWFrZSB0aGUgb3V0cHV0IG1vcmUgcmFuZG9tLCB3aGlsZSBsb3dlciB2YWx1ZXMgbGlrZSAwLjIgd2lsbCBtYWtlIGl0IG1vcmVcbiAgICogZm9jdXNlZCBhbmQgZGV0ZXJtaW5pc3RpYy5cbiAgICovXG4gIHRlbXBlcmF0dXJlPzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogT3B0aW9ucyB0byBjcmVhdGUgYSBuZXcgdGhyZWFkLiBJZiBubyB0aHJlYWQgaXMgcHJvdmlkZWQgd2hlbiBydW5uaW5nIGEgcmVxdWVzdCxcbiAgICogYW4gZW1wdHkgdGhyZWFkIHdpbGwgYmUgY3JlYXRlZC5cbiAgICovXG4gIHRocmVhZD86IFRocmVhZENyZWF0ZUFuZFJ1blBhcmFtcy5UaHJlYWQ7XG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIHdoaWNoIChpZiBhbnkpIHRvb2wgaXMgY2FsbGVkIGJ5IHRoZSBtb2RlbC4gYG5vbmVgIG1lYW5zIHRoZSBtb2RlbCB3aWxsXG4gICAqIG5vdCBjYWxsIGFueSB0b29scyBhbmQgaW5zdGVhZCBnZW5lcmF0ZXMgYSBtZXNzYWdlLiBgYXV0b2AgaXMgdGhlIGRlZmF1bHQgdmFsdWVcbiAgICogYW5kIG1lYW5zIHRoZSBtb2RlbCBjYW4gcGljayBiZXR3ZWVuIGdlbmVyYXRpbmcgYSBtZXNzYWdlIG9yIGNhbGxpbmcgb25lIG9yIG1vcmVcbiAgICogdG9vbHMuIGByZXF1aXJlZGAgbWVhbnMgdGhlIG1vZGVsIG11c3QgY2FsbCBvbmUgb3IgbW9yZSB0b29scyBiZWZvcmUgcmVzcG9uZGluZ1xuICAgKiB0byB0aGUgdXNlci4gU3BlY2lmeWluZyBhIHBhcnRpY3VsYXIgdG9vbCBsaWtlIGB7XCJ0eXBlXCI6IFwiZmlsZV9zZWFyY2hcIn1gIG9yXG4gICAqIGB7XCJ0eXBlXCI6IFwiZnVuY3Rpb25cIiwgXCJmdW5jdGlvblwiOiB7XCJuYW1lXCI6IFwibXlfZnVuY3Rpb25cIn19YCBmb3JjZXMgdGhlIG1vZGVsIHRvXG4gICAqIGNhbGwgdGhhdCB0b29sLlxuICAgKi9cbiAgdG9vbF9jaG9pY2U/OiBBc3Npc3RhbnRUb29sQ2hvaWNlT3B0aW9uIHwgbnVsbDtcblxuICAvKipcbiAgICogQSBzZXQgb2YgcmVzb3VyY2VzIHRoYXQgYXJlIHVzZWQgYnkgdGhlIGFzc2lzdGFudCdzIHRvb2xzLiBUaGUgcmVzb3VyY2VzIGFyZVxuICAgKiBzcGVjaWZpYyB0byB0aGUgdHlwZSBvZiB0b29sLiBGb3IgZXhhbXBsZSwgdGhlIGBjb2RlX2ludGVycHJldGVyYCB0b29sIHJlcXVpcmVzXG4gICAqIGEgbGlzdCBvZiBmaWxlIElEcywgd2hpbGUgdGhlIGBmaWxlX3NlYXJjaGAgdG9vbCByZXF1aXJlcyBhIGxpc3Qgb2YgdmVjdG9yIHN0b3JlXG4gICAqIElEcy5cbiAgICovXG4gIHRvb2xfcmVzb3VyY2VzPzogVGhyZWFkQ3JlYXRlQW5kUnVuUGFyYW1zLlRvb2xSZXNvdXJjZXMgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgdG9vbHMgdGhlIGFzc2lzdGFudCBjYW4gdXNlIGZvciB0aGlzIHJ1bi4gVGhpcyBpcyB1c2VmdWwgZm9yXG4gICAqIG1vZGlmeWluZyB0aGUgYmVoYXZpb3Igb24gYSBwZXItcnVuIGJhc2lzLlxuICAgKi9cbiAgdG9vbHM/OiBBcnJheTxBc3Npc3RhbnRzQVBJLkFzc2lzdGFudFRvb2w+IHwgbnVsbDtcblxuICAvKipcbiAgICogQW4gYWx0ZXJuYXRpdmUgdG8gc2FtcGxpbmcgd2l0aCB0ZW1wZXJhdHVyZSwgY2FsbGVkIG51Y2xldXMgc2FtcGxpbmcsIHdoZXJlIHRoZVxuICAgKiBtb2RlbCBjb25zaWRlcnMgdGhlIHJlc3VsdHMgb2YgdGhlIHRva2VucyB3aXRoIHRvcF9wIHByb2JhYmlsaXR5IG1hc3MuIFNvIDAuMVxuICAgKiBtZWFucyBvbmx5IHRoZSB0b2tlbnMgY29tcHJpc2luZyB0aGUgdG9wIDEwJSBwcm9iYWJpbGl0eSBtYXNzIGFyZSBjb25zaWRlcmVkLlxuICAgKlxuICAgKiBXZSBnZW5lcmFsbHkgcmVjb21tZW5kIGFsdGVyaW5nIHRoaXMgb3IgdGVtcGVyYXR1cmUgYnV0IG5vdCBib3RoLlxuICAgKi9cbiAgdG9wX3A/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBDb250cm9scyBmb3IgaG93IGEgdGhyZWFkIHdpbGwgYmUgdHJ1bmNhdGVkIHByaW9yIHRvIHRoZSBydW4uIFVzZSB0aGlzIHRvXG4gICAqIGNvbnRyb2wgdGhlIGludGlhbCBjb250ZXh0IHdpbmRvdyBvZiB0aGUgcnVuLlxuICAgKi9cbiAgdHJ1bmNhdGlvbl9zdHJhdGVneT86IFRocmVhZENyZWF0ZUFuZFJ1blBhcmFtcy5UcnVuY2F0aW9uU3RyYXRlZ3kgfCBudWxsO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFRocmVhZENyZWF0ZUFuZFJ1blBhcmFtcyB7XG4gIC8qKlxuICAgKiBPcHRpb25zIHRvIGNyZWF0ZSBhIG5ldyB0aHJlYWQuIElmIG5vIHRocmVhZCBpcyBwcm92aWRlZCB3aGVuIHJ1bm5pbmcgYSByZXF1ZXN0LFxuICAgKiBhbiBlbXB0eSB0aHJlYWQgd2lsbCBiZSBjcmVhdGVkLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUaHJlYWQge1xuICAgIC8qKlxuICAgICAqIEEgbGlzdCBvZiBbbWVzc2FnZXNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvbWVzc2FnZXMpIHRvXG4gICAgICogc3RhcnQgdGhlIHRocmVhZCB3aXRoLlxuICAgICAqL1xuICAgIG1lc3NhZ2VzPzogQXJyYXk8VGhyZWFkLk1lc3NhZ2U+O1xuXG4gICAgLyoqXG4gICAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICAgKiBxdWVyeWluZyBmb3Igb2JqZWN0cyB2aWEgQVBJIG9yIHRoZSBkYXNoYm9hcmQuXG4gICAgICpcbiAgICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgICAqIGEgbWF4aW11bSBsZW5ndGggb2YgNTEyIGNoYXJhY3RlcnMuXG4gICAgICovXG4gICAgbWV0YWRhdGE/OiBTaGFyZWQuTWV0YWRhdGEgfCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQSBzZXQgb2YgcmVzb3VyY2VzIHRoYXQgYXJlIG1hZGUgYXZhaWxhYmxlIHRvIHRoZSBhc3Npc3RhbnQncyB0b29scyBpbiB0aGlzXG4gICAgICogdGhyZWFkLiBUaGUgcmVzb3VyY2VzIGFyZSBzcGVjaWZpYyB0byB0aGUgdHlwZSBvZiB0b29sLiBGb3IgZXhhbXBsZSwgdGhlXG4gICAgICogYGNvZGVfaW50ZXJwcmV0ZXJgIHRvb2wgcmVxdWlyZXMgYSBsaXN0IG9mIGZpbGUgSURzLCB3aGlsZSB0aGUgYGZpbGVfc2VhcmNoYFxuICAgICAqIHRvb2wgcmVxdWlyZXMgYSBsaXN0IG9mIHZlY3RvciBzdG9yZSBJRHMuXG4gICAgICovXG4gICAgdG9vbF9yZXNvdXJjZXM/OiBUaHJlYWQuVG9vbFJlc291cmNlcyB8IG51bGw7XG4gIH1cblxuICBleHBvcnQgbmFtZXNwYWNlIFRocmVhZCB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBNZXNzYWdlIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIHRleHQgY29udGVudHMgb2YgdGhlIG1lc3NhZ2UuXG4gICAgICAgKi9cbiAgICAgIGNvbnRlbnQ6IHN0cmluZyB8IEFycmF5PE1lc3NhZ2VzQVBJLk1lc3NhZ2VDb250ZW50UGFydFBhcmFtPjtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgcm9sZSBvZiB0aGUgZW50aXR5IHRoYXQgaXMgY3JlYXRpbmcgdGhlIG1lc3NhZ2UuIEFsbG93ZWQgdmFsdWVzIGluY2x1ZGU6XG4gICAgICAgKlxuICAgICAgICogLSBgdXNlcmA6IEluZGljYXRlcyB0aGUgbWVzc2FnZSBpcyBzZW50IGJ5IGFuIGFjdHVhbCB1c2VyIGFuZCBzaG91bGQgYmUgdXNlZCBpblxuICAgICAgICogICBtb3N0IGNhc2VzIHRvIHJlcHJlc2VudCB1c2VyLWdlbmVyYXRlZCBtZXNzYWdlcy5cbiAgICAgICAqIC0gYGFzc2lzdGFudGA6IEluZGljYXRlcyB0aGUgbWVzc2FnZSBpcyBnZW5lcmF0ZWQgYnkgdGhlIGFzc2lzdGFudC4gVXNlIHRoaXNcbiAgICAgICAqICAgdmFsdWUgdG8gaW5zZXJ0IG1lc3NhZ2VzIGZyb20gdGhlIGFzc2lzdGFudCBpbnRvIHRoZSBjb252ZXJzYXRpb24uXG4gICAgICAgKi9cbiAgICAgIHJvbGU6ICd1c2VyJyB8ICdhc3Npc3RhbnQnO1xuXG4gICAgICAvKipcbiAgICAgICAqIEEgbGlzdCBvZiBmaWxlcyBhdHRhY2hlZCB0byB0aGUgbWVzc2FnZSwgYW5kIHRoZSB0b29scyB0aGV5IHNob3VsZCBiZSBhZGRlZCB0by5cbiAgICAgICAqL1xuICAgICAgYXR0YWNobWVudHM/OiBBcnJheTxNZXNzYWdlLkF0dGFjaG1lbnQ+IHwgbnVsbDtcblxuICAgICAgLyoqXG4gICAgICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAgICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdCwgYW5kXG4gICAgICAgKiBxdWVyeWluZyBmb3Igb2JqZWN0cyB2aWEgQVBJIG9yIHRoZSBkYXNoYm9hcmQuXG4gICAgICAgKlxuICAgICAgICogS2V5cyBhcmUgc3RyaW5ncyB3aXRoIGEgbWF4aW11bSBsZW5ndGggb2YgNjQgY2hhcmFjdGVycy4gVmFsdWVzIGFyZSBzdHJpbmdzIHdpdGhcbiAgICAgICAqIGEgbWF4aW11bSBsZW5ndGggb2YgNTEyIGNoYXJhY3RlcnMuXG4gICAgICAgKi9cbiAgICAgIG1ldGFkYXRhPzogU2hhcmVkLk1ldGFkYXRhIHwgbnVsbDtcbiAgICB9XG5cbiAgICBleHBvcnQgbmFtZXNwYWNlIE1lc3NhZ2Uge1xuICAgICAgZXhwb3J0IGludGVyZmFjZSBBdHRhY2htZW50IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBJRCBvZiB0aGUgZmlsZSB0byBhdHRhY2ggdG8gdGhlIG1lc3NhZ2UuXG4gICAgICAgICAqL1xuICAgICAgICBmaWxlX2lkPzogc3RyaW5nO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdG9vbHMgdG8gYWRkIHRoaXMgZmlsZSB0by5cbiAgICAgICAgICovXG4gICAgICAgIHRvb2xzPzogQXJyYXk8QXNzaXN0YW50c0FQSS5Db2RlSW50ZXJwcmV0ZXJUb29sIHwgQXR0YWNobWVudC5GaWxlU2VhcmNoPjtcbiAgICAgIH1cblxuICAgICAgZXhwb3J0IG5hbWVzcGFjZSBBdHRhY2htZW50IHtcbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBGaWxlU2VhcmNoIHtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBUaGUgdHlwZSBvZiB0b29sIGJlaW5nIGRlZmluZWQ6IGBmaWxlX3NlYXJjaGBcbiAgICAgICAgICAgKi9cbiAgICAgICAgICB0eXBlOiAnZmlsZV9zZWFyY2gnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzZXQgb2YgcmVzb3VyY2VzIHRoYXQgYXJlIG1hZGUgYXZhaWxhYmxlIHRvIHRoZSBhc3Npc3RhbnQncyB0b29scyBpbiB0aGlzXG4gICAgICogdGhyZWFkLiBUaGUgcmVzb3VyY2VzIGFyZSBzcGVjaWZpYyB0byB0aGUgdHlwZSBvZiB0b29sLiBGb3IgZXhhbXBsZSwgdGhlXG4gICAgICogYGNvZGVfaW50ZXJwcmV0ZXJgIHRvb2wgcmVxdWlyZXMgYSBsaXN0IG9mIGZpbGUgSURzLCB3aGlsZSB0aGUgYGZpbGVfc2VhcmNoYFxuICAgICAqIHRvb2wgcmVxdWlyZXMgYSBsaXN0IG9mIHZlY3RvciBzdG9yZSBJRHMuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBUb29sUmVzb3VyY2VzIHtcbiAgICAgIGNvZGVfaW50ZXJwcmV0ZXI/OiBUb29sUmVzb3VyY2VzLkNvZGVJbnRlcnByZXRlcjtcblxuICAgICAgZmlsZV9zZWFyY2g/OiBUb29sUmVzb3VyY2VzLkZpbGVTZWFyY2g7XG4gICAgfVxuXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBUb29sUmVzb3VyY2VzIHtcbiAgICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29kZUludGVycHJldGVyIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgbGlzdCBvZiBbZmlsZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maWxlcykgSURzIG1hZGVcbiAgICAgICAgICogYXZhaWxhYmxlIHRvIHRoZSBgY29kZV9pbnRlcnByZXRlcmAgdG9vbC4gVGhlcmUgY2FuIGJlIGEgbWF4aW11bSBvZiAyMCBmaWxlc1xuICAgICAgICAgKiBhc3NvY2lhdGVkIHdpdGggdGhlIHRvb2wuXG4gICAgICAgICAqL1xuICAgICAgICBmaWxlX2lkcz86IEFycmF5PHN0cmluZz47XG4gICAgICB9XG5cbiAgICAgIGV4cG9ydCBpbnRlcmZhY2UgRmlsZVNlYXJjaCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGVcbiAgICAgICAgICogW3ZlY3RvciBzdG9yZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS92ZWN0b3Itc3RvcmVzL29iamVjdClcbiAgICAgICAgICogYXR0YWNoZWQgdG8gdGhpcyB0aHJlYWQuIFRoZXJlIGNhbiBiZSBhIG1heGltdW0gb2YgMSB2ZWN0b3Igc3RvcmUgYXR0YWNoZWQgdG9cbiAgICAgICAgICogdGhlIHRocmVhZC5cbiAgICAgICAgICovXG4gICAgICAgIHZlY3Rvcl9zdG9yZV9pZHM/OiBBcnJheTxzdHJpbmc+O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGhlbHBlciB0byBjcmVhdGUgYVxuICAgICAgICAgKiBbdmVjdG9yIHN0b3JlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3ZlY3Rvci1zdG9yZXMvb2JqZWN0KVxuICAgICAgICAgKiB3aXRoIGZpbGVfaWRzIGFuZCBhdHRhY2ggaXQgdG8gdGhpcyB0aHJlYWQuIFRoZXJlIGNhbiBiZSBhIG1heGltdW0gb2YgMSB2ZWN0b3JcbiAgICAgICAgICogc3RvcmUgYXR0YWNoZWQgdG8gdGhlIHRocmVhZC5cbiAgICAgICAgICovXG4gICAgICAgIHZlY3Rvcl9zdG9yZXM/OiBBcnJheTxGaWxlU2VhcmNoLlZlY3RvclN0b3JlPjtcbiAgICAgIH1cblxuICAgICAgZXhwb3J0IG5hbWVzcGFjZSBGaWxlU2VhcmNoIHtcbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBWZWN0b3JTdG9yZSB7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogVGhlIGNodW5raW5nIHN0cmF0ZWd5IHVzZWQgdG8gY2h1bmsgdGhlIGZpbGUocykuIElmIG5vdCBzZXQsIHdpbGwgdXNlIHRoZSBgYXV0b2BcbiAgICAgICAgICAgKiBzdHJhdGVneS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBjaHVua2luZ19zdHJhdGVneT86IFZlY3RvclN0b3JlLkF1dG8gfCBWZWN0b3JTdG9yZS5TdGF0aWM7XG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBBIGxpc3Qgb2YgW2ZpbGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvZmlsZXMpIElEcyB0b1xuICAgICAgICAgICAqIGFkZCB0byB0aGUgdmVjdG9yIHN0b3JlLiBUaGVyZSBjYW4gYmUgYSBtYXhpbXVtIG9mIDEwMDAwIGZpbGVzIGluIGEgdmVjdG9yXG4gICAgICAgICAgICogc3RvcmUuXG4gICAgICAgICAgICovXG4gICAgICAgICAgZmlsZV9pZHM/OiBBcnJheTxzdHJpbmc+O1xuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgICAgICAgICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICAgICAgICAgKiBxdWVyeWluZyBmb3Igb2JqZWN0cyB2aWEgQVBJIG9yIHRoZSBkYXNoYm9hcmQuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgICAgICAgICAqIGEgbWF4aW11bSBsZW5ndGggb2YgNTEyIGNoYXJhY3RlcnMuXG4gICAgICAgICAgICovXG4gICAgICAgICAgbWV0YWRhdGE/OiBTaGFyZWQuTWV0YWRhdGEgfCBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwb3J0IG5hbWVzcGFjZSBWZWN0b3JTdG9yZSB7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogVGhlIGRlZmF1bHQgc3RyYXRlZ3kuIFRoaXMgc3RyYXRlZ3kgY3VycmVudGx5IHVzZXMgYSBgbWF4X2NodW5rX3NpemVfdG9rZW5zYCBvZlxuICAgICAgICAgICAqIGA4MDBgIGFuZCBgY2h1bmtfb3ZlcmxhcF90b2tlbnNgIG9mIGA0MDBgLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgQXV0byB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFsd2F5cyBgYXV0b2AuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHR5cGU6ICdhdXRvJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBleHBvcnQgaW50ZXJmYWNlIFN0YXRpYyB7XG4gICAgICAgICAgICBzdGF0aWM6IFN0YXRpYy5TdGF0aWM7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQWx3YXlzIGBzdGF0aWNgLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0eXBlOiAnc3RhdGljJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBleHBvcnQgbmFtZXNwYWNlIFN0YXRpYyB7XG4gICAgICAgICAgICBleHBvcnQgaW50ZXJmYWNlIFN0YXRpYyB7XG4gICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgKiBUaGUgbnVtYmVyIG9mIHRva2VucyB0aGF0IG92ZXJsYXAgYmV0d2VlbiBjaHVua3MuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGA0MDBgLlxuICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgKiBOb3RlIHRoYXQgdGhlIG92ZXJsYXAgbXVzdCBub3QgZXhjZWVkIGhhbGYgb2YgYG1heF9jaHVua19zaXplX3Rva2Vuc2AuXG4gICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICBjaHVua19vdmVybGFwX3Rva2VuczogbnVtYmVyO1xuXG4gICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgdG9rZW5zIGluIGVhY2ggY2h1bmsuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGA4MDBgLiBUaGVcbiAgICAgICAgICAgICAgICogbWluaW11bSB2YWx1ZSBpcyBgMTAwYCBhbmQgdGhlIG1heGltdW0gdmFsdWUgaXMgYDQwOTZgLlxuICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgbWF4X2NodW5rX3NpemVfdG9rZW5zOiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIHJlc291cmNlcyB0aGF0IGFyZSB1c2VkIGJ5IHRoZSBhc3Npc3RhbnQncyB0b29scy4gVGhlIHJlc291cmNlcyBhcmVcbiAgICogc3BlY2lmaWMgdG8gdGhlIHR5cGUgb2YgdG9vbC4gRm9yIGV4YW1wbGUsIHRoZSBgY29kZV9pbnRlcnByZXRlcmAgdG9vbCByZXF1aXJlc1xuICAgKiBhIGxpc3Qgb2YgZmlsZSBJRHMsIHdoaWxlIHRoZSBgZmlsZV9zZWFyY2hgIHRvb2wgcmVxdWlyZXMgYSBsaXN0IG9mIHZlY3RvciBzdG9yZVxuICAgKiBJRHMuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRvb2xSZXNvdXJjZXMge1xuICAgIGNvZGVfaW50ZXJwcmV0ZXI/OiBUb29sUmVzb3VyY2VzLkNvZGVJbnRlcnByZXRlcjtcblxuICAgIGZpbGVfc2VhcmNoPzogVG9vbFJlc291cmNlcy5GaWxlU2VhcmNoO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBUb29sUmVzb3VyY2VzIHtcbiAgICBleHBvcnQgaW50ZXJmYWNlIENvZGVJbnRlcnByZXRlciB7XG4gICAgICAvKipcbiAgICAgICAqIEEgbGlzdCBvZiBbZmlsZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maWxlcykgSURzIG1hZGVcbiAgICAgICAqIGF2YWlsYWJsZSB0byB0aGUgYGNvZGVfaW50ZXJwcmV0ZXJgIHRvb2wuIFRoZXJlIGNhbiBiZSBhIG1heGltdW0gb2YgMjAgZmlsZXNcbiAgICAgICAqIGFzc29jaWF0ZWQgd2l0aCB0aGUgdG9vbC5cbiAgICAgICAqL1xuICAgICAgZmlsZV9pZHM/OiBBcnJheTxzdHJpbmc+O1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRmlsZVNlYXJjaCB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBJRCBvZiB0aGVcbiAgICAgICAqIFt2ZWN0b3Igc3RvcmVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdmVjdG9yLXN0b3Jlcy9vYmplY3QpXG4gICAgICAgKiBhdHRhY2hlZCB0byB0aGlzIGFzc2lzdGFudC4gVGhlcmUgY2FuIGJlIGEgbWF4aW11bSBvZiAxIHZlY3RvciBzdG9yZSBhdHRhY2hlZCB0b1xuICAgICAgICogdGhlIGFzc2lzdGFudC5cbiAgICAgICAqL1xuICAgICAgdmVjdG9yX3N0b3JlX2lkcz86IEFycmF5PHN0cmluZz47XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIGZvciBob3cgYSB0aHJlYWQgd2lsbCBiZSB0cnVuY2F0ZWQgcHJpb3IgdG8gdGhlIHJ1bi4gVXNlIHRoaXMgdG9cbiAgICogY29udHJvbCB0aGUgaW50aWFsIGNvbnRleHQgd2luZG93IG9mIHRoZSBydW4uXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRydW5jYXRpb25TdHJhdGVneSB7XG4gICAgLyoqXG4gICAgICogVGhlIHRydW5jYXRpb24gc3RyYXRlZ3kgdG8gdXNlIGZvciB0aGUgdGhyZWFkLiBUaGUgZGVmYXVsdCBpcyBgYXV0b2AuIElmIHNldCB0b1xuICAgICAqIGBsYXN0X21lc3NhZ2VzYCwgdGhlIHRocmVhZCB3aWxsIGJlIHRydW5jYXRlZCB0byB0aGUgbiBtb3N0IHJlY2VudCBtZXNzYWdlcyBpblxuICAgICAqIHRoZSB0aHJlYWQuIFdoZW4gc2V0IHRvIGBhdXRvYCwgbWVzc2FnZXMgaW4gdGhlIG1pZGRsZSBvZiB0aGUgdGhyZWFkIHdpbGwgYmVcbiAgICAgKiBkcm9wcGVkIHRvIGZpdCB0aGUgY29udGV4dCBsZW5ndGggb2YgdGhlIG1vZGVsLCBgbWF4X3Byb21wdF90b2tlbnNgLlxuICAgICAqL1xuICAgIHR5cGU6ICdhdXRvJyB8ICdsYXN0X21lc3NhZ2VzJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgbW9zdCByZWNlbnQgbWVzc2FnZXMgZnJvbSB0aGUgdGhyZWFkIHdoZW4gY29uc3RydWN0aW5nIHRoZSBjb250ZXh0XG4gICAgICogZm9yIHRoZSBydW4uXG4gICAgICovXG4gICAgbGFzdF9tZXNzYWdlcz86IG51bWJlciB8IG51bGw7XG4gIH1cblxuICBleHBvcnQgdHlwZSBUaHJlYWRDcmVhdGVBbmRSdW5QYXJhbXNOb25TdHJlYW1pbmcgPSBUaHJlYWRzQVBJLlRocmVhZENyZWF0ZUFuZFJ1blBhcmFtc05vblN0cmVhbWluZztcbiAgZXhwb3J0IHR5cGUgVGhyZWFkQ3JlYXRlQW5kUnVuUGFyYW1zU3RyZWFtaW5nID0gVGhyZWFkc0FQSS5UaHJlYWRDcmVhdGVBbmRSdW5QYXJhbXNTdHJlYW1pbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGhyZWFkQ3JlYXRlQW5kUnVuUGFyYW1zTm9uU3RyZWFtaW5nIGV4dGVuZHMgVGhyZWFkQ3JlYXRlQW5kUnVuUGFyYW1zQmFzZSB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHJldHVybnMgYSBzdHJlYW0gb2YgZXZlbnRzIHRoYXQgaGFwcGVuIGR1cmluZyB0aGUgUnVuIGFzIHNlcnZlci1zZW50XG4gICAqIGV2ZW50cywgdGVybWluYXRpbmcgd2hlbiB0aGUgUnVuIGVudGVycyBhIHRlcm1pbmFsIHN0YXRlIHdpdGggYSBgZGF0YTogW0RPTkVdYFxuICAgKiBtZXNzYWdlLlxuICAgKi9cbiAgc3RyZWFtPzogZmFsc2UgfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRocmVhZENyZWF0ZUFuZFJ1blBhcmFtc1N0cmVhbWluZyBleHRlbmRzIFRocmVhZENyZWF0ZUFuZFJ1blBhcmFtc0Jhc2Uge1xuICAvKipcbiAgICogSWYgYHRydWVgLCByZXR1cm5zIGEgc3RyZWFtIG9mIGV2ZW50cyB0aGF0IGhhcHBlbiBkdXJpbmcgdGhlIFJ1biBhcyBzZXJ2ZXItc2VudFxuICAgKiBldmVudHMsIHRlcm1pbmF0aW5nIHdoZW4gdGhlIFJ1biBlbnRlcnMgYSB0ZXJtaW5hbCBzdGF0ZSB3aXRoIGEgYGRhdGE6IFtET05FXWBcbiAgICogbWVzc2FnZS5cbiAgICovXG4gIHN0cmVhbTogdHJ1ZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUaHJlYWRDcmVhdGVBbmRSdW5Qb2xsUGFyYW1zIHtcbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGVcbiAgICogW2Fzc2lzdGFudF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9hc3Npc3RhbnRzKSB0byB1c2UgdG9cbiAgICogZXhlY3V0ZSB0aGlzIHJ1bi5cbiAgICovXG4gIGFzc2lzdGFudF9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgZGVmYXVsdCBzeXN0ZW0gbWVzc2FnZSBvZiB0aGUgYXNzaXN0YW50LiBUaGlzIGlzIHVzZWZ1bCBmb3JcbiAgICogbW9kaWZ5aW5nIHRoZSBiZWhhdmlvciBvbiBhIHBlci1ydW4gYmFzaXMuXG4gICAqL1xuICBpbnN0cnVjdGlvbnM/OiBzdHJpbmcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgY29tcGxldGlvbiB0b2tlbnMgdGhhdCBtYXkgYmUgdXNlZCBvdmVyIHRoZSBjb3Vyc2Ugb2YgdGhlXG4gICAqIHJ1bi4gVGhlIHJ1biB3aWxsIG1ha2UgYSBiZXN0IGVmZm9ydCB0byB1c2Ugb25seSB0aGUgbnVtYmVyIG9mIGNvbXBsZXRpb24gdG9rZW5zXG4gICAqIHNwZWNpZmllZCwgYWNyb3NzIG11bHRpcGxlIHR1cm5zIG9mIHRoZSBydW4uIElmIHRoZSBydW4gZXhjZWVkcyB0aGUgbnVtYmVyIG9mXG4gICAqIGNvbXBsZXRpb24gdG9rZW5zIHNwZWNpZmllZCwgdGhlIHJ1biB3aWxsIGVuZCB3aXRoIHN0YXR1cyBgaW5jb21wbGV0ZWAuIFNlZVxuICAgKiBgaW5jb21wbGV0ZV9kZXRhaWxzYCBmb3IgbW9yZSBpbmZvLlxuICAgKi9cbiAgbWF4X2NvbXBsZXRpb25fdG9rZW5zPzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHByb21wdCB0b2tlbnMgdGhhdCBtYXkgYmUgdXNlZCBvdmVyIHRoZSBjb3Vyc2Ugb2YgdGhlIHJ1bi5cbiAgICogVGhlIHJ1biB3aWxsIG1ha2UgYSBiZXN0IGVmZm9ydCB0byB1c2Ugb25seSB0aGUgbnVtYmVyIG9mIHByb21wdCB0b2tlbnNcbiAgICogc3BlY2lmaWVkLCBhY3Jvc3MgbXVsdGlwbGUgdHVybnMgb2YgdGhlIHJ1bi4gSWYgdGhlIHJ1biBleGNlZWRzIHRoZSBudW1iZXIgb2ZcbiAgICogcHJvbXB0IHRva2VucyBzcGVjaWZpZWQsIHRoZSBydW4gd2lsbCBlbmQgd2l0aCBzdGF0dXMgYGluY29tcGxldGVgLiBTZWVcbiAgICogYGluY29tcGxldGVfZGV0YWlsc2AgZm9yIG1vcmUgaW5mby5cbiAgICovXG4gIG1heF9wcm9tcHRfdG9rZW5zPzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdC4gS2V5c1xuICAgKiBjYW4gYmUgYSBtYXhpbXVtIG9mIDY0IGNoYXJhY3RlcnMgbG9uZyBhbmQgdmFsdWVzIGNhbiBiZSBhIG1heGl1bSBvZiA1MTJcbiAgICogY2hhcmFjdGVycyBsb25nLlxuICAgKi9cbiAgbWV0YWRhdGE/OiB1bmtub3duIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBbTW9kZWxdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvbW9kZWxzKSB0b1xuICAgKiBiZSB1c2VkIHRvIGV4ZWN1dGUgdGhpcyBydW4uIElmIGEgdmFsdWUgaXMgcHJvdmlkZWQgaGVyZSwgaXQgd2lsbCBvdmVycmlkZSB0aGVcbiAgICogbW9kZWwgYXNzb2NpYXRlZCB3aXRoIHRoZSBhc3Npc3RhbnQuIElmIG5vdCwgdGhlIG1vZGVsIGFzc29jaWF0ZWQgd2l0aCB0aGVcbiAgICogYXNzaXN0YW50IHdpbGwgYmUgdXNlZC5cbiAgICovXG4gIG1vZGVsPzpcbiAgICB8IChzdHJpbmcgJiB7fSlcbiAgICB8ICdncHQtNG8nXG4gICAgfCAnZ3B0LTRvLTIwMjQtMDUtMTMnXG4gICAgfCAnZ3B0LTQtdHVyYm8nXG4gICAgfCAnZ3B0LTQtdHVyYm8tMjAyNC0wNC0wOSdcbiAgICB8ICdncHQtNC0wMTI1LXByZXZpZXcnXG4gICAgfCAnZ3B0LTQtdHVyYm8tcHJldmlldydcbiAgICB8ICdncHQtNC0xMTA2LXByZXZpZXcnXG4gICAgfCAnZ3B0LTQtdmlzaW9uLXByZXZpZXcnXG4gICAgfCAnZ3B0LTQnXG4gICAgfCAnZ3B0LTQtMDMxNCdcbiAgICB8ICdncHQtNC0wNjEzJ1xuICAgIHwgJ2dwdC00LTMyaydcbiAgICB8ICdncHQtNC0zMmstMDMxNCdcbiAgICB8ICdncHQtNC0zMmstMDYxMydcbiAgICB8ICdncHQtMy41LXR1cmJvJ1xuICAgIHwgJ2dwdC0zLjUtdHVyYm8tMTZrJ1xuICAgIHwgJ2dwdC0zLjUtdHVyYm8tMDYxMydcbiAgICB8ICdncHQtMy41LXR1cmJvLTExMDYnXG4gICAgfCAnZ3B0LTMuNS10dXJiby0wMTI1J1xuICAgIHwgJ2dwdC0zLjUtdHVyYm8tMTZrLTA2MTMnXG4gICAgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGZvcm1hdCB0aGF0IHRoZSBtb2RlbCBtdXN0IG91dHB1dC4gQ29tcGF0aWJsZSB3aXRoXG4gICAqIFtHUFQtNG9dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL21vZGVscy9ncHQtNG8pLFxuICAgKiBbR1BULTQgVHVyYm9dKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL21vZGVscy9ncHQtNC10dXJiby1hbmQtZ3B0LTQpLFxuICAgKiBhbmQgYWxsIEdQVC0zLjUgVHVyYm8gbW9kZWxzIHNpbmNlIGBncHQtMy41LXR1cmJvLTExMDZgLlxuICAgKlxuICAgKiBTZXR0aW5nIHRvIGB7IFwidHlwZVwiOiBcImpzb25fb2JqZWN0XCIgfWAgZW5hYmxlcyBKU09OIG1vZGUsIHdoaWNoIGd1YXJhbnRlZXMgdGhlXG4gICAqIG1lc3NhZ2UgdGhlIG1vZGVsIGdlbmVyYXRlcyBpcyB2YWxpZCBKU09OLlxuICAgKlxuICAgKiAqKkltcG9ydGFudDoqKiB3aGVuIHVzaW5nIEpTT04gbW9kZSwgeW91ICoqbXVzdCoqIGFsc28gaW5zdHJ1Y3QgdGhlIG1vZGVsIHRvXG4gICAqIHByb2R1Y2UgSlNPTiB5b3Vyc2VsZiB2aWEgYSBzeXN0ZW0gb3IgdXNlciBtZXNzYWdlLiBXaXRob3V0IHRoaXMsIHRoZSBtb2RlbCBtYXlcbiAgICogZ2VuZXJhdGUgYW4gdW5lbmRpbmcgc3RyZWFtIG9mIHdoaXRlc3BhY2UgdW50aWwgdGhlIGdlbmVyYXRpb24gcmVhY2hlcyB0aGUgdG9rZW5cbiAgICogbGltaXQsIHJlc3VsdGluZyBpbiBhIGxvbmctcnVubmluZyBhbmQgc2VlbWluZ2x5IFwic3R1Y2tcIiByZXF1ZXN0LiBBbHNvIG5vdGUgdGhhdFxuICAgKiB0aGUgbWVzc2FnZSBjb250ZW50IG1heSBiZSBwYXJ0aWFsbHkgY3V0IG9mZiBpZiBgZmluaXNoX3JlYXNvbj1cImxlbmd0aFwiYCwgd2hpY2hcbiAgICogaW5kaWNhdGVzIHRoZSBnZW5lcmF0aW9uIGV4Y2VlZGVkIGBtYXhfdG9rZW5zYCBvciB0aGUgY29udmVyc2F0aW9uIGV4Y2VlZGVkIHRoZVxuICAgKiBtYXggY29udGV4dCBsZW5ndGguXG4gICAqL1xuICByZXNwb25zZV9mb3JtYXQ/OiBBc3Npc3RhbnRSZXNwb25zZUZvcm1hdE9wdGlvbiB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFdoYXQgc2FtcGxpbmcgdGVtcGVyYXR1cmUgdG8gdXNlLCBiZXR3ZWVuIDAgYW5kIDIuIEhpZ2hlciB2YWx1ZXMgbGlrZSAwLjggd2lsbFxuICAgKiBtYWtlIHRoZSBvdXRwdXQgbW9yZSByYW5kb20sIHdoaWxlIGxvd2VyIHZhbHVlcyBsaWtlIDAuMiB3aWxsIG1ha2UgaXQgbW9yZVxuICAgKiBmb2N1c2VkIGFuZCBkZXRlcm1pbmlzdGljLlxuICAgKi9cbiAgdGVtcGVyYXR1cmU/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBJZiBubyB0aHJlYWQgaXMgcHJvdmlkZWQsIGFuIGVtcHR5IHRocmVhZCB3aWxsIGJlIGNyZWF0ZWQuXG4gICAqL1xuICB0aHJlYWQ/OiBUaHJlYWRDcmVhdGVBbmRSdW5Qb2xsUGFyYW1zLlRocmVhZDtcblxuICAvKipcbiAgICogQ29udHJvbHMgd2hpY2ggKGlmIGFueSkgdG9vbCBpcyBjYWxsZWQgYnkgdGhlIG1vZGVsLiBgbm9uZWAgbWVhbnMgdGhlIG1vZGVsIHdpbGxcbiAgICogbm90IGNhbGwgYW55IHRvb2xzIGFuZCBpbnN0ZWFkIGdlbmVyYXRlcyBhIG1lc3NhZ2UuIGBhdXRvYCBpcyB0aGUgZGVmYXVsdCB2YWx1ZVxuICAgKiBhbmQgbWVhbnMgdGhlIG1vZGVsIGNhbiBwaWNrIGJldHdlZW4gZ2VuZXJhdGluZyBhIG1lc3NhZ2Ugb3IgY2FsbGluZyBvbmUgb3IgbW9yZVxuICAgKiB0b29scy4gYHJlcXVpcmVkYCBtZWFucyB0aGUgbW9kZWwgbXVzdCBjYWxsIG9uZSBvciBtb3JlIHRvb2xzIGJlZm9yZSByZXNwb25kaW5nXG4gICAqIHRvIHRoZSB1c2VyLiBTcGVjaWZ5aW5nIGEgcGFydGljdWxhciB0b29sIGxpa2UgYHtcInR5cGVcIjogXCJmaWxlX3NlYXJjaFwifWAgb3JcbiAgICogYHtcInR5cGVcIjogXCJmdW5jdGlvblwiLCBcImZ1bmN0aW9uXCI6IHtcIm5hbWVcIjogXCJteV9mdW5jdGlvblwifX1gIGZvcmNlcyB0aGUgbW9kZWwgdG9cbiAgICogY2FsbCB0aGF0IHRvb2wuXG4gICAqL1xuICB0b29sX2Nob2ljZT86IEFzc2lzdGFudFRvb2xDaG9pY2VPcHRpb24gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBBIHNldCBvZiByZXNvdXJjZXMgdGhhdCBhcmUgdXNlZCBieSB0aGUgYXNzaXN0YW50J3MgdG9vbHMuIFRoZSByZXNvdXJjZXMgYXJlXG4gICAqIHNwZWNpZmljIHRvIHRoZSB0eXBlIG9mIHRvb2wuIEZvciBleGFtcGxlLCB0aGUgYGNvZGVfaW50ZXJwcmV0ZXJgIHRvb2wgcmVxdWlyZXNcbiAgICogYSBsaXN0IG9mIGZpbGUgSURzLCB3aGlsZSB0aGUgYGZpbGVfc2VhcmNoYCB0b29sIHJlcXVpcmVzIGEgbGlzdCBvZiB2ZWN0b3Igc3RvcmVcbiAgICogSURzLlxuICAgKi9cbiAgdG9vbF9yZXNvdXJjZXM/OiBUaHJlYWRDcmVhdGVBbmRSdW5Qb2xsUGFyYW1zLlRvb2xSZXNvdXJjZXMgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgdG9vbHMgdGhlIGFzc2lzdGFudCBjYW4gdXNlIGZvciB0aGlzIHJ1bi4gVGhpcyBpcyB1c2VmdWwgZm9yXG4gICAqIG1vZGlmeWluZyB0aGUgYmVoYXZpb3Igb24gYSBwZXItcnVuIGJhc2lzLlxuICAgKi9cbiAgdG9vbHM/OiBBcnJheTxcbiAgICBBc3Npc3RhbnRzQVBJLkNvZGVJbnRlcnByZXRlclRvb2wgfCBBc3Npc3RhbnRzQVBJLkZpbGVTZWFyY2hUb29sIHwgQXNzaXN0YW50c0FQSS5GdW5jdGlvblRvb2xcbiAgPiB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEFuIGFsdGVybmF0aXZlIHRvIHNhbXBsaW5nIHdpdGggdGVtcGVyYXR1cmUsIGNhbGxlZCBudWNsZXVzIHNhbXBsaW5nLCB3aGVyZSB0aGVcbiAgICogbW9kZWwgY29uc2lkZXJzIHRoZSByZXN1bHRzIG9mIHRoZSB0b2tlbnMgd2l0aCB0b3BfcCBwcm9iYWJpbGl0eSBtYXNzLiBTbyAwLjFcbiAgICogbWVhbnMgb25seSB0aGUgdG9rZW5zIGNvbXByaXNpbmcgdGhlIHRvcCAxMCUgcHJvYmFiaWxpdHkgbWFzcyBhcmUgY29uc2lkZXJlZC5cbiAgICpcbiAgICogV2UgZ2VuZXJhbGx5IHJlY29tbWVuZCBhbHRlcmluZyB0aGlzIG9yIHRlbXBlcmF0dXJlIGJ1dCBub3QgYm90aC5cbiAgICovXG4gIHRvcF9wPzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogQ29udHJvbHMgZm9yIGhvdyBhIHRocmVhZCB3aWxsIGJlIHRydW5jYXRlZCBwcmlvciB0byB0aGUgcnVuLiBVc2UgdGhpcyB0b1xuICAgKiBjb250cm9sIHRoZSBpbnRpYWwgY29udGV4dCB3aW5kb3cgb2YgdGhlIHJ1bi5cbiAgICovXG4gIHRydW5jYXRpb25fc3RyYXRlZ3k/OiBUaHJlYWRDcmVhdGVBbmRSdW5Qb2xsUGFyYW1zLlRydW5jYXRpb25TdHJhdGVneSB8IG51bGw7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgVGhyZWFkQ3JlYXRlQW5kUnVuUG9sbFBhcmFtcyB7XG4gIC8qKlxuICAgKiBJZiBubyB0aHJlYWQgaXMgcHJvdmlkZWQsIGFuIGVtcHR5IHRocmVhZCB3aWxsIGJlIGNyZWF0ZWQuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRocmVhZCB7XG4gICAgLyoqXG4gICAgICogQSBsaXN0IG9mIFttZXNzYWdlc10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9tZXNzYWdlcykgdG9cbiAgICAgKiBzdGFydCB0aGUgdGhyZWFkIHdpdGguXG4gICAgICovXG4gICAgbWVzc2FnZXM/OiBBcnJheTxUaHJlYWQuTWVzc2FnZT47XG5cbiAgICAvKipcbiAgICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAgICogZm9yIHN0b3JpbmcgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb2JqZWN0IGluIGEgc3RydWN0dXJlZCBmb3JtYXQuIEtleXNcbiAgICAgKiBjYW4gYmUgYSBtYXhpbXVtIG9mIDY0IGNoYXJhY3RlcnMgbG9uZyBhbmQgdmFsdWVzIGNhbiBiZSBhIG1heGl1bSBvZiA1MTJcbiAgICAgKiBjaGFyYWN0ZXJzIGxvbmcuXG4gICAgICovXG4gICAgbWV0YWRhdGE/OiB1bmtub3duIHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEEgc2V0IG9mIHJlc291cmNlcyB0aGF0IGFyZSBtYWRlIGF2YWlsYWJsZSB0byB0aGUgYXNzaXN0YW50J3MgdG9vbHMgaW4gdGhpc1xuICAgICAqIHRocmVhZC4gVGhlIHJlc291cmNlcyBhcmUgc3BlY2lmaWMgdG8gdGhlIHR5cGUgb2YgdG9vbC4gRm9yIGV4YW1wbGUsIHRoZVxuICAgICAqIGBjb2RlX2ludGVycHJldGVyYCB0b29sIHJlcXVpcmVzIGEgbGlzdCBvZiBmaWxlIElEcywgd2hpbGUgdGhlIGBmaWxlX3NlYXJjaGBcbiAgICAgKiB0b29sIHJlcXVpcmVzIGEgbGlzdCBvZiB2ZWN0b3Igc3RvcmUgSURzLlxuICAgICAqL1xuICAgIHRvb2xfcmVzb3VyY2VzPzogVGhyZWFkLlRvb2xSZXNvdXJjZXMgfCBudWxsO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBUaHJlYWQge1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSB0ZXh0IGNvbnRlbnRzIG9mIHRoZSBtZXNzYWdlLlxuICAgICAgICovXG4gICAgICBjb250ZW50OiBzdHJpbmcgfCBBcnJheTxNZXNzYWdlc0FQSS5NZXNzYWdlQ29udGVudFBhcnRQYXJhbT47XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHJvbGUgb2YgdGhlIGVudGl0eSB0aGF0IGlzIGNyZWF0aW5nIHRoZSBtZXNzYWdlLiBBbGxvd2VkIHZhbHVlcyBpbmNsdWRlOlxuICAgICAgICpcbiAgICAgICAqIC0gYHVzZXJgOiBJbmRpY2F0ZXMgdGhlIG1lc3NhZ2UgaXMgc2VudCBieSBhbiBhY3R1YWwgdXNlciBhbmQgc2hvdWxkIGJlIHVzZWQgaW5cbiAgICAgICAqICAgbW9zdCBjYXNlcyB0byByZXByZXNlbnQgdXNlci1nZW5lcmF0ZWQgbWVzc2FnZXMuXG4gICAgICAgKiAtIGBhc3Npc3RhbnRgOiBJbmRpY2F0ZXMgdGhlIG1lc3NhZ2UgaXMgZ2VuZXJhdGVkIGJ5IHRoZSBhc3Npc3RhbnQuIFVzZSB0aGlzXG4gICAgICAgKiAgIHZhbHVlIHRvIGluc2VydCBtZXNzYWdlcyBmcm9tIHRoZSBhc3Npc3RhbnQgaW50byB0aGUgY29udmVyc2F0aW9uLlxuICAgICAgICovXG4gICAgICByb2xlOiAndXNlcicgfCAnYXNzaXN0YW50JztcblxuICAgICAgLyoqXG4gICAgICAgKiBBIGxpc3Qgb2YgZmlsZXMgYXR0YWNoZWQgdG8gdGhlIG1lc3NhZ2UsIGFuZCB0aGUgdG9vbHMgdGhleSBzaG91bGQgYmUgYWRkZWQgdG8uXG4gICAgICAgKi9cbiAgICAgIGF0dGFjaG1lbnRzPzogQXJyYXk8TWVzc2FnZS5BdHRhY2htZW50PiB8IG51bGw7XG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgICAgICogZm9yIHN0b3JpbmcgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb2JqZWN0IGluIGEgc3RydWN0dXJlZCBmb3JtYXQuIEtleXNcbiAgICAgICAqIGNhbiBiZSBhIG1heGltdW0gb2YgNjQgY2hhcmFjdGVycyBsb25nIGFuZCB2YWx1ZXMgY2FuIGJlIGEgbWF4aXVtIG9mIDUxMlxuICAgICAgICogY2hhcmFjdGVycyBsb25nLlxuICAgICAgICovXG4gICAgICBtZXRhZGF0YT86IHVua25vd24gfCBudWxsO1xuICAgIH1cblxuICAgIGV4cG9ydCBuYW1lc3BhY2UgTWVzc2FnZSB7XG4gICAgICBleHBvcnQgaW50ZXJmYWNlIEF0dGFjaG1lbnQge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIElEIG9mIHRoZSBmaWxlIHRvIGF0dGFjaCB0byB0aGUgbWVzc2FnZS5cbiAgICAgICAgICovXG4gICAgICAgIGZpbGVfaWQ/OiBzdHJpbmc7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB0b29scyB0byBhZGQgdGhpcyBmaWxlIHRvLlxuICAgICAgICAgKi9cbiAgICAgICAgdG9vbHM/OiBBcnJheTxBc3Npc3RhbnRzQVBJLkNvZGVJbnRlcnByZXRlclRvb2wgfCBBc3Npc3RhbnRzQVBJLkZpbGVTZWFyY2hUb29sPjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNldCBvZiByZXNvdXJjZXMgdGhhdCBhcmUgbWFkZSBhdmFpbGFibGUgdG8gdGhlIGFzc2lzdGFudCdzIHRvb2xzIGluIHRoaXNcbiAgICAgKiB0aHJlYWQuIFRoZSByZXNvdXJjZXMgYXJlIHNwZWNpZmljIHRvIHRoZSB0eXBlIG9mIHRvb2wuIEZvciBleGFtcGxlLCB0aGVcbiAgICAgKiBgY29kZV9pbnRlcnByZXRlcmAgdG9vbCByZXF1aXJlcyBhIGxpc3Qgb2YgZmlsZSBJRHMsIHdoaWxlIHRoZSBgZmlsZV9zZWFyY2hgXG4gICAgICogdG9vbCByZXF1aXJlcyBhIGxpc3Qgb2YgdmVjdG9yIHN0b3JlIElEcy5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIFRvb2xSZXNvdXJjZXMge1xuICAgICAgY29kZV9pbnRlcnByZXRlcj86IFRvb2xSZXNvdXJjZXMuQ29kZUludGVycHJldGVyO1xuXG4gICAgICBmaWxlX3NlYXJjaD86IFRvb2xSZXNvdXJjZXMuRmlsZVNlYXJjaDtcbiAgICB9XG5cbiAgICBleHBvcnQgbmFtZXNwYWNlIFRvb2xSZXNvdXJjZXMge1xuICAgICAgZXhwb3J0IGludGVyZmFjZSBDb2RlSW50ZXJwcmV0ZXIge1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBsaXN0IG9mIFtmaWxlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2ZpbGVzKSBJRHMgbWFkZVxuICAgICAgICAgKiBhdmFpbGFibGUgdG8gdGhlIGBjb2RlX2ludGVycHJldGVyYCB0b29sLiBUaGVyZSBjYW4gYmUgYSBtYXhpbXVtIG9mIDIwIGZpbGVzXG4gICAgICAgICAqIGFzc29jaWF0ZWQgd2l0aCB0aGUgdG9vbC5cbiAgICAgICAgICovXG4gICAgICAgIGZpbGVfaWRzPzogQXJyYXk8c3RyaW5nPjtcbiAgICAgIH1cblxuICAgICAgZXhwb3J0IGludGVyZmFjZSBGaWxlU2VhcmNoIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZVxuICAgICAgICAgKiBbdmVjdG9yIHN0b3JlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3ZlY3Rvci1zdG9yZXMvb2JqZWN0KVxuICAgICAgICAgKiBhdHRhY2hlZCB0byB0aGlzIHRocmVhZC4gVGhlcmUgY2FuIGJlIGEgbWF4aW11bSBvZiAxIHZlY3RvciBzdG9yZSBhdHRhY2hlZCB0b1xuICAgICAgICAgKiB0aGUgdGhyZWFkLlxuICAgICAgICAgKi9cbiAgICAgICAgdmVjdG9yX3N0b3JlX2lkcz86IEFycmF5PHN0cmluZz47XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgaGVscGVyIHRvIGNyZWF0ZSBhXG4gICAgICAgICAqIFt2ZWN0b3Igc3RvcmVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdmVjdG9yLXN0b3Jlcy9vYmplY3QpXG4gICAgICAgICAqIHdpdGggZmlsZV9pZHMgYW5kIGF0dGFjaCBpdCB0byB0aGlzIHRocmVhZC4gVGhlcmUgY2FuIGJlIGEgbWF4aW11bSBvZiAxIHZlY3RvclxuICAgICAgICAgKiBzdG9yZSBhdHRhY2hlZCB0byB0aGUgdGhyZWFkLlxuICAgICAgICAgKi9cbiAgICAgICAgdmVjdG9yX3N0b3Jlcz86IEFycmF5PEZpbGVTZWFyY2guVmVjdG9yU3RvcmU+O1xuICAgICAgfVxuXG4gICAgICBleHBvcnQgbmFtZXNwYWNlIEZpbGVTZWFyY2gge1xuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIFZlY3RvclN0b3JlIHtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBBIGxpc3Qgb2YgW2ZpbGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvZmlsZXMpIElEcyB0b1xuICAgICAgICAgICAqIGFkZCB0byB0aGUgdmVjdG9yIHN0b3JlLiBUaGVyZSBjYW4gYmUgYSBtYXhpbXVtIG9mIDEwMDAwIGZpbGVzIGluIGEgdmVjdG9yXG4gICAgICAgICAgICogc3RvcmUuXG4gICAgICAgICAgICovXG4gICAgICAgICAgZmlsZV9pZHM/OiBBcnJheTxzdHJpbmc+O1xuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhIHZlY3RvciBzdG9yZS4gVGhpcyBjYW4gYmVcbiAgICAgICAgICAgKiB1c2VmdWwgZm9yIHN0b3JpbmcgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdmVjdG9yIHN0b3JlIGluIGEgc3RydWN0dXJlZFxuICAgICAgICAgICAqIGZvcm1hdC4gS2V5cyBjYW4gYmUgYSBtYXhpbXVtIG9mIDY0IGNoYXJhY3RlcnMgbG9uZyBhbmQgdmFsdWVzIGNhbiBiZSBhIG1heGl1bVxuICAgICAgICAgICAqIG9mIDUxMiBjaGFyYWN0ZXJzIGxvbmcuXG4gICAgICAgICAgICovXG4gICAgICAgICAgbWV0YWRhdGE/OiB1bmtub3duO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIHJlc291cmNlcyB0aGF0IGFyZSB1c2VkIGJ5IHRoZSBhc3Npc3RhbnQncyB0b29scy4gVGhlIHJlc291cmNlcyBhcmVcbiAgICogc3BlY2lmaWMgdG8gdGhlIHR5cGUgb2YgdG9vbC4gRm9yIGV4YW1wbGUsIHRoZSBgY29kZV9pbnRlcnByZXRlcmAgdG9vbCByZXF1aXJlc1xuICAgKiBhIGxpc3Qgb2YgZmlsZSBJRHMsIHdoaWxlIHRoZSBgZmlsZV9zZWFyY2hgIHRvb2wgcmVxdWlyZXMgYSBsaXN0IG9mIHZlY3RvciBzdG9yZVxuICAgKiBJRHMuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRvb2xSZXNvdXJjZXMge1xuICAgIGNvZGVfaW50ZXJwcmV0ZXI/OiBUb29sUmVzb3VyY2VzLkNvZGVJbnRlcnByZXRlcjtcblxuICAgIGZpbGVfc2VhcmNoPzogVG9vbFJlc291cmNlcy5GaWxlU2VhcmNoO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBUb29sUmVzb3VyY2VzIHtcbiAgICBleHBvcnQgaW50ZXJmYWNlIENvZGVJbnRlcnByZXRlciB7XG4gICAgICAvKipcbiAgICAgICAqIEEgbGlzdCBvZiBbZmlsZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maWxlcykgSURzIG1hZGVcbiAgICAgICAqIGF2YWlsYWJsZSB0byB0aGUgYGNvZGVfaW50ZXJwcmV0ZXJgIHRvb2wuIFRoZXJlIGNhbiBiZSBhIG1heGltdW0gb2YgMjAgZmlsZXNcbiAgICAgICAqIGFzc29jaWF0ZWQgd2l0aCB0aGUgdG9vbC5cbiAgICAgICAqL1xuICAgICAgZmlsZV9pZHM/OiBBcnJheTxzdHJpbmc+O1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRmlsZVNlYXJjaCB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBJRCBvZiB0aGVcbiAgICAgICAqIFt2ZWN0b3Igc3RvcmVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdmVjdG9yLXN0b3Jlcy9vYmplY3QpXG4gICAgICAgKiBhdHRhY2hlZCB0byB0aGlzIGFzc2lzdGFudC4gVGhlcmUgY2FuIGJlIGEgbWF4aW11bSBvZiAxIHZlY3RvciBzdG9yZSBhdHRhY2hlZCB0b1xuICAgICAgICogdGhlIGFzc2lzdGFudC5cbiAgICAgICAqL1xuICAgICAgdmVjdG9yX3N0b3JlX2lkcz86IEFycmF5PHN0cmluZz47XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIGZvciBob3cgYSB0aHJlYWQgd2lsbCBiZSB0cnVuY2F0ZWQgcHJpb3IgdG8gdGhlIHJ1bi4gVXNlIHRoaXMgdG9cbiAgICogY29udHJvbCB0aGUgaW50aWFsIGNvbnRleHQgd2luZG93IG9mIHRoZSBydW4uXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFRydW5jYXRpb25TdHJhdGVneSB7XG4gICAgLyoqXG4gICAgICogVGhlIHRydW5jYXRpb24gc3RyYXRlZ3kgdG8gdXNlIGZvciB0aGUgdGhyZWFkLiBUaGUgZGVmYXVsdCBpcyBgYXV0b2AuIElmIHNldCB0b1xuICAgICAqIGBsYXN0X21lc3NhZ2VzYCwgdGhlIHRocmVhZCB3aWxsIGJlIHRydW5jYXRlZCB0byB0aGUgbiBtb3N0IHJlY2VudCBtZXNzYWdlcyBpblxuICAgICAqIHRoZSB0aHJlYWQuIFdoZW4gc2V0IHRvIGBhdXRvYCwgbWVzc2FnZXMgaW4gdGhlIG1pZGRsZSBvZiB0aGUgdGhyZWFkIHdpbGwgYmVcbiAgICAgKiBkcm9wcGVkIHRvIGZpdCB0aGUgY29udGV4dCBsZW5ndGggb2YgdGhlIG1vZGVsLCBgbWF4X3Byb21wdF90b2tlbnNgLlxuICAgICAqL1xuICAgIHR5cGU6ICdhdXRvJyB8ICdsYXN0X21lc3NhZ2VzJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgbW9zdCByZWNlbnQgbWVzc2FnZXMgZnJvbSB0aGUgdGhyZWFkIHdoZW4gY29uc3RydWN0aW5nIHRoZSBjb250ZXh0XG4gICAgICogZm9yIHRoZSBydW4uXG4gICAgICovXG4gICAgbGFzdF9tZXNzYWdlcz86IG51bWJlciB8IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBUaHJlYWRDcmVhdGVBbmRSdW5TdHJlYW1QYXJhbXMge1xuICAvKipcbiAgICogVGhlIElEIG9mIHRoZVxuICAgKiBbYXNzaXN0YW50XShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2Fzc2lzdGFudHMpIHRvIHVzZSB0b1xuICAgKiBleGVjdXRlIHRoaXMgcnVuLlxuICAgKi9cbiAgYXNzaXN0YW50X2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBkZWZhdWx0IHN5c3RlbSBtZXNzYWdlIG9mIHRoZSBhc3Npc3RhbnQuIFRoaXMgaXMgdXNlZnVsIGZvclxuICAgKiBtb2RpZnlpbmcgdGhlIGJlaGF2aW9yIG9uIGEgcGVyLXJ1biBiYXNpcy5cbiAgICovXG4gIGluc3RydWN0aW9ucz86IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiBjb21wbGV0aW9uIHRva2VucyB0aGF0IG1heSBiZSB1c2VkIG92ZXIgdGhlIGNvdXJzZSBvZiB0aGVcbiAgICogcnVuLiBUaGUgcnVuIHdpbGwgbWFrZSBhIGJlc3QgZWZmb3J0IHRvIHVzZSBvbmx5IHRoZSBudW1iZXIgb2YgY29tcGxldGlvbiB0b2tlbnNcbiAgICogc3BlY2lmaWVkLCBhY3Jvc3MgbXVsdGlwbGUgdHVybnMgb2YgdGhlIHJ1bi4gSWYgdGhlIHJ1biBleGNlZWRzIHRoZSBudW1iZXIgb2ZcbiAgICogY29tcGxldGlvbiB0b2tlbnMgc3BlY2lmaWVkLCB0aGUgcnVuIHdpbGwgZW5kIHdpdGggc3RhdHVzIGBpbmNvbXBsZXRlYC4gU2VlXG4gICAqIGBpbmNvbXBsZXRlX2RldGFpbHNgIGZvciBtb3JlIGluZm8uXG4gICAqL1xuICBtYXhfY29tcGxldGlvbl90b2tlbnM/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgcHJvbXB0IHRva2VucyB0aGF0IG1heSBiZSB1c2VkIG92ZXIgdGhlIGNvdXJzZSBvZiB0aGUgcnVuLlxuICAgKiBUaGUgcnVuIHdpbGwgbWFrZSBhIGJlc3QgZWZmb3J0IHRvIHVzZSBvbmx5IHRoZSBudW1iZXIgb2YgcHJvbXB0IHRva2Vuc1xuICAgKiBzcGVjaWZpZWQsIGFjcm9zcyBtdWx0aXBsZSB0dXJucyBvZiB0aGUgcnVuLiBJZiB0aGUgcnVuIGV4Y2VlZHMgdGhlIG51bWJlciBvZlxuICAgKiBwcm9tcHQgdG9rZW5zIHNwZWNpZmllZCwgdGhlIHJ1biB3aWxsIGVuZCB3aXRoIHN0YXR1cyBgaW5jb21wbGV0ZWAuIFNlZVxuICAgKiBgaW5jb21wbGV0ZV9kZXRhaWxzYCBmb3IgbW9yZSBpbmZvLlxuICAgKi9cbiAgbWF4X3Byb21wdF90b2tlbnM/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LiBLZXlzXG4gICAqIGNhbiBiZSBhIG1heGltdW0gb2YgNjQgY2hhcmFjdGVycyBsb25nIGFuZCB2YWx1ZXMgY2FuIGJlIGEgbWF4aXVtIG9mIDUxMlxuICAgKiBjaGFyYWN0ZXJzIGxvbmcuXG4gICAqL1xuICBtZXRhZGF0YT86IHVua25vd24gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIFtNb2RlbF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9tb2RlbHMpIHRvXG4gICAqIGJlIHVzZWQgdG8gZXhlY3V0ZSB0aGlzIHJ1bi4gSWYgYSB2YWx1ZSBpcyBwcm92aWRlZCBoZXJlLCBpdCB3aWxsIG92ZXJyaWRlIHRoZVxuICAgKiBtb2RlbCBhc3NvY2lhdGVkIHdpdGggdGhlIGFzc2lzdGFudC4gSWYgbm90LCB0aGUgbW9kZWwgYXNzb2NpYXRlZCB3aXRoIHRoZVxuICAgKiBhc3Npc3RhbnQgd2lsbCBiZSB1c2VkLlxuICAgKi9cbiAgbW9kZWw/OlxuICAgIHwgKHN0cmluZyAmIHt9KVxuICAgIHwgJ2dwdC00bydcbiAgICB8ICdncHQtNG8tMjAyNC0wNS0xMydcbiAgICB8ICdncHQtNC10dXJibydcbiAgICB8ICdncHQtNC10dXJiby0yMDI0LTA0LTA5J1xuICAgIHwgJ2dwdC00LTAxMjUtcHJldmlldydcbiAgICB8ICdncHQtNC10dXJiby1wcmV2aWV3J1xuICAgIHwgJ2dwdC00LTExMDYtcHJldmlldydcbiAgICB8ICdncHQtNC12aXNpb24tcHJldmlldydcbiAgICB8ICdncHQtNCdcbiAgICB8ICdncHQtNC0wMzE0J1xuICAgIHwgJ2dwdC00LTA2MTMnXG4gICAgfCAnZ3B0LTQtMzJrJ1xuICAgIHwgJ2dwdC00LTMyay0wMzE0J1xuICAgIHwgJ2dwdC00LTMyay0wNjEzJ1xuICAgIHwgJ2dwdC0zLjUtdHVyYm8nXG4gICAgfCAnZ3B0LTMuNS10dXJiby0xNmsnXG4gICAgfCAnZ3B0LTMuNS10dXJiby0wNjEzJ1xuICAgIHwgJ2dwdC0zLjUtdHVyYm8tMTEwNidcbiAgICB8ICdncHQtMy41LXR1cmJvLTAxMjUnXG4gICAgfCAnZ3B0LTMuNS10dXJiby0xNmstMDYxMydcbiAgICB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgZm9ybWF0IHRoYXQgdGhlIG1vZGVsIG11c3Qgb3V0cHV0LiBDb21wYXRpYmxlIHdpdGhcbiAgICogW0dQVC00b10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvbW9kZWxzL2dwdC00byksXG4gICAqIFtHUFQtNCBUdXJib10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvbW9kZWxzL2dwdC00LXR1cmJvLWFuZC1ncHQtNCksXG4gICAqIGFuZCBhbGwgR1BULTMuNSBUdXJibyBtb2RlbHMgc2luY2UgYGdwdC0zLjUtdHVyYm8tMTEwNmAuXG4gICAqXG4gICAqIFNldHRpbmcgdG8gYHsgXCJ0eXBlXCI6IFwianNvbl9vYmplY3RcIiB9YCBlbmFibGVzIEpTT04gbW9kZSwgd2hpY2ggZ3VhcmFudGVlcyB0aGVcbiAgICogbWVzc2FnZSB0aGUgbW9kZWwgZ2VuZXJhdGVzIGlzIHZhbGlkIEpTT04uXG4gICAqXG4gICAqICoqSW1wb3J0YW50OioqIHdoZW4gdXNpbmcgSlNPTiBtb2RlLCB5b3UgKiptdXN0KiogYWxzbyBpbnN0cnVjdCB0aGUgbW9kZWwgdG9cbiAgICogcHJvZHVjZSBKU09OIHlvdXJzZWxmIHZpYSBhIHN5c3RlbSBvciB1c2VyIG1lc3NhZ2UuIFdpdGhvdXQgdGhpcywgdGhlIG1vZGVsIG1heVxuICAgKiBnZW5lcmF0ZSBhbiB1bmVuZGluZyBzdHJlYW0gb2Ygd2hpdGVzcGFjZSB1bnRpbCB0aGUgZ2VuZXJhdGlvbiByZWFjaGVzIHRoZSB0b2tlblxuICAgKiBsaW1pdCwgcmVzdWx0aW5nIGluIGEgbG9uZy1ydW5uaW5nIGFuZCBzZWVtaW5nbHkgXCJzdHVja1wiIHJlcXVlc3QuIEFsc28gbm90ZSB0aGF0XG4gICAqIHRoZSBtZXNzYWdlIGNvbnRlbnQgbWF5IGJlIHBhcnRpYWxseSBjdXQgb2ZmIGlmIGBmaW5pc2hfcmVhc29uPVwibGVuZ3RoXCJgLCB3aGljaFxuICAgKiBpbmRpY2F0ZXMgdGhlIGdlbmVyYXRpb24gZXhjZWVkZWQgYG1heF90b2tlbnNgIG9yIHRoZSBjb252ZXJzYXRpb24gZXhjZWVkZWQgdGhlXG4gICAqIG1heCBjb250ZXh0IGxlbmd0aC5cbiAgICovXG4gIHJlc3BvbnNlX2Zvcm1hdD86IEFzc2lzdGFudFJlc3BvbnNlRm9ybWF0T3B0aW9uIHwgbnVsbDtcblxuICAvKipcbiAgICogV2hhdCBzYW1wbGluZyB0ZW1wZXJhdHVyZSB0byB1c2UsIGJldHdlZW4gMCBhbmQgMi4gSGlnaGVyIHZhbHVlcyBsaWtlIDAuOCB3aWxsXG4gICAqIG1ha2UgdGhlIG91dHB1dCBtb3JlIHJhbmRvbSwgd2hpbGUgbG93ZXIgdmFsdWVzIGxpa2UgMC4yIHdpbGwgbWFrZSBpdCBtb3JlXG4gICAqIGZvY3VzZWQgYW5kIGRldGVybWluaXN0aWMuXG4gICAqL1xuICB0ZW1wZXJhdHVyZT86IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIElmIG5vIHRocmVhZCBpcyBwcm92aWRlZCwgYW4gZW1wdHkgdGhyZWFkIHdpbGwgYmUgY3JlYXRlZC5cbiAgICovXG4gIHRocmVhZD86IFRocmVhZENyZWF0ZUFuZFJ1blN0cmVhbVBhcmFtcy5UaHJlYWQ7XG5cbiAgLyoqXG4gICAqIENvbnRyb2xzIHdoaWNoIChpZiBhbnkpIHRvb2wgaXMgY2FsbGVkIGJ5IHRoZSBtb2RlbC4gYG5vbmVgIG1lYW5zIHRoZSBtb2RlbCB3aWxsXG4gICAqIG5vdCBjYWxsIGFueSB0b29scyBhbmQgaW5zdGVhZCBnZW5lcmF0ZXMgYSBtZXNzYWdlLiBgYXV0b2AgaXMgdGhlIGRlZmF1bHQgdmFsdWVcbiAgICogYW5kIG1lYW5zIHRoZSBtb2RlbCBjYW4gcGljayBiZXR3ZWVuIGdlbmVyYXRpbmcgYSBtZXNzYWdlIG9yIGNhbGxpbmcgb25lIG9yIG1vcmVcbiAgICogdG9vbHMuIGByZXF1aXJlZGAgbWVhbnMgdGhlIG1vZGVsIG11c3QgY2FsbCBvbmUgb3IgbW9yZSB0b29scyBiZWZvcmUgcmVzcG9uZGluZ1xuICAgKiB0byB0aGUgdXNlci4gU3BlY2lmeWluZyBhIHBhcnRpY3VsYXIgdG9vbCBsaWtlIGB7XCJ0eXBlXCI6IFwiZmlsZV9zZWFyY2hcIn1gIG9yXG4gICAqIGB7XCJ0eXBlXCI6IFwiZnVuY3Rpb25cIiwgXCJmdW5jdGlvblwiOiB7XCJuYW1lXCI6IFwibXlfZnVuY3Rpb25cIn19YCBmb3JjZXMgdGhlIG1vZGVsIHRvXG4gICAqIGNhbGwgdGhhdCB0b29sLlxuICAgKi9cbiAgdG9vbF9jaG9pY2U/OiBBc3Npc3RhbnRUb29sQ2hvaWNlT3B0aW9uIHwgbnVsbDtcblxuICAvKipcbiAgICogQSBzZXQgb2YgcmVzb3VyY2VzIHRoYXQgYXJlIHVzZWQgYnkgdGhlIGFzc2lzdGFudCdzIHRvb2xzLiBUaGUgcmVzb3VyY2VzIGFyZVxuICAgKiBzcGVjaWZpYyB0byB0aGUgdHlwZSBvZiB0b29sLiBGb3IgZXhhbXBsZSwgdGhlIGBjb2RlX2ludGVycHJldGVyYCB0b29sIHJlcXVpcmVzXG4gICAqIGEgbGlzdCBvZiBmaWxlIElEcywgd2hpbGUgdGhlIGBmaWxlX3NlYXJjaGAgdG9vbCByZXF1aXJlcyBhIGxpc3Qgb2YgdmVjdG9yIHN0b3JlXG4gICAqIElEcy5cbiAgICovXG4gIHRvb2xfcmVzb3VyY2VzPzogVGhyZWFkQ3JlYXRlQW5kUnVuU3RyZWFtUGFyYW1zLlRvb2xSZXNvdXJjZXMgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgdG9vbHMgdGhlIGFzc2lzdGFudCBjYW4gdXNlIGZvciB0aGlzIHJ1bi4gVGhpcyBpcyB1c2VmdWwgZm9yXG4gICAqIG1vZGlmeWluZyB0aGUgYmVoYXZpb3Igb24gYSBwZXItcnVuIGJhc2lzLlxuICAgKi9cbiAgdG9vbHM/OiBBcnJheTxcbiAgICBBc3Npc3RhbnRzQVBJLkNvZGVJbnRlcnByZXRlclRvb2wgfCBBc3Npc3RhbnRzQVBJLkZpbGVTZWFyY2hUb29sIHwgQXNzaXN0YW50c0FQSS5GdW5jdGlvblRvb2xcbiAgPiB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEFuIGFsdGVybmF0aXZlIHRvIHNhbXBsaW5nIHdpdGggdGVtcGVyYXR1cmUsIGNhbGxlZCBudWNsZXVzIHNhbXBsaW5nLCB3aGVyZSB0aGVcbiAgICogbW9kZWwgY29uc2lkZXJzIHRoZSByZXN1bHRzIG9mIHRoZSB0b2tlbnMgd2l0aCB0b3BfcCBwcm9iYWJpbGl0eSBtYXNzLiBTbyAwLjFcbiAgICogbWVhbnMgb25seSB0aGUgdG9rZW5zIGNvbXByaXNpbmcgdGhlIHRvcCAxMCUgcHJvYmFiaWxpdHkgbWFzcyBhcmUgY29uc2lkZXJlZC5cbiAgICpcbiAgICogV2UgZ2VuZXJhbGx5IHJlY29tbWVuZCBhbHRlcmluZyB0aGlzIG9yIHRlbXBlcmF0dXJlIGJ1dCBub3QgYm90aC5cbiAgICovXG4gIHRvcF9wPzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogQ29udHJvbHMgZm9yIGhvdyBhIHRocmVhZCB3aWxsIGJlIHRydW5jYXRlZCBwcmlvciB0byB0aGUgcnVuLiBVc2UgdGhpcyB0b1xuICAgKiBjb250cm9sIHRoZSBpbnRpYWwgY29udGV4dCB3aW5kb3cgb2YgdGhlIHJ1bi5cbiAgICovXG4gIHRydW5jYXRpb25fc3RyYXRlZ3k/OiBUaHJlYWRDcmVhdGVBbmRSdW5TdHJlYW1QYXJhbXMuVHJ1bmNhdGlvblN0cmF0ZWd5IHwgbnVsbDtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBUaHJlYWRDcmVhdGVBbmRSdW5TdHJlYW1QYXJhbXMge1xuICAvKipcbiAgICogSWYgbm8gdGhyZWFkIGlzIHByb3ZpZGVkLCBhbiBlbXB0eSB0aHJlYWQgd2lsbCBiZSBjcmVhdGVkLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUaHJlYWQge1xuICAgIC8qKlxuICAgICAqIEEgbGlzdCBvZiBbbWVzc2FnZXNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvbWVzc2FnZXMpIHRvXG4gICAgICogc3RhcnQgdGhlIHRocmVhZCB3aXRoLlxuICAgICAqL1xuICAgIG1lc3NhZ2VzPzogQXJyYXk8VGhyZWFkLk1lc3NhZ2U+O1xuXG4gICAgLyoqXG4gICAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LiBLZXlzXG4gICAgICogY2FuIGJlIGEgbWF4aW11bSBvZiA2NCBjaGFyYWN0ZXJzIGxvbmcgYW5kIHZhbHVlcyBjYW4gYmUgYSBtYXhpdW0gb2YgNTEyXG4gICAgICogY2hhcmFjdGVycyBsb25nLlxuICAgICAqL1xuICAgIG1ldGFkYXRhPzogdW5rbm93biB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBBIHNldCBvZiByZXNvdXJjZXMgdGhhdCBhcmUgbWFkZSBhdmFpbGFibGUgdG8gdGhlIGFzc2lzdGFudCdzIHRvb2xzIGluIHRoaXNcbiAgICAgKiB0aHJlYWQuIFRoZSByZXNvdXJjZXMgYXJlIHNwZWNpZmljIHRvIHRoZSB0eXBlIG9mIHRvb2wuIEZvciBleGFtcGxlLCB0aGVcbiAgICAgKiBgY29kZV9pbnRlcnByZXRlcmAgdG9vbCByZXF1aXJlcyBhIGxpc3Qgb2YgZmlsZSBJRHMsIHdoaWxlIHRoZSBgZmlsZV9zZWFyY2hgXG4gICAgICogdG9vbCByZXF1aXJlcyBhIGxpc3Qgb2YgdmVjdG9yIHN0b3JlIElEcy5cbiAgICAgKi9cbiAgICB0b29sX3Jlc291cmNlcz86IFRocmVhZC5Ub29sUmVzb3VyY2VzIHwgbnVsbDtcbiAgfVxuXG4gIGV4cG9ydCBuYW1lc3BhY2UgVGhyZWFkIHtcbiAgICBleHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2Uge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdGV4dCBjb250ZW50cyBvZiB0aGUgbWVzc2FnZS5cbiAgICAgICAqL1xuICAgICAgY29udGVudDogc3RyaW5nIHwgQXJyYXk8TWVzc2FnZXNBUEkuTWVzc2FnZUNvbnRlbnRQYXJ0UGFyYW0+O1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSByb2xlIG9mIHRoZSBlbnRpdHkgdGhhdCBpcyBjcmVhdGluZyB0aGUgbWVzc2FnZS4gQWxsb3dlZCB2YWx1ZXMgaW5jbHVkZTpcbiAgICAgICAqXG4gICAgICAgKiAtIGB1c2VyYDogSW5kaWNhdGVzIHRoZSBtZXNzYWdlIGlzIHNlbnQgYnkgYW4gYWN0dWFsIHVzZXIgYW5kIHNob3VsZCBiZSB1c2VkIGluXG4gICAgICAgKiAgIG1vc3QgY2FzZXMgdG8gcmVwcmVzZW50IHVzZXItZ2VuZXJhdGVkIG1lc3NhZ2VzLlxuICAgICAgICogLSBgYXNzaXN0YW50YDogSW5kaWNhdGVzIHRoZSBtZXNzYWdlIGlzIGdlbmVyYXRlZCBieSB0aGUgYXNzaXN0YW50LiBVc2UgdGhpc1xuICAgICAgICogICB2YWx1ZSB0byBpbnNlcnQgbWVzc2FnZXMgZnJvbSB0aGUgYXNzaXN0YW50IGludG8gdGhlIGNvbnZlcnNhdGlvbi5cbiAgICAgICAqL1xuICAgICAgcm9sZTogJ3VzZXInIHwgJ2Fzc2lzdGFudCc7XG5cbiAgICAgIC8qKlxuICAgICAgICogQSBsaXN0IG9mIGZpbGVzIGF0dGFjaGVkIHRvIHRoZSBtZXNzYWdlLCBhbmQgdGhlIHRvb2xzIHRoZXkgc2hvdWxkIGJlIGFkZGVkIHRvLlxuICAgICAgICovXG4gICAgICBhdHRhY2htZW50cz86IEFycmF5PE1lc3NhZ2UuQXR0YWNobWVudD4gfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIFNldCBvZiAxNiBrZXktdmFsdWUgcGFpcnMgdGhhdCBjYW4gYmUgYXR0YWNoZWQgdG8gYW4gb2JqZWN0LiBUaGlzIGNhbiBiZSB1c2VmdWxcbiAgICAgICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LiBLZXlzXG4gICAgICAgKiBjYW4gYmUgYSBtYXhpbXVtIG9mIDY0IGNoYXJhY3RlcnMgbG9uZyBhbmQgdmFsdWVzIGNhbiBiZSBhIG1heGl1bSBvZiA1MTJcbiAgICAgICAqIGNoYXJhY3RlcnMgbG9uZy5cbiAgICAgICAqL1xuICAgICAgbWV0YWRhdGE/OiB1bmtub3duIHwgbnVsbDtcbiAgICB9XG5cbiAgICBleHBvcnQgbmFtZXNwYWNlIE1lc3NhZ2Uge1xuICAgICAgZXhwb3J0IGludGVyZmFjZSBBdHRhY2htZW50IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBJRCBvZiB0aGUgZmlsZSB0byBhdHRhY2ggdG8gdGhlIG1lc3NhZ2UuXG4gICAgICAgICAqL1xuICAgICAgICBmaWxlX2lkPzogc3RyaW5nO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdG9vbHMgdG8gYWRkIHRoaXMgZmlsZSB0by5cbiAgICAgICAgICovXG4gICAgICAgIHRvb2xzPzogQXJyYXk8QXNzaXN0YW50c0FQSS5Db2RlSW50ZXJwcmV0ZXJUb29sIHwgQXNzaXN0YW50c0FQSS5GaWxlU2VhcmNoVG9vbD47XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzZXQgb2YgcmVzb3VyY2VzIHRoYXQgYXJlIG1hZGUgYXZhaWxhYmxlIHRvIHRoZSBhc3Npc3RhbnQncyB0b29scyBpbiB0aGlzXG4gICAgICogdGhyZWFkLiBUaGUgcmVzb3VyY2VzIGFyZSBzcGVjaWZpYyB0byB0aGUgdHlwZSBvZiB0b29sLiBGb3IgZXhhbXBsZSwgdGhlXG4gICAgICogYGNvZGVfaW50ZXJwcmV0ZXJgIHRvb2wgcmVxdWlyZXMgYSBsaXN0IG9mIGZpbGUgSURzLCB3aGlsZSB0aGUgYGZpbGVfc2VhcmNoYFxuICAgICAqIHRvb2wgcmVxdWlyZXMgYSBsaXN0IG9mIHZlY3RvciBzdG9yZSBJRHMuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBUb29sUmVzb3VyY2VzIHtcbiAgICAgIGNvZGVfaW50ZXJwcmV0ZXI/OiBUb29sUmVzb3VyY2VzLkNvZGVJbnRlcnByZXRlcjtcblxuICAgICAgZmlsZV9zZWFyY2g/OiBUb29sUmVzb3VyY2VzLkZpbGVTZWFyY2g7XG4gICAgfVxuXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBUb29sUmVzb3VyY2VzIHtcbiAgICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29kZUludGVycHJldGVyIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgbGlzdCBvZiBbZmlsZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maWxlcykgSURzIG1hZGVcbiAgICAgICAgICogYXZhaWxhYmxlIHRvIHRoZSBgY29kZV9pbnRlcnByZXRlcmAgdG9vbC4gVGhlcmUgY2FuIGJlIGEgbWF4aW11bSBvZiAyMCBmaWxlc1xuICAgICAgICAgKiBhc3NvY2lhdGVkIHdpdGggdGhlIHRvb2wuXG4gICAgICAgICAqL1xuICAgICAgICBmaWxlX2lkcz86IEFycmF5PHN0cmluZz47XG4gICAgICB9XG5cbiAgICAgIGV4cG9ydCBpbnRlcmZhY2UgRmlsZVNlYXJjaCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGVcbiAgICAgICAgICogW3ZlY3RvciBzdG9yZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS92ZWN0b3Itc3RvcmVzL29iamVjdClcbiAgICAgICAgICogYXR0YWNoZWQgdG8gdGhpcyB0aHJlYWQuIFRoZXJlIGNhbiBiZSBhIG1heGltdW0gb2YgMSB2ZWN0b3Igc3RvcmUgYXR0YWNoZWQgdG9cbiAgICAgICAgICogdGhlIHRocmVhZC5cbiAgICAgICAgICovXG4gICAgICAgIHZlY3Rvcl9zdG9yZV9pZHM/OiBBcnJheTxzdHJpbmc+O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGhlbHBlciB0byBjcmVhdGUgYVxuICAgICAgICAgKiBbdmVjdG9yIHN0b3JlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3ZlY3Rvci1zdG9yZXMvb2JqZWN0KVxuICAgICAgICAgKiB3aXRoIGZpbGVfaWRzIGFuZCBhdHRhY2ggaXQgdG8gdGhpcyB0aHJlYWQuIFRoZXJlIGNhbiBiZSBhIG1heGltdW0gb2YgMSB2ZWN0b3JcbiAgICAgICAgICogc3RvcmUgYXR0YWNoZWQgdG8gdGhlIHRocmVhZC5cbiAgICAgICAgICovXG4gICAgICAgIHZlY3Rvcl9zdG9yZXM/OiBBcnJheTxGaWxlU2VhcmNoLlZlY3RvclN0b3JlPjtcbiAgICAgIH1cblxuICAgICAgZXhwb3J0IG5hbWVzcGFjZSBGaWxlU2VhcmNoIHtcbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBWZWN0b3JTdG9yZSB7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQSBsaXN0IG9mIFtmaWxlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2ZpbGVzKSBJRHMgdG9cbiAgICAgICAgICAgKiBhZGQgdG8gdGhlIHZlY3RvciBzdG9yZS4gVGhlcmUgY2FuIGJlIGEgbWF4aW11bSBvZiAxMDAwMCBmaWxlcyBpbiBhIHZlY3RvclxuICAgICAgICAgICAqIHN0b3JlLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGZpbGVfaWRzPzogQXJyYXk8c3RyaW5nPjtcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIFNldCBvZiAxNiBrZXktdmFsdWUgcGFpcnMgdGhhdCBjYW4gYmUgYXR0YWNoZWQgdG8gYSB2ZWN0b3Igc3RvcmUuIFRoaXMgY2FuIGJlXG4gICAgICAgICAgICogdXNlZnVsIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHZlY3RvciBzdG9yZSBpbiBhIHN0cnVjdHVyZWRcbiAgICAgICAgICAgKiBmb3JtYXQuIEtleXMgY2FuIGJlIGEgbWF4aW11bSBvZiA2NCBjaGFyYWN0ZXJzIGxvbmcgYW5kIHZhbHVlcyBjYW4gYmUgYSBtYXhpdW1cbiAgICAgICAgICAgKiBvZiA1MTIgY2hhcmFjdGVycyBsb25nLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIG1ldGFkYXRhPzogdW5rbm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNldCBvZiByZXNvdXJjZXMgdGhhdCBhcmUgdXNlZCBieSB0aGUgYXNzaXN0YW50J3MgdG9vbHMuIFRoZSByZXNvdXJjZXMgYXJlXG4gICAqIHNwZWNpZmljIHRvIHRoZSB0eXBlIG9mIHRvb2wuIEZvciBleGFtcGxlLCB0aGUgYGNvZGVfaW50ZXJwcmV0ZXJgIHRvb2wgcmVxdWlyZXNcbiAgICogYSBsaXN0IG9mIGZpbGUgSURzLCB3aGlsZSB0aGUgYGZpbGVfc2VhcmNoYCB0b29sIHJlcXVpcmVzIGEgbGlzdCBvZiB2ZWN0b3Igc3RvcmVcbiAgICogSURzLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUb29sUmVzb3VyY2VzIHtcbiAgICBjb2RlX2ludGVycHJldGVyPzogVG9vbFJlc291cmNlcy5Db2RlSW50ZXJwcmV0ZXI7XG5cbiAgICBmaWxlX3NlYXJjaD86IFRvb2xSZXNvdXJjZXMuRmlsZVNlYXJjaDtcbiAgfVxuXG4gIGV4cG9ydCBuYW1lc3BhY2UgVG9vbFJlc291cmNlcyB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBDb2RlSW50ZXJwcmV0ZXIge1xuICAgICAgLyoqXG4gICAgICAgKiBBIGxpc3Qgb2YgW2ZpbGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvZmlsZXMpIElEcyBtYWRlXG4gICAgICAgKiBhdmFpbGFibGUgdG8gdGhlIGBjb2RlX2ludGVycHJldGVyYCB0b29sLiBUaGVyZSBjYW4gYmUgYSBtYXhpbXVtIG9mIDIwIGZpbGVzXG4gICAgICAgKiBhc3NvY2lhdGVkIHdpdGggdGhlIHRvb2wuXG4gICAgICAgKi9cbiAgICAgIGZpbGVfaWRzPzogQXJyYXk8c3RyaW5nPjtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIEZpbGVTZWFyY2gge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgSUQgb2YgdGhlXG4gICAgICAgKiBbdmVjdG9yIHN0b3JlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3ZlY3Rvci1zdG9yZXMvb2JqZWN0KVxuICAgICAgICogYXR0YWNoZWQgdG8gdGhpcyBhc3Npc3RhbnQuIFRoZXJlIGNhbiBiZSBhIG1heGltdW0gb2YgMSB2ZWN0b3Igc3RvcmUgYXR0YWNoZWQgdG9cbiAgICAgICAqIHRoZSBhc3Npc3RhbnQuXG4gICAgICAgKi9cbiAgICAgIHZlY3Rvcl9zdG9yZV9pZHM/OiBBcnJheTxzdHJpbmc+O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb250cm9scyBmb3IgaG93IGEgdGhyZWFkIHdpbGwgYmUgdHJ1bmNhdGVkIHByaW9yIHRvIHRoZSBydW4uIFVzZSB0aGlzIHRvXG4gICAqIGNvbnRyb2wgdGhlIGludGlhbCBjb250ZXh0IHdpbmRvdyBvZiB0aGUgcnVuLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUcnVuY2F0aW9uU3RyYXRlZ3kge1xuICAgIC8qKlxuICAgICAqIFRoZSB0cnVuY2F0aW9uIHN0cmF0ZWd5IHRvIHVzZSBmb3IgdGhlIHRocmVhZC4gVGhlIGRlZmF1bHQgaXMgYGF1dG9gLiBJZiBzZXQgdG9cbiAgICAgKiBgbGFzdF9tZXNzYWdlc2AsIHRoZSB0aHJlYWQgd2lsbCBiZSB0cnVuY2F0ZWQgdG8gdGhlIG4gbW9zdCByZWNlbnQgbWVzc2FnZXMgaW5cbiAgICAgKiB0aGUgdGhyZWFkLiBXaGVuIHNldCB0byBgYXV0b2AsIG1lc3NhZ2VzIGluIHRoZSBtaWRkbGUgb2YgdGhlIHRocmVhZCB3aWxsIGJlXG4gICAgICogZHJvcHBlZCB0byBmaXQgdGhlIGNvbnRleHQgbGVuZ3RoIG9mIHRoZSBtb2RlbCwgYG1heF9wcm9tcHRfdG9rZW5zYC5cbiAgICAgKi9cbiAgICB0eXBlOiAnYXV0bycgfCAnbGFzdF9tZXNzYWdlcyc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIG1vc3QgcmVjZW50IG1lc3NhZ2VzIGZyb20gdGhlIHRocmVhZCB3aGVuIGNvbnN0cnVjdGluZyB0aGUgY29udGV4dFxuICAgICAqIGZvciB0aGUgcnVuLlxuICAgICAqL1xuICAgIGxhc3RfbWVzc2FnZXM/OiBudW1iZXIgfCBudWxsO1xuICB9XG59XG5cblRocmVhZHMuUnVucyA9IFJ1bnM7XG5UaHJlYWRzLlJ1bnNQYWdlID0gUnVuc1BhZ2U7XG5UaHJlYWRzLk1lc3NhZ2VzID0gTWVzc2FnZXM7XG5UaHJlYWRzLk1lc3NhZ2VzUGFnZSA9IE1lc3NhZ2VzUGFnZTtcblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIFRocmVhZHMge1xuICBleHBvcnQge1xuICAgIHR5cGUgQXNzaXN0YW50UmVzcG9uc2VGb3JtYXRPcHRpb24gYXMgQXNzaXN0YW50UmVzcG9uc2VGb3JtYXRPcHRpb24sXG4gICAgdHlwZSBBc3Npc3RhbnRUb29sQ2hvaWNlIGFzIEFzc2lzdGFudFRvb2xDaG9pY2UsXG4gICAgdHlwZSBBc3Npc3RhbnRUb29sQ2hvaWNlRnVuY3Rpb24gYXMgQXNzaXN0YW50VG9vbENob2ljZUZ1bmN0aW9uLFxuICAgIHR5cGUgQXNzaXN0YW50VG9vbENob2ljZU9wdGlvbiBhcyBBc3Npc3RhbnRUb29sQ2hvaWNlT3B0aW9uLFxuICAgIHR5cGUgVGhyZWFkIGFzIFRocmVhZCxcbiAgICB0eXBlIFRocmVhZERlbGV0ZWQgYXMgVGhyZWFkRGVsZXRlZCxcbiAgICB0eXBlIFRocmVhZENyZWF0ZVBhcmFtcyBhcyBUaHJlYWRDcmVhdGVQYXJhbXMsXG4gICAgdHlwZSBUaHJlYWRVcGRhdGVQYXJhbXMgYXMgVGhyZWFkVXBkYXRlUGFyYW1zLFxuICAgIHR5cGUgVGhyZWFkQ3JlYXRlQW5kUnVuUGFyYW1zIGFzIFRocmVhZENyZWF0ZUFuZFJ1blBhcmFtcyxcbiAgICB0eXBlIFRocmVhZENyZWF0ZUFuZFJ1blBhcmFtc05vblN0cmVhbWluZyBhcyBUaHJlYWRDcmVhdGVBbmRSdW5QYXJhbXNOb25TdHJlYW1pbmcsXG4gICAgdHlwZSBUaHJlYWRDcmVhdGVBbmRSdW5QYXJhbXNTdHJlYW1pbmcgYXMgVGhyZWFkQ3JlYXRlQW5kUnVuUGFyYW1zU3RyZWFtaW5nLFxuICAgIHR5cGUgVGhyZWFkQ3JlYXRlQW5kUnVuUG9sbFBhcmFtcyxcbiAgICB0eXBlIFRocmVhZENyZWF0ZUFuZFJ1blN0cmVhbVBhcmFtcyxcbiAgfTtcblxuICBleHBvcnQge1xuICAgIFJ1bnMgYXMgUnVucyxcbiAgICB0eXBlIFJlcXVpcmVkQWN0aW9uRnVuY3Rpb25Ub29sQ2FsbCBhcyBSZXF1aXJlZEFjdGlvbkZ1bmN0aW9uVG9vbENhbGwsXG4gICAgdHlwZSBSdW4gYXMgUnVuLFxuICAgIHR5cGUgUnVuU3RhdHVzIGFzIFJ1blN0YXR1cyxcbiAgICBSdW5zUGFnZSBhcyBSdW5zUGFnZSxcbiAgICB0eXBlIFJ1bkNyZWF0ZVBhcmFtcyBhcyBSdW5DcmVhdGVQYXJhbXMsXG4gICAgdHlwZSBSdW5DcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcgYXMgUnVuQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nLFxuICAgIHR5cGUgUnVuQ3JlYXRlUGFyYW1zU3RyZWFtaW5nIGFzIFJ1bkNyZWF0ZVBhcmFtc1N0cmVhbWluZyxcbiAgICB0eXBlIFJ1blVwZGF0ZVBhcmFtcyBhcyBSdW5VcGRhdGVQYXJhbXMsXG4gICAgdHlwZSBSdW5MaXN0UGFyYW1zIGFzIFJ1bkxpc3RQYXJhbXMsXG4gICAgdHlwZSBSdW5DcmVhdGVBbmRQb2xsUGFyYW1zLFxuICAgIHR5cGUgUnVuQ3JlYXRlQW5kU3RyZWFtUGFyYW1zLFxuICAgIHR5cGUgUnVuU3RyZWFtUGFyYW1zLFxuICAgIHR5cGUgUnVuU3VibWl0VG9vbE91dHB1dHNQYXJhbXMgYXMgUnVuU3VibWl0VG9vbE91dHB1dHNQYXJhbXMsXG4gICAgdHlwZSBSdW5TdWJtaXRUb29sT3V0cHV0c1BhcmFtc05vblN0cmVhbWluZyBhcyBSdW5TdWJtaXRUb29sT3V0cHV0c1BhcmFtc05vblN0cmVhbWluZyxcbiAgICB0eXBlIFJ1blN1Ym1pdFRvb2xPdXRwdXRzUGFyYW1zU3RyZWFtaW5nIGFzIFJ1blN1Ym1pdFRvb2xPdXRwdXRzUGFyYW1zU3RyZWFtaW5nLFxuICAgIHR5cGUgUnVuU3VibWl0VG9vbE91dHB1dHNBbmRQb2xsUGFyYW1zLFxuICAgIHR5cGUgUnVuU3VibWl0VG9vbE91dHB1dHNTdHJlYW1QYXJhbXMsXG4gIH07XG5cbiAgZXhwb3J0IHtcbiAgICBNZXNzYWdlcyBhcyBNZXNzYWdlcyxcbiAgICB0eXBlIEFubm90YXRpb24gYXMgQW5ub3RhdGlvbixcbiAgICB0eXBlIEFubm90YXRpb25EZWx0YSBhcyBBbm5vdGF0aW9uRGVsdGEsXG4gICAgdHlwZSBGaWxlQ2l0YXRpb25Bbm5vdGF0aW9uIGFzIEZpbGVDaXRhdGlvbkFubm90YXRpb24sXG4gICAgdHlwZSBGaWxlQ2l0YXRpb25EZWx0YUFubm90YXRpb24gYXMgRmlsZUNpdGF0aW9uRGVsdGFBbm5vdGF0aW9uLFxuICAgIHR5cGUgRmlsZVBhdGhBbm5vdGF0aW9uIGFzIEZpbGVQYXRoQW5ub3RhdGlvbixcbiAgICB0eXBlIEZpbGVQYXRoRGVsdGFBbm5vdGF0aW9uIGFzIEZpbGVQYXRoRGVsdGFBbm5vdGF0aW9uLFxuICAgIHR5cGUgSW1hZ2VGaWxlIGFzIEltYWdlRmlsZSxcbiAgICB0eXBlIEltYWdlRmlsZUNvbnRlbnRCbG9jayBhcyBJbWFnZUZpbGVDb250ZW50QmxvY2ssXG4gICAgdHlwZSBJbWFnZUZpbGVEZWx0YSBhcyBJbWFnZUZpbGVEZWx0YSxcbiAgICB0eXBlIEltYWdlRmlsZURlbHRhQmxvY2sgYXMgSW1hZ2VGaWxlRGVsdGFCbG9jayxcbiAgICB0eXBlIEltYWdlVVJMIGFzIEltYWdlVVJMLFxuICAgIHR5cGUgSW1hZ2VVUkxDb250ZW50QmxvY2sgYXMgSW1hZ2VVUkxDb250ZW50QmxvY2ssXG4gICAgdHlwZSBJbWFnZVVSTERlbHRhIGFzIEltYWdlVVJMRGVsdGEsXG4gICAgdHlwZSBJbWFnZVVSTERlbHRhQmxvY2sgYXMgSW1hZ2VVUkxEZWx0YUJsb2NrLFxuICAgIHR5cGUgTWVzc2FnZXNBUElNZXNzYWdlIGFzIE1lc3NhZ2UsXG4gICAgdHlwZSBNZXNzYWdlQ29udGVudCBhcyBNZXNzYWdlQ29udGVudCxcbiAgICB0eXBlIE1lc3NhZ2VDb250ZW50RGVsdGEgYXMgTWVzc2FnZUNvbnRlbnREZWx0YSxcbiAgICB0eXBlIE1lc3NhZ2VDb250ZW50UGFydFBhcmFtIGFzIE1lc3NhZ2VDb250ZW50UGFydFBhcmFtLFxuICAgIHR5cGUgTWVzc2FnZURlbGV0ZWQgYXMgTWVzc2FnZURlbGV0ZWQsXG4gICAgdHlwZSBNZXNzYWdlRGVsdGEgYXMgTWVzc2FnZURlbHRhLFxuICAgIHR5cGUgTWVzc2FnZURlbHRhRXZlbnQgYXMgTWVzc2FnZURlbHRhRXZlbnQsXG4gICAgdHlwZSBSZWZ1c2FsQ29udGVudEJsb2NrIGFzIFJlZnVzYWxDb250ZW50QmxvY2ssXG4gICAgdHlwZSBSZWZ1c2FsRGVsdGFCbG9jayBhcyBSZWZ1c2FsRGVsdGFCbG9jayxcbiAgICB0eXBlIFRleHQgYXMgVGV4dCxcbiAgICB0eXBlIFRleHRDb250ZW50QmxvY2sgYXMgVGV4dENvbnRlbnRCbG9jayxcbiAgICB0eXBlIFRleHRDb250ZW50QmxvY2tQYXJhbSBhcyBUZXh0Q29udGVudEJsb2NrUGFyYW0sXG4gICAgdHlwZSBUZXh0RGVsdGEgYXMgVGV4dERlbHRhLFxuICAgIHR5cGUgVGV4dERlbHRhQmxvY2sgYXMgVGV4dERlbHRhQmxvY2ssXG4gICAgTWVzc2FnZXNQYWdlIGFzIE1lc3NhZ2VzUGFnZSxcbiAgICB0eXBlIE1lc3NhZ2VDcmVhdGVQYXJhbXMgYXMgTWVzc2FnZUNyZWF0ZVBhcmFtcyxcbiAgICB0eXBlIE1lc3NhZ2VVcGRhdGVQYXJhbXMgYXMgTWVzc2FnZVVwZGF0ZVBhcmFtcyxcbiAgICB0eXBlIE1lc3NhZ2VMaXN0UGFyYW1zIGFzIE1lc3NhZ2VMaXN0UGFyYW1zLFxuICB9O1xuXG4gIGV4cG9ydCB7IEFzc2lzdGFudFN0cmVhbSB9O1xufVxuIiwgIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnLi4vLi4vcmVzb3VyY2UnO1xuaW1wb3J0ICogYXMgQXNzaXN0YW50c0FQSSBmcm9tICcuL2Fzc2lzdGFudHMnO1xuaW1wb3J0ICogYXMgQ2hhdEFQSSBmcm9tICcuL2NoYXQvY2hhdCc7XG5pbXBvcnQge1xuICBBc3Npc3RhbnQsXG4gIEFzc2lzdGFudENyZWF0ZVBhcmFtcyxcbiAgQXNzaXN0YW50RGVsZXRlZCxcbiAgQXNzaXN0YW50TGlzdFBhcmFtcyxcbiAgQXNzaXN0YW50U3RyZWFtRXZlbnQsXG4gIEFzc2lzdGFudFRvb2wsXG4gIEFzc2lzdGFudFVwZGF0ZVBhcmFtcyxcbiAgQXNzaXN0YW50cyxcbiAgQXNzaXN0YW50c1BhZ2UsXG4gIENvZGVJbnRlcnByZXRlclRvb2wsXG4gIEZpbGVTZWFyY2hUb29sLFxuICBGdW5jdGlvblRvb2wsXG4gIE1lc3NhZ2VTdHJlYW1FdmVudCxcbiAgUnVuU3RlcFN0cmVhbUV2ZW50LFxuICBSdW5TdHJlYW1FdmVudCxcbiAgVGhyZWFkU3RyZWFtRXZlbnQsXG59IGZyb20gJy4vYXNzaXN0YW50cyc7XG5pbXBvcnQgKiBhcyBSZWFsdGltZUFQSSBmcm9tICcuL3JlYWx0aW1lL3JlYWx0aW1lJztcbmltcG9ydCB7XG4gIENvbnZlcnNhdGlvbkNyZWF0ZWRFdmVudCxcbiAgQ29udmVyc2F0aW9uSXRlbSxcbiAgQ29udmVyc2F0aW9uSXRlbUNvbnRlbnQsXG4gIENvbnZlcnNhdGlvbkl0ZW1DcmVhdGVFdmVudCxcbiAgQ29udmVyc2F0aW9uSXRlbUNyZWF0ZWRFdmVudCxcbiAgQ29udmVyc2F0aW9uSXRlbURlbGV0ZUV2ZW50LFxuICBDb252ZXJzYXRpb25JdGVtRGVsZXRlZEV2ZW50LFxuICBDb252ZXJzYXRpb25JdGVtSW5wdXRBdWRpb1RyYW5zY3JpcHRpb25Db21wbGV0ZWRFdmVudCxcbiAgQ29udmVyc2F0aW9uSXRlbUlucHV0QXVkaW9UcmFuc2NyaXB0aW9uRGVsdGFFdmVudCxcbiAgQ29udmVyc2F0aW9uSXRlbUlucHV0QXVkaW9UcmFuc2NyaXB0aW9uRmFpbGVkRXZlbnQsXG4gIENvbnZlcnNhdGlvbkl0ZW1SZXRyaWV2ZUV2ZW50LFxuICBDb252ZXJzYXRpb25JdGVtVHJ1bmNhdGVFdmVudCxcbiAgQ29udmVyc2F0aW9uSXRlbVRydW5jYXRlZEV2ZW50LFxuICBDb252ZXJzYXRpb25JdGVtV2l0aFJlZmVyZW5jZSxcbiAgRXJyb3JFdmVudCxcbiAgSW5wdXRBdWRpb0J1ZmZlckFwcGVuZEV2ZW50LFxuICBJbnB1dEF1ZGlvQnVmZmVyQ2xlYXJFdmVudCxcbiAgSW5wdXRBdWRpb0J1ZmZlckNsZWFyZWRFdmVudCxcbiAgSW5wdXRBdWRpb0J1ZmZlckNvbW1pdEV2ZW50LFxuICBJbnB1dEF1ZGlvQnVmZmVyQ29tbWl0dGVkRXZlbnQsXG4gIElucHV0QXVkaW9CdWZmZXJTcGVlY2hTdGFydGVkRXZlbnQsXG4gIElucHV0QXVkaW9CdWZmZXJTcGVlY2hTdG9wcGVkRXZlbnQsXG4gIFJhdGVMaW1pdHNVcGRhdGVkRXZlbnQsXG4gIFJlYWx0aW1lLFxuICBSZWFsdGltZUNsaWVudEV2ZW50LFxuICBSZWFsdGltZVJlc3BvbnNlLFxuICBSZWFsdGltZVJlc3BvbnNlU3RhdHVzLFxuICBSZWFsdGltZVJlc3BvbnNlVXNhZ2UsXG4gIFJlYWx0aW1lU2VydmVyRXZlbnQsXG4gIFJlc3BvbnNlQXVkaW9EZWx0YUV2ZW50LFxuICBSZXNwb25zZUF1ZGlvRG9uZUV2ZW50LFxuICBSZXNwb25zZUF1ZGlvVHJhbnNjcmlwdERlbHRhRXZlbnQsXG4gIFJlc3BvbnNlQXVkaW9UcmFuc2NyaXB0RG9uZUV2ZW50LFxuICBSZXNwb25zZUNhbmNlbEV2ZW50LFxuICBSZXNwb25zZUNvbnRlbnRQYXJ0QWRkZWRFdmVudCxcbiAgUmVzcG9uc2VDb250ZW50UGFydERvbmVFdmVudCxcbiAgUmVzcG9uc2VDcmVhdGVFdmVudCxcbiAgUmVzcG9uc2VDcmVhdGVkRXZlbnQsXG4gIFJlc3BvbnNlRG9uZUV2ZW50LFxuICBSZXNwb25zZUZ1bmN0aW9uQ2FsbEFyZ3VtZW50c0RlbHRhRXZlbnQsXG4gIFJlc3BvbnNlRnVuY3Rpb25DYWxsQXJndW1lbnRzRG9uZUV2ZW50LFxuICBSZXNwb25zZU91dHB1dEl0ZW1BZGRlZEV2ZW50LFxuICBSZXNwb25zZU91dHB1dEl0ZW1Eb25lRXZlbnQsXG4gIFJlc3BvbnNlVGV4dERlbHRhRXZlbnQsXG4gIFJlc3BvbnNlVGV4dERvbmVFdmVudCxcbiAgU2Vzc2lvbkNyZWF0ZWRFdmVudCxcbiAgU2Vzc2lvblVwZGF0ZUV2ZW50LFxuICBTZXNzaW9uVXBkYXRlZEV2ZW50LFxuICBUcmFuc2NyaXB0aW9uU2Vzc2lvblVwZGF0ZSxcbiAgVHJhbnNjcmlwdGlvblNlc3Npb25VcGRhdGVkRXZlbnQsXG59IGZyb20gJy4vcmVhbHRpbWUvcmVhbHRpbWUnO1xuaW1wb3J0ICogYXMgVGhyZWFkc0FQSSBmcm9tICcuL3RocmVhZHMvdGhyZWFkcyc7XG5pbXBvcnQge1xuICBBc3Npc3RhbnRSZXNwb25zZUZvcm1hdE9wdGlvbixcbiAgQXNzaXN0YW50VG9vbENob2ljZSxcbiAgQXNzaXN0YW50VG9vbENob2ljZUZ1bmN0aW9uLFxuICBBc3Npc3RhbnRUb29sQ2hvaWNlT3B0aW9uLFxuICBUaHJlYWQsXG4gIFRocmVhZENyZWF0ZUFuZFJ1blBhcmFtcyxcbiAgVGhyZWFkQ3JlYXRlQW5kUnVuUGFyYW1zTm9uU3RyZWFtaW5nLFxuICBUaHJlYWRDcmVhdGVBbmRSdW5QYXJhbXNTdHJlYW1pbmcsXG4gIFRocmVhZENyZWF0ZUFuZFJ1blBvbGxQYXJhbXMsXG4gIFRocmVhZENyZWF0ZUFuZFJ1blN0cmVhbVBhcmFtcyxcbiAgVGhyZWFkQ3JlYXRlUGFyYW1zLFxuICBUaHJlYWREZWxldGVkLFxuICBUaHJlYWRVcGRhdGVQYXJhbXMsXG4gIFRocmVhZHMsXG59IGZyb20gJy4vdGhyZWFkcy90aHJlYWRzJztcbmltcG9ydCB7IENoYXQgfSBmcm9tICcuL2NoYXQvY2hhdCc7XG5cbmV4cG9ydCBjbGFzcyBCZXRhIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICByZWFsdGltZTogUmVhbHRpbWVBUEkuUmVhbHRpbWUgPSBuZXcgUmVhbHRpbWVBUEkuUmVhbHRpbWUodGhpcy5fY2xpZW50KTtcbiAgY2hhdDogQ2hhdEFQSS5DaGF0ID0gbmV3IENoYXRBUEkuQ2hhdCh0aGlzLl9jbGllbnQpO1xuICBhc3Npc3RhbnRzOiBBc3Npc3RhbnRzQVBJLkFzc2lzdGFudHMgPSBuZXcgQXNzaXN0YW50c0FQSS5Bc3Npc3RhbnRzKHRoaXMuX2NsaWVudCk7XG4gIHRocmVhZHM6IFRocmVhZHNBUEkuVGhyZWFkcyA9IG5ldyBUaHJlYWRzQVBJLlRocmVhZHModGhpcy5fY2xpZW50KTtcbn1cblxuQmV0YS5SZWFsdGltZSA9IFJlYWx0aW1lO1xuQmV0YS5Bc3Npc3RhbnRzID0gQXNzaXN0YW50cztcbkJldGEuQXNzaXN0YW50c1BhZ2UgPSBBc3Npc3RhbnRzUGFnZTtcbkJldGEuVGhyZWFkcyA9IFRocmVhZHM7XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBCZXRhIHtcbiAgZXhwb3J0IHtcbiAgICBSZWFsdGltZSBhcyBSZWFsdGltZSxcbiAgICB0eXBlIENvbnZlcnNhdGlvbkNyZWF0ZWRFdmVudCBhcyBDb252ZXJzYXRpb25DcmVhdGVkRXZlbnQsXG4gICAgdHlwZSBDb252ZXJzYXRpb25JdGVtIGFzIENvbnZlcnNhdGlvbkl0ZW0sXG4gICAgdHlwZSBDb252ZXJzYXRpb25JdGVtQ29udGVudCBhcyBDb252ZXJzYXRpb25JdGVtQ29udGVudCxcbiAgICB0eXBlIENvbnZlcnNhdGlvbkl0ZW1DcmVhdGVFdmVudCBhcyBDb252ZXJzYXRpb25JdGVtQ3JlYXRlRXZlbnQsXG4gICAgdHlwZSBDb252ZXJzYXRpb25JdGVtQ3JlYXRlZEV2ZW50IGFzIENvbnZlcnNhdGlvbkl0ZW1DcmVhdGVkRXZlbnQsXG4gICAgdHlwZSBDb252ZXJzYXRpb25JdGVtRGVsZXRlRXZlbnQgYXMgQ29udmVyc2F0aW9uSXRlbURlbGV0ZUV2ZW50LFxuICAgIHR5cGUgQ29udmVyc2F0aW9uSXRlbURlbGV0ZWRFdmVudCBhcyBDb252ZXJzYXRpb25JdGVtRGVsZXRlZEV2ZW50LFxuICAgIHR5cGUgQ29udmVyc2F0aW9uSXRlbUlucHV0QXVkaW9UcmFuc2NyaXB0aW9uQ29tcGxldGVkRXZlbnQgYXMgQ29udmVyc2F0aW9uSXRlbUlucHV0QXVkaW9UcmFuc2NyaXB0aW9uQ29tcGxldGVkRXZlbnQsXG4gICAgdHlwZSBDb252ZXJzYXRpb25JdGVtSW5wdXRBdWRpb1RyYW5zY3JpcHRpb25EZWx0YUV2ZW50IGFzIENvbnZlcnNhdGlvbkl0ZW1JbnB1dEF1ZGlvVHJhbnNjcmlwdGlvbkRlbHRhRXZlbnQsXG4gICAgdHlwZSBDb252ZXJzYXRpb25JdGVtSW5wdXRBdWRpb1RyYW5zY3JpcHRpb25GYWlsZWRFdmVudCBhcyBDb252ZXJzYXRpb25JdGVtSW5wdXRBdWRpb1RyYW5zY3JpcHRpb25GYWlsZWRFdmVudCxcbiAgICB0eXBlIENvbnZlcnNhdGlvbkl0ZW1SZXRyaWV2ZUV2ZW50IGFzIENvbnZlcnNhdGlvbkl0ZW1SZXRyaWV2ZUV2ZW50LFxuICAgIHR5cGUgQ29udmVyc2F0aW9uSXRlbVRydW5jYXRlRXZlbnQgYXMgQ29udmVyc2F0aW9uSXRlbVRydW5jYXRlRXZlbnQsXG4gICAgdHlwZSBDb252ZXJzYXRpb25JdGVtVHJ1bmNhdGVkRXZlbnQgYXMgQ29udmVyc2F0aW9uSXRlbVRydW5jYXRlZEV2ZW50LFxuICAgIHR5cGUgQ29udmVyc2F0aW9uSXRlbVdpdGhSZWZlcmVuY2UgYXMgQ29udmVyc2F0aW9uSXRlbVdpdGhSZWZlcmVuY2UsXG4gICAgdHlwZSBFcnJvckV2ZW50IGFzIEVycm9yRXZlbnQsXG4gICAgdHlwZSBJbnB1dEF1ZGlvQnVmZmVyQXBwZW5kRXZlbnQgYXMgSW5wdXRBdWRpb0J1ZmZlckFwcGVuZEV2ZW50LFxuICAgIHR5cGUgSW5wdXRBdWRpb0J1ZmZlckNsZWFyRXZlbnQgYXMgSW5wdXRBdWRpb0J1ZmZlckNsZWFyRXZlbnQsXG4gICAgdHlwZSBJbnB1dEF1ZGlvQnVmZmVyQ2xlYXJlZEV2ZW50IGFzIElucHV0QXVkaW9CdWZmZXJDbGVhcmVkRXZlbnQsXG4gICAgdHlwZSBJbnB1dEF1ZGlvQnVmZmVyQ29tbWl0RXZlbnQgYXMgSW5wdXRBdWRpb0J1ZmZlckNvbW1pdEV2ZW50LFxuICAgIHR5cGUgSW5wdXRBdWRpb0J1ZmZlckNvbW1pdHRlZEV2ZW50IGFzIElucHV0QXVkaW9CdWZmZXJDb21taXR0ZWRFdmVudCxcbiAgICB0eXBlIElucHV0QXVkaW9CdWZmZXJTcGVlY2hTdGFydGVkRXZlbnQgYXMgSW5wdXRBdWRpb0J1ZmZlclNwZWVjaFN0YXJ0ZWRFdmVudCxcbiAgICB0eXBlIElucHV0QXVkaW9CdWZmZXJTcGVlY2hTdG9wcGVkRXZlbnQgYXMgSW5wdXRBdWRpb0J1ZmZlclNwZWVjaFN0b3BwZWRFdmVudCxcbiAgICB0eXBlIFJhdGVMaW1pdHNVcGRhdGVkRXZlbnQgYXMgUmF0ZUxpbWl0c1VwZGF0ZWRFdmVudCxcbiAgICB0eXBlIFJlYWx0aW1lQ2xpZW50RXZlbnQgYXMgUmVhbHRpbWVDbGllbnRFdmVudCxcbiAgICB0eXBlIFJlYWx0aW1lUmVzcG9uc2UgYXMgUmVhbHRpbWVSZXNwb25zZSxcbiAgICB0eXBlIFJlYWx0aW1lUmVzcG9uc2VTdGF0dXMgYXMgUmVhbHRpbWVSZXNwb25zZVN0YXR1cyxcbiAgICB0eXBlIFJlYWx0aW1lUmVzcG9uc2VVc2FnZSBhcyBSZWFsdGltZVJlc3BvbnNlVXNhZ2UsXG4gICAgdHlwZSBSZWFsdGltZVNlcnZlckV2ZW50IGFzIFJlYWx0aW1lU2VydmVyRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZUF1ZGlvRGVsdGFFdmVudCBhcyBSZXNwb25zZUF1ZGlvRGVsdGFFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlQXVkaW9Eb25lRXZlbnQgYXMgUmVzcG9uc2VBdWRpb0RvbmVFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlQXVkaW9UcmFuc2NyaXB0RGVsdGFFdmVudCBhcyBSZXNwb25zZUF1ZGlvVHJhbnNjcmlwdERlbHRhRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZUF1ZGlvVHJhbnNjcmlwdERvbmVFdmVudCBhcyBSZXNwb25zZUF1ZGlvVHJhbnNjcmlwdERvbmVFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlQ2FuY2VsRXZlbnQgYXMgUmVzcG9uc2VDYW5jZWxFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlQ29udGVudFBhcnRBZGRlZEV2ZW50IGFzIFJlc3BvbnNlQ29udGVudFBhcnRBZGRlZEV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VDb250ZW50UGFydERvbmVFdmVudCBhcyBSZXNwb25zZUNvbnRlbnRQYXJ0RG9uZUV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VDcmVhdGVFdmVudCBhcyBSZXNwb25zZUNyZWF0ZUV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VDcmVhdGVkRXZlbnQgYXMgUmVzcG9uc2VDcmVhdGVkRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZURvbmVFdmVudCBhcyBSZXNwb25zZURvbmVFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlRnVuY3Rpb25DYWxsQXJndW1lbnRzRGVsdGFFdmVudCBhcyBSZXNwb25zZUZ1bmN0aW9uQ2FsbEFyZ3VtZW50c0RlbHRhRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZUZ1bmN0aW9uQ2FsbEFyZ3VtZW50c0RvbmVFdmVudCBhcyBSZXNwb25zZUZ1bmN0aW9uQ2FsbEFyZ3VtZW50c0RvbmVFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlT3V0cHV0SXRlbUFkZGVkRXZlbnQgYXMgUmVzcG9uc2VPdXRwdXRJdGVtQWRkZWRFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlT3V0cHV0SXRlbURvbmVFdmVudCBhcyBSZXNwb25zZU91dHB1dEl0ZW1Eb25lRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZVRleHREZWx0YUV2ZW50IGFzIFJlc3BvbnNlVGV4dERlbHRhRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZVRleHREb25lRXZlbnQgYXMgUmVzcG9uc2VUZXh0RG9uZUV2ZW50LFxuICAgIHR5cGUgU2Vzc2lvbkNyZWF0ZWRFdmVudCBhcyBTZXNzaW9uQ3JlYXRlZEV2ZW50LFxuICAgIHR5cGUgU2Vzc2lvblVwZGF0ZUV2ZW50IGFzIFNlc3Npb25VcGRhdGVFdmVudCxcbiAgICB0eXBlIFNlc3Npb25VcGRhdGVkRXZlbnQgYXMgU2Vzc2lvblVwZGF0ZWRFdmVudCxcbiAgICB0eXBlIFRyYW5zY3JpcHRpb25TZXNzaW9uVXBkYXRlIGFzIFRyYW5zY3JpcHRpb25TZXNzaW9uVXBkYXRlLFxuICAgIHR5cGUgVHJhbnNjcmlwdGlvblNlc3Npb25VcGRhdGVkRXZlbnQgYXMgVHJhbnNjcmlwdGlvblNlc3Npb25VcGRhdGVkRXZlbnQsXG4gIH07XG5cbiAgZXhwb3J0IHsgQ2hhdCB9O1xuXG4gIGV4cG9ydCB7XG4gICAgQXNzaXN0YW50cyBhcyBBc3Npc3RhbnRzLFxuICAgIHR5cGUgQXNzaXN0YW50IGFzIEFzc2lzdGFudCxcbiAgICB0eXBlIEFzc2lzdGFudERlbGV0ZWQgYXMgQXNzaXN0YW50RGVsZXRlZCxcbiAgICB0eXBlIEFzc2lzdGFudFN0cmVhbUV2ZW50IGFzIEFzc2lzdGFudFN0cmVhbUV2ZW50LFxuICAgIHR5cGUgQXNzaXN0YW50VG9vbCBhcyBBc3Npc3RhbnRUb29sLFxuICAgIHR5cGUgQ29kZUludGVycHJldGVyVG9vbCBhcyBDb2RlSW50ZXJwcmV0ZXJUb29sLFxuICAgIHR5cGUgRmlsZVNlYXJjaFRvb2wgYXMgRmlsZVNlYXJjaFRvb2wsXG4gICAgdHlwZSBGdW5jdGlvblRvb2wgYXMgRnVuY3Rpb25Ub29sLFxuICAgIHR5cGUgTWVzc2FnZVN0cmVhbUV2ZW50IGFzIE1lc3NhZ2VTdHJlYW1FdmVudCxcbiAgICB0eXBlIFJ1blN0ZXBTdHJlYW1FdmVudCBhcyBSdW5TdGVwU3RyZWFtRXZlbnQsXG4gICAgdHlwZSBSdW5TdHJlYW1FdmVudCBhcyBSdW5TdHJlYW1FdmVudCxcbiAgICB0eXBlIFRocmVhZFN0cmVhbUV2ZW50IGFzIFRocmVhZFN0cmVhbUV2ZW50LFxuICAgIEFzc2lzdGFudHNQYWdlIGFzIEFzc2lzdGFudHNQYWdlLFxuICAgIHR5cGUgQXNzaXN0YW50Q3JlYXRlUGFyYW1zIGFzIEFzc2lzdGFudENyZWF0ZVBhcmFtcyxcbiAgICB0eXBlIEFzc2lzdGFudFVwZGF0ZVBhcmFtcyBhcyBBc3Npc3RhbnRVcGRhdGVQYXJhbXMsXG4gICAgdHlwZSBBc3Npc3RhbnRMaXN0UGFyYW1zIGFzIEFzc2lzdGFudExpc3RQYXJhbXMsXG4gIH07XG5cbiAgZXhwb3J0IHtcbiAgICBUaHJlYWRzIGFzIFRocmVhZHMsXG4gICAgdHlwZSBBc3Npc3RhbnRSZXNwb25zZUZvcm1hdE9wdGlvbiBhcyBBc3Npc3RhbnRSZXNwb25zZUZvcm1hdE9wdGlvbixcbiAgICB0eXBlIEFzc2lzdGFudFRvb2xDaG9pY2UgYXMgQXNzaXN0YW50VG9vbENob2ljZSxcbiAgICB0eXBlIEFzc2lzdGFudFRvb2xDaG9pY2VGdW5jdGlvbiBhcyBBc3Npc3RhbnRUb29sQ2hvaWNlRnVuY3Rpb24sXG4gICAgdHlwZSBBc3Npc3RhbnRUb29sQ2hvaWNlT3B0aW9uIGFzIEFzc2lzdGFudFRvb2xDaG9pY2VPcHRpb24sXG4gICAgdHlwZSBUaHJlYWQgYXMgVGhyZWFkLFxuICAgIHR5cGUgVGhyZWFkRGVsZXRlZCBhcyBUaHJlYWREZWxldGVkLFxuICAgIHR5cGUgVGhyZWFkQ3JlYXRlUGFyYW1zIGFzIFRocmVhZENyZWF0ZVBhcmFtcyxcbiAgICB0eXBlIFRocmVhZFVwZGF0ZVBhcmFtcyBhcyBUaHJlYWRVcGRhdGVQYXJhbXMsXG4gICAgdHlwZSBUaHJlYWRDcmVhdGVBbmRSdW5QYXJhbXMgYXMgVGhyZWFkQ3JlYXRlQW5kUnVuUGFyYW1zLFxuICAgIHR5cGUgVGhyZWFkQ3JlYXRlQW5kUnVuUGFyYW1zTm9uU3RyZWFtaW5nIGFzIFRocmVhZENyZWF0ZUFuZFJ1blBhcmFtc05vblN0cmVhbWluZyxcbiAgICB0eXBlIFRocmVhZENyZWF0ZUFuZFJ1blBhcmFtc1N0cmVhbWluZyBhcyBUaHJlYWRDcmVhdGVBbmRSdW5QYXJhbXNTdHJlYW1pbmcsXG4gICAgdHlwZSBUaHJlYWRDcmVhdGVBbmRSdW5Qb2xsUGFyYW1zLFxuICAgIHR5cGUgVGhyZWFkQ3JlYXRlQW5kUnVuU3RyZWFtUGFyYW1zLFxuICB9O1xufVxuIiwgIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnLi4vcmVzb3VyY2UnO1xuaW1wb3J0IHsgQVBJUHJvbWlzZSB9IGZyb20gJy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tICcuLi9jb3JlJztcbmltcG9ydCAqIGFzIENvbXBsZXRpb25zQVBJIGZyb20gJy4vY29tcGxldGlvbnMnO1xuaW1wb3J0ICogYXMgQ29tcGxldGlvbnNDb21wbGV0aW9uc0FQSSBmcm9tICcuL2NoYXQvY29tcGxldGlvbnMvY29tcGxldGlvbnMnO1xuaW1wb3J0IHsgU3RyZWFtIH0gZnJvbSAnLi4vc3RyZWFtaW5nJztcblxuZXhwb3J0IGNsYXNzIENvbXBsZXRpb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIGNvbXBsZXRpb24gZm9yIHRoZSBwcm92aWRlZCBwcm9tcHQgYW5kIHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHRzXG4gICAqIGNvbnN0IGNvbXBsZXRpb24gPSBhd2FpdCBjbGllbnQuY29tcGxldGlvbnMuY3JlYXRlKHtcbiAgICogICBtb2RlbDogJ3N0cmluZycsXG4gICAqICAgcHJvbXB0OiAnVGhpcyBpcyBhIHRlc3QuJyxcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgY3JlYXRlKGJvZHk6IENvbXBsZXRpb25DcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQVBJUHJvbWlzZTxDb21wbGV0aW9uPjtcbiAgY3JlYXRlKFxuICAgIGJvZHk6IENvbXBsZXRpb25DcmVhdGVQYXJhbXNTdHJlYW1pbmcsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IEFQSVByb21pc2U8U3RyZWFtPENvbXBsZXRpb24+PjtcbiAgY3JlYXRlKFxuICAgIGJvZHk6IENvbXBsZXRpb25DcmVhdGVQYXJhbXNCYXNlLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBBUElQcm9taXNlPFN0cmVhbTxDb21wbGV0aW9uPiB8IENvbXBsZXRpb24+O1xuICBjcmVhdGUoXG4gICAgYm9keTogQ29tcGxldGlvbkNyZWF0ZVBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQVBJUHJvbWlzZTxDb21wbGV0aW9uPiB8IEFQSVByb21pc2U8U3RyZWFtPENvbXBsZXRpb24+PiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvY29tcGxldGlvbnMnLCB7IGJvZHksIC4uLm9wdGlvbnMsIHN0cmVhbTogYm9keS5zdHJlYW0gPz8gZmFsc2UgfSkgYXNcbiAgICAgIHwgQVBJUHJvbWlzZTxDb21wbGV0aW9uPlxuICAgICAgfCBBUElQcm9taXNlPFN0cmVhbTxDb21wbGV0aW9uPj47XG4gIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY29tcGxldGlvbiByZXNwb25zZSBmcm9tIHRoZSBBUEkuIE5vdGU6IGJvdGggdGhlIHN0cmVhbWVkIGFuZFxuICogbm9uLXN0cmVhbWVkIHJlc3BvbnNlIG9iamVjdHMgc2hhcmUgdGhlIHNhbWUgc2hhcGUgKHVubGlrZSB0aGUgY2hhdCBlbmRwb2ludCkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGxldGlvbiB7XG4gIC8qKlxuICAgKiBBIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgY29tcGxldGlvbi5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIGNvbXBsZXRpb24gY2hvaWNlcyB0aGUgbW9kZWwgZ2VuZXJhdGVkIGZvciB0aGUgaW5wdXQgcHJvbXB0LlxuICAgKi9cbiAgY2hvaWNlczogQXJyYXk8Q29tcGxldGlvbkNob2ljZT47XG5cbiAgLyoqXG4gICAqIFRoZSBVbml4IHRpbWVzdGFtcCAoaW4gc2Vjb25kcykgb2Ygd2hlbiB0aGUgY29tcGxldGlvbiB3YXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQ6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG1vZGVsIHVzZWQgZm9yIGNvbXBsZXRpb24uXG4gICAqL1xuICBtb2RlbDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgb2JqZWN0IHR5cGUsIHdoaWNoIGlzIGFsd2F5cyBcInRleHRfY29tcGxldGlvblwiXG4gICAqL1xuICBvYmplY3Q6ICd0ZXh0X2NvbXBsZXRpb24nO1xuXG4gIC8qKlxuICAgKiBUaGlzIGZpbmdlcnByaW50IHJlcHJlc2VudHMgdGhlIGJhY2tlbmQgY29uZmlndXJhdGlvbiB0aGF0IHRoZSBtb2RlbCBydW5zIHdpdGguXG4gICAqXG4gICAqIENhbiBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIGBzZWVkYCByZXF1ZXN0IHBhcmFtZXRlciB0byB1bmRlcnN0YW5kIHdoZW5cbiAgICogYmFja2VuZCBjaGFuZ2VzIGhhdmUgYmVlbiBtYWRlIHRoYXQgbWlnaHQgaW1wYWN0IGRldGVybWluaXNtLlxuICAgKi9cbiAgc3lzdGVtX2ZpbmdlcnByaW50Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBVc2FnZSBzdGF0aXN0aWNzIGZvciB0aGUgY29tcGxldGlvbiByZXF1ZXN0LlxuICAgKi9cbiAgdXNhZ2U/OiBDb21wbGV0aW9uVXNhZ2U7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGxldGlvbkNob2ljZSB7XG4gIC8qKlxuICAgKiBUaGUgcmVhc29uIHRoZSBtb2RlbCBzdG9wcGVkIGdlbmVyYXRpbmcgdG9rZW5zLiBUaGlzIHdpbGwgYmUgYHN0b3BgIGlmIHRoZSBtb2RlbFxuICAgKiBoaXQgYSBuYXR1cmFsIHN0b3AgcG9pbnQgb3IgYSBwcm92aWRlZCBzdG9wIHNlcXVlbmNlLCBgbGVuZ3RoYCBpZiB0aGUgbWF4aW11bVxuICAgKiBudW1iZXIgb2YgdG9rZW5zIHNwZWNpZmllZCBpbiB0aGUgcmVxdWVzdCB3YXMgcmVhY2hlZCwgb3IgYGNvbnRlbnRfZmlsdGVyYCBpZlxuICAgKiBjb250ZW50IHdhcyBvbWl0dGVkIGR1ZSB0byBhIGZsYWcgZnJvbSBvdXIgY29udGVudCBmaWx0ZXJzLlxuICAgKi9cbiAgZmluaXNoX3JlYXNvbjogJ3N0b3AnIHwgJ2xlbmd0aCcgfCAnY29udGVudF9maWx0ZXInO1xuXG4gIGluZGV4OiBudW1iZXI7XG5cbiAgbG9ncHJvYnM6IENvbXBsZXRpb25DaG9pY2UuTG9ncHJvYnMgfCBudWxsO1xuXG4gIHRleHQ6IHN0cmluZztcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBDb21wbGV0aW9uQ2hvaWNlIHtcbiAgZXhwb3J0IGludGVyZmFjZSBMb2dwcm9icyB7XG4gICAgdGV4dF9vZmZzZXQ/OiBBcnJheTxudW1iZXI+O1xuXG4gICAgdG9rZW5fbG9ncHJvYnM/OiBBcnJheTxudW1iZXI+O1xuXG4gICAgdG9rZW5zPzogQXJyYXk8c3RyaW5nPjtcblxuICAgIHRvcF9sb2dwcm9icz86IEFycmF5PFJlY29yZDxzdHJpbmcsIG51bWJlcj4+O1xuICB9XG59XG5cbi8qKlxuICogVXNhZ2Ugc3RhdGlzdGljcyBmb3IgdGhlIGNvbXBsZXRpb24gcmVxdWVzdC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb21wbGV0aW9uVXNhZ2Uge1xuICAvKipcbiAgICogTnVtYmVyIG9mIHRva2VucyBpbiB0aGUgZ2VuZXJhdGVkIGNvbXBsZXRpb24uXG4gICAqL1xuICBjb21wbGV0aW9uX3Rva2VuczogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgdG9rZW5zIGluIHRoZSBwcm9tcHQuXG4gICAqL1xuICBwcm9tcHRfdG9rZW5zOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRvdGFsIG51bWJlciBvZiB0b2tlbnMgdXNlZCBpbiB0aGUgcmVxdWVzdCAocHJvbXB0ICsgY29tcGxldGlvbikuXG4gICAqL1xuICB0b3RhbF90b2tlbnM6IG51bWJlcjtcblxuICAvKipcbiAgICogQnJlYWtkb3duIG9mIHRva2VucyB1c2VkIGluIGEgY29tcGxldGlvbi5cbiAgICovXG4gIGNvbXBsZXRpb25fdG9rZW5zX2RldGFpbHM/OiBDb21wbGV0aW9uVXNhZ2UuQ29tcGxldGlvblRva2Vuc0RldGFpbHM7XG5cbiAgLyoqXG4gICAqIEJyZWFrZG93biBvZiB0b2tlbnMgdXNlZCBpbiB0aGUgcHJvbXB0LlxuICAgKi9cbiAgcHJvbXB0X3Rva2Vuc19kZXRhaWxzPzogQ29tcGxldGlvblVzYWdlLlByb21wdFRva2Vuc0RldGFpbHM7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ29tcGxldGlvblVzYWdlIHtcbiAgLyoqXG4gICAqIEJyZWFrZG93biBvZiB0b2tlbnMgdXNlZCBpbiBhIGNvbXBsZXRpb24uXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIENvbXBsZXRpb25Ub2tlbnNEZXRhaWxzIHtcbiAgICAvKipcbiAgICAgKiBXaGVuIHVzaW5nIFByZWRpY3RlZCBPdXRwdXRzLCB0aGUgbnVtYmVyIG9mIHRva2VucyBpbiB0aGUgcHJlZGljdGlvbiB0aGF0XG4gICAgICogYXBwZWFyZWQgaW4gdGhlIGNvbXBsZXRpb24uXG4gICAgICovXG4gICAgYWNjZXB0ZWRfcHJlZGljdGlvbl90b2tlbnM/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBBdWRpbyBpbnB1dCB0b2tlbnMgZ2VuZXJhdGVkIGJ5IHRoZSBtb2RlbC5cbiAgICAgKi9cbiAgICBhdWRpb190b2tlbnM/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUb2tlbnMgZ2VuZXJhdGVkIGJ5IHRoZSBtb2RlbCBmb3IgcmVhc29uaW5nLlxuICAgICAqL1xuICAgIHJlYXNvbmluZ190b2tlbnM/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHVzaW5nIFByZWRpY3RlZCBPdXRwdXRzLCB0aGUgbnVtYmVyIG9mIHRva2VucyBpbiB0aGUgcHJlZGljdGlvbiB0aGF0IGRpZFxuICAgICAqIG5vdCBhcHBlYXIgaW4gdGhlIGNvbXBsZXRpb24uIEhvd2V2ZXIsIGxpa2UgcmVhc29uaW5nIHRva2VucywgdGhlc2UgdG9rZW5zIGFyZVxuICAgICAqIHN0aWxsIGNvdW50ZWQgaW4gdGhlIHRvdGFsIGNvbXBsZXRpb24gdG9rZW5zIGZvciBwdXJwb3NlcyBvZiBiaWxsaW5nLCBvdXRwdXQsXG4gICAgICogYW5kIGNvbnRleHQgd2luZG93IGxpbWl0cy5cbiAgICAgKi9cbiAgICByZWplY3RlZF9wcmVkaWN0aW9uX3Rva2Vucz86IG51bWJlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBCcmVha2Rvd24gb2YgdG9rZW5zIHVzZWQgaW4gdGhlIHByb21wdC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgUHJvbXB0VG9rZW5zRGV0YWlscyB7XG4gICAgLyoqXG4gICAgICogQXVkaW8gaW5wdXQgdG9rZW5zIHByZXNlbnQgaW4gdGhlIHByb21wdC5cbiAgICAgKi9cbiAgICBhdWRpb190b2tlbnM/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBDYWNoZWQgdG9rZW5zIHByZXNlbnQgaW4gdGhlIHByb21wdC5cbiAgICAgKi9cbiAgICBjYWNoZWRfdG9rZW5zPzogbnVtYmVyO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIENvbXBsZXRpb25DcmVhdGVQYXJhbXMgPSBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nIHwgQ29tcGxldGlvbkNyZWF0ZVBhcmFtc1N0cmVhbWluZztcblxuZXhwb3J0IGludGVyZmFjZSBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zQmFzZSB7XG4gIC8qKlxuICAgKiBJRCBvZiB0aGUgbW9kZWwgdG8gdXNlLiBZb3UgY2FuIHVzZSB0aGVcbiAgICogW0xpc3QgbW9kZWxzXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL21vZGVscy9saXN0KSBBUEkgdG9cbiAgICogc2VlIGFsbCBvZiB5b3VyIGF2YWlsYWJsZSBtb2RlbHMsIG9yIHNlZSBvdXJcbiAgICogW01vZGVsIG92ZXJ2aWV3XShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9tb2RlbHMpIGZvciBkZXNjcmlwdGlvbnMgb2ZcbiAgICogdGhlbS5cbiAgICovXG4gIG1vZGVsOiAoc3RyaW5nICYge30pIHwgJ2dwdC0zLjUtdHVyYm8taW5zdHJ1Y3QnIHwgJ2RhdmluY2ktMDAyJyB8ICdiYWJiYWdlLTAwMic7XG5cbiAgLyoqXG4gICAqIFRoZSBwcm9tcHQocykgdG8gZ2VuZXJhdGUgY29tcGxldGlvbnMgZm9yLCBlbmNvZGVkIGFzIGEgc3RyaW5nLCBhcnJheSBvZlxuICAgKiBzdHJpbmdzLCBhcnJheSBvZiB0b2tlbnMsIG9yIGFycmF5IG9mIHRva2VuIGFycmF5cy5cbiAgICpcbiAgICogTm90ZSB0aGF0IDx8ZW5kb2Z0ZXh0fD4gaXMgdGhlIGRvY3VtZW50IHNlcGFyYXRvciB0aGF0IHRoZSBtb2RlbCBzZWVzIGR1cmluZ1xuICAgKiB0cmFpbmluZywgc28gaWYgYSBwcm9tcHQgaXMgbm90IHNwZWNpZmllZCB0aGUgbW9kZWwgd2lsbCBnZW5lcmF0ZSBhcyBpZiBmcm9tIHRoZVxuICAgKiBiZWdpbm5pbmcgb2YgYSBuZXcgZG9jdW1lbnQuXG4gICAqL1xuICBwcm9tcHQ6IHN0cmluZyB8IEFycmF5PHN0cmluZz4gfCBBcnJheTxudW1iZXI+IHwgQXJyYXk8QXJyYXk8bnVtYmVyPj4gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYGJlc3Rfb2ZgIGNvbXBsZXRpb25zIHNlcnZlci1zaWRlIGFuZCByZXR1cm5zIHRoZSBcImJlc3RcIiAodGhlIG9uZSB3aXRoXG4gICAqIHRoZSBoaWdoZXN0IGxvZyBwcm9iYWJpbGl0eSBwZXIgdG9rZW4pLiBSZXN1bHRzIGNhbm5vdCBiZSBzdHJlYW1lZC5cbiAgICpcbiAgICogV2hlbiB1c2VkIHdpdGggYG5gLCBgYmVzdF9vZmAgY29udHJvbHMgdGhlIG51bWJlciBvZiBjYW5kaWRhdGUgY29tcGxldGlvbnMgYW5kXG4gICAqIGBuYCBzcGVjaWZpZXMgaG93IG1hbnkgdG8gcmV0dXJuIFx1MjAxMyBgYmVzdF9vZmAgbXVzdCBiZSBncmVhdGVyIHRoYW4gYG5gLlxuICAgKlxuICAgKiAqKk5vdGU6KiogQmVjYXVzZSB0aGlzIHBhcmFtZXRlciBnZW5lcmF0ZXMgbWFueSBjb21wbGV0aW9ucywgaXQgY2FuIHF1aWNrbHlcbiAgICogY29uc3VtZSB5b3VyIHRva2VuIHF1b3RhLiBVc2UgY2FyZWZ1bGx5IGFuZCBlbnN1cmUgdGhhdCB5b3UgaGF2ZSByZWFzb25hYmxlXG4gICAqIHNldHRpbmdzIGZvciBgbWF4X3Rva2Vuc2AgYW5kIGBzdG9wYC5cbiAgICovXG4gIGJlc3Rfb2Y/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBFY2hvIGJhY2sgdGhlIHByb21wdCBpbiBhZGRpdGlvbiB0byB0aGUgY29tcGxldGlvblxuICAgKi9cbiAgZWNobz86IGJvb2xlYW4gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBOdW1iZXIgYmV0d2VlbiAtMi4wIGFuZCAyLjAuIFBvc2l0aXZlIHZhbHVlcyBwZW5hbGl6ZSBuZXcgdG9rZW5zIGJhc2VkIG9uIHRoZWlyXG4gICAqIGV4aXN0aW5nIGZyZXF1ZW5jeSBpbiB0aGUgdGV4dCBzbyBmYXIsIGRlY3JlYXNpbmcgdGhlIG1vZGVsJ3MgbGlrZWxpaG9vZCB0b1xuICAgKiByZXBlYXQgdGhlIHNhbWUgbGluZSB2ZXJiYXRpbS5cbiAgICpcbiAgICogW1NlZSBtb3JlIGluZm9ybWF0aW9uIGFib3V0IGZyZXF1ZW5jeSBhbmQgcHJlc2VuY2UgcGVuYWx0aWVzLl0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3RleHQtZ2VuZXJhdGlvbilcbiAgICovXG4gIGZyZXF1ZW5jeV9wZW5hbHR5PzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogTW9kaWZ5IHRoZSBsaWtlbGlob29kIG9mIHNwZWNpZmllZCB0b2tlbnMgYXBwZWFyaW5nIGluIHRoZSBjb21wbGV0aW9uLlxuICAgKlxuICAgKiBBY2NlcHRzIGEgSlNPTiBvYmplY3QgdGhhdCBtYXBzIHRva2VucyAoc3BlY2lmaWVkIGJ5IHRoZWlyIHRva2VuIElEIGluIHRoZSBHUFRcbiAgICogdG9rZW5pemVyKSB0byBhbiBhc3NvY2lhdGVkIGJpYXMgdmFsdWUgZnJvbSAtMTAwIHRvIDEwMC4gWW91IGNhbiB1c2UgdGhpc1xuICAgKiBbdG9rZW5pemVyIHRvb2xdKC90b2tlbml6ZXI/dmlldz1icGUpIHRvIGNvbnZlcnQgdGV4dCB0byB0b2tlbiBJRHMuXG4gICAqIE1hdGhlbWF0aWNhbGx5LCB0aGUgYmlhcyBpcyBhZGRlZCB0byB0aGUgbG9naXRzIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwgcHJpb3IgdG9cbiAgICogc2FtcGxpbmcuIFRoZSBleGFjdCBlZmZlY3Qgd2lsbCB2YXJ5IHBlciBtb2RlbCwgYnV0IHZhbHVlcyBiZXR3ZWVuIC0xIGFuZCAxXG4gICAqIHNob3VsZCBkZWNyZWFzZSBvciBpbmNyZWFzZSBsaWtlbGlob29kIG9mIHNlbGVjdGlvbjsgdmFsdWVzIGxpa2UgLTEwMCBvciAxMDBcbiAgICogc2hvdWxkIHJlc3VsdCBpbiBhIGJhbiBvciBleGNsdXNpdmUgc2VsZWN0aW9uIG9mIHRoZSByZWxldmFudCB0b2tlbi5cbiAgICpcbiAgICogQXMgYW4gZXhhbXBsZSwgeW91IGNhbiBwYXNzIGB7XCI1MDI1NlwiOiAtMTAwfWAgdG8gcHJldmVudCB0aGUgPHxlbmRvZnRleHR8PiB0b2tlblxuICAgKiBmcm9tIGJlaW5nIGdlbmVyYXRlZC5cbiAgICovXG4gIGxvZ2l0X2JpYXM/OiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+IHwgbnVsbDtcblxuICAvKipcbiAgICogSW5jbHVkZSB0aGUgbG9nIHByb2JhYmlsaXRpZXMgb24gdGhlIGBsb2dwcm9ic2AgbW9zdCBsaWtlbHkgb3V0cHV0IHRva2VucywgYXNcbiAgICogd2VsbCB0aGUgY2hvc2VuIHRva2Vucy4gRm9yIGV4YW1wbGUsIGlmIGBsb2dwcm9ic2AgaXMgNSwgdGhlIEFQSSB3aWxsIHJldHVybiBhXG4gICAqIGxpc3Qgb2YgdGhlIDUgbW9zdCBsaWtlbHkgdG9rZW5zLiBUaGUgQVBJIHdpbGwgYWx3YXlzIHJldHVybiB0aGUgYGxvZ3Byb2JgIG9mXG4gICAqIHRoZSBzYW1wbGVkIHRva2VuLCBzbyB0aGVyZSBtYXkgYmUgdXAgdG8gYGxvZ3Byb2JzKzFgIGVsZW1lbnRzIGluIHRoZSByZXNwb25zZS5cbiAgICpcbiAgICogVGhlIG1heGltdW0gdmFsdWUgZm9yIGBsb2dwcm9ic2AgaXMgNS5cbiAgICovXG4gIGxvZ3Byb2JzPzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIFt0b2tlbnNdKC90b2tlbml6ZXIpIHRoYXQgY2FuIGJlIGdlbmVyYXRlZCBpbiB0aGVcbiAgICogY29tcGxldGlvbi5cbiAgICpcbiAgICogVGhlIHRva2VuIGNvdW50IG9mIHlvdXIgcHJvbXB0IHBsdXMgYG1heF90b2tlbnNgIGNhbm5vdCBleGNlZWQgdGhlIG1vZGVsJ3NcbiAgICogY29udGV4dCBsZW5ndGguXG4gICAqIFtFeGFtcGxlIFB5dGhvbiBjb2RlXShodHRwczovL2Nvb2tib29rLm9wZW5haS5jb20vZXhhbXBsZXMvaG93X3RvX2NvdW50X3Rva2Vuc193aXRoX3Rpa3Rva2VuKVxuICAgKiBmb3IgY291bnRpbmcgdG9rZW5zLlxuICAgKi9cbiAgbWF4X3Rva2Vucz86IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEhvdyBtYW55IGNvbXBsZXRpb25zIHRvIGdlbmVyYXRlIGZvciBlYWNoIHByb21wdC5cbiAgICpcbiAgICogKipOb3RlOioqIEJlY2F1c2UgdGhpcyBwYXJhbWV0ZXIgZ2VuZXJhdGVzIG1hbnkgY29tcGxldGlvbnMsIGl0IGNhbiBxdWlja2x5XG4gICAqIGNvbnN1bWUgeW91ciB0b2tlbiBxdW90YS4gVXNlIGNhcmVmdWxseSBhbmQgZW5zdXJlIHRoYXQgeW91IGhhdmUgcmVhc29uYWJsZVxuICAgKiBzZXR0aW5ncyBmb3IgYG1heF90b2tlbnNgIGFuZCBgc3RvcGAuXG4gICAqL1xuICBuPzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogTnVtYmVyIGJldHdlZW4gLTIuMCBhbmQgMi4wLiBQb3NpdGl2ZSB2YWx1ZXMgcGVuYWxpemUgbmV3IHRva2VucyBiYXNlZCBvblxuICAgKiB3aGV0aGVyIHRoZXkgYXBwZWFyIGluIHRoZSB0ZXh0IHNvIGZhciwgaW5jcmVhc2luZyB0aGUgbW9kZWwncyBsaWtlbGlob29kIHRvXG4gICAqIHRhbGsgYWJvdXQgbmV3IHRvcGljcy5cbiAgICpcbiAgICogW1NlZSBtb3JlIGluZm9ybWF0aW9uIGFib3V0IGZyZXF1ZW5jeSBhbmQgcHJlc2VuY2UgcGVuYWx0aWVzLl0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3RleHQtZ2VuZXJhdGlvbilcbiAgICovXG4gIHByZXNlbmNlX3BlbmFsdHk/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBJZiBzcGVjaWZpZWQsIG91ciBzeXN0ZW0gd2lsbCBtYWtlIGEgYmVzdCBlZmZvcnQgdG8gc2FtcGxlIGRldGVybWluaXN0aWNhbGx5LFxuICAgKiBzdWNoIHRoYXQgcmVwZWF0ZWQgcmVxdWVzdHMgd2l0aCB0aGUgc2FtZSBgc2VlZGAgYW5kIHBhcmFtZXRlcnMgc2hvdWxkIHJldHVyblxuICAgKiB0aGUgc2FtZSByZXN1bHQuXG4gICAqXG4gICAqIERldGVybWluaXNtIGlzIG5vdCBndWFyYW50ZWVkLCBhbmQgeW91IHNob3VsZCByZWZlciB0byB0aGUgYHN5c3RlbV9maW5nZXJwcmludGBcbiAgICogcmVzcG9uc2UgcGFyYW1ldGVyIHRvIG1vbml0b3IgY2hhbmdlcyBpbiB0aGUgYmFja2VuZC5cbiAgICovXG4gIHNlZWQ/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBOb3Qgc3VwcG9ydGVkIHdpdGggbGF0ZXN0IHJlYXNvbmluZyBtb2RlbHMgYG8zYCBhbmQgYG80LW1pbmlgLlxuICAgKlxuICAgKiBVcCB0byA0IHNlcXVlbmNlcyB3aGVyZSB0aGUgQVBJIHdpbGwgc3RvcCBnZW5lcmF0aW5nIGZ1cnRoZXIgdG9rZW5zLiBUaGVcbiAgICogcmV0dXJuZWQgdGV4dCB3aWxsIG5vdCBjb250YWluIHRoZSBzdG9wIHNlcXVlbmNlLlxuICAgKi9cbiAgc3RvcD86IHN0cmluZyB8IG51bGwgfCBBcnJheTxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHN0cmVhbSBiYWNrIHBhcnRpYWwgcHJvZ3Jlc3MuIElmIHNldCwgdG9rZW5zIHdpbGwgYmUgc2VudCBhc1xuICAgKiBkYXRhLW9ubHlcbiAgICogW3NlcnZlci1zZW50IGV2ZW50c10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1NlcnZlci1zZW50X2V2ZW50cy9Vc2luZ19zZXJ2ZXItc2VudF9ldmVudHMjRXZlbnRfc3RyZWFtX2Zvcm1hdClcbiAgICogYXMgdGhleSBiZWNvbWUgYXZhaWxhYmxlLCB3aXRoIHRoZSBzdHJlYW0gdGVybWluYXRlZCBieSBhIGBkYXRhOiBbRE9ORV1gXG4gICAqIG1lc3NhZ2UuXG4gICAqIFtFeGFtcGxlIFB5dGhvbiBjb2RlXShodHRwczovL2Nvb2tib29rLm9wZW5haS5jb20vZXhhbXBsZXMvaG93X3RvX3N0cmVhbV9jb21wbGV0aW9ucykuXG4gICAqL1xuICBzdHJlYW0/OiBib29sZWFuIHwgbnVsbDtcblxuICAvKipcbiAgICogT3B0aW9ucyBmb3Igc3RyZWFtaW5nIHJlc3BvbnNlLiBPbmx5IHNldCB0aGlzIHdoZW4geW91IHNldCBgc3RyZWFtOiB0cnVlYC5cbiAgICovXG4gIHN0cmVhbV9vcHRpb25zPzogQ29tcGxldGlvbnNDb21wbGV0aW9uc0FQSS5DaGF0Q29tcGxldGlvblN0cmVhbU9wdGlvbnMgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgc3VmZml4IHRoYXQgY29tZXMgYWZ0ZXIgYSBjb21wbGV0aW9uIG9mIGluc2VydGVkIHRleHQuXG4gICAqXG4gICAqIFRoaXMgcGFyYW1ldGVyIGlzIG9ubHkgc3VwcG9ydGVkIGZvciBgZ3B0LTMuNS10dXJiby1pbnN0cnVjdGAuXG4gICAqL1xuICBzdWZmaXg/OiBzdHJpbmcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBXaGF0IHNhbXBsaW5nIHRlbXBlcmF0dXJlIHRvIHVzZSwgYmV0d2VlbiAwIGFuZCAyLiBIaWdoZXIgdmFsdWVzIGxpa2UgMC44IHdpbGxcbiAgICogbWFrZSB0aGUgb3V0cHV0IG1vcmUgcmFuZG9tLCB3aGlsZSBsb3dlciB2YWx1ZXMgbGlrZSAwLjIgd2lsbCBtYWtlIGl0IG1vcmVcbiAgICogZm9jdXNlZCBhbmQgZGV0ZXJtaW5pc3RpYy5cbiAgICpcbiAgICogV2UgZ2VuZXJhbGx5IHJlY29tbWVuZCBhbHRlcmluZyB0aGlzIG9yIGB0b3BfcGAgYnV0IG5vdCBib3RoLlxuICAgKi9cbiAgdGVtcGVyYXR1cmU/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBBbiBhbHRlcm5hdGl2ZSB0byBzYW1wbGluZyB3aXRoIHRlbXBlcmF0dXJlLCBjYWxsZWQgbnVjbGV1cyBzYW1wbGluZywgd2hlcmUgdGhlXG4gICAqIG1vZGVsIGNvbnNpZGVycyB0aGUgcmVzdWx0cyBvZiB0aGUgdG9rZW5zIHdpdGggdG9wX3AgcHJvYmFiaWxpdHkgbWFzcy4gU28gMC4xXG4gICAqIG1lYW5zIG9ubHkgdGhlIHRva2VucyBjb21wcmlzaW5nIHRoZSB0b3AgMTAlIHByb2JhYmlsaXR5IG1hc3MgYXJlIGNvbnNpZGVyZWQuXG4gICAqXG4gICAqIFdlIGdlbmVyYWxseSByZWNvbW1lbmQgYWx0ZXJpbmcgdGhpcyBvciBgdGVtcGVyYXR1cmVgIGJ1dCBub3QgYm90aC5cbiAgICovXG4gIHRvcF9wPzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogQSB1bmlxdWUgaWRlbnRpZmllciByZXByZXNlbnRpbmcgeW91ciBlbmQtdXNlciwgd2hpY2ggY2FuIGhlbHAgT3BlbkFJIHRvIG1vbml0b3JcbiAgICogYW5kIGRldGVjdCBhYnVzZS5cbiAgICogW0xlYXJuIG1vcmVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9zYWZldHktYmVzdC1wcmFjdGljZXMjZW5kLXVzZXItaWRzKS5cbiAgICovXG4gIHVzZXI/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ29tcGxldGlvbkNyZWF0ZVBhcmFtcyB7XG4gIGV4cG9ydCB0eXBlIENvbXBsZXRpb25DcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcgPSBDb21wbGV0aW9uc0FQSS5Db21wbGV0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nO1xuICBleHBvcnQgdHlwZSBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zU3RyZWFtaW5nID0gQ29tcGxldGlvbnNBUEkuQ29tcGxldGlvbkNyZWF0ZVBhcmFtc1N0cmVhbWluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nIGV4dGVuZHMgQ29tcGxldGlvbkNyZWF0ZVBhcmFtc0Jhc2Uge1xuICAvKipcbiAgICogV2hldGhlciB0byBzdHJlYW0gYmFjayBwYXJ0aWFsIHByb2dyZXNzLiBJZiBzZXQsIHRva2VucyB3aWxsIGJlIHNlbnQgYXNcbiAgICogZGF0YS1vbmx5XG4gICAqIFtzZXJ2ZXItc2VudCBldmVudHNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9TZXJ2ZXItc2VudF9ldmVudHMvVXNpbmdfc2VydmVyLXNlbnRfZXZlbnRzI0V2ZW50X3N0cmVhbV9mb3JtYXQpXG4gICAqIGFzIHRoZXkgYmVjb21lIGF2YWlsYWJsZSwgd2l0aCB0aGUgc3RyZWFtIHRlcm1pbmF0ZWQgYnkgYSBgZGF0YTogW0RPTkVdYFxuICAgKiBtZXNzYWdlLlxuICAgKiBbRXhhbXBsZSBQeXRob24gY29kZV0oaHR0cHM6Ly9jb29rYm9vay5vcGVuYWkuY29tL2V4YW1wbGVzL2hvd190b19zdHJlYW1fY29tcGxldGlvbnMpLlxuICAgKi9cbiAgc3RyZWFtPzogZmFsc2UgfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBsZXRpb25DcmVhdGVQYXJhbXNTdHJlYW1pbmcgZXh0ZW5kcyBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zQmFzZSB7XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHN0cmVhbSBiYWNrIHBhcnRpYWwgcHJvZ3Jlc3MuIElmIHNldCwgdG9rZW5zIHdpbGwgYmUgc2VudCBhc1xuICAgKiBkYXRhLW9ubHlcbiAgICogW3NlcnZlci1zZW50IGV2ZW50c10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1NlcnZlci1zZW50X2V2ZW50cy9Vc2luZ19zZXJ2ZXItc2VudF9ldmVudHMjRXZlbnRfc3RyZWFtX2Zvcm1hdClcbiAgICogYXMgdGhleSBiZWNvbWUgYXZhaWxhYmxlLCB3aXRoIHRoZSBzdHJlYW0gdGVybWluYXRlZCBieSBhIGBkYXRhOiBbRE9ORV1gXG4gICAqIG1lc3NhZ2UuXG4gICAqIFtFeGFtcGxlIFB5dGhvbiBjb2RlXShodHRwczovL2Nvb2tib29rLm9wZW5haS5jb20vZXhhbXBsZXMvaG93X3RvX3N0cmVhbV9jb21wbGV0aW9ucykuXG4gICAqL1xuICBzdHJlYW06IHRydWU7XG59XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBDb21wbGV0aW9ucyB7XG4gIGV4cG9ydCB7XG4gICAgdHlwZSBDb21wbGV0aW9uIGFzIENvbXBsZXRpb24sXG4gICAgdHlwZSBDb21wbGV0aW9uQ2hvaWNlIGFzIENvbXBsZXRpb25DaG9pY2UsXG4gICAgdHlwZSBDb21wbGV0aW9uVXNhZ2UgYXMgQ29tcGxldGlvblVzYWdlLFxuICAgIHR5cGUgQ29tcGxldGlvbkNyZWF0ZVBhcmFtcyBhcyBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zLFxuICAgIHR5cGUgQ29tcGxldGlvbkNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyBhcyBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nLFxuICAgIHR5cGUgQ29tcGxldGlvbkNyZWF0ZVBhcmFtc1N0cmVhbWluZyBhcyBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zU3RyZWFtaW5nLFxuICB9O1xufVxuIiwgIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnLi4vLi4vLi4vcmVzb3VyY2UnO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tICcuLi8uLi8uLi9jb3JlJztcbmltcG9ydCB7IHR5cGUgUmVzcG9uc2UgfSBmcm9tICcuLi8uLi8uLi9fc2hpbXMvaW5kZXgnO1xuXG5leHBvcnQgY2xhc3MgQ29udGVudCBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgLyoqXG4gICAqIFJldHJpZXZlIENvbnRhaW5lciBGaWxlIENvbnRlbnRcbiAgICovXG4gIHJldHJpZXZlKGNvbnRhaW5lcklkOiBzdHJpbmcsIGZpbGVJZDogc3RyaW5nLCBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IENvcmUuQVBJUHJvbWlzZTxSZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvY29udGFpbmVycy8ke2NvbnRhaW5lcklkfS9maWxlcy8ke2ZpbGVJZH0vY29udGVudGAsIHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBoZWFkZXJzOiB7IEFjY2VwdDogJ2FwcGxpY2F0aW9uL2JpbmFyeScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgIF9fYmluYXJ5UmVzcG9uc2U6IHRydWUsXG4gICAgfSk7XG4gIH1cbn1cbiIsICIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJy4uLy4uLy4uL3Jlc291cmNlJztcbmltcG9ydCB7IGlzUmVxdWVzdE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9jb3JlJztcbmltcG9ydCAqIGFzIENvcmUgZnJvbSAnLi4vLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyBDb250ZW50QVBJIGZyb20gJy4vY29udGVudCc7XG5pbXBvcnQgeyBDb250ZW50IH0gZnJvbSAnLi9jb250ZW50JztcbmltcG9ydCB7IEN1cnNvclBhZ2UsIHR5cGUgQ3Vyc29yUGFnZVBhcmFtcyB9IGZyb20gJy4uLy4uLy4uL3BhZ2luYXRpb24nO1xuXG5leHBvcnQgY2xhc3MgRmlsZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIGNvbnRlbnQ6IENvbnRlbnRBUEkuQ29udGVudCA9IG5ldyBDb250ZW50QVBJLkNvbnRlbnQodGhpcy5fY2xpZW50KTtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgQ29udGFpbmVyIEZpbGVcbiAgICpcbiAgICogWW91IGNhbiBzZW5kIGVpdGhlciBhIG11bHRpcGFydC9mb3JtLWRhdGEgcmVxdWVzdCB3aXRoIHRoZSByYXcgZmlsZSBjb250ZW50LCBvclxuICAgKiBhIEpTT04gcmVxdWVzdCB3aXRoIGEgZmlsZSBJRC5cbiAgICovXG4gIGNyZWF0ZShcbiAgICBjb250YWluZXJJZDogc3RyaW5nLFxuICAgIGJvZHk6IEZpbGVDcmVhdGVQYXJhbXMsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuQVBJUHJvbWlzZTxGaWxlQ3JlYXRlUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoXG4gICAgICBgL2NvbnRhaW5lcnMvJHtjb250YWluZXJJZH0vZmlsZXNgLFxuICAgICAgQ29yZS5tdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMoeyBib2R5LCAuLi5vcHRpb25zIH0pLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgQ29udGFpbmVyIEZpbGVcbiAgICovXG4gIHJldHJpZXZlKFxuICAgIGNvbnRhaW5lcklkOiBzdHJpbmcsXG4gICAgZmlsZUlkOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuQVBJUHJvbWlzZTxGaWxlUmV0cmlldmVSZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvY29udGFpbmVycy8ke2NvbnRhaW5lcklkfS9maWxlcy8ke2ZpbGVJZH1gLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0IENvbnRhaW5lciBmaWxlc1xuICAgKi9cbiAgbGlzdChcbiAgICBjb250YWluZXJJZDogc3RyaW5nLFxuICAgIHF1ZXJ5PzogRmlsZUxpc3RQYXJhbXMsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuUGFnZVByb21pc2U8RmlsZUxpc3RSZXNwb25zZXNQYWdlLCBGaWxlTGlzdFJlc3BvbnNlPjtcbiAgbGlzdChcbiAgICBjb250YWluZXJJZDogc3RyaW5nLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLlBhZ2VQcm9taXNlPEZpbGVMaXN0UmVzcG9uc2VzUGFnZSwgRmlsZUxpc3RSZXNwb25zZT47XG4gIGxpc3QoXG4gICAgY29udGFpbmVySWQ6IHN0cmluZyxcbiAgICBxdWVyeTogRmlsZUxpc3RQYXJhbXMgfCBDb3JlLlJlcXVlc3RPcHRpb25zID0ge30sXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuUGFnZVByb21pc2U8RmlsZUxpc3RSZXNwb25zZXNQYWdlLCBGaWxlTGlzdFJlc3BvbnNlPiB7XG4gICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5saXN0KGNvbnRhaW5lcklkLCB7fSwgcXVlcnkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoYC9jb250YWluZXJzLyR7Y29udGFpbmVySWR9L2ZpbGVzYCwgRmlsZUxpc3RSZXNwb25zZXNQYWdlLCB7XG4gICAgICBxdWVyeSxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIENvbnRhaW5lciBGaWxlXG4gICAqL1xuICBkZWwoY29udGFpbmVySWQ6IHN0cmluZywgZmlsZUlkOiBzdHJpbmcsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5BUElQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmRlbGV0ZShgL2NvbnRhaW5lcnMvJHtjb250YWluZXJJZH0vZmlsZXMvJHtmaWxlSWR9YCwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgQWNjZXB0OiAnKi8qJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBGaWxlTGlzdFJlc3BvbnNlc1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlPEZpbGVMaXN0UmVzcG9uc2U+IHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZUNyZWF0ZVJlc3BvbnNlIHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgZmlsZS5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNpemUgb2YgdGhlIGZpbGUgaW4gYnl0ZXMuXG4gICAqL1xuICBieXRlczogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgY29udGFpbmVyIHRoaXMgZmlsZSBiZWxvbmdzIHRvLlxuICAgKi9cbiAgY29udGFpbmVyX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSB3aGVuIHRoZSBmaWxlIHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZF9hdDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGlzIG9iamVjdCAoYGNvbnRhaW5lci5maWxlYCkuXG4gICAqL1xuICBvYmplY3Q6ICdjb250YWluZXIuZmlsZSc7XG5cbiAgLyoqXG4gICAqIFBhdGggb2YgdGhlIGZpbGUgaW4gdGhlIGNvbnRhaW5lci5cbiAgICovXG4gIHBhdGg6IHN0cmluZztcblxuICAvKipcbiAgICogU291cmNlIG9mIHRoZSBmaWxlIChlLmcuLCBgdXNlcmAsIGBhc3Npc3RhbnRgKS5cbiAgICovXG4gIHNvdXJjZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVSZXRyaWV2ZVJlc3BvbnNlIHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgZmlsZS5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNpemUgb2YgdGhlIGZpbGUgaW4gYnl0ZXMuXG4gICAqL1xuICBieXRlczogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgY29udGFpbmVyIHRoaXMgZmlsZSBiZWxvbmdzIHRvLlxuICAgKi9cbiAgY29udGFpbmVyX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSB3aGVuIHRoZSBmaWxlIHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZF9hdDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGlzIG9iamVjdCAoYGNvbnRhaW5lci5maWxlYCkuXG4gICAqL1xuICBvYmplY3Q6ICdjb250YWluZXIuZmlsZSc7XG5cbiAgLyoqXG4gICAqIFBhdGggb2YgdGhlIGZpbGUgaW4gdGhlIGNvbnRhaW5lci5cbiAgICovXG4gIHBhdGg6IHN0cmluZztcblxuICAvKipcbiAgICogU291cmNlIG9mIHRoZSBmaWxlIChlLmcuLCBgdXNlcmAsIGBhc3Npc3RhbnRgKS5cbiAgICovXG4gIHNvdXJjZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVMaXN0UmVzcG9uc2Uge1xuICAvKipcbiAgICogVW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBmaWxlLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogU2l6ZSBvZiB0aGUgZmlsZSBpbiBieXRlcy5cbiAgICovXG4gIGJ5dGVzOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBjb250YWluZXIgdGhpcyBmaWxlIGJlbG9uZ3MgdG8uXG4gICAqL1xuICBjb250YWluZXJfaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpIHdoZW4gdGhlIGZpbGUgd2FzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkX2F0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoaXMgb2JqZWN0IChgY29udGFpbmVyLmZpbGVgKS5cbiAgICovXG4gIG9iamVjdDogJ2NvbnRhaW5lci5maWxlJztcblxuICAvKipcbiAgICogUGF0aCBvZiB0aGUgZmlsZSBpbiB0aGUgY29udGFpbmVyLlxuICAgKi9cbiAgcGF0aDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTb3VyY2Ugb2YgdGhlIGZpbGUgKGUuZy4sIGB1c2VyYCwgYGFzc2lzdGFudGApLlxuICAgKi9cbiAgc291cmNlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZUNyZWF0ZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBUaGUgRmlsZSBvYmplY3QgKG5vdCBmaWxlIG5hbWUpIHRvIGJlIHVwbG9hZGVkLlxuICAgKi9cbiAgZmlsZT86IENvcmUuVXBsb2FkYWJsZTtcblxuICAvKipcbiAgICogTmFtZSBvZiB0aGUgZmlsZSB0byBjcmVhdGUuXG4gICAqL1xuICBmaWxlX2lkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVMaXN0UGFyYW1zIGV4dGVuZHMgQ3Vyc29yUGFnZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBTb3J0IG9yZGVyIGJ5IHRoZSBgY3JlYXRlZF9hdGAgdGltZXN0YW1wIG9mIHRoZSBvYmplY3RzLiBgYXNjYCBmb3IgYXNjZW5kaW5nXG4gICAqIG9yZGVyIGFuZCBgZGVzY2AgZm9yIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAqL1xuICBvcmRlcj86ICdhc2MnIHwgJ2Rlc2MnO1xufVxuXG5GaWxlcy5GaWxlTGlzdFJlc3BvbnNlc1BhZ2UgPSBGaWxlTGlzdFJlc3BvbnNlc1BhZ2U7XG5GaWxlcy5Db250ZW50ID0gQ29udGVudDtcblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIEZpbGVzIHtcbiAgZXhwb3J0IHtcbiAgICB0eXBlIEZpbGVDcmVhdGVSZXNwb25zZSBhcyBGaWxlQ3JlYXRlUmVzcG9uc2UsXG4gICAgdHlwZSBGaWxlUmV0cmlldmVSZXNwb25zZSBhcyBGaWxlUmV0cmlldmVSZXNwb25zZSxcbiAgICB0eXBlIEZpbGVMaXN0UmVzcG9uc2UgYXMgRmlsZUxpc3RSZXNwb25zZSxcbiAgICBGaWxlTGlzdFJlc3BvbnNlc1BhZ2UgYXMgRmlsZUxpc3RSZXNwb25zZXNQYWdlLFxuICAgIHR5cGUgRmlsZUNyZWF0ZVBhcmFtcyBhcyBGaWxlQ3JlYXRlUGFyYW1zLFxuICAgIHR5cGUgRmlsZUxpc3RQYXJhbXMgYXMgRmlsZUxpc3RQYXJhbXMsXG4gIH07XG5cbiAgZXhwb3J0IHsgQ29udGVudCBhcyBDb250ZW50IH07XG59XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICcuLi8uLi9yZXNvdXJjZSc7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgRmlsZXNBUEkgZnJvbSAnLi9maWxlcy9maWxlcyc7XG5pbXBvcnQge1xuICBGaWxlQ3JlYXRlUGFyYW1zLFxuICBGaWxlQ3JlYXRlUmVzcG9uc2UsXG4gIEZpbGVMaXN0UGFyYW1zLFxuICBGaWxlTGlzdFJlc3BvbnNlLFxuICBGaWxlTGlzdFJlc3BvbnNlc1BhZ2UsXG4gIEZpbGVSZXRyaWV2ZVJlc3BvbnNlLFxuICBGaWxlcyxcbn0gZnJvbSAnLi9maWxlcy9maWxlcyc7XG5pbXBvcnQgeyBDdXJzb3JQYWdlLCB0eXBlIEN1cnNvclBhZ2VQYXJhbXMgfSBmcm9tICcuLi8uLi9wYWdpbmF0aW9uJztcblxuZXhwb3J0IGNsYXNzIENvbnRhaW5lcnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIGZpbGVzOiBGaWxlc0FQSS5GaWxlcyA9IG5ldyBGaWxlc0FQSS5GaWxlcyh0aGlzLl9jbGllbnQpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgQ29udGFpbmVyXG4gICAqL1xuICBjcmVhdGUoXG4gICAgYm9keTogQ29udGFpbmVyQ3JlYXRlUGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLkFQSVByb21pc2U8Q29udGFpbmVyQ3JlYXRlUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9jb250YWluZXJzJywgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIENvbnRhaW5lclxuICAgKi9cbiAgcmV0cmlldmUoY29udGFpbmVySWQ6IHN0cmluZywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkFQSVByb21pc2U8Q29udGFpbmVyUmV0cmlldmVSZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvY29udGFpbmVycy8ke2NvbnRhaW5lcklkfWAsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3QgQ29udGFpbmVyc1xuICAgKi9cbiAgbGlzdChcbiAgICBxdWVyeT86IENvbnRhaW5lckxpc3RQYXJhbXMsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuUGFnZVByb21pc2U8Q29udGFpbmVyTGlzdFJlc3BvbnNlc1BhZ2UsIENvbnRhaW5lckxpc3RSZXNwb25zZT47XG4gIGxpc3Qob3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLlBhZ2VQcm9taXNlPENvbnRhaW5lckxpc3RSZXNwb25zZXNQYWdlLCBDb250YWluZXJMaXN0UmVzcG9uc2U+O1xuICBsaXN0KFxuICAgIHF1ZXJ5OiBDb250YWluZXJMaXN0UGFyYW1zIHwgQ29yZS5SZXF1ZXN0T3B0aW9ucyA9IHt9LFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLlBhZ2VQcm9taXNlPENvbnRhaW5lckxpc3RSZXNwb25zZXNQYWdlLCBDb250YWluZXJMaXN0UmVzcG9uc2U+IHtcbiAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmxpc3Qoe30sIHF1ZXJ5KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KCcvY29udGFpbmVycycsIENvbnRhaW5lckxpc3RSZXNwb25zZXNQYWdlLCB7IHF1ZXJ5LCAuLi5vcHRpb25zIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBDb250YWluZXJcbiAgICovXG4gIGRlbChjb250YWluZXJJZDogc3RyaW5nLCBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IENvcmUuQVBJUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5kZWxldGUoYC9jb250YWluZXJzLyR7Y29udGFpbmVySWR9YCwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgQWNjZXB0OiAnKi8qJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb250YWluZXJMaXN0UmVzcG9uc2VzUGFnZSBleHRlbmRzIEN1cnNvclBhZ2U8Q29udGFpbmVyTGlzdFJlc3BvbnNlPiB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbnRhaW5lckNyZWF0ZVJlc3BvbnNlIHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgY29udGFpbmVyLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpIHdoZW4gdGhlIGNvbnRhaW5lciB3YXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWRfYXQ6IG51bWJlcjtcblxuICAvKipcbiAgICogTmFtZSBvZiB0aGUgY29udGFpbmVyLlxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGlzIG9iamVjdC5cbiAgICovXG4gIG9iamVjdDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTdGF0dXMgb2YgdGhlIGNvbnRhaW5lciAoZS5nLiwgYWN0aXZlLCBkZWxldGVkKS5cbiAgICovXG4gIHN0YXR1czogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgY29udGFpbmVyIHdpbGwgZXhwaXJlIGFmdGVyIHRoaXMgdGltZSBwZXJpb2QuIFRoZSBhbmNob3IgaXMgdGhlIHJlZmVyZW5jZVxuICAgKiBwb2ludCBmb3IgdGhlIGV4cGlyYXRpb24uIFRoZSBtaW51dGVzIGlzIHRoZSBudW1iZXIgb2YgbWludXRlcyBhZnRlciB0aGUgYW5jaG9yXG4gICAqIGJlZm9yZSB0aGUgY29udGFpbmVyIGV4cGlyZXMuXG4gICAqL1xuICBleHBpcmVzX2FmdGVyPzogQ29udGFpbmVyQ3JlYXRlUmVzcG9uc2UuRXhwaXJlc0FmdGVyO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIENvbnRhaW5lckNyZWF0ZVJlc3BvbnNlIHtcbiAgLyoqXG4gICAqIFRoZSBjb250YWluZXIgd2lsbCBleHBpcmUgYWZ0ZXIgdGhpcyB0aW1lIHBlcmlvZC4gVGhlIGFuY2hvciBpcyB0aGUgcmVmZXJlbmNlXG4gICAqIHBvaW50IGZvciB0aGUgZXhwaXJhdGlvbi4gVGhlIG1pbnV0ZXMgaXMgdGhlIG51bWJlciBvZiBtaW51dGVzIGFmdGVyIHRoZSBhbmNob3JcbiAgICogYmVmb3JlIHRoZSBjb250YWluZXIgZXhwaXJlcy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgRXhwaXJlc0FmdGVyIHtcbiAgICAvKipcbiAgICAgKiBUaGUgcmVmZXJlbmNlIHBvaW50IGZvciB0aGUgZXhwaXJhdGlvbi5cbiAgICAgKi9cbiAgICBhbmNob3I/OiAnbGFzdF9hY3RpdmVfYXQnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBtaW51dGVzIGFmdGVyIHRoZSBhbmNob3IgYmVmb3JlIHRoZSBjb250YWluZXIgZXhwaXJlcy5cbiAgICAgKi9cbiAgICBtaW51dGVzPzogbnVtYmVyO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29udGFpbmVyUmV0cmlldmVSZXNwb25zZSB7XG4gIC8qKlxuICAgKiBVbmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGNvbnRhaW5lci5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSB3aGVuIHRoZSBjb250YWluZXIgd2FzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkX2F0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIGNvbnRhaW5lci5cbiAgICovXG4gIG5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhpcyBvYmplY3QuXG4gICAqL1xuICBvYmplY3Q6IHN0cmluZztcblxuICAvKipcbiAgICogU3RhdHVzIG9mIHRoZSBjb250YWluZXIgKGUuZy4sIGFjdGl2ZSwgZGVsZXRlZCkuXG4gICAqL1xuICBzdGF0dXM6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGNvbnRhaW5lciB3aWxsIGV4cGlyZSBhZnRlciB0aGlzIHRpbWUgcGVyaW9kLiBUaGUgYW5jaG9yIGlzIHRoZSByZWZlcmVuY2VcbiAgICogcG9pbnQgZm9yIHRoZSBleHBpcmF0aW9uLiBUaGUgbWludXRlcyBpcyB0aGUgbnVtYmVyIG9mIG1pbnV0ZXMgYWZ0ZXIgdGhlIGFuY2hvclxuICAgKiBiZWZvcmUgdGhlIGNvbnRhaW5lciBleHBpcmVzLlxuICAgKi9cbiAgZXhwaXJlc19hZnRlcj86IENvbnRhaW5lclJldHJpZXZlUmVzcG9uc2UuRXhwaXJlc0FmdGVyO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIENvbnRhaW5lclJldHJpZXZlUmVzcG9uc2Uge1xuICAvKipcbiAgICogVGhlIGNvbnRhaW5lciB3aWxsIGV4cGlyZSBhZnRlciB0aGlzIHRpbWUgcGVyaW9kLiBUaGUgYW5jaG9yIGlzIHRoZSByZWZlcmVuY2VcbiAgICogcG9pbnQgZm9yIHRoZSBleHBpcmF0aW9uLiBUaGUgbWludXRlcyBpcyB0aGUgbnVtYmVyIG9mIG1pbnV0ZXMgYWZ0ZXIgdGhlIGFuY2hvclxuICAgKiBiZWZvcmUgdGhlIGNvbnRhaW5lciBleHBpcmVzLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBFeHBpcmVzQWZ0ZXIge1xuICAgIC8qKlxuICAgICAqIFRoZSByZWZlcmVuY2UgcG9pbnQgZm9yIHRoZSBleHBpcmF0aW9uLlxuICAgICAqL1xuICAgIGFuY2hvcj86ICdsYXN0X2FjdGl2ZV9hdCc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIG1pbnV0ZXMgYWZ0ZXIgdGhlIGFuY2hvciBiZWZvcmUgdGhlIGNvbnRhaW5lciBleHBpcmVzLlxuICAgICAqL1xuICAgIG1pbnV0ZXM/OiBudW1iZXI7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb250YWluZXJMaXN0UmVzcG9uc2Uge1xuICAvKipcbiAgICogVW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBjb250YWluZXIuXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBVbml4IHRpbWVzdGFtcCAoaW4gc2Vjb25kcykgd2hlbiB0aGUgY29udGFpbmVyIHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZF9hdDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSBjb250YWluZXIuXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoaXMgb2JqZWN0LlxuICAgKi9cbiAgb2JqZWN0OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFN0YXR1cyBvZiB0aGUgY29udGFpbmVyIChlLmcuLCBhY3RpdmUsIGRlbGV0ZWQpLlxuICAgKi9cbiAgc3RhdHVzOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBjb250YWluZXIgd2lsbCBleHBpcmUgYWZ0ZXIgdGhpcyB0aW1lIHBlcmlvZC4gVGhlIGFuY2hvciBpcyB0aGUgcmVmZXJlbmNlXG4gICAqIHBvaW50IGZvciB0aGUgZXhwaXJhdGlvbi4gVGhlIG1pbnV0ZXMgaXMgdGhlIG51bWJlciBvZiBtaW51dGVzIGFmdGVyIHRoZSBhbmNob3JcbiAgICogYmVmb3JlIHRoZSBjb250YWluZXIgZXhwaXJlcy5cbiAgICovXG4gIGV4cGlyZXNfYWZ0ZXI/OiBDb250YWluZXJMaXN0UmVzcG9uc2UuRXhwaXJlc0FmdGVyO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIENvbnRhaW5lckxpc3RSZXNwb25zZSB7XG4gIC8qKlxuICAgKiBUaGUgY29udGFpbmVyIHdpbGwgZXhwaXJlIGFmdGVyIHRoaXMgdGltZSBwZXJpb2QuIFRoZSBhbmNob3IgaXMgdGhlIHJlZmVyZW5jZVxuICAgKiBwb2ludCBmb3IgdGhlIGV4cGlyYXRpb24uIFRoZSBtaW51dGVzIGlzIHRoZSBudW1iZXIgb2YgbWludXRlcyBhZnRlciB0aGUgYW5jaG9yXG4gICAqIGJlZm9yZSB0aGUgY29udGFpbmVyIGV4cGlyZXMuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIEV4cGlyZXNBZnRlciB7XG4gICAgLyoqXG4gICAgICogVGhlIHJlZmVyZW5jZSBwb2ludCBmb3IgdGhlIGV4cGlyYXRpb24uXG4gICAgICovXG4gICAgYW5jaG9yPzogJ2xhc3RfYWN0aXZlX2F0JztcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgbWludXRlcyBhZnRlciB0aGUgYW5jaG9yIGJlZm9yZSB0aGUgY29udGFpbmVyIGV4cGlyZXMuXG4gICAgICovXG4gICAgbWludXRlcz86IG51bWJlcjtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbnRhaW5lckNyZWF0ZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSBjb250YWluZXIgdG8gY3JlYXRlLlxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDb250YWluZXIgZXhwaXJhdGlvbiB0aW1lIGluIHNlY29uZHMgcmVsYXRpdmUgdG8gdGhlICdhbmNob3InIHRpbWUuXG4gICAqL1xuICBleHBpcmVzX2FmdGVyPzogQ29udGFpbmVyQ3JlYXRlUGFyYW1zLkV4cGlyZXNBZnRlcjtcblxuICAvKipcbiAgICogSURzIG9mIGZpbGVzIHRvIGNvcHkgdG8gdGhlIGNvbnRhaW5lci5cbiAgICovXG4gIGZpbGVfaWRzPzogQXJyYXk8c3RyaW5nPjtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBDb250YWluZXJDcmVhdGVQYXJhbXMge1xuICAvKipcbiAgICogQ29udGFpbmVyIGV4cGlyYXRpb24gdGltZSBpbiBzZWNvbmRzIHJlbGF0aXZlIHRvIHRoZSAnYW5jaG9yJyB0aW1lLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBFeHBpcmVzQWZ0ZXIge1xuICAgIC8qKlxuICAgICAqIFRpbWUgYW5jaG9yIGZvciB0aGUgZXhwaXJhdGlvbiB0aW1lLiBDdXJyZW50bHkgb25seSAnbGFzdF9hY3RpdmVfYXQnIGlzXG4gICAgICogc3VwcG9ydGVkLlxuICAgICAqL1xuICAgIGFuY2hvcjogJ2xhc3RfYWN0aXZlX2F0JztcblxuICAgIG1pbnV0ZXM6IG51bWJlcjtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbnRhaW5lckxpc3RQYXJhbXMgZXh0ZW5kcyBDdXJzb3JQYWdlUGFyYW1zIHtcbiAgLyoqXG4gICAqIFNvcnQgb3JkZXIgYnkgdGhlIGBjcmVhdGVkX2F0YCB0aW1lc3RhbXAgb2YgdGhlIG9iamVjdHMuIGBhc2NgIGZvciBhc2NlbmRpbmdcbiAgICogb3JkZXIgYW5kIGBkZXNjYCBmb3IgZGVzY2VuZGluZyBvcmRlci5cbiAgICovXG4gIG9yZGVyPzogJ2FzYycgfCAnZGVzYyc7XG59XG5cbkNvbnRhaW5lcnMuQ29udGFpbmVyTGlzdFJlc3BvbnNlc1BhZ2UgPSBDb250YWluZXJMaXN0UmVzcG9uc2VzUGFnZTtcbkNvbnRhaW5lcnMuRmlsZXMgPSBGaWxlcztcbkNvbnRhaW5lcnMuRmlsZUxpc3RSZXNwb25zZXNQYWdlID0gRmlsZUxpc3RSZXNwb25zZXNQYWdlO1xuXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgQ29udGFpbmVycyB7XG4gIGV4cG9ydCB7XG4gICAgdHlwZSBDb250YWluZXJDcmVhdGVSZXNwb25zZSBhcyBDb250YWluZXJDcmVhdGVSZXNwb25zZSxcbiAgICB0eXBlIENvbnRhaW5lclJldHJpZXZlUmVzcG9uc2UgYXMgQ29udGFpbmVyUmV0cmlldmVSZXNwb25zZSxcbiAgICB0eXBlIENvbnRhaW5lckxpc3RSZXNwb25zZSBhcyBDb250YWluZXJMaXN0UmVzcG9uc2UsXG4gICAgQ29udGFpbmVyTGlzdFJlc3BvbnNlc1BhZ2UgYXMgQ29udGFpbmVyTGlzdFJlc3BvbnNlc1BhZ2UsXG4gICAgdHlwZSBDb250YWluZXJDcmVhdGVQYXJhbXMgYXMgQ29udGFpbmVyQ3JlYXRlUGFyYW1zLFxuICAgIHR5cGUgQ29udGFpbmVyTGlzdFBhcmFtcyBhcyBDb250YWluZXJMaXN0UGFyYW1zLFxuICB9O1xuXG4gIGV4cG9ydCB7XG4gICAgRmlsZXMgYXMgRmlsZXMsXG4gICAgdHlwZSBGaWxlQ3JlYXRlUmVzcG9uc2UgYXMgRmlsZUNyZWF0ZVJlc3BvbnNlLFxuICAgIHR5cGUgRmlsZVJldHJpZXZlUmVzcG9uc2UgYXMgRmlsZVJldHJpZXZlUmVzcG9uc2UsXG4gICAgdHlwZSBGaWxlTGlzdFJlc3BvbnNlIGFzIEZpbGVMaXN0UmVzcG9uc2UsXG4gICAgRmlsZUxpc3RSZXNwb25zZXNQYWdlIGFzIEZpbGVMaXN0UmVzcG9uc2VzUGFnZSxcbiAgICB0eXBlIEZpbGVDcmVhdGVQYXJhbXMgYXMgRmlsZUNyZWF0ZVBhcmFtcyxcbiAgICB0eXBlIEZpbGVMaXN0UGFyYW1zIGFzIEZpbGVMaXN0UGFyYW1zLFxuICB9O1xufVxuIiwgIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnLi4vcmVzb3VyY2UnO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tICcuLi9jb3JlJztcblxuZXhwb3J0IGNsYXNzIEVtYmVkZGluZ3MgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGVtYmVkZGluZyB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSBpbnB1dCB0ZXh0LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0c1xuICAgKiBjb25zdCBjcmVhdGVFbWJlZGRpbmdSZXNwb25zZSA9XG4gICAqICAgYXdhaXQgY2xpZW50LmVtYmVkZGluZ3MuY3JlYXRlKHtcbiAgICogICAgIGlucHV0OiAnVGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2cnLFxuICAgKiAgICAgbW9kZWw6ICd0ZXh0LWVtYmVkZGluZy0zLXNtYWxsJyxcbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqL1xuICBjcmVhdGUoXG4gICAgYm9keTogRW1iZWRkaW5nQ3JlYXRlUGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zPEVtYmVkZGluZ0NyZWF0ZVBhcmFtcz4sXG4gICk6IENvcmUuQVBJUHJvbWlzZTxDcmVhdGVFbWJlZGRpbmdSZXNwb25zZT4ge1xuICAgIGNvbnN0IGhhc1VzZXJQcm92aWRlZEVuY29kaW5nRm9ybWF0ID0gISFib2R5LmVuY29kaW5nX2Zvcm1hdDtcbiAgICAvLyBObyBlbmNvZGluZ19mb3JtYXQgc3BlY2lmaWVkLCBkZWZhdWx0aW5nIHRvIGJhc2U2NCBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vb3BlbmFpL29wZW5haS1ub2RlL3B1bGwvMTMxMlxuICAgIGxldCBlbmNvZGluZ19mb3JtYXQ6IEVtYmVkZGluZ0NyZWF0ZVBhcmFtc1snZW5jb2RpbmdfZm9ybWF0J10gPVxuICAgICAgaGFzVXNlclByb3ZpZGVkRW5jb2RpbmdGb3JtYXQgPyBib2R5LmVuY29kaW5nX2Zvcm1hdCA6ICdiYXNlNjQnO1xuXG4gICAgaWYgKGhhc1VzZXJQcm92aWRlZEVuY29kaW5nRm9ybWF0KSB7XG4gICAgICBDb3JlLmRlYnVnKCdSZXF1ZXN0JywgJ1VzZXIgZGVmaW5lZCBlbmNvZGluZ19mb3JtYXQ6JywgYm9keS5lbmNvZGluZ19mb3JtYXQpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3BvbnNlOiBDb3JlLkFQSVByb21pc2U8Q3JlYXRlRW1iZWRkaW5nUmVzcG9uc2U+ID0gdGhpcy5fY2xpZW50LnBvc3QoJy9lbWJlZGRpbmdzJywge1xuICAgICAgYm9keToge1xuICAgICAgICAuLi5ib2R5LFxuICAgICAgICBlbmNvZGluZ19mb3JtYXQ6IGVuY29kaW5nX2Zvcm1hdCBhcyBFbWJlZGRpbmdDcmVhdGVQYXJhbXNbJ2VuY29kaW5nX2Zvcm1hdCddLFxuICAgICAgfSxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgfSk7XG5cbiAgICAvLyBpZiB0aGUgdXNlciBzcGVjaWZpZWQgYW4gZW5jb2RpbmdfZm9ybWF0LCByZXR1cm4gdGhlIHJlc3BvbnNlIGFzLWlzXG4gICAgaWYgKGhhc1VzZXJQcm92aWRlZEVuY29kaW5nRm9ybWF0KSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuXG4gICAgLy8gaW4gdGhpcyBzdGFnZSwgd2UgYXJlIHN1cmUgdGhlIHVzZXIgZGlkIG5vdCBzcGVjaWZ5IGFuIGVuY29kaW5nX2Zvcm1hdFxuICAgIC8vIGFuZCB3ZSBkZWZhdWx0ZWQgdG8gYmFzZTY0IGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gICAgLy8gd2UgYXJlIHN1cmUgdGhlbiB0aGF0IHRoZSByZXNwb25zZSBpcyBiYXNlNjQgZW5jb2RlZCwgbGV0J3MgZGVjb2RlIGl0XG4gICAgLy8gdGhlIHJldHVybmVkIHJlc3VsdCB3aWxsIGJlIGEgZmxvYXQzMiBhcnJheSBzaW5jZSB0aGlzIGlzIE9wZW5BSSBBUEkncyBkZWZhdWx0IGVuY29kaW5nXG4gICAgQ29yZS5kZWJ1ZygncmVzcG9uc2UnLCAnRGVjb2RpbmcgYmFzZTY0IGVtYmVkZGluZ3MgdG8gZmxvYXQzMiBhcnJheScpO1xuXG4gICAgcmV0dXJuIChyZXNwb25zZSBhcyBDb3JlLkFQSVByb21pc2U8Q3JlYXRlRW1iZWRkaW5nUmVzcG9uc2U+KS5fdGhlblVud3JhcCgocmVzcG9uc2UpID0+IHtcbiAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5kYXRhKSB7XG4gICAgICAgIHJlc3BvbnNlLmRhdGEuZm9yRWFjaCgoZW1iZWRkaW5nQmFzZTY0T2JqKSA9PiB7XG4gICAgICAgICAgY29uc3QgZW1iZWRkaW5nQmFzZTY0U3RyID0gZW1iZWRkaW5nQmFzZTY0T2JqLmVtYmVkZGluZyBhcyB1bmtub3duIGFzIHN0cmluZztcbiAgICAgICAgICBlbWJlZGRpbmdCYXNlNjRPYmouZW1iZWRkaW5nID0gQ29yZS50b0Zsb2F0MzJBcnJheShlbWJlZGRpbmdCYXNlNjRTdHIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlRW1iZWRkaW5nUmVzcG9uc2Uge1xuICAvKipcbiAgICogVGhlIGxpc3Qgb2YgZW1iZWRkaW5ncyBnZW5lcmF0ZWQgYnkgdGhlIG1vZGVsLlxuICAgKi9cbiAgZGF0YTogQXJyYXk8RW1iZWRkaW5nPjtcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIG1vZGVsIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGVtYmVkZGluZy5cbiAgICovXG4gIG1vZGVsOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBvYmplY3QgdHlwZSwgd2hpY2ggaXMgYWx3YXlzIFwibGlzdFwiLlxuICAgKi9cbiAgb2JqZWN0OiAnbGlzdCc7XG5cbiAgLyoqXG4gICAqIFRoZSB1c2FnZSBpbmZvcm1hdGlvbiBmb3IgdGhlIHJlcXVlc3QuXG4gICAqL1xuICB1c2FnZTogQ3JlYXRlRW1iZWRkaW5nUmVzcG9uc2UuVXNhZ2U7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ3JlYXRlRW1iZWRkaW5nUmVzcG9uc2Uge1xuICAvKipcbiAgICogVGhlIHVzYWdlIGluZm9ybWF0aW9uIGZvciB0aGUgcmVxdWVzdC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVXNhZ2Uge1xuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgdG9rZW5zIHVzZWQgYnkgdGhlIHByb21wdC5cbiAgICAgKi9cbiAgICBwcm9tcHRfdG9rZW5zOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdG90YWwgbnVtYmVyIG9mIHRva2VucyB1c2VkIGJ5IHRoZSByZXF1ZXN0LlxuICAgICAqL1xuICAgIHRvdGFsX3Rva2VuczogbnVtYmVyO1xuICB9XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiBlbWJlZGRpbmcgdmVjdG9yIHJldHVybmVkIGJ5IGVtYmVkZGluZyBlbmRwb2ludC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFbWJlZGRpbmcge1xuICAvKipcbiAgICogVGhlIGVtYmVkZGluZyB2ZWN0b3IsIHdoaWNoIGlzIGEgbGlzdCBvZiBmbG9hdHMuIFRoZSBsZW5ndGggb2YgdmVjdG9yIGRlcGVuZHMgb25cbiAgICogdGhlIG1vZGVsIGFzIGxpc3RlZCBpbiB0aGVcbiAgICogW2VtYmVkZGluZyBndWlkZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL2VtYmVkZGluZ3MpLlxuICAgKi9cbiAgZW1iZWRkaW5nOiBBcnJheTxudW1iZXI+O1xuXG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIGVtYmVkZGluZyBpbiB0aGUgbGlzdCBvZiBlbWJlZGRpbmdzLlxuICAgKi9cbiAgaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG9iamVjdCB0eXBlLCB3aGljaCBpcyBhbHdheXMgXCJlbWJlZGRpbmdcIi5cbiAgICovXG4gIG9iamVjdDogJ2VtYmVkZGluZyc7XG59XG5cbmV4cG9ydCB0eXBlIEVtYmVkZGluZ01vZGVsID0gJ3RleHQtZW1iZWRkaW5nLWFkYS0wMDInIHwgJ3RleHQtZW1iZWRkaW5nLTMtc21hbGwnIHwgJ3RleHQtZW1iZWRkaW5nLTMtbGFyZ2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVtYmVkZGluZ0NyZWF0ZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBJbnB1dCB0ZXh0IHRvIGVtYmVkLCBlbmNvZGVkIGFzIGEgc3RyaW5nIG9yIGFycmF5IG9mIHRva2Vucy4gVG8gZW1iZWQgbXVsdGlwbGVcbiAgICogaW5wdXRzIGluIGEgc2luZ2xlIHJlcXVlc3QsIHBhc3MgYW4gYXJyYXkgb2Ygc3RyaW5ncyBvciBhcnJheSBvZiB0b2tlbiBhcnJheXMuXG4gICAqIFRoZSBpbnB1dCBtdXN0IG5vdCBleGNlZWQgdGhlIG1heCBpbnB1dCB0b2tlbnMgZm9yIHRoZSBtb2RlbCAoODE5MiB0b2tlbnMgZm9yXG4gICAqIGFsbCBlbWJlZGRpbmcgbW9kZWxzKSwgY2Fubm90IGJlIGFuIGVtcHR5IHN0cmluZywgYW5kIGFueSBhcnJheSBtdXN0IGJlIDIwNDhcbiAgICogZGltZW5zaW9ucyBvciBsZXNzLlxuICAgKiBbRXhhbXBsZSBQeXRob24gY29kZV0oaHR0cHM6Ly9jb29rYm9vay5vcGVuYWkuY29tL2V4YW1wbGVzL2hvd190b19jb3VudF90b2tlbnNfd2l0aF90aWt0b2tlbilcbiAgICogZm9yIGNvdW50aW5nIHRva2Vucy4gSW4gYWRkaXRpb24gdG8gdGhlIHBlci1pbnB1dCB0b2tlbiBsaW1pdCwgYWxsIGVtYmVkZGluZ1xuICAgKiBtb2RlbHMgZW5mb3JjZSBhIG1heGltdW0gb2YgMzAwLDAwMCB0b2tlbnMgc3VtbWVkIGFjcm9zcyBhbGwgaW5wdXRzIGluIGEgc2luZ2xlXG4gICAqIHJlcXVlc3QuXG4gICAqL1xuICBpbnB1dDogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPiB8IEFycmF5PG51bWJlcj4gfCBBcnJheTxBcnJheTxudW1iZXI+PjtcblxuICAvKipcbiAgICogSUQgb2YgdGhlIG1vZGVsIHRvIHVzZS4gWW91IGNhbiB1c2UgdGhlXG4gICAqIFtMaXN0IG1vZGVsc10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9tb2RlbHMvbGlzdCkgQVBJIHRvXG4gICAqIHNlZSBhbGwgb2YgeW91ciBhdmFpbGFibGUgbW9kZWxzLCBvciBzZWUgb3VyXG4gICAqIFtNb2RlbCBvdmVydmlld10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvbW9kZWxzKSBmb3IgZGVzY3JpcHRpb25zIG9mXG4gICAqIHRoZW0uXG4gICAqL1xuICBtb2RlbDogKHN0cmluZyAmIHt9KSB8IEVtYmVkZGluZ01vZGVsO1xuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIGRpbWVuc2lvbnMgdGhlIHJlc3VsdGluZyBvdXRwdXQgZW1iZWRkaW5ncyBzaG91bGQgaGF2ZS4gT25seVxuICAgKiBzdXBwb3J0ZWQgaW4gYHRleHQtZW1iZWRkaW5nLTNgIGFuZCBsYXRlciBtb2RlbHMuXG4gICAqL1xuICBkaW1lbnNpb25zPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgZm9ybWF0IHRvIHJldHVybiB0aGUgZW1iZWRkaW5ncyBpbi4gQ2FuIGJlIGVpdGhlciBgZmxvYXRgIG9yXG4gICAqIFtgYmFzZTY0YF0oaHR0cHM6Ly9weXBpLm9yZy9wcm9qZWN0L3B5YmFzZTY0LykuXG4gICAqL1xuICBlbmNvZGluZ19mb3JtYXQ/OiAnZmxvYXQnIHwgJ2Jhc2U2NCc7XG5cbiAgLyoqXG4gICAqIEEgdW5pcXVlIGlkZW50aWZpZXIgcmVwcmVzZW50aW5nIHlvdXIgZW5kLXVzZXIsIHdoaWNoIGNhbiBoZWxwIE9wZW5BSSB0byBtb25pdG9yXG4gICAqIGFuZCBkZXRlY3QgYWJ1c2UuXG4gICAqIFtMZWFybiBtb3JlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvc2FmZXR5LWJlc3QtcHJhY3RpY2VzI2VuZC11c2VyLWlkcykuXG4gICAqL1xuICB1c2VyPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgRW1iZWRkaW5ncyB7XG4gIGV4cG9ydCB7XG4gICAgdHlwZSBDcmVhdGVFbWJlZGRpbmdSZXNwb25zZSBhcyBDcmVhdGVFbWJlZGRpbmdSZXNwb25zZSxcbiAgICB0eXBlIEVtYmVkZGluZyBhcyBFbWJlZGRpbmcsXG4gICAgdHlwZSBFbWJlZGRpbmdNb2RlbCBhcyBFbWJlZGRpbmdNb2RlbCxcbiAgICB0eXBlIEVtYmVkZGluZ0NyZWF0ZVBhcmFtcyBhcyBFbWJlZGRpbmdDcmVhdGVQYXJhbXMsXG4gIH07XG59XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICcuLi8uLi8uLi9yZXNvdXJjZSc7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gJy4uLy4uLy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgUnVuc0FQSSBmcm9tICcuL3J1bnMnO1xuaW1wb3J0IHsgQ3Vyc29yUGFnZSwgdHlwZSBDdXJzb3JQYWdlUGFyYW1zIH0gZnJvbSAnLi4vLi4vLi4vcGFnaW5hdGlvbic7XG5cbmV4cG9ydCBjbGFzcyBPdXRwdXRJdGVtcyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgLyoqXG4gICAqIEdldCBhbiBldmFsdWF0aW9uIHJ1biBvdXRwdXQgaXRlbSBieSBJRC5cbiAgICovXG4gIHJldHJpZXZlKFxuICAgIGV2YWxJZDogc3RyaW5nLFxuICAgIHJ1bklkOiBzdHJpbmcsXG4gICAgb3V0cHV0SXRlbUlkOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuQVBJUHJvbWlzZTxPdXRwdXRJdGVtUmV0cmlldmVSZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvZXZhbHMvJHtldmFsSWR9L3J1bnMvJHtydW5JZH0vb3V0cHV0X2l0ZW1zLyR7b3V0cHV0SXRlbUlkfWAsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIGxpc3Qgb2Ygb3V0cHV0IGl0ZW1zIGZvciBhbiBldmFsdWF0aW9uIHJ1bi5cbiAgICovXG4gIGxpc3QoXG4gICAgZXZhbElkOiBzdHJpbmcsXG4gICAgcnVuSWQ6IHN0cmluZyxcbiAgICBxdWVyeT86IE91dHB1dEl0ZW1MaXN0UGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLlBhZ2VQcm9taXNlPE91dHB1dEl0ZW1MaXN0UmVzcG9uc2VzUGFnZSwgT3V0cHV0SXRlbUxpc3RSZXNwb25zZT47XG4gIGxpc3QoXG4gICAgZXZhbElkOiBzdHJpbmcsXG4gICAgcnVuSWQ6IHN0cmluZyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5QYWdlUHJvbWlzZTxPdXRwdXRJdGVtTGlzdFJlc3BvbnNlc1BhZ2UsIE91dHB1dEl0ZW1MaXN0UmVzcG9uc2U+O1xuICBsaXN0KFxuICAgIGV2YWxJZDogc3RyaW5nLFxuICAgIHJ1bklkOiBzdHJpbmcsXG4gICAgcXVlcnk6IE91dHB1dEl0ZW1MaXN0UGFyYW1zIHwgQ29yZS5SZXF1ZXN0T3B0aW9ucyA9IHt9LFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLlBhZ2VQcm9taXNlPE91dHB1dEl0ZW1MaXN0UmVzcG9uc2VzUGFnZSwgT3V0cHV0SXRlbUxpc3RSZXNwb25zZT4ge1xuICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xuICAgICAgcmV0dXJuIHRoaXMubGlzdChldmFsSWQsIHJ1bklkLCB7fSwgcXVlcnkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoXG4gICAgICBgL2V2YWxzLyR7ZXZhbElkfS9ydW5zLyR7cnVuSWR9L291dHB1dF9pdGVtc2AsXG4gICAgICBPdXRwdXRJdGVtTGlzdFJlc3BvbnNlc1BhZ2UsXG4gICAgICB7IHF1ZXJ5LCAuLi5vcHRpb25zIH0sXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgT3V0cHV0SXRlbUxpc3RSZXNwb25zZXNQYWdlIGV4dGVuZHMgQ3Vyc29yUGFnZTxPdXRwdXRJdGVtTGlzdFJlc3BvbnNlPiB7fVxuXG4vKipcbiAqIEEgc2NoZW1hIHJlcHJlc2VudGluZyBhbiBldmFsdWF0aW9uIHJ1biBvdXRwdXQgaXRlbS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBPdXRwdXRJdGVtUmV0cmlldmVSZXNwb25zZSB7XG4gIC8qKlxuICAgKiBVbmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGV2YWx1YXRpb24gcnVuIG91dHB1dCBpdGVtLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpIHdoZW4gdGhlIGV2YWx1YXRpb24gcnVuIHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZF9hdDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBEZXRhaWxzIG9mIHRoZSBpbnB1dCBkYXRhIHNvdXJjZSBpdGVtLlxuICAgKi9cbiAgZGF0YXNvdXJjZV9pdGVtOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcblxuICAvKipcbiAgICogVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBkYXRhIHNvdXJjZSBpdGVtLlxuICAgKi9cbiAgZGF0YXNvdXJjZV9pdGVtX2lkOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBldmFsdWF0aW9uIGdyb3VwLlxuICAgKi9cbiAgZXZhbF9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgb2JqZWN0LiBBbHdheXMgXCJldmFsLnJ1bi5vdXRwdXRfaXRlbVwiLlxuICAgKi9cbiAgb2JqZWN0OiAnZXZhbC5ydW4ub3V0cHV0X2l0ZW0nO1xuXG4gIC8qKlxuICAgKiBBIGxpc3Qgb2YgcmVzdWx0cyBmcm9tIHRoZSBldmFsdWF0aW9uIHJ1bi5cbiAgICovXG4gIHJlc3VsdHM6IEFycmF5PFJlY29yZDxzdHJpbmcsIHVua25vd24+PjtcblxuICAvKipcbiAgICogVGhlIGlkZW50aWZpZXIgb2YgdGhlIGV2YWx1YXRpb24gcnVuIGFzc29jaWF0ZWQgd2l0aCB0aGlzIG91dHB1dCBpdGVtLlxuICAgKi9cbiAgcnVuX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgc2FtcGxlIGNvbnRhaW5pbmcgdGhlIGlucHV0IGFuZCBvdXRwdXQgb2YgdGhlIGV2YWx1YXRpb24gcnVuLlxuICAgKi9cbiAgc2FtcGxlOiBPdXRwdXRJdGVtUmV0cmlldmVSZXNwb25zZS5TYW1wbGU7XG5cbiAgLyoqXG4gICAqIFRoZSBzdGF0dXMgb2YgdGhlIGV2YWx1YXRpb24gcnVuLlxuICAgKi9cbiAgc3RhdHVzOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgT3V0cHV0SXRlbVJldHJpZXZlUmVzcG9uc2Uge1xuICAvKipcbiAgICogQSBzYW1wbGUgY29udGFpbmluZyB0aGUgaW5wdXQgYW5kIG91dHB1dCBvZiB0aGUgZXZhbHVhdGlvbiBydW4uXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFNhbXBsZSB7XG4gICAgLyoqXG4gICAgICogQW4gb2JqZWN0IHJlcHJlc2VudGluZyBhbiBlcnJvciByZXNwb25zZSBmcm9tIHRoZSBFdmFsIEFQSS5cbiAgICAgKi9cbiAgICBlcnJvcjogUnVuc0FQSS5FdmFsQVBJRXJyb3I7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmVhc29uIHdoeSB0aGUgc2FtcGxlIGdlbmVyYXRpb24gd2FzIGZpbmlzaGVkLlxuICAgICAqL1xuICAgIGZpbmlzaF9yZWFzb246IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIGlucHV0IG1lc3NhZ2VzLlxuICAgICAqL1xuICAgIGlucHV0OiBBcnJheTxTYW1wbGUuSW5wdXQ+O1xuXG4gICAgLyoqXG4gICAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHRva2VucyBhbGxvd2VkIGZvciBjb21wbGV0aW9uLlxuICAgICAqL1xuICAgIG1heF9jb21wbGV0aW9uX3Rva2VuczogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG1vZGVsIHVzZWQgZm9yIGdlbmVyYXRpbmcgdGhlIHNhbXBsZS5cbiAgICAgKi9cbiAgICBtb2RlbDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2Ygb3V0cHV0IG1lc3NhZ2VzLlxuICAgICAqL1xuICAgIG91dHB1dDogQXJyYXk8U2FtcGxlLk91dHB1dD47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2VlZCB1c2VkIGZvciBnZW5lcmF0aW5nIHRoZSBzYW1wbGUuXG4gICAgICovXG4gICAgc2VlZDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNhbXBsaW5nIHRlbXBlcmF0dXJlIHVzZWQuXG4gICAgICovXG4gICAgdGVtcGVyYXR1cmU6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0b3BfcCB2YWx1ZSB1c2VkIGZvciBzYW1wbGluZy5cbiAgICAgKi9cbiAgICB0b3BfcDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVG9rZW4gdXNhZ2UgZGV0YWlscyBmb3IgdGhlIHNhbXBsZS5cbiAgICAgKi9cbiAgICB1c2FnZTogU2FtcGxlLlVzYWdlO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBTYW1wbGUge1xuICAgIC8qKlxuICAgICAqIEFuIGlucHV0IG1lc3NhZ2UuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBJbnB1dCB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBjb250ZW50IG9mIHRoZSBtZXNzYWdlLlxuICAgICAgICovXG4gICAgICBjb250ZW50OiBzdHJpbmc7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHJvbGUgb2YgdGhlIG1lc3NhZ2Ugc2VuZGVyIChlLmcuLCBzeXN0ZW0sIHVzZXIsIGRldmVsb3BlcikuXG4gICAgICAgKi9cbiAgICAgIHJvbGU6IHN0cmluZztcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIE91dHB1dCB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBjb250ZW50IG9mIHRoZSBtZXNzYWdlLlxuICAgICAgICovXG4gICAgICBjb250ZW50Pzogc3RyaW5nO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSByb2xlIG9mIHRoZSBtZXNzYWdlIChlLmcuIFwic3lzdGVtXCIsIFwiYXNzaXN0YW50XCIsIFwidXNlclwiKS5cbiAgICAgICAqL1xuICAgICAgcm9sZT86IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUb2tlbiB1c2FnZSBkZXRhaWxzIGZvciB0aGUgc2FtcGxlLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgVXNhZ2Uge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbnVtYmVyIG9mIHRva2VucyByZXRyaWV2ZWQgZnJvbSBjYWNoZS5cbiAgICAgICAqL1xuICAgICAgY2FjaGVkX3Rva2VuczogbnVtYmVyO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBudW1iZXIgb2YgY29tcGxldGlvbiB0b2tlbnMgZ2VuZXJhdGVkLlxuICAgICAgICovXG4gICAgICBjb21wbGV0aW9uX3Rva2VuczogbnVtYmVyO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBudW1iZXIgb2YgcHJvbXB0IHRva2VucyB1c2VkLlxuICAgICAgICovXG4gICAgICBwcm9tcHRfdG9rZW5zOiBudW1iZXI7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHRvdGFsIG51bWJlciBvZiB0b2tlbnMgdXNlZC5cbiAgICAgICAqL1xuICAgICAgdG90YWxfdG9rZW5zOiBudW1iZXI7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQSBzY2hlbWEgcmVwcmVzZW50aW5nIGFuIGV2YWx1YXRpb24gcnVuIG91dHB1dCBpdGVtLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE91dHB1dEl0ZW1MaXN0UmVzcG9uc2Uge1xuICAvKipcbiAgICogVW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBldmFsdWF0aW9uIHJ1biBvdXRwdXQgaXRlbS5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSB3aGVuIHRoZSBldmFsdWF0aW9uIHJ1biB3YXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWRfYXQ6IG51bWJlcjtcblxuICAvKipcbiAgICogRGV0YWlscyBvZiB0aGUgaW5wdXQgZGF0YSBzb3VyY2UgaXRlbS5cbiAgICovXG4gIGRhdGFzb3VyY2VfaXRlbTogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG5cbiAgLyoqXG4gICAqIFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZGF0YSBzb3VyY2UgaXRlbS5cbiAgICovXG4gIGRhdGFzb3VyY2VfaXRlbV9pZDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgaWRlbnRpZmllciBvZiB0aGUgZXZhbHVhdGlvbiBncm91cC5cbiAgICovXG4gIGV2YWxfaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIG9iamVjdC4gQWx3YXlzIFwiZXZhbC5ydW4ub3V0cHV0X2l0ZW1cIi5cbiAgICovXG4gIG9iamVjdDogJ2V2YWwucnVuLm91dHB1dF9pdGVtJztcblxuICAvKipcbiAgICogQSBsaXN0IG9mIHJlc3VsdHMgZnJvbSB0aGUgZXZhbHVhdGlvbiBydW4uXG4gICAqL1xuICByZXN1bHRzOiBBcnJheTxSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj47XG5cbiAgLyoqXG4gICAqIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBldmFsdWF0aW9uIHJ1biBhc3NvY2lhdGVkIHdpdGggdGhpcyBvdXRwdXQgaXRlbS5cbiAgICovXG4gIHJ1bl9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBIHNhbXBsZSBjb250YWluaW5nIHRoZSBpbnB1dCBhbmQgb3V0cHV0IG9mIHRoZSBldmFsdWF0aW9uIHJ1bi5cbiAgICovXG4gIHNhbXBsZTogT3V0cHV0SXRlbUxpc3RSZXNwb25zZS5TYW1wbGU7XG5cbiAgLyoqXG4gICAqIFRoZSBzdGF0dXMgb2YgdGhlIGV2YWx1YXRpb24gcnVuLlxuICAgKi9cbiAgc3RhdHVzOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgT3V0cHV0SXRlbUxpc3RSZXNwb25zZSB7XG4gIC8qKlxuICAgKiBBIHNhbXBsZSBjb250YWluaW5nIHRoZSBpbnB1dCBhbmQgb3V0cHV0IG9mIHRoZSBldmFsdWF0aW9uIHJ1bi5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgU2FtcGxlIHtcbiAgICAvKipcbiAgICAgKiBBbiBvYmplY3QgcmVwcmVzZW50aW5nIGFuIGVycm9yIHJlc3BvbnNlIGZyb20gdGhlIEV2YWwgQVBJLlxuICAgICAqL1xuICAgIGVycm9yOiBSdW5zQVBJLkV2YWxBUElFcnJvcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSByZWFzb24gd2h5IHRoZSBzYW1wbGUgZ2VuZXJhdGlvbiB3YXMgZmluaXNoZWQuXG4gICAgICovXG4gICAgZmluaXNoX3JlYXNvbjogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgaW5wdXQgbWVzc2FnZXMuXG4gICAgICovXG4gICAgaW5wdXQ6IEFycmF5PFNhbXBsZS5JbnB1dD47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgdG9rZW5zIGFsbG93ZWQgZm9yIGNvbXBsZXRpb24uXG4gICAgICovXG4gICAgbWF4X2NvbXBsZXRpb25fdG9rZW5zOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbW9kZWwgdXNlZCBmb3IgZ2VuZXJhdGluZyB0aGUgc2FtcGxlLlxuICAgICAqL1xuICAgIG1vZGVsOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiBvdXRwdXQgbWVzc2FnZXMuXG4gICAgICovXG4gICAgb3V0cHV0OiBBcnJheTxTYW1wbGUuT3V0cHV0PjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzZWVkIHVzZWQgZm9yIGdlbmVyYXRpbmcgdGhlIHNhbXBsZS5cbiAgICAgKi9cbiAgICBzZWVkOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2FtcGxpbmcgdGVtcGVyYXR1cmUgdXNlZC5cbiAgICAgKi9cbiAgICB0ZW1wZXJhdHVyZTogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRvcF9wIHZhbHVlIHVzZWQgZm9yIHNhbXBsaW5nLlxuICAgICAqL1xuICAgIHRvcF9wOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUb2tlbiB1c2FnZSBkZXRhaWxzIGZvciB0aGUgc2FtcGxlLlxuICAgICAqL1xuICAgIHVzYWdlOiBTYW1wbGUuVXNhZ2U7XG4gIH1cblxuICBleHBvcnQgbmFtZXNwYWNlIFNhbXBsZSB7XG4gICAgLyoqXG4gICAgICogQW4gaW5wdXQgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElucHV0IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIGNvbnRlbnQgb2YgdGhlIG1lc3NhZ2UuXG4gICAgICAgKi9cbiAgICAgIGNvbnRlbnQ6IHN0cmluZztcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgcm9sZSBvZiB0aGUgbWVzc2FnZSBzZW5kZXIgKGUuZy4sIHN5c3RlbSwgdXNlciwgZGV2ZWxvcGVyKS5cbiAgICAgICAqL1xuICAgICAgcm9sZTogc3RyaW5nO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgT3V0cHV0IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIGNvbnRlbnQgb2YgdGhlIG1lc3NhZ2UuXG4gICAgICAgKi9cbiAgICAgIGNvbnRlbnQ/OiBzdHJpbmc7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHJvbGUgb2YgdGhlIG1lc3NhZ2UgKGUuZy4gXCJzeXN0ZW1cIiwgXCJhc3Npc3RhbnRcIiwgXCJ1c2VyXCIpLlxuICAgICAgICovXG4gICAgICByb2xlPzogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRva2VuIHVzYWdlIGRldGFpbHMgZm9yIHRoZSBzYW1wbGUuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBVc2FnZSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBudW1iZXIgb2YgdG9rZW5zIHJldHJpZXZlZCBmcm9tIGNhY2hlLlxuICAgICAgICovXG4gICAgICBjYWNoZWRfdG9rZW5zOiBudW1iZXI7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIG51bWJlciBvZiBjb21wbGV0aW9uIHRva2VucyBnZW5lcmF0ZWQuXG4gICAgICAgKi9cbiAgICAgIGNvbXBsZXRpb25fdG9rZW5zOiBudW1iZXI7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIG51bWJlciBvZiBwcm9tcHQgdG9rZW5zIHVzZWQuXG4gICAgICAgKi9cbiAgICAgIHByb21wdF90b2tlbnM6IG51bWJlcjtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdG90YWwgbnVtYmVyIG9mIHRva2VucyB1c2VkLlxuICAgICAgICovXG4gICAgICB0b3RhbF90b2tlbnM6IG51bWJlcjtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBPdXRwdXRJdGVtTGlzdFBhcmFtcyBleHRlbmRzIEN1cnNvclBhZ2VQYXJhbXMge1xuICAvKipcbiAgICogU29ydCBvcmRlciBmb3Igb3V0cHV0IGl0ZW1zIGJ5IHRpbWVzdGFtcC4gVXNlIGBhc2NgIGZvciBhc2NlbmRpbmcgb3JkZXIgb3JcbiAgICogYGRlc2NgIGZvciBkZXNjZW5kaW5nIG9yZGVyLiBEZWZhdWx0cyB0byBgYXNjYC5cbiAgICovXG4gIG9yZGVyPzogJ2FzYycgfCAnZGVzYyc7XG5cbiAgLyoqXG4gICAqIEZpbHRlciBvdXRwdXQgaXRlbXMgYnkgc3RhdHVzLiBVc2UgYGZhaWxlZGAgdG8gZmlsdGVyIGJ5IGZhaWxlZCBvdXRwdXQgaXRlbXMgb3JcbiAgICogYHBhc3NgIHRvIGZpbHRlciBieSBwYXNzZWQgb3V0cHV0IGl0ZW1zLlxuICAgKi9cbiAgc3RhdHVzPzogJ2ZhaWwnIHwgJ3Bhc3MnO1xufVxuXG5PdXRwdXRJdGVtcy5PdXRwdXRJdGVtTGlzdFJlc3BvbnNlc1BhZ2UgPSBPdXRwdXRJdGVtTGlzdFJlc3BvbnNlc1BhZ2U7XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBPdXRwdXRJdGVtcyB7XG4gIGV4cG9ydCB7XG4gICAgdHlwZSBPdXRwdXRJdGVtUmV0cmlldmVSZXNwb25zZSBhcyBPdXRwdXRJdGVtUmV0cmlldmVSZXNwb25zZSxcbiAgICB0eXBlIE91dHB1dEl0ZW1MaXN0UmVzcG9uc2UgYXMgT3V0cHV0SXRlbUxpc3RSZXNwb25zZSxcbiAgICBPdXRwdXRJdGVtTGlzdFJlc3BvbnNlc1BhZ2UgYXMgT3V0cHV0SXRlbUxpc3RSZXNwb25zZXNQYWdlLFxuICAgIHR5cGUgT3V0cHV0SXRlbUxpc3RQYXJhbXMgYXMgT3V0cHV0SXRlbUxpc3RQYXJhbXMsXG4gIH07XG59XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICcuLi8uLi8uLi9yZXNvdXJjZSc7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gJy4uLy4uLy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgU2hhcmVkIGZyb20gJy4uLy4uL3NoYXJlZCc7XG5pbXBvcnQgKiBhcyBSZXNwb25zZXNBUEkgZnJvbSAnLi4vLi4vcmVzcG9uc2VzL3Jlc3BvbnNlcyc7XG5pbXBvcnQgKiBhcyBPdXRwdXRJdGVtc0FQSSBmcm9tICcuL291dHB1dC1pdGVtcyc7XG5pbXBvcnQge1xuICBPdXRwdXRJdGVtTGlzdFBhcmFtcyxcbiAgT3V0cHV0SXRlbUxpc3RSZXNwb25zZSxcbiAgT3V0cHV0SXRlbUxpc3RSZXNwb25zZXNQYWdlLFxuICBPdXRwdXRJdGVtUmV0cmlldmVSZXNwb25zZSxcbiAgT3V0cHV0SXRlbXMsXG59IGZyb20gJy4vb3V0cHV0LWl0ZW1zJztcbmltcG9ydCB7IEN1cnNvclBhZ2UsIHR5cGUgQ3Vyc29yUGFnZVBhcmFtcyB9IGZyb20gJy4uLy4uLy4uL3BhZ2luYXRpb24nO1xuXG5leHBvcnQgY2xhc3MgUnVucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgb3V0cHV0SXRlbXM6IE91dHB1dEl0ZW1zQVBJLk91dHB1dEl0ZW1zID0gbmV3IE91dHB1dEl0ZW1zQVBJLk91dHB1dEl0ZW1zKHRoaXMuX2NsaWVudCk7XG5cbiAgLyoqXG4gICAqIEtpY2tzIG9mZiBhIG5ldyBydW4gZm9yIGEgZ2l2ZW4gZXZhbHVhdGlvbiwgc3BlY2lmeWluZyB0aGUgZGF0YSBzb3VyY2UsIGFuZCB3aGF0XG4gICAqIG1vZGVsIGNvbmZpZ3VyYXRpb24gdG8gdXNlIHRvIHRlc3QuIFRoZSBkYXRhc291cmNlIHdpbGwgYmUgdmFsaWRhdGVkIGFnYWluc3QgdGhlXG4gICAqIHNjaGVtYSBzcGVjaWZpZWQgaW4gdGhlIGNvbmZpZyBvZiB0aGUgZXZhbHVhdGlvbi5cbiAgICovXG4gIGNyZWF0ZShcbiAgICBldmFsSWQ6IHN0cmluZyxcbiAgICBib2R5OiBSdW5DcmVhdGVQYXJhbXMsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuQVBJUHJvbWlzZTxSdW5DcmVhdGVSZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL2V2YWxzLyR7ZXZhbElkfS9ydW5zYCwgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbiBldmFsdWF0aW9uIHJ1biBieSBJRC5cbiAgICovXG4gIHJldHJpZXZlKFxuICAgIGV2YWxJZDogc3RyaW5nLFxuICAgIHJ1bklkOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuQVBJUHJvbWlzZTxSdW5SZXRyaWV2ZVJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC9ldmFscy8ke2V2YWxJZH0vcnVucy8ke3J1bklkfWAsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIGxpc3Qgb2YgcnVucyBmb3IgYW4gZXZhbHVhdGlvbi5cbiAgICovXG4gIGxpc3QoXG4gICAgZXZhbElkOiBzdHJpbmcsXG4gICAgcXVlcnk/OiBSdW5MaXN0UGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLlBhZ2VQcm9taXNlPFJ1bkxpc3RSZXNwb25zZXNQYWdlLCBSdW5MaXN0UmVzcG9uc2U+O1xuICBsaXN0KFxuICAgIGV2YWxJZDogc3RyaW5nLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLlBhZ2VQcm9taXNlPFJ1bkxpc3RSZXNwb25zZXNQYWdlLCBSdW5MaXN0UmVzcG9uc2U+O1xuICBsaXN0KFxuICAgIGV2YWxJZDogc3RyaW5nLFxuICAgIHF1ZXJ5OiBSdW5MaXN0UGFyYW1zIHwgQ29yZS5SZXF1ZXN0T3B0aW9ucyA9IHt9LFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLlBhZ2VQcm9taXNlPFJ1bkxpc3RSZXNwb25zZXNQYWdlLCBSdW5MaXN0UmVzcG9uc2U+IHtcbiAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmxpc3QoZXZhbElkLCB7fSwgcXVlcnkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoYC9ldmFscy8ke2V2YWxJZH0vcnVuc2AsIFJ1bkxpc3RSZXNwb25zZXNQYWdlLCB7IHF1ZXJ5LCAuLi5vcHRpb25zIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhbiBldmFsIHJ1bi5cbiAgICovXG4gIGRlbChldmFsSWQ6IHN0cmluZywgcnVuSWQ6IHN0cmluZywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkFQSVByb21pc2U8UnVuRGVsZXRlUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmRlbGV0ZShgL2V2YWxzLyR7ZXZhbElkfS9ydW5zLyR7cnVuSWR9YCwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VsIGFuIG9uZ29pbmcgZXZhbHVhdGlvbiBydW4uXG4gICAqL1xuICBjYW5jZWwoZXZhbElkOiBzdHJpbmcsIHJ1bklkOiBzdHJpbmcsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5BUElQcm9taXNlPFJ1bkNhbmNlbFJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvZXZhbHMvJHtldmFsSWR9L3J1bnMvJHtydW5JZH1gLCBvcHRpb25zKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUnVuTGlzdFJlc3BvbnNlc1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlPFJ1bkxpc3RSZXNwb25zZT4ge31cblxuLyoqXG4gKiBBIENvbXBsZXRpb25zUnVuRGF0YVNvdXJjZSBvYmplY3QgZGVzY3JpYmluZyBhIG1vZGVsIHNhbXBsaW5nIGNvbmZpZ3VyYXRpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlRXZhbENvbXBsZXRpb25zUnVuRGF0YVNvdXJjZSB7XG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoYXQgcG9wdWxhdGVzIHRoZSBgaXRlbWAgbmFtZXNwYWNlIGluIHRoaXMgcnVuJ3MgZGF0YSBzb3VyY2UuXG4gICAqL1xuICBzb3VyY2U6XG4gICAgfCBDcmVhdGVFdmFsQ29tcGxldGlvbnNSdW5EYXRhU291cmNlLkZpbGVDb250ZW50XG4gICAgfCBDcmVhdGVFdmFsQ29tcGxldGlvbnNSdW5EYXRhU291cmNlLkZpbGVJRFxuICAgIHwgQ3JlYXRlRXZhbENvbXBsZXRpb25zUnVuRGF0YVNvdXJjZS5TdG9yZWRDb21wbGV0aW9ucztcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgcnVuIGRhdGEgc291cmNlLiBBbHdheXMgYGNvbXBsZXRpb25zYC5cbiAgICovXG4gIHR5cGU6ICdjb21wbGV0aW9ucyc7XG5cbiAgLyoqXG4gICAqIFVzZWQgd2hlbiBzYW1wbGluZyBmcm9tIGEgbW9kZWwuIERpY3RhdGVzIHRoZSBzdHJ1Y3R1cmUgb2YgdGhlIG1lc3NhZ2VzIHBhc3NlZFxuICAgKiBpbnRvIHRoZSBtb2RlbC4gQ2FuIGVpdGhlciBiZSBhIHJlZmVyZW5jZSB0byBhIHByZWJ1aWx0IHRyYWplY3RvcnkgKGllLFxuICAgKiBgaXRlbS5pbnB1dF90cmFqZWN0b3J5YCksIG9yIGEgdGVtcGxhdGUgd2l0aCB2YXJpYWJsZSByZWZlcmVuY2VzIHRvIHRoZSBgaXRlbWBcbiAgICogbmFtZXNwYWNlLlxuICAgKi9cbiAgaW5wdXRfbWVzc2FnZXM/OlxuICAgIHwgQ3JlYXRlRXZhbENvbXBsZXRpb25zUnVuRGF0YVNvdXJjZS5UZW1wbGF0ZVxuICAgIHwgQ3JlYXRlRXZhbENvbXBsZXRpb25zUnVuRGF0YVNvdXJjZS5JdGVtUmVmZXJlbmNlO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgbW9kZWwgdG8gdXNlIGZvciBnZW5lcmF0aW5nIGNvbXBsZXRpb25zIChlLmcuIFwibzMtbWluaVwiKS5cbiAgICovXG4gIG1vZGVsPzogc3RyaW5nO1xuXG4gIHNhbXBsaW5nX3BhcmFtcz86IENyZWF0ZUV2YWxDb21wbGV0aW9uc1J1bkRhdGFTb3VyY2UuU2FtcGxpbmdQYXJhbXM7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ3JlYXRlRXZhbENvbXBsZXRpb25zUnVuRGF0YVNvdXJjZSB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgRmlsZUNvbnRlbnQge1xuICAgIC8qKlxuICAgICAqIFRoZSBjb250ZW50IG9mIHRoZSBqc29ubCBmaWxlLlxuICAgICAqL1xuICAgIGNvbnRlbnQ6IEFycmF5PEZpbGVDb250ZW50LkNvbnRlbnQ+O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YganNvbmwgc291cmNlLiBBbHdheXMgYGZpbGVfY29udGVudGAuXG4gICAgICovXG4gICAgdHlwZTogJ2ZpbGVfY29udGVudCc7XG4gIH1cblxuICBleHBvcnQgbmFtZXNwYWNlIEZpbGVDb250ZW50IHtcbiAgICBleHBvcnQgaW50ZXJmYWNlIENvbnRlbnQge1xuICAgICAgaXRlbTogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG5cbiAgICAgIHNhbXBsZT86IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgRmlsZUlEIHtcbiAgICAvKipcbiAgICAgKiBUaGUgaWRlbnRpZmllciBvZiB0aGUgZmlsZS5cbiAgICAgKi9cbiAgICBpZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YganNvbmwgc291cmNlLiBBbHdheXMgYGZpbGVfaWRgLlxuICAgICAqL1xuICAgIHR5cGU6ICdmaWxlX2lkJztcbiAgfVxuXG4gIC8qKlxuICAgKiBBIFN0b3JlZENvbXBsZXRpb25zUnVuRGF0YVNvdXJjZSBjb25maWd1cmF0aW9uIGRlc2NyaWJpbmcgYSBzZXQgb2YgZmlsdGVyc1xuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBTdG9yZWRDb21wbGV0aW9ucyB7XG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2Ygc291cmNlLiBBbHdheXMgYHN0b3JlZF9jb21wbGV0aW9uc2AuXG4gICAgICovXG4gICAgdHlwZTogJ3N0b3JlZF9jb21wbGV0aW9ucyc7XG5cbiAgICAvKipcbiAgICAgKiBBbiBvcHRpb25hbCBVbml4IHRpbWVzdGFtcCB0byBmaWx0ZXIgaXRlbXMgY3JlYXRlZCBhZnRlciB0aGlzIHRpbWUuXG4gICAgICovXG4gICAgY3JlYXRlZF9hZnRlcj86IG51bWJlciB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBBbiBvcHRpb25hbCBVbml4IHRpbWVzdGFtcCB0byBmaWx0ZXIgaXRlbXMgY3JlYXRlZCBiZWZvcmUgdGhpcyB0aW1lLlxuICAgICAqL1xuICAgIGNyZWF0ZWRfYmVmb3JlPzogbnVtYmVyIHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEFuIG9wdGlvbmFsIG1heGltdW0gbnVtYmVyIG9mIGl0ZW1zIHRvIHJldHVybi5cbiAgICAgKi9cbiAgICBsaW1pdD86IG51bWJlciB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAgICogZm9yIHN0b3JpbmcgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb2JqZWN0IGluIGEgc3RydWN0dXJlZCBmb3JtYXQsIGFuZFxuICAgICAqIHF1ZXJ5aW5nIGZvciBvYmplY3RzIHZpYSBBUEkgb3IgdGhlIGRhc2hib2FyZC5cbiAgICAgKlxuICAgICAqIEtleXMgYXJlIHN0cmluZ3Mgd2l0aCBhIG1heGltdW0gbGVuZ3RoIG9mIDY0IGNoYXJhY3RlcnMuIFZhbHVlcyBhcmUgc3RyaW5ncyB3aXRoXG4gICAgICogYSBtYXhpbXVtIGxlbmd0aCBvZiA1MTIgY2hhcmFjdGVycy5cbiAgICAgKi9cbiAgICBtZXRhZGF0YT86IFNoYXJlZC5NZXRhZGF0YSB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBBbiBvcHRpb25hbCBtb2RlbCB0byBmaWx0ZXIgYnkgKGUuZy4sICdncHQtNG8nKS5cbiAgICAgKi9cbiAgICBtb2RlbD86IHN0cmluZyB8IG51bGw7XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIFRlbXBsYXRlIHtcbiAgICAvKipcbiAgICAgKiBBIGxpc3Qgb2YgY2hhdCBtZXNzYWdlcyBmb3JtaW5nIHRoZSBwcm9tcHQgb3IgY29udGV4dC4gTWF5IGluY2x1ZGUgdmFyaWFibGVcbiAgICAgKiByZWZlcmVuY2VzIHRvIHRoZSBgaXRlbWAgbmFtZXNwYWNlLCBpZSB7e2l0ZW0ubmFtZX19LlxuICAgICAqL1xuICAgIHRlbXBsYXRlOiBBcnJheTxSZXNwb25zZXNBUEkuRWFzeUlucHV0TWVzc2FnZSB8IFRlbXBsYXRlLk1lc3NhZ2U+O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgaW5wdXQgbWVzc2FnZXMuIEFsd2F5cyBgdGVtcGxhdGVgLlxuICAgICAqL1xuICAgIHR5cGU6ICd0ZW1wbGF0ZSc7XG4gIH1cblxuICBleHBvcnQgbmFtZXNwYWNlIFRlbXBsYXRlIHtcbiAgICAvKipcbiAgICAgKiBBIG1lc3NhZ2UgaW5wdXQgdG8gdGhlIG1vZGVsIHdpdGggYSByb2xlIGluZGljYXRpbmcgaW5zdHJ1Y3Rpb24gZm9sbG93aW5nXG4gICAgICogaGllcmFyY2h5LiBJbnN0cnVjdGlvbnMgZ2l2ZW4gd2l0aCB0aGUgYGRldmVsb3BlcmAgb3IgYHN5c3RlbWAgcm9sZSB0YWtlXG4gICAgICogcHJlY2VkZW5jZSBvdmVyIGluc3RydWN0aW9ucyBnaXZlbiB3aXRoIHRoZSBgdXNlcmAgcm9sZS4gTWVzc2FnZXMgd2l0aCB0aGVcbiAgICAgKiBgYXNzaXN0YW50YCByb2xlIGFyZSBwcmVzdW1lZCB0byBoYXZlIGJlZW4gZ2VuZXJhdGVkIGJ5IHRoZSBtb2RlbCBpbiBwcmV2aW91c1xuICAgICAqIGludGVyYWN0aW9ucy5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2Uge1xuICAgICAgLyoqXG4gICAgICAgKiBUZXh0IGlucHV0cyB0byB0aGUgbW9kZWwgLSBjYW4gY29udGFpbiB0ZW1wbGF0ZSBzdHJpbmdzLlxuICAgICAgICovXG4gICAgICBjb250ZW50OiBzdHJpbmcgfCBSZXNwb25zZXNBUEkuUmVzcG9uc2VJbnB1dFRleHQgfCBNZXNzYWdlLk91dHB1dFRleHQ7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHJvbGUgb2YgdGhlIG1lc3NhZ2UgaW5wdXQuIE9uZSBvZiBgdXNlcmAsIGBhc3Npc3RhbnRgLCBgc3lzdGVtYCwgb3JcbiAgICAgICAqIGBkZXZlbG9wZXJgLlxuICAgICAgICovXG4gICAgICByb2xlOiAndXNlcicgfCAnYXNzaXN0YW50JyB8ICdzeXN0ZW0nIHwgJ2RldmVsb3Blcic7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHR5cGUgb2YgdGhlIG1lc3NhZ2UgaW5wdXQuIEFsd2F5cyBgbWVzc2FnZWAuXG4gICAgICAgKi9cbiAgICAgIHR5cGU/OiAnbWVzc2FnZSc7XG4gICAgfVxuXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBNZXNzYWdlIHtcbiAgICAgIC8qKlxuICAgICAgICogQSB0ZXh0IG91dHB1dCBmcm9tIHRoZSBtb2RlbC5cbiAgICAgICAqL1xuICAgICAgZXhwb3J0IGludGVyZmFjZSBPdXRwdXRUZXh0IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB0ZXh0IG91dHB1dCBmcm9tIHRoZSBtb2RlbC5cbiAgICAgICAgICovXG4gICAgICAgIHRleHQ6IHN0cmluZztcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHR5cGUgb2YgdGhlIG91dHB1dCB0ZXh0LiBBbHdheXMgYG91dHB1dF90ZXh0YC5cbiAgICAgICAgICovXG4gICAgICAgIHR5cGU6ICdvdXRwdXRfdGV4dCc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBJdGVtUmVmZXJlbmNlIHtcbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSB0byBhIHZhcmlhYmxlIGluIHRoZSBgaXRlbWAgbmFtZXNwYWNlLiBJZSwgXCJpdGVtLmlucHV0X3RyYWplY3RvcnlcIlxuICAgICAqL1xuICAgIGl0ZW1fcmVmZXJlbmNlOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiBpbnB1dCBtZXNzYWdlcy4gQWx3YXlzIGBpdGVtX3JlZmVyZW5jZWAuXG4gICAgICovXG4gICAgdHlwZTogJ2l0ZW1fcmVmZXJlbmNlJztcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgU2FtcGxpbmdQYXJhbXMge1xuICAgIC8qKlxuICAgICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiB0b2tlbnMgaW4gdGhlIGdlbmVyYXRlZCBvdXRwdXQuXG4gICAgICovXG4gICAgbWF4X2NvbXBsZXRpb25fdG9rZW5zPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogQSBzZWVkIHZhbHVlIHRvIGluaXRpYWxpemUgdGhlIHJhbmRvbW5lc3MsIGR1cmluZyBzYW1wbGluZy5cbiAgICAgKi9cbiAgICBzZWVkPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogQSBoaWdoZXIgdGVtcGVyYXR1cmUgaW5jcmVhc2VzIHJhbmRvbW5lc3MgaW4gdGhlIG91dHB1dHMuXG4gICAgICovXG4gICAgdGVtcGVyYXR1cmU/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhbHRlcm5hdGl2ZSB0byB0ZW1wZXJhdHVyZSBmb3IgbnVjbGV1cyBzYW1wbGluZzsgMS4wIGluY2x1ZGVzIGFsbCB0b2tlbnMuXG4gICAgICovXG4gICAgdG9wX3A/OiBudW1iZXI7XG4gIH1cbn1cblxuLyoqXG4gKiBBIEpzb25sUnVuRGF0YVNvdXJjZSBvYmplY3Qgd2l0aCB0aGF0IHNwZWNpZmllcyBhIEpTT05MIGZpbGUgdGhhdCBtYXRjaGVzIHRoZVxuICogZXZhbFxuICovXG5leHBvcnQgaW50ZXJmYWNlIENyZWF0ZUV2YWxKU09OTFJ1bkRhdGFTb3VyY2Uge1xuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGF0IHBvcHVsYXRlcyB0aGUgYGl0ZW1gIG5hbWVzcGFjZSBpbiB0aGUgZGF0YSBzb3VyY2UuXG4gICAqL1xuICBzb3VyY2U6IENyZWF0ZUV2YWxKU09OTFJ1bkRhdGFTb3VyY2UuRmlsZUNvbnRlbnQgfCBDcmVhdGVFdmFsSlNPTkxSdW5EYXRhU291cmNlLkZpbGVJRDtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgZGF0YSBzb3VyY2UuIEFsd2F5cyBganNvbmxgLlxuICAgKi9cbiAgdHlwZTogJ2pzb25sJztcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBDcmVhdGVFdmFsSlNPTkxSdW5EYXRhU291cmNlIHtcbiAgZXhwb3J0IGludGVyZmFjZSBGaWxlQ29udGVudCB7XG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGpzb25sIGZpbGUuXG4gICAgICovXG4gICAgY29udGVudDogQXJyYXk8RmlsZUNvbnRlbnQuQ29udGVudD47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiBqc29ubCBzb3VyY2UuIEFsd2F5cyBgZmlsZV9jb250ZW50YC5cbiAgICAgKi9cbiAgICB0eXBlOiAnZmlsZV9jb250ZW50JztcbiAgfVxuXG4gIGV4cG9ydCBuYW1lc3BhY2UgRmlsZUNvbnRlbnQge1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29udGVudCB7XG4gICAgICBpdGVtOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcblxuICAgICAgc2FtcGxlPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBGaWxlSUQge1xuICAgIC8qKlxuICAgICAqIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBmaWxlLlxuICAgICAqL1xuICAgIGlkOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiBqc29ubCBzb3VyY2UuIEFsd2F5cyBgZmlsZV9pZGAuXG4gICAgICovXG4gICAgdHlwZTogJ2ZpbGVfaWQnO1xuICB9XG59XG5cbi8qKlxuICogQW4gb2JqZWN0IHJlcHJlc2VudGluZyBhbiBlcnJvciByZXNwb25zZSBmcm9tIHRoZSBFdmFsIEFQSS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFdmFsQVBJRXJyb3Ige1xuICAvKipcbiAgICogVGhlIGVycm9yIGNvZGUuXG4gICAqL1xuICBjb2RlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBlcnJvciBtZXNzYWdlLlxuICAgKi9cbiAgbWVzc2FnZTogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgc2NoZW1hIHJlcHJlc2VudGluZyBhbiBldmFsdWF0aW9uIHJ1bi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSdW5DcmVhdGVSZXNwb25zZSB7XG4gIC8qKlxuICAgKiBVbmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGV2YWx1YXRpb24gcnVuLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpIHdoZW4gdGhlIGV2YWx1YXRpb24gcnVuIHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZF9hdDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgcnVuJ3MgZGF0YSBzb3VyY2UuXG4gICAqL1xuICBkYXRhX3NvdXJjZTpcbiAgICB8IENyZWF0ZUV2YWxKU09OTFJ1bkRhdGFTb3VyY2VcbiAgICB8IENyZWF0ZUV2YWxDb21wbGV0aW9uc1J1bkRhdGFTb3VyY2VcbiAgICB8IFJ1bkNyZWF0ZVJlc3BvbnNlLlJlc3BvbnNlcztcblxuICAvKipcbiAgICogQW4gb2JqZWN0IHJlcHJlc2VudGluZyBhbiBlcnJvciByZXNwb25zZSBmcm9tIHRoZSBFdmFsIEFQSS5cbiAgICovXG4gIGVycm9yOiBFdmFsQVBJRXJyb3I7XG5cbiAgLyoqXG4gICAqIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBhc3NvY2lhdGVkIGV2YWx1YXRpb24uXG4gICAqL1xuICBldmFsX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNldCBvZiAxNiBrZXktdmFsdWUgcGFpcnMgdGhhdCBjYW4gYmUgYXR0YWNoZWQgdG8gYW4gb2JqZWN0LiBUaGlzIGNhbiBiZSB1c2VmdWxcbiAgICogZm9yIHN0b3JpbmcgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb2JqZWN0IGluIGEgc3RydWN0dXJlZCBmb3JtYXQsIGFuZFxuICAgKiBxdWVyeWluZyBmb3Igb2JqZWN0cyB2aWEgQVBJIG9yIHRoZSBkYXNoYm9hcmQuXG4gICAqXG4gICAqIEtleXMgYXJlIHN0cmluZ3Mgd2l0aCBhIG1heGltdW0gbGVuZ3RoIG9mIDY0IGNoYXJhY3RlcnMuIFZhbHVlcyBhcmUgc3RyaW5ncyB3aXRoXG4gICAqIGEgbWF4aW11bSBsZW5ndGggb2YgNTEyIGNoYXJhY3RlcnMuXG4gICAqL1xuICBtZXRhZGF0YTogU2hhcmVkLk1ldGFkYXRhIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIG1vZGVsIHRoYXQgaXMgZXZhbHVhdGVkLCBpZiBhcHBsaWNhYmxlLlxuICAgKi9cbiAgbW9kZWw6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGV2YWx1YXRpb24gcnVuLlxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgb2JqZWN0LiBBbHdheXMgXCJldmFsLnJ1blwiLlxuICAgKi9cbiAgb2JqZWN0OiAnZXZhbC5ydW4nO1xuXG4gIC8qKlxuICAgKiBVc2FnZSBzdGF0aXN0aWNzIGZvciBlYWNoIG1vZGVsIGR1cmluZyB0aGUgZXZhbHVhdGlvbiBydW4uXG4gICAqL1xuICBwZXJfbW9kZWxfdXNhZ2U6IEFycmF5PFJ1bkNyZWF0ZVJlc3BvbnNlLlBlck1vZGVsVXNhZ2U+O1xuXG4gIC8qKlxuICAgKiBSZXN1bHRzIHBlciB0ZXN0aW5nIGNyaXRlcmlhIGFwcGxpZWQgZHVyaW5nIHRoZSBldmFsdWF0aW9uIHJ1bi5cbiAgICovXG4gIHBlcl90ZXN0aW5nX2NyaXRlcmlhX3Jlc3VsdHM6IEFycmF5PFJ1bkNyZWF0ZVJlc3BvbnNlLlBlclRlc3RpbmdDcml0ZXJpYVJlc3VsdD47XG5cbiAgLyoqXG4gICAqIFRoZSBVUkwgdG8gdGhlIHJlbmRlcmVkIGV2YWx1YXRpb24gcnVuIHJlcG9ydCBvbiB0aGUgVUkgZGFzaGJvYXJkLlxuICAgKi9cbiAgcmVwb3J0X3VybDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDb3VudGVycyBzdW1tYXJpemluZyB0aGUgb3V0Y29tZXMgb2YgdGhlIGV2YWx1YXRpb24gcnVuLlxuICAgKi9cbiAgcmVzdWx0X2NvdW50czogUnVuQ3JlYXRlUmVzcG9uc2UuUmVzdWx0Q291bnRzO1xuXG4gIC8qKlxuICAgKiBUaGUgc3RhdHVzIG9mIHRoZSBldmFsdWF0aW9uIHJ1bi5cbiAgICovXG4gIHN0YXR1czogc3RyaW5nO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFJ1bkNyZWF0ZVJlc3BvbnNlIHtcbiAgLyoqXG4gICAqIEEgUmVzcG9uc2VzUnVuRGF0YVNvdXJjZSBvYmplY3QgZGVzY3JpYmluZyBhIG1vZGVsIHNhbXBsaW5nIGNvbmZpZ3VyYXRpb24uXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlcyB7XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGF0IHBvcHVsYXRlcyB0aGUgYGl0ZW1gIG5hbWVzcGFjZSBpbiB0aGlzIHJ1bidzIGRhdGEgc291cmNlLlxuICAgICAqL1xuICAgIHNvdXJjZTogUmVzcG9uc2VzLkZpbGVDb250ZW50IHwgUmVzcG9uc2VzLkZpbGVJRCB8IFJlc3BvbnNlcy5SZXNwb25zZXM7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiBydW4gZGF0YSBzb3VyY2UuIEFsd2F5cyBgcmVzcG9uc2VzYC5cbiAgICAgKi9cbiAgICB0eXBlOiAncmVzcG9uc2VzJztcblxuICAgIC8qKlxuICAgICAqIFVzZWQgd2hlbiBzYW1wbGluZyBmcm9tIGEgbW9kZWwuIERpY3RhdGVzIHRoZSBzdHJ1Y3R1cmUgb2YgdGhlIG1lc3NhZ2VzIHBhc3NlZFxuICAgICAqIGludG8gdGhlIG1vZGVsLiBDYW4gZWl0aGVyIGJlIGEgcmVmZXJlbmNlIHRvIGEgcHJlYnVpbHQgdHJhamVjdG9yeSAoaWUsXG4gICAgICogYGl0ZW0uaW5wdXRfdHJhamVjdG9yeWApLCBvciBhIHRlbXBsYXRlIHdpdGggdmFyaWFibGUgcmVmZXJlbmNlcyB0byB0aGUgYGl0ZW1gXG4gICAgICogbmFtZXNwYWNlLlxuICAgICAqL1xuICAgIGlucHV0X21lc3NhZ2VzPzogUmVzcG9uc2VzLlRlbXBsYXRlIHwgUmVzcG9uc2VzLkl0ZW1SZWZlcmVuY2U7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgbW9kZWwgdG8gdXNlIGZvciBnZW5lcmF0aW5nIGNvbXBsZXRpb25zIChlLmcuIFwibzMtbWluaVwiKS5cbiAgICAgKi9cbiAgICBtb2RlbD86IHN0cmluZztcblxuICAgIHNhbXBsaW5nX3BhcmFtcz86IFJlc3BvbnNlcy5TYW1wbGluZ1BhcmFtcztcbiAgfVxuXG4gIGV4cG9ydCBuYW1lc3BhY2UgUmVzcG9uc2VzIHtcbiAgICBleHBvcnQgaW50ZXJmYWNlIEZpbGVDb250ZW50IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGpzb25sIGZpbGUuXG4gICAgICAgKi9cbiAgICAgIGNvbnRlbnQ6IEFycmF5PEZpbGVDb250ZW50LkNvbnRlbnQ+O1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSB0eXBlIG9mIGpzb25sIHNvdXJjZS4gQWx3YXlzIGBmaWxlX2NvbnRlbnRgLlxuICAgICAgICovXG4gICAgICB0eXBlOiAnZmlsZV9jb250ZW50JztcbiAgICB9XG5cbiAgICBleHBvcnQgbmFtZXNwYWNlIEZpbGVDb250ZW50IHtcbiAgICAgIGV4cG9ydCBpbnRlcmZhY2UgQ29udGVudCB7XG4gICAgICAgIGl0ZW06IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuXG4gICAgICAgIHNhbXBsZT86IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICAgICAgfVxuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRmlsZUlEIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIGlkZW50aWZpZXIgb2YgdGhlIGZpbGUuXG4gICAgICAgKi9cbiAgICAgIGlkOiBzdHJpbmc7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHR5cGUgb2YganNvbmwgc291cmNlLiBBbHdheXMgYGZpbGVfaWRgLlxuICAgICAgICovXG4gICAgICB0eXBlOiAnZmlsZV9pZCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBFdmFsUmVzcG9uc2VzU291cmNlIG9iamVjdCBkZXNjcmliaW5nIGEgcnVuIGRhdGEgc291cmNlIGNvbmZpZ3VyYXRpb24uXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZXMge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdHlwZSBvZiBydW4gZGF0YSBzb3VyY2UuIEFsd2F5cyBgcmVzcG9uc2VzYC5cbiAgICAgICAqL1xuICAgICAgdHlwZTogJ3Jlc3BvbnNlcyc7XG5cbiAgICAgIC8qKlxuICAgICAgICogT25seSBpbmNsdWRlIGl0ZW1zIGNyZWF0ZWQgYWZ0ZXIgdGhpcyB0aW1lc3RhbXAgKGluY2x1c2l2ZSkuIFRoaXMgaXMgYSBxdWVyeVxuICAgICAgICogcGFyYW1ldGVyIHVzZWQgdG8gc2VsZWN0IHJlc3BvbnNlcy5cbiAgICAgICAqL1xuICAgICAgY3JlYXRlZF9hZnRlcj86IG51bWJlciB8IG51bGw7XG5cbiAgICAgIC8qKlxuICAgICAgICogT25seSBpbmNsdWRlIGl0ZW1zIGNyZWF0ZWQgYmVmb3JlIHRoaXMgdGltZXN0YW1wIChpbmNsdXNpdmUpLiBUaGlzIGlzIGEgcXVlcnlcbiAgICAgICAqIHBhcmFtZXRlciB1c2VkIHRvIHNlbGVjdCByZXNwb25zZXMuXG4gICAgICAgKi9cbiAgICAgIGNyZWF0ZWRfYmVmb3JlPzogbnVtYmVyIHwgbnVsbDtcblxuICAgICAgLyoqXG4gICAgICAgKiBPcHRpb25hbCBzdHJpbmcgdG8gc2VhcmNoIHRoZSAnaW5zdHJ1Y3Rpb25zJyBmaWVsZC4gVGhpcyBpcyBhIHF1ZXJ5IHBhcmFtZXRlclxuICAgICAgICogdXNlZCB0byBzZWxlY3QgcmVzcG9uc2VzLlxuICAgICAgICovXG4gICAgICBpbnN0cnVjdGlvbnNfc2VhcmNoPzogc3RyaW5nIHwgbnVsbDtcblxuICAgICAgLyoqXG4gICAgICAgKiBNZXRhZGF0YSBmaWx0ZXIgZm9yIHRoZSByZXNwb25zZXMuIFRoaXMgaXMgYSBxdWVyeSBwYXJhbWV0ZXIgdXNlZCB0byBzZWxlY3RcbiAgICAgICAqIHJlc3BvbnNlcy5cbiAgICAgICAqL1xuICAgICAgbWV0YWRhdGE/OiB1bmtub3duIHwgbnVsbDtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbmFtZSBvZiB0aGUgbW9kZWwgdG8gZmluZCByZXNwb25zZXMgZm9yLiBUaGlzIGlzIGEgcXVlcnkgcGFyYW1ldGVyIHVzZWQgdG9cbiAgICAgICAqIHNlbGVjdCByZXNwb25zZXMuXG4gICAgICAgKi9cbiAgICAgIG1vZGVsPzogc3RyaW5nIHwgbnVsbDtcblxuICAgICAgLyoqXG4gICAgICAgKiBPcHRpb25hbCByZWFzb25pbmcgZWZmb3J0IHBhcmFtZXRlci4gVGhpcyBpcyBhIHF1ZXJ5IHBhcmFtZXRlciB1c2VkIHRvIHNlbGVjdFxuICAgICAgICogcmVzcG9uc2VzLlxuICAgICAgICovXG4gICAgICByZWFzb25pbmdfZWZmb3J0PzogU2hhcmVkLlJlYXNvbmluZ0VmZm9ydCB8IG51bGw7XG5cbiAgICAgIC8qKlxuICAgICAgICogU2FtcGxpbmcgdGVtcGVyYXR1cmUuIFRoaXMgaXMgYSBxdWVyeSBwYXJhbWV0ZXIgdXNlZCB0byBzZWxlY3QgcmVzcG9uc2VzLlxuICAgICAgICovXG4gICAgICB0ZW1wZXJhdHVyZT86IG51bWJlciB8IG51bGw7XG5cbiAgICAgIC8qKlxuICAgICAgICogTGlzdCBvZiB0b29sIG5hbWVzLiBUaGlzIGlzIGEgcXVlcnkgcGFyYW1ldGVyIHVzZWQgdG8gc2VsZWN0IHJlc3BvbnNlcy5cbiAgICAgICAqL1xuICAgICAgdG9vbHM/OiBBcnJheTxzdHJpbmc+IHwgbnVsbDtcblxuICAgICAgLyoqXG4gICAgICAgKiBOdWNsZXVzIHNhbXBsaW5nIHBhcmFtZXRlci4gVGhpcyBpcyBhIHF1ZXJ5IHBhcmFtZXRlciB1c2VkIHRvIHNlbGVjdCByZXNwb25zZXMuXG4gICAgICAgKi9cbiAgICAgIHRvcF9wPzogbnVtYmVyIHwgbnVsbDtcblxuICAgICAgLyoqXG4gICAgICAgKiBMaXN0IG9mIHVzZXIgaWRlbnRpZmllcnMuIFRoaXMgaXMgYSBxdWVyeSBwYXJhbWV0ZXIgdXNlZCB0byBzZWxlY3QgcmVzcG9uc2VzLlxuICAgICAgICovXG4gICAgICB1c2Vycz86IEFycmF5PHN0cmluZz4gfCBudWxsO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgVGVtcGxhdGUge1xuICAgICAgLyoqXG4gICAgICAgKiBBIGxpc3Qgb2YgY2hhdCBtZXNzYWdlcyBmb3JtaW5nIHRoZSBwcm9tcHQgb3IgY29udGV4dC4gTWF5IGluY2x1ZGUgdmFyaWFibGVcbiAgICAgICAqIHJlZmVyZW5jZXMgdG8gdGhlIGBpdGVtYCBuYW1lc3BhY2UsIGllIHt7aXRlbS5uYW1lfX0uXG4gICAgICAgKi9cbiAgICAgIHRlbXBsYXRlOiBBcnJheTxUZW1wbGF0ZS5DaGF0TWVzc2FnZSB8IFRlbXBsYXRlLkV2YWxJdGVtPjtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdHlwZSBvZiBpbnB1dCBtZXNzYWdlcy4gQWx3YXlzIGB0ZW1wbGF0ZWAuXG4gICAgICAgKi9cbiAgICAgIHR5cGU6ICd0ZW1wbGF0ZSc7XG4gICAgfVxuXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBUZW1wbGF0ZSB7XG4gICAgICBleHBvcnQgaW50ZXJmYWNlIENoYXRNZXNzYWdlIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjb250ZW50IG9mIHRoZSBtZXNzYWdlLlxuICAgICAgICAgKi9cbiAgICAgICAgY29udGVudDogc3RyaW5nO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcm9sZSBvZiB0aGUgbWVzc2FnZSAoZS5nLiBcInN5c3RlbVwiLCBcImFzc2lzdGFudFwiLCBcInVzZXJcIikuXG4gICAgICAgICAqL1xuICAgICAgICByb2xlOiBzdHJpbmc7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQSBtZXNzYWdlIGlucHV0IHRvIHRoZSBtb2RlbCB3aXRoIGEgcm9sZSBpbmRpY2F0aW5nIGluc3RydWN0aW9uIGZvbGxvd2luZ1xuICAgICAgICogaGllcmFyY2h5LiBJbnN0cnVjdGlvbnMgZ2l2ZW4gd2l0aCB0aGUgYGRldmVsb3BlcmAgb3IgYHN5c3RlbWAgcm9sZSB0YWtlXG4gICAgICAgKiBwcmVjZWRlbmNlIG92ZXIgaW5zdHJ1Y3Rpb25zIGdpdmVuIHdpdGggdGhlIGB1c2VyYCByb2xlLiBNZXNzYWdlcyB3aXRoIHRoZVxuICAgICAgICogYGFzc2lzdGFudGAgcm9sZSBhcmUgcHJlc3VtZWQgdG8gaGF2ZSBiZWVuIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwgaW4gcHJldmlvdXNcbiAgICAgICAqIGludGVyYWN0aW9ucy5cbiAgICAgICAqL1xuICAgICAgZXhwb3J0IGludGVyZmFjZSBFdmFsSXRlbSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUZXh0IGlucHV0cyB0byB0aGUgbW9kZWwgLSBjYW4gY29udGFpbiB0ZW1wbGF0ZSBzdHJpbmdzLlxuICAgICAgICAgKi9cbiAgICAgICAgY29udGVudDogc3RyaW5nIHwgUmVzcG9uc2VzQVBJLlJlc3BvbnNlSW5wdXRUZXh0IHwgRXZhbEl0ZW0uT3V0cHV0VGV4dDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHJvbGUgb2YgdGhlIG1lc3NhZ2UgaW5wdXQuIE9uZSBvZiBgdXNlcmAsIGBhc3Npc3RhbnRgLCBgc3lzdGVtYCwgb3JcbiAgICAgICAgICogYGRldmVsb3BlcmAuXG4gICAgICAgICAqL1xuICAgICAgICByb2xlOiAndXNlcicgfCAnYXNzaXN0YW50JyB8ICdzeXN0ZW0nIHwgJ2RldmVsb3Blcic7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB0eXBlIG9mIHRoZSBtZXNzYWdlIGlucHV0LiBBbHdheXMgYG1lc3NhZ2VgLlxuICAgICAgICAgKi9cbiAgICAgICAgdHlwZT86ICdtZXNzYWdlJztcbiAgICAgIH1cblxuICAgICAgZXhwb3J0IG5hbWVzcGFjZSBFdmFsSXRlbSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHRleHQgb3V0cHV0IGZyb20gdGhlIG1vZGVsLlxuICAgICAgICAgKi9cbiAgICAgICAgZXhwb3J0IGludGVyZmFjZSBPdXRwdXRUZXh0IHtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBUaGUgdGV4dCBvdXRwdXQgZnJvbSB0aGUgbW9kZWwuXG4gICAgICAgICAgICovXG4gICAgICAgICAgdGV4dDogc3RyaW5nO1xuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogVGhlIHR5cGUgb2YgdGhlIG91dHB1dCB0ZXh0LiBBbHdheXMgYG91dHB1dF90ZXh0YC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICB0eXBlOiAnb3V0cHV0X3RleHQnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBJdGVtUmVmZXJlbmNlIHtcbiAgICAgIC8qKlxuICAgICAgICogQSByZWZlcmVuY2UgdG8gYSB2YXJpYWJsZSBpbiB0aGUgYGl0ZW1gIG5hbWVzcGFjZS4gSWUsIFwiaXRlbS5uYW1lXCJcbiAgICAgICAqL1xuICAgICAgaXRlbV9yZWZlcmVuY2U6IHN0cmluZztcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdHlwZSBvZiBpbnB1dCBtZXNzYWdlcy4gQWx3YXlzIGBpdGVtX3JlZmVyZW5jZWAuXG4gICAgICAgKi9cbiAgICAgIHR5cGU6ICdpdGVtX3JlZmVyZW5jZSc7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBTYW1wbGluZ1BhcmFtcyB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiB0b2tlbnMgaW4gdGhlIGdlbmVyYXRlZCBvdXRwdXQuXG4gICAgICAgKi9cbiAgICAgIG1heF9jb21wbGV0aW9uX3Rva2Vucz86IG51bWJlcjtcblxuICAgICAgLyoqXG4gICAgICAgKiBBIHNlZWQgdmFsdWUgdG8gaW5pdGlhbGl6ZSB0aGUgcmFuZG9tbmVzcywgZHVyaW5nIHNhbXBsaW5nLlxuICAgICAgICovXG4gICAgICBzZWVkPzogbnVtYmVyO1xuXG4gICAgICAvKipcbiAgICAgICAqIEEgaGlnaGVyIHRlbXBlcmF0dXJlIGluY3JlYXNlcyByYW5kb21uZXNzIGluIHRoZSBvdXRwdXRzLlxuICAgICAgICovXG4gICAgICB0ZW1wZXJhdHVyZT86IG51bWJlcjtcblxuICAgICAgLyoqXG4gICAgICAgKiBBbiBhbHRlcm5hdGl2ZSB0byB0ZW1wZXJhdHVyZSBmb3IgbnVjbGV1cyBzYW1wbGluZzsgMS4wIGluY2x1ZGVzIGFsbCB0b2tlbnMuXG4gICAgICAgKi9cbiAgICAgIHRvcF9wPzogbnVtYmVyO1xuICAgIH1cbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgUGVyTW9kZWxVc2FnZSB7XG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiB0b2tlbnMgcmV0cmlldmVkIGZyb20gY2FjaGUuXG4gICAgICovXG4gICAgY2FjaGVkX3Rva2VuczogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBjb21wbGV0aW9uIHRva2VucyBnZW5lcmF0ZWQuXG4gICAgICovXG4gICAgY29tcGxldGlvbl90b2tlbnM6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgaW52b2NhdGlvbnMuXG4gICAgICovXG4gICAgaW52b2NhdGlvbl9jb3VudDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIG1vZGVsLlxuICAgICAqL1xuICAgIG1vZGVsX25hbWU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgcHJvbXB0IHRva2VucyB1c2VkLlxuICAgICAqL1xuICAgIHByb21wdF90b2tlbnM6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0b3RhbCBudW1iZXIgb2YgdG9rZW5zIHVzZWQuXG4gICAgICovXG4gICAgdG90YWxfdG9rZW5zOiBudW1iZXI7XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIFBlclRlc3RpbmdDcml0ZXJpYVJlc3VsdCB7XG4gICAgLyoqXG4gICAgICogTnVtYmVyIG9mIHRlc3RzIGZhaWxlZCBmb3IgdGhpcyBjcml0ZXJpYS5cbiAgICAgKi9cbiAgICBmYWlsZWQ6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIE51bWJlciBvZiB0ZXN0cyBwYXNzZWQgZm9yIHRoaXMgY3JpdGVyaWEuXG4gICAgICovXG4gICAgcGFzc2VkOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBBIGRlc2NyaXB0aW9uIG9mIHRoZSB0ZXN0aW5nIGNyaXRlcmlhLlxuICAgICAqL1xuICAgIHRlc3RpbmdfY3JpdGVyaWE6IHN0cmluZztcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3VudGVycyBzdW1tYXJpemluZyB0aGUgb3V0Y29tZXMgb2YgdGhlIGV2YWx1YXRpb24gcnVuLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBSZXN1bHRDb3VudHMge1xuICAgIC8qKlxuICAgICAqIE51bWJlciBvZiBvdXRwdXQgaXRlbXMgdGhhdCByZXN1bHRlZCBpbiBhbiBlcnJvci5cbiAgICAgKi9cbiAgICBlcnJvcmVkOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBOdW1iZXIgb2Ygb3V0cHV0IGl0ZW1zIHRoYXQgZmFpbGVkIHRvIHBhc3MgdGhlIGV2YWx1YXRpb24uXG4gICAgICovXG4gICAgZmFpbGVkOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBOdW1iZXIgb2Ygb3V0cHV0IGl0ZW1zIHRoYXQgcGFzc2VkIHRoZSBldmFsdWF0aW9uLlxuICAgICAqL1xuICAgIHBhc3NlZDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVG90YWwgbnVtYmVyIG9mIGV4ZWN1dGVkIG91dHB1dCBpdGVtcy5cbiAgICAgKi9cbiAgICB0b3RhbDogbnVtYmVyO1xuICB9XG59XG5cbi8qKlxuICogQSBzY2hlbWEgcmVwcmVzZW50aW5nIGFuIGV2YWx1YXRpb24gcnVuLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJ1blJldHJpZXZlUmVzcG9uc2Uge1xuICAvKipcbiAgICogVW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBldmFsdWF0aW9uIHJ1bi5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSB3aGVuIHRoZSBldmFsdWF0aW9uIHJ1biB3YXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWRfYXQ6IG51bWJlcjtcblxuICAvKipcbiAgICogSW5mb3JtYXRpb24gYWJvdXQgdGhlIHJ1bidzIGRhdGEgc291cmNlLlxuICAgKi9cbiAgZGF0YV9zb3VyY2U6XG4gICAgfCBDcmVhdGVFdmFsSlNPTkxSdW5EYXRhU291cmNlXG4gICAgfCBDcmVhdGVFdmFsQ29tcGxldGlvbnNSdW5EYXRhU291cmNlXG4gICAgfCBSdW5SZXRyaWV2ZVJlc3BvbnNlLlJlc3BvbnNlcztcblxuICAvKipcbiAgICogQW4gb2JqZWN0IHJlcHJlc2VudGluZyBhbiBlcnJvciByZXNwb25zZSBmcm9tIHRoZSBFdmFsIEFQSS5cbiAgICovXG4gIGVycm9yOiBFdmFsQVBJRXJyb3I7XG5cbiAgLyoqXG4gICAqIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBhc3NvY2lhdGVkIGV2YWx1YXRpb24uXG4gICAqL1xuICBldmFsX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNldCBvZiAxNiBrZXktdmFsdWUgcGFpcnMgdGhhdCBjYW4gYmUgYXR0YWNoZWQgdG8gYW4gb2JqZWN0LiBUaGlzIGNhbiBiZSB1c2VmdWxcbiAgICogZm9yIHN0b3JpbmcgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb2JqZWN0IGluIGEgc3RydWN0dXJlZCBmb3JtYXQsIGFuZFxuICAgKiBxdWVyeWluZyBmb3Igb2JqZWN0cyB2aWEgQVBJIG9yIHRoZSBkYXNoYm9hcmQuXG4gICAqXG4gICAqIEtleXMgYXJlIHN0cmluZ3Mgd2l0aCBhIG1heGltdW0gbGVuZ3RoIG9mIDY0IGNoYXJhY3RlcnMuIFZhbHVlcyBhcmUgc3RyaW5ncyB3aXRoXG4gICAqIGEgbWF4aW11bSBsZW5ndGggb2YgNTEyIGNoYXJhY3RlcnMuXG4gICAqL1xuICBtZXRhZGF0YTogU2hhcmVkLk1ldGFkYXRhIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIG1vZGVsIHRoYXQgaXMgZXZhbHVhdGVkLCBpZiBhcHBsaWNhYmxlLlxuICAgKi9cbiAgbW9kZWw6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGV2YWx1YXRpb24gcnVuLlxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgb2JqZWN0LiBBbHdheXMgXCJldmFsLnJ1blwiLlxuICAgKi9cbiAgb2JqZWN0OiAnZXZhbC5ydW4nO1xuXG4gIC8qKlxuICAgKiBVc2FnZSBzdGF0aXN0aWNzIGZvciBlYWNoIG1vZGVsIGR1cmluZyB0aGUgZXZhbHVhdGlvbiBydW4uXG4gICAqL1xuICBwZXJfbW9kZWxfdXNhZ2U6IEFycmF5PFJ1blJldHJpZXZlUmVzcG9uc2UuUGVyTW9kZWxVc2FnZT47XG5cbiAgLyoqXG4gICAqIFJlc3VsdHMgcGVyIHRlc3RpbmcgY3JpdGVyaWEgYXBwbGllZCBkdXJpbmcgdGhlIGV2YWx1YXRpb24gcnVuLlxuICAgKi9cbiAgcGVyX3Rlc3RpbmdfY3JpdGVyaWFfcmVzdWx0czogQXJyYXk8UnVuUmV0cmlldmVSZXNwb25zZS5QZXJUZXN0aW5nQ3JpdGVyaWFSZXN1bHQ+O1xuXG4gIC8qKlxuICAgKiBUaGUgVVJMIHRvIHRoZSByZW5kZXJlZCBldmFsdWF0aW9uIHJ1biByZXBvcnQgb24gdGhlIFVJIGRhc2hib2FyZC5cbiAgICovXG4gIHJlcG9ydF91cmw6IHN0cmluZztcblxuICAvKipcbiAgICogQ291bnRlcnMgc3VtbWFyaXppbmcgdGhlIG91dGNvbWVzIG9mIHRoZSBldmFsdWF0aW9uIHJ1bi5cbiAgICovXG4gIHJlc3VsdF9jb3VudHM6IFJ1blJldHJpZXZlUmVzcG9uc2UuUmVzdWx0Q291bnRzO1xuXG4gIC8qKlxuICAgKiBUaGUgc3RhdHVzIG9mIHRoZSBldmFsdWF0aW9uIHJ1bi5cbiAgICovXG4gIHN0YXR1czogc3RyaW5nO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFJ1blJldHJpZXZlUmVzcG9uc2Uge1xuICAvKipcbiAgICogQSBSZXNwb25zZXNSdW5EYXRhU291cmNlIG9iamVjdCBkZXNjcmliaW5nIGEgbW9kZWwgc2FtcGxpbmcgY29uZmlndXJhdGlvbi5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VzIHtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoYXQgcG9wdWxhdGVzIHRoZSBgaXRlbWAgbmFtZXNwYWNlIGluIHRoaXMgcnVuJ3MgZGF0YSBzb3VyY2UuXG4gICAgICovXG4gICAgc291cmNlOiBSZXNwb25zZXMuRmlsZUNvbnRlbnQgfCBSZXNwb25zZXMuRmlsZUlEIHwgUmVzcG9uc2VzLlJlc3BvbnNlcztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHJ1biBkYXRhIHNvdXJjZS4gQWx3YXlzIGByZXNwb25zZXNgLlxuICAgICAqL1xuICAgIHR5cGU6ICdyZXNwb25zZXMnO1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB3aGVuIHNhbXBsaW5nIGZyb20gYSBtb2RlbC4gRGljdGF0ZXMgdGhlIHN0cnVjdHVyZSBvZiB0aGUgbWVzc2FnZXMgcGFzc2VkXG4gICAgICogaW50byB0aGUgbW9kZWwuIENhbiBlaXRoZXIgYmUgYSByZWZlcmVuY2UgdG8gYSBwcmVidWlsdCB0cmFqZWN0b3J5IChpZSxcbiAgICAgKiBgaXRlbS5pbnB1dF90cmFqZWN0b3J5YCksIG9yIGEgdGVtcGxhdGUgd2l0aCB2YXJpYWJsZSByZWZlcmVuY2VzIHRvIHRoZSBgaXRlbWBcbiAgICAgKiBuYW1lc3BhY2UuXG4gICAgICovXG4gICAgaW5wdXRfbWVzc2FnZXM/OiBSZXNwb25zZXMuVGVtcGxhdGUgfCBSZXNwb25zZXMuSXRlbVJlZmVyZW5jZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBtb2RlbCB0byB1c2UgZm9yIGdlbmVyYXRpbmcgY29tcGxldGlvbnMgKGUuZy4gXCJvMy1taW5pXCIpLlxuICAgICAqL1xuICAgIG1vZGVsPzogc3RyaW5nO1xuXG4gICAgc2FtcGxpbmdfcGFyYW1zPzogUmVzcG9uc2VzLlNhbXBsaW5nUGFyYW1zO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBSZXNwb25zZXMge1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgRmlsZUNvbnRlbnQge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgY29udGVudCBvZiB0aGUganNvbmwgZmlsZS5cbiAgICAgICAqL1xuICAgICAgY29udGVudDogQXJyYXk8RmlsZUNvbnRlbnQuQ29udGVudD47XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHR5cGUgb2YganNvbmwgc291cmNlLiBBbHdheXMgYGZpbGVfY29udGVudGAuXG4gICAgICAgKi9cbiAgICAgIHR5cGU6ICdmaWxlX2NvbnRlbnQnO1xuICAgIH1cblxuICAgIGV4cG9ydCBuYW1lc3BhY2UgRmlsZUNvbnRlbnQge1xuICAgICAgZXhwb3J0IGludGVyZmFjZSBDb250ZW50IHtcbiAgICAgICAgaXRlbTogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG5cbiAgICAgICAgc2FtcGxlPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBGaWxlSUQge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgaWRlbnRpZmllciBvZiB0aGUgZmlsZS5cbiAgICAgICAqL1xuICAgICAgaWQ6IHN0cmluZztcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdHlwZSBvZiBqc29ubCBzb3VyY2UuIEFsd2F5cyBgZmlsZV9pZGAuXG4gICAgICAgKi9cbiAgICAgIHR5cGU6ICdmaWxlX2lkJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIEV2YWxSZXNwb25zZXNTb3VyY2Ugb2JqZWN0IGRlc2NyaWJpbmcgYSBydW4gZGF0YSBzb3VyY2UgY29uZmlndXJhdGlvbi5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlcyB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSB0eXBlIG9mIHJ1biBkYXRhIHNvdXJjZS4gQWx3YXlzIGByZXNwb25zZXNgLlxuICAgICAgICovXG4gICAgICB0eXBlOiAncmVzcG9uc2VzJztcblxuICAgICAgLyoqXG4gICAgICAgKiBPbmx5IGluY2x1ZGUgaXRlbXMgY3JlYXRlZCBhZnRlciB0aGlzIHRpbWVzdGFtcCAoaW5jbHVzaXZlKS4gVGhpcyBpcyBhIHF1ZXJ5XG4gICAgICAgKiBwYXJhbWV0ZXIgdXNlZCB0byBzZWxlY3QgcmVzcG9uc2VzLlxuICAgICAgICovXG4gICAgICBjcmVhdGVkX2FmdGVyPzogbnVtYmVyIHwgbnVsbDtcblxuICAgICAgLyoqXG4gICAgICAgKiBPbmx5IGluY2x1ZGUgaXRlbXMgY3JlYXRlZCBiZWZvcmUgdGhpcyB0aW1lc3RhbXAgKGluY2x1c2l2ZSkuIFRoaXMgaXMgYSBxdWVyeVxuICAgICAgICogcGFyYW1ldGVyIHVzZWQgdG8gc2VsZWN0IHJlc3BvbnNlcy5cbiAgICAgICAqL1xuICAgICAgY3JlYXRlZF9iZWZvcmU/OiBudW1iZXIgfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIE9wdGlvbmFsIHN0cmluZyB0byBzZWFyY2ggdGhlICdpbnN0cnVjdGlvbnMnIGZpZWxkLiBUaGlzIGlzIGEgcXVlcnkgcGFyYW1ldGVyXG4gICAgICAgKiB1c2VkIHRvIHNlbGVjdCByZXNwb25zZXMuXG4gICAgICAgKi9cbiAgICAgIGluc3RydWN0aW9uc19zZWFyY2g/OiBzdHJpbmcgfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIE1ldGFkYXRhIGZpbHRlciBmb3IgdGhlIHJlc3BvbnNlcy4gVGhpcyBpcyBhIHF1ZXJ5IHBhcmFtZXRlciB1c2VkIHRvIHNlbGVjdFxuICAgICAgICogcmVzcG9uc2VzLlxuICAgICAgICovXG4gICAgICBtZXRhZGF0YT86IHVua25vd24gfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBuYW1lIG9mIHRoZSBtb2RlbCB0byBmaW5kIHJlc3BvbnNlcyBmb3IuIFRoaXMgaXMgYSBxdWVyeSBwYXJhbWV0ZXIgdXNlZCB0b1xuICAgICAgICogc2VsZWN0IHJlc3BvbnNlcy5cbiAgICAgICAqL1xuICAgICAgbW9kZWw/OiBzdHJpbmcgfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIE9wdGlvbmFsIHJlYXNvbmluZyBlZmZvcnQgcGFyYW1ldGVyLiBUaGlzIGlzIGEgcXVlcnkgcGFyYW1ldGVyIHVzZWQgdG8gc2VsZWN0XG4gICAgICAgKiByZXNwb25zZXMuXG4gICAgICAgKi9cbiAgICAgIHJlYXNvbmluZ19lZmZvcnQ/OiBTaGFyZWQuUmVhc29uaW5nRWZmb3J0IHwgbnVsbDtcblxuICAgICAgLyoqXG4gICAgICAgKiBTYW1wbGluZyB0ZW1wZXJhdHVyZS4gVGhpcyBpcyBhIHF1ZXJ5IHBhcmFtZXRlciB1c2VkIHRvIHNlbGVjdCByZXNwb25zZXMuXG4gICAgICAgKi9cbiAgICAgIHRlbXBlcmF0dXJlPzogbnVtYmVyIHwgbnVsbDtcblxuICAgICAgLyoqXG4gICAgICAgKiBMaXN0IG9mIHRvb2wgbmFtZXMuIFRoaXMgaXMgYSBxdWVyeSBwYXJhbWV0ZXIgdXNlZCB0byBzZWxlY3QgcmVzcG9uc2VzLlxuICAgICAgICovXG4gICAgICB0b29scz86IEFycmF5PHN0cmluZz4gfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIE51Y2xldXMgc2FtcGxpbmcgcGFyYW1ldGVyLiBUaGlzIGlzIGEgcXVlcnkgcGFyYW1ldGVyIHVzZWQgdG8gc2VsZWN0IHJlc3BvbnNlcy5cbiAgICAgICAqL1xuICAgICAgdG9wX3A/OiBudW1iZXIgfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIExpc3Qgb2YgdXNlciBpZGVudGlmaWVycy4gVGhpcyBpcyBhIHF1ZXJ5IHBhcmFtZXRlciB1c2VkIHRvIHNlbGVjdCByZXNwb25zZXMuXG4gICAgICAgKi9cbiAgICAgIHVzZXJzPzogQXJyYXk8c3RyaW5nPiB8IG51bGw7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBUZW1wbGF0ZSB7XG4gICAgICAvKipcbiAgICAgICAqIEEgbGlzdCBvZiBjaGF0IG1lc3NhZ2VzIGZvcm1pbmcgdGhlIHByb21wdCBvciBjb250ZXh0LiBNYXkgaW5jbHVkZSB2YXJpYWJsZVxuICAgICAgICogcmVmZXJlbmNlcyB0byB0aGUgYGl0ZW1gIG5hbWVzcGFjZSwgaWUge3tpdGVtLm5hbWV9fS5cbiAgICAgICAqL1xuICAgICAgdGVtcGxhdGU6IEFycmF5PFRlbXBsYXRlLkNoYXRNZXNzYWdlIHwgVGVtcGxhdGUuRXZhbEl0ZW0+O1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSB0eXBlIG9mIGlucHV0IG1lc3NhZ2VzLiBBbHdheXMgYHRlbXBsYXRlYC5cbiAgICAgICAqL1xuICAgICAgdHlwZTogJ3RlbXBsYXRlJztcbiAgICB9XG5cbiAgICBleHBvcnQgbmFtZXNwYWNlIFRlbXBsYXRlIHtcbiAgICAgIGV4cG9ydCBpbnRlcmZhY2UgQ2hhdE1lc3NhZ2Uge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNvbnRlbnQgb2YgdGhlIG1lc3NhZ2UuXG4gICAgICAgICAqL1xuICAgICAgICBjb250ZW50OiBzdHJpbmc7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSByb2xlIG9mIHRoZSBtZXNzYWdlIChlLmcuIFwic3lzdGVtXCIsIFwiYXNzaXN0YW50XCIsIFwidXNlclwiKS5cbiAgICAgICAgICovXG4gICAgICAgIHJvbGU6IHN0cmluZztcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBBIG1lc3NhZ2UgaW5wdXQgdG8gdGhlIG1vZGVsIHdpdGggYSByb2xlIGluZGljYXRpbmcgaW5zdHJ1Y3Rpb24gZm9sbG93aW5nXG4gICAgICAgKiBoaWVyYXJjaHkuIEluc3RydWN0aW9ucyBnaXZlbiB3aXRoIHRoZSBgZGV2ZWxvcGVyYCBvciBgc3lzdGVtYCByb2xlIHRha2VcbiAgICAgICAqIHByZWNlZGVuY2Ugb3ZlciBpbnN0cnVjdGlvbnMgZ2l2ZW4gd2l0aCB0aGUgYHVzZXJgIHJvbGUuIE1lc3NhZ2VzIHdpdGggdGhlXG4gICAgICAgKiBgYXNzaXN0YW50YCByb2xlIGFyZSBwcmVzdW1lZCB0byBoYXZlIGJlZW4gZ2VuZXJhdGVkIGJ5IHRoZSBtb2RlbCBpbiBwcmV2aW91c1xuICAgICAgICogaW50ZXJhY3Rpb25zLlxuICAgICAgICovXG4gICAgICBleHBvcnQgaW50ZXJmYWNlIEV2YWxJdGVtIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRleHQgaW5wdXRzIHRvIHRoZSBtb2RlbCAtIGNhbiBjb250YWluIHRlbXBsYXRlIHN0cmluZ3MuXG4gICAgICAgICAqL1xuICAgICAgICBjb250ZW50OiBzdHJpbmcgfCBSZXNwb25zZXNBUEkuUmVzcG9uc2VJbnB1dFRleHQgfCBFdmFsSXRlbS5PdXRwdXRUZXh0O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcm9sZSBvZiB0aGUgbWVzc2FnZSBpbnB1dC4gT25lIG9mIGB1c2VyYCwgYGFzc2lzdGFudGAsIGBzeXN0ZW1gLCBvclxuICAgICAgICAgKiBgZGV2ZWxvcGVyYC5cbiAgICAgICAgICovXG4gICAgICAgIHJvbGU6ICd1c2VyJyB8ICdhc3Npc3RhbnQnIHwgJ3N5c3RlbScgfCAnZGV2ZWxvcGVyJztcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHR5cGUgb2YgdGhlIG1lc3NhZ2UgaW5wdXQuIEFsd2F5cyBgbWVzc2FnZWAuXG4gICAgICAgICAqL1xuICAgICAgICB0eXBlPzogJ21lc3NhZ2UnO1xuICAgICAgfVxuXG4gICAgICBleHBvcnQgbmFtZXNwYWNlIEV2YWxJdGVtIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgdGV4dCBvdXRwdXQgZnJvbSB0aGUgbW9kZWwuXG4gICAgICAgICAqL1xuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIE91dHB1dFRleHQge1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIFRoZSB0ZXh0IG91dHB1dCBmcm9tIHRoZSBtb2RlbC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICB0ZXh0OiBzdHJpbmc7XG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBUaGUgdHlwZSBvZiB0aGUgb3V0cHV0IHRleHQuIEFsd2F5cyBgb3V0cHV0X3RleHRgLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHR5cGU6ICdvdXRwdXRfdGV4dCc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIEl0ZW1SZWZlcmVuY2Uge1xuICAgICAgLyoqXG4gICAgICAgKiBBIHJlZmVyZW5jZSB0byBhIHZhcmlhYmxlIGluIHRoZSBgaXRlbWAgbmFtZXNwYWNlLiBJZSwgXCJpdGVtLm5hbWVcIlxuICAgICAgICovXG4gICAgICBpdGVtX3JlZmVyZW5jZTogc3RyaW5nO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSB0eXBlIG9mIGlucHV0IG1lc3NhZ2VzLiBBbHdheXMgYGl0ZW1fcmVmZXJlbmNlYC5cbiAgICAgICAqL1xuICAgICAgdHlwZTogJ2l0ZW1fcmVmZXJlbmNlJztcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIFNhbXBsaW5nUGFyYW1zIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHRva2VucyBpbiB0aGUgZ2VuZXJhdGVkIG91dHB1dC5cbiAgICAgICAqL1xuICAgICAgbWF4X2NvbXBsZXRpb25fdG9rZW5zPzogbnVtYmVyO1xuXG4gICAgICAvKipcbiAgICAgICAqIEEgc2VlZCB2YWx1ZSB0byBpbml0aWFsaXplIHRoZSByYW5kb21uZXNzLCBkdXJpbmcgc2FtcGxpbmcuXG4gICAgICAgKi9cbiAgICAgIHNlZWQ/OiBudW1iZXI7XG5cbiAgICAgIC8qKlxuICAgICAgICogQSBoaWdoZXIgdGVtcGVyYXR1cmUgaW5jcmVhc2VzIHJhbmRvbW5lc3MgaW4gdGhlIG91dHB1dHMuXG4gICAgICAgKi9cbiAgICAgIHRlbXBlcmF0dXJlPzogbnVtYmVyO1xuXG4gICAgICAvKipcbiAgICAgICAqIEFuIGFsdGVybmF0aXZlIHRvIHRlbXBlcmF0dXJlIGZvciBudWNsZXVzIHNhbXBsaW5nOyAxLjAgaW5jbHVkZXMgYWxsIHRva2Vucy5cbiAgICAgICAqL1xuICAgICAgdG9wX3A/OiBudW1iZXI7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBQZXJNb2RlbFVzYWdlIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIHRva2VucyByZXRyaWV2ZWQgZnJvbSBjYWNoZS5cbiAgICAgKi9cbiAgICBjYWNoZWRfdG9rZW5zOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGNvbXBsZXRpb24gdG9rZW5zIGdlbmVyYXRlZC5cbiAgICAgKi9cbiAgICBjb21wbGV0aW9uX3Rva2VuczogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBpbnZvY2F0aW9ucy5cbiAgICAgKi9cbiAgICBpbnZvY2F0aW9uX2NvdW50OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgbW9kZWwuXG4gICAgICovXG4gICAgbW9kZWxfbmFtZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBwcm9tcHQgdG9rZW5zIHVzZWQuXG4gICAgICovXG4gICAgcHJvbXB0X3Rva2VuczogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRvdGFsIG51bWJlciBvZiB0b2tlbnMgdXNlZC5cbiAgICAgKi9cbiAgICB0b3RhbF90b2tlbnM6IG51bWJlcjtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgUGVyVGVzdGluZ0NyaXRlcmlhUmVzdWx0IHtcbiAgICAvKipcbiAgICAgKiBOdW1iZXIgb2YgdGVzdHMgZmFpbGVkIGZvciB0aGlzIGNyaXRlcmlhLlxuICAgICAqL1xuICAgIGZhaWxlZDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogTnVtYmVyIG9mIHRlc3RzIHBhc3NlZCBmb3IgdGhpcyBjcml0ZXJpYS5cbiAgICAgKi9cbiAgICBwYXNzZWQ6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIEEgZGVzY3JpcHRpb24gb2YgdGhlIHRlc3RpbmcgY3JpdGVyaWEuXG4gICAgICovXG4gICAgdGVzdGluZ19jcml0ZXJpYTogc3RyaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIENvdW50ZXJzIHN1bW1hcml6aW5nIHRoZSBvdXRjb21lcyBvZiB0aGUgZXZhbHVhdGlvbiBydW4uXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFJlc3VsdENvdW50cyB7XG4gICAgLyoqXG4gICAgICogTnVtYmVyIG9mIG91dHB1dCBpdGVtcyB0aGF0IHJlc3VsdGVkIGluIGFuIGVycm9yLlxuICAgICAqL1xuICAgIGVycm9yZWQ6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIE51bWJlciBvZiBvdXRwdXQgaXRlbXMgdGhhdCBmYWlsZWQgdG8gcGFzcyB0aGUgZXZhbHVhdGlvbi5cbiAgICAgKi9cbiAgICBmYWlsZWQ6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIE51bWJlciBvZiBvdXRwdXQgaXRlbXMgdGhhdCBwYXNzZWQgdGhlIGV2YWx1YXRpb24uXG4gICAgICovXG4gICAgcGFzc2VkOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUb3RhbCBudW1iZXIgb2YgZXhlY3V0ZWQgb3V0cHV0IGl0ZW1zLlxuICAgICAqL1xuICAgIHRvdGFsOiBudW1iZXI7XG4gIH1cbn1cblxuLyoqXG4gKiBBIHNjaGVtYSByZXByZXNlbnRpbmcgYW4gZXZhbHVhdGlvbiBydW4uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUnVuTGlzdFJlc3BvbnNlIHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgZXZhbHVhdGlvbiBydW4uXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBVbml4IHRpbWVzdGFtcCAoaW4gc2Vjb25kcykgd2hlbiB0aGUgZXZhbHVhdGlvbiBydW4gd2FzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkX2F0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEluZm9ybWF0aW9uIGFib3V0IHRoZSBydW4ncyBkYXRhIHNvdXJjZS5cbiAgICovXG4gIGRhdGFfc291cmNlOiBDcmVhdGVFdmFsSlNPTkxSdW5EYXRhU291cmNlIHwgQ3JlYXRlRXZhbENvbXBsZXRpb25zUnVuRGF0YVNvdXJjZSB8IFJ1bkxpc3RSZXNwb25zZS5SZXNwb25zZXM7XG5cbiAgLyoqXG4gICAqIEFuIG9iamVjdCByZXByZXNlbnRpbmcgYW4gZXJyb3IgcmVzcG9uc2UgZnJvbSB0aGUgRXZhbCBBUEkuXG4gICAqL1xuICBlcnJvcjogRXZhbEFQSUVycm9yO1xuXG4gIC8qKlxuICAgKiBUaGUgaWRlbnRpZmllciBvZiB0aGUgYXNzb2NpYXRlZCBldmFsdWF0aW9uLlxuICAgKi9cbiAgZXZhbF9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgKlxuICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbWV0YWRhdGE6IFNoYXJlZC5NZXRhZGF0YSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBtb2RlbCB0aGF0IGlzIGV2YWx1YXRlZCwgaWYgYXBwbGljYWJsZS5cbiAgICovXG4gIG1vZGVsOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBldmFsdWF0aW9uIHJ1bi5cbiAgICovXG4gIG5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIG9iamVjdC4gQWx3YXlzIFwiZXZhbC5ydW5cIi5cbiAgICovXG4gIG9iamVjdDogJ2V2YWwucnVuJztcblxuICAvKipcbiAgICogVXNhZ2Ugc3RhdGlzdGljcyBmb3IgZWFjaCBtb2RlbCBkdXJpbmcgdGhlIGV2YWx1YXRpb24gcnVuLlxuICAgKi9cbiAgcGVyX21vZGVsX3VzYWdlOiBBcnJheTxSdW5MaXN0UmVzcG9uc2UuUGVyTW9kZWxVc2FnZT47XG5cbiAgLyoqXG4gICAqIFJlc3VsdHMgcGVyIHRlc3RpbmcgY3JpdGVyaWEgYXBwbGllZCBkdXJpbmcgdGhlIGV2YWx1YXRpb24gcnVuLlxuICAgKi9cbiAgcGVyX3Rlc3RpbmdfY3JpdGVyaWFfcmVzdWx0czogQXJyYXk8UnVuTGlzdFJlc3BvbnNlLlBlclRlc3RpbmdDcml0ZXJpYVJlc3VsdD47XG5cbiAgLyoqXG4gICAqIFRoZSBVUkwgdG8gdGhlIHJlbmRlcmVkIGV2YWx1YXRpb24gcnVuIHJlcG9ydCBvbiB0aGUgVUkgZGFzaGJvYXJkLlxuICAgKi9cbiAgcmVwb3J0X3VybDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDb3VudGVycyBzdW1tYXJpemluZyB0aGUgb3V0Y29tZXMgb2YgdGhlIGV2YWx1YXRpb24gcnVuLlxuICAgKi9cbiAgcmVzdWx0X2NvdW50czogUnVuTGlzdFJlc3BvbnNlLlJlc3VsdENvdW50cztcblxuICAvKipcbiAgICogVGhlIHN0YXR1cyBvZiB0aGUgZXZhbHVhdGlvbiBydW4uXG4gICAqL1xuICBzdGF0dXM6IHN0cmluZztcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBSdW5MaXN0UmVzcG9uc2Uge1xuICAvKipcbiAgICogQSBSZXNwb25zZXNSdW5EYXRhU291cmNlIG9iamVjdCBkZXNjcmliaW5nIGEgbW9kZWwgc2FtcGxpbmcgY29uZmlndXJhdGlvbi5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VzIHtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoYXQgcG9wdWxhdGVzIHRoZSBgaXRlbWAgbmFtZXNwYWNlIGluIHRoaXMgcnVuJ3MgZGF0YSBzb3VyY2UuXG4gICAgICovXG4gICAgc291cmNlOiBSZXNwb25zZXMuRmlsZUNvbnRlbnQgfCBSZXNwb25zZXMuRmlsZUlEIHwgUmVzcG9uc2VzLlJlc3BvbnNlcztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHJ1biBkYXRhIHNvdXJjZS4gQWx3YXlzIGByZXNwb25zZXNgLlxuICAgICAqL1xuICAgIHR5cGU6ICdyZXNwb25zZXMnO1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB3aGVuIHNhbXBsaW5nIGZyb20gYSBtb2RlbC4gRGljdGF0ZXMgdGhlIHN0cnVjdHVyZSBvZiB0aGUgbWVzc2FnZXMgcGFzc2VkXG4gICAgICogaW50byB0aGUgbW9kZWwuIENhbiBlaXRoZXIgYmUgYSByZWZlcmVuY2UgdG8gYSBwcmVidWlsdCB0cmFqZWN0b3J5IChpZSxcbiAgICAgKiBgaXRlbS5pbnB1dF90cmFqZWN0b3J5YCksIG9yIGEgdGVtcGxhdGUgd2l0aCB2YXJpYWJsZSByZWZlcmVuY2VzIHRvIHRoZSBgaXRlbWBcbiAgICAgKiBuYW1lc3BhY2UuXG4gICAgICovXG4gICAgaW5wdXRfbWVzc2FnZXM/OiBSZXNwb25zZXMuVGVtcGxhdGUgfCBSZXNwb25zZXMuSXRlbVJlZmVyZW5jZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBtb2RlbCB0byB1c2UgZm9yIGdlbmVyYXRpbmcgY29tcGxldGlvbnMgKGUuZy4gXCJvMy1taW5pXCIpLlxuICAgICAqL1xuICAgIG1vZGVsPzogc3RyaW5nO1xuXG4gICAgc2FtcGxpbmdfcGFyYW1zPzogUmVzcG9uc2VzLlNhbXBsaW5nUGFyYW1zO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBSZXNwb25zZXMge1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgRmlsZUNvbnRlbnQge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgY29udGVudCBvZiB0aGUganNvbmwgZmlsZS5cbiAgICAgICAqL1xuICAgICAgY29udGVudDogQXJyYXk8RmlsZUNvbnRlbnQuQ29udGVudD47XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHR5cGUgb2YganNvbmwgc291cmNlLiBBbHdheXMgYGZpbGVfY29udGVudGAuXG4gICAgICAgKi9cbiAgICAgIHR5cGU6ICdmaWxlX2NvbnRlbnQnO1xuICAgIH1cblxuICAgIGV4cG9ydCBuYW1lc3BhY2UgRmlsZUNvbnRlbnQge1xuICAgICAgZXhwb3J0IGludGVyZmFjZSBDb250ZW50IHtcbiAgICAgICAgaXRlbTogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG5cbiAgICAgICAgc2FtcGxlPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBGaWxlSUQge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgaWRlbnRpZmllciBvZiB0aGUgZmlsZS5cbiAgICAgICAqL1xuICAgICAgaWQ6IHN0cmluZztcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdHlwZSBvZiBqc29ubCBzb3VyY2UuIEFsd2F5cyBgZmlsZV9pZGAuXG4gICAgICAgKi9cbiAgICAgIHR5cGU6ICdmaWxlX2lkJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIEV2YWxSZXNwb25zZXNTb3VyY2Ugb2JqZWN0IGRlc2NyaWJpbmcgYSBydW4gZGF0YSBzb3VyY2UgY29uZmlndXJhdGlvbi5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlcyB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSB0eXBlIG9mIHJ1biBkYXRhIHNvdXJjZS4gQWx3YXlzIGByZXNwb25zZXNgLlxuICAgICAgICovXG4gICAgICB0eXBlOiAncmVzcG9uc2VzJztcblxuICAgICAgLyoqXG4gICAgICAgKiBPbmx5IGluY2x1ZGUgaXRlbXMgY3JlYXRlZCBhZnRlciB0aGlzIHRpbWVzdGFtcCAoaW5jbHVzaXZlKS4gVGhpcyBpcyBhIHF1ZXJ5XG4gICAgICAgKiBwYXJhbWV0ZXIgdXNlZCB0byBzZWxlY3QgcmVzcG9uc2VzLlxuICAgICAgICovXG4gICAgICBjcmVhdGVkX2FmdGVyPzogbnVtYmVyIHwgbnVsbDtcblxuICAgICAgLyoqXG4gICAgICAgKiBPbmx5IGluY2x1ZGUgaXRlbXMgY3JlYXRlZCBiZWZvcmUgdGhpcyB0aW1lc3RhbXAgKGluY2x1c2l2ZSkuIFRoaXMgaXMgYSBxdWVyeVxuICAgICAgICogcGFyYW1ldGVyIHVzZWQgdG8gc2VsZWN0IHJlc3BvbnNlcy5cbiAgICAgICAqL1xuICAgICAgY3JlYXRlZF9iZWZvcmU/OiBudW1iZXIgfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIE9wdGlvbmFsIHN0cmluZyB0byBzZWFyY2ggdGhlICdpbnN0cnVjdGlvbnMnIGZpZWxkLiBUaGlzIGlzIGEgcXVlcnkgcGFyYW1ldGVyXG4gICAgICAgKiB1c2VkIHRvIHNlbGVjdCByZXNwb25zZXMuXG4gICAgICAgKi9cbiAgICAgIGluc3RydWN0aW9uc19zZWFyY2g/OiBzdHJpbmcgfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIE1ldGFkYXRhIGZpbHRlciBmb3IgdGhlIHJlc3BvbnNlcy4gVGhpcyBpcyBhIHF1ZXJ5IHBhcmFtZXRlciB1c2VkIHRvIHNlbGVjdFxuICAgICAgICogcmVzcG9uc2VzLlxuICAgICAgICovXG4gICAgICBtZXRhZGF0YT86IHVua25vd24gfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBuYW1lIG9mIHRoZSBtb2RlbCB0byBmaW5kIHJlc3BvbnNlcyBmb3IuIFRoaXMgaXMgYSBxdWVyeSBwYXJhbWV0ZXIgdXNlZCB0b1xuICAgICAgICogc2VsZWN0IHJlc3BvbnNlcy5cbiAgICAgICAqL1xuICAgICAgbW9kZWw/OiBzdHJpbmcgfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIE9wdGlvbmFsIHJlYXNvbmluZyBlZmZvcnQgcGFyYW1ldGVyLiBUaGlzIGlzIGEgcXVlcnkgcGFyYW1ldGVyIHVzZWQgdG8gc2VsZWN0XG4gICAgICAgKiByZXNwb25zZXMuXG4gICAgICAgKi9cbiAgICAgIHJlYXNvbmluZ19lZmZvcnQ/OiBTaGFyZWQuUmVhc29uaW5nRWZmb3J0IHwgbnVsbDtcblxuICAgICAgLyoqXG4gICAgICAgKiBTYW1wbGluZyB0ZW1wZXJhdHVyZS4gVGhpcyBpcyBhIHF1ZXJ5IHBhcmFtZXRlciB1c2VkIHRvIHNlbGVjdCByZXNwb25zZXMuXG4gICAgICAgKi9cbiAgICAgIHRlbXBlcmF0dXJlPzogbnVtYmVyIHwgbnVsbDtcblxuICAgICAgLyoqXG4gICAgICAgKiBMaXN0IG9mIHRvb2wgbmFtZXMuIFRoaXMgaXMgYSBxdWVyeSBwYXJhbWV0ZXIgdXNlZCB0byBzZWxlY3QgcmVzcG9uc2VzLlxuICAgICAgICovXG4gICAgICB0b29scz86IEFycmF5PHN0cmluZz4gfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIE51Y2xldXMgc2FtcGxpbmcgcGFyYW1ldGVyLiBUaGlzIGlzIGEgcXVlcnkgcGFyYW1ldGVyIHVzZWQgdG8gc2VsZWN0IHJlc3BvbnNlcy5cbiAgICAgICAqL1xuICAgICAgdG9wX3A/OiBudW1iZXIgfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIExpc3Qgb2YgdXNlciBpZGVudGlmaWVycy4gVGhpcyBpcyBhIHF1ZXJ5IHBhcmFtZXRlciB1c2VkIHRvIHNlbGVjdCByZXNwb25zZXMuXG4gICAgICAgKi9cbiAgICAgIHVzZXJzPzogQXJyYXk8c3RyaW5nPiB8IG51bGw7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBUZW1wbGF0ZSB7XG4gICAgICAvKipcbiAgICAgICAqIEEgbGlzdCBvZiBjaGF0IG1lc3NhZ2VzIGZvcm1pbmcgdGhlIHByb21wdCBvciBjb250ZXh0LiBNYXkgaW5jbHVkZSB2YXJpYWJsZVxuICAgICAgICogcmVmZXJlbmNlcyB0byB0aGUgYGl0ZW1gIG5hbWVzcGFjZSwgaWUge3tpdGVtLm5hbWV9fS5cbiAgICAgICAqL1xuICAgICAgdGVtcGxhdGU6IEFycmF5PFRlbXBsYXRlLkNoYXRNZXNzYWdlIHwgVGVtcGxhdGUuRXZhbEl0ZW0+O1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSB0eXBlIG9mIGlucHV0IG1lc3NhZ2VzLiBBbHdheXMgYHRlbXBsYXRlYC5cbiAgICAgICAqL1xuICAgICAgdHlwZTogJ3RlbXBsYXRlJztcbiAgICB9XG5cbiAgICBleHBvcnQgbmFtZXNwYWNlIFRlbXBsYXRlIHtcbiAgICAgIGV4cG9ydCBpbnRlcmZhY2UgQ2hhdE1lc3NhZ2Uge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNvbnRlbnQgb2YgdGhlIG1lc3NhZ2UuXG4gICAgICAgICAqL1xuICAgICAgICBjb250ZW50OiBzdHJpbmc7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSByb2xlIG9mIHRoZSBtZXNzYWdlIChlLmcuIFwic3lzdGVtXCIsIFwiYXNzaXN0YW50XCIsIFwidXNlclwiKS5cbiAgICAgICAgICovXG4gICAgICAgIHJvbGU6IHN0cmluZztcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBBIG1lc3NhZ2UgaW5wdXQgdG8gdGhlIG1vZGVsIHdpdGggYSByb2xlIGluZGljYXRpbmcgaW5zdHJ1Y3Rpb24gZm9sbG93aW5nXG4gICAgICAgKiBoaWVyYXJjaHkuIEluc3RydWN0aW9ucyBnaXZlbiB3aXRoIHRoZSBgZGV2ZWxvcGVyYCBvciBgc3lzdGVtYCByb2xlIHRha2VcbiAgICAgICAqIHByZWNlZGVuY2Ugb3ZlciBpbnN0cnVjdGlvbnMgZ2l2ZW4gd2l0aCB0aGUgYHVzZXJgIHJvbGUuIE1lc3NhZ2VzIHdpdGggdGhlXG4gICAgICAgKiBgYXNzaXN0YW50YCByb2xlIGFyZSBwcmVzdW1lZCB0byBoYXZlIGJlZW4gZ2VuZXJhdGVkIGJ5IHRoZSBtb2RlbCBpbiBwcmV2aW91c1xuICAgICAgICogaW50ZXJhY3Rpb25zLlxuICAgICAgICovXG4gICAgICBleHBvcnQgaW50ZXJmYWNlIEV2YWxJdGVtIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRleHQgaW5wdXRzIHRvIHRoZSBtb2RlbCAtIGNhbiBjb250YWluIHRlbXBsYXRlIHN0cmluZ3MuXG4gICAgICAgICAqL1xuICAgICAgICBjb250ZW50OiBzdHJpbmcgfCBSZXNwb25zZXNBUEkuUmVzcG9uc2VJbnB1dFRleHQgfCBFdmFsSXRlbS5PdXRwdXRUZXh0O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcm9sZSBvZiB0aGUgbWVzc2FnZSBpbnB1dC4gT25lIG9mIGB1c2VyYCwgYGFzc2lzdGFudGAsIGBzeXN0ZW1gLCBvclxuICAgICAgICAgKiBgZGV2ZWxvcGVyYC5cbiAgICAgICAgICovXG4gICAgICAgIHJvbGU6ICd1c2VyJyB8ICdhc3Npc3RhbnQnIHwgJ3N5c3RlbScgfCAnZGV2ZWxvcGVyJztcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHR5cGUgb2YgdGhlIG1lc3NhZ2UgaW5wdXQuIEFsd2F5cyBgbWVzc2FnZWAuXG4gICAgICAgICAqL1xuICAgICAgICB0eXBlPzogJ21lc3NhZ2UnO1xuICAgICAgfVxuXG4gICAgICBleHBvcnQgbmFtZXNwYWNlIEV2YWxJdGVtIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgdGV4dCBvdXRwdXQgZnJvbSB0aGUgbW9kZWwuXG4gICAgICAgICAqL1xuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIE91dHB1dFRleHQge1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIFRoZSB0ZXh0IG91dHB1dCBmcm9tIHRoZSBtb2RlbC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICB0ZXh0OiBzdHJpbmc7XG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBUaGUgdHlwZSBvZiB0aGUgb3V0cHV0IHRleHQuIEFsd2F5cyBgb3V0cHV0X3RleHRgLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHR5cGU6ICdvdXRwdXRfdGV4dCc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIEl0ZW1SZWZlcmVuY2Uge1xuICAgICAgLyoqXG4gICAgICAgKiBBIHJlZmVyZW5jZSB0byBhIHZhcmlhYmxlIGluIHRoZSBgaXRlbWAgbmFtZXNwYWNlLiBJZSwgXCJpdGVtLm5hbWVcIlxuICAgICAgICovXG4gICAgICBpdGVtX3JlZmVyZW5jZTogc3RyaW5nO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSB0eXBlIG9mIGlucHV0IG1lc3NhZ2VzLiBBbHdheXMgYGl0ZW1fcmVmZXJlbmNlYC5cbiAgICAgICAqL1xuICAgICAgdHlwZTogJ2l0ZW1fcmVmZXJlbmNlJztcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIFNhbXBsaW5nUGFyYW1zIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHRva2VucyBpbiB0aGUgZ2VuZXJhdGVkIG91dHB1dC5cbiAgICAgICAqL1xuICAgICAgbWF4X2NvbXBsZXRpb25fdG9rZW5zPzogbnVtYmVyO1xuXG4gICAgICAvKipcbiAgICAgICAqIEEgc2VlZCB2YWx1ZSB0byBpbml0aWFsaXplIHRoZSByYW5kb21uZXNzLCBkdXJpbmcgc2FtcGxpbmcuXG4gICAgICAgKi9cbiAgICAgIHNlZWQ/OiBudW1iZXI7XG5cbiAgICAgIC8qKlxuICAgICAgICogQSBoaWdoZXIgdGVtcGVyYXR1cmUgaW5jcmVhc2VzIHJhbmRvbW5lc3MgaW4gdGhlIG91dHB1dHMuXG4gICAgICAgKi9cbiAgICAgIHRlbXBlcmF0dXJlPzogbnVtYmVyO1xuXG4gICAgICAvKipcbiAgICAgICAqIEFuIGFsdGVybmF0aXZlIHRvIHRlbXBlcmF0dXJlIGZvciBudWNsZXVzIHNhbXBsaW5nOyAxLjAgaW5jbHVkZXMgYWxsIHRva2Vucy5cbiAgICAgICAqL1xuICAgICAgdG9wX3A/OiBudW1iZXI7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBQZXJNb2RlbFVzYWdlIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIHRva2VucyByZXRyaWV2ZWQgZnJvbSBjYWNoZS5cbiAgICAgKi9cbiAgICBjYWNoZWRfdG9rZW5zOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGNvbXBsZXRpb24gdG9rZW5zIGdlbmVyYXRlZC5cbiAgICAgKi9cbiAgICBjb21wbGV0aW9uX3Rva2VuczogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBpbnZvY2F0aW9ucy5cbiAgICAgKi9cbiAgICBpbnZvY2F0aW9uX2NvdW50OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgbW9kZWwuXG4gICAgICovXG4gICAgbW9kZWxfbmFtZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBwcm9tcHQgdG9rZW5zIHVzZWQuXG4gICAgICovXG4gICAgcHJvbXB0X3Rva2VuczogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRvdGFsIG51bWJlciBvZiB0b2tlbnMgdXNlZC5cbiAgICAgKi9cbiAgICB0b3RhbF90b2tlbnM6IG51bWJlcjtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgUGVyVGVzdGluZ0NyaXRlcmlhUmVzdWx0IHtcbiAgICAvKipcbiAgICAgKiBOdW1iZXIgb2YgdGVzdHMgZmFpbGVkIGZvciB0aGlzIGNyaXRlcmlhLlxuICAgICAqL1xuICAgIGZhaWxlZDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogTnVtYmVyIG9mIHRlc3RzIHBhc3NlZCBmb3IgdGhpcyBjcml0ZXJpYS5cbiAgICAgKi9cbiAgICBwYXNzZWQ6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIEEgZGVzY3JpcHRpb24gb2YgdGhlIHRlc3RpbmcgY3JpdGVyaWEuXG4gICAgICovXG4gICAgdGVzdGluZ19jcml0ZXJpYTogc3RyaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIENvdW50ZXJzIHN1bW1hcml6aW5nIHRoZSBvdXRjb21lcyBvZiB0aGUgZXZhbHVhdGlvbiBydW4uXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFJlc3VsdENvdW50cyB7XG4gICAgLyoqXG4gICAgICogTnVtYmVyIG9mIG91dHB1dCBpdGVtcyB0aGF0IHJlc3VsdGVkIGluIGFuIGVycm9yLlxuICAgICAqL1xuICAgIGVycm9yZWQ6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIE51bWJlciBvZiBvdXRwdXQgaXRlbXMgdGhhdCBmYWlsZWQgdG8gcGFzcyB0aGUgZXZhbHVhdGlvbi5cbiAgICAgKi9cbiAgICBmYWlsZWQ6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIE51bWJlciBvZiBvdXRwdXQgaXRlbXMgdGhhdCBwYXNzZWQgdGhlIGV2YWx1YXRpb24uXG4gICAgICovXG4gICAgcGFzc2VkOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUb3RhbCBudW1iZXIgb2YgZXhlY3V0ZWQgb3V0cHV0IGl0ZW1zLlxuICAgICAqL1xuICAgIHRvdGFsOiBudW1iZXI7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBSdW5EZWxldGVSZXNwb25zZSB7XG4gIGRlbGV0ZWQ/OiBib29sZWFuO1xuXG4gIG9iamVjdD86IHN0cmluZztcblxuICBydW5faWQ/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQSBzY2hlbWEgcmVwcmVzZW50aW5nIGFuIGV2YWx1YXRpb24gcnVuLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJ1bkNhbmNlbFJlc3BvbnNlIHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgZXZhbHVhdGlvbiBydW4uXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBVbml4IHRpbWVzdGFtcCAoaW4gc2Vjb25kcykgd2hlbiB0aGUgZXZhbHVhdGlvbiBydW4gd2FzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkX2F0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEluZm9ybWF0aW9uIGFib3V0IHRoZSBydW4ncyBkYXRhIHNvdXJjZS5cbiAgICovXG4gIGRhdGFfc291cmNlOlxuICAgIHwgQ3JlYXRlRXZhbEpTT05MUnVuRGF0YVNvdXJjZVxuICAgIHwgQ3JlYXRlRXZhbENvbXBsZXRpb25zUnVuRGF0YVNvdXJjZVxuICAgIHwgUnVuQ2FuY2VsUmVzcG9uc2UuUmVzcG9uc2VzO1xuXG4gIC8qKlxuICAgKiBBbiBvYmplY3QgcmVwcmVzZW50aW5nIGFuIGVycm9yIHJlc3BvbnNlIGZyb20gdGhlIEV2YWwgQVBJLlxuICAgKi9cbiAgZXJyb3I6IEV2YWxBUElFcnJvcjtcblxuICAvKipcbiAgICogVGhlIGlkZW50aWZpZXIgb2YgdGhlIGFzc29jaWF0ZWQgZXZhbHVhdGlvbi5cbiAgICovXG4gIGV2YWxfaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdCwgYW5kXG4gICAqIHF1ZXJ5aW5nIGZvciBvYmplY3RzIHZpYSBBUEkgb3IgdGhlIGRhc2hib2FyZC5cbiAgICpcbiAgICogS2V5cyBhcmUgc3RyaW5ncyB3aXRoIGEgbWF4aW11bSBsZW5ndGggb2YgNjQgY2hhcmFjdGVycy4gVmFsdWVzIGFyZSBzdHJpbmdzIHdpdGhcbiAgICogYSBtYXhpbXVtIGxlbmd0aCBvZiA1MTIgY2hhcmFjdGVycy5cbiAgICovXG4gIG1ldGFkYXRhOiBTaGFyZWQuTWV0YWRhdGEgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgbW9kZWwgdGhhdCBpcyBldmFsdWF0ZWQsIGlmIGFwcGxpY2FibGUuXG4gICAqL1xuICBtb2RlbDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgZXZhbHVhdGlvbiBydW4uXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBvYmplY3QuIEFsd2F5cyBcImV2YWwucnVuXCIuXG4gICAqL1xuICBvYmplY3Q6ICdldmFsLnJ1bic7XG5cbiAgLyoqXG4gICAqIFVzYWdlIHN0YXRpc3RpY3MgZm9yIGVhY2ggbW9kZWwgZHVyaW5nIHRoZSBldmFsdWF0aW9uIHJ1bi5cbiAgICovXG4gIHBlcl9tb2RlbF91c2FnZTogQXJyYXk8UnVuQ2FuY2VsUmVzcG9uc2UuUGVyTW9kZWxVc2FnZT47XG5cbiAgLyoqXG4gICAqIFJlc3VsdHMgcGVyIHRlc3RpbmcgY3JpdGVyaWEgYXBwbGllZCBkdXJpbmcgdGhlIGV2YWx1YXRpb24gcnVuLlxuICAgKi9cbiAgcGVyX3Rlc3RpbmdfY3JpdGVyaWFfcmVzdWx0czogQXJyYXk8UnVuQ2FuY2VsUmVzcG9uc2UuUGVyVGVzdGluZ0NyaXRlcmlhUmVzdWx0PjtcblxuICAvKipcbiAgICogVGhlIFVSTCB0byB0aGUgcmVuZGVyZWQgZXZhbHVhdGlvbiBydW4gcmVwb3J0IG9uIHRoZSBVSSBkYXNoYm9hcmQuXG4gICAqL1xuICByZXBvcnRfdXJsOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIENvdW50ZXJzIHN1bW1hcml6aW5nIHRoZSBvdXRjb21lcyBvZiB0aGUgZXZhbHVhdGlvbiBydW4uXG4gICAqL1xuICByZXN1bHRfY291bnRzOiBSdW5DYW5jZWxSZXNwb25zZS5SZXN1bHRDb3VudHM7XG5cbiAgLyoqXG4gICAqIFRoZSBzdGF0dXMgb2YgdGhlIGV2YWx1YXRpb24gcnVuLlxuICAgKi9cbiAgc3RhdHVzOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgUnVuQ2FuY2VsUmVzcG9uc2Uge1xuICAvKipcbiAgICogQSBSZXNwb25zZXNSdW5EYXRhU291cmNlIG9iamVjdCBkZXNjcmliaW5nIGEgbW9kZWwgc2FtcGxpbmcgY29uZmlndXJhdGlvbi5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VzIHtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoYXQgcG9wdWxhdGVzIHRoZSBgaXRlbWAgbmFtZXNwYWNlIGluIHRoaXMgcnVuJ3MgZGF0YSBzb3VyY2UuXG4gICAgICovXG4gICAgc291cmNlOiBSZXNwb25zZXMuRmlsZUNvbnRlbnQgfCBSZXNwb25zZXMuRmlsZUlEIHwgUmVzcG9uc2VzLlJlc3BvbnNlcztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHJ1biBkYXRhIHNvdXJjZS4gQWx3YXlzIGByZXNwb25zZXNgLlxuICAgICAqL1xuICAgIHR5cGU6ICdyZXNwb25zZXMnO1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB3aGVuIHNhbXBsaW5nIGZyb20gYSBtb2RlbC4gRGljdGF0ZXMgdGhlIHN0cnVjdHVyZSBvZiB0aGUgbWVzc2FnZXMgcGFzc2VkXG4gICAgICogaW50byB0aGUgbW9kZWwuIENhbiBlaXRoZXIgYmUgYSByZWZlcmVuY2UgdG8gYSBwcmVidWlsdCB0cmFqZWN0b3J5IChpZSxcbiAgICAgKiBgaXRlbS5pbnB1dF90cmFqZWN0b3J5YCksIG9yIGEgdGVtcGxhdGUgd2l0aCB2YXJpYWJsZSByZWZlcmVuY2VzIHRvIHRoZSBgaXRlbWBcbiAgICAgKiBuYW1lc3BhY2UuXG4gICAgICovXG4gICAgaW5wdXRfbWVzc2FnZXM/OiBSZXNwb25zZXMuVGVtcGxhdGUgfCBSZXNwb25zZXMuSXRlbVJlZmVyZW5jZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBtb2RlbCB0byB1c2UgZm9yIGdlbmVyYXRpbmcgY29tcGxldGlvbnMgKGUuZy4gXCJvMy1taW5pXCIpLlxuICAgICAqL1xuICAgIG1vZGVsPzogc3RyaW5nO1xuXG4gICAgc2FtcGxpbmdfcGFyYW1zPzogUmVzcG9uc2VzLlNhbXBsaW5nUGFyYW1zO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBSZXNwb25zZXMge1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgRmlsZUNvbnRlbnQge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgY29udGVudCBvZiB0aGUganNvbmwgZmlsZS5cbiAgICAgICAqL1xuICAgICAgY29udGVudDogQXJyYXk8RmlsZUNvbnRlbnQuQ29udGVudD47XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHR5cGUgb2YganNvbmwgc291cmNlLiBBbHdheXMgYGZpbGVfY29udGVudGAuXG4gICAgICAgKi9cbiAgICAgIHR5cGU6ICdmaWxlX2NvbnRlbnQnO1xuICAgIH1cblxuICAgIGV4cG9ydCBuYW1lc3BhY2UgRmlsZUNvbnRlbnQge1xuICAgICAgZXhwb3J0IGludGVyZmFjZSBDb250ZW50IHtcbiAgICAgICAgaXRlbTogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG5cbiAgICAgICAgc2FtcGxlPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBGaWxlSUQge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgaWRlbnRpZmllciBvZiB0aGUgZmlsZS5cbiAgICAgICAqL1xuICAgICAgaWQ6IHN0cmluZztcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdHlwZSBvZiBqc29ubCBzb3VyY2UuIEFsd2F5cyBgZmlsZV9pZGAuXG4gICAgICAgKi9cbiAgICAgIHR5cGU6ICdmaWxlX2lkJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIEV2YWxSZXNwb25zZXNTb3VyY2Ugb2JqZWN0IGRlc2NyaWJpbmcgYSBydW4gZGF0YSBzb3VyY2UgY29uZmlndXJhdGlvbi5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlcyB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSB0eXBlIG9mIHJ1biBkYXRhIHNvdXJjZS4gQWx3YXlzIGByZXNwb25zZXNgLlxuICAgICAgICovXG4gICAgICB0eXBlOiAncmVzcG9uc2VzJztcblxuICAgICAgLyoqXG4gICAgICAgKiBPbmx5IGluY2x1ZGUgaXRlbXMgY3JlYXRlZCBhZnRlciB0aGlzIHRpbWVzdGFtcCAoaW5jbHVzaXZlKS4gVGhpcyBpcyBhIHF1ZXJ5XG4gICAgICAgKiBwYXJhbWV0ZXIgdXNlZCB0byBzZWxlY3QgcmVzcG9uc2VzLlxuICAgICAgICovXG4gICAgICBjcmVhdGVkX2FmdGVyPzogbnVtYmVyIHwgbnVsbDtcblxuICAgICAgLyoqXG4gICAgICAgKiBPbmx5IGluY2x1ZGUgaXRlbXMgY3JlYXRlZCBiZWZvcmUgdGhpcyB0aW1lc3RhbXAgKGluY2x1c2l2ZSkuIFRoaXMgaXMgYSBxdWVyeVxuICAgICAgICogcGFyYW1ldGVyIHVzZWQgdG8gc2VsZWN0IHJlc3BvbnNlcy5cbiAgICAgICAqL1xuICAgICAgY3JlYXRlZF9iZWZvcmU/OiBudW1iZXIgfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIE9wdGlvbmFsIHN0cmluZyB0byBzZWFyY2ggdGhlICdpbnN0cnVjdGlvbnMnIGZpZWxkLiBUaGlzIGlzIGEgcXVlcnkgcGFyYW1ldGVyXG4gICAgICAgKiB1c2VkIHRvIHNlbGVjdCByZXNwb25zZXMuXG4gICAgICAgKi9cbiAgICAgIGluc3RydWN0aW9uc19zZWFyY2g/OiBzdHJpbmcgfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIE1ldGFkYXRhIGZpbHRlciBmb3IgdGhlIHJlc3BvbnNlcy4gVGhpcyBpcyBhIHF1ZXJ5IHBhcmFtZXRlciB1c2VkIHRvIHNlbGVjdFxuICAgICAgICogcmVzcG9uc2VzLlxuICAgICAgICovXG4gICAgICBtZXRhZGF0YT86IHVua25vd24gfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBuYW1lIG9mIHRoZSBtb2RlbCB0byBmaW5kIHJlc3BvbnNlcyBmb3IuIFRoaXMgaXMgYSBxdWVyeSBwYXJhbWV0ZXIgdXNlZCB0b1xuICAgICAgICogc2VsZWN0IHJlc3BvbnNlcy5cbiAgICAgICAqL1xuICAgICAgbW9kZWw/OiBzdHJpbmcgfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIE9wdGlvbmFsIHJlYXNvbmluZyBlZmZvcnQgcGFyYW1ldGVyLiBUaGlzIGlzIGEgcXVlcnkgcGFyYW1ldGVyIHVzZWQgdG8gc2VsZWN0XG4gICAgICAgKiByZXNwb25zZXMuXG4gICAgICAgKi9cbiAgICAgIHJlYXNvbmluZ19lZmZvcnQ/OiBTaGFyZWQuUmVhc29uaW5nRWZmb3J0IHwgbnVsbDtcblxuICAgICAgLyoqXG4gICAgICAgKiBTYW1wbGluZyB0ZW1wZXJhdHVyZS4gVGhpcyBpcyBhIHF1ZXJ5IHBhcmFtZXRlciB1c2VkIHRvIHNlbGVjdCByZXNwb25zZXMuXG4gICAgICAgKi9cbiAgICAgIHRlbXBlcmF0dXJlPzogbnVtYmVyIHwgbnVsbDtcblxuICAgICAgLyoqXG4gICAgICAgKiBMaXN0IG9mIHRvb2wgbmFtZXMuIFRoaXMgaXMgYSBxdWVyeSBwYXJhbWV0ZXIgdXNlZCB0byBzZWxlY3QgcmVzcG9uc2VzLlxuICAgICAgICovXG4gICAgICB0b29scz86IEFycmF5PHN0cmluZz4gfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIE51Y2xldXMgc2FtcGxpbmcgcGFyYW1ldGVyLiBUaGlzIGlzIGEgcXVlcnkgcGFyYW1ldGVyIHVzZWQgdG8gc2VsZWN0IHJlc3BvbnNlcy5cbiAgICAgICAqL1xuICAgICAgdG9wX3A/OiBudW1iZXIgfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIExpc3Qgb2YgdXNlciBpZGVudGlmaWVycy4gVGhpcyBpcyBhIHF1ZXJ5IHBhcmFtZXRlciB1c2VkIHRvIHNlbGVjdCByZXNwb25zZXMuXG4gICAgICAgKi9cbiAgICAgIHVzZXJzPzogQXJyYXk8c3RyaW5nPiB8IG51bGw7XG4gICAgfVxuXG4gICAgZXhwb3J0IGludGVyZmFjZSBUZW1wbGF0ZSB7XG4gICAgICAvKipcbiAgICAgICAqIEEgbGlzdCBvZiBjaGF0IG1lc3NhZ2VzIGZvcm1pbmcgdGhlIHByb21wdCBvciBjb250ZXh0LiBNYXkgaW5jbHVkZSB2YXJpYWJsZVxuICAgICAgICogcmVmZXJlbmNlcyB0byB0aGUgYGl0ZW1gIG5hbWVzcGFjZSwgaWUge3tpdGVtLm5hbWV9fS5cbiAgICAgICAqL1xuICAgICAgdGVtcGxhdGU6IEFycmF5PFRlbXBsYXRlLkNoYXRNZXNzYWdlIHwgVGVtcGxhdGUuRXZhbEl0ZW0+O1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSB0eXBlIG9mIGlucHV0IG1lc3NhZ2VzLiBBbHdheXMgYHRlbXBsYXRlYC5cbiAgICAgICAqL1xuICAgICAgdHlwZTogJ3RlbXBsYXRlJztcbiAgICB9XG5cbiAgICBleHBvcnQgbmFtZXNwYWNlIFRlbXBsYXRlIHtcbiAgICAgIGV4cG9ydCBpbnRlcmZhY2UgQ2hhdE1lc3NhZ2Uge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNvbnRlbnQgb2YgdGhlIG1lc3NhZ2UuXG4gICAgICAgICAqL1xuICAgICAgICBjb250ZW50OiBzdHJpbmc7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSByb2xlIG9mIHRoZSBtZXNzYWdlIChlLmcuIFwic3lzdGVtXCIsIFwiYXNzaXN0YW50XCIsIFwidXNlclwiKS5cbiAgICAgICAgICovXG4gICAgICAgIHJvbGU6IHN0cmluZztcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBBIG1lc3NhZ2UgaW5wdXQgdG8gdGhlIG1vZGVsIHdpdGggYSByb2xlIGluZGljYXRpbmcgaW5zdHJ1Y3Rpb24gZm9sbG93aW5nXG4gICAgICAgKiBoaWVyYXJjaHkuIEluc3RydWN0aW9ucyBnaXZlbiB3aXRoIHRoZSBgZGV2ZWxvcGVyYCBvciBgc3lzdGVtYCByb2xlIHRha2VcbiAgICAgICAqIHByZWNlZGVuY2Ugb3ZlciBpbnN0cnVjdGlvbnMgZ2l2ZW4gd2l0aCB0aGUgYHVzZXJgIHJvbGUuIE1lc3NhZ2VzIHdpdGggdGhlXG4gICAgICAgKiBgYXNzaXN0YW50YCByb2xlIGFyZSBwcmVzdW1lZCB0byBoYXZlIGJlZW4gZ2VuZXJhdGVkIGJ5IHRoZSBtb2RlbCBpbiBwcmV2aW91c1xuICAgICAgICogaW50ZXJhY3Rpb25zLlxuICAgICAgICovXG4gICAgICBleHBvcnQgaW50ZXJmYWNlIEV2YWxJdGVtIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRleHQgaW5wdXRzIHRvIHRoZSBtb2RlbCAtIGNhbiBjb250YWluIHRlbXBsYXRlIHN0cmluZ3MuXG4gICAgICAgICAqL1xuICAgICAgICBjb250ZW50OiBzdHJpbmcgfCBSZXNwb25zZXNBUEkuUmVzcG9uc2VJbnB1dFRleHQgfCBFdmFsSXRlbS5PdXRwdXRUZXh0O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcm9sZSBvZiB0aGUgbWVzc2FnZSBpbnB1dC4gT25lIG9mIGB1c2VyYCwgYGFzc2lzdGFudGAsIGBzeXN0ZW1gLCBvclxuICAgICAgICAgKiBgZGV2ZWxvcGVyYC5cbiAgICAgICAgICovXG4gICAgICAgIHJvbGU6ICd1c2VyJyB8ICdhc3Npc3RhbnQnIHwgJ3N5c3RlbScgfCAnZGV2ZWxvcGVyJztcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHR5cGUgb2YgdGhlIG1lc3NhZ2UgaW5wdXQuIEFsd2F5cyBgbWVzc2FnZWAuXG4gICAgICAgICAqL1xuICAgICAgICB0eXBlPzogJ21lc3NhZ2UnO1xuICAgICAgfVxuXG4gICAgICBleHBvcnQgbmFtZXNwYWNlIEV2YWxJdGVtIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgdGV4dCBvdXRwdXQgZnJvbSB0aGUgbW9kZWwuXG4gICAgICAgICAqL1xuICAgICAgICBleHBvcnQgaW50ZXJmYWNlIE91dHB1dFRleHQge1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIFRoZSB0ZXh0IG91dHB1dCBmcm9tIHRoZSBtb2RlbC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICB0ZXh0OiBzdHJpbmc7XG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBUaGUgdHlwZSBvZiB0aGUgb3V0cHV0IHRleHQuIEFsd2F5cyBgb3V0cHV0X3RleHRgLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHR5cGU6ICdvdXRwdXRfdGV4dCc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIEl0ZW1SZWZlcmVuY2Uge1xuICAgICAgLyoqXG4gICAgICAgKiBBIHJlZmVyZW5jZSB0byBhIHZhcmlhYmxlIGluIHRoZSBgaXRlbWAgbmFtZXNwYWNlLiBJZSwgXCJpdGVtLm5hbWVcIlxuICAgICAgICovXG4gICAgICBpdGVtX3JlZmVyZW5jZTogc3RyaW5nO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSB0eXBlIG9mIGlucHV0IG1lc3NhZ2VzLiBBbHdheXMgYGl0ZW1fcmVmZXJlbmNlYC5cbiAgICAgICAqL1xuICAgICAgdHlwZTogJ2l0ZW1fcmVmZXJlbmNlJztcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIFNhbXBsaW5nUGFyYW1zIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHRva2VucyBpbiB0aGUgZ2VuZXJhdGVkIG91dHB1dC5cbiAgICAgICAqL1xuICAgICAgbWF4X2NvbXBsZXRpb25fdG9rZW5zPzogbnVtYmVyO1xuXG4gICAgICAvKipcbiAgICAgICAqIEEgc2VlZCB2YWx1ZSB0byBpbml0aWFsaXplIHRoZSByYW5kb21uZXNzLCBkdXJpbmcgc2FtcGxpbmcuXG4gICAgICAgKi9cbiAgICAgIHNlZWQ/OiBudW1iZXI7XG5cbiAgICAgIC8qKlxuICAgICAgICogQSBoaWdoZXIgdGVtcGVyYXR1cmUgaW5jcmVhc2VzIHJhbmRvbW5lc3MgaW4gdGhlIG91dHB1dHMuXG4gICAgICAgKi9cbiAgICAgIHRlbXBlcmF0dXJlPzogbnVtYmVyO1xuXG4gICAgICAvKipcbiAgICAgICAqIEFuIGFsdGVybmF0aXZlIHRvIHRlbXBlcmF0dXJlIGZvciBudWNsZXVzIHNhbXBsaW5nOyAxLjAgaW5jbHVkZXMgYWxsIHRva2Vucy5cbiAgICAgICAqL1xuICAgICAgdG9wX3A/OiBudW1iZXI7XG4gICAgfVxuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBQZXJNb2RlbFVzYWdlIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIHRva2VucyByZXRyaWV2ZWQgZnJvbSBjYWNoZS5cbiAgICAgKi9cbiAgICBjYWNoZWRfdG9rZW5zOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGNvbXBsZXRpb24gdG9rZW5zIGdlbmVyYXRlZC5cbiAgICAgKi9cbiAgICBjb21wbGV0aW9uX3Rva2VuczogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBpbnZvY2F0aW9ucy5cbiAgICAgKi9cbiAgICBpbnZvY2F0aW9uX2NvdW50OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgbW9kZWwuXG4gICAgICovXG4gICAgbW9kZWxfbmFtZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBwcm9tcHQgdG9rZW5zIHVzZWQuXG4gICAgICovXG4gICAgcHJvbXB0X3Rva2VuczogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRvdGFsIG51bWJlciBvZiB0b2tlbnMgdXNlZC5cbiAgICAgKi9cbiAgICB0b3RhbF90b2tlbnM6IG51bWJlcjtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgUGVyVGVzdGluZ0NyaXRlcmlhUmVzdWx0IHtcbiAgICAvKipcbiAgICAgKiBOdW1iZXIgb2YgdGVzdHMgZmFpbGVkIGZvciB0aGlzIGNyaXRlcmlhLlxuICAgICAqL1xuICAgIGZhaWxlZDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogTnVtYmVyIG9mIHRlc3RzIHBhc3NlZCBmb3IgdGhpcyBjcml0ZXJpYS5cbiAgICAgKi9cbiAgICBwYXNzZWQ6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIEEgZGVzY3JpcHRpb24gb2YgdGhlIHRlc3RpbmcgY3JpdGVyaWEuXG4gICAgICovXG4gICAgdGVzdGluZ19jcml0ZXJpYTogc3RyaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIENvdW50ZXJzIHN1bW1hcml6aW5nIHRoZSBvdXRjb21lcyBvZiB0aGUgZXZhbHVhdGlvbiBydW4uXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFJlc3VsdENvdW50cyB7XG4gICAgLyoqXG4gICAgICogTnVtYmVyIG9mIG91dHB1dCBpdGVtcyB0aGF0IHJlc3VsdGVkIGluIGFuIGVycm9yLlxuICAgICAqL1xuICAgIGVycm9yZWQ6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIE51bWJlciBvZiBvdXRwdXQgaXRlbXMgdGhhdCBmYWlsZWQgdG8gcGFzcyB0aGUgZXZhbHVhdGlvbi5cbiAgICAgKi9cbiAgICBmYWlsZWQ6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIE51bWJlciBvZiBvdXRwdXQgaXRlbXMgdGhhdCBwYXNzZWQgdGhlIGV2YWx1YXRpb24uXG4gICAgICovXG4gICAgcGFzc2VkOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUb3RhbCBudW1iZXIgb2YgZXhlY3V0ZWQgb3V0cHV0IGl0ZW1zLlxuICAgICAqL1xuICAgIHRvdGFsOiBudW1iZXI7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBSdW5DcmVhdGVQYXJhbXMge1xuICAvKipcbiAgICogRGV0YWlscyBhYm91dCB0aGUgcnVuJ3MgZGF0YSBzb3VyY2UuXG4gICAqL1xuICBkYXRhX3NvdXJjZTpcbiAgICB8IENyZWF0ZUV2YWxKU09OTFJ1bkRhdGFTb3VyY2VcbiAgICB8IENyZWF0ZUV2YWxDb21wbGV0aW9uc1J1bkRhdGFTb3VyY2VcbiAgICB8IFJ1bkNyZWF0ZVBhcmFtcy5DcmVhdGVFdmFsUmVzcG9uc2VzUnVuRGF0YVNvdXJjZTtcblxuICAvKipcbiAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdCwgYW5kXG4gICAqIHF1ZXJ5aW5nIGZvciBvYmplY3RzIHZpYSBBUEkgb3IgdGhlIGRhc2hib2FyZC5cbiAgICpcbiAgICogS2V5cyBhcmUgc3RyaW5ncyB3aXRoIGEgbWF4aW11bSBsZW5ndGggb2YgNjQgY2hhcmFjdGVycy4gVmFsdWVzIGFyZSBzdHJpbmdzIHdpdGhcbiAgICogYSBtYXhpbXVtIGxlbmd0aCBvZiA1MTIgY2hhcmFjdGVycy5cbiAgICovXG4gIG1ldGFkYXRhPzogU2hhcmVkLk1ldGFkYXRhIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIHJ1bi5cbiAgICovXG4gIG5hbWU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgUnVuQ3JlYXRlUGFyYW1zIHtcbiAgLyoqXG4gICAqIEEgUmVzcG9uc2VzUnVuRGF0YVNvdXJjZSBvYmplY3QgZGVzY3JpYmluZyBhIG1vZGVsIHNhbXBsaW5nIGNvbmZpZ3VyYXRpb24uXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIENyZWF0ZUV2YWxSZXNwb25zZXNSdW5EYXRhU291cmNlIHtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoYXQgcG9wdWxhdGVzIHRoZSBgaXRlbWAgbmFtZXNwYWNlIGluIHRoaXMgcnVuJ3MgZGF0YSBzb3VyY2UuXG4gICAgICovXG4gICAgc291cmNlOlxuICAgICAgfCBDcmVhdGVFdmFsUmVzcG9uc2VzUnVuRGF0YVNvdXJjZS5GaWxlQ29udGVudFxuICAgICAgfCBDcmVhdGVFdmFsUmVzcG9uc2VzUnVuRGF0YVNvdXJjZS5GaWxlSURcbiAgICAgIHwgQ3JlYXRlRXZhbFJlc3BvbnNlc1J1bkRhdGFTb3VyY2UuUmVzcG9uc2VzO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgcnVuIGRhdGEgc291cmNlLiBBbHdheXMgYHJlc3BvbnNlc2AuXG4gICAgICovXG4gICAgdHlwZTogJ3Jlc3BvbnNlcyc7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHdoZW4gc2FtcGxpbmcgZnJvbSBhIG1vZGVsLiBEaWN0YXRlcyB0aGUgc3RydWN0dXJlIG9mIHRoZSBtZXNzYWdlcyBwYXNzZWRcbiAgICAgKiBpbnRvIHRoZSBtb2RlbC4gQ2FuIGVpdGhlciBiZSBhIHJlZmVyZW5jZSB0byBhIHByZWJ1aWx0IHRyYWplY3RvcnkgKGllLFxuICAgICAqIGBpdGVtLmlucHV0X3RyYWplY3RvcnlgKSwgb3IgYSB0ZW1wbGF0ZSB3aXRoIHZhcmlhYmxlIHJlZmVyZW5jZXMgdG8gdGhlIGBpdGVtYFxuICAgICAqIG5hbWVzcGFjZS5cbiAgICAgKi9cbiAgICBpbnB1dF9tZXNzYWdlcz86XG4gICAgICB8IENyZWF0ZUV2YWxSZXNwb25zZXNSdW5EYXRhU291cmNlLlRlbXBsYXRlXG4gICAgICB8IENyZWF0ZUV2YWxSZXNwb25zZXNSdW5EYXRhU291cmNlLkl0ZW1SZWZlcmVuY2U7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgbW9kZWwgdG8gdXNlIGZvciBnZW5lcmF0aW5nIGNvbXBsZXRpb25zIChlLmcuIFwibzMtbWluaVwiKS5cbiAgICAgKi9cbiAgICBtb2RlbD86IHN0cmluZztcblxuICAgIHNhbXBsaW5nX3BhcmFtcz86IENyZWF0ZUV2YWxSZXNwb25zZXNSdW5EYXRhU291cmNlLlNhbXBsaW5nUGFyYW1zO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBDcmVhdGVFdmFsUmVzcG9uc2VzUnVuRGF0YVNvdXJjZSB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBGaWxlQ29udGVudCB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBjb250ZW50IG9mIHRoZSBqc29ubCBmaWxlLlxuICAgICAgICovXG4gICAgICBjb250ZW50OiBBcnJheTxGaWxlQ29udGVudC5Db250ZW50PjtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdHlwZSBvZiBqc29ubCBzb3VyY2UuIEFsd2F5cyBgZmlsZV9jb250ZW50YC5cbiAgICAgICAqL1xuICAgICAgdHlwZTogJ2ZpbGVfY29udGVudCc7XG4gICAgfVxuXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBGaWxlQ29udGVudCB7XG4gICAgICBleHBvcnQgaW50ZXJmYWNlIENvbnRlbnQge1xuICAgICAgICBpdGVtOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcblxuICAgICAgICBzYW1wbGU/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIEZpbGVJRCB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBmaWxlLlxuICAgICAgICovXG4gICAgICBpZDogc3RyaW5nO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSB0eXBlIG9mIGpzb25sIHNvdXJjZS4gQWx3YXlzIGBmaWxlX2lkYC5cbiAgICAgICAqL1xuICAgICAgdHlwZTogJ2ZpbGVfaWQnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgRXZhbFJlc3BvbnNlc1NvdXJjZSBvYmplY3QgZGVzY3JpYmluZyBhIHJ1biBkYXRhIHNvdXJjZSBjb25maWd1cmF0aW9uLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VzIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIHR5cGUgb2YgcnVuIGRhdGEgc291cmNlLiBBbHdheXMgYHJlc3BvbnNlc2AuXG4gICAgICAgKi9cbiAgICAgIHR5cGU6ICdyZXNwb25zZXMnO1xuXG4gICAgICAvKipcbiAgICAgICAqIE9ubHkgaW5jbHVkZSBpdGVtcyBjcmVhdGVkIGFmdGVyIHRoaXMgdGltZXN0YW1wIChpbmNsdXNpdmUpLiBUaGlzIGlzIGEgcXVlcnlcbiAgICAgICAqIHBhcmFtZXRlciB1c2VkIHRvIHNlbGVjdCByZXNwb25zZXMuXG4gICAgICAgKi9cbiAgICAgIGNyZWF0ZWRfYWZ0ZXI/OiBudW1iZXIgfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIE9ubHkgaW5jbHVkZSBpdGVtcyBjcmVhdGVkIGJlZm9yZSB0aGlzIHRpbWVzdGFtcCAoaW5jbHVzaXZlKS4gVGhpcyBpcyBhIHF1ZXJ5XG4gICAgICAgKiBwYXJhbWV0ZXIgdXNlZCB0byBzZWxlY3QgcmVzcG9uc2VzLlxuICAgICAgICovXG4gICAgICBjcmVhdGVkX2JlZm9yZT86IG51bWJlciB8IG51bGw7XG5cbiAgICAgIC8qKlxuICAgICAgICogT3B0aW9uYWwgc3RyaW5nIHRvIHNlYXJjaCB0aGUgJ2luc3RydWN0aW9ucycgZmllbGQuIFRoaXMgaXMgYSBxdWVyeSBwYXJhbWV0ZXJcbiAgICAgICAqIHVzZWQgdG8gc2VsZWN0IHJlc3BvbnNlcy5cbiAgICAgICAqL1xuICAgICAgaW5zdHJ1Y3Rpb25zX3NlYXJjaD86IHN0cmluZyB8IG51bGw7XG5cbiAgICAgIC8qKlxuICAgICAgICogTWV0YWRhdGEgZmlsdGVyIGZvciB0aGUgcmVzcG9uc2VzLiBUaGlzIGlzIGEgcXVlcnkgcGFyYW1ldGVyIHVzZWQgdG8gc2VsZWN0XG4gICAgICAgKiByZXNwb25zZXMuXG4gICAgICAgKi9cbiAgICAgIG1ldGFkYXRhPzogdW5rbm93biB8IG51bGw7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIG5hbWUgb2YgdGhlIG1vZGVsIHRvIGZpbmQgcmVzcG9uc2VzIGZvci4gVGhpcyBpcyBhIHF1ZXJ5IHBhcmFtZXRlciB1c2VkIHRvXG4gICAgICAgKiBzZWxlY3QgcmVzcG9uc2VzLlxuICAgICAgICovXG4gICAgICBtb2RlbD86IHN0cmluZyB8IG51bGw7XG5cbiAgICAgIC8qKlxuICAgICAgICogT3B0aW9uYWwgcmVhc29uaW5nIGVmZm9ydCBwYXJhbWV0ZXIuIFRoaXMgaXMgYSBxdWVyeSBwYXJhbWV0ZXIgdXNlZCB0byBzZWxlY3RcbiAgICAgICAqIHJlc3BvbnNlcy5cbiAgICAgICAqL1xuICAgICAgcmVhc29uaW5nX2VmZm9ydD86IFNoYXJlZC5SZWFzb25pbmdFZmZvcnQgfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIFNhbXBsaW5nIHRlbXBlcmF0dXJlLiBUaGlzIGlzIGEgcXVlcnkgcGFyYW1ldGVyIHVzZWQgdG8gc2VsZWN0IHJlc3BvbnNlcy5cbiAgICAgICAqL1xuICAgICAgdGVtcGVyYXR1cmU/OiBudW1iZXIgfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIExpc3Qgb2YgdG9vbCBuYW1lcy4gVGhpcyBpcyBhIHF1ZXJ5IHBhcmFtZXRlciB1c2VkIHRvIHNlbGVjdCByZXNwb25zZXMuXG4gICAgICAgKi9cbiAgICAgIHRvb2xzPzogQXJyYXk8c3RyaW5nPiB8IG51bGw7XG5cbiAgICAgIC8qKlxuICAgICAgICogTnVjbGV1cyBzYW1wbGluZyBwYXJhbWV0ZXIuIFRoaXMgaXMgYSBxdWVyeSBwYXJhbWV0ZXIgdXNlZCB0byBzZWxlY3QgcmVzcG9uc2VzLlxuICAgICAgICovXG4gICAgICB0b3BfcD86IG51bWJlciB8IG51bGw7XG5cbiAgICAgIC8qKlxuICAgICAgICogTGlzdCBvZiB1c2VyIGlkZW50aWZpZXJzLiBUaGlzIGlzIGEgcXVlcnkgcGFyYW1ldGVyIHVzZWQgdG8gc2VsZWN0IHJlc3BvbnNlcy5cbiAgICAgICAqL1xuICAgICAgdXNlcnM/OiBBcnJheTxzdHJpbmc+IHwgbnVsbDtcbiAgICB9XG5cbiAgICBleHBvcnQgaW50ZXJmYWNlIFRlbXBsYXRlIHtcbiAgICAgIC8qKlxuICAgICAgICogQSBsaXN0IG9mIGNoYXQgbWVzc2FnZXMgZm9ybWluZyB0aGUgcHJvbXB0IG9yIGNvbnRleHQuIE1heSBpbmNsdWRlIHZhcmlhYmxlXG4gICAgICAgKiByZWZlcmVuY2VzIHRvIHRoZSBgaXRlbWAgbmFtZXNwYWNlLCBpZSB7e2l0ZW0ubmFtZX19LlxuICAgICAgICovXG4gICAgICB0ZW1wbGF0ZTogQXJyYXk8VGVtcGxhdGUuQ2hhdE1lc3NhZ2UgfCBUZW1wbGF0ZS5FdmFsSXRlbT47XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHR5cGUgb2YgaW5wdXQgbWVzc2FnZXMuIEFsd2F5cyBgdGVtcGxhdGVgLlxuICAgICAgICovXG4gICAgICB0eXBlOiAndGVtcGxhdGUnO1xuICAgIH1cblxuICAgIGV4cG9ydCBuYW1lc3BhY2UgVGVtcGxhdGUge1xuICAgICAgZXhwb3J0IGludGVyZmFjZSBDaGF0TWVzc2FnZSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgY29udGVudCBvZiB0aGUgbWVzc2FnZS5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnRlbnQ6IHN0cmluZztcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHJvbGUgb2YgdGhlIG1lc3NhZ2UgKGUuZy4gXCJzeXN0ZW1cIiwgXCJhc3Npc3RhbnRcIiwgXCJ1c2VyXCIpLlxuICAgICAgICAgKi9cbiAgICAgICAgcm9sZTogc3RyaW5nO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEEgbWVzc2FnZSBpbnB1dCB0byB0aGUgbW9kZWwgd2l0aCBhIHJvbGUgaW5kaWNhdGluZyBpbnN0cnVjdGlvbiBmb2xsb3dpbmdcbiAgICAgICAqIGhpZXJhcmNoeS4gSW5zdHJ1Y3Rpb25zIGdpdmVuIHdpdGggdGhlIGBkZXZlbG9wZXJgIG9yIGBzeXN0ZW1gIHJvbGUgdGFrZVxuICAgICAgICogcHJlY2VkZW5jZSBvdmVyIGluc3RydWN0aW9ucyBnaXZlbiB3aXRoIHRoZSBgdXNlcmAgcm9sZS4gTWVzc2FnZXMgd2l0aCB0aGVcbiAgICAgICAqIGBhc3Npc3RhbnRgIHJvbGUgYXJlIHByZXN1bWVkIHRvIGhhdmUgYmVlbiBnZW5lcmF0ZWQgYnkgdGhlIG1vZGVsIGluIHByZXZpb3VzXG4gICAgICAgKiBpbnRlcmFjdGlvbnMuXG4gICAgICAgKi9cbiAgICAgIGV4cG9ydCBpbnRlcmZhY2UgRXZhbEl0ZW0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGV4dCBpbnB1dHMgdG8gdGhlIG1vZGVsIC0gY2FuIGNvbnRhaW4gdGVtcGxhdGUgc3RyaW5ncy5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnRlbnQ6IHN0cmluZyB8IFJlc3BvbnNlc0FQSS5SZXNwb25zZUlucHV0VGV4dCB8IEV2YWxJdGVtLk91dHB1dFRleHQ7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSByb2xlIG9mIHRoZSBtZXNzYWdlIGlucHV0LiBPbmUgb2YgYHVzZXJgLCBgYXNzaXN0YW50YCwgYHN5c3RlbWAsIG9yXG4gICAgICAgICAqIGBkZXZlbG9wZXJgLlxuICAgICAgICAgKi9cbiAgICAgICAgcm9sZTogJ3VzZXInIHwgJ2Fzc2lzdGFudCcgfCAnc3lzdGVtJyB8ICdkZXZlbG9wZXInO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdHlwZSBvZiB0aGUgbWVzc2FnZSBpbnB1dC4gQWx3YXlzIGBtZXNzYWdlYC5cbiAgICAgICAgICovXG4gICAgICAgIHR5cGU/OiAnbWVzc2FnZSc7XG4gICAgICB9XG5cbiAgICAgIGV4cG9ydCBuYW1lc3BhY2UgRXZhbEl0ZW0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQSB0ZXh0IG91dHB1dCBmcm9tIHRoZSBtb2RlbC5cbiAgICAgICAgICovXG4gICAgICAgIGV4cG9ydCBpbnRlcmZhY2UgT3V0cHV0VGV4dCB7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogVGhlIHRleHQgb3V0cHV0IGZyb20gdGhlIG1vZGVsLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHRleHQ6IHN0cmluZztcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIFRoZSB0eXBlIG9mIHRoZSBvdXRwdXQgdGV4dC4gQWx3YXlzIGBvdXRwdXRfdGV4dGAuXG4gICAgICAgICAgICovXG4gICAgICAgICAgdHlwZTogJ291dHB1dF90ZXh0JztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSXRlbVJlZmVyZW5jZSB7XG4gICAgICAvKipcbiAgICAgICAqIEEgcmVmZXJlbmNlIHRvIGEgdmFyaWFibGUgaW4gdGhlIGBpdGVtYCBuYW1lc3BhY2UuIEllLCBcIml0ZW0ubmFtZVwiXG4gICAgICAgKi9cbiAgICAgIGl0ZW1fcmVmZXJlbmNlOiBzdHJpbmc7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIHR5cGUgb2YgaW5wdXQgbWVzc2FnZXMuIEFsd2F5cyBgaXRlbV9yZWZlcmVuY2VgLlxuICAgICAgICovXG4gICAgICB0eXBlOiAnaXRlbV9yZWZlcmVuY2UnO1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgU2FtcGxpbmdQYXJhbXMge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgdG9rZW5zIGluIHRoZSBnZW5lcmF0ZWQgb3V0cHV0LlxuICAgICAgICovXG4gICAgICBtYXhfY29tcGxldGlvbl90b2tlbnM/OiBudW1iZXI7XG5cbiAgICAgIC8qKlxuICAgICAgICogQSBzZWVkIHZhbHVlIHRvIGluaXRpYWxpemUgdGhlIHJhbmRvbW5lc3MsIGR1cmluZyBzYW1wbGluZy5cbiAgICAgICAqL1xuICAgICAgc2VlZD86IG51bWJlcjtcblxuICAgICAgLyoqXG4gICAgICAgKiBBIGhpZ2hlciB0ZW1wZXJhdHVyZSBpbmNyZWFzZXMgcmFuZG9tbmVzcyBpbiB0aGUgb3V0cHV0cy5cbiAgICAgICAqL1xuICAgICAgdGVtcGVyYXR1cmU/OiBudW1iZXI7XG5cbiAgICAgIC8qKlxuICAgICAgICogQW4gYWx0ZXJuYXRpdmUgdG8gdGVtcGVyYXR1cmUgZm9yIG51Y2xldXMgc2FtcGxpbmc7IDEuMCBpbmNsdWRlcyBhbGwgdG9rZW5zLlxuICAgICAgICovXG4gICAgICB0b3BfcD86IG51bWJlcjtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBSdW5MaXN0UGFyYW1zIGV4dGVuZHMgQ3Vyc29yUGFnZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBTb3J0IG9yZGVyIGZvciBydW5zIGJ5IHRpbWVzdGFtcC4gVXNlIGBhc2NgIGZvciBhc2NlbmRpbmcgb3JkZXIgb3IgYGRlc2NgIGZvclxuICAgKiBkZXNjZW5kaW5nIG9yZGVyLiBEZWZhdWx0cyB0byBgYXNjYC5cbiAgICovXG4gIG9yZGVyPzogJ2FzYycgfCAnZGVzYyc7XG5cbiAgLyoqXG4gICAqIEZpbHRlciBydW5zIGJ5IHN0YXR1cy4gT25lIG9mIGBxdWV1ZWRgIHwgYGluX3Byb2dyZXNzYCB8IGBmYWlsZWRgIHwgYGNvbXBsZXRlZGBcbiAgICogfCBgY2FuY2VsZWRgLlxuICAgKi9cbiAgc3RhdHVzPzogJ3F1ZXVlZCcgfCAnaW5fcHJvZ3Jlc3MnIHwgJ2NvbXBsZXRlZCcgfCAnY2FuY2VsZWQnIHwgJ2ZhaWxlZCc7XG59XG5cblJ1bnMuUnVuTGlzdFJlc3BvbnNlc1BhZ2UgPSBSdW5MaXN0UmVzcG9uc2VzUGFnZTtcblJ1bnMuT3V0cHV0SXRlbXMgPSBPdXRwdXRJdGVtcztcblJ1bnMuT3V0cHV0SXRlbUxpc3RSZXNwb25zZXNQYWdlID0gT3V0cHV0SXRlbUxpc3RSZXNwb25zZXNQYWdlO1xuXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgUnVucyB7XG4gIGV4cG9ydCB7XG4gICAgdHlwZSBDcmVhdGVFdmFsQ29tcGxldGlvbnNSdW5EYXRhU291cmNlIGFzIENyZWF0ZUV2YWxDb21wbGV0aW9uc1J1bkRhdGFTb3VyY2UsXG4gICAgdHlwZSBDcmVhdGVFdmFsSlNPTkxSdW5EYXRhU291cmNlIGFzIENyZWF0ZUV2YWxKU09OTFJ1bkRhdGFTb3VyY2UsXG4gICAgdHlwZSBFdmFsQVBJRXJyb3IgYXMgRXZhbEFQSUVycm9yLFxuICAgIHR5cGUgUnVuQ3JlYXRlUmVzcG9uc2UgYXMgUnVuQ3JlYXRlUmVzcG9uc2UsXG4gICAgdHlwZSBSdW5SZXRyaWV2ZVJlc3BvbnNlIGFzIFJ1blJldHJpZXZlUmVzcG9uc2UsXG4gICAgdHlwZSBSdW5MaXN0UmVzcG9uc2UgYXMgUnVuTGlzdFJlc3BvbnNlLFxuICAgIHR5cGUgUnVuRGVsZXRlUmVzcG9uc2UgYXMgUnVuRGVsZXRlUmVzcG9uc2UsXG4gICAgdHlwZSBSdW5DYW5jZWxSZXNwb25zZSBhcyBSdW5DYW5jZWxSZXNwb25zZSxcbiAgICBSdW5MaXN0UmVzcG9uc2VzUGFnZSBhcyBSdW5MaXN0UmVzcG9uc2VzUGFnZSxcbiAgICB0eXBlIFJ1bkNyZWF0ZVBhcmFtcyBhcyBSdW5DcmVhdGVQYXJhbXMsXG4gICAgdHlwZSBSdW5MaXN0UGFyYW1zIGFzIFJ1bkxpc3RQYXJhbXMsXG4gIH07XG5cbiAgZXhwb3J0IHtcbiAgICBPdXRwdXRJdGVtcyBhcyBPdXRwdXRJdGVtcyxcbiAgICB0eXBlIE91dHB1dEl0ZW1SZXRyaWV2ZVJlc3BvbnNlIGFzIE91dHB1dEl0ZW1SZXRyaWV2ZVJlc3BvbnNlLFxuICAgIHR5cGUgT3V0cHV0SXRlbUxpc3RSZXNwb25zZSBhcyBPdXRwdXRJdGVtTGlzdFJlc3BvbnNlLFxuICAgIE91dHB1dEl0ZW1MaXN0UmVzcG9uc2VzUGFnZSBhcyBPdXRwdXRJdGVtTGlzdFJlc3BvbnNlc1BhZ2UsXG4gICAgdHlwZSBPdXRwdXRJdGVtTGlzdFBhcmFtcyBhcyBPdXRwdXRJdGVtTGlzdFBhcmFtcyxcbiAgfTtcbn1cbiIsICIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJy4uLy4uL3Jlc291cmNlJztcbmltcG9ydCB7IGlzUmVxdWVzdE9wdGlvbnMgfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCAqIGFzIENvcmUgZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyBTaGFyZWQgZnJvbSAnLi4vc2hhcmVkJztcbmltcG9ydCAqIGFzIEdyYWRlck1vZGVsc0FQSSBmcm9tICcuLi9ncmFkZXJzL2dyYWRlci1tb2RlbHMnO1xuaW1wb3J0ICogYXMgUmVzcG9uc2VzQVBJIGZyb20gJy4uL3Jlc3BvbnNlcy9yZXNwb25zZXMnO1xuaW1wb3J0ICogYXMgUnVuc0FQSSBmcm9tICcuL3J1bnMvcnVucyc7XG5pbXBvcnQge1xuICBDcmVhdGVFdmFsQ29tcGxldGlvbnNSdW5EYXRhU291cmNlLFxuICBDcmVhdGVFdmFsSlNPTkxSdW5EYXRhU291cmNlLFxuICBFdmFsQVBJRXJyb3IsXG4gIFJ1bkNhbmNlbFJlc3BvbnNlLFxuICBSdW5DcmVhdGVQYXJhbXMsXG4gIFJ1bkNyZWF0ZVJlc3BvbnNlLFxuICBSdW5EZWxldGVSZXNwb25zZSxcbiAgUnVuTGlzdFBhcmFtcyxcbiAgUnVuTGlzdFJlc3BvbnNlLFxuICBSdW5MaXN0UmVzcG9uc2VzUGFnZSxcbiAgUnVuUmV0cmlldmVSZXNwb25zZSxcbiAgUnVucyxcbn0gZnJvbSAnLi9ydW5zL3J1bnMnO1xuaW1wb3J0IHsgQ3Vyc29yUGFnZSwgdHlwZSBDdXJzb3JQYWdlUGFyYW1zIH0gZnJvbSAnLi4vLi4vcGFnaW5hdGlvbic7XG5cbmV4cG9ydCBjbGFzcyBFdmFscyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgcnVuczogUnVuc0FQSS5SdW5zID0gbmV3IFJ1bnNBUEkuUnVucyh0aGlzLl9jbGllbnQpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIHN0cnVjdHVyZSBvZiBhbiBldmFsdWF0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gdGVzdCBhIG1vZGVsJ3NcbiAgICogcGVyZm9ybWFuY2UuIEFuIGV2YWx1YXRpb24gaXMgYSBzZXQgb2YgdGVzdGluZyBjcml0ZXJpYSBhbmQgdGhlIGNvbmZpZyBmb3IgYVxuICAgKiBkYXRhIHNvdXJjZSwgd2hpY2ggZGljdGF0ZXMgdGhlIHNjaGVtYSBvZiB0aGUgZGF0YSB1c2VkIGluIHRoZSBldmFsdWF0aW9uLiBBZnRlclxuICAgKiBjcmVhdGluZyBhbiBldmFsdWF0aW9uLCB5b3UgY2FuIHJ1biBpdCBvbiBkaWZmZXJlbnQgbW9kZWxzIGFuZCBtb2RlbCBwYXJhbWV0ZXJzLlxuICAgKiBXZSBzdXBwb3J0IHNldmVyYWwgdHlwZXMgb2YgZ3JhZGVycyBhbmQgZGF0YXNvdXJjZXMuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbiAgICogdGhlIFtFdmFscyBndWlkZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL2V2YWxzKS5cbiAgICovXG4gIGNyZWF0ZShib2R5OiBFdmFsQ3JlYXRlUGFyYW1zLCBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IENvcmUuQVBJUHJvbWlzZTxFdmFsQ3JlYXRlUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9ldmFscycsIHsgYm9keSwgLi4ub3B0aW9ucyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYW4gZXZhbHVhdGlvbiBieSBJRC5cbiAgICovXG4gIHJldHJpZXZlKGV2YWxJZDogc3RyaW5nLCBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IENvcmUuQVBJUHJvbWlzZTxFdmFsUmV0cmlldmVSZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvZXZhbHMvJHtldmFsSWR9YCwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGNlcnRhaW4gcHJvcGVydGllcyBvZiBhbiBldmFsdWF0aW9uLlxuICAgKi9cbiAgdXBkYXRlKFxuICAgIGV2YWxJZDogc3RyaW5nLFxuICAgIGJvZHk6IEV2YWxVcGRhdGVQYXJhbXMsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuQVBJUHJvbWlzZTxFdmFsVXBkYXRlUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC9ldmFscy8ke2V2YWxJZH1gLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gIH1cblxuICAvKipcbiAgICogTGlzdCBldmFsdWF0aW9ucyBmb3IgYSBwcm9qZWN0LlxuICAgKi9cbiAgbGlzdChcbiAgICBxdWVyeT86IEV2YWxMaXN0UGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLlBhZ2VQcm9taXNlPEV2YWxMaXN0UmVzcG9uc2VzUGFnZSwgRXZhbExpc3RSZXNwb25zZT47XG4gIGxpc3Qob3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLlBhZ2VQcm9taXNlPEV2YWxMaXN0UmVzcG9uc2VzUGFnZSwgRXZhbExpc3RSZXNwb25zZT47XG4gIGxpc3QoXG4gICAgcXVlcnk6IEV2YWxMaXN0UGFyYW1zIHwgQ29yZS5SZXF1ZXN0T3B0aW9ucyA9IHt9LFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLlBhZ2VQcm9taXNlPEV2YWxMaXN0UmVzcG9uc2VzUGFnZSwgRXZhbExpc3RSZXNwb25zZT4ge1xuICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xuICAgICAgcmV0dXJuIHRoaXMubGlzdCh7fSwgcXVlcnkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoJy9ldmFscycsIEV2YWxMaXN0UmVzcG9uc2VzUGFnZSwgeyBxdWVyeSwgLi4ub3B0aW9ucyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYW4gZXZhbHVhdGlvbi5cbiAgICovXG4gIGRlbChldmFsSWQ6IHN0cmluZywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkFQSVByb21pc2U8RXZhbERlbGV0ZVJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5kZWxldGUoYC9ldmFscy8ke2V2YWxJZH1gLCBvcHRpb25zKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRXZhbExpc3RSZXNwb25zZXNQYWdlIGV4dGVuZHMgQ3Vyc29yUGFnZTxFdmFsTGlzdFJlc3BvbnNlPiB7fVxuXG4vKipcbiAqIEEgQ3VzdG9tRGF0YVNvdXJjZUNvbmZpZyB3aGljaCBzcGVjaWZpZXMgdGhlIHNjaGVtYSBvZiB5b3VyIGBpdGVtYCBhbmRcbiAqIG9wdGlvbmFsbHkgYHNhbXBsZWAgbmFtZXNwYWNlcy4gVGhlIHJlc3BvbnNlIHNjaGVtYSBkZWZpbmVzIHRoZSBzaGFwZSBvZiB0aGVcbiAqIGRhdGEgdGhhdCB3aWxsIGJlOlxuICpcbiAqIC0gVXNlZCB0byBkZWZpbmUgeW91ciB0ZXN0aW5nIGNyaXRlcmlhIGFuZFxuICogLSBXaGF0IGRhdGEgaXMgcmVxdWlyZWQgd2hlbiBjcmVhdGluZyBhIHJ1blxuICovXG5leHBvcnQgaW50ZXJmYWNlIEV2YWxDdXN0b21EYXRhU291cmNlQ29uZmlnIHtcbiAgLyoqXG4gICAqIFRoZSBqc29uIHNjaGVtYSBmb3IgdGhlIHJ1biBkYXRhIHNvdXJjZSBpdGVtcy4gTGVhcm4gaG93IHRvIGJ1aWxkIEpTT04gc2NoZW1hc1xuICAgKiBbaGVyZV0oaHR0cHM6Ly9qc29uLXNjaGVtYS5vcmcvKS5cbiAgICovXG4gIHNjaGVtYTogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIGRhdGEgc291cmNlLiBBbHdheXMgYGN1c3RvbWAuXG4gICAqL1xuICB0eXBlOiAnY3VzdG9tJztcbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBEZXByZWNhdGVkIGluIGZhdm9yIG9mIExvZ3NEYXRhU291cmNlQ29uZmlnLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEV2YWxTdG9yZWRDb21wbGV0aW9uc0RhdGFTb3VyY2VDb25maWcge1xuICAvKipcbiAgICogVGhlIGpzb24gc2NoZW1hIGZvciB0aGUgcnVuIGRhdGEgc291cmNlIGl0ZW1zLiBMZWFybiBob3cgdG8gYnVpbGQgSlNPTiBzY2hlbWFzXG4gICAqIFtoZXJlXShodHRwczovL2pzb24tc2NoZW1hLm9yZy8pLlxuICAgKi9cbiAgc2NoZW1hOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgZGF0YSBzb3VyY2UuIEFsd2F5cyBgc3RvcmVkX2NvbXBsZXRpb25zYC5cbiAgICovXG4gIHR5cGU6ICdzdG9yZWRfY29tcGxldGlvbnMnO1xuXG4gIC8qKlxuICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgKlxuICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbWV0YWRhdGE/OiBTaGFyZWQuTWV0YWRhdGEgfCBudWxsO1xufVxuXG4vKipcbiAqIEFuIEV2YWwgb2JqZWN0IHdpdGggYSBkYXRhIHNvdXJjZSBjb25maWcgYW5kIHRlc3RpbmcgY3JpdGVyaWEuIEFuIEV2YWxcbiAqIHJlcHJlc2VudHMgYSB0YXNrIHRvIGJlIGRvbmUgZm9yIHlvdXIgTExNIGludGVncmF0aW9uLiBMaWtlOlxuICpcbiAqIC0gSW1wcm92ZSB0aGUgcXVhbGl0eSBvZiBteSBjaGF0Ym90XG4gKiAtIFNlZSBob3cgd2VsbCBteSBjaGF0Ym90IGhhbmRsZXMgY3VzdG9tZXIgc3VwcG9ydFxuICogLSBDaGVjayBpZiBvNC1taW5pIGlzIGJldHRlciBhdCBteSB1c2VjYXNlIHRoYW4gZ3B0LTRvXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRXZhbENyZWF0ZVJlc3BvbnNlIHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgZXZhbHVhdGlvbi5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBVbml4IHRpbWVzdGFtcCAoaW4gc2Vjb25kcykgZm9yIHdoZW4gdGhlIGV2YWwgd2FzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkX2F0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gb2YgZGF0YSBzb3VyY2VzIHVzZWQgaW4gcnVucyBvZiB0aGUgZXZhbHVhdGlvbi5cbiAgICovXG4gIGRhdGFfc291cmNlX2NvbmZpZzpcbiAgICB8IEV2YWxDdXN0b21EYXRhU291cmNlQ29uZmlnXG4gICAgfCBFdmFsQ3JlYXRlUmVzcG9uc2UuTG9nc1xuICAgIHwgRXZhbFN0b3JlZENvbXBsZXRpb25zRGF0YVNvdXJjZUNvbmZpZztcblxuICAvKipcbiAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdCwgYW5kXG4gICAqIHF1ZXJ5aW5nIGZvciBvYmplY3RzIHZpYSBBUEkgb3IgdGhlIGRhc2hib2FyZC5cbiAgICpcbiAgICogS2V5cyBhcmUgc3RyaW5ncyB3aXRoIGEgbWF4aW11bSBsZW5ndGggb2YgNjQgY2hhcmFjdGVycy4gVmFsdWVzIGFyZSBzdHJpbmdzIHdpdGhcbiAgICogYSBtYXhpbXVtIGxlbmd0aCBvZiA1MTIgY2hhcmFjdGVycy5cbiAgICovXG4gIG1ldGFkYXRhOiBTaGFyZWQuTWV0YWRhdGEgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgZXZhbHVhdGlvbi5cbiAgICovXG4gIG5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG9iamVjdCB0eXBlLlxuICAgKi9cbiAgb2JqZWN0OiAnZXZhbCc7XG5cbiAgLyoqXG4gICAqIEEgbGlzdCBvZiB0ZXN0aW5nIGNyaXRlcmlhLlxuICAgKi9cbiAgdGVzdGluZ19jcml0ZXJpYTogQXJyYXk8XG4gICAgfCBHcmFkZXJNb2RlbHNBUEkuTGFiZWxNb2RlbEdyYWRlclxuICAgIHwgR3JhZGVyTW9kZWxzQVBJLlN0cmluZ0NoZWNrR3JhZGVyXG4gICAgfCBFdmFsQ3JlYXRlUmVzcG9uc2UuRXZhbEdyYWRlclRleHRTaW1pbGFyaXR5XG4gICAgfCBFdmFsQ3JlYXRlUmVzcG9uc2UuRXZhbEdyYWRlclB5dGhvblxuICAgIHwgRXZhbENyZWF0ZVJlc3BvbnNlLkV2YWxHcmFkZXJTY29yZU1vZGVsXG4gID47XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgRXZhbENyZWF0ZVJlc3BvbnNlIHtcbiAgLyoqXG4gICAqIEEgTG9nc0RhdGFTb3VyY2VDb25maWcgd2hpY2ggc3BlY2lmaWVzIHRoZSBtZXRhZGF0YSBwcm9wZXJ0eSBvZiB5b3VyIGxvZ3MgcXVlcnkuXG4gICAqIFRoaXMgaXMgdXN1YWxseSBtZXRhZGF0YSBsaWtlIGB1c2VjYXNlPWNoYXRib3RgIG9yIGBwcm9tcHQtdmVyc2lvbj12MmAsIGV0Yy4gVGhlXG4gICAqIHNjaGVtYSByZXR1cm5lZCBieSB0aGlzIGRhdGEgc291cmNlIGNvbmZpZyBpcyB1c2VkIHRvIGRlZmluZWQgd2hhdCB2YXJpYWJsZXMgYXJlXG4gICAqIGF2YWlsYWJsZSBpbiB5b3VyIGV2YWxzLiBgaXRlbWAgYW5kIGBzYW1wbGVgIGFyZSBib3RoIGRlZmluZWQgd2hlbiB1c2luZyB0aGlzXG4gICAqIGRhdGEgc291cmNlIGNvbmZpZy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgTG9ncyB7XG4gICAgLyoqXG4gICAgICogVGhlIGpzb24gc2NoZW1hIGZvciB0aGUgcnVuIGRhdGEgc291cmNlIGl0ZW1zLiBMZWFybiBob3cgdG8gYnVpbGQgSlNPTiBzY2hlbWFzXG4gICAgICogW2hlcmVdKGh0dHBzOi8vanNvbi1zY2hlbWEub3JnLykuXG4gICAgICovXG4gICAgc2NoZW1hOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIGRhdGEgc291cmNlLiBBbHdheXMgYGxvZ3NgLlxuICAgICAqL1xuICAgIHR5cGU6ICdsb2dzJztcblxuICAgIC8qKlxuICAgICAqIFNldCBvZiAxNiBrZXktdmFsdWUgcGFpcnMgdGhhdCBjYW4gYmUgYXR0YWNoZWQgdG8gYW4gb2JqZWN0LiBUaGlzIGNhbiBiZSB1c2VmdWxcbiAgICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdCwgYW5kXG4gICAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgICAqXG4gICAgICogS2V5cyBhcmUgc3RyaW5ncyB3aXRoIGEgbWF4aW11bSBsZW5ndGggb2YgNjQgY2hhcmFjdGVycy4gVmFsdWVzIGFyZSBzdHJpbmdzIHdpdGhcbiAgICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgICAqL1xuICAgIG1ldGFkYXRhPzogU2hhcmVkLk1ldGFkYXRhIHwgbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIFRleHRTaW1pbGFyaXR5R3JhZGVyIG9iamVjdCB3aGljaCBncmFkZXMgdGV4dCBiYXNlZCBvbiBzaW1pbGFyaXR5IG1ldHJpY3MuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIEV2YWxHcmFkZXJUZXh0U2ltaWxhcml0eSBleHRlbmRzIEdyYWRlck1vZGVsc0FQSS5UZXh0U2ltaWxhcml0eUdyYWRlciB7XG4gICAgLyoqXG4gICAgICogVGhlIHRocmVzaG9sZCBmb3IgdGhlIHNjb3JlLlxuICAgICAqL1xuICAgIHBhc3NfdGhyZXNob2xkOiBudW1iZXI7XG4gIH1cblxuICAvKipcbiAgICogQSBQeXRob25HcmFkZXIgb2JqZWN0IHRoYXQgcnVucyBhIHB5dGhvbiBzY3JpcHQgb24gdGhlIGlucHV0LlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBFdmFsR3JhZGVyUHl0aG9uIGV4dGVuZHMgR3JhZGVyTW9kZWxzQVBJLlB5dGhvbkdyYWRlciB7XG4gICAgLyoqXG4gICAgICogVGhlIHRocmVzaG9sZCBmb3IgdGhlIHNjb3JlLlxuICAgICAqL1xuICAgIHBhc3NfdGhyZXNob2xkPzogbnVtYmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgU2NvcmVNb2RlbEdyYWRlciBvYmplY3QgdGhhdCB1c2VzIGEgbW9kZWwgdG8gYXNzaWduIGEgc2NvcmUgdG8gdGhlIGlucHV0LlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBFdmFsR3JhZGVyU2NvcmVNb2RlbCBleHRlbmRzIEdyYWRlck1vZGVsc0FQSS5TY29yZU1vZGVsR3JhZGVyIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdGhyZXNob2xkIGZvciB0aGUgc2NvcmUuXG4gICAgICovXG4gICAgcGFzc190aHJlc2hvbGQ/OiBudW1iZXI7XG4gIH1cbn1cblxuLyoqXG4gKiBBbiBFdmFsIG9iamVjdCB3aXRoIGEgZGF0YSBzb3VyY2UgY29uZmlnIGFuZCB0ZXN0aW5nIGNyaXRlcmlhLiBBbiBFdmFsXG4gKiByZXByZXNlbnRzIGEgdGFzayB0byBiZSBkb25lIGZvciB5b3VyIExMTSBpbnRlZ3JhdGlvbi4gTGlrZTpcbiAqXG4gKiAtIEltcHJvdmUgdGhlIHF1YWxpdHkgb2YgbXkgY2hhdGJvdFxuICogLSBTZWUgaG93IHdlbGwgbXkgY2hhdGJvdCBoYW5kbGVzIGN1c3RvbWVyIHN1cHBvcnRcbiAqIC0gQ2hlY2sgaWYgbzQtbWluaSBpcyBiZXR0ZXIgYXQgbXkgdXNlY2FzZSB0aGFuIGdwdC00b1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEV2YWxSZXRyaWV2ZVJlc3BvbnNlIHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgZXZhbHVhdGlvbi5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBVbml4IHRpbWVzdGFtcCAoaW4gc2Vjb25kcykgZm9yIHdoZW4gdGhlIGV2YWwgd2FzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkX2F0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyYXRpb24gb2YgZGF0YSBzb3VyY2VzIHVzZWQgaW4gcnVucyBvZiB0aGUgZXZhbHVhdGlvbi5cbiAgICovXG4gIGRhdGFfc291cmNlX2NvbmZpZzpcbiAgICB8IEV2YWxDdXN0b21EYXRhU291cmNlQ29uZmlnXG4gICAgfCBFdmFsUmV0cmlldmVSZXNwb25zZS5Mb2dzXG4gICAgfCBFdmFsU3RvcmVkQ29tcGxldGlvbnNEYXRhU291cmNlQ29uZmlnO1xuXG4gIC8qKlxuICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgKlxuICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbWV0YWRhdGE6IFNoYXJlZC5NZXRhZGF0YSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBldmFsdWF0aW9uLlxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgb2JqZWN0IHR5cGUuXG4gICAqL1xuICBvYmplY3Q6ICdldmFsJztcblxuICAvKipcbiAgICogQSBsaXN0IG9mIHRlc3RpbmcgY3JpdGVyaWEuXG4gICAqL1xuICB0ZXN0aW5nX2NyaXRlcmlhOiBBcnJheTxcbiAgICB8IEdyYWRlck1vZGVsc0FQSS5MYWJlbE1vZGVsR3JhZGVyXG4gICAgfCBHcmFkZXJNb2RlbHNBUEkuU3RyaW5nQ2hlY2tHcmFkZXJcbiAgICB8IEV2YWxSZXRyaWV2ZVJlc3BvbnNlLkV2YWxHcmFkZXJUZXh0U2ltaWxhcml0eVxuICAgIHwgRXZhbFJldHJpZXZlUmVzcG9uc2UuRXZhbEdyYWRlclB5dGhvblxuICAgIHwgRXZhbFJldHJpZXZlUmVzcG9uc2UuRXZhbEdyYWRlclNjb3JlTW9kZWxcbiAgPjtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBFdmFsUmV0cmlldmVSZXNwb25zZSB7XG4gIC8qKlxuICAgKiBBIExvZ3NEYXRhU291cmNlQ29uZmlnIHdoaWNoIHNwZWNpZmllcyB0aGUgbWV0YWRhdGEgcHJvcGVydHkgb2YgeW91ciBsb2dzIHF1ZXJ5LlxuICAgKiBUaGlzIGlzIHVzdWFsbHkgbWV0YWRhdGEgbGlrZSBgdXNlY2FzZT1jaGF0Ym90YCBvciBgcHJvbXB0LXZlcnNpb249djJgLCBldGMuIFRoZVxuICAgKiBzY2hlbWEgcmV0dXJuZWQgYnkgdGhpcyBkYXRhIHNvdXJjZSBjb25maWcgaXMgdXNlZCB0byBkZWZpbmVkIHdoYXQgdmFyaWFibGVzIGFyZVxuICAgKiBhdmFpbGFibGUgaW4geW91ciBldmFscy4gYGl0ZW1gIGFuZCBgc2FtcGxlYCBhcmUgYm90aCBkZWZpbmVkIHdoZW4gdXNpbmcgdGhpc1xuICAgKiBkYXRhIHNvdXJjZSBjb25maWcuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIExvZ3Mge1xuICAgIC8qKlxuICAgICAqIFRoZSBqc29uIHNjaGVtYSBmb3IgdGhlIHJ1biBkYXRhIHNvdXJjZSBpdGVtcy4gTGVhcm4gaG93IHRvIGJ1aWxkIEpTT04gc2NoZW1hc1xuICAgICAqIFtoZXJlXShodHRwczovL2pzb24tc2NoZW1hLm9yZy8pLlxuICAgICAqL1xuICAgIHNjaGVtYTogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiBkYXRhIHNvdXJjZS4gQWx3YXlzIGBsb2dzYC5cbiAgICAgKi9cbiAgICB0eXBlOiAnbG9ncyc7XG5cbiAgICAvKipcbiAgICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAgICogZm9yIHN0b3JpbmcgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb2JqZWN0IGluIGEgc3RydWN0dXJlZCBmb3JtYXQsIGFuZFxuICAgICAqIHF1ZXJ5aW5nIGZvciBvYmplY3RzIHZpYSBBUEkgb3IgdGhlIGRhc2hib2FyZC5cbiAgICAgKlxuICAgICAqIEtleXMgYXJlIHN0cmluZ3Mgd2l0aCBhIG1heGltdW0gbGVuZ3RoIG9mIDY0IGNoYXJhY3RlcnMuIFZhbHVlcyBhcmUgc3RyaW5ncyB3aXRoXG4gICAgICogYSBtYXhpbXVtIGxlbmd0aCBvZiA1MTIgY2hhcmFjdGVycy5cbiAgICAgKi9cbiAgICBtZXRhZGF0YT86IFNoYXJlZC5NZXRhZGF0YSB8IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQSBUZXh0U2ltaWxhcml0eUdyYWRlciBvYmplY3Qgd2hpY2ggZ3JhZGVzIHRleHQgYmFzZWQgb24gc2ltaWxhcml0eSBtZXRyaWNzLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBFdmFsR3JhZGVyVGV4dFNpbWlsYXJpdHkgZXh0ZW5kcyBHcmFkZXJNb2RlbHNBUEkuVGV4dFNpbWlsYXJpdHlHcmFkZXIge1xuICAgIC8qKlxuICAgICAqIFRoZSB0aHJlc2hvbGQgZm9yIHRoZSBzY29yZS5cbiAgICAgKi9cbiAgICBwYXNzX3RocmVzaG9sZDogbnVtYmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgUHl0aG9uR3JhZGVyIG9iamVjdCB0aGF0IHJ1bnMgYSBweXRob24gc2NyaXB0IG9uIHRoZSBpbnB1dC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgRXZhbEdyYWRlclB5dGhvbiBleHRlbmRzIEdyYWRlck1vZGVsc0FQSS5QeXRob25HcmFkZXIge1xuICAgIC8qKlxuICAgICAqIFRoZSB0aHJlc2hvbGQgZm9yIHRoZSBzY29yZS5cbiAgICAgKi9cbiAgICBwYXNzX3RocmVzaG9sZD86IG51bWJlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIFNjb3JlTW9kZWxHcmFkZXIgb2JqZWN0IHRoYXQgdXNlcyBhIG1vZGVsIHRvIGFzc2lnbiBhIHNjb3JlIHRvIHRoZSBpbnB1dC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgRXZhbEdyYWRlclNjb3JlTW9kZWwgZXh0ZW5kcyBHcmFkZXJNb2RlbHNBUEkuU2NvcmVNb2RlbEdyYWRlciB7XG4gICAgLyoqXG4gICAgICogVGhlIHRocmVzaG9sZCBmb3IgdGhlIHNjb3JlLlxuICAgICAqL1xuICAgIHBhc3NfdGhyZXNob2xkPzogbnVtYmVyO1xuICB9XG59XG5cbi8qKlxuICogQW4gRXZhbCBvYmplY3Qgd2l0aCBhIGRhdGEgc291cmNlIGNvbmZpZyBhbmQgdGVzdGluZyBjcml0ZXJpYS4gQW4gRXZhbFxuICogcmVwcmVzZW50cyBhIHRhc2sgdG8gYmUgZG9uZSBmb3IgeW91ciBMTE0gaW50ZWdyYXRpb24uIExpa2U6XG4gKlxuICogLSBJbXByb3ZlIHRoZSBxdWFsaXR5IG9mIG15IGNoYXRib3RcbiAqIC0gU2VlIGhvdyB3ZWxsIG15IGNoYXRib3QgaGFuZGxlcyBjdXN0b21lciBzdXBwb3J0XG4gKiAtIENoZWNrIGlmIG80LW1pbmkgaXMgYmV0dGVyIGF0IG15IHVzZWNhc2UgdGhhbiBncHQtNG9cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFdmFsVXBkYXRlUmVzcG9uc2Uge1xuICAvKipcbiAgICogVW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBldmFsdWF0aW9uLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSBmb3Igd2hlbiB0aGUgZXZhbCB3YXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWRfYXQ6IG51bWJlcjtcblxuICAvKipcbiAgICogQ29uZmlndXJhdGlvbiBvZiBkYXRhIHNvdXJjZXMgdXNlZCBpbiBydW5zIG9mIHRoZSBldmFsdWF0aW9uLlxuICAgKi9cbiAgZGF0YV9zb3VyY2VfY29uZmlnOlxuICAgIHwgRXZhbEN1c3RvbURhdGFTb3VyY2VDb25maWdcbiAgICB8IEV2YWxVcGRhdGVSZXNwb25zZS5Mb2dzXG4gICAgfCBFdmFsU3RvcmVkQ29tcGxldGlvbnNEYXRhU291cmNlQ29uZmlnO1xuXG4gIC8qKlxuICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgKlxuICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbWV0YWRhdGE6IFNoYXJlZC5NZXRhZGF0YSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBldmFsdWF0aW9uLlxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgb2JqZWN0IHR5cGUuXG4gICAqL1xuICBvYmplY3Q6ICdldmFsJztcblxuICAvKipcbiAgICogQSBsaXN0IG9mIHRlc3RpbmcgY3JpdGVyaWEuXG4gICAqL1xuICB0ZXN0aW5nX2NyaXRlcmlhOiBBcnJheTxcbiAgICB8IEdyYWRlck1vZGVsc0FQSS5MYWJlbE1vZGVsR3JhZGVyXG4gICAgfCBHcmFkZXJNb2RlbHNBUEkuU3RyaW5nQ2hlY2tHcmFkZXJcbiAgICB8IEV2YWxVcGRhdGVSZXNwb25zZS5FdmFsR3JhZGVyVGV4dFNpbWlsYXJpdHlcbiAgICB8IEV2YWxVcGRhdGVSZXNwb25zZS5FdmFsR3JhZGVyUHl0aG9uXG4gICAgfCBFdmFsVXBkYXRlUmVzcG9uc2UuRXZhbEdyYWRlclNjb3JlTW9kZWxcbiAgPjtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBFdmFsVXBkYXRlUmVzcG9uc2Uge1xuICAvKipcbiAgICogQSBMb2dzRGF0YVNvdXJjZUNvbmZpZyB3aGljaCBzcGVjaWZpZXMgdGhlIG1ldGFkYXRhIHByb3BlcnR5IG9mIHlvdXIgbG9ncyBxdWVyeS5cbiAgICogVGhpcyBpcyB1c3VhbGx5IG1ldGFkYXRhIGxpa2UgYHVzZWNhc2U9Y2hhdGJvdGAgb3IgYHByb21wdC12ZXJzaW9uPXYyYCwgZXRjLiBUaGVcbiAgICogc2NoZW1hIHJldHVybmVkIGJ5IHRoaXMgZGF0YSBzb3VyY2UgY29uZmlnIGlzIHVzZWQgdG8gZGVmaW5lZCB3aGF0IHZhcmlhYmxlcyBhcmVcbiAgICogYXZhaWxhYmxlIGluIHlvdXIgZXZhbHMuIGBpdGVtYCBhbmQgYHNhbXBsZWAgYXJlIGJvdGggZGVmaW5lZCB3aGVuIHVzaW5nIHRoaXNcbiAgICogZGF0YSBzb3VyY2UgY29uZmlnLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBMb2dzIHtcbiAgICAvKipcbiAgICAgKiBUaGUganNvbiBzY2hlbWEgZm9yIHRoZSBydW4gZGF0YSBzb3VyY2UgaXRlbXMuIExlYXJuIGhvdyB0byBidWlsZCBKU09OIHNjaGVtYXNcbiAgICAgKiBbaGVyZV0oaHR0cHM6Ly9qc29uLXNjaGVtYS5vcmcvKS5cbiAgICAgKi9cbiAgICBzY2hlbWE6IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgZGF0YSBzb3VyY2UuIEFsd2F5cyBgbG9nc2AuXG4gICAgICovXG4gICAgdHlwZTogJ2xvZ3MnO1xuXG4gICAgLyoqXG4gICAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICAgKiBxdWVyeWluZyBmb3Igb2JqZWN0cyB2aWEgQVBJIG9yIHRoZSBkYXNoYm9hcmQuXG4gICAgICpcbiAgICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgICAqIGEgbWF4aW11bSBsZW5ndGggb2YgNTEyIGNoYXJhY3RlcnMuXG4gICAgICovXG4gICAgbWV0YWRhdGE/OiBTaGFyZWQuTWV0YWRhdGEgfCBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgVGV4dFNpbWlsYXJpdHlHcmFkZXIgb2JqZWN0IHdoaWNoIGdyYWRlcyB0ZXh0IGJhc2VkIG9uIHNpbWlsYXJpdHkgbWV0cmljcy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgRXZhbEdyYWRlclRleHRTaW1pbGFyaXR5IGV4dGVuZHMgR3JhZGVyTW9kZWxzQVBJLlRleHRTaW1pbGFyaXR5R3JhZGVyIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdGhyZXNob2xkIGZvciB0aGUgc2NvcmUuXG4gICAgICovXG4gICAgcGFzc190aHJlc2hvbGQ6IG51bWJlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIFB5dGhvbkdyYWRlciBvYmplY3QgdGhhdCBydW5zIGEgcHl0aG9uIHNjcmlwdCBvbiB0aGUgaW5wdXQuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIEV2YWxHcmFkZXJQeXRob24gZXh0ZW5kcyBHcmFkZXJNb2RlbHNBUEkuUHl0aG9uR3JhZGVyIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdGhyZXNob2xkIGZvciB0aGUgc2NvcmUuXG4gICAgICovXG4gICAgcGFzc190aHJlc2hvbGQ/OiBudW1iZXI7XG4gIH1cblxuICAvKipcbiAgICogQSBTY29yZU1vZGVsR3JhZGVyIG9iamVjdCB0aGF0IHVzZXMgYSBtb2RlbCB0byBhc3NpZ24gYSBzY29yZSB0byB0aGUgaW5wdXQuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIEV2YWxHcmFkZXJTY29yZU1vZGVsIGV4dGVuZHMgR3JhZGVyTW9kZWxzQVBJLlNjb3JlTW9kZWxHcmFkZXIge1xuICAgIC8qKlxuICAgICAqIFRoZSB0aHJlc2hvbGQgZm9yIHRoZSBzY29yZS5cbiAgICAgKi9cbiAgICBwYXNzX3RocmVzaG9sZD86IG51bWJlcjtcbiAgfVxufVxuXG4vKipcbiAqIEFuIEV2YWwgb2JqZWN0IHdpdGggYSBkYXRhIHNvdXJjZSBjb25maWcgYW5kIHRlc3RpbmcgY3JpdGVyaWEuIEFuIEV2YWxcbiAqIHJlcHJlc2VudHMgYSB0YXNrIHRvIGJlIGRvbmUgZm9yIHlvdXIgTExNIGludGVncmF0aW9uLiBMaWtlOlxuICpcbiAqIC0gSW1wcm92ZSB0aGUgcXVhbGl0eSBvZiBteSBjaGF0Ym90XG4gKiAtIFNlZSBob3cgd2VsbCBteSBjaGF0Ym90IGhhbmRsZXMgY3VzdG9tZXIgc3VwcG9ydFxuICogLSBDaGVjayBpZiBvNC1taW5pIGlzIGJldHRlciBhdCBteSB1c2VjYXNlIHRoYW4gZ3B0LTRvXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRXZhbExpc3RSZXNwb25zZSB7XG4gIC8qKlxuICAgKiBVbmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGV2YWx1YXRpb24uXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpIGZvciB3aGVuIHRoZSBldmFsIHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZF9hdDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9uIG9mIGRhdGEgc291cmNlcyB1c2VkIGluIHJ1bnMgb2YgdGhlIGV2YWx1YXRpb24uXG4gICAqL1xuICBkYXRhX3NvdXJjZV9jb25maWc6XG4gICAgfCBFdmFsQ3VzdG9tRGF0YVNvdXJjZUNvbmZpZ1xuICAgIHwgRXZhbExpc3RSZXNwb25zZS5Mb2dzXG4gICAgfCBFdmFsU3RvcmVkQ29tcGxldGlvbnNEYXRhU291cmNlQ29uZmlnO1xuXG4gIC8qKlxuICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgKlxuICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbWV0YWRhdGE6IFNoYXJlZC5NZXRhZGF0YSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBldmFsdWF0aW9uLlxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgb2JqZWN0IHR5cGUuXG4gICAqL1xuICBvYmplY3Q6ICdldmFsJztcblxuICAvKipcbiAgICogQSBsaXN0IG9mIHRlc3RpbmcgY3JpdGVyaWEuXG4gICAqL1xuICB0ZXN0aW5nX2NyaXRlcmlhOiBBcnJheTxcbiAgICB8IEdyYWRlck1vZGVsc0FQSS5MYWJlbE1vZGVsR3JhZGVyXG4gICAgfCBHcmFkZXJNb2RlbHNBUEkuU3RyaW5nQ2hlY2tHcmFkZXJcbiAgICB8IEV2YWxMaXN0UmVzcG9uc2UuRXZhbEdyYWRlclRleHRTaW1pbGFyaXR5XG4gICAgfCBFdmFsTGlzdFJlc3BvbnNlLkV2YWxHcmFkZXJQeXRob25cbiAgICB8IEV2YWxMaXN0UmVzcG9uc2UuRXZhbEdyYWRlclNjb3JlTW9kZWxcbiAgPjtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBFdmFsTGlzdFJlc3BvbnNlIHtcbiAgLyoqXG4gICAqIEEgTG9nc0RhdGFTb3VyY2VDb25maWcgd2hpY2ggc3BlY2lmaWVzIHRoZSBtZXRhZGF0YSBwcm9wZXJ0eSBvZiB5b3VyIGxvZ3MgcXVlcnkuXG4gICAqIFRoaXMgaXMgdXN1YWxseSBtZXRhZGF0YSBsaWtlIGB1c2VjYXNlPWNoYXRib3RgIG9yIGBwcm9tcHQtdmVyc2lvbj12MmAsIGV0Yy4gVGhlXG4gICAqIHNjaGVtYSByZXR1cm5lZCBieSB0aGlzIGRhdGEgc291cmNlIGNvbmZpZyBpcyB1c2VkIHRvIGRlZmluZWQgd2hhdCB2YXJpYWJsZXMgYXJlXG4gICAqIGF2YWlsYWJsZSBpbiB5b3VyIGV2YWxzLiBgaXRlbWAgYW5kIGBzYW1wbGVgIGFyZSBib3RoIGRlZmluZWQgd2hlbiB1c2luZyB0aGlzXG4gICAqIGRhdGEgc291cmNlIGNvbmZpZy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgTG9ncyB7XG4gICAgLyoqXG4gICAgICogVGhlIGpzb24gc2NoZW1hIGZvciB0aGUgcnVuIGRhdGEgc291cmNlIGl0ZW1zLiBMZWFybiBob3cgdG8gYnVpbGQgSlNPTiBzY2hlbWFzXG4gICAgICogW2hlcmVdKGh0dHBzOi8vanNvbi1zY2hlbWEub3JnLykuXG4gICAgICovXG4gICAgc2NoZW1hOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIGRhdGEgc291cmNlLiBBbHdheXMgYGxvZ3NgLlxuICAgICAqL1xuICAgIHR5cGU6ICdsb2dzJztcblxuICAgIC8qKlxuICAgICAqIFNldCBvZiAxNiBrZXktdmFsdWUgcGFpcnMgdGhhdCBjYW4gYmUgYXR0YWNoZWQgdG8gYW4gb2JqZWN0LiBUaGlzIGNhbiBiZSB1c2VmdWxcbiAgICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdCwgYW5kXG4gICAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgICAqXG4gICAgICogS2V5cyBhcmUgc3RyaW5ncyB3aXRoIGEgbWF4aW11bSBsZW5ndGggb2YgNjQgY2hhcmFjdGVycy4gVmFsdWVzIGFyZSBzdHJpbmdzIHdpdGhcbiAgICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgICAqL1xuICAgIG1ldGFkYXRhPzogU2hhcmVkLk1ldGFkYXRhIHwgbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIFRleHRTaW1pbGFyaXR5R3JhZGVyIG9iamVjdCB3aGljaCBncmFkZXMgdGV4dCBiYXNlZCBvbiBzaW1pbGFyaXR5IG1ldHJpY3MuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIEV2YWxHcmFkZXJUZXh0U2ltaWxhcml0eSBleHRlbmRzIEdyYWRlck1vZGVsc0FQSS5UZXh0U2ltaWxhcml0eUdyYWRlciB7XG4gICAgLyoqXG4gICAgICogVGhlIHRocmVzaG9sZCBmb3IgdGhlIHNjb3JlLlxuICAgICAqL1xuICAgIHBhc3NfdGhyZXNob2xkOiBudW1iZXI7XG4gIH1cblxuICAvKipcbiAgICogQSBQeXRob25HcmFkZXIgb2JqZWN0IHRoYXQgcnVucyBhIHB5dGhvbiBzY3JpcHQgb24gdGhlIGlucHV0LlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBFdmFsR3JhZGVyUHl0aG9uIGV4dGVuZHMgR3JhZGVyTW9kZWxzQVBJLlB5dGhvbkdyYWRlciB7XG4gICAgLyoqXG4gICAgICogVGhlIHRocmVzaG9sZCBmb3IgdGhlIHNjb3JlLlxuICAgICAqL1xuICAgIHBhc3NfdGhyZXNob2xkPzogbnVtYmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgU2NvcmVNb2RlbEdyYWRlciBvYmplY3QgdGhhdCB1c2VzIGEgbW9kZWwgdG8gYXNzaWduIGEgc2NvcmUgdG8gdGhlIGlucHV0LlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBFdmFsR3JhZGVyU2NvcmVNb2RlbCBleHRlbmRzIEdyYWRlck1vZGVsc0FQSS5TY29yZU1vZGVsR3JhZGVyIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdGhyZXNob2xkIGZvciB0aGUgc2NvcmUuXG4gICAgICovXG4gICAgcGFzc190aHJlc2hvbGQ/OiBudW1iZXI7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBFdmFsRGVsZXRlUmVzcG9uc2Uge1xuICBkZWxldGVkOiBib29sZWFuO1xuXG4gIGV2YWxfaWQ6IHN0cmluZztcblxuICBvYmplY3Q6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFdmFsQ3JlYXRlUGFyYW1zIHtcbiAgLyoqXG4gICAqIFRoZSBjb25maWd1cmF0aW9uIGZvciB0aGUgZGF0YSBzb3VyY2UgdXNlZCBmb3IgdGhlIGV2YWx1YXRpb24gcnVucy4gRGljdGF0ZXMgdGhlXG4gICAqIHNjaGVtYSBvZiB0aGUgZGF0YSB1c2VkIGluIHRoZSBldmFsdWF0aW9uLlxuICAgKi9cbiAgZGF0YV9zb3VyY2VfY29uZmlnOiBFdmFsQ3JlYXRlUGFyYW1zLkN1c3RvbSB8IEV2YWxDcmVhdGVQYXJhbXMuTG9ncyB8IEV2YWxDcmVhdGVQYXJhbXMuU3RvcmVkQ29tcGxldGlvbnM7XG5cbiAgLyoqXG4gICAqIEEgbGlzdCBvZiBncmFkZXJzIGZvciBhbGwgZXZhbCBydW5zIGluIHRoaXMgZ3JvdXAuIEdyYWRlcnMgY2FuIHJlZmVyZW5jZVxuICAgKiB2YXJpYWJsZXMgaW4gdGhlIGRhdGEgc291cmNlIHVzaW5nIGRvdWJsZSBjdXJseSBicmFjZXMgbm90YXRpb24sIGxpa2VcbiAgICogYHt7aXRlbS52YXJpYWJsZV9uYW1lfX1gLiBUbyByZWZlcmVuY2UgdGhlIG1vZGVsJ3Mgb3V0cHV0LCB1c2UgdGhlIGBzYW1wbGVgXG4gICAqIG5hbWVzcGFjZSAoaWUsIGB7e3NhbXBsZS5vdXRwdXRfdGV4dH19YCkuXG4gICAqL1xuICB0ZXN0aW5nX2NyaXRlcmlhOiBBcnJheTxcbiAgICB8IEV2YWxDcmVhdGVQYXJhbXMuTGFiZWxNb2RlbFxuICAgIHwgR3JhZGVyTW9kZWxzQVBJLlN0cmluZ0NoZWNrR3JhZGVyXG4gICAgfCBFdmFsQ3JlYXRlUGFyYW1zLlRleHRTaW1pbGFyaXR5XG4gICAgfCBFdmFsQ3JlYXRlUGFyYW1zLlB5dGhvblxuICAgIHwgRXZhbENyZWF0ZVBhcmFtcy5TY29yZU1vZGVsXG4gID47XG5cbiAgLyoqXG4gICAqIFNldCBvZiAxNiBrZXktdmFsdWUgcGFpcnMgdGhhdCBjYW4gYmUgYXR0YWNoZWQgdG8gYW4gb2JqZWN0LiBUaGlzIGNhbiBiZSB1c2VmdWxcbiAgICogZm9yIHN0b3JpbmcgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb2JqZWN0IGluIGEgc3RydWN0dXJlZCBmb3JtYXQsIGFuZFxuICAgKiBxdWVyeWluZyBmb3Igb2JqZWN0cyB2aWEgQVBJIG9yIHRoZSBkYXNoYm9hcmQuXG4gICAqXG4gICAqIEtleXMgYXJlIHN0cmluZ3Mgd2l0aCBhIG1heGltdW0gbGVuZ3RoIG9mIDY0IGNoYXJhY3RlcnMuIFZhbHVlcyBhcmUgc3RyaW5ncyB3aXRoXG4gICAqIGEgbWF4aW11bSBsZW5ndGggb2YgNTEyIGNoYXJhY3RlcnMuXG4gICAqL1xuICBtZXRhZGF0YT86IFNoYXJlZC5NZXRhZGF0YSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBldmFsdWF0aW9uLlxuICAgKi9cbiAgbmFtZT86IHN0cmluZztcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBFdmFsQ3JlYXRlUGFyYW1zIHtcbiAgLyoqXG4gICAqIEEgQ3VzdG9tRGF0YVNvdXJjZUNvbmZpZyBvYmplY3QgdGhhdCBkZWZpbmVzIHRoZSBzY2hlbWEgZm9yIHRoZSBkYXRhIHNvdXJjZSB1c2VkXG4gICAqIGZvciB0aGUgZXZhbHVhdGlvbiBydW5zLiBUaGlzIHNjaGVtYSBpcyB1c2VkIHRvIGRlZmluZSB0aGUgc2hhcGUgb2YgdGhlIGRhdGFcbiAgICogdGhhdCB3aWxsIGJlOlxuICAgKlxuICAgKiAtIFVzZWQgdG8gZGVmaW5lIHlvdXIgdGVzdGluZyBjcml0ZXJpYSBhbmRcbiAgICogLSBXaGF0IGRhdGEgaXMgcmVxdWlyZWQgd2hlbiBjcmVhdGluZyBhIHJ1blxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBDdXN0b20ge1xuICAgIC8qKlxuICAgICAqIFRoZSBqc29uIHNjaGVtYSBmb3IgZWFjaCByb3cgaW4gdGhlIGRhdGEgc291cmNlLlxuICAgICAqL1xuICAgIGl0ZW1fc2NoZW1hOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIGRhdGEgc291cmNlLiBBbHdheXMgYGN1c3RvbWAuXG4gICAgICovXG4gICAgdHlwZTogJ2N1c3RvbSc7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBldmFsIHNob3VsZCBleHBlY3QgeW91IHRvIHBvcHVsYXRlIHRoZSBzYW1wbGUgbmFtZXNwYWNlIChpZSwgYnlcbiAgICAgKiBnZW5lcmF0aW5nIHJlc3BvbnNlcyBvZmYgb2YgeW91ciBkYXRhIHNvdXJjZSlcbiAgICAgKi9cbiAgICBpbmNsdWRlX3NhbXBsZV9zY2hlbWE/OiBib29sZWFuO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgZGF0YSBzb3VyY2UgY29uZmlnIHdoaWNoIHNwZWNpZmllcyB0aGUgbWV0YWRhdGEgcHJvcGVydHkgb2YgeW91ciBsb2dzIHF1ZXJ5LlxuICAgKiBUaGlzIGlzIHVzdWFsbHkgbWV0YWRhdGEgbGlrZSBgdXNlY2FzZT1jaGF0Ym90YCBvciBgcHJvbXB0LXZlcnNpb249djJgLCBldGMuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIExvZ3Mge1xuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIGRhdGEgc291cmNlLiBBbHdheXMgYGxvZ3NgLlxuICAgICAqL1xuICAgIHR5cGU6ICdsb2dzJztcblxuICAgIC8qKlxuICAgICAqIE1ldGFkYXRhIGZpbHRlcnMgZm9yIHRoZSBsb2dzIGRhdGEgc291cmNlLlxuICAgICAqL1xuICAgIG1ldGFkYXRhPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gIH1cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgRGVwcmVjYXRlZCBpbiBmYXZvciBvZiBMb2dzRGF0YVNvdXJjZUNvbmZpZy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgU3RvcmVkQ29tcGxldGlvbnMge1xuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIGRhdGEgc291cmNlLiBBbHdheXMgYHN0b3JlZF9jb21wbGV0aW9uc2AuXG4gICAgICovXG4gICAgdHlwZTogJ3N0b3JlZF9jb21wbGV0aW9ucyc7XG5cbiAgICAvKipcbiAgICAgKiBNZXRhZGF0YSBmaWx0ZXJzIGZvciB0aGUgc3RvcmVkIGNvbXBsZXRpb25zIGRhdGEgc291cmNlLlxuICAgICAqL1xuICAgIG1ldGFkYXRhPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gIH1cblxuICAvKipcbiAgICogQSBMYWJlbE1vZGVsR3JhZGVyIG9iamVjdCB3aGljaCB1c2VzIGEgbW9kZWwgdG8gYXNzaWduIGxhYmVscyB0byBlYWNoIGl0ZW0gaW5cbiAgICogdGhlIGV2YWx1YXRpb24uXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIExhYmVsTW9kZWwge1xuICAgIC8qKlxuICAgICAqIEEgbGlzdCBvZiBjaGF0IG1lc3NhZ2VzIGZvcm1pbmcgdGhlIHByb21wdCBvciBjb250ZXh0LiBNYXkgaW5jbHVkZSB2YXJpYWJsZVxuICAgICAqIHJlZmVyZW5jZXMgdG8gdGhlIGBpdGVtYCBuYW1lc3BhY2UsIGllIHt7aXRlbS5uYW1lfX0uXG4gICAgICovXG4gICAgaW5wdXQ6IEFycmF5PExhYmVsTW9kZWwuU2ltcGxlSW5wdXRNZXNzYWdlIHwgTGFiZWxNb2RlbC5FdmFsSXRlbT47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGFiZWxzIHRvIGNsYXNzaWZ5IHRvIGVhY2ggaXRlbSBpbiB0aGUgZXZhbHVhdGlvbi5cbiAgICAgKi9cbiAgICBsYWJlbHM6IEFycmF5PHN0cmluZz47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbW9kZWwgdG8gdXNlIGZvciB0aGUgZXZhbHVhdGlvbi4gTXVzdCBzdXBwb3J0IHN0cnVjdHVyZWQgb3V0cHV0cy5cbiAgICAgKi9cbiAgICBtb2RlbDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGdyYWRlci5cbiAgICAgKi9cbiAgICBuYW1lOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGFiZWxzIHRoYXQgaW5kaWNhdGUgYSBwYXNzaW5nIHJlc3VsdC4gTXVzdCBiZSBhIHN1YnNldCBvZiBsYWJlbHMuXG4gICAgICovXG4gICAgcGFzc2luZ19sYWJlbHM6IEFycmF5PHN0cmluZz47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb2JqZWN0IHR5cGUsIHdoaWNoIGlzIGFsd2F5cyBgbGFiZWxfbW9kZWxgLlxuICAgICAqL1xuICAgIHR5cGU6ICdsYWJlbF9tb2RlbCc7XG4gIH1cblxuICBleHBvcnQgbmFtZXNwYWNlIExhYmVsTW9kZWwge1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgU2ltcGxlSW5wdXRNZXNzYWdlIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIGNvbnRlbnQgb2YgdGhlIG1lc3NhZ2UuXG4gICAgICAgKi9cbiAgICAgIGNvbnRlbnQ6IHN0cmluZztcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgcm9sZSBvZiB0aGUgbWVzc2FnZSAoZS5nLiBcInN5c3RlbVwiLCBcImFzc2lzdGFudFwiLCBcInVzZXJcIikuXG4gICAgICAgKi9cbiAgICAgIHJvbGU6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIG1lc3NhZ2UgaW5wdXQgdG8gdGhlIG1vZGVsIHdpdGggYSByb2xlIGluZGljYXRpbmcgaW5zdHJ1Y3Rpb24gZm9sbG93aW5nXG4gICAgICogaGllcmFyY2h5LiBJbnN0cnVjdGlvbnMgZ2l2ZW4gd2l0aCB0aGUgYGRldmVsb3BlcmAgb3IgYHN5c3RlbWAgcm9sZSB0YWtlXG4gICAgICogcHJlY2VkZW5jZSBvdmVyIGluc3RydWN0aW9ucyBnaXZlbiB3aXRoIHRoZSBgdXNlcmAgcm9sZS4gTWVzc2FnZXMgd2l0aCB0aGVcbiAgICAgKiBgYXNzaXN0YW50YCByb2xlIGFyZSBwcmVzdW1lZCB0byBoYXZlIGJlZW4gZ2VuZXJhdGVkIGJ5IHRoZSBtb2RlbCBpbiBwcmV2aW91c1xuICAgICAqIGludGVyYWN0aW9ucy5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIEV2YWxJdGVtIHtcbiAgICAgIC8qKlxuICAgICAgICogVGV4dCBpbnB1dHMgdG8gdGhlIG1vZGVsIC0gY2FuIGNvbnRhaW4gdGVtcGxhdGUgc3RyaW5ncy5cbiAgICAgICAqL1xuICAgICAgY29udGVudDogc3RyaW5nIHwgUmVzcG9uc2VzQVBJLlJlc3BvbnNlSW5wdXRUZXh0IHwgRXZhbEl0ZW0uT3V0cHV0VGV4dDtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgcm9sZSBvZiB0aGUgbWVzc2FnZSBpbnB1dC4gT25lIG9mIGB1c2VyYCwgYGFzc2lzdGFudGAsIGBzeXN0ZW1gLCBvclxuICAgICAgICogYGRldmVsb3BlcmAuXG4gICAgICAgKi9cbiAgICAgIHJvbGU6ICd1c2VyJyB8ICdhc3Npc3RhbnQnIHwgJ3N5c3RlbScgfCAnZGV2ZWxvcGVyJztcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdHlwZSBvZiB0aGUgbWVzc2FnZSBpbnB1dC4gQWx3YXlzIGBtZXNzYWdlYC5cbiAgICAgICAqL1xuICAgICAgdHlwZT86ICdtZXNzYWdlJztcbiAgICB9XG5cbiAgICBleHBvcnQgbmFtZXNwYWNlIEV2YWxJdGVtIHtcbiAgICAgIC8qKlxuICAgICAgICogQSB0ZXh0IG91dHB1dCBmcm9tIHRoZSBtb2RlbC5cbiAgICAgICAqL1xuICAgICAgZXhwb3J0IGludGVyZmFjZSBPdXRwdXRUZXh0IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB0ZXh0IG91dHB1dCBmcm9tIHRoZSBtb2RlbC5cbiAgICAgICAgICovXG4gICAgICAgIHRleHQ6IHN0cmluZztcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHR5cGUgb2YgdGhlIG91dHB1dCB0ZXh0LiBBbHdheXMgYG91dHB1dF90ZXh0YC5cbiAgICAgICAgICovXG4gICAgICAgIHR5cGU6ICdvdXRwdXRfdGV4dCc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEEgVGV4dFNpbWlsYXJpdHlHcmFkZXIgb2JqZWN0IHdoaWNoIGdyYWRlcyB0ZXh0IGJhc2VkIG9uIHNpbWlsYXJpdHkgbWV0cmljcy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGV4dFNpbWlsYXJpdHkgZXh0ZW5kcyBHcmFkZXJNb2RlbHNBUEkuVGV4dFNpbWlsYXJpdHlHcmFkZXIge1xuICAgIC8qKlxuICAgICAqIFRoZSB0aHJlc2hvbGQgZm9yIHRoZSBzY29yZS5cbiAgICAgKi9cbiAgICBwYXNzX3RocmVzaG9sZDogbnVtYmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgUHl0aG9uR3JhZGVyIG9iamVjdCB0aGF0IHJ1bnMgYSBweXRob24gc2NyaXB0IG9uIHRoZSBpbnB1dC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgUHl0aG9uIGV4dGVuZHMgR3JhZGVyTW9kZWxzQVBJLlB5dGhvbkdyYWRlciB7XG4gICAgLyoqXG4gICAgICogVGhlIHRocmVzaG9sZCBmb3IgdGhlIHNjb3JlLlxuICAgICAqL1xuICAgIHBhc3NfdGhyZXNob2xkPzogbnVtYmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgU2NvcmVNb2RlbEdyYWRlciBvYmplY3QgdGhhdCB1c2VzIGEgbW9kZWwgdG8gYXNzaWduIGEgc2NvcmUgdG8gdGhlIGlucHV0LlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBTY29yZU1vZGVsIGV4dGVuZHMgR3JhZGVyTW9kZWxzQVBJLlNjb3JlTW9kZWxHcmFkZXIge1xuICAgIC8qKlxuICAgICAqIFRoZSB0aHJlc2hvbGQgZm9yIHRoZSBzY29yZS5cbiAgICAgKi9cbiAgICBwYXNzX3RocmVzaG9sZD86IG51bWJlcjtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV2YWxVcGRhdGVQYXJhbXMge1xuICAvKipcbiAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdCwgYW5kXG4gICAqIHF1ZXJ5aW5nIGZvciBvYmplY3RzIHZpYSBBUEkgb3IgdGhlIGRhc2hib2FyZC5cbiAgICpcbiAgICogS2V5cyBhcmUgc3RyaW5ncyB3aXRoIGEgbWF4aW11bSBsZW5ndGggb2YgNjQgY2hhcmFjdGVycy4gVmFsdWVzIGFyZSBzdHJpbmdzIHdpdGhcbiAgICogYSBtYXhpbXVtIGxlbmd0aCBvZiA1MTIgY2hhcmFjdGVycy5cbiAgICovXG4gIG1ldGFkYXRhPzogU2hhcmVkLk1ldGFkYXRhIHwgbnVsbDtcblxuICAvKipcbiAgICogUmVuYW1lIHRoZSBldmFsdWF0aW9uLlxuICAgKi9cbiAgbmFtZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFdmFsTGlzdFBhcmFtcyBleHRlbmRzIEN1cnNvclBhZ2VQYXJhbXMge1xuICAvKipcbiAgICogU29ydCBvcmRlciBmb3IgZXZhbHMgYnkgdGltZXN0YW1wLiBVc2UgYGFzY2AgZm9yIGFzY2VuZGluZyBvcmRlciBvciBgZGVzY2AgZm9yXG4gICAqIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAqL1xuICBvcmRlcj86ICdhc2MnIHwgJ2Rlc2MnO1xuXG4gIC8qKlxuICAgKiBFdmFscyBjYW4gYmUgb3JkZXJlZCBieSBjcmVhdGlvbiB0aW1lIG9yIGxhc3QgdXBkYXRlZCB0aW1lLiBVc2UgYGNyZWF0ZWRfYXRgIGZvclxuICAgKiBjcmVhdGlvbiB0aW1lIG9yIGB1cGRhdGVkX2F0YCBmb3IgbGFzdCB1cGRhdGVkIHRpbWUuXG4gICAqL1xuICBvcmRlcl9ieT86ICdjcmVhdGVkX2F0JyB8ICd1cGRhdGVkX2F0Jztcbn1cblxuRXZhbHMuRXZhbExpc3RSZXNwb25zZXNQYWdlID0gRXZhbExpc3RSZXNwb25zZXNQYWdlO1xuRXZhbHMuUnVucyA9IFJ1bnM7XG5FdmFscy5SdW5MaXN0UmVzcG9uc2VzUGFnZSA9IFJ1bkxpc3RSZXNwb25zZXNQYWdlO1xuXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgRXZhbHMge1xuICBleHBvcnQge1xuICAgIHR5cGUgRXZhbEN1c3RvbURhdGFTb3VyY2VDb25maWcgYXMgRXZhbEN1c3RvbURhdGFTb3VyY2VDb25maWcsXG4gICAgdHlwZSBFdmFsU3RvcmVkQ29tcGxldGlvbnNEYXRhU291cmNlQ29uZmlnIGFzIEV2YWxTdG9yZWRDb21wbGV0aW9uc0RhdGFTb3VyY2VDb25maWcsXG4gICAgdHlwZSBFdmFsQ3JlYXRlUmVzcG9uc2UgYXMgRXZhbENyZWF0ZVJlc3BvbnNlLFxuICAgIHR5cGUgRXZhbFJldHJpZXZlUmVzcG9uc2UgYXMgRXZhbFJldHJpZXZlUmVzcG9uc2UsXG4gICAgdHlwZSBFdmFsVXBkYXRlUmVzcG9uc2UgYXMgRXZhbFVwZGF0ZVJlc3BvbnNlLFxuICAgIHR5cGUgRXZhbExpc3RSZXNwb25zZSBhcyBFdmFsTGlzdFJlc3BvbnNlLFxuICAgIHR5cGUgRXZhbERlbGV0ZVJlc3BvbnNlIGFzIEV2YWxEZWxldGVSZXNwb25zZSxcbiAgICBFdmFsTGlzdFJlc3BvbnNlc1BhZ2UgYXMgRXZhbExpc3RSZXNwb25zZXNQYWdlLFxuICAgIHR5cGUgRXZhbENyZWF0ZVBhcmFtcyBhcyBFdmFsQ3JlYXRlUGFyYW1zLFxuICAgIHR5cGUgRXZhbFVwZGF0ZVBhcmFtcyBhcyBFdmFsVXBkYXRlUGFyYW1zLFxuICAgIHR5cGUgRXZhbExpc3RQYXJhbXMgYXMgRXZhbExpc3RQYXJhbXMsXG4gIH07XG5cbiAgZXhwb3J0IHtcbiAgICBSdW5zIGFzIFJ1bnMsXG4gICAgdHlwZSBDcmVhdGVFdmFsQ29tcGxldGlvbnNSdW5EYXRhU291cmNlIGFzIENyZWF0ZUV2YWxDb21wbGV0aW9uc1J1bkRhdGFTb3VyY2UsXG4gICAgdHlwZSBDcmVhdGVFdmFsSlNPTkxSdW5EYXRhU291cmNlIGFzIENyZWF0ZUV2YWxKU09OTFJ1bkRhdGFTb3VyY2UsXG4gICAgdHlwZSBFdmFsQVBJRXJyb3IgYXMgRXZhbEFQSUVycm9yLFxuICAgIHR5cGUgUnVuQ3JlYXRlUmVzcG9uc2UgYXMgUnVuQ3JlYXRlUmVzcG9uc2UsXG4gICAgdHlwZSBSdW5SZXRyaWV2ZVJlc3BvbnNlIGFzIFJ1blJldHJpZXZlUmVzcG9uc2UsXG4gICAgdHlwZSBSdW5MaXN0UmVzcG9uc2UgYXMgUnVuTGlzdFJlc3BvbnNlLFxuICAgIHR5cGUgUnVuRGVsZXRlUmVzcG9uc2UgYXMgUnVuRGVsZXRlUmVzcG9uc2UsXG4gICAgdHlwZSBSdW5DYW5jZWxSZXNwb25zZSBhcyBSdW5DYW5jZWxSZXNwb25zZSxcbiAgICBSdW5MaXN0UmVzcG9uc2VzUGFnZSBhcyBSdW5MaXN0UmVzcG9uc2VzUGFnZSxcbiAgICB0eXBlIFJ1bkNyZWF0ZVBhcmFtcyBhcyBSdW5DcmVhdGVQYXJhbXMsXG4gICAgdHlwZSBSdW5MaXN0UGFyYW1zIGFzIFJ1bkxpc3RQYXJhbXMsXG4gIH07XG59XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICcuLi9yZXNvdXJjZSc7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi4vY29yZSc7XG5pbXBvcnQgeyBzbGVlcCB9IGZyb20gJy4uL2NvcmUnO1xuaW1wb3J0IHsgQVBJQ29ubmVjdGlvblRpbWVvdXRFcnJvciB9IGZyb20gJy4uL2Vycm9yJztcbmltcG9ydCAqIGFzIENvcmUgZnJvbSAnLi4vY29yZSc7XG5pbXBvcnQgeyBDdXJzb3JQYWdlLCB0eXBlIEN1cnNvclBhZ2VQYXJhbXMgfSBmcm9tICcuLi9wYWdpbmF0aW9uJztcbmltcG9ydCB7IHR5cGUgUmVzcG9uc2UgfSBmcm9tICcuLi9fc2hpbXMvaW5kZXgnO1xuXG5leHBvcnQgY2xhc3MgRmlsZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBVcGxvYWQgYSBmaWxlIHRoYXQgY2FuIGJlIHVzZWQgYWNyb3NzIHZhcmlvdXMgZW5kcG9pbnRzLiBJbmRpdmlkdWFsIGZpbGVzIGNhbiBiZVxuICAgKiB1cCB0byA1MTIgTUIsIGFuZCB0aGUgc2l6ZSBvZiBhbGwgZmlsZXMgdXBsb2FkZWQgYnkgb25lIG9yZ2FuaXphdGlvbiBjYW4gYmUgdXBcbiAgICogdG8gMTAwIEdCLlxuICAgKlxuICAgKiBUaGUgQXNzaXN0YW50cyBBUEkgc3VwcG9ydHMgZmlsZXMgdXAgdG8gMiBtaWxsaW9uIHRva2VucyBhbmQgb2Ygc3BlY2lmaWMgZmlsZVxuICAgKiB0eXBlcy4gU2VlIHRoZVxuICAgKiBbQXNzaXN0YW50cyBUb29scyBndWlkZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXNzaXN0YW50cy90b29scykgZm9yXG4gICAqIGRldGFpbHMuXG4gICAqXG4gICAqIFRoZSBGaW5lLXR1bmluZyBBUEkgb25seSBzdXBwb3J0cyBgLmpzb25sYCBmaWxlcy4gVGhlIGlucHV0IGFsc28gaGFzIGNlcnRhaW5cbiAgICogcmVxdWlyZWQgZm9ybWF0cyBmb3IgZmluZS10dW5pbmdcbiAgICogW2NoYXRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvZmluZS10dW5pbmcvY2hhdC1pbnB1dCkgb3JcbiAgICogW2NvbXBsZXRpb25zXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2ZpbmUtdHVuaW5nL2NvbXBsZXRpb25zLWlucHV0KVxuICAgKiBtb2RlbHMuXG4gICAqXG4gICAqIFRoZSBCYXRjaCBBUEkgb25seSBzdXBwb3J0cyBgLmpzb25sYCBmaWxlcyB1cCB0byAyMDAgTUIgaW4gc2l6ZS4gVGhlIGlucHV0IGFsc29cbiAgICogaGFzIGEgc3BlY2lmaWMgcmVxdWlyZWRcbiAgICogW2Zvcm1hdF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9iYXRjaC9yZXF1ZXN0LWlucHV0KS5cbiAgICpcbiAgICogUGxlYXNlIFtjb250YWN0IHVzXShodHRwczovL2hlbHAub3BlbmFpLmNvbS8pIGlmIHlvdSBuZWVkIHRvIGluY3JlYXNlIHRoZXNlXG4gICAqIHN0b3JhZ2UgbGltaXRzLlxuICAgKi9cbiAgY3JlYXRlKGJvZHk6IEZpbGVDcmVhdGVQYXJhbXMsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5BUElQcm9taXNlPEZpbGVPYmplY3Q+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9maWxlcycsIENvcmUubXVsdGlwYXJ0Rm9ybVJlcXVlc3RPcHRpb25zKHsgYm9keSwgLi4ub3B0aW9ucyB9KSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dCBhIHNwZWNpZmljIGZpbGUuXG4gICAqL1xuICByZXRyaWV2ZShmaWxlSWQ6IHN0cmluZywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkFQSVByb21pc2U8RmlsZU9iamVjdD4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvZmlsZXMvJHtmaWxlSWR9YCwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGxpc3Qgb2YgZmlsZXMuXG4gICAqL1xuICBsaXN0KHF1ZXJ5PzogRmlsZUxpc3RQYXJhbXMsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5QYWdlUHJvbWlzZTxGaWxlT2JqZWN0c1BhZ2UsIEZpbGVPYmplY3Q+O1xuICBsaXN0KG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5QYWdlUHJvbWlzZTxGaWxlT2JqZWN0c1BhZ2UsIEZpbGVPYmplY3Q+O1xuICBsaXN0KFxuICAgIHF1ZXJ5OiBGaWxlTGlzdFBhcmFtcyB8IENvcmUuUmVxdWVzdE9wdGlvbnMgPSB7fSxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5QYWdlUHJvbWlzZTxGaWxlT2JqZWN0c1BhZ2UsIEZpbGVPYmplY3Q+IHtcbiAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmxpc3Qoe30sIHF1ZXJ5KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KCcvZmlsZXMnLCBGaWxlT2JqZWN0c1BhZ2UsIHsgcXVlcnksIC4uLm9wdGlvbnMgfSk7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgZmlsZS5cbiAgICovXG4gIGRlbChmaWxlSWQ6IHN0cmluZywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkFQSVByb21pc2U8RmlsZURlbGV0ZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmRlbGV0ZShgL2ZpbGVzLyR7ZmlsZUlkfWAsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNvbnRlbnRzIG9mIHRoZSBzcGVjaWZpZWQgZmlsZS5cbiAgICovXG4gIGNvbnRlbnQoZmlsZUlkOiBzdHJpbmcsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5BUElQcm9taXNlPFJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC9maWxlcy8ke2ZpbGVJZH0vY29udGVudGAsIHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBoZWFkZXJzOiB7IEFjY2VwdDogJ2FwcGxpY2F0aW9uL2JpbmFyeScsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICAgIF9fYmluYXJ5UmVzcG9uc2U6IHRydWUsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY29udGVudHMgb2YgdGhlIHNwZWNpZmllZCBmaWxlLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBUaGUgYC5jb250ZW50KClgIG1ldGhvZCBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkXG4gICAqL1xuICByZXRyaWV2ZUNvbnRlbnQoZmlsZUlkOiBzdHJpbmcsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5BUElQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvZmlsZXMvJHtmaWxlSWR9L2NvbnRlbnRgLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXYWl0cyBmb3IgdGhlIGdpdmVuIGZpbGUgdG8gYmUgcHJvY2Vzc2VkLCBkZWZhdWx0IHRpbWVvdXQgaXMgMzAgbWlucy5cbiAgICovXG4gIGFzeW5jIHdhaXRGb3JQcm9jZXNzaW5nKFxuICAgIGlkOiBzdHJpbmcsXG4gICAgeyBwb2xsSW50ZXJ2YWwgPSA1MDAwLCBtYXhXYWl0ID0gMzAgKiA2MCAqIDEwMDAgfTogeyBwb2xsSW50ZXJ2YWw/OiBudW1iZXI7IG1heFdhaXQ/OiBudW1iZXIgfSA9IHt9LFxuICApOiBQcm9taXNlPEZpbGVPYmplY3Q+IHtcbiAgICBjb25zdCBURVJNSU5BTF9TVEFURVMgPSBuZXcgU2V0KFsncHJvY2Vzc2VkJywgJ2Vycm9yJywgJ2RlbGV0ZWQnXSk7XG5cbiAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgbGV0IGZpbGUgPSBhd2FpdCB0aGlzLnJldHJpZXZlKGlkKTtcblxuICAgIHdoaWxlICghZmlsZS5zdGF0dXMgfHwgIVRFUk1JTkFMX1NUQVRFUy5oYXMoZmlsZS5zdGF0dXMpKSB7XG4gICAgICBhd2FpdCBzbGVlcChwb2xsSW50ZXJ2YWwpO1xuXG4gICAgICBmaWxlID0gYXdhaXQgdGhpcy5yZXRyaWV2ZShpZCk7XG4gICAgICBpZiAoRGF0ZS5ub3coKSAtIHN0YXJ0ID4gbWF4V2FpdCkge1xuICAgICAgICB0aHJvdyBuZXcgQVBJQ29ubmVjdGlvblRpbWVvdXRFcnJvcih7XG4gICAgICAgICAgbWVzc2FnZTogYEdpdmluZyB1cCBvbiB3YWl0aW5nIGZvciBmaWxlICR7aWR9IHRvIGZpbmlzaCBwcm9jZXNzaW5nIGFmdGVyICR7bWF4V2FpdH0gbWlsbGlzZWNvbmRzLmAsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmaWxlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBGaWxlT2JqZWN0c1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlPEZpbGVPYmplY3Q+IHt9XG5cbmV4cG9ydCB0eXBlIEZpbGVDb250ZW50ID0gc3RyaW5nO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVEZWxldGVkIHtcbiAgaWQ6IHN0cmluZztcblxuICBkZWxldGVkOiBib29sZWFuO1xuXG4gIG9iamVjdDogJ2ZpbGUnO1xufVxuXG4vKipcbiAqIFRoZSBgRmlsZWAgb2JqZWN0IHJlcHJlc2VudHMgYSBkb2N1bWVudCB0aGF0IGhhcyBiZWVuIHVwbG9hZGVkIHRvIE9wZW5BSS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBGaWxlT2JqZWN0IHtcbiAgLyoqXG4gICAqIFRoZSBmaWxlIGlkZW50aWZpZXIsIHdoaWNoIGNhbiBiZSByZWZlcmVuY2VkIGluIHRoZSBBUEkgZW5kcG9pbnRzLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGZpbGUsIGluIGJ5dGVzLlxuICAgKi9cbiAgYnl0ZXM6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSBmb3Igd2hlbiB0aGUgZmlsZSB3YXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWRfYXQ6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGZpbGUuXG4gICAqL1xuICBmaWxlbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgb2JqZWN0IHR5cGUsIHdoaWNoIGlzIGFsd2F5cyBgZmlsZWAuXG4gICAqL1xuICBvYmplY3Q6ICdmaWxlJztcblxuICAvKipcbiAgICogVGhlIGludGVuZGVkIHB1cnBvc2Ugb2YgdGhlIGZpbGUuIFN1cHBvcnRlZCB2YWx1ZXMgYXJlIGBhc3Npc3RhbnRzYCxcbiAgICogYGFzc2lzdGFudHNfb3V0cHV0YCwgYGJhdGNoYCwgYGJhdGNoX291dHB1dGAsIGBmaW5lLXR1bmVgLCBgZmluZS10dW5lLXJlc3VsdHNgXG4gICAqIGFuZCBgdmlzaW9uYC5cbiAgICovXG4gIHB1cnBvc2U6XG4gICAgfCAnYXNzaXN0YW50cydcbiAgICB8ICdhc3Npc3RhbnRzX291dHB1dCdcbiAgICB8ICdiYXRjaCdcbiAgICB8ICdiYXRjaF9vdXRwdXQnXG4gICAgfCAnZmluZS10dW5lJ1xuICAgIHwgJ2ZpbmUtdHVuZS1yZXN1bHRzJ1xuICAgIHwgJ3Zpc2lvbic7XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQuIFRoZSBjdXJyZW50IHN0YXR1cyBvZiB0aGUgZmlsZSwgd2hpY2ggY2FuIGJlIGVpdGhlclxuICAgKiBgdXBsb2FkZWRgLCBgcHJvY2Vzc2VkYCwgb3IgYGVycm9yYC5cbiAgICovXG4gIHN0YXR1czogJ3VwbG9hZGVkJyB8ICdwcm9jZXNzZWQnIHwgJ2Vycm9yJztcblxuICAvKipcbiAgICogVGhlIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSBmb3Igd2hlbiB0aGUgZmlsZSB3aWxsIGV4cGlyZS5cbiAgICovXG4gIGV4cGlyZXNfYXQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQuIEZvciBkZXRhaWxzIG9uIHdoeSBhIGZpbmUtdHVuaW5nIHRyYWluaW5nIGZpbGUgZmFpbGVkXG4gICAqIHZhbGlkYXRpb24sIHNlZSB0aGUgYGVycm9yYCBmaWVsZCBvbiBgZmluZV90dW5pbmcuam9iYC5cbiAgICovXG4gIHN0YXR1c19kZXRhaWxzPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIFRoZSBpbnRlbmRlZCBwdXJwb3NlIG9mIHRoZSB1cGxvYWRlZCBmaWxlLiBPbmUgb2Y6IC0gYGFzc2lzdGFudHNgOiBVc2VkIGluIHRoZVxuICogQXNzaXN0YW50cyBBUEkgLSBgYmF0Y2hgOiBVc2VkIGluIHRoZSBCYXRjaCBBUEkgLSBgZmluZS10dW5lYDogVXNlZCBmb3JcbiAqIGZpbmUtdHVuaW5nIC0gYHZpc2lvbmA6IEltYWdlcyB1c2VkIGZvciB2aXNpb24gZmluZS10dW5pbmcgLSBgdXNlcl9kYXRhYDpcbiAqIEZsZXhpYmxlIGZpbGUgdHlwZSBmb3IgYW55IHB1cnBvc2UgLSBgZXZhbHNgOiBVc2VkIGZvciBldmFsIGRhdGEgc2V0c1xuICovXG5leHBvcnQgdHlwZSBGaWxlUHVycG9zZSA9ICdhc3Npc3RhbnRzJyB8ICdiYXRjaCcgfCAnZmluZS10dW5lJyB8ICd2aXNpb24nIHwgJ3VzZXJfZGF0YScgfCAnZXZhbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVDcmVhdGVQYXJhbXMge1xuICAvKipcbiAgICogVGhlIEZpbGUgb2JqZWN0IChub3QgZmlsZSBuYW1lKSB0byBiZSB1cGxvYWRlZC5cbiAgICovXG4gIGZpbGU6IENvcmUuVXBsb2FkYWJsZTtcblxuICAvKipcbiAgICogVGhlIGludGVuZGVkIHB1cnBvc2Ugb2YgdGhlIHVwbG9hZGVkIGZpbGUuIE9uZSBvZjogLSBgYXNzaXN0YW50c2A6IFVzZWQgaW4gdGhlXG4gICAqIEFzc2lzdGFudHMgQVBJIC0gYGJhdGNoYDogVXNlZCBpbiB0aGUgQmF0Y2ggQVBJIC0gYGZpbmUtdHVuZWA6IFVzZWQgZm9yXG4gICAqIGZpbmUtdHVuaW5nIC0gYHZpc2lvbmA6IEltYWdlcyB1c2VkIGZvciB2aXNpb24gZmluZS10dW5pbmcgLSBgdXNlcl9kYXRhYDpcbiAgICogRmxleGlibGUgZmlsZSB0eXBlIGZvciBhbnkgcHVycG9zZSAtIGBldmFsc2A6IFVzZWQgZm9yIGV2YWwgZGF0YSBzZXRzXG4gICAqL1xuICBwdXJwb3NlOiBGaWxlUHVycG9zZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWxlTGlzdFBhcmFtcyBleHRlbmRzIEN1cnNvclBhZ2VQYXJhbXMge1xuICAvKipcbiAgICogU29ydCBvcmRlciBieSB0aGUgYGNyZWF0ZWRfYXRgIHRpbWVzdGFtcCBvZiB0aGUgb2JqZWN0cy4gYGFzY2AgZm9yIGFzY2VuZGluZ1xuICAgKiBvcmRlciBhbmQgYGRlc2NgIGZvciBkZXNjZW5kaW5nIG9yZGVyLlxuICAgKi9cbiAgb3JkZXI/OiAnYXNjJyB8ICdkZXNjJztcblxuICAvKipcbiAgICogT25seSByZXR1cm4gZmlsZXMgd2l0aCB0aGUgZ2l2ZW4gcHVycG9zZS5cbiAgICovXG4gIHB1cnBvc2U/OiBzdHJpbmc7XG59XG5cbkZpbGVzLkZpbGVPYmplY3RzUGFnZSA9IEZpbGVPYmplY3RzUGFnZTtcblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIEZpbGVzIHtcbiAgZXhwb3J0IHtcbiAgICB0eXBlIEZpbGVDb250ZW50IGFzIEZpbGVDb250ZW50LFxuICAgIHR5cGUgRmlsZURlbGV0ZWQgYXMgRmlsZURlbGV0ZWQsXG4gICAgdHlwZSBGaWxlT2JqZWN0IGFzIEZpbGVPYmplY3QsXG4gICAgdHlwZSBGaWxlUHVycG9zZSBhcyBGaWxlUHVycG9zZSxcbiAgICBGaWxlT2JqZWN0c1BhZ2UgYXMgRmlsZU9iamVjdHNQYWdlLFxuICAgIHR5cGUgRmlsZUNyZWF0ZVBhcmFtcyBhcyBGaWxlQ3JlYXRlUGFyYW1zLFxuICAgIHR5cGUgRmlsZUxpc3RQYXJhbXMgYXMgRmlsZUxpc3RQYXJhbXMsXG4gIH07XG59XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICcuLi8uLi9yZXNvdXJjZSc7XG5pbXBvcnQgKiBhcyBHcmFkZXJNb2RlbHNBUEkgZnJvbSAnLi4vZ3JhZGVycy9ncmFkZXItbW9kZWxzJztcblxuZXhwb3J0IGNsYXNzIE1ldGhvZHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7fVxuXG4vKipcbiAqIFRoZSBoeXBlcnBhcmFtZXRlcnMgdXNlZCBmb3IgdGhlIERQTyBmaW5lLXR1bmluZyBqb2IuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRHBvSHlwZXJwYXJhbWV0ZXJzIHtcbiAgLyoqXG4gICAqIE51bWJlciBvZiBleGFtcGxlcyBpbiBlYWNoIGJhdGNoLiBBIGxhcmdlciBiYXRjaCBzaXplIG1lYW5zIHRoYXQgbW9kZWxcbiAgICogcGFyYW1ldGVycyBhcmUgdXBkYXRlZCBsZXNzIGZyZXF1ZW50bHksIGJ1dCB3aXRoIGxvd2VyIHZhcmlhbmNlLlxuICAgKi9cbiAgYmF0Y2hfc2l6ZT86ICdhdXRvJyB8IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGJldGEgdmFsdWUgZm9yIHRoZSBEUE8gbWV0aG9kLiBBIGhpZ2hlciBiZXRhIHZhbHVlIHdpbGwgaW5jcmVhc2UgdGhlIHdlaWdodFxuICAgKiBvZiB0aGUgcGVuYWx0eSBiZXR3ZWVuIHRoZSBwb2xpY3kgYW5kIHJlZmVyZW5jZSBtb2RlbC5cbiAgICovXG4gIGJldGE/OiAnYXV0bycgfCBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFNjYWxpbmcgZmFjdG9yIGZvciB0aGUgbGVhcm5pbmcgcmF0ZS4gQSBzbWFsbGVyIGxlYXJuaW5nIHJhdGUgbWF5IGJlIHVzZWZ1bCB0b1xuICAgKiBhdm9pZCBvdmVyZml0dGluZy5cbiAgICovXG4gIGxlYXJuaW5nX3JhdGVfbXVsdGlwbGllcj86ICdhdXRvJyB8IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBlcG9jaHMgdG8gdHJhaW4gdGhlIG1vZGVsIGZvci4gQW4gZXBvY2ggcmVmZXJzIHRvIG9uZSBmdWxsIGN5Y2xlXG4gICAqIHRocm91Z2ggdGhlIHRyYWluaW5nIGRhdGFzZXQuXG4gICAqL1xuICBuX2Vwb2Nocz86ICdhdXRvJyB8IG51bWJlcjtcbn1cblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIGZvciB0aGUgRFBPIGZpbmUtdHVuaW5nIG1ldGhvZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEcG9NZXRob2Qge1xuICAvKipcbiAgICogVGhlIGh5cGVycGFyYW1ldGVycyB1c2VkIGZvciB0aGUgRFBPIGZpbmUtdHVuaW5nIGpvYi5cbiAgICovXG4gIGh5cGVycGFyYW1ldGVycz86IERwb0h5cGVycGFyYW1ldGVycztcbn1cblxuLyoqXG4gKiBUaGUgaHlwZXJwYXJhbWV0ZXJzIHVzZWQgZm9yIHRoZSByZWluZm9yY2VtZW50IGZpbmUtdHVuaW5nIGpvYi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZWluZm9yY2VtZW50SHlwZXJwYXJhbWV0ZXJzIHtcbiAgLyoqXG4gICAqIE51bWJlciBvZiBleGFtcGxlcyBpbiBlYWNoIGJhdGNoLiBBIGxhcmdlciBiYXRjaCBzaXplIG1lYW5zIHRoYXQgbW9kZWxcbiAgICogcGFyYW1ldGVycyBhcmUgdXBkYXRlZCBsZXNzIGZyZXF1ZW50bHksIGJ1dCB3aXRoIGxvd2VyIHZhcmlhbmNlLlxuICAgKi9cbiAgYmF0Y2hfc2l6ZT86ICdhdXRvJyB8IG51bWJlcjtcblxuICAvKipcbiAgICogTXVsdGlwbGllciBvbiBhbW91bnQgb2YgY29tcHV0ZSB1c2VkIGZvciBleHBsb3Jpbmcgc2VhcmNoIHNwYWNlIGR1cmluZyB0cmFpbmluZy5cbiAgICovXG4gIGNvbXB1dGVfbXVsdGlwbGllcj86ICdhdXRvJyB8IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiB0cmFpbmluZyBzdGVwcyBiZXR3ZWVuIGV2YWx1YXRpb24gcnVucy5cbiAgICovXG4gIGV2YWxfaW50ZXJ2YWw/OiAnYXV0bycgfCBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE51bWJlciBvZiBldmFsdWF0aW9uIHNhbXBsZXMgdG8gZ2VuZXJhdGUgcGVyIHRyYWluaW5nIHN0ZXAuXG4gICAqL1xuICBldmFsX3NhbXBsZXM/OiAnYXV0bycgfCBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFNjYWxpbmcgZmFjdG9yIGZvciB0aGUgbGVhcm5pbmcgcmF0ZS4gQSBzbWFsbGVyIGxlYXJuaW5nIHJhdGUgbWF5IGJlIHVzZWZ1bCB0b1xuICAgKiBhdm9pZCBvdmVyZml0dGluZy5cbiAgICovXG4gIGxlYXJuaW5nX3JhdGVfbXVsdGlwbGllcj86ICdhdXRvJyB8IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBlcG9jaHMgdG8gdHJhaW4gdGhlIG1vZGVsIGZvci4gQW4gZXBvY2ggcmVmZXJzIHRvIG9uZSBmdWxsIGN5Y2xlXG4gICAqIHRocm91Z2ggdGhlIHRyYWluaW5nIGRhdGFzZXQuXG4gICAqL1xuICBuX2Vwb2Nocz86ICdhdXRvJyB8IG51bWJlcjtcblxuICAvKipcbiAgICogTGV2ZWwgb2YgcmVhc29uaW5nIGVmZm9ydC5cbiAgICovXG4gIHJlYXNvbmluZ19lZmZvcnQ/OiAnZGVmYXVsdCcgfCAnbG93JyB8ICdtZWRpdW0nIHwgJ2hpZ2gnO1xufVxuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gZm9yIHRoZSByZWluZm9yY2VtZW50IGZpbmUtdHVuaW5nIG1ldGhvZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZWluZm9yY2VtZW50TWV0aG9kIHtcbiAgLyoqXG4gICAqIFRoZSBncmFkZXIgdXNlZCBmb3IgdGhlIGZpbmUtdHVuaW5nIGpvYi5cbiAgICovXG4gIGdyYWRlcjpcbiAgICB8IEdyYWRlck1vZGVsc0FQSS5TdHJpbmdDaGVja0dyYWRlclxuICAgIHwgR3JhZGVyTW9kZWxzQVBJLlRleHRTaW1pbGFyaXR5R3JhZGVyXG4gICAgfCBHcmFkZXJNb2RlbHNBUEkuUHl0aG9uR3JhZGVyXG4gICAgfCBHcmFkZXJNb2RlbHNBUEkuU2NvcmVNb2RlbEdyYWRlclxuICAgIHwgR3JhZGVyTW9kZWxzQVBJLk11bHRpR3JhZGVyO1xuXG4gIC8qKlxuICAgKiBUaGUgaHlwZXJwYXJhbWV0ZXJzIHVzZWQgZm9yIHRoZSByZWluZm9yY2VtZW50IGZpbmUtdHVuaW5nIGpvYi5cbiAgICovXG4gIGh5cGVycGFyYW1ldGVycz86IFJlaW5mb3JjZW1lbnRIeXBlcnBhcmFtZXRlcnM7XG59XG5cbi8qKlxuICogVGhlIGh5cGVycGFyYW1ldGVycyB1c2VkIGZvciB0aGUgZmluZS10dW5pbmcgam9iLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFN1cGVydmlzZWRIeXBlcnBhcmFtZXRlcnMge1xuICAvKipcbiAgICogTnVtYmVyIG9mIGV4YW1wbGVzIGluIGVhY2ggYmF0Y2guIEEgbGFyZ2VyIGJhdGNoIHNpemUgbWVhbnMgdGhhdCBtb2RlbFxuICAgKiBwYXJhbWV0ZXJzIGFyZSB1cGRhdGVkIGxlc3MgZnJlcXVlbnRseSwgYnV0IHdpdGggbG93ZXIgdmFyaWFuY2UuXG4gICAqL1xuICBiYXRjaF9zaXplPzogJ2F1dG8nIHwgbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBTY2FsaW5nIGZhY3RvciBmb3IgdGhlIGxlYXJuaW5nIHJhdGUuIEEgc21hbGxlciBsZWFybmluZyByYXRlIG1heSBiZSB1c2VmdWwgdG9cbiAgICogYXZvaWQgb3ZlcmZpdHRpbmcuXG4gICAqL1xuICBsZWFybmluZ19yYXRlX211bHRpcGxpZXI/OiAnYXV0bycgfCBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgZXBvY2hzIHRvIHRyYWluIHRoZSBtb2RlbCBmb3IuIEFuIGVwb2NoIHJlZmVycyB0byBvbmUgZnVsbCBjeWNsZVxuICAgKiB0aHJvdWdoIHRoZSB0cmFpbmluZyBkYXRhc2V0LlxuICAgKi9cbiAgbl9lcG9jaHM/OiAnYXV0bycgfCBudW1iZXI7XG59XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBmb3IgdGhlIHN1cGVydmlzZWQgZmluZS10dW5pbmcgbWV0aG9kLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFN1cGVydmlzZWRNZXRob2Qge1xuICAvKipcbiAgICogVGhlIGh5cGVycGFyYW1ldGVycyB1c2VkIGZvciB0aGUgZmluZS10dW5pbmcgam9iLlxuICAgKi9cbiAgaHlwZXJwYXJhbWV0ZXJzPzogU3VwZXJ2aXNlZEh5cGVycGFyYW1ldGVycztcbn1cblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIE1ldGhvZHMge1xuICBleHBvcnQge1xuICAgIHR5cGUgRHBvSHlwZXJwYXJhbWV0ZXJzIGFzIERwb0h5cGVycGFyYW1ldGVycyxcbiAgICB0eXBlIERwb01ldGhvZCBhcyBEcG9NZXRob2QsXG4gICAgdHlwZSBSZWluZm9yY2VtZW50SHlwZXJwYXJhbWV0ZXJzIGFzIFJlaW5mb3JjZW1lbnRIeXBlcnBhcmFtZXRlcnMsXG4gICAgdHlwZSBSZWluZm9yY2VtZW50TWV0aG9kIGFzIFJlaW5mb3JjZW1lbnRNZXRob2QsXG4gICAgdHlwZSBTdXBlcnZpc2VkSHlwZXJwYXJhbWV0ZXJzIGFzIFN1cGVydmlzZWRIeXBlcnBhcmFtZXRlcnMsXG4gICAgdHlwZSBTdXBlcnZpc2VkTWV0aG9kIGFzIFN1cGVydmlzZWRNZXRob2QsXG4gIH07XG59XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICcuLi8uLi8uLi9yZXNvdXJjZSc7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gJy4uLy4uLy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgR3JhZGVyTW9kZWxzQVBJIGZyb20gJy4uLy4uL2dyYWRlcnMvZ3JhZGVyLW1vZGVscyc7XG5cbmV4cG9ydCBjbGFzcyBHcmFkZXJzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAvKipcbiAgICogUnVuIGEgZ3JhZGVyLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0c1xuICAgKiBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5maW5lVHVuaW5nLmFscGhhLmdyYWRlcnMucnVuKHtcbiAgICogICBncmFkZXI6IHtcbiAgICogICAgIGlucHV0OiAnaW5wdXQnLFxuICAgKiAgICAgbmFtZTogJ25hbWUnLFxuICAgKiAgICAgb3BlcmF0aW9uOiAnZXEnLFxuICAgKiAgICAgcmVmZXJlbmNlOiAncmVmZXJlbmNlJyxcbiAgICogICAgIHR5cGU6ICdzdHJpbmdfY2hlY2snLFxuICAgKiAgIH0sXG4gICAqICAgbW9kZWxfc2FtcGxlOiAnbW9kZWxfc2FtcGxlJyxcbiAgICogICByZWZlcmVuY2VfYW5zd2VyOiAnc3RyaW5nJyxcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgcnVuKGJvZHk6IEdyYWRlclJ1blBhcmFtcywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkFQSVByb21pc2U8R3JhZGVyUnVuUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9maW5lX3R1bmluZy9hbHBoYS9ncmFkZXJzL3J1bicsIHsgYm9keSwgLi4ub3B0aW9ucyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZSBhIGdyYWRlci5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHNcbiAgICogY29uc3QgcmVzcG9uc2UgPVxuICAgKiAgIGF3YWl0IGNsaWVudC5maW5lVHVuaW5nLmFscGhhLmdyYWRlcnMudmFsaWRhdGUoe1xuICAgKiAgICAgZ3JhZGVyOiB7XG4gICAqICAgICAgIGlucHV0OiAnaW5wdXQnLFxuICAgKiAgICAgICBuYW1lOiAnbmFtZScsXG4gICAqICAgICAgIG9wZXJhdGlvbjogJ2VxJyxcbiAgICogICAgICAgcmVmZXJlbmNlOiAncmVmZXJlbmNlJyxcbiAgICogICAgICAgdHlwZTogJ3N0cmluZ19jaGVjaycsXG4gICAqICAgICB9LFxuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIHZhbGlkYXRlKFxuICAgIGJvZHk6IEdyYWRlclZhbGlkYXRlUGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLkFQSVByb21pc2U8R3JhZGVyVmFsaWRhdGVSZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL2ZpbmVfdHVuaW5nL2FscGhhL2dyYWRlcnMvdmFsaWRhdGUnLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBHcmFkZXJSdW5SZXNwb25zZSB7XG4gIG1ldGFkYXRhOiBHcmFkZXJSdW5SZXNwb25zZS5NZXRhZGF0YTtcblxuICBtb2RlbF9ncmFkZXJfdG9rZW5fdXNhZ2VfcGVyX21vZGVsOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcblxuICByZXdhcmQ6IG51bWJlcjtcblxuICBzdWJfcmV3YXJkczogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgR3JhZGVyUnVuUmVzcG9uc2Uge1xuICBleHBvcnQgaW50ZXJmYWNlIE1ldGFkYXRhIHtcbiAgICBlcnJvcnM6IE1ldGFkYXRhLkVycm9ycztcblxuICAgIGV4ZWN1dGlvbl90aW1lOiBudW1iZXI7XG5cbiAgICBuYW1lOiBzdHJpbmc7XG5cbiAgICBzYW1wbGVkX21vZGVsX25hbWU6IHN0cmluZyB8IG51bGw7XG5cbiAgICBzY29yZXM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuXG4gICAgdG9rZW5fdXNhZ2U6IG51bWJlciB8IG51bGw7XG5cbiAgICB0eXBlOiBzdHJpbmc7XG4gIH1cblxuICBleHBvcnQgbmFtZXNwYWNlIE1ldGFkYXRhIHtcbiAgICBleHBvcnQgaW50ZXJmYWNlIEVycm9ycyB7XG4gICAgICBmb3JtdWxhX3BhcnNlX2Vycm9yOiBib29sZWFuO1xuXG4gICAgICBpbnZhbGlkX3ZhcmlhYmxlX2Vycm9yOiBib29sZWFuO1xuXG4gICAgICBtb2RlbF9ncmFkZXJfcGFyc2VfZXJyb3I6IGJvb2xlYW47XG5cbiAgICAgIG1vZGVsX2dyYWRlcl9yZWZ1c2FsX2Vycm9yOiBib29sZWFuO1xuXG4gICAgICBtb2RlbF9ncmFkZXJfc2VydmVyX2Vycm9yOiBib29sZWFuO1xuXG4gICAgICBtb2RlbF9ncmFkZXJfc2VydmVyX2Vycm9yX2RldGFpbHM6IHN0cmluZyB8IG51bGw7XG5cbiAgICAgIG90aGVyX2Vycm9yOiBib29sZWFuO1xuXG4gICAgICBweXRob25fZ3JhZGVyX3J1bnRpbWVfZXJyb3I6IGJvb2xlYW47XG5cbiAgICAgIHB5dGhvbl9ncmFkZXJfcnVudGltZV9lcnJvcl9kZXRhaWxzOiBzdHJpbmcgfCBudWxsO1xuXG4gICAgICBweXRob25fZ3JhZGVyX3NlcnZlcl9lcnJvcjogYm9vbGVhbjtcblxuICAgICAgcHl0aG9uX2dyYWRlcl9zZXJ2ZXJfZXJyb3JfdHlwZTogc3RyaW5nIHwgbnVsbDtcblxuICAgICAgc2FtcGxlX3BhcnNlX2Vycm9yOiBib29sZWFuO1xuXG4gICAgICB0cnVuY2F0ZWRfb2JzZXJ2YXRpb25fZXJyb3I6IGJvb2xlYW47XG5cbiAgICAgIHVucmVzcG9uc2l2ZV9yZXdhcmRfZXJyb3I6IGJvb2xlYW47XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR3JhZGVyVmFsaWRhdGVSZXNwb25zZSB7XG4gIC8qKlxuICAgKiBUaGUgZ3JhZGVyIHVzZWQgZm9yIHRoZSBmaW5lLXR1bmluZyBqb2IuXG4gICAqL1xuICBncmFkZXI/OlxuICAgIHwgR3JhZGVyTW9kZWxzQVBJLlN0cmluZ0NoZWNrR3JhZGVyXG4gICAgfCBHcmFkZXJNb2RlbHNBUEkuVGV4dFNpbWlsYXJpdHlHcmFkZXJcbiAgICB8IEdyYWRlck1vZGVsc0FQSS5QeXRob25HcmFkZXJcbiAgICB8IEdyYWRlck1vZGVsc0FQSS5TY29yZU1vZGVsR3JhZGVyXG4gICAgfCBHcmFkZXJNb2RlbHNBUEkuTXVsdGlHcmFkZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR3JhZGVyUnVuUGFyYW1zIHtcbiAgLyoqXG4gICAqIFRoZSBncmFkZXIgdXNlZCBmb3IgdGhlIGZpbmUtdHVuaW5nIGpvYi5cbiAgICovXG4gIGdyYWRlcjpcbiAgICB8IEdyYWRlck1vZGVsc0FQSS5TdHJpbmdDaGVja0dyYWRlclxuICAgIHwgR3JhZGVyTW9kZWxzQVBJLlRleHRTaW1pbGFyaXR5R3JhZGVyXG4gICAgfCBHcmFkZXJNb2RlbHNBUEkuUHl0aG9uR3JhZGVyXG4gICAgfCBHcmFkZXJNb2RlbHNBUEkuU2NvcmVNb2RlbEdyYWRlclxuICAgIHwgR3JhZGVyTW9kZWxzQVBJLk11bHRpR3JhZGVyO1xuXG4gIC8qKlxuICAgKiBUaGUgbW9kZWwgc2FtcGxlIHRvIGJlIGV2YWx1YXRlZC5cbiAgICovXG4gIG1vZGVsX3NhbXBsZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgcmVmZXJlbmNlIGFuc3dlciBmb3IgdGhlIGV2YWx1YXRpb24uXG4gICAqL1xuICByZWZlcmVuY2VfYW5zd2VyOiBzdHJpbmcgfCB1bmtub3duIHwgQXJyYXk8dW5rbm93bj4gfCBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR3JhZGVyVmFsaWRhdGVQYXJhbXMge1xuICAvKipcbiAgICogVGhlIGdyYWRlciB1c2VkIGZvciB0aGUgZmluZS10dW5pbmcgam9iLlxuICAgKi9cbiAgZ3JhZGVyOlxuICAgIHwgR3JhZGVyTW9kZWxzQVBJLlN0cmluZ0NoZWNrR3JhZGVyXG4gICAgfCBHcmFkZXJNb2RlbHNBUEkuVGV4dFNpbWlsYXJpdHlHcmFkZXJcbiAgICB8IEdyYWRlck1vZGVsc0FQSS5QeXRob25HcmFkZXJcbiAgICB8IEdyYWRlck1vZGVsc0FQSS5TY29yZU1vZGVsR3JhZGVyXG4gICAgfCBHcmFkZXJNb2RlbHNBUEkuTXVsdGlHcmFkZXI7XG59XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBHcmFkZXJzIHtcbiAgZXhwb3J0IHtcbiAgICB0eXBlIEdyYWRlclJ1blJlc3BvbnNlIGFzIEdyYWRlclJ1blJlc3BvbnNlLFxuICAgIHR5cGUgR3JhZGVyVmFsaWRhdGVSZXNwb25zZSBhcyBHcmFkZXJWYWxpZGF0ZVJlc3BvbnNlLFxuICAgIHR5cGUgR3JhZGVyUnVuUGFyYW1zIGFzIEdyYWRlclJ1blBhcmFtcyxcbiAgICB0eXBlIEdyYWRlclZhbGlkYXRlUGFyYW1zIGFzIEdyYWRlclZhbGlkYXRlUGFyYW1zLFxuICB9O1xufVxuIiwgIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnLi4vLi4vLi4vcmVzb3VyY2UnO1xuaW1wb3J0ICogYXMgR3JhZGVyc0FQSSBmcm9tICcuL2dyYWRlcnMnO1xuaW1wb3J0IHtcbiAgR3JhZGVyUnVuUGFyYW1zLFxuICBHcmFkZXJSdW5SZXNwb25zZSxcbiAgR3JhZGVyVmFsaWRhdGVQYXJhbXMsXG4gIEdyYWRlclZhbGlkYXRlUmVzcG9uc2UsXG4gIEdyYWRlcnMsXG59IGZyb20gJy4vZ3JhZGVycyc7XG5cbmV4cG9ydCBjbGFzcyBBbHBoYSBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgZ3JhZGVyczogR3JhZGVyc0FQSS5HcmFkZXJzID0gbmV3IEdyYWRlcnNBUEkuR3JhZGVycyh0aGlzLl9jbGllbnQpO1xufVxuXG5BbHBoYS5HcmFkZXJzID0gR3JhZGVycztcblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIEFscGhhIHtcbiAgZXhwb3J0IHtcbiAgICBHcmFkZXJzIGFzIEdyYWRlcnMsXG4gICAgdHlwZSBHcmFkZXJSdW5SZXNwb25zZSBhcyBHcmFkZXJSdW5SZXNwb25zZSxcbiAgICB0eXBlIEdyYWRlclZhbGlkYXRlUmVzcG9uc2UgYXMgR3JhZGVyVmFsaWRhdGVSZXNwb25zZSxcbiAgICB0eXBlIEdyYWRlclJ1blBhcmFtcyBhcyBHcmFkZXJSdW5QYXJhbXMsXG4gICAgdHlwZSBHcmFkZXJWYWxpZGF0ZVBhcmFtcyBhcyBHcmFkZXJWYWxpZGF0ZVBhcmFtcyxcbiAgfTtcbn1cbiIsICIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJy4uLy4uLy4uL3Jlc291cmNlJztcbmltcG9ydCB7IGlzUmVxdWVzdE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9jb3JlJztcbmltcG9ydCAqIGFzIENvcmUgZnJvbSAnLi4vLi4vLi4vY29yZSc7XG5pbXBvcnQgeyBQYWdlIH0gZnJvbSAnLi4vLi4vLi4vcGFnaW5hdGlvbic7XG5cbmV4cG9ydCBjbGFzcyBQZXJtaXNzaW9ucyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgLyoqXG4gICAqICoqTk9URToqKiBDYWxsaW5nIHRoaXMgZW5kcG9pbnQgcmVxdWlyZXMgYW4gW2FkbWluIEFQSSBrZXldKC4uL2FkbWluLWFwaS1rZXlzKS5cbiAgICpcbiAgICogVGhpcyBlbmFibGVzIG9yZ2FuaXphdGlvbiBvd25lcnMgdG8gc2hhcmUgZmluZS10dW5lZCBtb2RlbHMgd2l0aCBvdGhlciBwcm9qZWN0c1xuICAgKiBpbiB0aGVpciBvcmdhbml6YXRpb24uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHRzXG4gICAqIC8vIEF1dG9tYXRpY2FsbHkgZmV0Y2hlcyBtb3JlIHBhZ2VzIGFzIG5lZWRlZC5cbiAgICogZm9yIGF3YWl0IChjb25zdCBwZXJtaXNzaW9uQ3JlYXRlUmVzcG9uc2Ugb2YgY2xpZW50LmZpbmVUdW5pbmcuY2hlY2twb2ludHMucGVybWlzc2lvbnMuY3JlYXRlKFxuICAgKiAgICdmdDpncHQtNG8tbWluaS0yMDI0LTA3LTE4Om9yZzp3ZWF0aGVyOkI3UjlWalFkJyxcbiAgICogICB7IHByb2plY3RfaWRzOiBbJ3N0cmluZyddIH0sXG4gICAqICkpIHtcbiAgICogICAvLyAuLi5cbiAgICogfVxuICAgKiBgYGBcbiAgICovXG4gIGNyZWF0ZShcbiAgICBmaW5lVHVuZWRNb2RlbENoZWNrcG9pbnQ6IHN0cmluZyxcbiAgICBib2R5OiBQZXJtaXNzaW9uQ3JlYXRlUGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLlBhZ2VQcm9taXNlPFBlcm1pc3Npb25DcmVhdGVSZXNwb25zZXNQYWdlLCBQZXJtaXNzaW9uQ3JlYXRlUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoXG4gICAgICBgL2ZpbmVfdHVuaW5nL2NoZWNrcG9pbnRzLyR7ZmluZVR1bmVkTW9kZWxDaGVja3BvaW50fS9wZXJtaXNzaW9uc2AsXG4gICAgICBQZXJtaXNzaW9uQ3JlYXRlUmVzcG9uc2VzUGFnZSxcbiAgICAgIHsgYm9keSwgbWV0aG9kOiAncG9zdCcsIC4uLm9wdGlvbnMgfSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqICoqTk9URToqKiBUaGlzIGVuZHBvaW50IHJlcXVpcmVzIGFuIFthZG1pbiBBUEkga2V5XSguLi9hZG1pbi1hcGkta2V5cykuXG4gICAqXG4gICAqIE9yZ2FuaXphdGlvbiBvd25lcnMgY2FuIHVzZSB0aGlzIGVuZHBvaW50IHRvIHZpZXcgYWxsIHBlcm1pc3Npb25zIGZvciBhXG4gICAqIGZpbmUtdHVuZWQgbW9kZWwgY2hlY2twb2ludC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHNcbiAgICogY29uc3QgcGVybWlzc2lvbiA9XG4gICAqICAgYXdhaXQgY2xpZW50LmZpbmVUdW5pbmcuY2hlY2twb2ludHMucGVybWlzc2lvbnMucmV0cmlldmUoXG4gICAqICAgICAnZnQtQUYxV29ScWQzYUpBSHNxYzlOWTdpTDhGJyxcbiAgICogICApO1xuICAgKiBgYGBcbiAgICovXG4gIHJldHJpZXZlKFxuICAgIGZpbmVUdW5lZE1vZGVsQ2hlY2twb2ludDogc3RyaW5nLFxuICAgIHF1ZXJ5PzogUGVybWlzc2lvblJldHJpZXZlUGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLkFQSVByb21pc2U8UGVybWlzc2lvblJldHJpZXZlUmVzcG9uc2U+O1xuICByZXRyaWV2ZShcbiAgICBmaW5lVHVuZWRNb2RlbENoZWNrcG9pbnQ6IHN0cmluZyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5BUElQcm9taXNlPFBlcm1pc3Npb25SZXRyaWV2ZVJlc3BvbnNlPjtcbiAgcmV0cmlldmUoXG4gICAgZmluZVR1bmVkTW9kZWxDaGVja3BvaW50OiBzdHJpbmcsXG4gICAgcXVlcnk6IFBlcm1pc3Npb25SZXRyaWV2ZVBhcmFtcyB8IENvcmUuUmVxdWVzdE9wdGlvbnMgPSB7fSxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5BUElQcm9taXNlPFBlcm1pc3Npb25SZXRyaWV2ZVJlc3BvbnNlPiB7XG4gICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXRyaWV2ZShmaW5lVHVuZWRNb2RlbENoZWNrcG9pbnQsIHt9LCBxdWVyeSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvZmluZV90dW5pbmcvY2hlY2twb2ludHMvJHtmaW5lVHVuZWRNb2RlbENoZWNrcG9pbnR9L3Blcm1pc3Npb25zYCwge1xuICAgICAgcXVlcnksXG4gICAgICAuLi5vcHRpb25zLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqICoqTk9URToqKiBUaGlzIGVuZHBvaW50IHJlcXVpcmVzIGFuIFthZG1pbiBBUEkga2V5XSguLi9hZG1pbi1hcGkta2V5cykuXG4gICAqXG4gICAqIE9yZ2FuaXphdGlvbiBvd25lcnMgY2FuIHVzZSB0aGlzIGVuZHBvaW50IHRvIGRlbGV0ZSBhIHBlcm1pc3Npb24gZm9yIGFcbiAgICogZmluZS10dW5lZCBtb2RlbCBjaGVja3BvaW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0c1xuICAgKiBjb25zdCBwZXJtaXNzaW9uID1cbiAgICogICBhd2FpdCBjbGllbnQuZmluZVR1bmluZy5jaGVja3BvaW50cy5wZXJtaXNzaW9ucy5kZWwoXG4gICAqICAgICAnZnQ6Z3B0LTRvLW1pbmktMjAyNC0wNy0xODpvcmc6d2VhdGhlcjpCN1I5VmpRZCcsXG4gICAqICAgICAnY3BfemM0UTdNUDZYeHVsY1Z6ajRNWmR3c0FCJyxcbiAgICogICApO1xuICAgKiBgYGBcbiAgICovXG4gIGRlbChcbiAgICBmaW5lVHVuZWRNb2RlbENoZWNrcG9pbnQ6IHN0cmluZyxcbiAgICBwZXJtaXNzaW9uSWQ6IHN0cmluZyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5BUElQcm9taXNlPFBlcm1pc3Npb25EZWxldGVSZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQuZGVsZXRlKFxuICAgICAgYC9maW5lX3R1bmluZy9jaGVja3BvaW50cy8ke2ZpbmVUdW5lZE1vZGVsQ2hlY2twb2ludH0vcGVybWlzc2lvbnMvJHtwZXJtaXNzaW9uSWR9YCxcbiAgICAgIG9wdGlvbnMsXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE5vdGU6IG5vIHBhZ2luYXRpb24gYWN0dWFsbHkgb2NjdXJzIHlldCwgdGhpcyBpcyBmb3IgZm9yd2FyZHMtY29tcGF0aWJpbGl0eS5cbiAqL1xuZXhwb3J0IGNsYXNzIFBlcm1pc3Npb25DcmVhdGVSZXNwb25zZXNQYWdlIGV4dGVuZHMgUGFnZTxQZXJtaXNzaW9uQ3JlYXRlUmVzcG9uc2U+IHt9XG5cbi8qKlxuICogVGhlIGBjaGVja3BvaW50LnBlcm1pc3Npb25gIG9iamVjdCByZXByZXNlbnRzIGEgcGVybWlzc2lvbiBmb3IgYSBmaW5lLXR1bmVkXG4gKiBtb2RlbCBjaGVja3BvaW50LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBlcm1pc3Npb25DcmVhdGVSZXNwb25zZSB7XG4gIC8qKlxuICAgKiBUaGUgcGVybWlzc2lvbiBpZGVudGlmaWVyLCB3aGljaCBjYW4gYmUgcmVmZXJlbmNlZCBpbiB0aGUgQVBJIGVuZHBvaW50cy5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBVbml4IHRpbWVzdGFtcCAoaW4gc2Vjb25kcykgZm9yIHdoZW4gdGhlIHBlcm1pc3Npb24gd2FzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkX2F0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBvYmplY3QgdHlwZSwgd2hpY2ggaXMgYWx3YXlzIFwiY2hlY2twb2ludC5wZXJtaXNzaW9uXCIuXG4gICAqL1xuICBvYmplY3Q6ICdjaGVja3BvaW50LnBlcm1pc3Npb24nO1xuXG4gIC8qKlxuICAgKiBUaGUgcHJvamVjdCBpZGVudGlmaWVyIHRoYXQgdGhlIHBlcm1pc3Npb24gaXMgZm9yLlxuICAgKi9cbiAgcHJvamVjdF9pZDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBlcm1pc3Npb25SZXRyaWV2ZVJlc3BvbnNlIHtcbiAgZGF0YTogQXJyYXk8UGVybWlzc2lvblJldHJpZXZlUmVzcG9uc2UuRGF0YT47XG5cbiAgaGFzX21vcmU6IGJvb2xlYW47XG5cbiAgb2JqZWN0OiAnbGlzdCc7XG5cbiAgZmlyc3RfaWQ/OiBzdHJpbmcgfCBudWxsO1xuXG4gIGxhc3RfaWQ/OiBzdHJpbmcgfCBudWxsO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFBlcm1pc3Npb25SZXRyaWV2ZVJlc3BvbnNlIHtcbiAgLyoqXG4gICAqIFRoZSBgY2hlY2twb2ludC5wZXJtaXNzaW9uYCBvYmplY3QgcmVwcmVzZW50cyBhIHBlcm1pc3Npb24gZm9yIGEgZmluZS10dW5lZFxuICAgKiBtb2RlbCBjaGVja3BvaW50LlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBEYXRhIHtcbiAgICAvKipcbiAgICAgKiBUaGUgcGVybWlzc2lvbiBpZGVudGlmaWVyLCB3aGljaCBjYW4gYmUgcmVmZXJlbmNlZCBpbiB0aGUgQVBJIGVuZHBvaW50cy5cbiAgICAgKi9cbiAgICBpZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSBmb3Igd2hlbiB0aGUgcGVybWlzc2lvbiB3YXMgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBjcmVhdGVkX2F0OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb2JqZWN0IHR5cGUsIHdoaWNoIGlzIGFsd2F5cyBcImNoZWNrcG9pbnQucGVybWlzc2lvblwiLlxuICAgICAqL1xuICAgIG9iamVjdDogJ2NoZWNrcG9pbnQucGVybWlzc2lvbic7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcHJvamVjdCBpZGVudGlmaWVyIHRoYXQgdGhlIHBlcm1pc3Npb24gaXMgZm9yLlxuICAgICAqL1xuICAgIHByb2plY3RfaWQ6IHN0cmluZztcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBlcm1pc3Npb25EZWxldGVSZXNwb25zZSB7XG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIGZpbmUtdHVuZWQgbW9kZWwgY2hlY2twb2ludCBwZXJtaXNzaW9uIHRoYXQgd2FzIGRlbGV0ZWQuXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBmaW5lLXR1bmVkIG1vZGVsIGNoZWNrcG9pbnQgcGVybWlzc2lvbiB3YXMgc3VjY2Vzc2Z1bGx5IGRlbGV0ZWQuXG4gICAqL1xuICBkZWxldGVkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgb2JqZWN0IHR5cGUsIHdoaWNoIGlzIGFsd2F5cyBcImNoZWNrcG9pbnQucGVybWlzc2lvblwiLlxuICAgKi9cbiAgb2JqZWN0OiAnY2hlY2twb2ludC5wZXJtaXNzaW9uJztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQZXJtaXNzaW9uQ3JlYXRlUGFyYW1zIHtcbiAgLyoqXG4gICAqIFRoZSBwcm9qZWN0IGlkZW50aWZpZXJzIHRvIGdyYW50IGFjY2VzcyB0by5cbiAgICovXG4gIHByb2plY3RfaWRzOiBBcnJheTxzdHJpbmc+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBlcm1pc3Npb25SZXRyaWV2ZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBJZGVudGlmaWVyIGZvciB0aGUgbGFzdCBwZXJtaXNzaW9uIElEIGZyb20gdGhlIHByZXZpb3VzIHBhZ2luYXRpb24gcmVxdWVzdC5cbiAgICovXG4gIGFmdGVyPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcGVybWlzc2lvbnMgdG8gcmV0cmlldmUuXG4gICAqL1xuICBsaW1pdD86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG9yZGVyIGluIHdoaWNoIHRvIHJldHJpZXZlIHBlcm1pc3Npb25zLlxuICAgKi9cbiAgb3JkZXI/OiAnYXNjZW5kaW5nJyB8ICdkZXNjZW5kaW5nJztcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBwcm9qZWN0IHRvIGdldCBwZXJtaXNzaW9ucyBmb3IuXG4gICAqL1xuICBwcm9qZWN0X2lkPzogc3RyaW5nO1xufVxuXG5QZXJtaXNzaW9ucy5QZXJtaXNzaW9uQ3JlYXRlUmVzcG9uc2VzUGFnZSA9IFBlcm1pc3Npb25DcmVhdGVSZXNwb25zZXNQYWdlO1xuXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgUGVybWlzc2lvbnMge1xuICBleHBvcnQge1xuICAgIHR5cGUgUGVybWlzc2lvbkNyZWF0ZVJlc3BvbnNlIGFzIFBlcm1pc3Npb25DcmVhdGVSZXNwb25zZSxcbiAgICB0eXBlIFBlcm1pc3Npb25SZXRyaWV2ZVJlc3BvbnNlIGFzIFBlcm1pc3Npb25SZXRyaWV2ZVJlc3BvbnNlLFxuICAgIHR5cGUgUGVybWlzc2lvbkRlbGV0ZVJlc3BvbnNlIGFzIFBlcm1pc3Npb25EZWxldGVSZXNwb25zZSxcbiAgICBQZXJtaXNzaW9uQ3JlYXRlUmVzcG9uc2VzUGFnZSBhcyBQZXJtaXNzaW9uQ3JlYXRlUmVzcG9uc2VzUGFnZSxcbiAgICB0eXBlIFBlcm1pc3Npb25DcmVhdGVQYXJhbXMgYXMgUGVybWlzc2lvbkNyZWF0ZVBhcmFtcyxcbiAgICB0eXBlIFBlcm1pc3Npb25SZXRyaWV2ZVBhcmFtcyBhcyBQZXJtaXNzaW9uUmV0cmlldmVQYXJhbXMsXG4gIH07XG59XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICcuLi8uLi8uLi9yZXNvdXJjZSc7XG5pbXBvcnQgKiBhcyBQZXJtaXNzaW9uc0FQSSBmcm9tICcuL3Blcm1pc3Npb25zJztcbmltcG9ydCB7XG4gIFBlcm1pc3Npb25DcmVhdGVQYXJhbXMsXG4gIFBlcm1pc3Npb25DcmVhdGVSZXNwb25zZSxcbiAgUGVybWlzc2lvbkNyZWF0ZVJlc3BvbnNlc1BhZ2UsXG4gIFBlcm1pc3Npb25EZWxldGVSZXNwb25zZSxcbiAgUGVybWlzc2lvblJldHJpZXZlUGFyYW1zLFxuICBQZXJtaXNzaW9uUmV0cmlldmVSZXNwb25zZSxcbiAgUGVybWlzc2lvbnMsXG59IGZyb20gJy4vcGVybWlzc2lvbnMnO1xuXG5leHBvcnQgY2xhc3MgQ2hlY2twb2ludHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIHBlcm1pc3Npb25zOiBQZXJtaXNzaW9uc0FQSS5QZXJtaXNzaW9ucyA9IG5ldyBQZXJtaXNzaW9uc0FQSS5QZXJtaXNzaW9ucyh0aGlzLl9jbGllbnQpO1xufVxuXG5DaGVja3BvaW50cy5QZXJtaXNzaW9ucyA9IFBlcm1pc3Npb25zO1xuQ2hlY2twb2ludHMuUGVybWlzc2lvbkNyZWF0ZVJlc3BvbnNlc1BhZ2UgPSBQZXJtaXNzaW9uQ3JlYXRlUmVzcG9uc2VzUGFnZTtcblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIENoZWNrcG9pbnRzIHtcbiAgZXhwb3J0IHtcbiAgICBQZXJtaXNzaW9ucyBhcyBQZXJtaXNzaW9ucyxcbiAgICB0eXBlIFBlcm1pc3Npb25DcmVhdGVSZXNwb25zZSBhcyBQZXJtaXNzaW9uQ3JlYXRlUmVzcG9uc2UsXG4gICAgdHlwZSBQZXJtaXNzaW9uUmV0cmlldmVSZXNwb25zZSBhcyBQZXJtaXNzaW9uUmV0cmlldmVSZXNwb25zZSxcbiAgICB0eXBlIFBlcm1pc3Npb25EZWxldGVSZXNwb25zZSBhcyBQZXJtaXNzaW9uRGVsZXRlUmVzcG9uc2UsXG4gICAgUGVybWlzc2lvbkNyZWF0ZVJlc3BvbnNlc1BhZ2UgYXMgUGVybWlzc2lvbkNyZWF0ZVJlc3BvbnNlc1BhZ2UsXG4gICAgdHlwZSBQZXJtaXNzaW9uQ3JlYXRlUGFyYW1zIGFzIFBlcm1pc3Npb25DcmVhdGVQYXJhbXMsXG4gICAgdHlwZSBQZXJtaXNzaW9uUmV0cmlldmVQYXJhbXMgYXMgUGVybWlzc2lvblJldHJpZXZlUGFyYW1zLFxuICB9O1xufVxuIiwgIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnLi4vLi4vLi4vcmVzb3VyY2UnO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tICcuLi8uLi8uLi9jb3JlJztcbmltcG9ydCB7IEN1cnNvclBhZ2UsIHR5cGUgQ3Vyc29yUGFnZVBhcmFtcyB9IGZyb20gJy4uLy4uLy4uL3BhZ2luYXRpb24nO1xuXG5leHBvcnQgY2xhc3MgQ2hlY2twb2ludHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBMaXN0IGNoZWNrcG9pbnRzIGZvciBhIGZpbmUtdHVuaW5nIGpvYi5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHNcbiAgICogLy8gQXV0b21hdGljYWxseSBmZXRjaGVzIG1vcmUgcGFnZXMgYXMgbmVlZGVkLlxuICAgKiBmb3IgYXdhaXQgKGNvbnN0IGZpbmVUdW5pbmdKb2JDaGVja3BvaW50IG9mIGNsaWVudC5maW5lVHVuaW5nLmpvYnMuY2hlY2twb2ludHMubGlzdChcbiAgICogICAnZnQtQUYxV29ScWQzYUpBSHNxYzlOWTdpTDhGJyxcbiAgICogKSkge1xuICAgKiAgIC8vIC4uLlxuICAgKiB9XG4gICAqIGBgYFxuICAgKi9cbiAgbGlzdChcbiAgICBmaW5lVHVuaW5nSm9iSWQ6IHN0cmluZyxcbiAgICBxdWVyeT86IENoZWNrcG9pbnRMaXN0UGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLlBhZ2VQcm9taXNlPEZpbmVUdW5pbmdKb2JDaGVja3BvaW50c1BhZ2UsIEZpbmVUdW5pbmdKb2JDaGVja3BvaW50PjtcbiAgbGlzdChcbiAgICBmaW5lVHVuaW5nSm9iSWQ6IHN0cmluZyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5QYWdlUHJvbWlzZTxGaW5lVHVuaW5nSm9iQ2hlY2twb2ludHNQYWdlLCBGaW5lVHVuaW5nSm9iQ2hlY2twb2ludD47XG4gIGxpc3QoXG4gICAgZmluZVR1bmluZ0pvYklkOiBzdHJpbmcsXG4gICAgcXVlcnk6IENoZWNrcG9pbnRMaXN0UGFyYW1zIHwgQ29yZS5SZXF1ZXN0T3B0aW9ucyA9IHt9LFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLlBhZ2VQcm9taXNlPEZpbmVUdW5pbmdKb2JDaGVja3BvaW50c1BhZ2UsIEZpbmVUdW5pbmdKb2JDaGVja3BvaW50PiB7XG4gICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5saXN0KGZpbmVUdW5pbmdKb2JJZCwge30sIHF1ZXJ5KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KFxuICAgICAgYC9maW5lX3R1bmluZy9qb2JzLyR7ZmluZVR1bmluZ0pvYklkfS9jaGVja3BvaW50c2AsXG4gICAgICBGaW5lVHVuaW5nSm9iQ2hlY2twb2ludHNQYWdlLFxuICAgICAgeyBxdWVyeSwgLi4ub3B0aW9ucyB9LFxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZpbmVUdW5pbmdKb2JDaGVja3BvaW50c1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlPEZpbmVUdW5pbmdKb2JDaGVja3BvaW50PiB7fVxuXG4vKipcbiAqIFRoZSBgZmluZV90dW5pbmcuam9iLmNoZWNrcG9pbnRgIG9iamVjdCByZXByZXNlbnRzIGEgbW9kZWwgY2hlY2twb2ludCBmb3IgYVxuICogZmluZS10dW5pbmcgam9iIHRoYXQgaXMgcmVhZHkgdG8gdXNlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEZpbmVUdW5pbmdKb2JDaGVja3BvaW50IHtcbiAgLyoqXG4gICAqIFRoZSBjaGVja3BvaW50IGlkZW50aWZpZXIsIHdoaWNoIGNhbiBiZSByZWZlcmVuY2VkIGluIHRoZSBBUEkgZW5kcG9pbnRzLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSBmb3Igd2hlbiB0aGUgY2hlY2twb2ludCB3YXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWRfYXQ6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGZpbmUtdHVuZWQgY2hlY2twb2ludCBtb2RlbCB0aGF0IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBmaW5lX3R1bmVkX21vZGVsX2NoZWNrcG9pbnQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGZpbmUtdHVuaW5nIGpvYiB0aGF0IHRoaXMgY2hlY2twb2ludCB3YXMgY3JlYXRlZCBmcm9tLlxuICAgKi9cbiAgZmluZV90dW5pbmdfam9iX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIE1ldHJpY3MgYXQgdGhlIHN0ZXAgbnVtYmVyIGR1cmluZyB0aGUgZmluZS10dW5pbmcgam9iLlxuICAgKi9cbiAgbWV0cmljczogRmluZVR1bmluZ0pvYkNoZWNrcG9pbnQuTWV0cmljcztcblxuICAvKipcbiAgICogVGhlIG9iamVjdCB0eXBlLCB3aGljaCBpcyBhbHdheXMgXCJmaW5lX3R1bmluZy5qb2IuY2hlY2twb2ludFwiLlxuICAgKi9cbiAgb2JqZWN0OiAnZmluZV90dW5pbmcuam9iLmNoZWNrcG9pbnQnO1xuXG4gIC8qKlxuICAgKiBUaGUgc3RlcCBudW1iZXIgdGhhdCB0aGUgY2hlY2twb2ludCB3YXMgY3JlYXRlZCBhdC5cbiAgICovXG4gIHN0ZXBfbnVtYmVyOiBudW1iZXI7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgRmluZVR1bmluZ0pvYkNoZWNrcG9pbnQge1xuICAvKipcbiAgICogTWV0cmljcyBhdCB0aGUgc3RlcCBudW1iZXIgZHVyaW5nIHRoZSBmaW5lLXR1bmluZyBqb2IuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIE1ldHJpY3Mge1xuICAgIGZ1bGxfdmFsaWRfbG9zcz86IG51bWJlcjtcblxuICAgIGZ1bGxfdmFsaWRfbWVhbl90b2tlbl9hY2N1cmFjeT86IG51bWJlcjtcblxuICAgIHN0ZXA/OiBudW1iZXI7XG5cbiAgICB0cmFpbl9sb3NzPzogbnVtYmVyO1xuXG4gICAgdHJhaW5fbWVhbl90b2tlbl9hY2N1cmFjeT86IG51bWJlcjtcblxuICAgIHZhbGlkX2xvc3M/OiBudW1iZXI7XG5cbiAgICB2YWxpZF9tZWFuX3Rva2VuX2FjY3VyYWN5PzogbnVtYmVyO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hlY2twb2ludExpc3RQYXJhbXMgZXh0ZW5kcyBDdXJzb3JQYWdlUGFyYW1zIHt9XG5cbkNoZWNrcG9pbnRzLkZpbmVUdW5pbmdKb2JDaGVja3BvaW50c1BhZ2UgPSBGaW5lVHVuaW5nSm9iQ2hlY2twb2ludHNQYWdlO1xuXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgQ2hlY2twb2ludHMge1xuICBleHBvcnQge1xuICAgIHR5cGUgRmluZVR1bmluZ0pvYkNoZWNrcG9pbnQgYXMgRmluZVR1bmluZ0pvYkNoZWNrcG9pbnQsXG4gICAgRmluZVR1bmluZ0pvYkNoZWNrcG9pbnRzUGFnZSBhcyBGaW5lVHVuaW5nSm9iQ2hlY2twb2ludHNQYWdlLFxuICAgIHR5cGUgQ2hlY2twb2ludExpc3RQYXJhbXMgYXMgQ2hlY2twb2ludExpc3RQYXJhbXMsXG4gIH07XG59XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICcuLi8uLi8uLi9yZXNvdXJjZSc7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gJy4uLy4uLy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgTWV0aG9kc0FQSSBmcm9tICcuLi9tZXRob2RzJztcbmltcG9ydCAqIGFzIENoZWNrcG9pbnRzQVBJIGZyb20gJy4vY2hlY2twb2ludHMnO1xuaW1wb3J0IHtcbiAgQ2hlY2twb2ludExpc3RQYXJhbXMsXG4gIENoZWNrcG9pbnRzLFxuICBGaW5lVHVuaW5nSm9iQ2hlY2twb2ludCxcbiAgRmluZVR1bmluZ0pvYkNoZWNrcG9pbnRzUGFnZSxcbn0gZnJvbSAnLi9jaGVja3BvaW50cyc7XG5pbXBvcnQgeyBDdXJzb3JQYWdlLCB0eXBlIEN1cnNvclBhZ2VQYXJhbXMgfSBmcm9tICcuLi8uLi8uLi9wYWdpbmF0aW9uJztcblxuZXhwb3J0IGNsYXNzIEpvYnMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIGNoZWNrcG9pbnRzOiBDaGVja3BvaW50c0FQSS5DaGVja3BvaW50cyA9IG5ldyBDaGVja3BvaW50c0FQSS5DaGVja3BvaW50cyh0aGlzLl9jbGllbnQpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZmluZS10dW5pbmcgam9iIHdoaWNoIGJlZ2lucyB0aGUgcHJvY2VzcyBvZiBjcmVhdGluZyBhIG5ldyBtb2RlbCBmcm9tXG4gICAqIGEgZ2l2ZW4gZGF0YXNldC5cbiAgICpcbiAgICogUmVzcG9uc2UgaW5jbHVkZXMgZGV0YWlscyBvZiB0aGUgZW5xdWV1ZWQgam9iIGluY2x1ZGluZyBqb2Igc3RhdHVzIGFuZCB0aGUgbmFtZVxuICAgKiBvZiB0aGUgZmluZS10dW5lZCBtb2RlbHMgb25jZSBjb21wbGV0ZS5cbiAgICpcbiAgICogW0xlYXJuIG1vcmUgYWJvdXQgZmluZS10dW5pbmddKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9maW5lLXR1bmluZylcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHNcbiAgICogY29uc3QgZmluZVR1bmluZ0pvYiA9IGF3YWl0IGNsaWVudC5maW5lVHVuaW5nLmpvYnMuY3JlYXRlKHtcbiAgICogICBtb2RlbDogJ2dwdC00by1taW5pJyxcbiAgICogICB0cmFpbmluZ19maWxlOiAnZmlsZS1hYmMxMjMnLFxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICBjcmVhdGUoYm9keTogSm9iQ3JlYXRlUGFyYW1zLCBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IENvcmUuQVBJUHJvbWlzZTxGaW5lVHVuaW5nSm9iPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvZmluZV90dW5pbmcvam9icycsIHsgYm9keSwgLi4ub3B0aW9ucyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgaW5mbyBhYm91dCBhIGZpbmUtdHVuaW5nIGpvYi5cbiAgICpcbiAgICogW0xlYXJuIG1vcmUgYWJvdXQgZmluZS10dW5pbmddKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9maW5lLXR1bmluZylcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHNcbiAgICogY29uc3QgZmluZVR1bmluZ0pvYiA9IGF3YWl0IGNsaWVudC5maW5lVHVuaW5nLmpvYnMucmV0cmlldmUoXG4gICAqICAgJ2Z0LUFGMVdvUnFkM2FKQUhzcWM5Tlk3aUw4RicsXG4gICAqICk7XG4gICAqIGBgYFxuICAgKi9cbiAgcmV0cmlldmUoZmluZVR1bmluZ0pvYklkOiBzdHJpbmcsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5BUElQcm9taXNlPEZpbmVUdW5pbmdKb2I+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL2ZpbmVfdHVuaW5nL2pvYnMvJHtmaW5lVHVuaW5nSm9iSWR9YCwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogTGlzdCB5b3VyIG9yZ2FuaXphdGlvbidzIGZpbmUtdHVuaW5nIGpvYnNcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHNcbiAgICogLy8gQXV0b21hdGljYWxseSBmZXRjaGVzIG1vcmUgcGFnZXMgYXMgbmVlZGVkLlxuICAgKiBmb3IgYXdhaXQgKGNvbnN0IGZpbmVUdW5pbmdKb2Igb2YgY2xpZW50LmZpbmVUdW5pbmcuam9icy5saXN0KCkpIHtcbiAgICogICAvLyAuLi5cbiAgICogfVxuICAgKiBgYGBcbiAgICovXG4gIGxpc3QoXG4gICAgcXVlcnk/OiBKb2JMaXN0UGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLlBhZ2VQcm9taXNlPEZpbmVUdW5pbmdKb2JzUGFnZSwgRmluZVR1bmluZ0pvYj47XG4gIGxpc3Qob3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLlBhZ2VQcm9taXNlPEZpbmVUdW5pbmdKb2JzUGFnZSwgRmluZVR1bmluZ0pvYj47XG4gIGxpc3QoXG4gICAgcXVlcnk6IEpvYkxpc3RQYXJhbXMgfCBDb3JlLlJlcXVlc3RPcHRpb25zID0ge30sXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuUGFnZVByb21pc2U8RmluZVR1bmluZ0pvYnNQYWdlLCBGaW5lVHVuaW5nSm9iPiB7XG4gICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5saXN0KHt9LCBxdWVyeSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdCgnL2ZpbmVfdHVuaW5nL2pvYnMnLCBGaW5lVHVuaW5nSm9ic1BhZ2UsIHsgcXVlcnksIC4uLm9wdGlvbnMgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW1tZWRpYXRlbHkgY2FuY2VsIGEgZmluZS10dW5lIGpvYi5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHNcbiAgICogY29uc3QgZmluZVR1bmluZ0pvYiA9IGF3YWl0IGNsaWVudC5maW5lVHVuaW5nLmpvYnMuY2FuY2VsKFxuICAgKiAgICdmdC1BRjFXb1JxZDNhSkFIc3FjOU5ZN2lMOEYnLFxuICAgKiApO1xuICAgKiBgYGBcbiAgICovXG4gIGNhbmNlbChmaW5lVHVuaW5nSm9iSWQ6IHN0cmluZywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkFQSVByb21pc2U8RmluZVR1bmluZ0pvYj4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL2ZpbmVfdHVuaW5nL2pvYnMvJHtmaW5lVHVuaW5nSm9iSWR9L2NhbmNlbGAsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBzdGF0dXMgdXBkYXRlcyBmb3IgYSBmaW5lLXR1bmluZyBqb2IuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHRzXG4gICAqIC8vIEF1dG9tYXRpY2FsbHkgZmV0Y2hlcyBtb3JlIHBhZ2VzIGFzIG5lZWRlZC5cbiAgICogZm9yIGF3YWl0IChjb25zdCBmaW5lVHVuaW5nSm9iRXZlbnQgb2YgY2xpZW50LmZpbmVUdW5pbmcuam9icy5saXN0RXZlbnRzKFxuICAgKiAgICdmdC1BRjFXb1JxZDNhSkFIc3FjOU5ZN2lMOEYnLFxuICAgKiApKSB7XG4gICAqICAgLy8gLi4uXG4gICAqIH1cbiAgICogYGBgXG4gICAqL1xuICBsaXN0RXZlbnRzKFxuICAgIGZpbmVUdW5pbmdKb2JJZDogc3RyaW5nLFxuICAgIHF1ZXJ5PzogSm9iTGlzdEV2ZW50c1BhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5QYWdlUHJvbWlzZTxGaW5lVHVuaW5nSm9iRXZlbnRzUGFnZSwgRmluZVR1bmluZ0pvYkV2ZW50PjtcbiAgbGlzdEV2ZW50cyhcbiAgICBmaW5lVHVuaW5nSm9iSWQ6IHN0cmluZyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5QYWdlUHJvbWlzZTxGaW5lVHVuaW5nSm9iRXZlbnRzUGFnZSwgRmluZVR1bmluZ0pvYkV2ZW50PjtcbiAgbGlzdEV2ZW50cyhcbiAgICBmaW5lVHVuaW5nSm9iSWQ6IHN0cmluZyxcbiAgICBxdWVyeTogSm9iTGlzdEV2ZW50c1BhcmFtcyB8IENvcmUuUmVxdWVzdE9wdGlvbnMgPSB7fSxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5QYWdlUHJvbWlzZTxGaW5lVHVuaW5nSm9iRXZlbnRzUGFnZSwgRmluZVR1bmluZ0pvYkV2ZW50PiB7XG4gICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5saXN0RXZlbnRzKGZpbmVUdW5pbmdKb2JJZCwge30sIHF1ZXJ5KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KGAvZmluZV90dW5pbmcvam9icy8ke2ZpbmVUdW5pbmdKb2JJZH0vZXZlbnRzYCwgRmluZVR1bmluZ0pvYkV2ZW50c1BhZ2UsIHtcbiAgICAgIHF1ZXJ5LFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXVzZSBhIGZpbmUtdHVuZSBqb2IuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHRzXG4gICAqIGNvbnN0IGZpbmVUdW5pbmdKb2IgPSBhd2FpdCBjbGllbnQuZmluZVR1bmluZy5qb2JzLnBhdXNlKFxuICAgKiAgICdmdC1BRjFXb1JxZDNhSkFIc3FjOU5ZN2lMOEYnLFxuICAgKiApO1xuICAgKiBgYGBcbiAgICovXG4gIHBhdXNlKGZpbmVUdW5pbmdKb2JJZDogc3RyaW5nLCBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IENvcmUuQVBJUHJvbWlzZTxGaW5lVHVuaW5nSm9iPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvZmluZV90dW5pbmcvam9icy8ke2ZpbmVUdW5pbmdKb2JJZH0vcGF1c2VgLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXN1bWUgYSBmaW5lLXR1bmUgam9iLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0c1xuICAgKiBjb25zdCBmaW5lVHVuaW5nSm9iID0gYXdhaXQgY2xpZW50LmZpbmVUdW5pbmcuam9icy5yZXN1bWUoXG4gICAqICAgJ2Z0LUFGMVdvUnFkM2FKQUhzcWM5Tlk3aUw4RicsXG4gICAqICk7XG4gICAqIGBgYFxuICAgKi9cbiAgcmVzdW1lKGZpbmVUdW5pbmdKb2JJZDogc3RyaW5nLCBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IENvcmUuQVBJUHJvbWlzZTxGaW5lVHVuaW5nSm9iPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvZmluZV90dW5pbmcvam9icy8ke2ZpbmVUdW5pbmdKb2JJZH0vcmVzdW1lYCwgb3B0aW9ucyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZpbmVUdW5pbmdKb2JzUGFnZSBleHRlbmRzIEN1cnNvclBhZ2U8RmluZVR1bmluZ0pvYj4ge31cblxuZXhwb3J0IGNsYXNzIEZpbmVUdW5pbmdKb2JFdmVudHNQYWdlIGV4dGVuZHMgQ3Vyc29yUGFnZTxGaW5lVHVuaW5nSm9iRXZlbnQ+IHt9XG5cbi8qKlxuICogVGhlIGBmaW5lX3R1bmluZy5qb2JgIG9iamVjdCByZXByZXNlbnRzIGEgZmluZS10dW5pbmcgam9iIHRoYXQgaGFzIGJlZW4gY3JlYXRlZFxuICogdGhyb3VnaCB0aGUgQVBJLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEZpbmVUdW5pbmdKb2Ige1xuICAvKipcbiAgICogVGhlIG9iamVjdCBpZGVudGlmaWVyLCB3aGljaCBjYW4gYmUgcmVmZXJlbmNlZCBpbiB0aGUgQVBJIGVuZHBvaW50cy5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBVbml4IHRpbWVzdGFtcCAoaW4gc2Vjb25kcykgZm9yIHdoZW4gdGhlIGZpbmUtdHVuaW5nIGpvYiB3YXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWRfYXQ6IG51bWJlcjtcblxuICAvKipcbiAgICogRm9yIGZpbmUtdHVuaW5nIGpvYnMgdGhhdCBoYXZlIGBmYWlsZWRgLCB0aGlzIHdpbGwgY29udGFpbiBtb3JlIGluZm9ybWF0aW9uIG9uXG4gICAqIHRoZSBjYXVzZSBvZiB0aGUgZmFpbHVyZS5cbiAgICovXG4gIGVycm9yOiBGaW5lVHVuaW5nSm9iLkVycm9yIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGZpbmUtdHVuZWQgbW9kZWwgdGhhdCBpcyBiZWluZyBjcmVhdGVkLiBUaGUgdmFsdWUgd2lsbCBiZSBudWxsXG4gICAqIGlmIHRoZSBmaW5lLXR1bmluZyBqb2IgaXMgc3RpbGwgcnVubmluZy5cbiAgICovXG4gIGZpbmVfdHVuZWRfbW9kZWw6IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBVbml4IHRpbWVzdGFtcCAoaW4gc2Vjb25kcykgZm9yIHdoZW4gdGhlIGZpbmUtdHVuaW5nIGpvYiB3YXMgZmluaXNoZWQuIFRoZVxuICAgKiB2YWx1ZSB3aWxsIGJlIG51bGwgaWYgdGhlIGZpbmUtdHVuaW5nIGpvYiBpcyBzdGlsbCBydW5uaW5nLlxuICAgKi9cbiAgZmluaXNoZWRfYXQ6IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBoeXBlcnBhcmFtZXRlcnMgdXNlZCBmb3IgdGhlIGZpbmUtdHVuaW5nIGpvYi4gVGhpcyB2YWx1ZSB3aWxsIG9ubHkgYmVcbiAgICogcmV0dXJuZWQgd2hlbiBydW5uaW5nIGBzdXBlcnZpc2VkYCBqb2JzLlxuICAgKi9cbiAgaHlwZXJwYXJhbWV0ZXJzOiBGaW5lVHVuaW5nSm9iLkh5cGVycGFyYW1ldGVycztcblxuICAvKipcbiAgICogVGhlIGJhc2UgbW9kZWwgdGhhdCBpcyBiZWluZyBmaW5lLXR1bmVkLlxuICAgKi9cbiAgbW9kZWw6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG9iamVjdCB0eXBlLCB3aGljaCBpcyBhbHdheXMgXCJmaW5lX3R1bmluZy5qb2JcIi5cbiAgICovXG4gIG9iamVjdDogJ2ZpbmVfdHVuaW5nLmpvYic7XG5cbiAgLyoqXG4gICAqIFRoZSBvcmdhbml6YXRpb24gdGhhdCBvd25zIHRoZSBmaW5lLXR1bmluZyBqb2IuXG4gICAqL1xuICBvcmdhbml6YXRpb25faWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGNvbXBpbGVkIHJlc3VsdHMgZmlsZSBJRChzKSBmb3IgdGhlIGZpbmUtdHVuaW5nIGpvYi4gWW91IGNhbiByZXRyaWV2ZSB0aGVcbiAgICogcmVzdWx0cyB3aXRoIHRoZVxuICAgKiBbRmlsZXMgQVBJXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2ZpbGVzL3JldHJpZXZlLWNvbnRlbnRzKS5cbiAgICovXG4gIHJlc3VsdF9maWxlczogQXJyYXk8c3RyaW5nPjtcblxuICAvKipcbiAgICogVGhlIHNlZWQgdXNlZCBmb3IgdGhlIGZpbmUtdHVuaW5nIGpvYi5cbiAgICovXG4gIHNlZWQ6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgc3RhdHVzIG9mIHRoZSBmaW5lLXR1bmluZyBqb2IsIHdoaWNoIGNhbiBiZSBlaXRoZXJcbiAgICogYHZhbGlkYXRpbmdfZmlsZXNgLCBgcXVldWVkYCwgYHJ1bm5pbmdgLCBgc3VjY2VlZGVkYCwgYGZhaWxlZGAsIG9yIGBjYW5jZWxsZWRgLlxuICAgKi9cbiAgc3RhdHVzOiAndmFsaWRhdGluZ19maWxlcycgfCAncXVldWVkJyB8ICdydW5uaW5nJyB8ICdzdWNjZWVkZWQnIHwgJ2ZhaWxlZCcgfCAnY2FuY2VsbGVkJztcblxuICAvKipcbiAgICogVGhlIHRvdGFsIG51bWJlciBvZiBiaWxsYWJsZSB0b2tlbnMgcHJvY2Vzc2VkIGJ5IHRoaXMgZmluZS10dW5pbmcgam9iLiBUaGUgdmFsdWVcbiAgICogd2lsbCBiZSBudWxsIGlmIHRoZSBmaW5lLXR1bmluZyBqb2IgaXMgc3RpbGwgcnVubmluZy5cbiAgICovXG4gIHRyYWluZWRfdG9rZW5zOiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgZmlsZSBJRCB1c2VkIGZvciB0cmFpbmluZy4gWW91IGNhbiByZXRyaWV2ZSB0aGUgdHJhaW5pbmcgZGF0YSB3aXRoIHRoZVxuICAgKiBbRmlsZXMgQVBJXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2ZpbGVzL3JldHJpZXZlLWNvbnRlbnRzKS5cbiAgICovXG4gIHRyYWluaW5nX2ZpbGU6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGZpbGUgSUQgdXNlZCBmb3IgdmFsaWRhdGlvbi4gWW91IGNhbiByZXRyaWV2ZSB0aGUgdmFsaWRhdGlvbiByZXN1bHRzIHdpdGhcbiAgICogdGhlXG4gICAqIFtGaWxlcyBBUEldKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvZmlsZXMvcmV0cmlldmUtY29udGVudHMpLlxuICAgKi9cbiAgdmFsaWRhdGlvbl9maWxlOiBzdHJpbmcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpIGZvciB3aGVuIHRoZSBmaW5lLXR1bmluZyBqb2IgaXMgZXN0aW1hdGVkIHRvXG4gICAqIGZpbmlzaC4gVGhlIHZhbHVlIHdpbGwgYmUgbnVsbCBpZiB0aGUgZmluZS10dW5pbmcgam9iIGlzIG5vdCBydW5uaW5nLlxuICAgKi9cbiAgZXN0aW1hdGVkX2ZpbmlzaD86IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEEgbGlzdCBvZiBpbnRlZ3JhdGlvbnMgdG8gZW5hYmxlIGZvciB0aGlzIGZpbmUtdHVuaW5nIGpvYi5cbiAgICovXG4gIGludGVncmF0aW9ucz86IEFycmF5PEZpbmVUdW5pbmdKb2JXYW5kYkludGVncmF0aW9uT2JqZWN0PiB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBtZXRob2QgdXNlZCBmb3IgZmluZS10dW5pbmcuXG4gICAqL1xuICBtZXRob2Q/OiBGaW5lVHVuaW5nSm9iLk1ldGhvZDtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBGaW5lVHVuaW5nSm9iIHtcbiAgLyoqXG4gICAqIEZvciBmaW5lLXR1bmluZyBqb2JzIHRoYXQgaGF2ZSBgZmFpbGVkYCwgdGhpcyB3aWxsIGNvbnRhaW4gbW9yZSBpbmZvcm1hdGlvbiBvblxuICAgKiB0aGUgY2F1c2Ugb2YgdGhlIGZhaWx1cmUuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIEVycm9yIHtcbiAgICAvKipcbiAgICAgKiBBIG1hY2hpbmUtcmVhZGFibGUgZXJyb3IgY29kZS5cbiAgICAgKi9cbiAgICBjb2RlOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBIGh1bWFuLXJlYWRhYmxlIGVycm9yIG1lc3NhZ2UuXG4gICAgICovXG4gICAgbWVzc2FnZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHBhcmFtZXRlciB0aGF0IHdhcyBpbnZhbGlkLCB1c3VhbGx5IGB0cmFpbmluZ19maWxlYCBvciBgdmFsaWRhdGlvbl9maWxlYC5cbiAgICAgKiBUaGlzIGZpZWxkIHdpbGwgYmUgbnVsbCBpZiB0aGUgZmFpbHVyZSB3YXMgbm90IHBhcmFtZXRlci1zcGVjaWZpYy5cbiAgICAgKi9cbiAgICBwYXJhbTogc3RyaW5nIHwgbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgaHlwZXJwYXJhbWV0ZXJzIHVzZWQgZm9yIHRoZSBmaW5lLXR1bmluZyBqb2IuIFRoaXMgdmFsdWUgd2lsbCBvbmx5IGJlXG4gICAqIHJldHVybmVkIHdoZW4gcnVubmluZyBgc3VwZXJ2aXNlZGAgam9icy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgSHlwZXJwYXJhbWV0ZXJzIHtcbiAgICAvKipcbiAgICAgKiBOdW1iZXIgb2YgZXhhbXBsZXMgaW4gZWFjaCBiYXRjaC4gQSBsYXJnZXIgYmF0Y2ggc2l6ZSBtZWFucyB0aGF0IG1vZGVsXG4gICAgICogcGFyYW1ldGVycyBhcmUgdXBkYXRlZCBsZXNzIGZyZXF1ZW50bHksIGJ1dCB3aXRoIGxvd2VyIHZhcmlhbmNlLlxuICAgICAqL1xuICAgIGJhdGNoX3NpemU/OiB1bmtub3duIHwgJ2F1dG8nIHwgbnVtYmVyIHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFNjYWxpbmcgZmFjdG9yIGZvciB0aGUgbGVhcm5pbmcgcmF0ZS4gQSBzbWFsbGVyIGxlYXJuaW5nIHJhdGUgbWF5IGJlIHVzZWZ1bCB0b1xuICAgICAqIGF2b2lkIG92ZXJmaXR0aW5nLlxuICAgICAqL1xuICAgIGxlYXJuaW5nX3JhdGVfbXVsdGlwbGllcj86ICdhdXRvJyB8IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgZXBvY2hzIHRvIHRyYWluIHRoZSBtb2RlbCBmb3IuIEFuIGVwb2NoIHJlZmVycyB0byBvbmUgZnVsbCBjeWNsZVxuICAgICAqIHRocm91Z2ggdGhlIHRyYWluaW5nIGRhdGFzZXQuXG4gICAgICovXG4gICAgbl9lcG9jaHM/OiAnYXV0bycgfCBudW1iZXI7XG4gIH1cblxuICAvKipcbiAgICogVGhlIG1ldGhvZCB1c2VkIGZvciBmaW5lLXR1bmluZy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgTWV0aG9kIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiBtZXRob2QuIElzIGVpdGhlciBgc3VwZXJ2aXNlZGAsIGBkcG9gLCBvciBgcmVpbmZvcmNlbWVudGAuXG4gICAgICovXG4gICAgdHlwZTogJ3N1cGVydmlzZWQnIHwgJ2RwbycgfCAncmVpbmZvcmNlbWVudCc7XG5cbiAgICAvKipcbiAgICAgKiBDb25maWd1cmF0aW9uIGZvciB0aGUgRFBPIGZpbmUtdHVuaW5nIG1ldGhvZC5cbiAgICAgKi9cbiAgICBkcG8/OiBNZXRob2RzQVBJLkRwb01ldGhvZDtcblxuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyYXRpb24gZm9yIHRoZSByZWluZm9yY2VtZW50IGZpbmUtdHVuaW5nIG1ldGhvZC5cbiAgICAgKi9cbiAgICByZWluZm9yY2VtZW50PzogTWV0aG9kc0FQSS5SZWluZm9yY2VtZW50TWV0aG9kO1xuXG4gICAgLyoqXG4gICAgICogQ29uZmlndXJhdGlvbiBmb3IgdGhlIHN1cGVydmlzZWQgZmluZS10dW5pbmcgbWV0aG9kLlxuICAgICAqL1xuICAgIHN1cGVydmlzZWQ/OiBNZXRob2RzQVBJLlN1cGVydmlzZWRNZXRob2Q7XG4gIH1cbn1cblxuLyoqXG4gKiBGaW5lLXR1bmluZyBqb2IgZXZlbnQgb2JqZWN0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRmluZVR1bmluZ0pvYkV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBvYmplY3QgaWRlbnRpZmllci5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBVbml4IHRpbWVzdGFtcCAoaW4gc2Vjb25kcykgZm9yIHdoZW4gdGhlIGZpbmUtdHVuaW5nIGpvYiB3YXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWRfYXQ6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGxvZyBsZXZlbCBvZiB0aGUgZXZlbnQuXG4gICAqL1xuICBsZXZlbDogJ2luZm8nIHwgJ3dhcm4nIHwgJ2Vycm9yJztcblxuICAvKipcbiAgICogVGhlIG1lc3NhZ2Ugb2YgdGhlIGV2ZW50LlxuICAgKi9cbiAgbWVzc2FnZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgb2JqZWN0IHR5cGUsIHdoaWNoIGlzIGFsd2F5cyBcImZpbmVfdHVuaW5nLmpvYi5ldmVudFwiLlxuICAgKi9cbiAgb2JqZWN0OiAnZmluZV90dW5pbmcuam9iLmV2ZW50JztcblxuICAvKipcbiAgICogVGhlIGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZSBldmVudC5cbiAgICovXG4gIGRhdGE/OiB1bmtub3duO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiBldmVudC5cbiAgICovXG4gIHR5cGU/OiAnbWVzc2FnZScgfCAnbWV0cmljcyc7XG59XG5cbmV4cG9ydCB0eXBlIEZpbmVUdW5pbmdKb2JJbnRlZ3JhdGlvbiA9IEZpbmVUdW5pbmdKb2JXYW5kYkludGVncmF0aW9uT2JqZWN0O1xuXG4vKipcbiAqIFRoZSBzZXR0aW5ncyBmb3IgeW91ciBpbnRlZ3JhdGlvbiB3aXRoIFdlaWdodHMgYW5kIEJpYXNlcy4gVGhpcyBwYXlsb2FkXG4gKiBzcGVjaWZpZXMgdGhlIHByb2plY3QgdGhhdCBtZXRyaWNzIHdpbGwgYmUgc2VudCB0by4gT3B0aW9uYWxseSwgeW91IGNhbiBzZXQgYW5cbiAqIGV4cGxpY2l0IGRpc3BsYXkgbmFtZSBmb3IgeW91ciBydW4sIGFkZCB0YWdzIHRvIHlvdXIgcnVuLCBhbmQgc2V0IGEgZGVmYXVsdFxuICogZW50aXR5ICh0ZWFtLCB1c2VybmFtZSwgZXRjKSB0byBiZSBhc3NvY2lhdGVkIHdpdGggeW91ciBydW4uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRmluZVR1bmluZ0pvYldhbmRiSW50ZWdyYXRpb24ge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIHByb2plY3QgdGhhdCB0aGUgbmV3IHJ1biB3aWxsIGJlIGNyZWF0ZWQgdW5kZXIuXG4gICAqL1xuICBwcm9qZWN0OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBlbnRpdHkgdG8gdXNlIGZvciB0aGUgcnVuLiBUaGlzIGFsbG93cyB5b3UgdG8gc2V0IHRoZSB0ZWFtIG9yIHVzZXJuYW1lIG9mXG4gICAqIHRoZSBXYW5kQiB1c2VyIHRoYXQgeW91IHdvdWxkIGxpa2UgYXNzb2NpYXRlZCB3aXRoIHRoZSBydW4uIElmIG5vdCBzZXQsIHRoZVxuICAgKiBkZWZhdWx0IGVudGl0eSBmb3IgdGhlIHJlZ2lzdGVyZWQgV2FuZEIgQVBJIGtleSBpcyB1c2VkLlxuICAgKi9cbiAgZW50aXR5Pzogc3RyaW5nIHwgbnVsbDtcblxuICAvKipcbiAgICogQSBkaXNwbGF5IG5hbWUgdG8gc2V0IGZvciB0aGUgcnVuLiBJZiBub3Qgc2V0LCB3ZSB3aWxsIHVzZSB0aGUgSm9iIElEIGFzIHRoZVxuICAgKiBuYW1lLlxuICAgKi9cbiAgbmFtZT86IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEEgbGlzdCBvZiB0YWdzIHRvIGJlIGF0dGFjaGVkIHRvIHRoZSBuZXdseSBjcmVhdGVkIHJ1bi4gVGhlc2UgdGFncyBhcmUgcGFzc2VkXG4gICAqIHRocm91Z2ggZGlyZWN0bHkgdG8gV2FuZEIuIFNvbWUgZGVmYXVsdCB0YWdzIGFyZSBnZW5lcmF0ZWQgYnkgT3BlbkFJOlxuICAgKiBcIm9wZW5haS9maW5ldHVuZVwiLCBcIm9wZW5haS97YmFzZS1tb2RlbH1cIiwgXCJvcGVuYWkve2Z0am9iLWFiY2RlZn1cIi5cbiAgICovXG4gIHRhZ3M/OiBBcnJheTxzdHJpbmc+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbmVUdW5pbmdKb2JXYW5kYkludGVncmF0aW9uT2JqZWN0IHtcbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBpbnRlZ3JhdGlvbiBiZWluZyBlbmFibGVkIGZvciB0aGUgZmluZS10dW5pbmcgam9iXG4gICAqL1xuICB0eXBlOiAnd2FuZGInO1xuXG4gIC8qKlxuICAgKiBUaGUgc2V0dGluZ3MgZm9yIHlvdXIgaW50ZWdyYXRpb24gd2l0aCBXZWlnaHRzIGFuZCBCaWFzZXMuIFRoaXMgcGF5bG9hZFxuICAgKiBzcGVjaWZpZXMgdGhlIHByb2plY3QgdGhhdCBtZXRyaWNzIHdpbGwgYmUgc2VudCB0by4gT3B0aW9uYWxseSwgeW91IGNhbiBzZXQgYW5cbiAgICogZXhwbGljaXQgZGlzcGxheSBuYW1lIGZvciB5b3VyIHJ1biwgYWRkIHRhZ3MgdG8geW91ciBydW4sIGFuZCBzZXQgYSBkZWZhdWx0XG4gICAqIGVudGl0eSAodGVhbSwgdXNlcm5hbWUsIGV0YykgdG8gYmUgYXNzb2NpYXRlZCB3aXRoIHlvdXIgcnVuLlxuICAgKi9cbiAgd2FuZGI6IEZpbmVUdW5pbmdKb2JXYW5kYkludGVncmF0aW9uO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEpvYkNyZWF0ZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgbW9kZWwgdG8gZmluZS10dW5lLiBZb3UgY2FuIHNlbGVjdCBvbmUgb2YgdGhlXG4gICAqIFtzdXBwb3J0ZWQgbW9kZWxzXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvZmluZS10dW5pbmcjd2hpY2gtbW9kZWxzLWNhbi1iZS1maW5lLXR1bmVkKS5cbiAgICovXG4gIG1vZGVsOiAoc3RyaW5nICYge30pIHwgJ2JhYmJhZ2UtMDAyJyB8ICdkYXZpbmNpLTAwMicgfCAnZ3B0LTMuNS10dXJibycgfCAnZ3B0LTRvLW1pbmknO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgYW4gdXBsb2FkZWQgZmlsZSB0aGF0IGNvbnRhaW5zIHRyYWluaW5nIGRhdGEuXG4gICAqXG4gICAqIFNlZSBbdXBsb2FkIGZpbGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvZmlsZXMvY3JlYXRlKVxuICAgKiBmb3IgaG93IHRvIHVwbG9hZCBhIGZpbGUuXG4gICAqXG4gICAqIFlvdXIgZGF0YXNldCBtdXN0IGJlIGZvcm1hdHRlZCBhcyBhIEpTT05MIGZpbGUuIEFkZGl0aW9uYWxseSwgeW91IG11c3QgdXBsb2FkXG4gICAqIHlvdXIgZmlsZSB3aXRoIHRoZSBwdXJwb3NlIGBmaW5lLXR1bmVgLlxuICAgKlxuICAgKiBUaGUgY29udGVudHMgb2YgdGhlIGZpbGUgc2hvdWxkIGRpZmZlciBkZXBlbmRpbmcgb24gaWYgdGhlIG1vZGVsIHVzZXMgdGhlXG4gICAqIFtjaGF0XShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2ZpbmUtdHVuaW5nL2NoYXQtaW5wdXQpLFxuICAgKiBbY29tcGxldGlvbnNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvZmluZS10dW5pbmcvY29tcGxldGlvbnMtaW5wdXQpXG4gICAqIGZvcm1hdCwgb3IgaWYgdGhlIGZpbmUtdHVuaW5nIG1ldGhvZCB1c2VzIHRoZVxuICAgKiBbcHJlZmVyZW5jZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maW5lLXR1bmluZy9wcmVmZXJlbmNlLWlucHV0KVxuICAgKiBmb3JtYXQuXG4gICAqXG4gICAqIFNlZSB0aGUgW2ZpbmUtdHVuaW5nIGd1aWRlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvZmluZS10dW5pbmcpXG4gICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICB0cmFpbmluZ19maWxlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIFRoZSBoeXBlcnBhcmFtZXRlcnMgdXNlZCBmb3IgdGhlIGZpbmUtdHVuaW5nIGpvYi4gVGhpcyB2YWx1ZSBpcyBub3dcbiAgICogZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBgbWV0aG9kYCwgYW5kIHNob3VsZCBiZSBwYXNzZWQgaW4gdW5kZXIgdGhlIGBtZXRob2RgXG4gICAqIHBhcmFtZXRlci5cbiAgICovXG4gIGh5cGVycGFyYW1ldGVycz86IEpvYkNyZWF0ZVBhcmFtcy5IeXBlcnBhcmFtZXRlcnM7XG5cbiAgLyoqXG4gICAqIEEgbGlzdCBvZiBpbnRlZ3JhdGlvbnMgdG8gZW5hYmxlIGZvciB5b3VyIGZpbmUtdHVuaW5nIGpvYi5cbiAgICovXG4gIGludGVncmF0aW9ucz86IEFycmF5PEpvYkNyZWF0ZVBhcmFtcy5JbnRlZ3JhdGlvbj4gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgbWV0aG9kIHVzZWQgZm9yIGZpbmUtdHVuaW5nLlxuICAgKi9cbiAgbWV0aG9kPzogSm9iQ3JlYXRlUGFyYW1zLk1ldGhvZDtcblxuICAvKipcbiAgICogVGhlIHNlZWQgY29udHJvbHMgdGhlIHJlcHJvZHVjaWJpbGl0eSBvZiB0aGUgam9iLiBQYXNzaW5nIGluIHRoZSBzYW1lIHNlZWQgYW5kXG4gICAqIGpvYiBwYXJhbWV0ZXJzIHNob3VsZCBwcm9kdWNlIHRoZSBzYW1lIHJlc3VsdHMsIGJ1dCBtYXkgZGlmZmVyIGluIHJhcmUgY2FzZXMuIElmXG4gICAqIGEgc2VlZCBpcyBub3Qgc3BlY2lmaWVkLCBvbmUgd2lsbCBiZSBnZW5lcmF0ZWQgZm9yIHlvdS5cbiAgICovXG4gIHNlZWQ/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBBIHN0cmluZyBvZiB1cCB0byA2NCBjaGFyYWN0ZXJzIHRoYXQgd2lsbCBiZSBhZGRlZCB0byB5b3VyIGZpbmUtdHVuZWQgbW9kZWxcbiAgICogbmFtZS5cbiAgICpcbiAgICogRm9yIGV4YW1wbGUsIGEgYHN1ZmZpeGAgb2YgXCJjdXN0b20tbW9kZWwtbmFtZVwiIHdvdWxkIHByb2R1Y2UgYSBtb2RlbCBuYW1lIGxpa2VcbiAgICogYGZ0OmdwdC00by1taW5pOm9wZW5haTpjdXN0b20tbW9kZWwtbmFtZTo3cDRsVVJlbGAuXG4gICAqL1xuICBzdWZmaXg/OiBzdHJpbmcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgYW4gdXBsb2FkZWQgZmlsZSB0aGF0IGNvbnRhaW5zIHZhbGlkYXRpb24gZGF0YS5cbiAgICpcbiAgICogSWYgeW91IHByb3ZpZGUgdGhpcyBmaWxlLCB0aGUgZGF0YSBpcyB1c2VkIHRvIGdlbmVyYXRlIHZhbGlkYXRpb24gbWV0cmljc1xuICAgKiBwZXJpb2RpY2FsbHkgZHVyaW5nIGZpbmUtdHVuaW5nLiBUaGVzZSBtZXRyaWNzIGNhbiBiZSB2aWV3ZWQgaW4gdGhlIGZpbmUtdHVuaW5nXG4gICAqIHJlc3VsdHMgZmlsZS4gVGhlIHNhbWUgZGF0YSBzaG91bGQgbm90IGJlIHByZXNlbnQgaW4gYm90aCB0cmFpbiBhbmQgdmFsaWRhdGlvblxuICAgKiBmaWxlcy5cbiAgICpcbiAgICogWW91ciBkYXRhc2V0IG11c3QgYmUgZm9ybWF0dGVkIGFzIGEgSlNPTkwgZmlsZS4gWW91IG11c3QgdXBsb2FkIHlvdXIgZmlsZSB3aXRoXG4gICAqIHRoZSBwdXJwb3NlIGBmaW5lLXR1bmVgLlxuICAgKlxuICAgKiBTZWUgdGhlIFtmaW5lLXR1bmluZyBndWlkZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL2ZpbmUtdHVuaW5nKVxuICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgdmFsaWRhdGlvbl9maWxlPzogc3RyaW5nIHwgbnVsbDtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBKb2JDcmVhdGVQYXJhbXMge1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgVGhlIGh5cGVycGFyYW1ldGVycyB1c2VkIGZvciB0aGUgZmluZS10dW5pbmcgam9iLiBUaGlzIHZhbHVlIGlzIG5vd1xuICAgKiBkZXByZWNhdGVkIGluIGZhdm9yIG9mIGBtZXRob2RgLCBhbmQgc2hvdWxkIGJlIHBhc3NlZCBpbiB1bmRlciB0aGUgYG1ldGhvZGBcbiAgICogcGFyYW1ldGVyLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBIeXBlcnBhcmFtZXRlcnMge1xuICAgIC8qKlxuICAgICAqIE51bWJlciBvZiBleGFtcGxlcyBpbiBlYWNoIGJhdGNoLiBBIGxhcmdlciBiYXRjaCBzaXplIG1lYW5zIHRoYXQgbW9kZWxcbiAgICAgKiBwYXJhbWV0ZXJzIGFyZSB1cGRhdGVkIGxlc3MgZnJlcXVlbnRseSwgYnV0IHdpdGggbG93ZXIgdmFyaWFuY2UuXG4gICAgICovXG4gICAgYmF0Y2hfc2l6ZT86ICdhdXRvJyB8IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFNjYWxpbmcgZmFjdG9yIGZvciB0aGUgbGVhcm5pbmcgcmF0ZS4gQSBzbWFsbGVyIGxlYXJuaW5nIHJhdGUgbWF5IGJlIHVzZWZ1bCB0b1xuICAgICAqIGF2b2lkIG92ZXJmaXR0aW5nLlxuICAgICAqL1xuICAgIGxlYXJuaW5nX3JhdGVfbXVsdGlwbGllcj86ICdhdXRvJyB8IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgZXBvY2hzIHRvIHRyYWluIHRoZSBtb2RlbCBmb3IuIEFuIGVwb2NoIHJlZmVycyB0byBvbmUgZnVsbCBjeWNsZVxuICAgICAqIHRocm91Z2ggdGhlIHRyYWluaW5nIGRhdGFzZXQuXG4gICAgICovXG4gICAgbl9lcG9jaHM/OiAnYXV0bycgfCBudW1iZXI7XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIEludGVncmF0aW9uIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiBpbnRlZ3JhdGlvbiB0byBlbmFibGUuIEN1cnJlbnRseSwgb25seSBcIndhbmRiXCIgKFdlaWdodHMgYW5kIEJpYXNlcylcbiAgICAgKiBpcyBzdXBwb3J0ZWQuXG4gICAgICovXG4gICAgdHlwZTogJ3dhbmRiJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBzZXR0aW5ncyBmb3IgeW91ciBpbnRlZ3JhdGlvbiB3aXRoIFdlaWdodHMgYW5kIEJpYXNlcy4gVGhpcyBwYXlsb2FkXG4gICAgICogc3BlY2lmaWVzIHRoZSBwcm9qZWN0IHRoYXQgbWV0cmljcyB3aWxsIGJlIHNlbnQgdG8uIE9wdGlvbmFsbHksIHlvdSBjYW4gc2V0IGFuXG4gICAgICogZXhwbGljaXQgZGlzcGxheSBuYW1lIGZvciB5b3VyIHJ1biwgYWRkIHRhZ3MgdG8geW91ciBydW4sIGFuZCBzZXQgYSBkZWZhdWx0XG4gICAgICogZW50aXR5ICh0ZWFtLCB1c2VybmFtZSwgZXRjKSB0byBiZSBhc3NvY2lhdGVkIHdpdGggeW91ciBydW4uXG4gICAgICovXG4gICAgd2FuZGI6IEludGVncmF0aW9uLldhbmRiO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBJbnRlZ3JhdGlvbiB7XG4gICAgLyoqXG4gICAgICogVGhlIHNldHRpbmdzIGZvciB5b3VyIGludGVncmF0aW9uIHdpdGggV2VpZ2h0cyBhbmQgQmlhc2VzLiBUaGlzIHBheWxvYWRcbiAgICAgKiBzcGVjaWZpZXMgdGhlIHByb2plY3QgdGhhdCBtZXRyaWNzIHdpbGwgYmUgc2VudCB0by4gT3B0aW9uYWxseSwgeW91IGNhbiBzZXQgYW5cbiAgICAgKiBleHBsaWNpdCBkaXNwbGF5IG5hbWUgZm9yIHlvdXIgcnVuLCBhZGQgdGFncyB0byB5b3VyIHJ1biwgYW5kIHNldCBhIGRlZmF1bHRcbiAgICAgKiBlbnRpdHkgKHRlYW0sIHVzZXJuYW1lLCBldGMpIHRvIGJlIGFzc29jaWF0ZWQgd2l0aCB5b3VyIHJ1bi5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIFdhbmRiIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG5hbWUgb2YgdGhlIHByb2plY3QgdGhhdCB0aGUgbmV3IHJ1biB3aWxsIGJlIGNyZWF0ZWQgdW5kZXIuXG4gICAgICAgKi9cbiAgICAgIHByb2plY3Q6IHN0cmluZztcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgZW50aXR5IHRvIHVzZSBmb3IgdGhlIHJ1bi4gVGhpcyBhbGxvd3MgeW91IHRvIHNldCB0aGUgdGVhbSBvciB1c2VybmFtZSBvZlxuICAgICAgICogdGhlIFdhbmRCIHVzZXIgdGhhdCB5b3Ugd291bGQgbGlrZSBhc3NvY2lhdGVkIHdpdGggdGhlIHJ1bi4gSWYgbm90IHNldCwgdGhlXG4gICAgICAgKiBkZWZhdWx0IGVudGl0eSBmb3IgdGhlIHJlZ2lzdGVyZWQgV2FuZEIgQVBJIGtleSBpcyB1c2VkLlxuICAgICAgICovXG4gICAgICBlbnRpdHk/OiBzdHJpbmcgfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIEEgZGlzcGxheSBuYW1lIHRvIHNldCBmb3IgdGhlIHJ1bi4gSWYgbm90IHNldCwgd2Ugd2lsbCB1c2UgdGhlIEpvYiBJRCBhcyB0aGVcbiAgICAgICAqIG5hbWUuXG4gICAgICAgKi9cbiAgICAgIG5hbWU/OiBzdHJpbmcgfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIEEgbGlzdCBvZiB0YWdzIHRvIGJlIGF0dGFjaGVkIHRvIHRoZSBuZXdseSBjcmVhdGVkIHJ1bi4gVGhlc2UgdGFncyBhcmUgcGFzc2VkXG4gICAgICAgKiB0aHJvdWdoIGRpcmVjdGx5IHRvIFdhbmRCLiBTb21lIGRlZmF1bHQgdGFncyBhcmUgZ2VuZXJhdGVkIGJ5IE9wZW5BSTpcbiAgICAgICAqIFwib3BlbmFpL2ZpbmV0dW5lXCIsIFwib3BlbmFpL3tiYXNlLW1vZGVsfVwiLCBcIm9wZW5haS97ZnRqb2ItYWJjZGVmfVwiLlxuICAgICAgICovXG4gICAgICB0YWdzPzogQXJyYXk8c3RyaW5nPjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhlIG1ldGhvZCB1c2VkIGZvciBmaW5lLXR1bmluZy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgTWV0aG9kIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiBtZXRob2QuIElzIGVpdGhlciBgc3VwZXJ2aXNlZGAsIGBkcG9gLCBvciBgcmVpbmZvcmNlbWVudGAuXG4gICAgICovXG4gICAgdHlwZTogJ3N1cGVydmlzZWQnIHwgJ2RwbycgfCAncmVpbmZvcmNlbWVudCc7XG5cbiAgICAvKipcbiAgICAgKiBDb25maWd1cmF0aW9uIGZvciB0aGUgRFBPIGZpbmUtdHVuaW5nIG1ldGhvZC5cbiAgICAgKi9cbiAgICBkcG8/OiBNZXRob2RzQVBJLkRwb01ldGhvZDtcblxuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyYXRpb24gZm9yIHRoZSByZWluZm9yY2VtZW50IGZpbmUtdHVuaW5nIG1ldGhvZC5cbiAgICAgKi9cbiAgICByZWluZm9yY2VtZW50PzogTWV0aG9kc0FQSS5SZWluZm9yY2VtZW50TWV0aG9kO1xuXG4gICAgLyoqXG4gICAgICogQ29uZmlndXJhdGlvbiBmb3IgdGhlIHN1cGVydmlzZWQgZmluZS10dW5pbmcgbWV0aG9kLlxuICAgICAqL1xuICAgIHN1cGVydmlzZWQ/OiBNZXRob2RzQVBJLlN1cGVydmlzZWRNZXRob2Q7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBKb2JMaXN0UGFyYW1zIGV4dGVuZHMgQ3Vyc29yUGFnZVBhcmFtcyB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIEpvYkxpc3RFdmVudHNQYXJhbXMgZXh0ZW5kcyBDdXJzb3JQYWdlUGFyYW1zIHt9XG5cbkpvYnMuRmluZVR1bmluZ0pvYnNQYWdlID0gRmluZVR1bmluZ0pvYnNQYWdlO1xuSm9icy5GaW5lVHVuaW5nSm9iRXZlbnRzUGFnZSA9IEZpbmVUdW5pbmdKb2JFdmVudHNQYWdlO1xuSm9icy5DaGVja3BvaW50cyA9IENoZWNrcG9pbnRzO1xuSm9icy5GaW5lVHVuaW5nSm9iQ2hlY2twb2ludHNQYWdlID0gRmluZVR1bmluZ0pvYkNoZWNrcG9pbnRzUGFnZTtcblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIEpvYnMge1xuICBleHBvcnQge1xuICAgIHR5cGUgRmluZVR1bmluZ0pvYiBhcyBGaW5lVHVuaW5nSm9iLFxuICAgIHR5cGUgRmluZVR1bmluZ0pvYkV2ZW50IGFzIEZpbmVUdW5pbmdKb2JFdmVudCxcbiAgICB0eXBlIEZpbmVUdW5pbmdKb2JJbnRlZ3JhdGlvbiBhcyBGaW5lVHVuaW5nSm9iSW50ZWdyYXRpb24sXG4gICAgdHlwZSBGaW5lVHVuaW5nSm9iV2FuZGJJbnRlZ3JhdGlvbiBhcyBGaW5lVHVuaW5nSm9iV2FuZGJJbnRlZ3JhdGlvbixcbiAgICB0eXBlIEZpbmVUdW5pbmdKb2JXYW5kYkludGVncmF0aW9uT2JqZWN0IGFzIEZpbmVUdW5pbmdKb2JXYW5kYkludGVncmF0aW9uT2JqZWN0LFxuICAgIEZpbmVUdW5pbmdKb2JzUGFnZSBhcyBGaW5lVHVuaW5nSm9ic1BhZ2UsXG4gICAgRmluZVR1bmluZ0pvYkV2ZW50c1BhZ2UgYXMgRmluZVR1bmluZ0pvYkV2ZW50c1BhZ2UsXG4gICAgdHlwZSBKb2JDcmVhdGVQYXJhbXMgYXMgSm9iQ3JlYXRlUGFyYW1zLFxuICAgIHR5cGUgSm9iTGlzdFBhcmFtcyBhcyBKb2JMaXN0UGFyYW1zLFxuICAgIHR5cGUgSm9iTGlzdEV2ZW50c1BhcmFtcyBhcyBKb2JMaXN0RXZlbnRzUGFyYW1zLFxuICB9O1xuXG4gIGV4cG9ydCB7XG4gICAgQ2hlY2twb2ludHMgYXMgQ2hlY2twb2ludHMsXG4gICAgdHlwZSBGaW5lVHVuaW5nSm9iQ2hlY2twb2ludCBhcyBGaW5lVHVuaW5nSm9iQ2hlY2twb2ludCxcbiAgICBGaW5lVHVuaW5nSm9iQ2hlY2twb2ludHNQYWdlIGFzIEZpbmVUdW5pbmdKb2JDaGVja3BvaW50c1BhZ2UsXG4gICAgdHlwZSBDaGVja3BvaW50TGlzdFBhcmFtcyBhcyBDaGVja3BvaW50TGlzdFBhcmFtcyxcbiAgfTtcbn1cbiIsICIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJy4uLy4uL3Jlc291cmNlJztcbmltcG9ydCAqIGFzIE1ldGhvZHNBUEkgZnJvbSAnLi9tZXRob2RzJztcbmltcG9ydCB7XG4gIERwb0h5cGVycGFyYW1ldGVycyxcbiAgRHBvTWV0aG9kLFxuICBNZXRob2RzLFxuICBSZWluZm9yY2VtZW50SHlwZXJwYXJhbWV0ZXJzLFxuICBSZWluZm9yY2VtZW50TWV0aG9kLFxuICBTdXBlcnZpc2VkSHlwZXJwYXJhbWV0ZXJzLFxuICBTdXBlcnZpc2VkTWV0aG9kLFxufSBmcm9tICcuL21ldGhvZHMnO1xuaW1wb3J0ICogYXMgQWxwaGFBUEkgZnJvbSAnLi9hbHBoYS9hbHBoYSc7XG5pbXBvcnQgeyBBbHBoYSB9IGZyb20gJy4vYWxwaGEvYWxwaGEnO1xuaW1wb3J0ICogYXMgQ2hlY2twb2ludHNBUEkgZnJvbSAnLi9jaGVja3BvaW50cy9jaGVja3BvaW50cyc7XG5pbXBvcnQgeyBDaGVja3BvaW50cyB9IGZyb20gJy4vY2hlY2twb2ludHMvY2hlY2twb2ludHMnO1xuaW1wb3J0ICogYXMgSm9ic0FQSSBmcm9tICcuL2pvYnMvam9icyc7XG5pbXBvcnQge1xuICBGaW5lVHVuaW5nSm9iLFxuICBGaW5lVHVuaW5nSm9iRXZlbnQsXG4gIEZpbmVUdW5pbmdKb2JFdmVudHNQYWdlLFxuICBGaW5lVHVuaW5nSm9iSW50ZWdyYXRpb24sXG4gIEZpbmVUdW5pbmdKb2JXYW5kYkludGVncmF0aW9uLFxuICBGaW5lVHVuaW5nSm9iV2FuZGJJbnRlZ3JhdGlvbk9iamVjdCxcbiAgRmluZVR1bmluZ0pvYnNQYWdlLFxuICBKb2JDcmVhdGVQYXJhbXMsXG4gIEpvYkxpc3RFdmVudHNQYXJhbXMsXG4gIEpvYkxpc3RQYXJhbXMsXG4gIEpvYnMsXG59IGZyb20gJy4vam9icy9qb2JzJztcblxuZXhwb3J0IGNsYXNzIEZpbmVUdW5pbmcgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIG1ldGhvZHM6IE1ldGhvZHNBUEkuTWV0aG9kcyA9IG5ldyBNZXRob2RzQVBJLk1ldGhvZHModGhpcy5fY2xpZW50KTtcbiAgam9iczogSm9ic0FQSS5Kb2JzID0gbmV3IEpvYnNBUEkuSm9icyh0aGlzLl9jbGllbnQpO1xuICBjaGVja3BvaW50czogQ2hlY2twb2ludHNBUEkuQ2hlY2twb2ludHMgPSBuZXcgQ2hlY2twb2ludHNBUEkuQ2hlY2twb2ludHModGhpcy5fY2xpZW50KTtcbiAgYWxwaGE6IEFscGhhQVBJLkFscGhhID0gbmV3IEFscGhhQVBJLkFscGhhKHRoaXMuX2NsaWVudCk7XG59XG5cbkZpbmVUdW5pbmcuTWV0aG9kcyA9IE1ldGhvZHM7XG5GaW5lVHVuaW5nLkpvYnMgPSBKb2JzO1xuRmluZVR1bmluZy5GaW5lVHVuaW5nSm9ic1BhZ2UgPSBGaW5lVHVuaW5nSm9ic1BhZ2U7XG5GaW5lVHVuaW5nLkZpbmVUdW5pbmdKb2JFdmVudHNQYWdlID0gRmluZVR1bmluZ0pvYkV2ZW50c1BhZ2U7XG5GaW5lVHVuaW5nLkNoZWNrcG9pbnRzID0gQ2hlY2twb2ludHM7XG5GaW5lVHVuaW5nLkFscGhhID0gQWxwaGE7XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBGaW5lVHVuaW5nIHtcbiAgZXhwb3J0IHtcbiAgICBNZXRob2RzIGFzIE1ldGhvZHMsXG4gICAgdHlwZSBEcG9IeXBlcnBhcmFtZXRlcnMgYXMgRHBvSHlwZXJwYXJhbWV0ZXJzLFxuICAgIHR5cGUgRHBvTWV0aG9kIGFzIERwb01ldGhvZCxcbiAgICB0eXBlIFJlaW5mb3JjZW1lbnRIeXBlcnBhcmFtZXRlcnMgYXMgUmVpbmZvcmNlbWVudEh5cGVycGFyYW1ldGVycyxcbiAgICB0eXBlIFJlaW5mb3JjZW1lbnRNZXRob2QgYXMgUmVpbmZvcmNlbWVudE1ldGhvZCxcbiAgICB0eXBlIFN1cGVydmlzZWRIeXBlcnBhcmFtZXRlcnMgYXMgU3VwZXJ2aXNlZEh5cGVycGFyYW1ldGVycyxcbiAgICB0eXBlIFN1cGVydmlzZWRNZXRob2QgYXMgU3VwZXJ2aXNlZE1ldGhvZCxcbiAgfTtcblxuICBleHBvcnQge1xuICAgIEpvYnMgYXMgSm9icyxcbiAgICB0eXBlIEZpbmVUdW5pbmdKb2IgYXMgRmluZVR1bmluZ0pvYixcbiAgICB0eXBlIEZpbmVUdW5pbmdKb2JFdmVudCBhcyBGaW5lVHVuaW5nSm9iRXZlbnQsXG4gICAgdHlwZSBGaW5lVHVuaW5nSm9iSW50ZWdyYXRpb24gYXMgRmluZVR1bmluZ0pvYkludGVncmF0aW9uLFxuICAgIHR5cGUgRmluZVR1bmluZ0pvYldhbmRiSW50ZWdyYXRpb24gYXMgRmluZVR1bmluZ0pvYldhbmRiSW50ZWdyYXRpb24sXG4gICAgdHlwZSBGaW5lVHVuaW5nSm9iV2FuZGJJbnRlZ3JhdGlvbk9iamVjdCBhcyBGaW5lVHVuaW5nSm9iV2FuZGJJbnRlZ3JhdGlvbk9iamVjdCxcbiAgICBGaW5lVHVuaW5nSm9ic1BhZ2UgYXMgRmluZVR1bmluZ0pvYnNQYWdlLFxuICAgIEZpbmVUdW5pbmdKb2JFdmVudHNQYWdlIGFzIEZpbmVUdW5pbmdKb2JFdmVudHNQYWdlLFxuICAgIHR5cGUgSm9iQ3JlYXRlUGFyYW1zIGFzIEpvYkNyZWF0ZVBhcmFtcyxcbiAgICB0eXBlIEpvYkxpc3RQYXJhbXMgYXMgSm9iTGlzdFBhcmFtcyxcbiAgICB0eXBlIEpvYkxpc3RFdmVudHNQYXJhbXMgYXMgSm9iTGlzdEV2ZW50c1BhcmFtcyxcbiAgfTtcblxuICBleHBvcnQgeyBDaGVja3BvaW50cyBhcyBDaGVja3BvaW50cyB9O1xuXG4gIGV4cG9ydCB7IEFscGhhIGFzIEFscGhhIH07XG59XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICcuLi8uLi9yZXNvdXJjZSc7XG5pbXBvcnQgKiBhcyBSZXNwb25zZXNBUEkgZnJvbSAnLi4vcmVzcG9uc2VzL3Jlc3BvbnNlcyc7XG5cbmV4cG9ydCBjbGFzcyBHcmFkZXJNb2RlbHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7fVxuXG4vKipcbiAqIEEgTGFiZWxNb2RlbEdyYWRlciBvYmplY3Qgd2hpY2ggdXNlcyBhIG1vZGVsIHRvIGFzc2lnbiBsYWJlbHMgdG8gZWFjaCBpdGVtIGluXG4gKiB0aGUgZXZhbHVhdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMYWJlbE1vZGVsR3JhZGVyIHtcbiAgaW5wdXQ6IEFycmF5PExhYmVsTW9kZWxHcmFkZXIuSW5wdXQ+O1xuXG4gIC8qKlxuICAgKiBUaGUgbGFiZWxzIHRvIGFzc2lnbiB0byBlYWNoIGl0ZW0gaW4gdGhlIGV2YWx1YXRpb24uXG4gICAqL1xuICBsYWJlbHM6IEFycmF5PHN0cmluZz47XG5cbiAgLyoqXG4gICAqIFRoZSBtb2RlbCB0byB1c2UgZm9yIHRoZSBldmFsdWF0aW9uLiBNdXN0IHN1cHBvcnQgc3RydWN0dXJlZCBvdXRwdXRzLlxuICAgKi9cbiAgbW9kZWw6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGdyYWRlci5cbiAgICovXG4gIG5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGxhYmVscyB0aGF0IGluZGljYXRlIGEgcGFzc2luZyByZXN1bHQuIE11c3QgYmUgYSBzdWJzZXQgb2YgbGFiZWxzLlxuICAgKi9cbiAgcGFzc2luZ19sYWJlbHM6IEFycmF5PHN0cmluZz47XG5cbiAgLyoqXG4gICAqIFRoZSBvYmplY3QgdHlwZSwgd2hpY2ggaXMgYWx3YXlzIGBsYWJlbF9tb2RlbGAuXG4gICAqL1xuICB0eXBlOiAnbGFiZWxfbW9kZWwnO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIExhYmVsTW9kZWxHcmFkZXIge1xuICAvKipcbiAgICogQSBtZXNzYWdlIGlucHV0IHRvIHRoZSBtb2RlbCB3aXRoIGEgcm9sZSBpbmRpY2F0aW5nIGluc3RydWN0aW9uIGZvbGxvd2luZ1xuICAgKiBoaWVyYXJjaHkuIEluc3RydWN0aW9ucyBnaXZlbiB3aXRoIHRoZSBgZGV2ZWxvcGVyYCBvciBgc3lzdGVtYCByb2xlIHRha2VcbiAgICogcHJlY2VkZW5jZSBvdmVyIGluc3RydWN0aW9ucyBnaXZlbiB3aXRoIHRoZSBgdXNlcmAgcm9sZS4gTWVzc2FnZXMgd2l0aCB0aGVcbiAgICogYGFzc2lzdGFudGAgcm9sZSBhcmUgcHJlc3VtZWQgdG8gaGF2ZSBiZWVuIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwgaW4gcHJldmlvdXNcbiAgICogaW50ZXJhY3Rpb25zLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJbnB1dCB7XG4gICAgLyoqXG4gICAgICogVGV4dCBpbnB1dHMgdG8gdGhlIG1vZGVsIC0gY2FuIGNvbnRhaW4gdGVtcGxhdGUgc3RyaW5ncy5cbiAgICAgKi9cbiAgICBjb250ZW50OiBzdHJpbmcgfCBSZXNwb25zZXNBUEkuUmVzcG9uc2VJbnB1dFRleHQgfCBJbnB1dC5PdXRwdXRUZXh0O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJvbGUgb2YgdGhlIG1lc3NhZ2UgaW5wdXQuIE9uZSBvZiBgdXNlcmAsIGBhc3Npc3RhbnRgLCBgc3lzdGVtYCwgb3JcbiAgICAgKiBgZGV2ZWxvcGVyYC5cbiAgICAgKi9cbiAgICByb2xlOiAndXNlcicgfCAnYXNzaXN0YW50JyB8ICdzeXN0ZW0nIHwgJ2RldmVsb3Blcic7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgbWVzc2FnZSBpbnB1dC4gQWx3YXlzIGBtZXNzYWdlYC5cbiAgICAgKi9cbiAgICB0eXBlPzogJ21lc3NhZ2UnO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBJbnB1dCB7XG4gICAgLyoqXG4gICAgICogQSB0ZXh0IG91dHB1dCBmcm9tIHRoZSBtb2RlbC5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIE91dHB1dFRleHQge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdGV4dCBvdXRwdXQgZnJvbSB0aGUgbW9kZWwuXG4gICAgICAgKi9cbiAgICAgIHRleHQ6IHN0cmluZztcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdHlwZSBvZiB0aGUgb3V0cHV0IHRleHQuIEFsd2F5cyBgb3V0cHV0X3RleHRgLlxuICAgICAgICovXG4gICAgICB0eXBlOiAnb3V0cHV0X3RleHQnO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEEgTXVsdGlHcmFkZXIgb2JqZWN0IGNvbWJpbmVzIHRoZSBvdXRwdXQgb2YgbXVsdGlwbGUgZ3JhZGVycyB0byBwcm9kdWNlIGEgc2luZ2xlXG4gKiBzY29yZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNdWx0aUdyYWRlciB7XG4gIC8qKlxuICAgKiBBIGZvcm11bGEgdG8gY2FsY3VsYXRlIHRoZSBvdXRwdXQgYmFzZWQgb24gZ3JhZGVyIHJlc3VsdHMuXG4gICAqL1xuICBjYWxjdWxhdGVfb3V0cHV0OiBzdHJpbmc7XG5cbiAgZ3JhZGVyczogUmVjb3JkPFxuICAgIHN0cmluZyxcbiAgICBTdHJpbmdDaGVja0dyYWRlciB8IFRleHRTaW1pbGFyaXR5R3JhZGVyIHwgUHl0aG9uR3JhZGVyIHwgU2NvcmVNb2RlbEdyYWRlciB8IExhYmVsTW9kZWxHcmFkZXJcbiAgPjtcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGdyYWRlci5cbiAgICovXG4gIG5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG9iamVjdCB0eXBlLCB3aGljaCBpcyBhbHdheXMgYG11bHRpYC5cbiAgICovXG4gIHR5cGU6ICdtdWx0aSc7XG59XG5cbi8qKlxuICogQSBQeXRob25HcmFkZXIgb2JqZWN0IHRoYXQgcnVucyBhIHB5dGhvbiBzY3JpcHQgb24gdGhlIGlucHV0LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFB5dGhvbkdyYWRlciB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgZ3JhZGVyLlxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgc291cmNlIGNvZGUgb2YgdGhlIHB5dGhvbiBzY3JpcHQuXG4gICAqL1xuICBzb3VyY2U6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG9iamVjdCB0eXBlLCB3aGljaCBpcyBhbHdheXMgYHB5dGhvbmAuXG4gICAqL1xuICB0eXBlOiAncHl0aG9uJztcblxuICAvKipcbiAgICogVGhlIGltYWdlIHRhZyB0byB1c2UgZm9yIHRoZSBweXRob24gc2NyaXB0LlxuICAgKi9cbiAgaW1hZ2VfdGFnPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgU2NvcmVNb2RlbEdyYWRlciBvYmplY3QgdGhhdCB1c2VzIGEgbW9kZWwgdG8gYXNzaWduIGEgc2NvcmUgdG8gdGhlIGlucHV0LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNjb3JlTW9kZWxHcmFkZXIge1xuICAvKipcbiAgICogVGhlIGlucHV0IHRleHQuIFRoaXMgbWF5IGluY2x1ZGUgdGVtcGxhdGUgc3RyaW5ncy5cbiAgICovXG4gIGlucHV0OiBBcnJheTxTY29yZU1vZGVsR3JhZGVyLklucHV0PjtcblxuICAvKipcbiAgICogVGhlIG1vZGVsIHRvIHVzZSBmb3IgdGhlIGV2YWx1YXRpb24uXG4gICAqL1xuICBtb2RlbDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgZ3JhZGVyLlxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgb2JqZWN0IHR5cGUsIHdoaWNoIGlzIGFsd2F5cyBgc2NvcmVfbW9kZWxgLlxuICAgKi9cbiAgdHlwZTogJ3Njb3JlX21vZGVsJztcblxuICAvKipcbiAgICogVGhlIHJhbmdlIG9mIHRoZSBzY29yZS4gRGVmYXVsdHMgdG8gYFswLCAxXWAuXG4gICAqL1xuICByYW5nZT86IEFycmF5PG51bWJlcj47XG5cbiAgLyoqXG4gICAqIFRoZSBzYW1wbGluZyBwYXJhbWV0ZXJzIGZvciB0aGUgbW9kZWwuXG4gICAqL1xuICBzYW1wbGluZ19wYXJhbXM/OiB1bmtub3duO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFNjb3JlTW9kZWxHcmFkZXIge1xuICAvKipcbiAgICogQSBtZXNzYWdlIGlucHV0IHRvIHRoZSBtb2RlbCB3aXRoIGEgcm9sZSBpbmRpY2F0aW5nIGluc3RydWN0aW9uIGZvbGxvd2luZ1xuICAgKiBoaWVyYXJjaHkuIEluc3RydWN0aW9ucyBnaXZlbiB3aXRoIHRoZSBgZGV2ZWxvcGVyYCBvciBgc3lzdGVtYCByb2xlIHRha2VcbiAgICogcHJlY2VkZW5jZSBvdmVyIGluc3RydWN0aW9ucyBnaXZlbiB3aXRoIHRoZSBgdXNlcmAgcm9sZS4gTWVzc2FnZXMgd2l0aCB0aGVcbiAgICogYGFzc2lzdGFudGAgcm9sZSBhcmUgcHJlc3VtZWQgdG8gaGF2ZSBiZWVuIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwgaW4gcHJldmlvdXNcbiAgICogaW50ZXJhY3Rpb25zLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJbnB1dCB7XG4gICAgLyoqXG4gICAgICogVGV4dCBpbnB1dHMgdG8gdGhlIG1vZGVsIC0gY2FuIGNvbnRhaW4gdGVtcGxhdGUgc3RyaW5ncy5cbiAgICAgKi9cbiAgICBjb250ZW50OiBzdHJpbmcgfCBSZXNwb25zZXNBUEkuUmVzcG9uc2VJbnB1dFRleHQgfCBJbnB1dC5PdXRwdXRUZXh0O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJvbGUgb2YgdGhlIG1lc3NhZ2UgaW5wdXQuIE9uZSBvZiBgdXNlcmAsIGBhc3Npc3RhbnRgLCBgc3lzdGVtYCwgb3JcbiAgICAgKiBgZGV2ZWxvcGVyYC5cbiAgICAgKi9cbiAgICByb2xlOiAndXNlcicgfCAnYXNzaXN0YW50JyB8ICdzeXN0ZW0nIHwgJ2RldmVsb3Blcic7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgbWVzc2FnZSBpbnB1dC4gQWx3YXlzIGBtZXNzYWdlYC5cbiAgICAgKi9cbiAgICB0eXBlPzogJ21lc3NhZ2UnO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBJbnB1dCB7XG4gICAgLyoqXG4gICAgICogQSB0ZXh0IG91dHB1dCBmcm9tIHRoZSBtb2RlbC5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIE91dHB1dFRleHQge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdGV4dCBvdXRwdXQgZnJvbSB0aGUgbW9kZWwuXG4gICAgICAgKi9cbiAgICAgIHRleHQ6IHN0cmluZztcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdHlwZSBvZiB0aGUgb3V0cHV0IHRleHQuIEFsd2F5cyBgb3V0cHV0X3RleHRgLlxuICAgICAgICovXG4gICAgICB0eXBlOiAnb3V0cHV0X3RleHQnO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEEgU3RyaW5nQ2hlY2tHcmFkZXIgb2JqZWN0IHRoYXQgcGVyZm9ybXMgYSBzdHJpbmcgY29tcGFyaXNvbiBiZXR3ZWVuIGlucHV0IGFuZFxuICogcmVmZXJlbmNlIHVzaW5nIGEgc3BlY2lmaWVkIG9wZXJhdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTdHJpbmdDaGVja0dyYWRlciB7XG4gIC8qKlxuICAgKiBUaGUgaW5wdXQgdGV4dC4gVGhpcyBtYXkgaW5jbHVkZSB0ZW1wbGF0ZSBzdHJpbmdzLlxuICAgKi9cbiAgaW5wdXQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGdyYWRlci5cbiAgICovXG4gIG5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHN0cmluZyBjaGVjayBvcGVyYXRpb24gdG8gcGVyZm9ybS4gT25lIG9mIGBlcWAsIGBuZWAsIGBsaWtlYCwgb3IgYGlsaWtlYC5cbiAgICovXG4gIG9wZXJhdGlvbjogJ2VxJyB8ICduZScgfCAnbGlrZScgfCAnaWxpa2UnO1xuXG4gIC8qKlxuICAgKiBUaGUgcmVmZXJlbmNlIHRleHQuIFRoaXMgbWF5IGluY2x1ZGUgdGVtcGxhdGUgc3RyaW5ncy5cbiAgICovXG4gIHJlZmVyZW5jZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgb2JqZWN0IHR5cGUsIHdoaWNoIGlzIGFsd2F5cyBgc3RyaW5nX2NoZWNrYC5cbiAgICovXG4gIHR5cGU6ICdzdHJpbmdfY2hlY2snO1xufVxuXG4vKipcbiAqIEEgVGV4dFNpbWlsYXJpdHlHcmFkZXIgb2JqZWN0IHdoaWNoIGdyYWRlcyB0ZXh0IGJhc2VkIG9uIHNpbWlsYXJpdHkgbWV0cmljcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUZXh0U2ltaWxhcml0eUdyYWRlciB7XG4gIC8qKlxuICAgKiBUaGUgZXZhbHVhdGlvbiBtZXRyaWMgdG8gdXNlLiBPbmUgb2YgYGZ1enp5X21hdGNoYCwgYGJsZXVgLCBgZ2xldWAsIGBtZXRlb3JgLFxuICAgKiBgcm91Z2VfMWAsIGByb3VnZV8yYCwgYHJvdWdlXzNgLCBgcm91Z2VfNGAsIGByb3VnZV81YCwgb3IgYHJvdWdlX2xgLlxuICAgKi9cbiAgZXZhbHVhdGlvbl9tZXRyaWM6XG4gICAgfCAnZnV6enlfbWF0Y2gnXG4gICAgfCAnYmxldSdcbiAgICB8ICdnbGV1J1xuICAgIHwgJ21ldGVvcidcbiAgICB8ICdyb3VnZV8xJ1xuICAgIHwgJ3JvdWdlXzInXG4gICAgfCAncm91Z2VfMydcbiAgICB8ICdyb3VnZV80J1xuICAgIHwgJ3JvdWdlXzUnXG4gICAgfCAncm91Z2VfbCc7XG5cbiAgLyoqXG4gICAqIFRoZSB0ZXh0IGJlaW5nIGdyYWRlZC5cbiAgICovXG4gIGlucHV0OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBncmFkZXIuXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB0ZXh0IGJlaW5nIGdyYWRlZCBhZ2FpbnN0LlxuICAgKi9cbiAgcmVmZXJlbmNlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIGdyYWRlci5cbiAgICovXG4gIHR5cGU6ICd0ZXh0X3NpbWlsYXJpdHknO1xufVxuXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgR3JhZGVyTW9kZWxzIHtcbiAgZXhwb3J0IHtcbiAgICB0eXBlIExhYmVsTW9kZWxHcmFkZXIgYXMgTGFiZWxNb2RlbEdyYWRlcixcbiAgICB0eXBlIE11bHRpR3JhZGVyIGFzIE11bHRpR3JhZGVyLFxuICAgIHR5cGUgUHl0aG9uR3JhZGVyIGFzIFB5dGhvbkdyYWRlcixcbiAgICB0eXBlIFNjb3JlTW9kZWxHcmFkZXIgYXMgU2NvcmVNb2RlbEdyYWRlcixcbiAgICB0eXBlIFN0cmluZ0NoZWNrR3JhZGVyIGFzIFN0cmluZ0NoZWNrR3JhZGVyLFxuICAgIHR5cGUgVGV4dFNpbWlsYXJpdHlHcmFkZXIgYXMgVGV4dFNpbWlsYXJpdHlHcmFkZXIsXG4gIH07XG59XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICcuLi8uLi9yZXNvdXJjZSc7XG5pbXBvcnQgKiBhcyBHcmFkZXJNb2RlbHNBUEkgZnJvbSAnLi9ncmFkZXItbW9kZWxzJztcbmltcG9ydCB7XG4gIEdyYWRlck1vZGVscyxcbiAgTGFiZWxNb2RlbEdyYWRlcixcbiAgTXVsdGlHcmFkZXIsXG4gIFB5dGhvbkdyYWRlcixcbiAgU2NvcmVNb2RlbEdyYWRlcixcbiAgU3RyaW5nQ2hlY2tHcmFkZXIsXG4gIFRleHRTaW1pbGFyaXR5R3JhZGVyLFxufSBmcm9tICcuL2dyYWRlci1tb2RlbHMnO1xuXG5leHBvcnQgY2xhc3MgR3JhZGVycyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgZ3JhZGVyTW9kZWxzOiBHcmFkZXJNb2RlbHNBUEkuR3JhZGVyTW9kZWxzID0gbmV3IEdyYWRlck1vZGVsc0FQSS5HcmFkZXJNb2RlbHModGhpcy5fY2xpZW50KTtcbn1cblxuR3JhZGVycy5HcmFkZXJNb2RlbHMgPSBHcmFkZXJNb2RlbHM7XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBHcmFkZXJzIHtcbiAgZXhwb3J0IHtcbiAgICBHcmFkZXJNb2RlbHMgYXMgR3JhZGVyTW9kZWxzLFxuICAgIHR5cGUgTGFiZWxNb2RlbEdyYWRlciBhcyBMYWJlbE1vZGVsR3JhZGVyLFxuICAgIHR5cGUgTXVsdGlHcmFkZXIgYXMgTXVsdGlHcmFkZXIsXG4gICAgdHlwZSBQeXRob25HcmFkZXIgYXMgUHl0aG9uR3JhZGVyLFxuICAgIHR5cGUgU2NvcmVNb2RlbEdyYWRlciBhcyBTY29yZU1vZGVsR3JhZGVyLFxuICAgIHR5cGUgU3RyaW5nQ2hlY2tHcmFkZXIgYXMgU3RyaW5nQ2hlY2tHcmFkZXIsXG4gICAgdHlwZSBUZXh0U2ltaWxhcml0eUdyYWRlciBhcyBUZXh0U2ltaWxhcml0eUdyYWRlcixcbiAgfTtcbn1cbiIsICIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuXG5pbXBvcnQgeyBBUElSZXNvdXJjZSB9IGZyb20gJy4uL3Jlc291cmNlJztcbmltcG9ydCAqIGFzIENvcmUgZnJvbSAnLi4vY29yZSc7XG5cbmV4cG9ydCBjbGFzcyBJbWFnZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgdmFyaWF0aW9uIG9mIGEgZ2l2ZW4gaW1hZ2UuIFRoaXMgZW5kcG9pbnQgb25seSBzdXBwb3J0cyBgZGFsbC1lLTJgLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0c1xuICAgKiBjb25zdCBpbWFnZXNSZXNwb25zZSA9IGF3YWl0IGNsaWVudC5pbWFnZXMuY3JlYXRlVmFyaWF0aW9uKHtcbiAgICogICBpbWFnZTogZnMuY3JlYXRlUmVhZFN0cmVhbSgnb3R0ZXIucG5nJyksXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIGNyZWF0ZVZhcmlhdGlvbihcbiAgICBib2R5OiBJbWFnZUNyZWF0ZVZhcmlhdGlvblBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5BUElQcm9taXNlPEltYWdlc1Jlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvaW1hZ2VzL3ZhcmlhdGlvbnMnLCBDb3JlLm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyh7IGJvZHksIC4uLm9wdGlvbnMgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gZWRpdGVkIG9yIGV4dGVuZGVkIGltYWdlIGdpdmVuIG9uZSBvciBtb3JlIHNvdXJjZSBpbWFnZXMgYW5kIGFcbiAgICogcHJvbXB0LiBUaGlzIGVuZHBvaW50IG9ubHkgc3VwcG9ydHMgYGdwdC1pbWFnZS0xYCBhbmQgYGRhbGwtZS0yYC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHNcbiAgICogY29uc3QgaW1hZ2VzUmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuaW1hZ2VzLmVkaXQoe1xuICAgKiAgIGltYWdlOiBmcy5jcmVhdGVSZWFkU3RyZWFtKCdwYXRoL3RvL2ZpbGUnKSxcbiAgICogICBwcm9tcHQ6ICdBIGN1dGUgYmFieSBzZWEgb3R0ZXIgd2VhcmluZyBhIGJlcmV0JyxcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgZWRpdChib2R5OiBJbWFnZUVkaXRQYXJhbXMsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5BUElQcm9taXNlPEltYWdlc1Jlc3BvbnNlPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvaW1hZ2VzL2VkaXRzJywgQ29yZS5tdWx0aXBhcnRGb3JtUmVxdWVzdE9wdGlvbnMoeyBib2R5LCAuLi5vcHRpb25zIH0pKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGltYWdlIGdpdmVuIGEgcHJvbXB0LlxuICAgKiBbTGVhcm4gbW9yZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL2ltYWdlcykuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHRzXG4gICAqIGNvbnN0IGltYWdlc1Jlc3BvbnNlID0gYXdhaXQgY2xpZW50LmltYWdlcy5nZW5lcmF0ZSh7XG4gICAqICAgcHJvbXB0OiAnQSBjdXRlIGJhYnkgc2VhIG90dGVyJyxcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgZ2VuZXJhdGUoYm9keTogSW1hZ2VHZW5lcmF0ZVBhcmFtcywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkFQSVByb21pc2U8SW1hZ2VzUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy9pbWFnZXMvZ2VuZXJhdGlvbnMnLCB7IGJvZHksIC4uLm9wdGlvbnMgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBjb250ZW50IG9yIHRoZSBVUkwgb2YgYW4gaW1hZ2UgZ2VuZXJhdGVkIGJ5IHRoZSBPcGVuQUkgQVBJLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEltYWdlIHtcbiAgLyoqXG4gICAqIFRoZSBiYXNlNjQtZW5jb2RlZCBKU09OIG9mIHRoZSBnZW5lcmF0ZWQgaW1hZ2UuIERlZmF1bHQgdmFsdWUgZm9yIGBncHQtaW1hZ2UtMWAsXG4gICAqIGFuZCBvbmx5IHByZXNlbnQgaWYgYHJlc3BvbnNlX2Zvcm1hdGAgaXMgc2V0IHRvIGBiNjRfanNvbmAgZm9yIGBkYWxsLWUtMmAgYW5kXG4gICAqIGBkYWxsLWUtM2AuXG4gICAqL1xuICBiNjRfanNvbj86IHN0cmluZztcblxuICAvKipcbiAgICogRm9yIGBkYWxsLWUtM2Agb25seSwgdGhlIHJldmlzZWQgcHJvbXB0IHRoYXQgd2FzIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIGltYWdlLlxuICAgKi9cbiAgcmV2aXNlZF9wcm9tcHQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFdoZW4gdXNpbmcgYGRhbGwtZS0yYCBvciBgZGFsbC1lLTNgLCB0aGUgVVJMIG9mIHRoZSBnZW5lcmF0ZWQgaW1hZ2UgaWZcbiAgICogYHJlc3BvbnNlX2Zvcm1hdGAgaXMgc2V0IHRvIGB1cmxgIChkZWZhdWx0IHZhbHVlKS4gVW5zdXBwb3J0ZWQgZm9yXG4gICAqIGBncHQtaW1hZ2UtMWAuXG4gICAqL1xuICB1cmw/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIEltYWdlTW9kZWwgPSAnZGFsbC1lLTInIHwgJ2RhbGwtZS0zJyB8ICdncHQtaW1hZ2UtMSc7XG5cbi8qKlxuICogVGhlIHJlc3BvbnNlIGZyb20gdGhlIGltYWdlIGdlbmVyYXRpb24gZW5kcG9pbnQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW1hZ2VzUmVzcG9uc2Uge1xuICAvKipcbiAgICogVGhlIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSBvZiB3aGVuIHRoZSBpbWFnZSB3YXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQ6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGxpc3Qgb2YgZ2VuZXJhdGVkIGltYWdlcy5cbiAgICovXG4gIGRhdGE/OiBBcnJheTxJbWFnZT47XG5cbiAgLyoqXG4gICAqIEZvciBgZ3B0LWltYWdlLTFgIG9ubHksIHRoZSB0b2tlbiB1c2FnZSBpbmZvcm1hdGlvbiBmb3IgdGhlIGltYWdlIGdlbmVyYXRpb24uXG4gICAqL1xuICB1c2FnZT86IEltYWdlc1Jlc3BvbnNlLlVzYWdlO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIEltYWdlc1Jlc3BvbnNlIHtcbiAgLyoqXG4gICAqIEZvciBgZ3B0LWltYWdlLTFgIG9ubHksIHRoZSB0b2tlbiB1c2FnZSBpbmZvcm1hdGlvbiBmb3IgdGhlIGltYWdlIGdlbmVyYXRpb24uXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFVzYWdlIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIHRva2VucyAoaW1hZ2VzIGFuZCB0ZXh0KSBpbiB0aGUgaW5wdXQgcHJvbXB0LlxuICAgICAqL1xuICAgIGlucHV0X3Rva2VuczogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGlucHV0IHRva2VucyBkZXRhaWxlZCBpbmZvcm1hdGlvbiBmb3IgdGhlIGltYWdlIGdlbmVyYXRpb24uXG4gICAgICovXG4gICAgaW5wdXRfdG9rZW5zX2RldGFpbHM6IFVzYWdlLklucHV0VG9rZW5zRGV0YWlscztcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgaW1hZ2UgdG9rZW5zIGluIHRoZSBvdXRwdXQgaW1hZ2UuXG4gICAgICovXG4gICAgb3V0cHV0X3Rva2VuczogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRvdGFsIG51bWJlciBvZiB0b2tlbnMgKGltYWdlcyBhbmQgdGV4dCkgdXNlZCBmb3IgdGhlIGltYWdlIGdlbmVyYXRpb24uXG4gICAgICovXG4gICAgdG90YWxfdG9rZW5zOiBudW1iZXI7XG4gIH1cblxuICBleHBvcnQgbmFtZXNwYWNlIFVzYWdlIHtcbiAgICAvKipcbiAgICAgKiBUaGUgaW5wdXQgdG9rZW5zIGRldGFpbGVkIGluZm9ybWF0aW9uIGZvciB0aGUgaW1hZ2UgZ2VuZXJhdGlvbi5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElucHV0VG9rZW5zRGV0YWlscyB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBudW1iZXIgb2YgaW1hZ2UgdG9rZW5zIGluIHRoZSBpbnB1dCBwcm9tcHQuXG4gICAgICAgKi9cbiAgICAgIGltYWdlX3Rva2VuczogbnVtYmVyO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBudW1iZXIgb2YgdGV4dCB0b2tlbnMgaW4gdGhlIGlucHV0IHByb21wdC5cbiAgICAgICAqL1xuICAgICAgdGV4dF90b2tlbnM6IG51bWJlcjtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbWFnZUNyZWF0ZVZhcmlhdGlvblBhcmFtcyB7XG4gIC8qKlxuICAgKiBUaGUgaW1hZ2UgdG8gdXNlIGFzIHRoZSBiYXNpcyBmb3IgdGhlIHZhcmlhdGlvbihzKS4gTXVzdCBiZSBhIHZhbGlkIFBORyBmaWxlLFxuICAgKiBsZXNzIHRoYW4gNE1CLCBhbmQgc3F1YXJlLlxuICAgKi9cbiAgaW1hZ2U6IENvcmUuVXBsb2FkYWJsZTtcblxuICAvKipcbiAgICogVGhlIG1vZGVsIHRvIHVzZSBmb3IgaW1hZ2UgZ2VuZXJhdGlvbi4gT25seSBgZGFsbC1lLTJgIGlzIHN1cHBvcnRlZCBhdCB0aGlzXG4gICAqIHRpbWUuXG4gICAqL1xuICBtb2RlbD86IChzdHJpbmcgJiB7fSkgfCBJbWFnZU1vZGVsIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBpbWFnZXMgdG8gZ2VuZXJhdGUuIE11c3QgYmUgYmV0d2VlbiAxIGFuZCAxMC5cbiAgICovXG4gIG4/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgZm9ybWF0IGluIHdoaWNoIHRoZSBnZW5lcmF0ZWQgaW1hZ2VzIGFyZSByZXR1cm5lZC4gTXVzdCBiZSBvbmUgb2YgYHVybGAgb3JcbiAgICogYGI2NF9qc29uYC4gVVJMcyBhcmUgb25seSB2YWxpZCBmb3IgNjAgbWludXRlcyBhZnRlciB0aGUgaW1hZ2UgaGFzIGJlZW5cbiAgICogZ2VuZXJhdGVkLlxuICAgKi9cbiAgcmVzcG9uc2VfZm9ybWF0PzogJ3VybCcgfCAnYjY0X2pzb24nIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGdlbmVyYXRlZCBpbWFnZXMuIE11c3QgYmUgb25lIG9mIGAyNTZ4MjU2YCwgYDUxMng1MTJgLCBvclxuICAgKiBgMTAyNHgxMDI0YC5cbiAgICovXG4gIHNpemU/OiAnMjU2eDI1NicgfCAnNTEyeDUxMicgfCAnMTAyNHgxMDI0JyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEEgdW5pcXVlIGlkZW50aWZpZXIgcmVwcmVzZW50aW5nIHlvdXIgZW5kLXVzZXIsIHdoaWNoIGNhbiBoZWxwIE9wZW5BSSB0byBtb25pdG9yXG4gICAqIGFuZCBkZXRlY3QgYWJ1c2UuXG4gICAqIFtMZWFybiBtb3JlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvc2FmZXR5LWJlc3QtcHJhY3RpY2VzI2VuZC11c2VyLWlkcykuXG4gICAqL1xuICB1c2VyPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEltYWdlRWRpdFBhcmFtcyB7XG4gIC8qKlxuICAgKiBUaGUgaW1hZ2UocykgdG8gZWRpdC4gTXVzdCBiZSBhIHN1cHBvcnRlZCBpbWFnZSBmaWxlIG9yIGFuIGFycmF5IG9mIGltYWdlcy5cbiAgICpcbiAgICogRm9yIGBncHQtaW1hZ2UtMWAsIGVhY2ggaW1hZ2Ugc2hvdWxkIGJlIGEgYHBuZ2AsIGB3ZWJwYCwgb3IgYGpwZ2AgZmlsZSBsZXNzIHRoYW5cbiAgICogMjVNQi4gWW91IGNhbiBwcm92aWRlIHVwIHRvIDE2IGltYWdlcy5cbiAgICpcbiAgICogRm9yIGBkYWxsLWUtMmAsIHlvdSBjYW4gb25seSBwcm92aWRlIG9uZSBpbWFnZSwgYW5kIGl0IHNob3VsZCBiZSBhIHNxdWFyZSBgcG5nYFxuICAgKiBmaWxlIGxlc3MgdGhhbiA0TUIuXG4gICAqL1xuICBpbWFnZTogQ29yZS5VcGxvYWRhYmxlIHwgQXJyYXk8Q29yZS5VcGxvYWRhYmxlPjtcblxuICAvKipcbiAgICogQSB0ZXh0IGRlc2NyaXB0aW9uIG9mIHRoZSBkZXNpcmVkIGltYWdlKHMpLiBUaGUgbWF4aW11bSBsZW5ndGggaXMgMTAwMFxuICAgKiBjaGFyYWN0ZXJzIGZvciBgZGFsbC1lLTJgLCBhbmQgMzIwMDAgY2hhcmFjdGVycyBmb3IgYGdwdC1pbWFnZS0xYC5cbiAgICovXG4gIHByb21wdDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBbGxvd3MgdG8gc2V0IHRyYW5zcGFyZW5jeSBmb3IgdGhlIGJhY2tncm91bmQgb2YgdGhlIGdlbmVyYXRlZCBpbWFnZShzKS4gVGhpc1xuICAgKiBwYXJhbWV0ZXIgaXMgb25seSBzdXBwb3J0ZWQgZm9yIGBncHQtaW1hZ2UtMWAuIE11c3QgYmUgb25lIG9mIGB0cmFuc3BhcmVudGAsXG4gICAqIGBvcGFxdWVgIG9yIGBhdXRvYCAoZGVmYXVsdCB2YWx1ZSkuIFdoZW4gYGF1dG9gIGlzIHVzZWQsIHRoZSBtb2RlbCB3aWxsXG4gICAqIGF1dG9tYXRpY2FsbHkgZGV0ZXJtaW5lIHRoZSBiZXN0IGJhY2tncm91bmQgZm9yIHRoZSBpbWFnZS5cbiAgICpcbiAgICogSWYgYHRyYW5zcGFyZW50YCwgdGhlIG91dHB1dCBmb3JtYXQgbmVlZHMgdG8gc3VwcG9ydCB0cmFuc3BhcmVuY3ksIHNvIGl0IHNob3VsZFxuICAgKiBiZSBzZXQgdG8gZWl0aGVyIGBwbmdgIChkZWZhdWx0IHZhbHVlKSBvciBgd2VicGAuXG4gICAqL1xuICBiYWNrZ3JvdW5kPzogJ3RyYW5zcGFyZW50JyB8ICdvcGFxdWUnIHwgJ2F1dG8nIHwgbnVsbDtcblxuICAvKipcbiAgICogQW4gYWRkaXRpb25hbCBpbWFnZSB3aG9zZSBmdWxseSB0cmFuc3BhcmVudCBhcmVhcyAoZS5nLiB3aGVyZSBhbHBoYSBpcyB6ZXJvKVxuICAgKiBpbmRpY2F0ZSB3aGVyZSBgaW1hZ2VgIHNob3VsZCBiZSBlZGl0ZWQuIElmIHRoZXJlIGFyZSBtdWx0aXBsZSBpbWFnZXMgcHJvdmlkZWQsXG4gICAqIHRoZSBtYXNrIHdpbGwgYmUgYXBwbGllZCBvbiB0aGUgZmlyc3QgaW1hZ2UuIE11c3QgYmUgYSB2YWxpZCBQTkcgZmlsZSwgbGVzcyB0aGFuXG4gICAqIDRNQiwgYW5kIGhhdmUgdGhlIHNhbWUgZGltZW5zaW9ucyBhcyBgaW1hZ2VgLlxuICAgKi9cbiAgbWFzaz86IENvcmUuVXBsb2FkYWJsZTtcblxuICAvKipcbiAgICogVGhlIG1vZGVsIHRvIHVzZSBmb3IgaW1hZ2UgZ2VuZXJhdGlvbi4gT25seSBgZGFsbC1lLTJgIGFuZCBgZ3B0LWltYWdlLTFgIGFyZVxuICAgKiBzdXBwb3J0ZWQuIERlZmF1bHRzIHRvIGBkYWxsLWUtMmAgdW5sZXNzIGEgcGFyYW1ldGVyIHNwZWNpZmljIHRvIGBncHQtaW1hZ2UtMWBcbiAgICogaXMgdXNlZC5cbiAgICovXG4gIG1vZGVsPzogKHN0cmluZyAmIHt9KSB8IEltYWdlTW9kZWwgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIGltYWdlcyB0byBnZW5lcmF0ZS4gTXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDEwLlxuICAgKi9cbiAgbj86IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBxdWFsaXR5IG9mIHRoZSBpbWFnZSB0aGF0IHdpbGwgYmUgZ2VuZXJhdGVkLiBgaGlnaGAsIGBtZWRpdW1gIGFuZCBgbG93YCBhcmVcbiAgICogb25seSBzdXBwb3J0ZWQgZm9yIGBncHQtaW1hZ2UtMWAuIGBkYWxsLWUtMmAgb25seSBzdXBwb3J0cyBgc3RhbmRhcmRgIHF1YWxpdHkuXG4gICAqIERlZmF1bHRzIHRvIGBhdXRvYC5cbiAgICovXG4gIHF1YWxpdHk/OiAnc3RhbmRhcmQnIHwgJ2xvdycgfCAnbWVkaXVtJyB8ICdoaWdoJyB8ICdhdXRvJyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBmb3JtYXQgaW4gd2hpY2ggdGhlIGdlbmVyYXRlZCBpbWFnZXMgYXJlIHJldHVybmVkLiBNdXN0IGJlIG9uZSBvZiBgdXJsYCBvclxuICAgKiBgYjY0X2pzb25gLiBVUkxzIGFyZSBvbmx5IHZhbGlkIGZvciA2MCBtaW51dGVzIGFmdGVyIHRoZSBpbWFnZSBoYXMgYmVlblxuICAgKiBnZW5lcmF0ZWQuIFRoaXMgcGFyYW1ldGVyIGlzIG9ubHkgc3VwcG9ydGVkIGZvciBgZGFsbC1lLTJgLCBhcyBgZ3B0LWltYWdlLTFgXG4gICAqIHdpbGwgYWx3YXlzIHJldHVybiBiYXNlNjQtZW5jb2RlZCBpbWFnZXMuXG4gICAqL1xuICByZXNwb25zZV9mb3JtYXQ/OiAndXJsJyB8ICdiNjRfanNvbicgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgZ2VuZXJhdGVkIGltYWdlcy4gTXVzdCBiZSBvbmUgb2YgYDEwMjR4MTAyNGAsIGAxNTM2eDEwMjRgXG4gICAqIChsYW5kc2NhcGUpLCBgMTAyNHgxNTM2YCAocG9ydHJhaXQpLCBvciBgYXV0b2AgKGRlZmF1bHQgdmFsdWUpIGZvclxuICAgKiBgZ3B0LWltYWdlLTFgLCBhbmQgb25lIG9mIGAyNTZ4MjU2YCwgYDUxMng1MTJgLCBvciBgMTAyNHgxMDI0YCBmb3IgYGRhbGwtZS0yYC5cbiAgICovXG4gIHNpemU/OiAnMjU2eDI1NicgfCAnNTEyeDUxMicgfCAnMTAyNHgxMDI0JyB8ICcxNTM2eDEwMjQnIHwgJzEwMjR4MTUzNicgfCAnYXV0bycgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBBIHVuaXF1ZSBpZGVudGlmaWVyIHJlcHJlc2VudGluZyB5b3VyIGVuZC11c2VyLCB3aGljaCBjYW4gaGVscCBPcGVuQUkgdG8gbW9uaXRvclxuICAgKiBhbmQgZGV0ZWN0IGFidXNlLlxuICAgKiBbTGVhcm4gbW9yZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3NhZmV0eS1iZXN0LXByYWN0aWNlcyNlbmQtdXNlci1pZHMpLlxuICAgKi9cbiAgdXNlcj86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbWFnZUdlbmVyYXRlUGFyYW1zIHtcbiAgLyoqXG4gICAqIEEgdGV4dCBkZXNjcmlwdGlvbiBvZiB0aGUgZGVzaXJlZCBpbWFnZShzKS4gVGhlIG1heGltdW0gbGVuZ3RoIGlzIDMyMDAwXG4gICAqIGNoYXJhY3RlcnMgZm9yIGBncHQtaW1hZ2UtMWAsIDEwMDAgY2hhcmFjdGVycyBmb3IgYGRhbGwtZS0yYCBhbmQgNDAwMCBjaGFyYWN0ZXJzXG4gICAqIGZvciBgZGFsbC1lLTNgLlxuICAgKi9cbiAgcHJvbXB0OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEFsbG93cyB0byBzZXQgdHJhbnNwYXJlbmN5IGZvciB0aGUgYmFja2dyb3VuZCBvZiB0aGUgZ2VuZXJhdGVkIGltYWdlKHMpLiBUaGlzXG4gICAqIHBhcmFtZXRlciBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgYGdwdC1pbWFnZS0xYC4gTXVzdCBiZSBvbmUgb2YgYHRyYW5zcGFyZW50YCxcbiAgICogYG9wYXF1ZWAgb3IgYGF1dG9gIChkZWZhdWx0IHZhbHVlKS4gV2hlbiBgYXV0b2AgaXMgdXNlZCwgdGhlIG1vZGVsIHdpbGxcbiAgICogYXV0b21hdGljYWxseSBkZXRlcm1pbmUgdGhlIGJlc3QgYmFja2dyb3VuZCBmb3IgdGhlIGltYWdlLlxuICAgKlxuICAgKiBJZiBgdHJhbnNwYXJlbnRgLCB0aGUgb3V0cHV0IGZvcm1hdCBuZWVkcyB0byBzdXBwb3J0IHRyYW5zcGFyZW5jeSwgc28gaXQgc2hvdWxkXG4gICAqIGJlIHNldCB0byBlaXRoZXIgYHBuZ2AgKGRlZmF1bHQgdmFsdWUpIG9yIGB3ZWJwYC5cbiAgICovXG4gIGJhY2tncm91bmQ/OiAndHJhbnNwYXJlbnQnIHwgJ29wYXF1ZScgfCAnYXV0bycgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgbW9kZWwgdG8gdXNlIGZvciBpbWFnZSBnZW5lcmF0aW9uLiBPbmUgb2YgYGRhbGwtZS0yYCwgYGRhbGwtZS0zYCwgb3JcbiAgICogYGdwdC1pbWFnZS0xYC4gRGVmYXVsdHMgdG8gYGRhbGwtZS0yYCB1bmxlc3MgYSBwYXJhbWV0ZXIgc3BlY2lmaWMgdG9cbiAgICogYGdwdC1pbWFnZS0xYCBpcyB1c2VkLlxuICAgKi9cbiAgbW9kZWw/OiAoc3RyaW5nICYge30pIHwgSW1hZ2VNb2RlbCB8IG51bGw7XG5cbiAgLyoqXG4gICAqIENvbnRyb2wgdGhlIGNvbnRlbnQtbW9kZXJhdGlvbiBsZXZlbCBmb3IgaW1hZ2VzIGdlbmVyYXRlZCBieSBgZ3B0LWltYWdlLTFgLiBNdXN0XG4gICAqIGJlIGVpdGhlciBgbG93YCBmb3IgbGVzcyByZXN0cmljdGl2ZSBmaWx0ZXJpbmcgb3IgYGF1dG9gIChkZWZhdWx0IHZhbHVlKS5cbiAgICovXG4gIG1vZGVyYXRpb24/OiAnbG93JyB8ICdhdXRvJyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgaW1hZ2VzIHRvIGdlbmVyYXRlLiBNdXN0IGJlIGJldHdlZW4gMSBhbmQgMTAuIEZvciBgZGFsbC1lLTNgLCBvbmx5XG4gICAqIGBuPTFgIGlzIHN1cHBvcnRlZC5cbiAgICovXG4gIG4/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgY29tcHJlc3Npb24gbGV2ZWwgKDAtMTAwJSkgZm9yIHRoZSBnZW5lcmF0ZWQgaW1hZ2VzLiBUaGlzIHBhcmFtZXRlciBpcyBvbmx5XG4gICAqIHN1cHBvcnRlZCBmb3IgYGdwdC1pbWFnZS0xYCB3aXRoIHRoZSBgd2VicGAgb3IgYGpwZWdgIG91dHB1dCBmb3JtYXRzLCBhbmRcbiAgICogZGVmYXVsdHMgdG8gMTAwLlxuICAgKi9cbiAgb3V0cHV0X2NvbXByZXNzaW9uPzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIGZvcm1hdCBpbiB3aGljaCB0aGUgZ2VuZXJhdGVkIGltYWdlcyBhcmUgcmV0dXJuZWQuIFRoaXMgcGFyYW1ldGVyIGlzIG9ubHlcbiAgICogc3VwcG9ydGVkIGZvciBgZ3B0LWltYWdlLTFgLiBNdXN0IGJlIG9uZSBvZiBgcG5nYCwgYGpwZWdgLCBvciBgd2VicGAuXG4gICAqL1xuICBvdXRwdXRfZm9ybWF0PzogJ3BuZycgfCAnanBlZycgfCAnd2VicCcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgcXVhbGl0eSBvZiB0aGUgaW1hZ2UgdGhhdCB3aWxsIGJlIGdlbmVyYXRlZC5cbiAgICpcbiAgICogLSBgYXV0b2AgKGRlZmF1bHQgdmFsdWUpIHdpbGwgYXV0b21hdGljYWxseSBzZWxlY3QgdGhlIGJlc3QgcXVhbGl0eSBmb3IgdGhlXG4gICAqICAgZ2l2ZW4gbW9kZWwuXG4gICAqIC0gYGhpZ2hgLCBgbWVkaXVtYCBhbmQgYGxvd2AgYXJlIHN1cHBvcnRlZCBmb3IgYGdwdC1pbWFnZS0xYC5cbiAgICogLSBgaGRgIGFuZCBgc3RhbmRhcmRgIGFyZSBzdXBwb3J0ZWQgZm9yIGBkYWxsLWUtM2AuXG4gICAqIC0gYHN0YW5kYXJkYCBpcyB0aGUgb25seSBvcHRpb24gZm9yIGBkYWxsLWUtMmAuXG4gICAqL1xuICBxdWFsaXR5PzogJ3N0YW5kYXJkJyB8ICdoZCcgfCAnbG93JyB8ICdtZWRpdW0nIHwgJ2hpZ2gnIHwgJ2F1dG8nIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIGZvcm1hdCBpbiB3aGljaCBnZW5lcmF0ZWQgaW1hZ2VzIHdpdGggYGRhbGwtZS0yYCBhbmQgYGRhbGwtZS0zYCBhcmVcbiAgICogcmV0dXJuZWQuIE11c3QgYmUgb25lIG9mIGB1cmxgIG9yIGBiNjRfanNvbmAuIFVSTHMgYXJlIG9ubHkgdmFsaWQgZm9yIDYwIG1pbnV0ZXNcbiAgICogYWZ0ZXIgdGhlIGltYWdlIGhhcyBiZWVuIGdlbmVyYXRlZC4gVGhpcyBwYXJhbWV0ZXIgaXNuJ3Qgc3VwcG9ydGVkIGZvclxuICAgKiBgZ3B0LWltYWdlLTFgIHdoaWNoIHdpbGwgYWx3YXlzIHJldHVybiBiYXNlNjQtZW5jb2RlZCBpbWFnZXMuXG4gICAqL1xuICByZXNwb25zZV9mb3JtYXQ/OiAndXJsJyB8ICdiNjRfanNvbicgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgZ2VuZXJhdGVkIGltYWdlcy4gTXVzdCBiZSBvbmUgb2YgYDEwMjR4MTAyNGAsIGAxNTM2eDEwMjRgXG4gICAqIChsYW5kc2NhcGUpLCBgMTAyNHgxNTM2YCAocG9ydHJhaXQpLCBvciBgYXV0b2AgKGRlZmF1bHQgdmFsdWUpIGZvclxuICAgKiBgZ3B0LWltYWdlLTFgLCBvbmUgb2YgYDI1NngyNTZgLCBgNTEyeDUxMmAsIG9yIGAxMDI0eDEwMjRgIGZvciBgZGFsbC1lLTJgLCBhbmRcbiAgICogb25lIG9mIGAxMDI0eDEwMjRgLCBgMTc5MngxMDI0YCwgb3IgYDEwMjR4MTc5MmAgZm9yIGBkYWxsLWUtM2AuXG4gICAqL1xuICBzaXplPzpcbiAgICB8ICdhdXRvJ1xuICAgIHwgJzEwMjR4MTAyNCdcbiAgICB8ICcxNTM2eDEwMjQnXG4gICAgfCAnMTAyNHgxNTM2J1xuICAgIHwgJzI1NngyNTYnXG4gICAgfCAnNTEyeDUxMidcbiAgICB8ICcxNzkyeDEwMjQnXG4gICAgfCAnMTAyNHgxNzkyJ1xuICAgIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIHN0eWxlIG9mIHRoZSBnZW5lcmF0ZWQgaW1hZ2VzLiBUaGlzIHBhcmFtZXRlciBpcyBvbmx5IHN1cHBvcnRlZCBmb3JcbiAgICogYGRhbGwtZS0zYC4gTXVzdCBiZSBvbmUgb2YgYHZpdmlkYCBvciBgbmF0dXJhbGAuIFZpdmlkIGNhdXNlcyB0aGUgbW9kZWwgdG8gbGVhblxuICAgKiB0b3dhcmRzIGdlbmVyYXRpbmcgaHlwZXItcmVhbCBhbmQgZHJhbWF0aWMgaW1hZ2VzLiBOYXR1cmFsIGNhdXNlcyB0aGUgbW9kZWwgdG9cbiAgICogcHJvZHVjZSBtb3JlIG5hdHVyYWwsIGxlc3MgaHlwZXItcmVhbCBsb29raW5nIGltYWdlcy5cbiAgICovXG4gIHN0eWxlPzogJ3ZpdmlkJyB8ICduYXR1cmFsJyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIEEgdW5pcXVlIGlkZW50aWZpZXIgcmVwcmVzZW50aW5nIHlvdXIgZW5kLXVzZXIsIHdoaWNoIGNhbiBoZWxwIE9wZW5BSSB0byBtb25pdG9yXG4gICAqIGFuZCBkZXRlY3QgYWJ1c2UuXG4gICAqIFtMZWFybiBtb3JlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvc2FmZXR5LWJlc3QtcHJhY3RpY2VzI2VuZC11c2VyLWlkcykuXG4gICAqL1xuICB1c2VyPzogc3RyaW5nO1xufVxuXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgSW1hZ2VzIHtcbiAgZXhwb3J0IHtcbiAgICB0eXBlIEltYWdlIGFzIEltYWdlLFxuICAgIHR5cGUgSW1hZ2VNb2RlbCBhcyBJbWFnZU1vZGVsLFxuICAgIHR5cGUgSW1hZ2VzUmVzcG9uc2UgYXMgSW1hZ2VzUmVzcG9uc2UsXG4gICAgdHlwZSBJbWFnZUNyZWF0ZVZhcmlhdGlvblBhcmFtcyBhcyBJbWFnZUNyZWF0ZVZhcmlhdGlvblBhcmFtcyxcbiAgICB0eXBlIEltYWdlRWRpdFBhcmFtcyBhcyBJbWFnZUVkaXRQYXJhbXMsXG4gICAgdHlwZSBJbWFnZUdlbmVyYXRlUGFyYW1zIGFzIEltYWdlR2VuZXJhdGVQYXJhbXMsXG4gIH07XG59XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICcuLi9yZXNvdXJjZSc7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gJy4uL2NvcmUnO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gJy4uL3BhZ2luYXRpb24nO1xuXG5leHBvcnQgY2xhc3MgTW9kZWxzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAvKipcbiAgICogUmV0cmlldmVzIGEgbW9kZWwgaW5zdGFuY2UsIHByb3ZpZGluZyBiYXNpYyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbW9kZWwgc3VjaCBhc1xuICAgKiB0aGUgb3duZXIgYW5kIHBlcm1pc3Npb25pbmcuXG4gICAqL1xuICByZXRyaWV2ZShtb2RlbDogc3RyaW5nLCBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IENvcmUuQVBJUHJvbWlzZTxNb2RlbD4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvbW9kZWxzLyR7bW9kZWx9YCwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogTGlzdHMgdGhlIGN1cnJlbnRseSBhdmFpbGFibGUgbW9kZWxzLCBhbmQgcHJvdmlkZXMgYmFzaWMgaW5mb3JtYXRpb24gYWJvdXQgZWFjaFxuICAgKiBvbmUgc3VjaCBhcyB0aGUgb3duZXIgYW5kIGF2YWlsYWJpbGl0eS5cbiAgICovXG4gIGxpc3Qob3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLlBhZ2VQcm9taXNlPE1vZGVsc1BhZ2UsIE1vZGVsPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KCcvbW9kZWxzJywgTW9kZWxzUGFnZSwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgZmluZS10dW5lZCBtb2RlbC4gWW91IG11c3QgaGF2ZSB0aGUgT3duZXIgcm9sZSBpbiB5b3VyIG9yZ2FuaXphdGlvbiB0b1xuICAgKiBkZWxldGUgYSBtb2RlbC5cbiAgICovXG4gIGRlbChtb2RlbDogc3RyaW5nLCBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IENvcmUuQVBJUHJvbWlzZTxNb2RlbERlbGV0ZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmRlbGV0ZShgL21vZGVscy8ke21vZGVsfWAsIG9wdGlvbnMpO1xuICB9XG59XG5cbi8qKlxuICogTm90ZTogbm8gcGFnaW5hdGlvbiBhY3R1YWxseSBvY2N1cnMgeWV0LCB0aGlzIGlzIGZvciBmb3J3YXJkcy1jb21wYXRpYmlsaXR5LlxuICovXG5leHBvcnQgY2xhc3MgTW9kZWxzUGFnZSBleHRlbmRzIFBhZ2U8TW9kZWw+IHt9XG5cbi8qKlxuICogRGVzY3JpYmVzIGFuIE9wZW5BSSBtb2RlbCBvZmZlcmluZyB0aGF0IGNhbiBiZSB1c2VkIHdpdGggdGhlIEFQSS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNb2RlbCB7XG4gIC8qKlxuICAgKiBUaGUgbW9kZWwgaWRlbnRpZmllciwgd2hpY2ggY2FuIGJlIHJlZmVyZW5jZWQgaW4gdGhlIEFQSSBlbmRwb2ludHMuXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpIHdoZW4gdGhlIG1vZGVsIHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgb2JqZWN0IHR5cGUsIHdoaWNoIGlzIGFsd2F5cyBcIm1vZGVsXCIuXG4gICAqL1xuICBvYmplY3Q6ICdtb2RlbCc7XG5cbiAgLyoqXG4gICAqIFRoZSBvcmdhbml6YXRpb24gdGhhdCBvd25zIHRoZSBtb2RlbC5cbiAgICovXG4gIG93bmVkX2J5OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9kZWxEZWxldGVkIHtcbiAgaWQ6IHN0cmluZztcblxuICBkZWxldGVkOiBib29sZWFuO1xuXG4gIG9iamVjdDogc3RyaW5nO1xufVxuXG5Nb2RlbHMuTW9kZWxzUGFnZSA9IE1vZGVsc1BhZ2U7XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBNb2RlbHMge1xuICBleHBvcnQgeyB0eXBlIE1vZGVsIGFzIE1vZGVsLCB0eXBlIE1vZGVsRGVsZXRlZCBhcyBNb2RlbERlbGV0ZWQsIE1vZGVsc1BhZ2UgYXMgTW9kZWxzUGFnZSB9O1xufVxuIiwgIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnLi4vcmVzb3VyY2UnO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tICcuLi9jb3JlJztcblxuZXhwb3J0IGNsYXNzIE1vZGVyYXRpb25zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAvKipcbiAgICogQ2xhc3NpZmllcyBpZiB0ZXh0IGFuZC9vciBpbWFnZSBpbnB1dHMgYXJlIHBvdGVudGlhbGx5IGhhcm1mdWwuIExlYXJuIG1vcmUgaW5cbiAgICogdGhlIFttb2RlcmF0aW9uIGd1aWRlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvbW9kZXJhdGlvbikuXG4gICAqL1xuICBjcmVhdGUoXG4gICAgYm9keTogTW9kZXJhdGlvbkNyZWF0ZVBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5BUElQcm9taXNlPE1vZGVyYXRpb25DcmVhdGVSZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdCgnL21vZGVyYXRpb25zJywgeyBib2R5LCAuLi5vcHRpb25zIH0pO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9kZXJhdGlvbiB7XG4gIC8qKlxuICAgKiBBIGxpc3Qgb2YgdGhlIGNhdGVnb3JpZXMsIGFuZCB3aGV0aGVyIHRoZXkgYXJlIGZsYWdnZWQgb3Igbm90LlxuICAgKi9cbiAgY2F0ZWdvcmllczogTW9kZXJhdGlvbi5DYXRlZ29yaWVzO1xuXG4gIC8qKlxuICAgKiBBIGxpc3Qgb2YgdGhlIGNhdGVnb3JpZXMgYWxvbmcgd2l0aCB0aGUgaW5wdXQgdHlwZShzKSB0aGF0IHRoZSBzY29yZSBhcHBsaWVzIHRvLlxuICAgKi9cbiAgY2F0ZWdvcnlfYXBwbGllZF9pbnB1dF90eXBlczogTW9kZXJhdGlvbi5DYXRlZ29yeUFwcGxpZWRJbnB1dFR5cGVzO1xuXG4gIC8qKlxuICAgKiBBIGxpc3Qgb2YgdGhlIGNhdGVnb3JpZXMgYWxvbmcgd2l0aCB0aGVpciBzY29yZXMgYXMgcHJlZGljdGVkIGJ5IG1vZGVsLlxuICAgKi9cbiAgY2F0ZWdvcnlfc2NvcmVzOiBNb2RlcmF0aW9uLkNhdGVnb3J5U2NvcmVzO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGFueSBvZiB0aGUgYmVsb3cgY2F0ZWdvcmllcyBhcmUgZmxhZ2dlZC5cbiAgICovXG4gIGZsYWdnZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgTW9kZXJhdGlvbiB7XG4gIC8qKlxuICAgKiBBIGxpc3Qgb2YgdGhlIGNhdGVnb3JpZXMsIGFuZCB3aGV0aGVyIHRoZXkgYXJlIGZsYWdnZWQgb3Igbm90LlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBDYXRlZ29yaWVzIHtcbiAgICAvKipcbiAgICAgKiBDb250ZW50IHRoYXQgZXhwcmVzc2VzLCBpbmNpdGVzLCBvciBwcm9tb3RlcyBoYXJhc3NpbmcgbGFuZ3VhZ2UgdG93YXJkcyBhbnlcbiAgICAgKiB0YXJnZXQuXG4gICAgICovXG4gICAgaGFyYXNzbWVudDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEhhcmFzc21lbnQgY29udGVudCB0aGF0IGFsc28gaW5jbHVkZXMgdmlvbGVuY2Ugb3Igc2VyaW91cyBoYXJtIHRvd2FyZHMgYW55XG4gICAgICogdGFyZ2V0LlxuICAgICAqL1xuICAgICdoYXJhc3NtZW50L3RocmVhdGVuaW5nJzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIENvbnRlbnQgdGhhdCBleHByZXNzZXMsIGluY2l0ZXMsIG9yIHByb21vdGVzIGhhdGUgYmFzZWQgb24gcmFjZSwgZ2VuZGVyLFxuICAgICAqIGV0aG5pY2l0eSwgcmVsaWdpb24sIG5hdGlvbmFsaXR5LCBzZXh1YWwgb3JpZW50YXRpb24sIGRpc2FiaWxpdHkgc3RhdHVzLCBvclxuICAgICAqIGNhc3RlLiBIYXRlZnVsIGNvbnRlbnQgYWltZWQgYXQgbm9uLXByb3RlY3RlZCBncm91cHMgKGUuZy4sIGNoZXNzIHBsYXllcnMpIGlzXG4gICAgICogaGFyYXNzbWVudC5cbiAgICAgKi9cbiAgICBoYXRlOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogSGF0ZWZ1bCBjb250ZW50IHRoYXQgYWxzbyBpbmNsdWRlcyB2aW9sZW5jZSBvciBzZXJpb3VzIGhhcm0gdG93YXJkcyB0aGUgdGFyZ2V0ZWRcbiAgICAgKiBncm91cCBiYXNlZCBvbiByYWNlLCBnZW5kZXIsIGV0aG5pY2l0eSwgcmVsaWdpb24sIG5hdGlvbmFsaXR5LCBzZXh1YWxcbiAgICAgKiBvcmllbnRhdGlvbiwgZGlzYWJpbGl0eSBzdGF0dXMsIG9yIGNhc3RlLlxuICAgICAqL1xuICAgICdoYXRlL3RocmVhdGVuaW5nJzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIENvbnRlbnQgdGhhdCBpbmNsdWRlcyBpbnN0cnVjdGlvbnMgb3IgYWR2aWNlIHRoYXQgZmFjaWxpdGF0ZSB0aGUgcGxhbm5pbmcgb3JcbiAgICAgKiBleGVjdXRpb24gb2Ygd3Jvbmdkb2luZywgb3IgdGhhdCBnaXZlcyBhZHZpY2Ugb3IgaW5zdHJ1Y3Rpb24gb24gaG93IHRvIGNvbW1pdFxuICAgICAqIGlsbGljaXQgYWN0cy4gRm9yIGV4YW1wbGUsIFwiaG93IHRvIHNob3BsaWZ0XCIgd291bGQgZml0IHRoaXMgY2F0ZWdvcnkuXG4gICAgICovXG4gICAgaWxsaWNpdDogYm9vbGVhbiB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBDb250ZW50IHRoYXQgaW5jbHVkZXMgaW5zdHJ1Y3Rpb25zIG9yIGFkdmljZSB0aGF0IGZhY2lsaXRhdGUgdGhlIHBsYW5uaW5nIG9yXG4gICAgICogZXhlY3V0aW9uIG9mIHdyb25nZG9pbmcgdGhhdCBhbHNvIGluY2x1ZGVzIHZpb2xlbmNlLCBvciB0aGF0IGdpdmVzIGFkdmljZSBvclxuICAgICAqIGluc3RydWN0aW9uIG9uIHRoZSBwcm9jdXJlbWVudCBvZiBhbnkgd2VhcG9uLlxuICAgICAqL1xuICAgICdpbGxpY2l0L3Zpb2xlbnQnOiBib29sZWFuIHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIENvbnRlbnQgdGhhdCBwcm9tb3RlcywgZW5jb3VyYWdlcywgb3IgZGVwaWN0cyBhY3RzIG9mIHNlbGYtaGFybSwgc3VjaCBhc1xuICAgICAqIHN1aWNpZGUsIGN1dHRpbmcsIGFuZCBlYXRpbmcgZGlzb3JkZXJzLlxuICAgICAqL1xuICAgICdzZWxmLWhhcm0nOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQ29udGVudCB0aGF0IGVuY291cmFnZXMgcGVyZm9ybWluZyBhY3RzIG9mIHNlbGYtaGFybSwgc3VjaCBhcyBzdWljaWRlLCBjdXR0aW5nLFxuICAgICAqIGFuZCBlYXRpbmcgZGlzb3JkZXJzLCBvciB0aGF0IGdpdmVzIGluc3RydWN0aW9ucyBvciBhZHZpY2Ugb24gaG93IHRvIGNvbW1pdCBzdWNoXG4gICAgICogYWN0cy5cbiAgICAgKi9cbiAgICAnc2VsZi1oYXJtL2luc3RydWN0aW9ucyc6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBDb250ZW50IHdoZXJlIHRoZSBzcGVha2VyIGV4cHJlc3NlcyB0aGF0IHRoZXkgYXJlIGVuZ2FnaW5nIG9yIGludGVuZCB0byBlbmdhZ2VcbiAgICAgKiBpbiBhY3RzIG9mIHNlbGYtaGFybSwgc3VjaCBhcyBzdWljaWRlLCBjdXR0aW5nLCBhbmQgZWF0aW5nIGRpc29yZGVycy5cbiAgICAgKi9cbiAgICAnc2VsZi1oYXJtL2ludGVudCc6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBDb250ZW50IG1lYW50IHRvIGFyb3VzZSBzZXh1YWwgZXhjaXRlbWVudCwgc3VjaCBhcyB0aGUgZGVzY3JpcHRpb24gb2Ygc2V4dWFsXG4gICAgICogYWN0aXZpdHksIG9yIHRoYXQgcHJvbW90ZXMgc2V4dWFsIHNlcnZpY2VzIChleGNsdWRpbmcgc2V4IGVkdWNhdGlvbiBhbmRcbiAgICAgKiB3ZWxsbmVzcykuXG4gICAgICovXG4gICAgc2V4dWFsOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogU2V4dWFsIGNvbnRlbnQgdGhhdCBpbmNsdWRlcyBhbiBpbmRpdmlkdWFsIHdobyBpcyB1bmRlciAxOCB5ZWFycyBvbGQuXG4gICAgICovXG4gICAgJ3NleHVhbC9taW5vcnMnOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQ29udGVudCB0aGF0IGRlcGljdHMgZGVhdGgsIHZpb2xlbmNlLCBvciBwaHlzaWNhbCBpbmp1cnkuXG4gICAgICovXG4gICAgdmlvbGVuY2U6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBDb250ZW50IHRoYXQgZGVwaWN0cyBkZWF0aCwgdmlvbGVuY2UsIG9yIHBoeXNpY2FsIGluanVyeSBpbiBncmFwaGljIGRldGFpbC5cbiAgICAgKi9cbiAgICAndmlvbGVuY2UvZ3JhcGhpYyc6IGJvb2xlYW47XG4gIH1cblxuICAvKipcbiAgICogQSBsaXN0IG9mIHRoZSBjYXRlZ29yaWVzIGFsb25nIHdpdGggdGhlIGlucHV0IHR5cGUocykgdGhhdCB0aGUgc2NvcmUgYXBwbGllcyB0by5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgQ2F0ZWdvcnlBcHBsaWVkSW5wdXRUeXBlcyB7XG4gICAgLyoqXG4gICAgICogVGhlIGFwcGxpZWQgaW5wdXQgdHlwZShzKSBmb3IgdGhlIGNhdGVnb3J5ICdoYXJhc3NtZW50Jy5cbiAgICAgKi9cbiAgICBoYXJhc3NtZW50OiBBcnJheTwndGV4dCc+O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFwcGxpZWQgaW5wdXQgdHlwZShzKSBmb3IgdGhlIGNhdGVnb3J5ICdoYXJhc3NtZW50L3RocmVhdGVuaW5nJy5cbiAgICAgKi9cbiAgICAnaGFyYXNzbWVudC90aHJlYXRlbmluZyc6IEFycmF5PCd0ZXh0Jz47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYXBwbGllZCBpbnB1dCB0eXBlKHMpIGZvciB0aGUgY2F0ZWdvcnkgJ2hhdGUnLlxuICAgICAqL1xuICAgIGhhdGU6IEFycmF5PCd0ZXh0Jz47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYXBwbGllZCBpbnB1dCB0eXBlKHMpIGZvciB0aGUgY2F0ZWdvcnkgJ2hhdGUvdGhyZWF0ZW5pbmcnLlxuICAgICAqL1xuICAgICdoYXRlL3RocmVhdGVuaW5nJzogQXJyYXk8J3RleHQnPjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhcHBsaWVkIGlucHV0IHR5cGUocykgZm9yIHRoZSBjYXRlZ29yeSAnaWxsaWNpdCcuXG4gICAgICovXG4gICAgaWxsaWNpdDogQXJyYXk8J3RleHQnPjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhcHBsaWVkIGlucHV0IHR5cGUocykgZm9yIHRoZSBjYXRlZ29yeSAnaWxsaWNpdC92aW9sZW50Jy5cbiAgICAgKi9cbiAgICAnaWxsaWNpdC92aW9sZW50JzogQXJyYXk8J3RleHQnPjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhcHBsaWVkIGlucHV0IHR5cGUocykgZm9yIHRoZSBjYXRlZ29yeSAnc2VsZi1oYXJtJy5cbiAgICAgKi9cbiAgICAnc2VsZi1oYXJtJzogQXJyYXk8J3RleHQnIHwgJ2ltYWdlJz47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYXBwbGllZCBpbnB1dCB0eXBlKHMpIGZvciB0aGUgY2F0ZWdvcnkgJ3NlbGYtaGFybS9pbnN0cnVjdGlvbnMnLlxuICAgICAqL1xuICAgICdzZWxmLWhhcm0vaW5zdHJ1Y3Rpb25zJzogQXJyYXk8J3RleHQnIHwgJ2ltYWdlJz47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYXBwbGllZCBpbnB1dCB0eXBlKHMpIGZvciB0aGUgY2F0ZWdvcnkgJ3NlbGYtaGFybS9pbnRlbnQnLlxuICAgICAqL1xuICAgICdzZWxmLWhhcm0vaW50ZW50JzogQXJyYXk8J3RleHQnIHwgJ2ltYWdlJz47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYXBwbGllZCBpbnB1dCB0eXBlKHMpIGZvciB0aGUgY2F0ZWdvcnkgJ3NleHVhbCcuXG4gICAgICovXG4gICAgc2V4dWFsOiBBcnJheTwndGV4dCcgfCAnaW1hZ2UnPjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhcHBsaWVkIGlucHV0IHR5cGUocykgZm9yIHRoZSBjYXRlZ29yeSAnc2V4dWFsL21pbm9ycycuXG4gICAgICovXG4gICAgJ3NleHVhbC9taW5vcnMnOiBBcnJheTwndGV4dCc+O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFwcGxpZWQgaW5wdXQgdHlwZShzKSBmb3IgdGhlIGNhdGVnb3J5ICd2aW9sZW5jZScuXG4gICAgICovXG4gICAgdmlvbGVuY2U6IEFycmF5PCd0ZXh0JyB8ICdpbWFnZSc+O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFwcGxpZWQgaW5wdXQgdHlwZShzKSBmb3IgdGhlIGNhdGVnb3J5ICd2aW9sZW5jZS9ncmFwaGljJy5cbiAgICAgKi9cbiAgICAndmlvbGVuY2UvZ3JhcGhpYyc6IEFycmF5PCd0ZXh0JyB8ICdpbWFnZSc+O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgbGlzdCBvZiB0aGUgY2F0ZWdvcmllcyBhbG9uZyB3aXRoIHRoZWlyIHNjb3JlcyBhcyBwcmVkaWN0ZWQgYnkgbW9kZWwuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIENhdGVnb3J5U2NvcmVzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgc2NvcmUgZm9yIHRoZSBjYXRlZ29yeSAnaGFyYXNzbWVudCcuXG4gICAgICovXG4gICAgaGFyYXNzbWVudDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNjb3JlIGZvciB0aGUgY2F0ZWdvcnkgJ2hhcmFzc21lbnQvdGhyZWF0ZW5pbmcnLlxuICAgICAqL1xuICAgICdoYXJhc3NtZW50L3RocmVhdGVuaW5nJzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNjb3JlIGZvciB0aGUgY2F0ZWdvcnkgJ2hhdGUnLlxuICAgICAqL1xuICAgIGhhdGU6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzY29yZSBmb3IgdGhlIGNhdGVnb3J5ICdoYXRlL3RocmVhdGVuaW5nJy5cbiAgICAgKi9cbiAgICAnaGF0ZS90aHJlYXRlbmluZyc6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzY29yZSBmb3IgdGhlIGNhdGVnb3J5ICdpbGxpY2l0Jy5cbiAgICAgKi9cbiAgICBpbGxpY2l0OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2NvcmUgZm9yIHRoZSBjYXRlZ29yeSAnaWxsaWNpdC92aW9sZW50Jy5cbiAgICAgKi9cbiAgICAnaWxsaWNpdC92aW9sZW50JzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNjb3JlIGZvciB0aGUgY2F0ZWdvcnkgJ3NlbGYtaGFybScuXG4gICAgICovXG4gICAgJ3NlbGYtaGFybSc6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzY29yZSBmb3IgdGhlIGNhdGVnb3J5ICdzZWxmLWhhcm0vaW5zdHJ1Y3Rpb25zJy5cbiAgICAgKi9cbiAgICAnc2VsZi1oYXJtL2luc3RydWN0aW9ucyc6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzY29yZSBmb3IgdGhlIGNhdGVnb3J5ICdzZWxmLWhhcm0vaW50ZW50Jy5cbiAgICAgKi9cbiAgICAnc2VsZi1oYXJtL2ludGVudCc6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzY29yZSBmb3IgdGhlIGNhdGVnb3J5ICdzZXh1YWwnLlxuICAgICAqL1xuICAgIHNleHVhbDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNjb3JlIGZvciB0aGUgY2F0ZWdvcnkgJ3NleHVhbC9taW5vcnMnLlxuICAgICAqL1xuICAgICdzZXh1YWwvbWlub3JzJzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNjb3JlIGZvciB0aGUgY2F0ZWdvcnkgJ3Zpb2xlbmNlJy5cbiAgICAgKi9cbiAgICB2aW9sZW5jZTogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNjb3JlIGZvciB0aGUgY2F0ZWdvcnkgJ3Zpb2xlbmNlL2dyYXBoaWMnLlxuICAgICAqL1xuICAgICd2aW9sZW5jZS9ncmFwaGljJzogbnVtYmVyO1xuICB9XG59XG5cbi8qKlxuICogQW4gb2JqZWN0IGRlc2NyaWJpbmcgYW4gaW1hZ2UgdG8gY2xhc3NpZnkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTW9kZXJhdGlvbkltYWdlVVJMSW5wdXQge1xuICAvKipcbiAgICogQ29udGFpbnMgZWl0aGVyIGFuIGltYWdlIFVSTCBvciBhIGRhdGEgVVJMIGZvciBhIGJhc2U2NCBlbmNvZGVkIGltYWdlLlxuICAgKi9cbiAgaW1hZ2VfdXJsOiBNb2RlcmF0aW9uSW1hZ2VVUkxJbnB1dC5JbWFnZVVSTDtcblxuICAvKipcbiAgICogQWx3YXlzIGBpbWFnZV91cmxgLlxuICAgKi9cbiAgdHlwZTogJ2ltYWdlX3VybCc7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgTW9kZXJhdGlvbkltYWdlVVJMSW5wdXQge1xuICAvKipcbiAgICogQ29udGFpbnMgZWl0aGVyIGFuIGltYWdlIFVSTCBvciBhIGRhdGEgVVJMIGZvciBhIGJhc2U2NCBlbmNvZGVkIGltYWdlLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJbWFnZVVSTCB7XG4gICAgLyoqXG4gICAgICogRWl0aGVyIGEgVVJMIG9mIHRoZSBpbWFnZSBvciB0aGUgYmFzZTY0IGVuY29kZWQgaW1hZ2UgZGF0YS5cbiAgICAgKi9cbiAgICB1cmw6IHN0cmluZztcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBNb2RlcmF0aW9uTW9kZWwgPVxuICB8ICdvbW5pLW1vZGVyYXRpb24tbGF0ZXN0J1xuICB8ICdvbW5pLW1vZGVyYXRpb24tMjAyNC0wOS0yNidcbiAgfCAndGV4dC1tb2RlcmF0aW9uLWxhdGVzdCdcbiAgfCAndGV4dC1tb2RlcmF0aW9uLXN0YWJsZSc7XG5cbi8qKlxuICogQW4gb2JqZWN0IGRlc2NyaWJpbmcgYW4gaW1hZ2UgdG8gY2xhc3NpZnkuXG4gKi9cbmV4cG9ydCB0eXBlIE1vZGVyYXRpb25NdWx0aU1vZGFsSW5wdXQgPSBNb2RlcmF0aW9uSW1hZ2VVUkxJbnB1dCB8IE1vZGVyYXRpb25UZXh0SW5wdXQ7XG5cbi8qKlxuICogQW4gb2JqZWN0IGRlc2NyaWJpbmcgdGV4dCB0byBjbGFzc2lmeS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNb2RlcmF0aW9uVGV4dElucHV0IHtcbiAgLyoqXG4gICAqIEEgc3RyaW5nIG9mIHRleHQgdG8gY2xhc3NpZnkuXG4gICAqL1xuICB0ZXh0OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEFsd2F5cyBgdGV4dGAuXG4gICAqL1xuICB0eXBlOiAndGV4dCc7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBpZiBhIGdpdmVuIHRleHQgaW5wdXQgaXMgcG90ZW50aWFsbHkgaGFybWZ1bC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNb2RlcmF0aW9uQ3JlYXRlUmVzcG9uc2Uge1xuICAvKipcbiAgICogVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgbW9kZXJhdGlvbiByZXF1ZXN0LlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG1vZGVsIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIG1vZGVyYXRpb24gcmVzdWx0cy5cbiAgICovXG4gIG1vZGVsOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgbGlzdCBvZiBtb2RlcmF0aW9uIG9iamVjdHMuXG4gICAqL1xuICByZXN1bHRzOiBBcnJheTxNb2RlcmF0aW9uPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNb2RlcmF0aW9uQ3JlYXRlUGFyYW1zIHtcbiAgLyoqXG4gICAqIElucHV0IChvciBpbnB1dHMpIHRvIGNsYXNzaWZ5LiBDYW4gYmUgYSBzaW5nbGUgc3RyaW5nLCBhbiBhcnJheSBvZiBzdHJpbmdzLCBvclxuICAgKiBhbiBhcnJheSBvZiBtdWx0aS1tb2RhbCBpbnB1dCBvYmplY3RzIHNpbWlsYXIgdG8gb3RoZXIgbW9kZWxzLlxuICAgKi9cbiAgaW5wdXQ6IHN0cmluZyB8IEFycmF5PHN0cmluZz4gfCBBcnJheTxNb2RlcmF0aW9uTXVsdGlNb2RhbElucHV0PjtcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgbW9kZXJhdGlvbiBtb2RlbCB5b3Ugd291bGQgbGlrZSB0byB1c2UuIExlYXJuIG1vcmUgaW5cbiAgICogW3RoZSBtb2RlcmF0aW9uIGd1aWRlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvbW9kZXJhdGlvbiksIGFuZFxuICAgKiBsZWFybiBhYm91dCBhdmFpbGFibGUgbW9kZWxzXG4gICAqIFtoZXJlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9tb2RlbHMjbW9kZXJhdGlvbikuXG4gICAqL1xuICBtb2RlbD86IChzdHJpbmcgJiB7fSkgfCBNb2RlcmF0aW9uTW9kZWw7XG59XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBNb2RlcmF0aW9ucyB7XG4gIGV4cG9ydCB7XG4gICAgdHlwZSBNb2RlcmF0aW9uIGFzIE1vZGVyYXRpb24sXG4gICAgdHlwZSBNb2RlcmF0aW9uSW1hZ2VVUkxJbnB1dCBhcyBNb2RlcmF0aW9uSW1hZ2VVUkxJbnB1dCxcbiAgICB0eXBlIE1vZGVyYXRpb25Nb2RlbCBhcyBNb2RlcmF0aW9uTW9kZWwsXG4gICAgdHlwZSBNb2RlcmF0aW9uTXVsdGlNb2RhbElucHV0IGFzIE1vZGVyYXRpb25NdWx0aU1vZGFsSW5wdXQsXG4gICAgdHlwZSBNb2RlcmF0aW9uVGV4dElucHV0IGFzIE1vZGVyYXRpb25UZXh0SW5wdXQsXG4gICAgdHlwZSBNb2RlcmF0aW9uQ3JlYXRlUmVzcG9uc2UgYXMgTW9kZXJhdGlvbkNyZWF0ZVJlc3BvbnNlLFxuICAgIHR5cGUgTW9kZXJhdGlvbkNyZWF0ZVBhcmFtcyBhcyBNb2RlcmF0aW9uQ3JlYXRlUGFyYW1zLFxuICB9O1xufVxuIiwgImltcG9ydCB7IE9wZW5BSUVycm9yIH0gZnJvbSAnLi4vZXJyb3InO1xuaW1wb3J0IHR5cGUgeyBDaGF0Q29tcGxldGlvblRvb2wgfSBmcm9tICcuLi9yZXNvdXJjZXMvY2hhdC9jb21wbGV0aW9ucyc7XG5pbXBvcnQge1xuICBSZXNwb25zZVRleHRDb25maWcsXG4gIHR5cGUgRnVuY3Rpb25Ub29sLFxuICB0eXBlIFBhcnNlZENvbnRlbnQsXG4gIHR5cGUgUGFyc2VkUmVzcG9uc2UsXG4gIHR5cGUgUGFyc2VkUmVzcG9uc2VGdW5jdGlvblRvb2xDYWxsLFxuICB0eXBlIFBhcnNlZFJlc3BvbnNlT3V0cHV0SXRlbSxcbiAgdHlwZSBSZXNwb25zZSxcbiAgdHlwZSBSZXNwb25zZUNyZWF0ZVBhcmFtc0Jhc2UsXG4gIHR5cGUgUmVzcG9uc2VDcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcsXG4gIHR5cGUgUmVzcG9uc2VGdW5jdGlvblRvb2xDYWxsLFxuICB0eXBlIFRvb2wsXG59IGZyb20gJy4uL3Jlc291cmNlcy9yZXNwb25zZXMvcmVzcG9uc2VzJztcbmltcG9ydCB7IHR5cGUgQXV0b1BhcnNlYWJsZVRleHRGb3JtYXQsIGlzQXV0b1BhcnNhYmxlUmVzcG9uc2VGb3JtYXQgfSBmcm9tICcuLi9saWIvcGFyc2VyJztcblxuZXhwb3J0IHR5cGUgUGFyc2VhYmxlVG9vbHNQYXJhbXMgPSBBcnJheTxUb29sPiB8IENoYXRDb21wbGV0aW9uVG9vbCB8IG51bGw7XG5cbmV4cG9ydCB0eXBlIFJlc3BvbnNlQ3JlYXRlUGFyYW1zV2l0aFRvb2xzID0gUmVzcG9uc2VDcmVhdGVQYXJhbXNCYXNlICYge1xuICB0b29scz86IFBhcnNlYWJsZVRvb2xzUGFyYW1zO1xufTtcblxudHlwZSBUZXh0Q29uZmlnUGFyYW1zID0geyB0ZXh0PzogUmVzcG9uc2VUZXh0Q29uZmlnIH07XG5cbmV4cG9ydCB0eXBlIEV4dHJhY3RQYXJzZWRDb250ZW50RnJvbVBhcmFtczxQYXJhbXMgZXh0ZW5kcyBUZXh0Q29uZmlnUGFyYW1zPiA9XG4gIE5vbk51bGxhYmxlPFBhcmFtc1sndGV4dCddPlsnZm9ybWF0J10gZXh0ZW5kcyBBdXRvUGFyc2VhYmxlVGV4dEZvcm1hdDxpbmZlciBQPiA/IFAgOiBudWxsO1xuXG5leHBvcnQgZnVuY3Rpb24gbWF5YmVQYXJzZVJlc3BvbnNlPFxuICBQYXJhbXMgZXh0ZW5kcyBSZXNwb25zZUNyZWF0ZVBhcmFtc0Jhc2UgfCBudWxsLFxuICBQYXJzZWRUID0gUGFyYW1zIGV4dGVuZHMgbnVsbCA/IG51bGwgOiBFeHRyYWN0UGFyc2VkQ29udGVudEZyb21QYXJhbXM8Tm9uTnVsbGFibGU8UGFyYW1zPj4sXG4+KHJlc3BvbnNlOiBSZXNwb25zZSwgcGFyYW1zOiBQYXJhbXMpOiBQYXJzZWRSZXNwb25zZTxQYXJzZWRUPiB7XG4gIGlmICghcGFyYW1zIHx8ICFoYXNBdXRvUGFyc2VhYmxlSW5wdXQocGFyYW1zKSkge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5yZXNwb25zZSxcbiAgICAgIG91dHB1dF9wYXJzZWQ6IG51bGwsXG4gICAgICBvdXRwdXQ6IHJlc3BvbnNlLm91dHB1dC5tYXAoKGl0ZW0pID0+IHtcbiAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ2Z1bmN0aW9uX2NhbGwnKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgICBwYXJzZWRfYXJndW1lbnRzOiBudWxsLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnbWVzc2FnZScpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGl0ZW0uY29udGVudC5tYXAoKGNvbnRlbnQpID0+ICh7XG4gICAgICAgICAgICAgIC4uLmNvbnRlbnQsXG4gICAgICAgICAgICAgIHBhcnNlZDogbnVsbCxcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHBhcnNlUmVzcG9uc2UocmVzcG9uc2UsIHBhcmFtcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVJlc3BvbnNlPFxuICBQYXJhbXMgZXh0ZW5kcyBSZXNwb25zZUNyZWF0ZVBhcmFtc0Jhc2UsXG4gIFBhcnNlZFQgPSBFeHRyYWN0UGFyc2VkQ29udGVudEZyb21QYXJhbXM8UGFyYW1zPixcbj4ocmVzcG9uc2U6IFJlc3BvbnNlLCBwYXJhbXM6IFBhcmFtcyk6IFBhcnNlZFJlc3BvbnNlPFBhcnNlZFQ+IHtcbiAgY29uc3Qgb3V0cHV0OiBBcnJheTxQYXJzZWRSZXNwb25zZU91dHB1dEl0ZW08UGFyc2VkVD4+ID0gcmVzcG9uc2Uub3V0cHV0Lm1hcChcbiAgICAoaXRlbSk6IFBhcnNlZFJlc3BvbnNlT3V0cHV0SXRlbTxQYXJzZWRUPiA9PiB7XG4gICAgICBpZiAoaXRlbS50eXBlID09PSAnZnVuY3Rpb25fY2FsbCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgIHBhcnNlZF9hcmd1bWVudHM6IHBhcnNlVG9vbENhbGwocGFyYW1zLCBpdGVtKSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdtZXNzYWdlJykge1xuICAgICAgICBjb25zdCBjb250ZW50OiBBcnJheTxQYXJzZWRDb250ZW50PFBhcnNlZFQ+PiA9IGl0ZW0uY29udGVudC5tYXAoKGNvbnRlbnQpID0+IHtcbiAgICAgICAgICBpZiAoY29udGVudC50eXBlID09PSAnb3V0cHV0X3RleHQnKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAuLi5jb250ZW50LFxuICAgICAgICAgICAgICBwYXJzZWQ6IHBhcnNlVGV4dEZvcm1hdChwYXJhbXMsIGNvbnRlbnQudGV4dCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgY29udGVudCxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfSxcbiAgKTtcblxuICBjb25zdCBwYXJzZWQ6IE9taXQ8UGFyc2VkUmVzcG9uc2U8UGFyc2VkVD4sICdvdXRwdXRfcGFyc2VkJz4gPSBPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZSwgeyBvdXRwdXQgfSk7XG4gIGlmICghT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyZXNwb25zZSwgJ291dHB1dF90ZXh0JykpIHtcbiAgICBhZGRPdXRwdXRUZXh0KHBhcnNlZCk7XG4gIH1cblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocGFyc2VkLCAnb3V0cHV0X3BhcnNlZCcsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldCgpIHtcbiAgICAgIGZvciAoY29uc3Qgb3V0cHV0IG9mIHBhcnNlZC5vdXRwdXQpIHtcbiAgICAgICAgaWYgKG91dHB1dC50eXBlICE9PSAnbWVzc2FnZScpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgY29udGVudCBvZiBvdXRwdXQuY29udGVudCkge1xuICAgICAgICAgIGlmIChjb250ZW50LnR5cGUgPT09ICdvdXRwdXRfdGV4dCcgJiYgY29udGVudC5wYXJzZWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZW50LnBhcnNlZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZCBhcyBQYXJzZWRSZXNwb25zZTxQYXJzZWRUPjtcbn1cblxuZnVuY3Rpb24gcGFyc2VUZXh0Rm9ybWF0PFxuICBQYXJhbXMgZXh0ZW5kcyBSZXNwb25zZUNyZWF0ZVBhcmFtc0Jhc2UsXG4gIFBhcnNlZFQgPSBFeHRyYWN0UGFyc2VkQ29udGVudEZyb21QYXJhbXM8UGFyYW1zPixcbj4ocGFyYW1zOiBQYXJhbXMsIGNvbnRlbnQ6IHN0cmluZyk6IFBhcnNlZFQgfCBudWxsIHtcbiAgaWYgKHBhcmFtcy50ZXh0Py5mb3JtYXQ/LnR5cGUgIT09ICdqc29uX3NjaGVtYScpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICgnJHBhcnNlUmF3JyBpbiBwYXJhbXMudGV4dD8uZm9ybWF0KSB7XG4gICAgY29uc3QgdGV4dF9mb3JtYXQgPSBwYXJhbXMudGV4dD8uZm9ybWF0IGFzIHVua25vd24gYXMgQXV0b1BhcnNlYWJsZVRleHRGb3JtYXQ8UGFyc2VkVD47XG4gICAgcmV0dXJuIHRleHRfZm9ybWF0LiRwYXJzZVJhdyhjb250ZW50KTtcbiAgfVxuXG4gIHJldHVybiBKU09OLnBhcnNlKGNvbnRlbnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzQXV0b1BhcnNlYWJsZUlucHV0KHBhcmFtczogUmVzcG9uc2VDcmVhdGVQYXJhbXNXaXRoVG9vbHMpOiBib29sZWFuIHtcbiAgaWYgKGlzQXV0b1BhcnNhYmxlUmVzcG9uc2VGb3JtYXQocGFyYW1zLnRleHQ/LmZvcm1hdCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxudHlwZSBUb29sT3B0aW9ucyA9IHtcbiAgbmFtZTogc3RyaW5nO1xuICBhcmd1bWVudHM6IGFueTtcbiAgZnVuY3Rpb24/OiAoKGFyZ3M6IGFueSkgPT4gYW55KSB8IHVuZGVmaW5lZDtcbn07XG5cbmV4cG9ydCB0eXBlIEF1dG9QYXJzZWFibGVSZXNwb25zZVRvb2w8XG4gIE9wdGlvbnNUIGV4dGVuZHMgVG9vbE9wdGlvbnMsXG4gIEhhc0Z1bmN0aW9uID0gT3B0aW9uc1RbJ2Z1bmN0aW9uJ10gZXh0ZW5kcyBGdW5jdGlvbiA/IHRydWUgOiBmYWxzZSxcbj4gPSBGdW5jdGlvblRvb2wgJiB7XG4gIF9fYXJndW1lbnRzOiBPcHRpb25zVFsnYXJndW1lbnRzJ107IC8vIHR5cGUtbGV2ZWwgb25seVxuICBfX25hbWU6IE9wdGlvbnNUWyduYW1lJ107IC8vIHR5cGUtbGV2ZWwgb25seVxuXG4gICRicmFuZDogJ2F1dG8tcGFyc2VhYmxlLXRvb2wnO1xuICAkY2FsbGJhY2s6ICgoYXJnczogT3B0aW9uc1RbJ2FyZ3VtZW50cyddKSA9PiBhbnkpIHwgdW5kZWZpbmVkO1xuICAkcGFyc2VSYXcoYXJnczogc3RyaW5nKTogT3B0aW9uc1RbJ2FyZ3VtZW50cyddO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VQYXJzZWFibGVSZXNwb25zZVRvb2w8T3B0aW9uc1QgZXh0ZW5kcyBUb29sT3B0aW9ucz4oXG4gIHRvb2w6IEZ1bmN0aW9uVG9vbCxcbiAge1xuICAgIHBhcnNlcixcbiAgICBjYWxsYmFjayxcbiAgfToge1xuICAgIHBhcnNlcjogKGNvbnRlbnQ6IHN0cmluZykgPT4gT3B0aW9uc1RbJ2FyZ3VtZW50cyddO1xuICAgIGNhbGxiYWNrOiAoKGFyZ3M6IGFueSkgPT4gYW55KSB8IHVuZGVmaW5lZDtcbiAgfSxcbik6IEF1dG9QYXJzZWFibGVSZXNwb25zZVRvb2w8T3B0aW9uc1RbJ2FyZ3VtZW50cyddPiB7XG4gIGNvbnN0IG9iaiA9IHsgLi4udG9vbCB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwge1xuICAgICRicmFuZDoge1xuICAgICAgdmFsdWU6ICdhdXRvLXBhcnNlYWJsZS10b29sJyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIH0sXG4gICAgJHBhcnNlUmF3OiB7XG4gICAgICB2YWx1ZTogcGFyc2VyLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgfSxcbiAgICAkY2FsbGJhY2s6IHtcbiAgICAgIHZhbHVlOiBjYWxsYmFjayxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiBvYmogYXMgQXV0b1BhcnNlYWJsZVJlc3BvbnNlVG9vbDxPcHRpb25zVFsnYXJndW1lbnRzJ10+O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBdXRvUGFyc2FibGVUb29sKHRvb2w6IGFueSk6IHRvb2wgaXMgQXV0b1BhcnNlYWJsZVJlc3BvbnNlVG9vbDxhbnk+IHtcbiAgcmV0dXJuIHRvb2w/LlsnJGJyYW5kJ10gPT09ICdhdXRvLXBhcnNlYWJsZS10b29sJztcbn1cblxuZnVuY3Rpb24gZ2V0SW5wdXRUb29sQnlOYW1lKGlucHV0X3Rvb2xzOiBBcnJheTxUb29sPiwgbmFtZTogc3RyaW5nKTogRnVuY3Rpb25Ub29sIHwgdW5kZWZpbmVkIHtcbiAgcmV0dXJuIGlucHV0X3Rvb2xzLmZpbmQoKHRvb2wpID0+IHRvb2wudHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0b29sLm5hbWUgPT09IG5hbWUpIGFzXG4gICAgfCBGdW5jdGlvblRvb2xcbiAgICB8IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gcGFyc2VUb29sQ2FsbDxQYXJhbXMgZXh0ZW5kcyBSZXNwb25zZUNyZWF0ZVBhcmFtc0Jhc2U+KFxuICBwYXJhbXM6IFBhcmFtcyxcbiAgdG9vbENhbGw6IFJlc3BvbnNlRnVuY3Rpb25Ub29sQ2FsbCxcbik6IFBhcnNlZFJlc3BvbnNlRnVuY3Rpb25Ub29sQ2FsbCB7XG4gIGNvbnN0IGlucHV0VG9vbCA9IGdldElucHV0VG9vbEJ5TmFtZShwYXJhbXMudG9vbHMgPz8gW10sIHRvb2xDYWxsLm5hbWUpO1xuXG4gIHJldHVybiB7XG4gICAgLi4udG9vbENhbGwsXG4gICAgLi4udG9vbENhbGwsXG4gICAgcGFyc2VkX2FyZ3VtZW50czpcbiAgICAgIGlzQXV0b1BhcnNhYmxlVG9vbChpbnB1dFRvb2wpID8gaW5wdXRUb29sLiRwYXJzZVJhdyh0b29sQ2FsbC5hcmd1bWVudHMpXG4gICAgICA6IGlucHV0VG9vbD8uc3RyaWN0ID8gSlNPTi5wYXJzZSh0b29sQ2FsbC5hcmd1bWVudHMpXG4gICAgICA6IG51bGwsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRQYXJzZVRvb2xDYWxsKFxuICBwYXJhbXM6IFJlc3BvbnNlQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCxcbiAgdG9vbENhbGw6IFJlc3BvbnNlRnVuY3Rpb25Ub29sQ2FsbCxcbik6IGJvb2xlYW4ge1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGlucHV0VG9vbCA9IGdldElucHV0VG9vbEJ5TmFtZShwYXJhbXMudG9vbHMgPz8gW10sIHRvb2xDYWxsLm5hbWUpO1xuICByZXR1cm4gaXNBdXRvUGFyc2FibGVUb29sKGlucHV0VG9vbCkgfHwgaW5wdXRUb29sPy5zdHJpY3QgfHwgZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUlucHV0VG9vbHModG9vbHM6IENoYXRDb21wbGV0aW9uVG9vbFtdIHwgdW5kZWZpbmVkKSB7XG4gIGZvciAoY29uc3QgdG9vbCBvZiB0b29scyA/PyBbXSkge1xuICAgIGlmICh0b29sLnR5cGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihcbiAgICAgICAgYEN1cnJlbnRseSBvbmx5IFxcYGZ1bmN0aW9uXFxgIHRvb2wgdHlwZXMgc3VwcG9ydCBhdXRvLXBhcnNpbmc7IFJlY2VpdmVkIFxcYCR7dG9vbC50eXBlfVxcYGAsXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh0b29sLmZ1bmN0aW9uLnN0cmljdCAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKFxuICAgICAgICBgVGhlIFxcYCR7dG9vbC5mdW5jdGlvbi5uYW1lfVxcYCB0b29sIGlzIG5vdCBtYXJrZWQgd2l0aCBcXGBzdHJpY3Q6IHRydWVcXGAuIE9ubHkgc3RyaWN0IGZ1bmN0aW9uIHRvb2xzIGNhbiBiZSBhdXRvLXBhcnNlZGAsXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkT3V0cHV0VGV4dChyc3A6IFJlc3BvbnNlKTogdm9pZCB7XG4gIGNvbnN0IHRleHRzOiBzdHJpbmdbXSA9IFtdO1xuICBmb3IgKGNvbnN0IG91dHB1dCBvZiByc3Aub3V0cHV0KSB7XG4gICAgaWYgKG91dHB1dC50eXBlICE9PSAnbWVzc2FnZScpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgY29udGVudCBvZiBvdXRwdXQuY29udGVudCkge1xuICAgICAgaWYgKGNvbnRlbnQudHlwZSA9PT0gJ291dHB1dF90ZXh0Jykge1xuICAgICAgICB0ZXh0cy5wdXNoKGNvbnRlbnQudGV4dCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcnNwLm91dHB1dF90ZXh0ID0gdGV4dHMuam9pbignJyk7XG59XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICcuLi8uLi9yZXNvdXJjZSc7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgUmVzcG9uc2VzQVBJIGZyb20gJy4vcmVzcG9uc2VzJztcbmltcG9ydCB7IFJlc3BvbnNlSXRlbXNQYWdlIH0gZnJvbSAnLi9yZXNwb25zZXMnO1xuaW1wb3J0IHsgdHlwZSBDdXJzb3JQYWdlUGFyYW1zIH0gZnJvbSAnLi4vLi4vcGFnaW5hdGlvbic7XG5cbmV4cG9ydCBjbGFzcyBJbnB1dEl0ZW1zIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAvKipcbiAgICogUmV0dXJucyBhIGxpc3Qgb2YgaW5wdXQgaXRlbXMgZm9yIGEgZ2l2ZW4gcmVzcG9uc2UuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHRzXG4gICAqIC8vIEF1dG9tYXRpY2FsbHkgZmV0Y2hlcyBtb3JlIHBhZ2VzIGFzIG5lZWRlZC5cbiAgICogZm9yIGF3YWl0IChjb25zdCByZXNwb25zZUl0ZW0gb2YgY2xpZW50LnJlc3BvbnNlcy5pbnB1dEl0ZW1zLmxpc3QoXG4gICAqICAgJ3Jlc3BvbnNlX2lkJyxcbiAgICogKSkge1xuICAgKiAgIC8vIC4uLlxuICAgKiB9XG4gICAqIGBgYFxuICAgKi9cbiAgbGlzdChcbiAgICByZXNwb25zZUlkOiBzdHJpbmcsXG4gICAgcXVlcnk/OiBJbnB1dEl0ZW1MaXN0UGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLlBhZ2VQcm9taXNlPFJlc3BvbnNlSXRlbXNQYWdlLCBSZXNwb25zZXNBUEkuUmVzcG9uc2VJdGVtPjtcbiAgbGlzdChcbiAgICByZXNwb25zZUlkOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuUGFnZVByb21pc2U8UmVzcG9uc2VJdGVtc1BhZ2UsIFJlc3BvbnNlc0FQSS5SZXNwb25zZUl0ZW0+O1xuICBsaXN0KFxuICAgIHJlc3BvbnNlSWQ6IHN0cmluZyxcbiAgICBxdWVyeTogSW5wdXRJdGVtTGlzdFBhcmFtcyB8IENvcmUuUmVxdWVzdE9wdGlvbnMgPSB7fSxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5QYWdlUHJvbWlzZTxSZXNwb25zZUl0ZW1zUGFnZSwgUmVzcG9uc2VzQVBJLlJlc3BvbnNlSXRlbT4ge1xuICAgIGlmIChpc1JlcXVlc3RPcHRpb25zKHF1ZXJ5KSkge1xuICAgICAgcmV0dXJuIHRoaXMubGlzdChyZXNwb25zZUlkLCB7fSwgcXVlcnkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoYC9yZXNwb25zZXMvJHtyZXNwb25zZUlkfS9pbnB1dF9pdGVtc2AsIFJlc3BvbnNlSXRlbXNQYWdlLCB7XG4gICAgICBxdWVyeSxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBIGxpc3Qgb2YgUmVzcG9uc2UgaXRlbXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VJdGVtTGlzdCB7XG4gIC8qKlxuICAgKiBBIGxpc3Qgb2YgaXRlbXMgdXNlZCB0byBnZW5lcmF0ZSB0aGlzIHJlc3BvbnNlLlxuICAgKi9cbiAgZGF0YTogQXJyYXk8UmVzcG9uc2VzQVBJLlJlc3BvbnNlSXRlbT47XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgZmlyc3QgaXRlbSBpbiB0aGUgbGlzdC5cbiAgICovXG4gIGZpcnN0X2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhlcmUgYXJlIG1vcmUgaXRlbXMgYXZhaWxhYmxlLlxuICAgKi9cbiAgaGFzX21vcmU6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgbGFzdCBpdGVtIGluIHRoZSBsaXN0LlxuICAgKi9cbiAgbGFzdF9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiBvYmplY3QgcmV0dXJuZWQsIG11c3QgYmUgYGxpc3RgLlxuICAgKi9cbiAgb2JqZWN0OiAnbGlzdCc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5wdXRJdGVtTGlzdFBhcmFtcyBleHRlbmRzIEN1cnNvclBhZ2VQYXJhbXMge1xuICAvKipcbiAgICogQW4gaXRlbSBJRCB0byBsaXN0IGl0ZW1zIGJlZm9yZSwgdXNlZCBpbiBwYWdpbmF0aW9uLlxuICAgKi9cbiAgYmVmb3JlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBZGRpdGlvbmFsIGZpZWxkcyB0byBpbmNsdWRlIGluIHRoZSByZXNwb25zZS4gU2VlIHRoZSBgaW5jbHVkZWAgcGFyYW1ldGVyIGZvclxuICAgKiBSZXNwb25zZSBjcmVhdGlvbiBhYm92ZSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICovXG4gIGluY2x1ZGU/OiBBcnJheTxSZXNwb25zZXNBUEkuUmVzcG9uc2VJbmNsdWRhYmxlPjtcblxuICAvKipcbiAgICogVGhlIG9yZGVyIHRvIHJldHVybiB0aGUgaW5wdXQgaXRlbXMgaW4uIERlZmF1bHQgaXMgYGRlc2NgLlxuICAgKlxuICAgKiAtIGBhc2NgOiBSZXR1cm4gdGhlIGlucHV0IGl0ZW1zIGluIGFzY2VuZGluZyBvcmRlci5cbiAgICogLSBgZGVzY2A6IFJldHVybiB0aGUgaW5wdXQgaXRlbXMgaW4gZGVzY2VuZGluZyBvcmRlci5cbiAgICovXG4gIG9yZGVyPzogJ2FzYycgfCAnZGVzYyc7XG59XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBJbnB1dEl0ZW1zIHtcbiAgZXhwb3J0IHsgdHlwZSBSZXNwb25zZUl0ZW1MaXN0IGFzIFJlc3BvbnNlSXRlbUxpc3QsIHR5cGUgSW5wdXRJdGVtTGlzdFBhcmFtcyBhcyBJbnB1dEl0ZW1MaXN0UGFyYW1zIH07XG59XG5cbmV4cG9ydCB7IFJlc3BvbnNlSXRlbXNQYWdlIH07XG4iLCAiaW1wb3J0IHtcbiAgUmVzcG9uc2VUZXh0Q29uZmlnLFxuICB0eXBlIFBhcnNlZFJlc3BvbnNlLFxuICB0eXBlIFJlc3BvbnNlLFxuICB0eXBlIFJlc3BvbnNlQ3JlYXRlUGFyYW1zQmFzZSxcbiAgdHlwZSBSZXNwb25zZUNyZWF0ZVBhcmFtc1N0cmVhbWluZyxcbiAgdHlwZSBSZXNwb25zZVN0cmVhbUV2ZW50LFxufSBmcm9tICcuLi8uLi9yZXNvdXJjZXMvcmVzcG9uc2VzL3Jlc3BvbnNlcyc7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgQVBJVXNlckFib3J0RXJyb3IsIE9wZW5BSUVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3InO1xuaW1wb3J0IE9wZW5BSSBmcm9tICcuLi8uLi9pbmRleCc7XG5pbXBvcnQgeyB0eXBlIEJhc2VFdmVudHMsIEV2ZW50U3RyZWFtIH0gZnJvbSAnLi4vRXZlbnRTdHJlYW0nO1xuaW1wb3J0IHsgdHlwZSBSZXNwb25zZUZ1bmN0aW9uQ2FsbEFyZ3VtZW50c0RlbHRhRXZlbnQsIHR5cGUgUmVzcG9uc2VUZXh0RGVsdGFFdmVudCB9IGZyb20gJy4vRXZlbnRUeXBlcyc7XG5pbXBvcnQgeyBtYXliZVBhcnNlUmVzcG9uc2UsIFBhcnNlYWJsZVRvb2xzUGFyYW1zIH0gZnJvbSAnLi4vUmVzcG9uc2VzUGFyc2VyJztcbmltcG9ydCB7IFN0cmVhbSB9IGZyb20gXCIuLi8uLi9zdHJlYW1pbmdcIjtcblxuZXhwb3J0IHR5cGUgUmVzcG9uc2VTdHJlYW1QYXJhbXMgPSBSZXNwb25zZUNyZWF0ZUFuZFN0cmVhbVBhcmFtcyB8IFJlc3BvbnNlU3RyZWFtQnlJZFBhcmFtcztcblxuZXhwb3J0IHR5cGUgUmVzcG9uc2VDcmVhdGVBbmRTdHJlYW1QYXJhbXMgPSBPbWl0PFJlc3BvbnNlQ3JlYXRlUGFyYW1zQmFzZSwgJ3N0cmVhbSc+ICYge1xuICBzdHJlYW0/OiB0cnVlO1xufTtcblxuZXhwb3J0IHR5cGUgUmVzcG9uc2VTdHJlYW1CeUlkUGFyYW1zID0ge1xuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSByZXNwb25zZSB0byBzdHJlYW0uXG4gICAqL1xuICByZXNwb25zZV9pZDogc3RyaW5nO1xuICAvKipcbiAgICogSWYgcHJvdmlkZWQsIHRoZSBzdHJlYW0gd2lsbCBzdGFydCBhZnRlciB0aGUgZXZlbnQgd2l0aCB0aGUgZ2l2ZW4gc2VxdWVuY2UgbnVtYmVyLlxuICAgKi9cbiAgc3RhcnRpbmdfYWZ0ZXI/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIGEgdGV4dCByZXNwb25zZSBmcm9tIHRoZSBtb2RlbC4gQ2FuIGJlIHBsYWluIHRleHQgb3JcbiAgICogc3RydWN0dXJlZCBKU09OIGRhdGEuIExlYXJuIG1vcmU6XG4gICAqXG4gICAqIC0gW1RleHQgaW5wdXRzIGFuZCBvdXRwdXRzXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvdGV4dClcbiAgICogLSBbU3RydWN0dXJlZCBPdXRwdXRzXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvc3RydWN0dXJlZC1vdXRwdXRzKVxuICAgKi9cbiAgdGV4dD86IFJlc3BvbnNlVGV4dENvbmZpZztcblxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgdG9vbHMgdGhlIG1vZGVsIG1heSBjYWxsIHdoaWxlIGdlbmVyYXRpbmcgYSByZXNwb25zZS4gV2hlbiBjb250aW51aW5nIGEgc3RyZWFtLCBwcm92aWRlXG4gICAqIHRoZSBzYW1lIHRvb2xzIGFzIHRoZSBvcmlnaW5hbCByZXF1ZXN0LlxuICAgKi9cbiAgdG9vbHM/OiBQYXJzZWFibGVUb29sc1BhcmFtcztcbn07XG5cbnR5cGUgUmVzcG9uc2VFdmVudHMgPSBCYXNlRXZlbnRzICZcbiAgT21pdDxcbiAgICB7XG4gICAgICBbSyBpbiBSZXNwb25zZVN0cmVhbUV2ZW50Wyd0eXBlJ11dOiAoZXZlbnQ6IEV4dHJhY3Q8UmVzcG9uc2VTdHJlYW1FdmVudCwgeyB0eXBlOiBLIH0+KSA9PiB2b2lkO1xuICAgIH0sXG4gICAgJ3Jlc3BvbnNlLm91dHB1dF90ZXh0LmRlbHRhJyB8ICdyZXNwb25zZS5mdW5jdGlvbl9jYWxsX2FyZ3VtZW50cy5kZWx0YSdcbiAgPiAmIHtcbiAgICBldmVudDogKGV2ZW50OiBSZXNwb25zZVN0cmVhbUV2ZW50KSA9PiB2b2lkO1xuICAgICdyZXNwb25zZS5vdXRwdXRfdGV4dC5kZWx0YSc6IChldmVudDogUmVzcG9uc2VUZXh0RGVsdGFFdmVudCkgPT4gdm9pZDtcbiAgICAncmVzcG9uc2UuZnVuY3Rpb25fY2FsbF9hcmd1bWVudHMuZGVsdGEnOiAoZXZlbnQ6IFJlc3BvbnNlRnVuY3Rpb25DYWxsQXJndW1lbnRzRGVsdGFFdmVudCkgPT4gdm9pZDtcbiAgfTtcblxuZXhwb3J0IHR5cGUgUmVzcG9uc2VTdHJlYW1pbmdQYXJhbXMgPSBPbWl0PFJlc3BvbnNlQ3JlYXRlUGFyYW1zQmFzZSwgJ3N0cmVhbSc+ICYge1xuICBzdHJlYW0/OiB0cnVlO1xufTtcblxuZXhwb3J0IGNsYXNzIFJlc3BvbnNlU3RyZWFtPFBhcnNlZFQgPSBudWxsPlxuICBleHRlbmRzIEV2ZW50U3RyZWFtPFJlc3BvbnNlRXZlbnRzPlxuICBpbXBsZW1lbnRzIEFzeW5jSXRlcmFibGU8UmVzcG9uc2VTdHJlYW1FdmVudD5cbntcbiAgI3BhcmFtczogUmVzcG9uc2VTdHJlYW1pbmdQYXJhbXMgfCBudWxsO1xuICAjY3VycmVudFJlc3BvbnNlU25hcHNob3Q6IFJlc3BvbnNlIHwgdW5kZWZpbmVkO1xuICAjZmluYWxSZXNwb25zZTogUGFyc2VkUmVzcG9uc2U8UGFyc2VkVD4gfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IocGFyYW1zOiBSZXNwb25zZVN0cmVhbWluZ1BhcmFtcyB8IG51bGwpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuI3BhcmFtcyA9IHBhcmFtcztcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVSZXNwb25zZTxQYXJzZWRUPihcbiAgICBjbGllbnQ6IE9wZW5BSSxcbiAgICBwYXJhbXM6IFJlc3BvbnNlU3RyZWFtUGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBSZXNwb25zZVN0cmVhbTxQYXJzZWRUPiB7XG4gICAgY29uc3QgcnVubmVyID0gbmV3IFJlc3BvbnNlU3RyZWFtPFBhcnNlZFQ+KHBhcmFtcyBhcyBSZXNwb25zZUNyZWF0ZVBhcmFtc1N0cmVhbWluZyk7XG4gICAgcnVubmVyLl9ydW4oKCkgPT5cbiAgICAgIHJ1bm5lci5fY3JlYXRlT3JSZXRyaWV2ZVJlc3BvbnNlKGNsaWVudCwgcGFyYW1zLCB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGhlYWRlcnM6IHsgLi4ub3B0aW9ucz8uaGVhZGVycywgJ1gtU3RhaW5sZXNzLUhlbHBlci1NZXRob2QnOiAnc3RyZWFtJyB9LFxuICAgICAgfSksXG4gICAgKTtcbiAgICByZXR1cm4gcnVubmVyO1xuICB9XG5cbiAgI2JlZ2luUmVxdWVzdCgpIHtcbiAgICBpZiAodGhpcy5lbmRlZCkgcmV0dXJuO1xuICAgIHRoaXMuI2N1cnJlbnRSZXNwb25zZVNuYXBzaG90ID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgI2FkZEV2ZW50KHRoaXM6IFJlc3BvbnNlU3RyZWFtPFBhcnNlZFQ+LCBldmVudDogUmVzcG9uc2VTdHJlYW1FdmVudCwgc3RhcnRpbmdfYWZ0ZXI6IG51bWJlciB8IG51bGwpIHtcbiAgICBpZiAodGhpcy5lbmRlZCkgcmV0dXJuO1xuXG4gICAgY29uc3QgbWF5YmVFbWl0ID0gKG5hbWU6IHN0cmluZywgZXZlbnQ6IFJlc3BvbnNlU3RyZWFtRXZlbnQgJiB7IHNuYXBzaG90Pzogc3RyaW5nIH0pID0+IHtcbiAgICAgIGlmIChzdGFydGluZ19hZnRlciA9PSBudWxsIHx8IGV2ZW50LnNlcXVlbmNlX251bWJlciA+IHN0YXJ0aW5nX2FmdGVyKSB7XG4gICAgICAgIHRoaXMuX2VtaXQobmFtZSBhcyBhbnksIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSB0aGlzLiNhY2N1bXVsYXRlUmVzcG9uc2UoZXZlbnQpO1xuICAgIG1heWJlRW1pdCgnZXZlbnQnLCBldmVudCk7XG5cbiAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgIGNhc2UgJ3Jlc3BvbnNlLm91dHB1dF90ZXh0LmRlbHRhJzoge1xuICAgICAgICBjb25zdCBvdXRwdXQgPSByZXNwb25zZS5vdXRwdXRbZXZlbnQub3V0cHV0X2luZGV4XTtcbiAgICAgICAgaWYgKCFvdXRwdXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYG1pc3Npbmcgb3V0cHV0IGF0IGluZGV4ICR7ZXZlbnQub3V0cHV0X2luZGV4fWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdXRwdXQudHlwZSA9PT0gJ21lc3NhZ2UnKSB7XG4gICAgICAgICAgY29uc3QgY29udGVudCA9IG91dHB1dC5jb250ZW50W2V2ZW50LmNvbnRlbnRfaW5kZXhdO1xuICAgICAgICAgIGlmICghY29udGVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBtaXNzaW5nIGNvbnRlbnQgYXQgaW5kZXggJHtldmVudC5jb250ZW50X2luZGV4fWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY29udGVudC50eXBlICE9PSAnb3V0cHV0X3RleHQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYGV4cGVjdGVkIGNvbnRlbnQgdG8gYmUgJ291dHB1dF90ZXh0JywgZ290ICR7Y29udGVudC50eXBlfWApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1heWJlRW1pdCgncmVzcG9uc2Uub3V0cHV0X3RleHQuZGVsdGEnLCB7XG4gICAgICAgICAgICAuLi5ldmVudCxcbiAgICAgICAgICAgIHNuYXBzaG90OiBjb250ZW50LnRleHQsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdyZXNwb25zZS5mdW5jdGlvbl9jYWxsX2FyZ3VtZW50cy5kZWx0YSc6IHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gcmVzcG9uc2Uub3V0cHV0W2V2ZW50Lm91dHB1dF9pbmRleF07XG4gICAgICAgIGlmICghb3V0cHV0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IE9wZW5BSUVycm9yKGBtaXNzaW5nIG91dHB1dCBhdCBpbmRleCAke2V2ZW50Lm91dHB1dF9pbmRleH1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3V0cHV0LnR5cGUgPT09ICdmdW5jdGlvbl9jYWxsJykge1xuICAgICAgICAgIG1heWJlRW1pdCgncmVzcG9uc2UuZnVuY3Rpb25fY2FsbF9hcmd1bWVudHMuZGVsdGEnLCB7XG4gICAgICAgICAgICAuLi5ldmVudCxcbiAgICAgICAgICAgIHNuYXBzaG90OiBvdXRwdXQuYXJndW1lbnRzLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbWF5YmVFbWl0KGV2ZW50LnR5cGUsIGV2ZW50KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgI2VuZFJlcXVlc3QoKTogUGFyc2VkUmVzcG9uc2U8UGFyc2VkVD4ge1xuICAgIGlmICh0aGlzLmVuZGVkKSB7XG4gICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYHN0cmVhbSBoYXMgZW5kZWQsIHRoaXMgc2hvdWxkbid0IGhhcHBlbmApO1xuICAgIH1cbiAgICBjb25zdCBzbmFwc2hvdCA9IHRoaXMuI2N1cnJlbnRSZXNwb25zZVNuYXBzaG90O1xuICAgIGlmICghc25hcHNob3QpIHtcbiAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihgcmVxdWVzdCBlbmRlZCB3aXRob3V0IHNlbmRpbmcgYW55IGV2ZW50c2ApO1xuICAgIH1cbiAgICB0aGlzLiNjdXJyZW50UmVzcG9uc2VTbmFwc2hvdCA9IHVuZGVmaW5lZDtcbiAgICBjb25zdCBwYXJzZWRSZXNwb25zZSA9IGZpbmFsaXplUmVzcG9uc2U8UGFyc2VkVD4oc25hcHNob3QsIHRoaXMuI3BhcmFtcyk7XG4gICAgdGhpcy4jZmluYWxSZXNwb25zZSA9IHBhcnNlZFJlc3BvbnNlO1xuXG4gICAgcmV0dXJuIHBhcnNlZFJlc3BvbnNlO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFzeW5jIF9jcmVhdGVPclJldHJpZXZlUmVzcG9uc2UoXG4gICAgY2xpZW50OiBPcGVuQUksXG4gICAgcGFyYW1zOiBSZXNwb25zZVN0cmVhbVBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogUHJvbWlzZTxQYXJzZWRSZXNwb25zZTxQYXJzZWRUPj4ge1xuICAgIGNvbnN0IHNpZ25hbCA9IG9wdGlvbnM/LnNpZ25hbDtcbiAgICBpZiAoc2lnbmFsKSB7XG4gICAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHRoaXMuY29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgKCkgPT4gdGhpcy5jb250cm9sbGVyLmFib3J0KCkpO1xuICAgIH1cbiAgICB0aGlzLiNiZWdpblJlcXVlc3QoKTtcblxuICAgIGxldCBzdHJlYW06IFN0cmVhbTxSZXNwb25zZVN0cmVhbUV2ZW50PiB8IHVuZGVmaW5lZDtcbiAgICBsZXQgc3RhcnRpbmdfYWZ0ZXI6IG51bWJlciB8IG51bGwgPSBudWxsO1xuICAgIGlmICgncmVzcG9uc2VfaWQnIGluIHBhcmFtcykge1xuICAgICAgc3RyZWFtID0gYXdhaXQgY2xpZW50LnJlc3BvbnNlcy5yZXRyaWV2ZShcbiAgICAgICAgcGFyYW1zLnJlc3BvbnNlX2lkLFxuICAgICAgICB7IHN0cmVhbTogdHJ1ZSB9LFxuICAgICAgICB7IC4uLm9wdGlvbnMsIHNpZ25hbDogdGhpcy5jb250cm9sbGVyLnNpZ25hbCwgc3RyZWFtOiB0cnVlIH0sXG4gICAgICApO1xuICAgICAgc3RhcnRpbmdfYWZ0ZXIgPSBwYXJhbXMuc3RhcnRpbmdfYWZ0ZXIgPz8gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyZWFtID0gYXdhaXQgY2xpZW50LnJlc3BvbnNlcy5jcmVhdGUoXG4gICAgICAgIHsgLi4ucGFyYW1zLCBzdHJlYW06IHRydWUgfSxcbiAgICAgICAgeyAuLi5vcHRpb25zLCBzaWduYWw6IHRoaXMuY29udHJvbGxlci5zaWduYWwgfSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5fY29ubmVjdGVkKCk7XG4gICAgZm9yIGF3YWl0IChjb25zdCBldmVudCBvZiBzdHJlYW0pIHtcbiAgICAgIHRoaXMuI2FkZEV2ZW50KGV2ZW50LCBzdGFydGluZ19hZnRlcik7XG4gICAgfVxuICAgIGlmIChzdHJlYW0uY29udHJvbGxlci5zaWduYWw/LmFib3J0ZWQpIHtcbiAgICAgIHRocm93IG5ldyBBUElVc2VyQWJvcnRFcnJvcigpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy4jZW5kUmVxdWVzdCgpO1xuICB9XG5cbiAgI2FjY3VtdWxhdGVSZXNwb25zZShldmVudDogUmVzcG9uc2VTdHJlYW1FdmVudCk6IFJlc3BvbnNlIHtcbiAgICBsZXQgc25hcHNob3QgPSB0aGlzLiNjdXJyZW50UmVzcG9uc2VTbmFwc2hvdDtcbiAgICBpZiAoIXNuYXBzaG90KSB7XG4gICAgICBpZiAoZXZlbnQudHlwZSAhPT0gJ3Jlc3BvbnNlLmNyZWF0ZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihcbiAgICAgICAgICBgV2hlbiBzbmFwc2hvdCBoYXNuJ3QgYmVlbiBzZXQgeWV0LCBleHBlY3RlZCAncmVzcG9uc2UuY3JlYXRlZCcgZXZlbnQsIGdvdCAke2V2ZW50LnR5cGV9YCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHNuYXBzaG90ID0gdGhpcy4jY3VycmVudFJlc3BvbnNlU25hcHNob3QgPSBldmVudC5yZXNwb25zZTtcbiAgICAgIHJldHVybiBzbmFwc2hvdDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHtcbiAgICAgIGNhc2UgJ3Jlc3BvbnNlLm91dHB1dF9pdGVtLmFkZGVkJzoge1xuICAgICAgICBzbmFwc2hvdC5vdXRwdXQucHVzaChldmVudC5pdGVtKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdyZXNwb25zZS5jb250ZW50X3BhcnQuYWRkZWQnOiB7XG4gICAgICAgIGNvbnN0IG91dHB1dCA9IHNuYXBzaG90Lm91dHB1dFtldmVudC5vdXRwdXRfaW5kZXhdO1xuICAgICAgICBpZiAoIW91dHB1dCkge1xuICAgICAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihgbWlzc2luZyBvdXRwdXQgYXQgaW5kZXggJHtldmVudC5vdXRwdXRfaW5kZXh9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG91dHB1dC50eXBlID09PSAnbWVzc2FnZScpIHtcbiAgICAgICAgICBvdXRwdXQuY29udGVudC5wdXNoKGV2ZW50LnBhcnQpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAncmVzcG9uc2Uub3V0cHV0X3RleHQuZGVsdGEnOiB7XG4gICAgICAgIGNvbnN0IG91dHB1dCA9IHNuYXBzaG90Lm91dHB1dFtldmVudC5vdXRwdXRfaW5kZXhdO1xuICAgICAgICBpZiAoIW91dHB1dCkge1xuICAgICAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihgbWlzc2luZyBvdXRwdXQgYXQgaW5kZXggJHtldmVudC5vdXRwdXRfaW5kZXh9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG91dHB1dC50eXBlID09PSAnbWVzc2FnZScpIHtcbiAgICAgICAgICBjb25zdCBjb250ZW50ID0gb3V0cHV0LmNvbnRlbnRbZXZlbnQuY29udGVudF9pbmRleF07XG4gICAgICAgICAgaWYgKCFjb250ZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYG1pc3NpbmcgY29udGVudCBhdCBpbmRleCAke2V2ZW50LmNvbnRlbnRfaW5kZXh9YCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb250ZW50LnR5cGUgIT09ICdvdXRwdXRfdGV4dCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPcGVuQUlFcnJvcihgZXhwZWN0ZWQgY29udGVudCB0byBiZSAnb3V0cHV0X3RleHQnLCBnb3QgJHtjb250ZW50LnR5cGV9YCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRlbnQudGV4dCArPSBldmVudC5kZWx0YTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ3Jlc3BvbnNlLmZ1bmN0aW9uX2NhbGxfYXJndW1lbnRzLmRlbHRhJzoge1xuICAgICAgICBjb25zdCBvdXRwdXQgPSBzbmFwc2hvdC5vdXRwdXRbZXZlbnQub3V0cHV0X2luZGV4XTtcbiAgICAgICAgaWYgKCFvdXRwdXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgT3BlbkFJRXJyb3IoYG1pc3Npbmcgb3V0cHV0IGF0IGluZGV4ICR7ZXZlbnQub3V0cHV0X2luZGV4fWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdXRwdXQudHlwZSA9PT0gJ2Z1bmN0aW9uX2NhbGwnKSB7XG4gICAgICAgICAgb3V0cHV0LmFyZ3VtZW50cyArPSBldmVudC5kZWx0YTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ3Jlc3BvbnNlLmNvbXBsZXRlZCc6IHtcbiAgICAgICAgdGhpcy4jY3VycmVudFJlc3BvbnNlU25hcHNob3QgPSBldmVudC5yZXNwb25zZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNuYXBzaG90O1xuICB9XG5cbiAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSh0aGlzOiBSZXNwb25zZVN0cmVhbTxQYXJzZWRUPik6IEFzeW5jSXRlcmF0b3I8UmVzcG9uc2VTdHJlYW1FdmVudD4ge1xuICAgIGNvbnN0IHB1c2hRdWV1ZTogUmVzcG9uc2VTdHJlYW1FdmVudFtdID0gW107XG4gICAgY29uc3QgcmVhZFF1ZXVlOiB7XG4gICAgICByZXNvbHZlOiAoZXZlbnQ6IFJlc3BvbnNlU3RyZWFtRXZlbnQgfCB1bmRlZmluZWQpID0+IHZvaWQ7XG4gICAgICByZWplY3Q6IChlcnI6IHVua25vd24pID0+IHZvaWQ7XG4gICAgfVtdID0gW107XG4gICAgbGV0IGRvbmUgPSBmYWxzZTtcblxuICAgIHRoaXMub24oJ2V2ZW50JywgKGV2ZW50KSA9PiB7XG4gICAgICBjb25zdCByZWFkZXIgPSByZWFkUXVldWUuc2hpZnQoKTtcbiAgICAgIGlmIChyZWFkZXIpIHtcbiAgICAgICAgcmVhZGVyLnJlc29sdmUoZXZlbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHVzaFF1ZXVlLnB1c2goZXZlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5vbignZW5kJywgKCkgPT4ge1xuICAgICAgZG9uZSA9IHRydWU7XG4gICAgICBmb3IgKGNvbnN0IHJlYWRlciBvZiByZWFkUXVldWUpIHtcbiAgICAgICAgcmVhZGVyLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAgIH1cbiAgICAgIHJlYWRRdWV1ZS5sZW5ndGggPSAwO1xuICAgIH0pO1xuXG4gICAgdGhpcy5vbignYWJvcnQnLCAoZXJyKSA9PiB7XG4gICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIGZvciAoY29uc3QgcmVhZGVyIG9mIHJlYWRRdWV1ZSkge1xuICAgICAgICByZWFkZXIucmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgICByZWFkUXVldWUubGVuZ3RoID0gMDtcbiAgICB9KTtcblxuICAgIHRoaXMub24oJ2Vycm9yJywgKGVycikgPT4ge1xuICAgICAgZG9uZSA9IHRydWU7XG4gICAgICBmb3IgKGNvbnN0IHJlYWRlciBvZiByZWFkUXVldWUpIHtcbiAgICAgICAgcmVhZGVyLnJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgcmVhZFF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgbmV4dDogYXN5bmMgKCk6IFByb21pc2U8SXRlcmF0b3JSZXN1bHQ8UmVzcG9uc2VTdHJlYW1FdmVudD4+ID0+IHtcbiAgICAgICAgaWYgKCFwdXNoUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPFJlc3BvbnNlU3RyZWFtRXZlbnQgfCB1bmRlZmluZWQ+KChyZXNvbHZlLCByZWplY3QpID0+XG4gICAgICAgICAgICByZWFkUXVldWUucHVzaCh7IHJlc29sdmUsIHJlamVjdCB9KSxcbiAgICAgICAgICApLnRoZW4oKGV2ZW50KSA9PiAoZXZlbnQgPyB7IHZhbHVlOiBldmVudCwgZG9uZTogZmFsc2UgfSA6IHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXZlbnQgPSBwdXNoUXVldWUuc2hpZnQoKSE7XG4gICAgICAgIHJldHVybiB7IHZhbHVlOiBldmVudCwgZG9uZTogZmFsc2UgfTtcbiAgICAgIH0sXG4gICAgICByZXR1cm46IGFzeW5jICgpID0+IHtcbiAgICAgICAgdGhpcy5hYm9ydCgpO1xuICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgZmluYWwgUmVzcG9uc2UsIG9yIHJlamVjdHNcbiAgICogaWYgYW4gZXJyb3Igb2NjdXJyZWQgb3IgdGhlIHN0cmVhbSBlbmRlZCBwcmVtYXR1cmVseSB3aXRob3V0IHByb2R1Y2luZyBhIFJFc3BvbnNlLlxuICAgKi9cbiAgYXN5bmMgZmluYWxSZXNwb25zZSgpOiBQcm9taXNlPFBhcnNlZFJlc3BvbnNlPFBhcnNlZFQ+PiB7XG4gICAgYXdhaXQgdGhpcy5kb25lKCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSB0aGlzLiNmaW5hbFJlc3BvbnNlO1xuICAgIGlmICghcmVzcG9uc2UpIHRocm93IG5ldyBPcGVuQUlFcnJvcignc3RyZWFtIGVuZGVkIHdpdGhvdXQgcHJvZHVjaW5nIGEgQ2hhdENvbXBsZXRpb24nKTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluYWxpemVSZXNwb25zZTxQYXJzZWRUPihcbiAgc25hcHNob3Q6IFJlc3BvbnNlLFxuICBwYXJhbXM6IFJlc3BvbnNlU3RyZWFtaW5nUGFyYW1zIHwgbnVsbCxcbik6IFBhcnNlZFJlc3BvbnNlPFBhcnNlZFQ+IHtcbiAgcmV0dXJuIG1heWJlUGFyc2VSZXNwb25zZShzbmFwc2hvdCwgcGFyYW1zKTtcbn1cbiIsICIvLyBGaWxlIGdlbmVyYXRlZCBmcm9tIG91ciBPcGVuQVBJIHNwZWMgYnkgU3RhaW5sZXNzLiBTZWUgQ09OVFJJQlVUSU5HLm1kIGZvciBkZXRhaWxzLlxuXG5pbXBvcnQge1xuICB0eXBlIEV4dHJhY3RQYXJzZWRDb250ZW50RnJvbVBhcmFtcyxcbiAgcGFyc2VSZXNwb25zZSxcbiAgdHlwZSBSZXNwb25zZUNyZWF0ZVBhcmFtc1dpdGhUb29scyxcbiAgYWRkT3V0cHV0VGV4dCxcbn0gZnJvbSAnLi4vLi4vbGliL1Jlc3BvbnNlc1BhcnNlcic7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgQVBJUHJvbWlzZSB9IGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICcuLi8uLi9yZXNvdXJjZSc7XG5pbXBvcnQgKiBhcyBTaGFyZWQgZnJvbSAnLi4vc2hhcmVkJztcbmltcG9ydCAqIGFzIElucHV0SXRlbXNBUEkgZnJvbSAnLi9pbnB1dC1pdGVtcyc7XG5pbXBvcnQgeyBJbnB1dEl0ZW1MaXN0UGFyYW1zLCBJbnB1dEl0ZW1zLCBSZXNwb25zZUl0ZW1MaXN0IH0gZnJvbSAnLi9pbnB1dC1pdGVtcyc7XG5pbXBvcnQgKiBhcyBSZXNwb25zZXNBUEkgZnJvbSAnLi9yZXNwb25zZXMnO1xuaW1wb3J0IHsgUmVzcG9uc2VTdHJlYW0sIFJlc3BvbnNlU3RyZWFtUGFyYW1zIH0gZnJvbSAnLi4vLi4vbGliL3Jlc3BvbnNlcy9SZXNwb25zZVN0cmVhbSc7XG5pbXBvcnQgeyBDdXJzb3JQYWdlIH0gZnJvbSAnLi4vLi4vcGFnaW5hdGlvbic7XG5pbXBvcnQgeyBTdHJlYW0gfSBmcm9tICcuLi8uLi9zdHJlYW1pbmcnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBhcnNlZFJlc3BvbnNlT3V0cHV0VGV4dDxQYXJzZWRUPiBleHRlbmRzIFJlc3BvbnNlT3V0cHV0VGV4dCB7XG4gIHBhcnNlZDogUGFyc2VkVCB8IG51bGw7XG59XG5cbmV4cG9ydCB0eXBlIFBhcnNlZENvbnRlbnQ8UGFyc2VkVD4gPSBQYXJzZWRSZXNwb25zZU91dHB1dFRleHQ8UGFyc2VkVD4gfCBSZXNwb25zZU91dHB1dFJlZnVzYWw7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFyc2VkUmVzcG9uc2VPdXRwdXRNZXNzYWdlPFBhcnNlZFQ+IGV4dGVuZHMgUmVzcG9uc2VPdXRwdXRNZXNzYWdlIHtcbiAgY29udGVudDogUGFyc2VkQ29udGVudDxQYXJzZWRUPltdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhcnNlZFJlc3BvbnNlRnVuY3Rpb25Ub29sQ2FsbCBleHRlbmRzIFJlc3BvbnNlRnVuY3Rpb25Ub29sQ2FsbCB7XG4gIHBhcnNlZF9hcmd1bWVudHM6IGFueTtcbn1cblxuZXhwb3J0IHR5cGUgUGFyc2VkUmVzcG9uc2VPdXRwdXRJdGVtPFBhcnNlZFQ+ID1cbiAgfCBQYXJzZWRSZXNwb25zZU91dHB1dE1lc3NhZ2U8UGFyc2VkVD5cbiAgfCBQYXJzZWRSZXNwb25zZUZ1bmN0aW9uVG9vbENhbGxcbiAgfCBSZXNwb25zZUZpbGVTZWFyY2hUb29sQ2FsbFxuICB8IFJlc3BvbnNlRnVuY3Rpb25XZWJTZWFyY2hcbiAgfCBSZXNwb25zZUNvbXB1dGVyVG9vbENhbGxcbiAgfCBSZXNwb25zZVJlYXNvbmluZ0l0ZW1cbiAgfCBSZXNwb25zZU91dHB1dEl0ZW0uSW1hZ2VHZW5lcmF0aW9uQ2FsbFxuICB8IFJlc3BvbnNlQ29kZUludGVycHJldGVyVG9vbENhbGxcbiAgfCBSZXNwb25zZU91dHB1dEl0ZW0uTG9jYWxTaGVsbENhbGxcbiAgfCBSZXNwb25zZU91dHB1dEl0ZW0uTWNwQ2FsbFxuICB8IFJlc3BvbnNlT3V0cHV0SXRlbS5NY3BMaXN0VG9vbHNcbiAgfCBSZXNwb25zZU91dHB1dEl0ZW0uTWNwQXBwcm92YWxSZXF1ZXN0O1xuXG5leHBvcnQgaW50ZXJmYWNlIFBhcnNlZFJlc3BvbnNlPFBhcnNlZFQ+IGV4dGVuZHMgUmVzcG9uc2Uge1xuICBvdXRwdXQ6IEFycmF5PFBhcnNlZFJlc3BvbnNlT3V0cHV0SXRlbTxQYXJzZWRUPj47XG5cbiAgb3V0cHV0X3BhcnNlZDogUGFyc2VkVCB8IG51bGw7XG59XG5cbmV4cG9ydCB0eXBlIFJlc3BvbnNlUGFyc2VQYXJhbXMgPSBSZXNwb25zZUNyZWF0ZVBhcmFtc05vblN0cmVhbWluZztcbmV4cG9ydCBjbGFzcyBSZXNwb25zZXMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIGlucHV0SXRlbXM6IElucHV0SXRlbXNBUEkuSW5wdXRJdGVtcyA9IG5ldyBJbnB1dEl0ZW1zQVBJLklucHV0SXRlbXModGhpcy5fY2xpZW50KTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG1vZGVsIHJlc3BvbnNlLiBQcm92aWRlXG4gICAqIFt0ZXh0XShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvdGV4dCkgb3JcbiAgICogW2ltYWdlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvaW1hZ2VzKSBpbnB1dHMgdG8gZ2VuZXJhdGVcbiAgICogW3RleHRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy90ZXh0KSBvclxuICAgKiBbSlNPTl0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3N0cnVjdHVyZWQtb3V0cHV0cykgb3V0cHV0cy4gSGF2ZVxuICAgKiB0aGUgbW9kZWwgY2FsbCB5b3VyIG93blxuICAgKiBbY3VzdG9tIGNvZGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9mdW5jdGlvbi1jYWxsaW5nKSBvciB1c2VcbiAgICogYnVpbHQtaW4gW3Rvb2xzXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvdG9vbHMpIGxpa2VcbiAgICogW3dlYiBzZWFyY2hdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy90b29scy13ZWItc2VhcmNoKSBvclxuICAgKiBbZmlsZSBzZWFyY2hdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy90b29scy1maWxlLXNlYXJjaCkgdG8gdXNlXG4gICAqIHlvdXIgb3duIGRhdGEgYXMgaW5wdXQgZm9yIHRoZSBtb2RlbCdzIHJlc3BvbnNlLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGB0c1xuICAgKiBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5yZXNwb25zZXMuY3JlYXRlKHtcbiAgICogICBpbnB1dDogJ3N0cmluZycsXG4gICAqICAgbW9kZWw6ICdncHQtNG8nLFxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICBjcmVhdGUoYm9keTogUmVzcG9uc2VDcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQVBJUHJvbWlzZTxSZXNwb25zZT47XG4gIGNyZWF0ZShcbiAgICBib2R5OiBSZXNwb25zZUNyZWF0ZVBhcmFtc1N0cmVhbWluZyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQVBJUHJvbWlzZTxTdHJlYW08UmVzcG9uc2VTdHJlYW1FdmVudD4+O1xuICBjcmVhdGUoXG4gICAgYm9keTogUmVzcG9uc2VDcmVhdGVQYXJhbXNCYXNlLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBBUElQcm9taXNlPFN0cmVhbTxSZXNwb25zZVN0cmVhbUV2ZW50PiB8IFJlc3BvbnNlPjtcbiAgY3JlYXRlKFxuICAgIGJvZHk6IFJlc3BvbnNlQ3JlYXRlUGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBBUElQcm9taXNlPFJlc3BvbnNlPiB8IEFQSVByb21pc2U8U3RyZWFtPFJlc3BvbnNlU3RyZWFtRXZlbnQ+PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuX2NsaWVudC5wb3N0KCcvcmVzcG9uc2VzJywgeyBib2R5LCAuLi5vcHRpb25zLCBzdHJlYW06IGJvZHkuc3RyZWFtID8/IGZhbHNlIH0pIGFzXG4gICAgICAgIHwgQVBJUHJvbWlzZTxSZXNwb25zZT5cbiAgICAgICAgfCBBUElQcm9taXNlPFN0cmVhbTxSZXNwb25zZVN0cmVhbUV2ZW50Pj5cbiAgICApLl90aGVuVW53cmFwKChyc3ApID0+IHtcbiAgICAgIGlmICgnb2JqZWN0JyBpbiByc3AgJiYgcnNwLm9iamVjdCA9PT0gJ3Jlc3BvbnNlJykge1xuICAgICAgICBhZGRPdXRwdXRUZXh0KHJzcCBhcyBSZXNwb25zZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByc3A7XG4gICAgfSkgYXMgQVBJUHJvbWlzZTxSZXNwb25zZT4gfCBBUElQcm9taXNlPFN0cmVhbTxSZXNwb25zZVN0cmVhbUV2ZW50Pj47XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIGEgbW9kZWwgcmVzcG9uc2Ugd2l0aCB0aGUgZ2l2ZW4gSUQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHRzXG4gICAqIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LnJlc3BvbnNlcy5yZXRyaWV2ZShcbiAgICogICAncmVzcF82NzdlZmI1MTM5YTg4MTkwYjUxMmJjM2ZlZjhlNTM1ZCcsXG4gICAqICk7XG4gICAqIGBgYFxuICAgKi9cblxuICByZXRyaWV2ZShcbiAgICByZXNwb25zZUlkOiBzdHJpbmcsXG4gICAgcXVlcnk/OiBSZXNwb25zZVJldHJpZXZlUGFyYW1zTm9uU3RyZWFtaW5nLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBBUElQcm9taXNlPFJlc3BvbnNlPjtcbiAgcmV0cmlldmUoXG4gICAgcmVzcG9uc2VJZDogc3RyaW5nLFxuICAgIHF1ZXJ5OiBSZXNwb25zZVJldHJpZXZlUGFyYW1zU3RyZWFtaW5nLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBBUElQcm9taXNlPFN0cmVhbTxSZXNwb25zZVN0cmVhbUV2ZW50Pj47XG4gIHJldHJpZXZlKFxuICAgIHJlc3BvbnNlSWQ6IHN0cmluZyxcbiAgICBxdWVyeT86IFJlc3BvbnNlUmV0cmlldmVQYXJhbXNCYXNlIHwgdW5kZWZpbmVkLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBBUElQcm9taXNlPFN0cmVhbTxSZXNwb25zZVN0cmVhbUV2ZW50PiB8IFJlc3BvbnNlPjtcbiAgcmV0cmlldmUoXG4gICAgcmVzcG9uc2VJZDogc3RyaW5nLFxuICAgIHF1ZXJ5OiBSZXNwb25zZVJldHJpZXZlUGFyYW1zIHwgdW5kZWZpbmVkID0ge30sXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IEFQSVByb21pc2U8UmVzcG9uc2U+IHwgQVBJUHJvbWlzZTxTdHJlYW08UmVzcG9uc2VTdHJlYW1FdmVudD4+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL3Jlc3BvbnNlcy8ke3Jlc3BvbnNlSWR9YCwge1xuICAgICAgcXVlcnksXG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgc3RyZWFtOiBxdWVyeT8uc3RyZWFtID8/IGZhbHNlLFxuICAgIH0pIGFzIEFQSVByb21pc2U8UmVzcG9uc2U+IHwgQVBJUHJvbWlzZTxTdHJlYW08UmVzcG9uc2VTdHJlYW1FdmVudD4+O1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYSBtb2RlbCByZXNwb25zZSB3aXRoIHRoZSBnaXZlbiBJRC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHNcbiAgICogYXdhaXQgY2xpZW50LnJlc3BvbnNlcy5kZWwoXG4gICAqICAgJ3Jlc3BfNjc3ZWZiNTEzOWE4ODE5MGI1MTJiYzNmZWY4ZTUzNWQnLFxuICAgKiApO1xuICAgKiBgYGBcbiAgICovXG4gIGRlbChyZXNwb25zZUlkOiBzdHJpbmcsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5BUElQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmRlbGV0ZShgL3Jlc3BvbnNlcy8ke3Jlc3BvbnNlSWR9YCwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgQWNjZXB0OiAnKi8qJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgIH0pO1xuICB9XG5cbiAgcGFyc2U8UGFyYW1zIGV4dGVuZHMgUmVzcG9uc2VDcmVhdGVQYXJhbXNXaXRoVG9vbHMsIFBhcnNlZFQgPSBFeHRyYWN0UGFyc2VkQ29udGVudEZyb21QYXJhbXM8UGFyYW1zPj4oXG4gICAgYm9keTogUGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLkFQSVByb21pc2U8UGFyc2VkUmVzcG9uc2U8UGFyc2VkVD4+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LnJlc3BvbnNlc1xuICAgICAgLmNyZWF0ZShib2R5LCBvcHRpb25zKVxuICAgICAgLl90aGVuVW53cmFwKChyZXNwb25zZSkgPT4gcGFyc2VSZXNwb25zZShyZXNwb25zZSBhcyBSZXNwb25zZSwgYm9keSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBtb2RlbCByZXNwb25zZSBzdHJlYW1cbiAgICovXG5cbiAgc3RyZWFtPFBhcmFtcyBleHRlbmRzIFJlc3BvbnNlU3RyZWFtUGFyYW1zLCBQYXJzZWRUID0gRXh0cmFjdFBhcnNlZENvbnRlbnRGcm9tUGFyYW1zPFBhcmFtcz4+KFxuICAgIGJvZHk6IFBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogUmVzcG9uc2VTdHJlYW08UGFyc2VkVD4ge1xuICAgIHJldHVybiBSZXNwb25zZVN0cmVhbS5jcmVhdGVSZXNwb25zZTxQYXJzZWRUPih0aGlzLl9jbGllbnQsIGJvZHksIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbmNlbHMgYSBtb2RlbCByZXNwb25zZSB3aXRoIHRoZSBnaXZlbiBJRC4gT25seSByZXNwb25zZXMgY3JlYXRlZCB3aXRoIHRoZVxuICAgKiBgYmFja2dyb3VuZGAgcGFyYW1ldGVyIHNldCB0byBgdHJ1ZWAgY2FuIGJlIGNhbmNlbGxlZC5cbiAgICogW0xlYXJuIG1vcmVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9iYWNrZ3JvdW5kKS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBgdHNcbiAgICogYXdhaXQgY2xpZW50LnJlc3BvbnNlcy5jYW5jZWwoXG4gICAqICAgJ3Jlc3BfNjc3ZWZiNTEzOWE4ODE5MGI1MTJiYzNmZWY4ZTUzNWQnLFxuICAgKiApO1xuICAgKiBgYGBcbiAgICovXG5cbiAgY2FuY2VsKHJlc3BvbnNlSWQ6IHN0cmluZywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkFQSVByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3Jlc3BvbnNlcy8ke3Jlc3BvbnNlSWR9L2NhbmNlbGAsIHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBoZWFkZXJzOiB7IEFjY2VwdDogJyovKicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVzcG9uc2VJdGVtc1BhZ2UgZXh0ZW5kcyBDdXJzb3JQYWdlPFJlc3BvbnNlSXRlbT4ge31cblxuLyoqXG4gKiBBIHRvb2wgdGhhdCBjb250cm9scyBhIHZpcnR1YWwgY29tcHV0ZXIuIExlYXJuIG1vcmUgYWJvdXQgdGhlXG4gKiBbY29tcHV0ZXIgdG9vbF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3Rvb2xzLWNvbXB1dGVyLXVzZSkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcHV0ZXJUb29sIHtcbiAgLyoqXG4gICAqIFRoZSBoZWlnaHQgb2YgdGhlIGNvbXB1dGVyIGRpc3BsYXkuXG4gICAqL1xuICBkaXNwbGF5X2hlaWdodDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIGNvbXB1dGVyIGRpc3BsYXkuXG4gICAqL1xuICBkaXNwbGF5X3dpZHRoOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIGNvbXB1dGVyIGVudmlyb25tZW50IHRvIGNvbnRyb2wuXG4gICAqL1xuICBlbnZpcm9ubWVudDogJ3dpbmRvd3MnIHwgJ21hYycgfCAnbGludXgnIHwgJ3VidW50dScgfCAnYnJvd3Nlcic7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBjb21wdXRlciB1c2UgdG9vbC4gQWx3YXlzIGBjb21wdXRlcl91c2VfcHJldmlld2AuXG4gICAqL1xuICB0eXBlOiAnY29tcHV0ZXItcHJldmlldyc7XG59XG5cbi8qKlxuICogQSBtZXNzYWdlIGlucHV0IHRvIHRoZSBtb2RlbCB3aXRoIGEgcm9sZSBpbmRpY2F0aW5nIGluc3RydWN0aW9uIGZvbGxvd2luZ1xuICogaGllcmFyY2h5LiBJbnN0cnVjdGlvbnMgZ2l2ZW4gd2l0aCB0aGUgYGRldmVsb3BlcmAgb3IgYHN5c3RlbWAgcm9sZSB0YWtlXG4gKiBwcmVjZWRlbmNlIG92ZXIgaW5zdHJ1Y3Rpb25zIGdpdmVuIHdpdGggdGhlIGB1c2VyYCByb2xlLiBNZXNzYWdlcyB3aXRoIHRoZVxuICogYGFzc2lzdGFudGAgcm9sZSBhcmUgcHJlc3VtZWQgdG8gaGF2ZSBiZWVuIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwgaW4gcHJldmlvdXNcbiAqIGludGVyYWN0aW9ucy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFYXN5SW5wdXRNZXNzYWdlIHtcbiAgLyoqXG4gICAqIFRleHQsIGltYWdlLCBvciBhdWRpbyBpbnB1dCB0byB0aGUgbW9kZWwsIHVzZWQgdG8gZ2VuZXJhdGUgYSByZXNwb25zZS4gQ2FuIGFsc29cbiAgICogY29udGFpbiBwcmV2aW91cyBhc3Npc3RhbnQgcmVzcG9uc2VzLlxuICAgKi9cbiAgY29udGVudDogc3RyaW5nIHwgUmVzcG9uc2VJbnB1dE1lc3NhZ2VDb250ZW50TGlzdDtcblxuICAvKipcbiAgICogVGhlIHJvbGUgb2YgdGhlIG1lc3NhZ2UgaW5wdXQuIE9uZSBvZiBgdXNlcmAsIGBhc3Npc3RhbnRgLCBgc3lzdGVtYCwgb3JcbiAgICogYGRldmVsb3BlcmAuXG4gICAqL1xuICByb2xlOiAndXNlcicgfCAnYXNzaXN0YW50JyB8ICdzeXN0ZW0nIHwgJ2RldmVsb3Blcic7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBtZXNzYWdlIGlucHV0LiBBbHdheXMgYG1lc3NhZ2VgLlxuICAgKi9cbiAgdHlwZT86ICdtZXNzYWdlJztcbn1cblxuLyoqXG4gKiBBIHRvb2wgdGhhdCBzZWFyY2hlcyBmb3IgcmVsZXZhbnQgY29udGVudCBmcm9tIHVwbG9hZGVkIGZpbGVzLiBMZWFybiBtb3JlIGFib3V0XG4gKiB0aGVcbiAqIFtmaWxlIHNlYXJjaCB0b29sXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvdG9vbHMtZmlsZS1zZWFyY2gpLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVTZWFyY2hUb29sIHtcbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBmaWxlIHNlYXJjaCB0b29sLiBBbHdheXMgYGZpbGVfc2VhcmNoYC5cbiAgICovXG4gIHR5cGU6ICdmaWxlX3NlYXJjaCc7XG5cbiAgLyoqXG4gICAqIFRoZSBJRHMgb2YgdGhlIHZlY3RvciBzdG9yZXMgdG8gc2VhcmNoLlxuICAgKi9cbiAgdmVjdG9yX3N0b3JlX2lkczogQXJyYXk8c3RyaW5nPjtcblxuICAvKipcbiAgICogQSBmaWx0ZXIgdG8gYXBwbHkuXG4gICAqL1xuICBmaWx0ZXJzPzogU2hhcmVkLkNvbXBhcmlzb25GaWx0ZXIgfCBTaGFyZWQuQ29tcG91bmRGaWx0ZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgcmVzdWx0cyB0byByZXR1cm4uIFRoaXMgbnVtYmVyIHNob3VsZCBiZSBiZXR3ZWVuIDEgYW5kIDUwXG4gICAqIGluY2x1c2l2ZS5cbiAgICovXG4gIG1heF9udW1fcmVzdWx0cz86IG51bWJlcjtcblxuICAvKipcbiAgICogUmFua2luZyBvcHRpb25zIGZvciBzZWFyY2guXG4gICAqL1xuICByYW5raW5nX29wdGlvbnM/OiBGaWxlU2VhcmNoVG9vbC5SYW5raW5nT3B0aW9ucztcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBGaWxlU2VhcmNoVG9vbCB7XG4gIC8qKlxuICAgKiBSYW5raW5nIG9wdGlvbnMgZm9yIHNlYXJjaC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgUmFua2luZ09wdGlvbnMge1xuICAgIC8qKlxuICAgICAqIFRoZSByYW5rZXIgdG8gdXNlIGZvciB0aGUgZmlsZSBzZWFyY2guXG4gICAgICovXG4gICAgcmFua2VyPzogJ2F1dG8nIHwgJ2RlZmF1bHQtMjAyNC0xMS0xNSc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2NvcmUgdGhyZXNob2xkIGZvciB0aGUgZmlsZSBzZWFyY2gsIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMS4gTnVtYmVyc1xuICAgICAqIGNsb3NlciB0byAxIHdpbGwgYXR0ZW1wdCB0byByZXR1cm4gb25seSB0aGUgbW9zdCByZWxldmFudCByZXN1bHRzLCBidXQgbWF5XG4gICAgICogcmV0dXJuIGZld2VyIHJlc3VsdHMuXG4gICAgICovXG4gICAgc2NvcmVfdGhyZXNob2xkPzogbnVtYmVyO1xuICB9XG59XG5cbi8qKlxuICogRGVmaW5lcyBhIGZ1bmN0aW9uIGluIHlvdXIgb3duIGNvZGUgdGhlIG1vZGVsIGNhbiBjaG9vc2UgdG8gY2FsbC4gTGVhcm4gbW9yZVxuICogYWJvdXRcbiAqIFtmdW5jdGlvbiBjYWxsaW5nXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvZnVuY3Rpb24tY2FsbGluZykuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRnVuY3Rpb25Ub29sIHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbiB0byBjYWxsLlxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBIEpTT04gc2NoZW1hIG9iamVjdCBkZXNjcmliaW5nIHRoZSBwYXJhbWV0ZXJzIG9mIHRoZSBmdW5jdGlvbi5cbiAgICovXG4gIHBhcmFtZXRlcnM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+IHwgbnVsbDtcblxuICAvKipcbiAgICogV2hldGhlciB0byBlbmZvcmNlIHN0cmljdCBwYXJhbWV0ZXIgdmFsaWRhdGlvbi4gRGVmYXVsdCBgdHJ1ZWAuXG4gICAqL1xuICBzdHJpY3Q6IGJvb2xlYW4gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgZnVuY3Rpb24gdG9vbC4gQWx3YXlzIGBmdW5jdGlvbmAuXG4gICAqL1xuICB0eXBlOiAnZnVuY3Rpb24nO1xuXG4gIC8qKlxuICAgKiBBIGRlc2NyaXB0aW9uIG9mIHRoZSBmdW5jdGlvbi4gVXNlZCBieSB0aGUgbW9kZWwgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgb3Igbm90IHRvXG4gICAqIGNhbGwgdGhlIGZ1bmN0aW9uLlxuICAgKi9cbiAgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlIHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIFJlc3BvbnNlLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpIG9mIHdoZW4gdGhpcyBSZXNwb25zZSB3YXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWRfYXQ6IG51bWJlcjtcblxuICBvdXRwdXRfdGV4dDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBbiBlcnJvciBvYmplY3QgcmV0dXJuZWQgd2hlbiB0aGUgbW9kZWwgZmFpbHMgdG8gZ2VuZXJhdGUgYSBSZXNwb25zZS5cbiAgICovXG4gIGVycm9yOiBSZXNwb25zZUVycm9yIHwgbnVsbDtcblxuICAvKipcbiAgICogRGV0YWlscyBhYm91dCB3aHkgdGhlIHJlc3BvbnNlIGlzIGluY29tcGxldGUuXG4gICAqL1xuICBpbmNvbXBsZXRlX2RldGFpbHM6IFJlc3BvbnNlLkluY29tcGxldGVEZXRhaWxzIHwgbnVsbDtcblxuICAvKipcbiAgICogSW5zZXJ0cyBhIHN5c3RlbSAob3IgZGV2ZWxvcGVyKSBtZXNzYWdlIGFzIHRoZSBmaXJzdCBpdGVtIGluIHRoZSBtb2RlbCdzXG4gICAqIGNvbnRleHQuXG4gICAqXG4gICAqIFdoZW4gdXNpbmcgYWxvbmcgd2l0aCBgcHJldmlvdXNfcmVzcG9uc2VfaWRgLCB0aGUgaW5zdHJ1Y3Rpb25zIGZyb20gYSBwcmV2aW91c1xuICAgKiByZXNwb25zZSB3aWxsIG5vdCBiZSBjYXJyaWVkIG92ZXIgdG8gdGhlIG5leHQgcmVzcG9uc2UuIFRoaXMgbWFrZXMgaXQgc2ltcGxlIHRvXG4gICAqIHN3YXAgb3V0IHN5c3RlbSAob3IgZGV2ZWxvcGVyKSBtZXNzYWdlcyBpbiBuZXcgcmVzcG9uc2VzLlxuICAgKi9cbiAgaW5zdHJ1Y3Rpb25zOiBzdHJpbmcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgKlxuICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbWV0YWRhdGE6IFNoYXJlZC5NZXRhZGF0YSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIE1vZGVsIElEIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIHJlc3BvbnNlLCBsaWtlIGBncHQtNG9gIG9yIGBvM2AuIE9wZW5BSSBvZmZlcnMgYVxuICAgKiB3aWRlIHJhbmdlIG9mIG1vZGVscyB3aXRoIGRpZmZlcmVudCBjYXBhYmlsaXRpZXMsIHBlcmZvcm1hbmNlIGNoYXJhY3RlcmlzdGljcyxcbiAgICogYW5kIHByaWNlIHBvaW50cy4gUmVmZXIgdG8gdGhlXG4gICAqIFttb2RlbCBndWlkZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvbW9kZWxzKSB0byBicm93c2UgYW5kIGNvbXBhcmVcbiAgICogYXZhaWxhYmxlIG1vZGVscy5cbiAgICovXG4gIG1vZGVsOiBTaGFyZWQuUmVzcG9uc2VzTW9kZWw7XG5cbiAgLyoqXG4gICAqIFRoZSBvYmplY3QgdHlwZSBvZiB0aGlzIHJlc291cmNlIC0gYWx3YXlzIHNldCB0byBgcmVzcG9uc2VgLlxuICAgKi9cbiAgb2JqZWN0OiAncmVzcG9uc2UnO1xuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBjb250ZW50IGl0ZW1zIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwuXG4gICAqXG4gICAqIC0gVGhlIGxlbmd0aCBhbmQgb3JkZXIgb2YgaXRlbXMgaW4gdGhlIGBvdXRwdXRgIGFycmF5IGlzIGRlcGVuZGVudCBvbiB0aGVcbiAgICogICBtb2RlbCdzIHJlc3BvbnNlLlxuICAgKiAtIFJhdGhlciB0aGFuIGFjY2Vzc2luZyB0aGUgZmlyc3QgaXRlbSBpbiB0aGUgYG91dHB1dGAgYXJyYXkgYW5kIGFzc3VtaW5nIGl0J3NcbiAgICogICBhbiBgYXNzaXN0YW50YCBtZXNzYWdlIHdpdGggdGhlIGNvbnRlbnQgZ2VuZXJhdGVkIGJ5IHRoZSBtb2RlbCwgeW91IG1pZ2h0XG4gICAqICAgY29uc2lkZXIgdXNpbmcgdGhlIGBvdXRwdXRfdGV4dGAgcHJvcGVydHkgd2hlcmUgc3VwcG9ydGVkIGluIFNES3MuXG4gICAqL1xuICBvdXRwdXQ6IEFycmF5PFJlc3BvbnNlT3V0cHV0SXRlbT47XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gYWxsb3cgdGhlIG1vZGVsIHRvIHJ1biB0b29sIGNhbGxzIGluIHBhcmFsbGVsLlxuICAgKi9cbiAgcGFyYWxsZWxfdG9vbF9jYWxsczogYm9vbGVhbjtcblxuICAvKipcbiAgICogV2hhdCBzYW1wbGluZyB0ZW1wZXJhdHVyZSB0byB1c2UsIGJldHdlZW4gMCBhbmQgMi4gSGlnaGVyIHZhbHVlcyBsaWtlIDAuOCB3aWxsXG4gICAqIG1ha2UgdGhlIG91dHB1dCBtb3JlIHJhbmRvbSwgd2hpbGUgbG93ZXIgdmFsdWVzIGxpa2UgMC4yIHdpbGwgbWFrZSBpdCBtb3JlXG4gICAqIGZvY3VzZWQgYW5kIGRldGVybWluaXN0aWMuIFdlIGdlbmVyYWxseSByZWNvbW1lbmQgYWx0ZXJpbmcgdGhpcyBvciBgdG9wX3BgIGJ1dFxuICAgKiBub3QgYm90aC5cbiAgICovXG4gIHRlbXBlcmF0dXJlOiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBIb3cgdGhlIG1vZGVsIHNob3VsZCBzZWxlY3Qgd2hpY2ggdG9vbCAob3IgdG9vbHMpIHRvIHVzZSB3aGVuIGdlbmVyYXRpbmcgYVxuICAgKiByZXNwb25zZS4gU2VlIHRoZSBgdG9vbHNgIHBhcmFtZXRlciB0byBzZWUgaG93IHRvIHNwZWNpZnkgd2hpY2ggdG9vbHMgdGhlIG1vZGVsXG4gICAqIGNhbiBjYWxsLlxuICAgKi9cbiAgdG9vbF9jaG9pY2U6IFRvb2xDaG9pY2VPcHRpb25zIHwgVG9vbENob2ljZVR5cGVzIHwgVG9vbENob2ljZUZ1bmN0aW9uO1xuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiB0b29scyB0aGUgbW9kZWwgbWF5IGNhbGwgd2hpbGUgZ2VuZXJhdGluZyBhIHJlc3BvbnNlLiBZb3UgY2FuXG4gICAqIHNwZWNpZnkgd2hpY2ggdG9vbCB0byB1c2UgYnkgc2V0dGluZyB0aGUgYHRvb2xfY2hvaWNlYCBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIFRoZSB0d28gY2F0ZWdvcmllcyBvZiB0b29scyB5b3UgY2FuIHByb3ZpZGUgdGhlIG1vZGVsIGFyZTpcbiAgICpcbiAgICogLSAqKkJ1aWx0LWluIHRvb2xzKio6IFRvb2xzIHRoYXQgYXJlIHByb3ZpZGVkIGJ5IE9wZW5BSSB0aGF0IGV4dGVuZCB0aGUgbW9kZWwnc1xuICAgKiAgIGNhcGFiaWxpdGllcywgbGlrZVxuICAgKiAgIFt3ZWIgc2VhcmNoXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvdG9vbHMtd2ViLXNlYXJjaCkgb3JcbiAgICogICBbZmlsZSBzZWFyY2hdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy90b29scy1maWxlLXNlYXJjaCkuXG4gICAqICAgTGVhcm4gbW9yZSBhYm91dFxuICAgKiAgIFtidWlsdC1pbiB0b29sc10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3Rvb2xzKS5cbiAgICogLSAqKkZ1bmN0aW9uIGNhbGxzIChjdXN0b20gdG9vbHMpKio6IEZ1bmN0aW9ucyB0aGF0IGFyZSBkZWZpbmVkIGJ5IHlvdSwgZW5hYmxpbmdcbiAgICogICB0aGUgbW9kZWwgdG8gY2FsbCB5b3VyIG93biBjb2RlLiBMZWFybiBtb3JlIGFib3V0XG4gICAqICAgW2Z1bmN0aW9uIGNhbGxpbmddKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9mdW5jdGlvbi1jYWxsaW5nKS5cbiAgICovXG4gIHRvb2xzOiBBcnJheTxUb29sPjtcblxuICAvKipcbiAgICogQW4gYWx0ZXJuYXRpdmUgdG8gc2FtcGxpbmcgd2l0aCB0ZW1wZXJhdHVyZSwgY2FsbGVkIG51Y2xldXMgc2FtcGxpbmcsIHdoZXJlIHRoZVxuICAgKiBtb2RlbCBjb25zaWRlcnMgdGhlIHJlc3VsdHMgb2YgdGhlIHRva2VucyB3aXRoIHRvcF9wIHByb2JhYmlsaXR5IG1hc3MuIFNvIDAuMVxuICAgKiBtZWFucyBvbmx5IHRoZSB0b2tlbnMgY29tcHJpc2luZyB0aGUgdG9wIDEwJSBwcm9iYWJpbGl0eSBtYXNzIGFyZSBjb25zaWRlcmVkLlxuICAgKlxuICAgKiBXZSBnZW5lcmFsbHkgcmVjb21tZW5kIGFsdGVyaW5nIHRoaXMgb3IgYHRlbXBlcmF0dXJlYCBidXQgbm90IGJvdGguXG4gICAqL1xuICB0b3BfcDogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogV2hldGhlciB0byBydW4gdGhlIG1vZGVsIHJlc3BvbnNlIGluIHRoZSBiYWNrZ3JvdW5kLlxuICAgKiBbTGVhcm4gbW9yZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL2JhY2tncm91bmQpLlxuICAgKi9cbiAgYmFja2dyb3VuZD86IGJvb2xlYW4gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBBbiB1cHBlciBib3VuZCBmb3IgdGhlIG51bWJlciBvZiB0b2tlbnMgdGhhdCBjYW4gYmUgZ2VuZXJhdGVkIGZvciBhIHJlc3BvbnNlLFxuICAgKiBpbmNsdWRpbmcgdmlzaWJsZSBvdXRwdXQgdG9rZW5zIGFuZFxuICAgKiBbcmVhc29uaW5nIHRva2Vuc10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3JlYXNvbmluZykuXG4gICAqL1xuICBtYXhfb3V0cHV0X3Rva2Vucz86IG51bWJlciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHByZXZpb3VzIHJlc3BvbnNlIHRvIHRoZSBtb2RlbC4gVXNlIHRoaXMgdG8gY3JlYXRlXG4gICAqIG11bHRpLXR1cm4gY29udmVyc2F0aW9ucy4gTGVhcm4gbW9yZSBhYm91dFxuICAgKiBbY29udmVyc2F0aW9uIHN0YXRlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvY29udmVyc2F0aW9uLXN0YXRlKS5cbiAgICovXG4gIHByZXZpb3VzX3Jlc3BvbnNlX2lkPzogc3RyaW5nIHwgbnVsbDtcblxuICAvKipcbiAgICogKipvLXNlcmllcyBtb2RlbHMgb25seSoqXG4gICAqXG4gICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3JcbiAgICogW3JlYXNvbmluZyBtb2RlbHNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9yZWFzb25pbmcpLlxuICAgKi9cbiAgcmVhc29uaW5nPzogU2hhcmVkLlJlYXNvbmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB0aGUgbGF0ZW5jeSB0aWVyIHRvIHVzZSBmb3IgcHJvY2Vzc2luZyB0aGUgcmVxdWVzdC4gVGhpcyBwYXJhbWV0ZXIgaXNcbiAgICogcmVsZXZhbnQgZm9yIGN1c3RvbWVycyBzdWJzY3JpYmVkIHRvIHRoZSBzY2FsZSB0aWVyIHNlcnZpY2U6XG4gICAqXG4gICAqIC0gSWYgc2V0IHRvICdhdXRvJywgYW5kIHRoZSBQcm9qZWN0IGlzIFNjYWxlIHRpZXIgZW5hYmxlZCwgdGhlIHN5c3RlbSB3aWxsXG4gICAqICAgdXRpbGl6ZSBzY2FsZSB0aWVyIGNyZWRpdHMgdW50aWwgdGhleSBhcmUgZXhoYXVzdGVkLlxuICAgKiAtIElmIHNldCB0byAnYXV0bycsIGFuZCB0aGUgUHJvamVjdCBpcyBub3QgU2NhbGUgdGllciBlbmFibGVkLCB0aGUgcmVxdWVzdCB3aWxsXG4gICAqICAgYmUgcHJvY2Vzc2VkIHVzaW5nIHRoZSBkZWZhdWx0IHNlcnZpY2UgdGllciB3aXRoIGEgbG93ZXIgdXB0aW1lIFNMQSBhbmQgbm9cbiAgICogICBsYXRlbmN5IGd1YXJlbnRlZS5cbiAgICogLSBJZiBzZXQgdG8gJ2RlZmF1bHQnLCB0aGUgcmVxdWVzdCB3aWxsIGJlIHByb2Nlc3NlZCB1c2luZyB0aGUgZGVmYXVsdCBzZXJ2aWNlXG4gICAqICAgdGllciB3aXRoIGEgbG93ZXIgdXB0aW1lIFNMQSBhbmQgbm8gbGF0ZW5jeSBndWFyZW50ZWUuXG4gICAqIC0gSWYgc2V0IHRvICdmbGV4JywgdGhlIHJlcXVlc3Qgd2lsbCBiZSBwcm9jZXNzZWQgd2l0aCB0aGUgRmxleCBQcm9jZXNzaW5nXG4gICAqICAgc2VydmljZSB0aWVyLlxuICAgKiAgIFtMZWFybiBtb3JlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvZmxleC1wcm9jZXNzaW5nKS5cbiAgICogLSBXaGVuIG5vdCBzZXQsIHRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzICdhdXRvJy5cbiAgICpcbiAgICogV2hlbiB0aGlzIHBhcmFtZXRlciBpcyBzZXQsIHRoZSByZXNwb25zZSBib2R5IHdpbGwgaW5jbHVkZSB0aGUgYHNlcnZpY2VfdGllcmBcbiAgICogdXRpbGl6ZWQuXG4gICAqL1xuICBzZXJ2aWNlX3RpZXI/OiAnYXV0bycgfCAnZGVmYXVsdCcgfCAnZmxleCcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgc3RhdHVzIG9mIHRoZSByZXNwb25zZSBnZW5lcmF0aW9uLiBPbmUgb2YgYGNvbXBsZXRlZGAsIGBmYWlsZWRgLFxuICAgKiBgaW5fcHJvZ3Jlc3NgLCBgY2FuY2VsbGVkYCwgYHF1ZXVlZGAsIG9yIGBpbmNvbXBsZXRlYC5cbiAgICovXG4gIHN0YXR1cz86IFJlc3BvbnNlU3RhdHVzO1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIGEgdGV4dCByZXNwb25zZSBmcm9tIHRoZSBtb2RlbC4gQ2FuIGJlIHBsYWluIHRleHQgb3JcbiAgICogc3RydWN0dXJlZCBKU09OIGRhdGEuIExlYXJuIG1vcmU6XG4gICAqXG4gICAqIC0gW1RleHQgaW5wdXRzIGFuZCBvdXRwdXRzXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvdGV4dClcbiAgICogLSBbU3RydWN0dXJlZCBPdXRwdXRzXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvc3RydWN0dXJlZC1vdXRwdXRzKVxuICAgKi9cbiAgdGV4dD86IFJlc3BvbnNlVGV4dENvbmZpZztcblxuICAvKipcbiAgICogVGhlIHRydW5jYXRpb24gc3RyYXRlZ3kgdG8gdXNlIGZvciB0aGUgbW9kZWwgcmVzcG9uc2UuXG4gICAqXG4gICAqIC0gYGF1dG9gOiBJZiB0aGUgY29udGV4dCBvZiB0aGlzIHJlc3BvbnNlIGFuZCBwcmV2aW91cyBvbmVzIGV4Y2VlZHMgdGhlIG1vZGVsJ3NcbiAgICogICBjb250ZXh0IHdpbmRvdyBzaXplLCB0aGUgbW9kZWwgd2lsbCB0cnVuY2F0ZSB0aGUgcmVzcG9uc2UgdG8gZml0IHRoZSBjb250ZXh0XG4gICAqICAgd2luZG93IGJ5IGRyb3BwaW5nIGlucHV0IGl0ZW1zIGluIHRoZSBtaWRkbGUgb2YgdGhlIGNvbnZlcnNhdGlvbi5cbiAgICogLSBgZGlzYWJsZWRgIChkZWZhdWx0KTogSWYgYSBtb2RlbCByZXNwb25zZSB3aWxsIGV4Y2VlZCB0aGUgY29udGV4dCB3aW5kb3cgc2l6ZVxuICAgKiAgIGZvciBhIG1vZGVsLCB0aGUgcmVxdWVzdCB3aWxsIGZhaWwgd2l0aCBhIDQwMCBlcnJvci5cbiAgICovXG4gIHRydW5jYXRpb24/OiAnYXV0bycgfCAnZGlzYWJsZWQnIHwgbnVsbDtcblxuICAvKipcbiAgICogUmVwcmVzZW50cyB0b2tlbiB1c2FnZSBkZXRhaWxzIGluY2x1ZGluZyBpbnB1dCB0b2tlbnMsIG91dHB1dCB0b2tlbnMsIGFcbiAgICogYnJlYWtkb3duIG9mIG91dHB1dCB0b2tlbnMsIGFuZCB0aGUgdG90YWwgdG9rZW5zIHVzZWQuXG4gICAqL1xuICB1c2FnZT86IFJlc3BvbnNlVXNhZ2U7XG5cbiAgLyoqXG4gICAqIEEgc3RhYmxlIGlkZW50aWZpZXIgZm9yIHlvdXIgZW5kLXVzZXJzLiBVc2VkIHRvIGJvb3N0IGNhY2hlIGhpdCByYXRlcyBieSBiZXR0ZXJcbiAgICogYnVja2V0aW5nIHNpbWlsYXIgcmVxdWVzdHMgYW5kIHRvIGhlbHAgT3BlbkFJIGRldGVjdCBhbmQgcHJldmVudCBhYnVzZS5cbiAgICogW0xlYXJuIG1vcmVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9zYWZldHktYmVzdC1wcmFjdGljZXMjZW5kLXVzZXItaWRzKS5cbiAgICovXG4gIHVzZXI/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgUmVzcG9uc2Uge1xuICAvKipcbiAgICogRGV0YWlscyBhYm91dCB3aHkgdGhlIHJlc3BvbnNlIGlzIGluY29tcGxldGUuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIEluY29tcGxldGVEZXRhaWxzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgcmVhc29uIHdoeSB0aGUgcmVzcG9uc2UgaXMgaW5jb21wbGV0ZS5cbiAgICAgKi9cbiAgICByZWFzb24/OiAnbWF4X291dHB1dF90b2tlbnMnIHwgJ2NvbnRlbnRfZmlsdGVyJztcbiAgfVxufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbiB0aGVyZSBpcyBhIHBhcnRpYWwgYXVkaW8gcmVzcG9uc2UuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VBdWRpb0RlbHRhRXZlbnQge1xuICAvKipcbiAgICogQSBjaHVuayBvZiBCYXNlNjQgZW5jb2RlZCByZXNwb25zZSBhdWRpbyBieXRlcy5cbiAgICovXG4gIGRlbHRhOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgc2VxdWVuY2UgbnVtYmVyIGZvciB0aGlzIGNodW5rIG9mIHRoZSBzdHJlYW0gcmVzcG9uc2UuXG4gICAqL1xuICBzZXF1ZW5jZV9udW1iZXI6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGV2ZW50LiBBbHdheXMgYHJlc3BvbnNlLmF1ZGlvLmRlbHRhYC5cbiAgICovXG4gIHR5cGU6ICdyZXNwb25zZS5hdWRpby5kZWx0YSc7XG59XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuIHRoZSBhdWRpbyByZXNwb25zZSBpcyBjb21wbGV0ZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUF1ZGlvRG9uZUV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBzZXF1ZW5jZSBudW1iZXIgb2YgdGhlIGRlbHRhLlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC4gQWx3YXlzIGByZXNwb25zZS5hdWRpby5kb25lYC5cbiAgICovXG4gIHR5cGU6ICdyZXNwb25zZS5hdWRpby5kb25lJztcbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdGhlcmUgaXMgYSBwYXJ0aWFsIHRyYW5zY3JpcHQgb2YgYXVkaW8uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VBdWRpb1RyYW5zY3JpcHREZWx0YUV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBwYXJ0aWFsIHRyYW5zY3JpcHQgb2YgdGhlIGF1ZGlvIHJlc3BvbnNlLlxuICAgKi9cbiAgZGVsdGE6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGlzIGV2ZW50LlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC4gQWx3YXlzIGByZXNwb25zZS5hdWRpby50cmFuc2NyaXB0LmRlbHRhYC5cbiAgICovXG4gIHR5cGU6ICdyZXNwb25zZS5hdWRpby50cmFuc2NyaXB0LmRlbHRhJztcbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdGhlIGZ1bGwgYXVkaW8gdHJhbnNjcmlwdCBpcyBjb21wbGV0ZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VBdWRpb1RyYW5zY3JpcHREb25lRXZlbnQge1xuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGlzIGV2ZW50LlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC4gQWx3YXlzIGByZXNwb25zZS5hdWRpby50cmFuc2NyaXB0LmRvbmVgLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLmF1ZGlvLnRyYW5zY3JpcHQuZG9uZSc7XG59XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuIGEgcGFydGlhbCBjb2RlIHNuaXBwZXQgaXMgYWRkZWQgYnkgdGhlIGNvZGUgaW50ZXJwcmV0ZXIuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VDb2RlSW50ZXJwcmV0ZXJDYWxsQ29kZURlbHRhRXZlbnQge1xuICAvKipcbiAgICogVGhlIHBhcnRpYWwgY29kZSBzbmlwcGV0IGFkZGVkIGJ5IHRoZSBjb2RlIGludGVycHJldGVyLlxuICAgKi9cbiAgZGVsdGE6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBvdXRwdXQgaXRlbSB0aGF0IHRoZSBjb2RlIGludGVycHJldGVyIGNhbGwgaXMgaW4gcHJvZ3Jlc3MuXG4gICAqL1xuICBvdXRwdXRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGlzIGV2ZW50LlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC4gQWx3YXlzIGByZXNwb25zZS5jb2RlX2ludGVycHJldGVyX2NhbGwuY29kZS5kZWx0YWAuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2UuY29kZV9pbnRlcnByZXRlcl9jYWxsLmNvZGUuZGVsdGEnO1xufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbiBjb2RlIHNuaXBwZXQgb3V0cHV0IGlzIGZpbmFsaXplZCBieSB0aGUgY29kZSBpbnRlcnByZXRlci5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUNvZGVJbnRlcnByZXRlckNhbGxDb2RlRG9uZUV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBmaW5hbCBjb2RlIHNuaXBwZXQgb3V0cHV0IGJ5IHRoZSBjb2RlIGludGVycHJldGVyLlxuICAgKi9cbiAgY29kZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIG91dHB1dCBpdGVtIHRoYXQgdGhlIGNvZGUgaW50ZXJwcmV0ZXIgY2FsbCBpcyBpbiBwcm9ncmVzcy5cbiAgICovXG4gIG91dHB1dF9pbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgc2VxdWVuY2UgbnVtYmVyIG9mIHRoaXMgZXZlbnQuXG4gICAqL1xuICBzZXF1ZW5jZV9udW1iZXI6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGV2ZW50LiBBbHdheXMgYHJlc3BvbnNlLmNvZGVfaW50ZXJwcmV0ZXJfY2FsbC5jb2RlLmRvbmVgLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLmNvZGVfaW50ZXJwcmV0ZXJfY2FsbC5jb2RlLmRvbmUnO1xufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbiB0aGUgY29kZSBpbnRlcnByZXRlciBjYWxsIGlzIGNvbXBsZXRlZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUNvZGVJbnRlcnByZXRlckNhbGxDb21wbGV0ZWRFdmVudCB7XG4gIC8qKlxuICAgKiBBIHRvb2wgY2FsbCB0byBydW4gY29kZS5cbiAgICovXG4gIGNvZGVfaW50ZXJwcmV0ZXJfY2FsbDogUmVzcG9uc2VDb2RlSW50ZXJwcmV0ZXJUb29sQ2FsbDtcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBvdXRwdXQgaXRlbSB0aGF0IHRoZSBjb2RlIGludGVycHJldGVyIGNhbGwgaXMgaW4gcHJvZ3Jlc3MuXG4gICAqL1xuICBvdXRwdXRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGlzIGV2ZW50LlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC4gQWx3YXlzIGByZXNwb25zZS5jb2RlX2ludGVycHJldGVyX2NhbGwuY29tcGxldGVkYC5cbiAgICovXG4gIHR5cGU6ICdyZXNwb25zZS5jb2RlX2ludGVycHJldGVyX2NhbGwuY29tcGxldGVkJztcbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW4gYSBjb2RlIGludGVycHJldGVyIGNhbGwgaXMgaW4gcHJvZ3Jlc3MuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VDb2RlSW50ZXJwcmV0ZXJDYWxsSW5Qcm9ncmVzc0V2ZW50IHtcbiAgLyoqXG4gICAqIEEgdG9vbCBjYWxsIHRvIHJ1biBjb2RlLlxuICAgKi9cbiAgY29kZV9pbnRlcnByZXRlcl9jYWxsOiBSZXNwb25zZUNvZGVJbnRlcnByZXRlclRvb2xDYWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIG91dHB1dCBpdGVtIHRoYXQgdGhlIGNvZGUgaW50ZXJwcmV0ZXIgY2FsbCBpcyBpbiBwcm9ncmVzcy5cbiAgICovXG4gIG91dHB1dF9pbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgc2VxdWVuY2UgbnVtYmVyIG9mIHRoaXMgZXZlbnQuXG4gICAqL1xuICBzZXF1ZW5jZV9udW1iZXI6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGV2ZW50LiBBbHdheXMgYHJlc3BvbnNlLmNvZGVfaW50ZXJwcmV0ZXJfY2FsbC5pbl9wcm9ncmVzc2AuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2UuY29kZV9pbnRlcnByZXRlcl9jYWxsLmluX3Byb2dyZXNzJztcbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdGhlIGNvZGUgaW50ZXJwcmV0ZXIgaXMgYWN0aXZlbHkgaW50ZXJwcmV0aW5nIHRoZSBjb2RlIHNuaXBwZXQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VDb2RlSW50ZXJwcmV0ZXJDYWxsSW50ZXJwcmV0aW5nRXZlbnQge1xuICAvKipcbiAgICogQSB0b29sIGNhbGwgdG8gcnVuIGNvZGUuXG4gICAqL1xuICBjb2RlX2ludGVycHJldGVyX2NhbGw6IFJlc3BvbnNlQ29kZUludGVycHJldGVyVG9vbENhbGw7XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgb3V0cHV0IGl0ZW0gdGhhdCB0aGUgY29kZSBpbnRlcnByZXRlciBjYWxsIGlzIGluIHByb2dyZXNzLlxuICAgKi9cbiAgb3V0cHV0X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBzZXF1ZW5jZSBudW1iZXIgb2YgdGhpcyBldmVudC5cbiAgICovXG4gIHNlcXVlbmNlX251bWJlcjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgZXZlbnQuIEFsd2F5cyBgcmVzcG9uc2UuY29kZV9pbnRlcnByZXRlcl9jYWxsLmludGVycHJldGluZ2AuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2UuY29kZV9pbnRlcnByZXRlcl9jYWxsLmludGVycHJldGluZyc7XG59XG5cbi8qKlxuICogQSB0b29sIGNhbGwgdG8gcnVuIGNvZGUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VDb2RlSW50ZXJwcmV0ZXJUb29sQ2FsbCB7XG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBjb2RlIGludGVycHJldGVyIHRvb2wgY2FsbC5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBjb2RlIHRvIHJ1bi5cbiAgICovXG4gIGNvZGU6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHJlc3VsdHMgb2YgdGhlIGNvZGUgaW50ZXJwcmV0ZXIgdG9vbCBjYWxsLlxuICAgKi9cbiAgcmVzdWx0czogQXJyYXk8UmVzcG9uc2VDb2RlSW50ZXJwcmV0ZXJUb29sQ2FsbC5Mb2dzIHwgUmVzcG9uc2VDb2RlSW50ZXJwcmV0ZXJUb29sQ2FsbC5GaWxlcz47XG5cbiAgLyoqXG4gICAqIFRoZSBzdGF0dXMgb2YgdGhlIGNvZGUgaW50ZXJwcmV0ZXIgdG9vbCBjYWxsLlxuICAgKi9cbiAgc3RhdHVzOiAnaW5fcHJvZ3Jlc3MnIHwgJ2ludGVycHJldGluZycgfCAnY29tcGxldGVkJztcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGNvZGUgaW50ZXJwcmV0ZXIgdG9vbCBjYWxsLiBBbHdheXMgYGNvZGVfaW50ZXJwcmV0ZXJfY2FsbGAuXG4gICAqL1xuICB0eXBlOiAnY29kZV9pbnRlcnByZXRlcl9jYWxsJztcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBjb250YWluZXIgdXNlZCB0byBydW4gdGhlIGNvZGUuXG4gICAqL1xuICBjb250YWluZXJfaWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgUmVzcG9uc2VDb2RlSW50ZXJwcmV0ZXJUb29sQ2FsbCB7XG4gIC8qKlxuICAgKiBUaGUgb3V0cHV0IG9mIGEgY29kZSBpbnRlcnByZXRlciB0b29sIGNhbGwgdGhhdCBpcyB0ZXh0LlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBMb2dzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbG9ncyBvZiB0aGUgY29kZSBpbnRlcnByZXRlciB0b29sIGNhbGwuXG4gICAgICovXG4gICAgbG9nczogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIGNvZGUgaW50ZXJwcmV0ZXIgdGV4dCBvdXRwdXQuIEFsd2F5cyBgbG9nc2AuXG4gICAgICovXG4gICAgdHlwZTogJ2xvZ3MnO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBvdXRwdXQgb2YgYSBjb2RlIGludGVycHJldGVyIHRvb2wgY2FsbCB0aGF0IGlzIGEgZmlsZS5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgRmlsZXMge1xuICAgIGZpbGVzOiBBcnJheTxGaWxlcy5GaWxlPjtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBjb2RlIGludGVycHJldGVyIGZpbGUgb3V0cHV0LiBBbHdheXMgYGZpbGVzYC5cbiAgICAgKi9cbiAgICB0eXBlOiAnZmlsZXMnO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBGaWxlcyB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBGaWxlIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIElEIG9mIHRoZSBmaWxlLlxuICAgICAgICovXG4gICAgICBmaWxlX2lkOiBzdHJpbmc7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIE1JTUUgdHlwZSBvZiB0aGUgZmlsZS5cbiAgICAgICAqL1xuICAgICAgbWltZV90eXBlOiBzdHJpbmc7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuIHRoZSBtb2RlbCByZXNwb25zZSBpcyBjb21wbGV0ZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUNvbXBsZXRlZEV2ZW50IHtcbiAgLyoqXG4gICAqIFByb3BlcnRpZXMgb2YgdGhlIGNvbXBsZXRlZCByZXNwb25zZS5cbiAgICovXG4gIHJlc3BvbnNlOiBSZXNwb25zZTtcblxuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBmb3IgdGhpcyBldmVudC5cbiAgICovXG4gIHNlcXVlbmNlX251bWJlcjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgZXZlbnQuIEFsd2F5cyBgcmVzcG9uc2UuY29tcGxldGVkYC5cbiAgICovXG4gIHR5cGU6ICdyZXNwb25zZS5jb21wbGV0ZWQnO1xufVxuXG4vKipcbiAqIEEgdG9vbCBjYWxsIHRvIGEgY29tcHV0ZXIgdXNlIHRvb2wuIFNlZSB0aGVcbiAqIFtjb21wdXRlciB1c2UgZ3VpZGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy90b29scy1jb21wdXRlci11c2UpXG4gKiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUNvbXB1dGVyVG9vbENhbGwge1xuICAvKipcbiAgICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgY29tcHV0ZXIgY2FsbC5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgY2xpY2sgYWN0aW9uLlxuICAgKi9cbiAgYWN0aW9uOlxuICAgIHwgUmVzcG9uc2VDb21wdXRlclRvb2xDYWxsLkNsaWNrXG4gICAgfCBSZXNwb25zZUNvbXB1dGVyVG9vbENhbGwuRG91YmxlQ2xpY2tcbiAgICB8IFJlc3BvbnNlQ29tcHV0ZXJUb29sQ2FsbC5EcmFnXG4gICAgfCBSZXNwb25zZUNvbXB1dGVyVG9vbENhbGwuS2V5cHJlc3NcbiAgICB8IFJlc3BvbnNlQ29tcHV0ZXJUb29sQ2FsbC5Nb3ZlXG4gICAgfCBSZXNwb25zZUNvbXB1dGVyVG9vbENhbGwuU2NyZWVuc2hvdFxuICAgIHwgUmVzcG9uc2VDb21wdXRlclRvb2xDYWxsLlNjcm9sbFxuICAgIHwgUmVzcG9uc2VDb21wdXRlclRvb2xDYWxsLlR5cGVcbiAgICB8IFJlc3BvbnNlQ29tcHV0ZXJUb29sQ2FsbC5XYWl0O1xuXG4gIC8qKlxuICAgKiBBbiBpZGVudGlmaWVyIHVzZWQgd2hlbiByZXNwb25kaW5nIHRvIHRoZSB0b29sIGNhbGwgd2l0aCBvdXRwdXQuXG4gICAqL1xuICBjYWxsX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBwZW5kaW5nIHNhZmV0eSBjaGVja3MgZm9yIHRoZSBjb21wdXRlciBjYWxsLlxuICAgKi9cbiAgcGVuZGluZ19zYWZldHlfY2hlY2tzOiBBcnJheTxSZXNwb25zZUNvbXB1dGVyVG9vbENhbGwuUGVuZGluZ1NhZmV0eUNoZWNrPjtcblxuICAvKipcbiAgICogVGhlIHN0YXR1cyBvZiB0aGUgaXRlbS4gT25lIG9mIGBpbl9wcm9ncmVzc2AsIGBjb21wbGV0ZWRgLCBvciBgaW5jb21wbGV0ZWAuXG4gICAqIFBvcHVsYXRlZCB3aGVuIGl0ZW1zIGFyZSByZXR1cm5lZCB2aWEgQVBJLlxuICAgKi9cbiAgc3RhdHVzOiAnaW5fcHJvZ3Jlc3MnIHwgJ2NvbXBsZXRlZCcgfCAnaW5jb21wbGV0ZSc7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBjb21wdXRlciBjYWxsLiBBbHdheXMgYGNvbXB1dGVyX2NhbGxgLlxuICAgKi9cbiAgdHlwZTogJ2NvbXB1dGVyX2NhbGwnO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFJlc3BvbnNlQ29tcHV0ZXJUb29sQ2FsbCB7XG4gIC8qKlxuICAgKiBBIGNsaWNrIGFjdGlvbi5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgQ2xpY2sge1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGljaCBtb3VzZSBidXR0b24gd2FzIHByZXNzZWQgZHVyaW5nIHRoZSBjbGljay4gT25lIG9mIGBsZWZ0YCxcbiAgICAgKiBgcmlnaHRgLCBgd2hlZWxgLCBgYmFja2AsIG9yIGBmb3J3YXJkYC5cbiAgICAgKi9cbiAgICBidXR0b246ICdsZWZ0JyB8ICdyaWdodCcgfCAnd2hlZWwnIHwgJ2JhY2snIHwgJ2ZvcndhcmQnO1xuXG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBldmVudCB0eXBlLiBGb3IgYSBjbGljayBhY3Rpb24sIHRoaXMgcHJvcGVydHkgaXMgYWx3YXlzIHNldCB0b1xuICAgICAqIGBjbGlja2AuXG4gICAgICovXG4gICAgdHlwZTogJ2NsaWNrJztcblxuICAgIC8qKlxuICAgICAqIFRoZSB4LWNvb3JkaW5hdGUgd2hlcmUgdGhlIGNsaWNrIG9jY3VycmVkLlxuICAgICAqL1xuICAgIHg6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSB5LWNvb3JkaW5hdGUgd2hlcmUgdGhlIGNsaWNrIG9jY3VycmVkLlxuICAgICAqL1xuICAgIHk6IG51bWJlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGRvdWJsZSBjbGljayBhY3Rpb24uXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIERvdWJsZUNsaWNrIHtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGV2ZW50IHR5cGUuIEZvciBhIGRvdWJsZSBjbGljayBhY3Rpb24sIHRoaXMgcHJvcGVydHkgaXMgYWx3YXlzIHNldFxuICAgICAqIHRvIGBkb3VibGVfY2xpY2tgLlxuICAgICAqL1xuICAgIHR5cGU6ICdkb3VibGVfY2xpY2snO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHgtY29vcmRpbmF0ZSB3aGVyZSB0aGUgZG91YmxlIGNsaWNrIG9jY3VycmVkLlxuICAgICAqL1xuICAgIHg6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSB5LWNvb3JkaW5hdGUgd2hlcmUgdGhlIGRvdWJsZSBjbGljayBvY2N1cnJlZC5cbiAgICAgKi9cbiAgICB5OiBudW1iZXI7XG4gIH1cblxuICAvKipcbiAgICogQSBkcmFnIGFjdGlvbi5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgRHJhZyB7XG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgY29vcmRpbmF0ZXMgcmVwcmVzZW50aW5nIHRoZSBwYXRoIG9mIHRoZSBkcmFnIGFjdGlvbi4gQ29vcmRpbmF0ZXNcbiAgICAgKiB3aWxsIGFwcGVhciBhcyBhbiBhcnJheSBvZiBvYmplY3RzLCBlZ1xuICAgICAqXG4gICAgICogYGBgXG4gICAgICogW1xuICAgICAqICAgeyB4OiAxMDAsIHk6IDIwMCB9LFxuICAgICAqICAgeyB4OiAyMDAsIHk6IDMwMCB9XG4gICAgICogXVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHBhdGg6IEFycmF5PERyYWcuUGF0aD47XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGV2ZW50IHR5cGUuIEZvciBhIGRyYWcgYWN0aW9uLCB0aGlzIHByb3BlcnR5IGlzIGFsd2F5cyBzZXQgdG9cbiAgICAgKiBgZHJhZ2AuXG4gICAgICovXG4gICAgdHlwZTogJ2RyYWcnO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBEcmFnIHtcbiAgICAvKipcbiAgICAgKiBBIHNlcmllcyBvZiB4L3kgY29vcmRpbmF0ZSBwYWlycyBpbiB0aGUgZHJhZyBwYXRoLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgUGF0aCB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSB4LWNvb3JkaW5hdGUuXG4gICAgICAgKi9cbiAgICAgIHg6IG51bWJlcjtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgeS1jb29yZGluYXRlLlxuICAgICAgICovXG4gICAgICB5OiBudW1iZXI7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEEgY29sbGVjdGlvbiBvZiBrZXlwcmVzc2VzIHRoZSBtb2RlbCB3b3VsZCBsaWtlIHRvIHBlcmZvcm0uXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIEtleXByZXNzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgY29tYmluYXRpb24gb2Yga2V5cyB0aGUgbW9kZWwgaXMgcmVxdWVzdGluZyB0byBiZSBwcmVzc2VkLiBUaGlzIGlzIGFuIGFycmF5XG4gICAgICogb2Ygc3RyaW5ncywgZWFjaCByZXByZXNlbnRpbmcgYSBrZXkuXG4gICAgICovXG4gICAga2V5czogQXJyYXk8c3RyaW5nPjtcblxuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgZXZlbnQgdHlwZS4gRm9yIGEga2V5cHJlc3MgYWN0aW9uLCB0aGlzIHByb3BlcnR5IGlzIGFsd2F5cyBzZXQgdG9cbiAgICAgKiBga2V5cHJlc3NgLlxuICAgICAqL1xuICAgIHR5cGU6ICdrZXlwcmVzcyc7XG4gIH1cblxuICAvKipcbiAgICogQSBtb3VzZSBtb3ZlIGFjdGlvbi5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgTW92ZSB7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBldmVudCB0eXBlLiBGb3IgYSBtb3ZlIGFjdGlvbiwgdGhpcyBwcm9wZXJ0eSBpcyBhbHdheXMgc2V0IHRvXG4gICAgICogYG1vdmVgLlxuICAgICAqL1xuICAgIHR5cGU6ICdtb3ZlJztcblxuICAgIC8qKlxuICAgICAqIFRoZSB4LWNvb3JkaW5hdGUgdG8gbW92ZSB0by5cbiAgICAgKi9cbiAgICB4OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgeS1jb29yZGluYXRlIHRvIG1vdmUgdG8uXG4gICAgICovXG4gICAgeTogbnVtYmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc2NyZWVuc2hvdCBhY3Rpb24uXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFNjcmVlbnNob3Qge1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyB0aGUgZXZlbnQgdHlwZS4gRm9yIGEgc2NyZWVuc2hvdCBhY3Rpb24sIHRoaXMgcHJvcGVydHkgaXMgYWx3YXlzIHNldFxuICAgICAqIHRvIGBzY3JlZW5zaG90YC5cbiAgICAgKi9cbiAgICB0eXBlOiAnc2NyZWVuc2hvdCc7XG4gIH1cblxuICAvKipcbiAgICogQSBzY3JvbGwgYWN0aW9uLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBTY3JvbGwge1xuICAgIC8qKlxuICAgICAqIFRoZSBob3Jpem9udGFsIHNjcm9sbCBkaXN0YW5jZS5cbiAgICAgKi9cbiAgICBzY3JvbGxfeDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHZlcnRpY2FsIHNjcm9sbCBkaXN0YW5jZS5cbiAgICAgKi9cbiAgICBzY3JvbGxfeTogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBldmVudCB0eXBlLiBGb3IgYSBzY3JvbGwgYWN0aW9uLCB0aGlzIHByb3BlcnR5IGlzIGFsd2F5cyBzZXQgdG9cbiAgICAgKiBgc2Nyb2xsYC5cbiAgICAgKi9cbiAgICB0eXBlOiAnc2Nyb2xsJztcblxuICAgIC8qKlxuICAgICAqIFRoZSB4LWNvb3JkaW5hdGUgd2hlcmUgdGhlIHNjcm9sbCBvY2N1cnJlZC5cbiAgICAgKi9cbiAgICB4OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgeS1jb29yZGluYXRlIHdoZXJlIHRoZSBzY3JvbGwgb2NjdXJyZWQuXG4gICAgICovXG4gICAgeTogbnVtYmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuIGFjdGlvbiB0byB0eXBlIGluIHRleHQuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFR5cGUge1xuICAgIC8qKlxuICAgICAqIFRoZSB0ZXh0IHRvIHR5cGUuXG4gICAgICovXG4gICAgdGV4dDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBldmVudCB0eXBlLiBGb3IgYSB0eXBlIGFjdGlvbiwgdGhpcyBwcm9wZXJ0eSBpcyBhbHdheXMgc2V0IHRvXG4gICAgICogYHR5cGVgLlxuICAgICAqL1xuICAgIHR5cGU6ICd0eXBlJztcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHdhaXQgYWN0aW9uLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBXYWl0IHtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIGV2ZW50IHR5cGUuIEZvciBhIHdhaXQgYWN0aW9uLCB0aGlzIHByb3BlcnR5IGlzIGFsd2F5cyBzZXQgdG9cbiAgICAgKiBgd2FpdGAuXG4gICAgICovXG4gICAgdHlwZTogJ3dhaXQnO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgcGVuZGluZyBzYWZldHkgY2hlY2sgZm9yIHRoZSBjb21wdXRlciBjYWxsLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBQZW5kaW5nU2FmZXR5Q2hlY2sge1xuICAgIC8qKlxuICAgICAqIFRoZSBJRCBvZiB0aGUgcGVuZGluZyBzYWZldHkgY2hlY2suXG4gICAgICovXG4gICAgaWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBwZW5kaW5nIHNhZmV0eSBjaGVjay5cbiAgICAgKi9cbiAgICBjb2RlOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBEZXRhaWxzIGFib3V0IHRoZSBwZW5kaW5nIHNhZmV0eSBjaGVjay5cbiAgICAgKi9cbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUNvbXB1dGVyVG9vbENhbGxPdXRwdXRJdGVtIHtcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIGNvbXB1dGVyIGNhbGwgdG9vbCBvdXRwdXQuXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIGNvbXB1dGVyIHRvb2wgY2FsbCB0aGF0IHByb2R1Y2VkIHRoZSBvdXRwdXQuXG4gICAqL1xuICBjYWxsX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgY29tcHV0ZXIgc2NyZWVuc2hvdCBpbWFnZSB1c2VkIHdpdGggdGhlIGNvbXB1dGVyIHVzZSB0b29sLlxuICAgKi9cbiAgb3V0cHV0OiBSZXNwb25zZUNvbXB1dGVyVG9vbENhbGxPdXRwdXRTY3JlZW5zaG90O1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgY29tcHV0ZXIgdG9vbCBjYWxsIG91dHB1dC4gQWx3YXlzIGBjb21wdXRlcl9jYWxsX291dHB1dGAuXG4gICAqL1xuICB0eXBlOiAnY29tcHV0ZXJfY2FsbF9vdXRwdXQnO1xuXG4gIC8qKlxuICAgKiBUaGUgc2FmZXR5IGNoZWNrcyByZXBvcnRlZCBieSB0aGUgQVBJIHRoYXQgaGF2ZSBiZWVuIGFja25vd2xlZGdlZCBieSB0aGVcbiAgICogZGV2ZWxvcGVyLlxuICAgKi9cbiAgYWNrbm93bGVkZ2VkX3NhZmV0eV9jaGVja3M/OiBBcnJheTxSZXNwb25zZUNvbXB1dGVyVG9vbENhbGxPdXRwdXRJdGVtLkFja25vd2xlZGdlZFNhZmV0eUNoZWNrPjtcblxuICAvKipcbiAgICogVGhlIHN0YXR1cyBvZiB0aGUgbWVzc2FnZSBpbnB1dC4gT25lIG9mIGBpbl9wcm9ncmVzc2AsIGBjb21wbGV0ZWRgLCBvclxuICAgKiBgaW5jb21wbGV0ZWAuIFBvcHVsYXRlZCB3aGVuIGlucHV0IGl0ZW1zIGFyZSByZXR1cm5lZCB2aWEgQVBJLlxuICAgKi9cbiAgc3RhdHVzPzogJ2luX3Byb2dyZXNzJyB8ICdjb21wbGV0ZWQnIHwgJ2luY29tcGxldGUnO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFJlc3BvbnNlQ29tcHV0ZXJUb29sQ2FsbE91dHB1dEl0ZW0ge1xuICAvKipcbiAgICogQSBwZW5kaW5nIHNhZmV0eSBjaGVjayBmb3IgdGhlIGNvbXB1dGVyIGNhbGwuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIEFja25vd2xlZGdlZFNhZmV0eUNoZWNrIHtcbiAgICAvKipcbiAgICAgKiBUaGUgSUQgb2YgdGhlIHBlbmRpbmcgc2FmZXR5IGNoZWNrLlxuICAgICAqL1xuICAgIGlkOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgcGVuZGluZyBzYWZldHkgY2hlY2suXG4gICAgICovXG4gICAgY29kZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogRGV0YWlscyBhYm91dCB0aGUgcGVuZGluZyBzYWZldHkgY2hlY2suXG4gICAgICovXG4gICAgbWVzc2FnZTogc3RyaW5nO1xuICB9XG59XG5cbi8qKlxuICogQSBjb21wdXRlciBzY3JlZW5zaG90IGltYWdlIHVzZWQgd2l0aCB0aGUgY29tcHV0ZXIgdXNlIHRvb2wuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VDb21wdXRlclRvb2xDYWxsT3V0cHV0U2NyZWVuc2hvdCB7XG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgdGhlIGV2ZW50IHR5cGUuIEZvciBhIGNvbXB1dGVyIHNjcmVlbnNob3QsIHRoaXMgcHJvcGVydHkgaXMgYWx3YXlzIHNldFxuICAgKiB0byBgY29tcHV0ZXJfc2NyZWVuc2hvdGAuXG4gICAqL1xuICB0eXBlOiAnY29tcHV0ZXJfc2NyZWVuc2hvdCc7XG5cbiAgLyoqXG4gICAqIFRoZSBpZGVudGlmaWVyIG9mIGFuIHVwbG9hZGVkIGZpbGUgdGhhdCBjb250YWlucyB0aGUgc2NyZWVuc2hvdC5cbiAgICovXG4gIGZpbGVfaWQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBVUkwgb2YgdGhlIHNjcmVlbnNob3QgaW1hZ2UuXG4gICAqL1xuICBpbWFnZV91cmw/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogTXVsdGktbW9kYWwgaW5wdXQgYW5kIG91dHB1dCBjb250ZW50cy5cbiAqL1xuZXhwb3J0IHR5cGUgUmVzcG9uc2VDb250ZW50ID1cbiAgfCBSZXNwb25zZUlucHV0VGV4dFxuICB8IFJlc3BvbnNlSW5wdXRJbWFnZVxuICB8IFJlc3BvbnNlSW5wdXRGaWxlXG4gIHwgUmVzcG9uc2VPdXRwdXRUZXh0XG4gIHwgUmVzcG9uc2VPdXRwdXRSZWZ1c2FsO1xuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbiBhIG5ldyBjb250ZW50IHBhcnQgaXMgYWRkZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VDb250ZW50UGFydEFkZGVkRXZlbnQge1xuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBjb250ZW50IHBhcnQgdGhhdCB3YXMgYWRkZWQuXG4gICAqL1xuICBjb250ZW50X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgb3V0cHV0IGl0ZW0gdGhhdCB0aGUgY29udGVudCBwYXJ0IHdhcyBhZGRlZCB0by5cbiAgICovXG4gIGl0ZW1faWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBvdXRwdXQgaXRlbSB0aGF0IHRoZSBjb250ZW50IHBhcnQgd2FzIGFkZGVkIHRvLlxuICAgKi9cbiAgb3V0cHV0X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IHBhcnQgdGhhdCB3YXMgYWRkZWQuXG4gICAqL1xuICBwYXJ0OiBSZXNwb25zZU91dHB1dFRleHQgfCBSZXNwb25zZU91dHB1dFJlZnVzYWw7XG5cbiAgLyoqXG4gICAqIFRoZSBzZXF1ZW5jZSBudW1iZXIgb2YgdGhpcyBldmVudC5cbiAgICovXG4gIHNlcXVlbmNlX251bWJlcjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgZXZlbnQuIEFsd2F5cyBgcmVzcG9uc2UuY29udGVudF9wYXJ0LmFkZGVkYC5cbiAgICovXG4gIHR5cGU6ICdyZXNwb25zZS5jb250ZW50X3BhcnQuYWRkZWQnO1xufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbiBhIGNvbnRlbnQgcGFydCBpcyBkb25lLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlQ29udGVudFBhcnREb25lRXZlbnQge1xuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBjb250ZW50IHBhcnQgdGhhdCBpcyBkb25lLlxuICAgKi9cbiAgY29udGVudF9pbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIG91dHB1dCBpdGVtIHRoYXQgdGhlIGNvbnRlbnQgcGFydCB3YXMgYWRkZWQgdG8uXG4gICAqL1xuICBpdGVtX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgb3V0cHV0IGl0ZW0gdGhhdCB0aGUgY29udGVudCBwYXJ0IHdhcyBhZGRlZCB0by5cbiAgICovXG4gIG91dHB1dF9pbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBwYXJ0IHRoYXQgaXMgZG9uZS5cbiAgICovXG4gIHBhcnQ6IFJlc3BvbnNlT3V0cHV0VGV4dCB8IFJlc3BvbnNlT3V0cHV0UmVmdXNhbDtcblxuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGlzIGV2ZW50LlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC4gQWx3YXlzIGByZXNwb25zZS5jb250ZW50X3BhcnQuZG9uZWAuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2UuY29udGVudF9wYXJ0LmRvbmUnO1xufVxuXG4vKipcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIGEgcmVzcG9uc2UgaXMgY3JlYXRlZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUNyZWF0ZWRFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgcmVzcG9uc2UgdGhhdCB3YXMgY3JlYXRlZC5cbiAgICovXG4gIHJlc3BvbnNlOiBSZXNwb25zZTtcblxuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBmb3IgdGhpcyBldmVudC5cbiAgICovXG4gIHNlcXVlbmNlX251bWJlcjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgZXZlbnQuIEFsd2F5cyBgcmVzcG9uc2UuY3JlYXRlZGAuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2UuY3JlYXRlZCc7XG59XG5cbi8qKlxuICogQW4gZXJyb3Igb2JqZWN0IHJldHVybmVkIHdoZW4gdGhlIG1vZGVsIGZhaWxzIHRvIGdlbmVyYXRlIGEgUmVzcG9uc2UuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VFcnJvciB7XG4gIC8qKlxuICAgKiBUaGUgZXJyb3IgY29kZSBmb3IgdGhlIHJlc3BvbnNlLlxuICAgKi9cbiAgY29kZTpcbiAgICB8ICdzZXJ2ZXJfZXJyb3InXG4gICAgfCAncmF0ZV9saW1pdF9leGNlZWRlZCdcbiAgICB8ICdpbnZhbGlkX3Byb21wdCdcbiAgICB8ICd2ZWN0b3Jfc3RvcmVfdGltZW91dCdcbiAgICB8ICdpbnZhbGlkX2ltYWdlJ1xuICAgIHwgJ2ludmFsaWRfaW1hZ2VfZm9ybWF0J1xuICAgIHwgJ2ludmFsaWRfYmFzZTY0X2ltYWdlJ1xuICAgIHwgJ2ludmFsaWRfaW1hZ2VfdXJsJ1xuICAgIHwgJ2ltYWdlX3Rvb19sYXJnZSdcbiAgICB8ICdpbWFnZV90b29fc21hbGwnXG4gICAgfCAnaW1hZ2VfcGFyc2VfZXJyb3InXG4gICAgfCAnaW1hZ2VfY29udGVudF9wb2xpY3lfdmlvbGF0aW9uJ1xuICAgIHwgJ2ludmFsaWRfaW1hZ2VfbW9kZSdcbiAgICB8ICdpbWFnZV9maWxlX3Rvb19sYXJnZSdcbiAgICB8ICd1bnN1cHBvcnRlZF9pbWFnZV9tZWRpYV90eXBlJ1xuICAgIHwgJ2VtcHR5X2ltYWdlX2ZpbGUnXG4gICAgfCAnZmFpbGVkX3RvX2Rvd25sb2FkX2ltYWdlJ1xuICAgIHwgJ2ltYWdlX2ZpbGVfbm90X2ZvdW5kJztcblxuICAvKipcbiAgICogQSBodW1hbi1yZWFkYWJsZSBkZXNjcmlwdGlvbiBvZiB0aGUgZXJyb3IuXG4gICAqL1xuICBtZXNzYWdlOiBzdHJpbmc7XG59XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuIGFuIGVycm9yIG9jY3Vycy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUVycm9yRXZlbnQge1xuICAvKipcbiAgICogVGhlIGVycm9yIGNvZGUuXG4gICAqL1xuICBjb2RlOiBzdHJpbmcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgZXJyb3IgbWVzc2FnZS5cbiAgICovXG4gIG1lc3NhZ2U6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGVycm9yIHBhcmFtZXRlci5cbiAgICovXG4gIHBhcmFtOiBzdHJpbmcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgc2VxdWVuY2UgbnVtYmVyIG9mIHRoaXMgZXZlbnQuXG4gICAqL1xuICBzZXF1ZW5jZV9udW1iZXI6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGV2ZW50LiBBbHdheXMgYGVycm9yYC5cbiAgICovXG4gIHR5cGU6ICdlcnJvcic7XG59XG5cbi8qKlxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gYSByZXNwb25zZSBmYWlscy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUZhaWxlZEV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSByZXNwb25zZSB0aGF0IGZhaWxlZC5cbiAgICovXG4gIHJlc3BvbnNlOiBSZXNwb25zZTtcblxuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGlzIGV2ZW50LlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC4gQWx3YXlzIGByZXNwb25zZS5mYWlsZWRgLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLmZhaWxlZCc7XG59XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuIGEgZmlsZSBzZWFyY2ggY2FsbCBpcyBjb21wbGV0ZWQgKHJlc3VsdHMgZm91bmQpLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlRmlsZVNlYXJjaENhbGxDb21wbGV0ZWRFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIG91dHB1dCBpdGVtIHRoYXQgdGhlIGZpbGUgc2VhcmNoIGNhbGwgaXMgaW5pdGlhdGVkLlxuICAgKi9cbiAgaXRlbV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIG91dHB1dCBpdGVtIHRoYXQgdGhlIGZpbGUgc2VhcmNoIGNhbGwgaXMgaW5pdGlhdGVkLlxuICAgKi9cbiAgb3V0cHV0X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBzZXF1ZW5jZSBudW1iZXIgb2YgdGhpcyBldmVudC5cbiAgICovXG4gIHNlcXVlbmNlX251bWJlcjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgZXZlbnQuIEFsd2F5cyBgcmVzcG9uc2UuZmlsZV9zZWFyY2hfY2FsbC5jb21wbGV0ZWRgLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLmZpbGVfc2VhcmNoX2NhbGwuY29tcGxldGVkJztcbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW4gYSBmaWxlIHNlYXJjaCBjYWxsIGlzIGluaXRpYXRlZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUZpbGVTZWFyY2hDYWxsSW5Qcm9ncmVzc0V2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgb3V0cHV0IGl0ZW0gdGhhdCB0aGUgZmlsZSBzZWFyY2ggY2FsbCBpcyBpbml0aWF0ZWQuXG4gICAqL1xuICBpdGVtX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgb3V0cHV0IGl0ZW0gdGhhdCB0aGUgZmlsZSBzZWFyY2ggY2FsbCBpcyBpbml0aWF0ZWQuXG4gICAqL1xuICBvdXRwdXRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGlzIGV2ZW50LlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC4gQWx3YXlzIGByZXNwb25zZS5maWxlX3NlYXJjaF9jYWxsLmluX3Byb2dyZXNzYC5cbiAgICovXG4gIHR5cGU6ICdyZXNwb25zZS5maWxlX3NlYXJjaF9jYWxsLmluX3Byb2dyZXNzJztcbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW4gYSBmaWxlIHNlYXJjaCBpcyBjdXJyZW50bHkgc2VhcmNoaW5nLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlRmlsZVNlYXJjaENhbGxTZWFyY2hpbmdFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIG91dHB1dCBpdGVtIHRoYXQgdGhlIGZpbGUgc2VhcmNoIGNhbGwgaXMgaW5pdGlhdGVkLlxuICAgKi9cbiAgaXRlbV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIG91dHB1dCBpdGVtIHRoYXQgdGhlIGZpbGUgc2VhcmNoIGNhbGwgaXMgc2VhcmNoaW5nLlxuICAgKi9cbiAgb3V0cHV0X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBzZXF1ZW5jZSBudW1iZXIgb2YgdGhpcyBldmVudC5cbiAgICovXG4gIHNlcXVlbmNlX251bWJlcjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgZXZlbnQuIEFsd2F5cyBgcmVzcG9uc2UuZmlsZV9zZWFyY2hfY2FsbC5zZWFyY2hpbmdgLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLmZpbGVfc2VhcmNoX2NhbGwuc2VhcmNoaW5nJztcbn1cblxuLyoqXG4gKiBUaGUgcmVzdWx0cyBvZiBhIGZpbGUgc2VhcmNoIHRvb2wgY2FsbC4gU2VlIHRoZVxuICogW2ZpbGUgc2VhcmNoIGd1aWRlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvdG9vbHMtZmlsZS1zZWFyY2gpXG4gKiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUZpbGVTZWFyY2hUb29sQ2FsbCB7XG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBmaWxlIHNlYXJjaCB0b29sIGNhbGwuXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgcXVlcmllcyB1c2VkIHRvIHNlYXJjaCBmb3IgZmlsZXMuXG4gICAqL1xuICBxdWVyaWVzOiBBcnJheTxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBUaGUgc3RhdHVzIG9mIHRoZSBmaWxlIHNlYXJjaCB0b29sIGNhbGwuIE9uZSBvZiBgaW5fcHJvZ3Jlc3NgLCBgc2VhcmNoaW5nYCxcbiAgICogYGluY29tcGxldGVgIG9yIGBmYWlsZWRgLFxuICAgKi9cbiAgc3RhdHVzOiAnaW5fcHJvZ3Jlc3MnIHwgJ3NlYXJjaGluZycgfCAnY29tcGxldGVkJyB8ICdpbmNvbXBsZXRlJyB8ICdmYWlsZWQnO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgZmlsZSBzZWFyY2ggdG9vbCBjYWxsLiBBbHdheXMgYGZpbGVfc2VhcmNoX2NhbGxgLlxuICAgKi9cbiAgdHlwZTogJ2ZpbGVfc2VhcmNoX2NhbGwnO1xuXG4gIC8qKlxuICAgKiBUaGUgcmVzdWx0cyBvZiB0aGUgZmlsZSBzZWFyY2ggdG9vbCBjYWxsLlxuICAgKi9cbiAgcmVzdWx0cz86IEFycmF5PFJlc3BvbnNlRmlsZVNlYXJjaFRvb2xDYWxsLlJlc3VsdD4gfCBudWxsO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFJlc3BvbnNlRmlsZVNlYXJjaFRvb2xDYWxsIHtcbiAgZXhwb3J0IGludGVyZmFjZSBSZXN1bHQge1xuICAgIC8qKlxuICAgICAqIFNldCBvZiAxNiBrZXktdmFsdWUgcGFpcnMgdGhhdCBjYW4gYmUgYXR0YWNoZWQgdG8gYW4gb2JqZWN0LiBUaGlzIGNhbiBiZSB1c2VmdWxcbiAgICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdCwgYW5kXG4gICAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtXG4gICAgICogbGVuZ3RoIG9mIDY0IGNoYXJhY3RlcnMuIFZhbHVlcyBhcmUgc3RyaW5ncyB3aXRoIGEgbWF4aW11bSBsZW5ndGggb2YgNTEyXG4gICAgICogY2hhcmFjdGVycywgYm9vbGVhbnMsIG9yIG51bWJlcnMuXG4gICAgICovXG4gICAgYXR0cmlidXRlcz86IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4+IHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIGZpbGUuXG4gICAgICovXG4gICAgZmlsZV9pZD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBmaWxlLlxuICAgICAqL1xuICAgIGZpbGVuYW1lPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJlbGV2YW5jZSBzY29yZSBvZiB0aGUgZmlsZSAtIGEgdmFsdWUgYmV0d2VlbiAwIGFuZCAxLlxuICAgICAqL1xuICAgIHNjb3JlPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgdGhhdCB3YXMgcmV0cmlldmVkIGZyb20gdGhlIGZpbGUuXG4gICAgICovXG4gICAgdGV4dD86IHN0cmluZztcbiAgfVxufVxuXG4vKipcbiAqIEFuIG9iamVjdCBzcGVjaWZ5aW5nIHRoZSBmb3JtYXQgdGhhdCB0aGUgbW9kZWwgbXVzdCBvdXRwdXQuXG4gKlxuICogQ29uZmlndXJpbmcgYHsgXCJ0eXBlXCI6IFwianNvbl9zY2hlbWFcIiB9YCBlbmFibGVzIFN0cnVjdHVyZWQgT3V0cHV0cywgd2hpY2hcbiAqIGVuc3VyZXMgdGhlIG1vZGVsIHdpbGwgbWF0Y2ggeW91ciBzdXBwbGllZCBKU09OIHNjaGVtYS4gTGVhcm4gbW9yZSBpbiB0aGVcbiAqIFtTdHJ1Y3R1cmVkIE91dHB1dHMgZ3VpZGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9zdHJ1Y3R1cmVkLW91dHB1dHMpLlxuICpcbiAqIFRoZSBkZWZhdWx0IGZvcm1hdCBpcyBgeyBcInR5cGVcIjogXCJ0ZXh0XCIgfWAgd2l0aCBubyBhZGRpdGlvbmFsIG9wdGlvbnMuXG4gKlxuICogKipOb3QgcmVjb21tZW5kZWQgZm9yIGdwdC00byBhbmQgbmV3ZXIgbW9kZWxzOioqXG4gKlxuICogU2V0dGluZyB0byBgeyBcInR5cGVcIjogXCJqc29uX29iamVjdFwiIH1gIGVuYWJsZXMgdGhlIG9sZGVyIEpTT04gbW9kZSwgd2hpY2hcbiAqIGVuc3VyZXMgdGhlIG1lc3NhZ2UgdGhlIG1vZGVsIGdlbmVyYXRlcyBpcyB2YWxpZCBKU09OLiBVc2luZyBganNvbl9zY2hlbWFgIGlzXG4gKiBwcmVmZXJyZWQgZm9yIG1vZGVscyB0aGF0IHN1cHBvcnQgaXQuXG4gKi9cbmV4cG9ydCB0eXBlIFJlc3BvbnNlRm9ybWF0VGV4dENvbmZpZyA9XG4gIHwgU2hhcmVkLlJlc3BvbnNlRm9ybWF0VGV4dFxuICB8IFJlc3BvbnNlRm9ybWF0VGV4dEpTT05TY2hlbWFDb25maWdcbiAgfCBTaGFyZWQuUmVzcG9uc2VGb3JtYXRKU09OT2JqZWN0O1xuXG4vKipcbiAqIEpTT04gU2NoZW1hIHJlc3BvbnNlIGZvcm1hdC4gVXNlZCB0byBnZW5lcmF0ZSBzdHJ1Y3R1cmVkIEpTT04gcmVzcG9uc2VzLiBMZWFyblxuICogbW9yZSBhYm91dFxuICogW1N0cnVjdHVyZWQgT3V0cHV0c10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3N0cnVjdHVyZWQtb3V0cHV0cykuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VGb3JtYXRUZXh0SlNPTlNjaGVtYUNvbmZpZyB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgcmVzcG9uc2UgZm9ybWF0LiBNdXN0IGJlIGEteiwgQS1aLCAwLTksIG9yIGNvbnRhaW4gdW5kZXJzY29yZXNcbiAgICogYW5kIGRhc2hlcywgd2l0aCBhIG1heGltdW0gbGVuZ3RoIG9mIDY0LlxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgc2NoZW1hIGZvciB0aGUgcmVzcG9uc2UgZm9ybWF0LCBkZXNjcmliZWQgYXMgYSBKU09OIFNjaGVtYSBvYmplY3QuIExlYXJuIGhvd1xuICAgKiB0byBidWlsZCBKU09OIHNjaGVtYXMgW2hlcmVdKGh0dHBzOi8vanNvbi1zY2hlbWEub3JnLykuXG4gICAqL1xuICBzY2hlbWE6IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiByZXNwb25zZSBmb3JtYXQgYmVpbmcgZGVmaW5lZC4gQWx3YXlzIGBqc29uX3NjaGVtYWAuXG4gICAqL1xuICB0eXBlOiAnanNvbl9zY2hlbWEnO1xuXG4gIC8qKlxuICAgKiBBIGRlc2NyaXB0aW9uIG9mIHdoYXQgdGhlIHJlc3BvbnNlIGZvcm1hdCBpcyBmb3IsIHVzZWQgYnkgdGhlIG1vZGVsIHRvIGRldGVybWluZVxuICAgKiBob3cgdG8gcmVzcG9uZCBpbiB0aGUgZm9ybWF0LlxuICAgKi9cbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIHN0cmljdCBzY2hlbWEgYWRoZXJlbmNlIHdoZW4gZ2VuZXJhdGluZyB0aGUgb3V0cHV0LiBJZiBzZXQgdG9cbiAgICogdHJ1ZSwgdGhlIG1vZGVsIHdpbGwgYWx3YXlzIGZvbGxvdyB0aGUgZXhhY3Qgc2NoZW1hIGRlZmluZWQgaW4gdGhlIGBzY2hlbWFgXG4gICAqIGZpZWxkLiBPbmx5IGEgc3Vic2V0IG9mIEpTT04gU2NoZW1hIGlzIHN1cHBvcnRlZCB3aGVuIGBzdHJpY3RgIGlzIGB0cnVlYC4gVG9cbiAgICogbGVhcm4gbW9yZSwgcmVhZCB0aGVcbiAgICogW1N0cnVjdHVyZWQgT3V0cHV0cyBndWlkZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3N0cnVjdHVyZWQtb3V0cHV0cykuXG4gICAqL1xuICBzdHJpY3Q/OiBib29sZWFuIHwgbnVsbDtcbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdGhlcmUgaXMgYSBwYXJ0aWFsIGZ1bmN0aW9uLWNhbGwgYXJndW1lbnRzIGRlbHRhLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlRnVuY3Rpb25DYWxsQXJndW1lbnRzRGVsdGFFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgZnVuY3Rpb24tY2FsbCBhcmd1bWVudHMgZGVsdGEgdGhhdCBpcyBhZGRlZC5cbiAgICovXG4gIGRlbHRhOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgb3V0cHV0IGl0ZW0gdGhhdCB0aGUgZnVuY3Rpb24tY2FsbCBhcmd1bWVudHMgZGVsdGEgaXMgYWRkZWQgdG8uXG4gICAqL1xuICBpdGVtX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgb3V0cHV0IGl0ZW0gdGhhdCB0aGUgZnVuY3Rpb24tY2FsbCBhcmd1bWVudHMgZGVsdGEgaXMgYWRkZWQgdG8uXG4gICAqL1xuICBvdXRwdXRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGlzIGV2ZW50LlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC4gQWx3YXlzIGByZXNwb25zZS5mdW5jdGlvbl9jYWxsX2FyZ3VtZW50cy5kZWx0YWAuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2UuZnVuY3Rpb25fY2FsbF9hcmd1bWVudHMuZGVsdGEnO1xufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbiBmdW5jdGlvbi1jYWxsIGFyZ3VtZW50cyBhcmUgZmluYWxpemVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlRnVuY3Rpb25DYWxsQXJndW1lbnRzRG9uZUV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBmdW5jdGlvbi1jYWxsIGFyZ3VtZW50cy5cbiAgICovXG4gIGFyZ3VtZW50czogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIGl0ZW0uXG4gICAqL1xuICBpdGVtX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgb3V0cHV0IGl0ZW0uXG4gICAqL1xuICBvdXRwdXRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGlzIGV2ZW50LlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgdHlwZTogJ3Jlc3BvbnNlLmZ1bmN0aW9uX2NhbGxfYXJndW1lbnRzLmRvbmUnO1xufVxuXG4vKipcbiAqIEEgdG9vbCBjYWxsIHRvIHJ1biBhIGZ1bmN0aW9uLiBTZWUgdGhlXG4gKiBbZnVuY3Rpb24gY2FsbGluZyBndWlkZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL2Z1bmN0aW9uLWNhbGxpbmcpXG4gKiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUZ1bmN0aW9uVG9vbENhbGwge1xuICAvKipcbiAgICogQSBKU09OIHN0cmluZyBvZiB0aGUgYXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIGZ1bmN0aW9uLlxuICAgKi9cbiAgYXJndW1lbnRzOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIGZ1bmN0aW9uIHRvb2wgY2FsbCBnZW5lcmF0ZWQgYnkgdGhlIG1vZGVsLlxuICAgKi9cbiAgY2FsbF9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24gdG8gcnVuLlxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgZnVuY3Rpb24gdG9vbCBjYWxsLiBBbHdheXMgYGZ1bmN0aW9uX2NhbGxgLlxuICAgKi9cbiAgdHlwZTogJ2Z1bmN0aW9uX2NhbGwnO1xuXG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBmdW5jdGlvbiB0b29sIGNhbGwuXG4gICAqL1xuICBpZD86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHN0YXR1cyBvZiB0aGUgaXRlbS4gT25lIG9mIGBpbl9wcm9ncmVzc2AsIGBjb21wbGV0ZWRgLCBvciBgaW5jb21wbGV0ZWAuXG4gICAqIFBvcHVsYXRlZCB3aGVuIGl0ZW1zIGFyZSByZXR1cm5lZCB2aWEgQVBJLlxuICAgKi9cbiAgc3RhdHVzPzogJ2luX3Byb2dyZXNzJyB8ICdjb21wbGV0ZWQnIHwgJ2luY29tcGxldGUnO1xufVxuXG4vKipcbiAqIEEgdG9vbCBjYWxsIHRvIHJ1biBhIGZ1bmN0aW9uLiBTZWUgdGhlXG4gKiBbZnVuY3Rpb24gY2FsbGluZyBndWlkZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL2Z1bmN0aW9uLWNhbGxpbmcpXG4gKiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUZ1bmN0aW9uVG9vbENhbGxJdGVtIGV4dGVuZHMgUmVzcG9uc2VGdW5jdGlvblRvb2xDYWxsIHtcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIGZ1bmN0aW9uIHRvb2wgY2FsbC5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VGdW5jdGlvblRvb2xDYWxsT3V0cHV0SXRlbSB7XG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBmdW5jdGlvbiBjYWxsIHRvb2wgb3V0cHV0LlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgZnVuY3Rpb24gdG9vbCBjYWxsIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwuXG4gICAqL1xuICBjYWxsX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgSlNPTiBzdHJpbmcgb2YgdGhlIG91dHB1dCBvZiB0aGUgZnVuY3Rpb24gdG9vbCBjYWxsLlxuICAgKi9cbiAgb3V0cHV0OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBmdW5jdGlvbiB0b29sIGNhbGwgb3V0cHV0LiBBbHdheXMgYGZ1bmN0aW9uX2NhbGxfb3V0cHV0YC5cbiAgICovXG4gIHR5cGU6ICdmdW5jdGlvbl9jYWxsX291dHB1dCc7XG5cbiAgLyoqXG4gICAqIFRoZSBzdGF0dXMgb2YgdGhlIGl0ZW0uIE9uZSBvZiBgaW5fcHJvZ3Jlc3NgLCBgY29tcGxldGVkYCwgb3IgYGluY29tcGxldGVgLlxuICAgKiBQb3B1bGF0ZWQgd2hlbiBpdGVtcyBhcmUgcmV0dXJuZWQgdmlhIEFQSS5cbiAgICovXG4gIHN0YXR1cz86ICdpbl9wcm9ncmVzcycgfCAnY29tcGxldGVkJyB8ICdpbmNvbXBsZXRlJztcbn1cblxuLyoqXG4gKiBUaGUgcmVzdWx0cyBvZiBhIHdlYiBzZWFyY2ggdG9vbCBjYWxsLiBTZWUgdGhlXG4gKiBbd2ViIHNlYXJjaCBndWlkZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3Rvb2xzLXdlYi1zZWFyY2gpIGZvclxuICogbW9yZSBpbmZvcm1hdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUZ1bmN0aW9uV2ViU2VhcmNoIHtcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHdlYiBzZWFyY2ggdG9vbCBjYWxsLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHN0YXR1cyBvZiB0aGUgd2ViIHNlYXJjaCB0b29sIGNhbGwuXG4gICAqL1xuICBzdGF0dXM6ICdpbl9wcm9ncmVzcycgfCAnc2VhcmNoaW5nJyB8ICdjb21wbGV0ZWQnIHwgJ2ZhaWxlZCc7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSB3ZWIgc2VhcmNoIHRvb2wgY2FsbC4gQWx3YXlzIGB3ZWJfc2VhcmNoX2NhbGxgLlxuICAgKi9cbiAgdHlwZTogJ3dlYl9zZWFyY2hfY2FsbCc7XG59XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuIGFuIGltYWdlIGdlbmVyYXRpb24gdG9vbCBjYWxsIGhhcyBjb21wbGV0ZWQgYW5kIHRoZSBmaW5hbCBpbWFnZSBpc1xuICogYXZhaWxhYmxlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlSW1hZ2VHZW5DYWxsQ29tcGxldGVkRXZlbnQge1xuICAvKipcbiAgICogVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBpbWFnZSBnZW5lcmF0aW9uIGl0ZW0gYmVpbmcgcHJvY2Vzc2VkLlxuICAgKi9cbiAgaXRlbV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIG91dHB1dCBpdGVtIGluIHRoZSByZXNwb25zZSdzIG91dHB1dCBhcnJheS5cbiAgICovXG4gIG91dHB1dF9pbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgc2VxdWVuY2UgbnVtYmVyIG9mIHRoaXMgZXZlbnQuXG4gICAqL1xuICBzZXF1ZW5jZV9udW1iZXI6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGV2ZW50LiBBbHdheXMgJ3Jlc3BvbnNlLmltYWdlX2dlbmVyYXRpb25fY2FsbC5jb21wbGV0ZWQnLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLmltYWdlX2dlbmVyYXRpb25fY2FsbC5jb21wbGV0ZWQnO1xufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbiBhbiBpbWFnZSBnZW5lcmF0aW9uIHRvb2wgY2FsbCBpcyBhY3RpdmVseSBnZW5lcmF0aW5nIGFuIGltYWdlXG4gKiAoaW50ZXJtZWRpYXRlIHN0YXRlKS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUltYWdlR2VuQ2FsbEdlbmVyYXRpbmdFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGltYWdlIGdlbmVyYXRpb24gaXRlbSBiZWluZyBwcm9jZXNzZWQuXG4gICAqL1xuICBpdGVtX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgb3V0cHV0IGl0ZW0gaW4gdGhlIHJlc3BvbnNlJ3Mgb3V0cHV0IGFycmF5LlxuICAgKi9cbiAgb3V0cHV0X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBzZXF1ZW5jZSBudW1iZXIgb2YgdGhlIGltYWdlIGdlbmVyYXRpb24gaXRlbSBiZWluZyBwcm9jZXNzZWQuXG4gICAqL1xuICBzZXF1ZW5jZV9udW1iZXI6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGV2ZW50LiBBbHdheXMgJ3Jlc3BvbnNlLmltYWdlX2dlbmVyYXRpb25fY2FsbC5nZW5lcmF0aW5nJy5cbiAgICovXG4gIHR5cGU6ICdyZXNwb25zZS5pbWFnZV9nZW5lcmF0aW9uX2NhbGwuZ2VuZXJhdGluZyc7XG59XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuIGFuIGltYWdlIGdlbmVyYXRpb24gdG9vbCBjYWxsIGlzIGluIHByb2dyZXNzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlSW1hZ2VHZW5DYWxsSW5Qcm9ncmVzc0V2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgaW1hZ2UgZ2VuZXJhdGlvbiBpdGVtIGJlaW5nIHByb2Nlc3NlZC5cbiAgICovXG4gIGl0ZW1faWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBvdXRwdXQgaXRlbSBpbiB0aGUgcmVzcG9uc2UncyBvdXRwdXQgYXJyYXkuXG4gICAqL1xuICBvdXRwdXRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGUgaW1hZ2UgZ2VuZXJhdGlvbiBpdGVtIGJlaW5nIHByb2Nlc3NlZC5cbiAgICovXG4gIHNlcXVlbmNlX251bWJlcjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgZXZlbnQuIEFsd2F5cyAncmVzcG9uc2UuaW1hZ2VfZ2VuZXJhdGlvbl9jYWxsLmluX3Byb2dyZXNzJy5cbiAgICovXG4gIHR5cGU6ICdyZXNwb25zZS5pbWFnZV9nZW5lcmF0aW9uX2NhbGwuaW5fcHJvZ3Jlc3MnO1xufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbiBhIHBhcnRpYWwgaW1hZ2UgaXMgYXZhaWxhYmxlIGR1cmluZyBpbWFnZSBnZW5lcmF0aW9uIHN0cmVhbWluZy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUltYWdlR2VuQ2FsbFBhcnRpYWxJbWFnZUV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgaW1hZ2UgZ2VuZXJhdGlvbiBpdGVtIGJlaW5nIHByb2Nlc3NlZC5cbiAgICovXG4gIGl0ZW1faWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBvdXRwdXQgaXRlbSBpbiB0aGUgcmVzcG9uc2UncyBvdXRwdXQgYXJyYXkuXG4gICAqL1xuICBvdXRwdXRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogQmFzZTY0LWVuY29kZWQgcGFydGlhbCBpbWFnZSBkYXRhLCBzdWl0YWJsZSBmb3IgcmVuZGVyaW5nIGFzIGFuIGltYWdlLlxuICAgKi9cbiAgcGFydGlhbF9pbWFnZV9iNjQ6IHN0cmluZztcblxuICAvKipcbiAgICogMC1iYXNlZCBpbmRleCBmb3IgdGhlIHBhcnRpYWwgaW1hZ2UgKGJhY2tlbmQgaXMgMS1iYXNlZCwgYnV0IHRoaXMgaXMgMC1iYXNlZCBmb3JcbiAgICogdGhlIHVzZXIpLlxuICAgKi9cbiAgcGFydGlhbF9pbWFnZV9pbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgc2VxdWVuY2UgbnVtYmVyIG9mIHRoZSBpbWFnZSBnZW5lcmF0aW9uIGl0ZW0gYmVpbmcgcHJvY2Vzc2VkLlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC4gQWx3YXlzICdyZXNwb25zZS5pbWFnZV9nZW5lcmF0aW9uX2NhbGwucGFydGlhbF9pbWFnZScuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2UuaW1hZ2VfZ2VuZXJhdGlvbl9jYWxsLnBhcnRpYWxfaW1hZ2UnO1xufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbiB0aGUgcmVzcG9uc2UgaXMgaW4gcHJvZ3Jlc3MuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VJblByb2dyZXNzRXZlbnQge1xuICAvKipcbiAgICogVGhlIHJlc3BvbnNlIHRoYXQgaXMgaW4gcHJvZ3Jlc3MuXG4gICAqL1xuICByZXNwb25zZTogUmVzcG9uc2U7XG5cbiAgLyoqXG4gICAqIFRoZSBzZXF1ZW5jZSBudW1iZXIgb2YgdGhpcyBldmVudC5cbiAgICovXG4gIHNlcXVlbmNlX251bWJlcjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgZXZlbnQuIEFsd2F5cyBgcmVzcG9uc2UuaW5fcHJvZ3Jlc3NgLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLmluX3Byb2dyZXNzJztcbn1cblxuLyoqXG4gKiBTcGVjaWZ5IGFkZGl0aW9uYWwgb3V0cHV0IGRhdGEgdG8gaW5jbHVkZSBpbiB0aGUgbW9kZWwgcmVzcG9uc2UuIEN1cnJlbnRseVxuICogc3VwcG9ydGVkIHZhbHVlcyBhcmU6XG4gKlxuICogLSBgZmlsZV9zZWFyY2hfY2FsbC5yZXN1bHRzYDogSW5jbHVkZSB0aGUgc2VhcmNoIHJlc3VsdHMgb2YgdGhlIGZpbGUgc2VhcmNoIHRvb2xcbiAqICAgY2FsbC5cbiAqIC0gYG1lc3NhZ2UuaW5wdXRfaW1hZ2UuaW1hZ2VfdXJsYDogSW5jbHVkZSBpbWFnZSB1cmxzIGZyb20gdGhlIGlucHV0IG1lc3NhZ2UuXG4gKiAtIGBjb21wdXRlcl9jYWxsX291dHB1dC5vdXRwdXQuaW1hZ2VfdXJsYDogSW5jbHVkZSBpbWFnZSB1cmxzIGZyb20gdGhlIGNvbXB1dGVyXG4gKiAgIGNhbGwgb3V0cHV0LlxuICogLSBgcmVhc29uaW5nLmVuY3J5cHRlZF9jb250ZW50YDogSW5jbHVkZXMgYW4gZW5jcnlwdGVkIHZlcnNpb24gb2YgcmVhc29uaW5nXG4gKiAgIHRva2VucyBpbiByZWFzb25pbmcgaXRlbSBvdXRwdXRzLiBUaGlzIGVuYWJsZXMgcmVhc29uaW5nIGl0ZW1zIHRvIGJlIHVzZWQgaW5cbiAqICAgbXVsdGktdHVybiBjb252ZXJzYXRpb25zIHdoZW4gdXNpbmcgdGhlIFJlc3BvbnNlcyBBUEkgc3RhdGVsZXNzbHkgKGxpa2Ugd2hlblxuICogICB0aGUgYHN0b3JlYCBwYXJhbWV0ZXIgaXMgc2V0IHRvIGBmYWxzZWAsIG9yIHdoZW4gYW4gb3JnYW5pemF0aW9uIGlzIGVucm9sbGVkXG4gKiAgIGluIHRoZSB6ZXJvIGRhdGEgcmV0ZW50aW9uIHByb2dyYW0pLlxuICovXG5leHBvcnQgdHlwZSBSZXNwb25zZUluY2x1ZGFibGUgPVxuICB8ICdmaWxlX3NlYXJjaF9jYWxsLnJlc3VsdHMnXG4gIHwgJ21lc3NhZ2UuaW5wdXRfaW1hZ2UuaW1hZ2VfdXJsJ1xuICB8ICdjb21wdXRlcl9jYWxsX291dHB1dC5vdXRwdXQuaW1hZ2VfdXJsJ1xuICB8ICdyZWFzb25pbmcuZW5jcnlwdGVkX2NvbnRlbnQnO1xuXG4vKipcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIGEgcmVzcG9uc2UgZmluaXNoZXMgYXMgaW5jb21wbGV0ZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUluY29tcGxldGVFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgcmVzcG9uc2UgdGhhdCB3YXMgaW5jb21wbGV0ZS5cbiAgICovXG4gIHJlc3BvbnNlOiBSZXNwb25zZTtcblxuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGlzIGV2ZW50LlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC4gQWx3YXlzIGByZXNwb25zZS5pbmNvbXBsZXRlYC5cbiAgICovXG4gIHR5cGU6ICdyZXNwb25zZS5pbmNvbXBsZXRlJztcbn1cblxuLyoqXG4gKiBBIGxpc3Qgb2Ygb25lIG9yIG1hbnkgaW5wdXQgaXRlbXMgdG8gdGhlIG1vZGVsLCBjb250YWluaW5nIGRpZmZlcmVudCBjb250ZW50XG4gKiB0eXBlcy5cbiAqL1xuZXhwb3J0IHR5cGUgUmVzcG9uc2VJbnB1dCA9IEFycmF5PFJlc3BvbnNlSW5wdXRJdGVtPjtcblxuLyoqXG4gKiBBbiBhdWRpbyBpbnB1dCB0byB0aGUgbW9kZWwuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VJbnB1dEF1ZGlvIHtcbiAgLyoqXG4gICAqIEJhc2U2NC1lbmNvZGVkIGF1ZGlvIGRhdGEuXG4gICAqL1xuICBkYXRhOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBmb3JtYXQgb2YgdGhlIGF1ZGlvIGRhdGEuIEN1cnJlbnRseSBzdXBwb3J0ZWQgZm9ybWF0cyBhcmUgYG1wM2AgYW5kIGB3YXZgLlxuICAgKi9cbiAgZm9ybWF0OiAnbXAzJyB8ICd3YXYnO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgaW5wdXQgaXRlbS4gQWx3YXlzIGBpbnB1dF9hdWRpb2AuXG4gICAqL1xuICB0eXBlOiAnaW5wdXRfYXVkaW8nO1xufVxuXG4vKipcbiAqIEEgdGV4dCBpbnB1dCB0byB0aGUgbW9kZWwuXG4gKi9cbmV4cG9ydCB0eXBlIFJlc3BvbnNlSW5wdXRDb250ZW50ID0gUmVzcG9uc2VJbnB1dFRleHQgfCBSZXNwb25zZUlucHV0SW1hZ2UgfCBSZXNwb25zZUlucHV0RmlsZTtcblxuLyoqXG4gKiBBIGZpbGUgaW5wdXQgdG8gdGhlIG1vZGVsLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlSW5wdXRGaWxlIHtcbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBpbnB1dCBpdGVtLiBBbHdheXMgYGlucHV0X2ZpbGVgLlxuICAgKi9cbiAgdHlwZTogJ2lucHV0X2ZpbGUnO1xuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgZmlsZSB0byBiZSBzZW50IHRvIHRoZSBtb2RlbC5cbiAgICovXG4gIGZpbGVfZGF0YT86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBmaWxlIHRvIGJlIHNlbnQgdG8gdGhlIG1vZGVsLlxuICAgKi9cbiAgZmlsZV9pZD86IHN0cmluZyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBmaWxlIHRvIGJlIHNlbnQgdG8gdGhlIG1vZGVsLlxuICAgKi9cbiAgZmlsZW5hbWU/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQW4gaW1hZ2UgaW5wdXQgdG8gdGhlIG1vZGVsLiBMZWFybiBhYm91dFxuICogW2ltYWdlIGlucHV0c10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3Zpc2lvbikuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VJbnB1dEltYWdlIHtcbiAgLyoqXG4gICAqIFRoZSBkZXRhaWwgbGV2ZWwgb2YgdGhlIGltYWdlIHRvIGJlIHNlbnQgdG8gdGhlIG1vZGVsLiBPbmUgb2YgYGhpZ2hgLCBgbG93YCwgb3JcbiAgICogYGF1dG9gLiBEZWZhdWx0cyB0byBgYXV0b2AuXG4gICAqL1xuICBkZXRhaWw6ICdsb3cnIHwgJ2hpZ2gnIHwgJ2F1dG8nO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgaW5wdXQgaXRlbS4gQWx3YXlzIGBpbnB1dF9pbWFnZWAuXG4gICAqL1xuICB0eXBlOiAnaW5wdXRfaW1hZ2UnO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIGZpbGUgdG8gYmUgc2VudCB0byB0aGUgbW9kZWwuXG4gICAqL1xuICBmaWxlX2lkPzogc3RyaW5nIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIFVSTCBvZiB0aGUgaW1hZ2UgdG8gYmUgc2VudCB0byB0aGUgbW9kZWwuIEEgZnVsbHkgcXVhbGlmaWVkIFVSTCBvciBiYXNlNjRcbiAgICogZW5jb2RlZCBpbWFnZSBpbiBhIGRhdGEgVVJMLlxuICAgKi9cbiAgaW1hZ2VfdXJsPzogc3RyaW5nIHwgbnVsbDtcbn1cblxuLyoqXG4gKiBBIG1lc3NhZ2UgaW5wdXQgdG8gdGhlIG1vZGVsIHdpdGggYSByb2xlIGluZGljYXRpbmcgaW5zdHJ1Y3Rpb24gZm9sbG93aW5nXG4gKiBoaWVyYXJjaHkuIEluc3RydWN0aW9ucyBnaXZlbiB3aXRoIHRoZSBgZGV2ZWxvcGVyYCBvciBgc3lzdGVtYCByb2xlIHRha2VcbiAqIHByZWNlZGVuY2Ugb3ZlciBpbnN0cnVjdGlvbnMgZ2l2ZW4gd2l0aCB0aGUgYHVzZXJgIHJvbGUuIE1lc3NhZ2VzIHdpdGggdGhlXG4gKiBgYXNzaXN0YW50YCByb2xlIGFyZSBwcmVzdW1lZCB0byBoYXZlIGJlZW4gZ2VuZXJhdGVkIGJ5IHRoZSBtb2RlbCBpbiBwcmV2aW91c1xuICogaW50ZXJhY3Rpb25zLlxuICovXG5leHBvcnQgdHlwZSBSZXNwb25zZUlucHV0SXRlbSA9XG4gIHwgRWFzeUlucHV0TWVzc2FnZVxuICB8IFJlc3BvbnNlSW5wdXRJdGVtLk1lc3NhZ2VcbiAgfCBSZXNwb25zZU91dHB1dE1lc3NhZ2VcbiAgfCBSZXNwb25zZUZpbGVTZWFyY2hUb29sQ2FsbFxuICB8IFJlc3BvbnNlQ29tcHV0ZXJUb29sQ2FsbFxuICB8IFJlc3BvbnNlSW5wdXRJdGVtLkNvbXB1dGVyQ2FsbE91dHB1dFxuICB8IFJlc3BvbnNlRnVuY3Rpb25XZWJTZWFyY2hcbiAgfCBSZXNwb25zZUZ1bmN0aW9uVG9vbENhbGxcbiAgfCBSZXNwb25zZUlucHV0SXRlbS5GdW5jdGlvbkNhbGxPdXRwdXRcbiAgfCBSZXNwb25zZVJlYXNvbmluZ0l0ZW1cbiAgfCBSZXNwb25zZUlucHV0SXRlbS5JbWFnZUdlbmVyYXRpb25DYWxsXG4gIHwgUmVzcG9uc2VDb2RlSW50ZXJwcmV0ZXJUb29sQ2FsbFxuICB8IFJlc3BvbnNlSW5wdXRJdGVtLkxvY2FsU2hlbGxDYWxsXG4gIHwgUmVzcG9uc2VJbnB1dEl0ZW0uTG9jYWxTaGVsbENhbGxPdXRwdXRcbiAgfCBSZXNwb25zZUlucHV0SXRlbS5NY3BMaXN0VG9vbHNcbiAgfCBSZXNwb25zZUlucHV0SXRlbS5NY3BBcHByb3ZhbFJlcXVlc3RcbiAgfCBSZXNwb25zZUlucHV0SXRlbS5NY3BBcHByb3ZhbFJlc3BvbnNlXG4gIHwgUmVzcG9uc2VJbnB1dEl0ZW0uTWNwQ2FsbFxuICB8IFJlc3BvbnNlSW5wdXRJdGVtLkl0ZW1SZWZlcmVuY2U7XG5cbmV4cG9ydCBuYW1lc3BhY2UgUmVzcG9uc2VJbnB1dEl0ZW0ge1xuICAvKipcbiAgICogQSBtZXNzYWdlIGlucHV0IHRvIHRoZSBtb2RlbCB3aXRoIGEgcm9sZSBpbmRpY2F0aW5nIGluc3RydWN0aW9uIGZvbGxvd2luZ1xuICAgKiBoaWVyYXJjaHkuIEluc3RydWN0aW9ucyBnaXZlbiB3aXRoIHRoZSBgZGV2ZWxvcGVyYCBvciBgc3lzdGVtYCByb2xlIHRha2VcbiAgICogcHJlY2VkZW5jZSBvdmVyIGluc3RydWN0aW9ucyBnaXZlbiB3aXRoIHRoZSBgdXNlcmAgcm9sZS5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZSB7XG4gICAgLyoqXG4gICAgICogQSBsaXN0IG9mIG9uZSBvciBtYW55IGlucHV0IGl0ZW1zIHRvIHRoZSBtb2RlbCwgY29udGFpbmluZyBkaWZmZXJlbnQgY29udGVudFxuICAgICAqIHR5cGVzLlxuICAgICAqL1xuICAgIGNvbnRlbnQ6IFJlc3BvbnNlc0FQSS5SZXNwb25zZUlucHV0TWVzc2FnZUNvbnRlbnRMaXN0O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJvbGUgb2YgdGhlIG1lc3NhZ2UgaW5wdXQuIE9uZSBvZiBgdXNlcmAsIGBzeXN0ZW1gLCBvciBgZGV2ZWxvcGVyYC5cbiAgICAgKi9cbiAgICByb2xlOiAndXNlcicgfCAnc3lzdGVtJyB8ICdkZXZlbG9wZXInO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHN0YXR1cyBvZiBpdGVtLiBPbmUgb2YgYGluX3Byb2dyZXNzYCwgYGNvbXBsZXRlZGAsIG9yIGBpbmNvbXBsZXRlYC5cbiAgICAgKiBQb3B1bGF0ZWQgd2hlbiBpdGVtcyBhcmUgcmV0dXJuZWQgdmlhIEFQSS5cbiAgICAgKi9cbiAgICBzdGF0dXM/OiAnaW5fcHJvZ3Jlc3MnIHwgJ2NvbXBsZXRlZCcgfCAnaW5jb21wbGV0ZSc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgbWVzc2FnZSBpbnB1dC4gQWx3YXlzIHNldCB0byBgbWVzc2FnZWAuXG4gICAgICovXG4gICAgdHlwZT86ICdtZXNzYWdlJztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgb3V0cHV0IG9mIGEgY29tcHV0ZXIgdG9vbCBjYWxsLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBDb21wdXRlckNhbGxPdXRwdXQge1xuICAgIC8qKlxuICAgICAqIFRoZSBJRCBvZiB0aGUgY29tcHV0ZXIgdG9vbCBjYWxsIHRoYXQgcHJvZHVjZWQgdGhlIG91dHB1dC5cbiAgICAgKi9cbiAgICBjYWxsX2lkOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBIGNvbXB1dGVyIHNjcmVlbnNob3QgaW1hZ2UgdXNlZCB3aXRoIHRoZSBjb21wdXRlciB1c2UgdG9vbC5cbiAgICAgKi9cbiAgICBvdXRwdXQ6IFJlc3BvbnNlc0FQSS5SZXNwb25zZUNvbXB1dGVyVG9vbENhbGxPdXRwdXRTY3JlZW5zaG90O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIGNvbXB1dGVyIHRvb2wgY2FsbCBvdXRwdXQuIEFsd2F5cyBgY29tcHV0ZXJfY2FsbF9vdXRwdXRgLlxuICAgICAqL1xuICAgIHR5cGU6ICdjb21wdXRlcl9jYWxsX291dHB1dCc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgSUQgb2YgdGhlIGNvbXB1dGVyIHRvb2wgY2FsbCBvdXRwdXQuXG4gICAgICovXG4gICAgaWQ/OiBzdHJpbmcgfCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNhZmV0eSBjaGVja3MgcmVwb3J0ZWQgYnkgdGhlIEFQSSB0aGF0IGhhdmUgYmVlbiBhY2tub3dsZWRnZWQgYnkgdGhlXG4gICAgICogZGV2ZWxvcGVyLlxuICAgICAqL1xuICAgIGFja25vd2xlZGdlZF9zYWZldHlfY2hlY2tzPzogQXJyYXk8Q29tcHV0ZXJDYWxsT3V0cHV0LkFja25vd2xlZGdlZFNhZmV0eUNoZWNrPiB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc3RhdHVzIG9mIHRoZSBtZXNzYWdlIGlucHV0LiBPbmUgb2YgYGluX3Byb2dyZXNzYCwgYGNvbXBsZXRlZGAsIG9yXG4gICAgICogYGluY29tcGxldGVgLiBQb3B1bGF0ZWQgd2hlbiBpbnB1dCBpdGVtcyBhcmUgcmV0dXJuZWQgdmlhIEFQSS5cbiAgICAgKi9cbiAgICBzdGF0dXM/OiAnaW5fcHJvZ3Jlc3MnIHwgJ2NvbXBsZXRlZCcgfCAnaW5jb21wbGV0ZScgfCBudWxsO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBDb21wdXRlckNhbGxPdXRwdXQge1xuICAgIC8qKlxuICAgICAqIEEgcGVuZGluZyBzYWZldHkgY2hlY2sgZm9yIHRoZSBjb21wdXRlciBjYWxsLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgQWNrbm93bGVkZ2VkU2FmZXR5Q2hlY2sge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgSUQgb2YgdGhlIHBlbmRpbmcgc2FmZXR5IGNoZWNrLlxuICAgICAgICovXG4gICAgICBpZDogc3RyaW5nO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSB0eXBlIG9mIHRoZSBwZW5kaW5nIHNhZmV0eSBjaGVjay5cbiAgICAgICAqL1xuICAgICAgY29kZT86IHN0cmluZyB8IG51bGw7XG5cbiAgICAgIC8qKlxuICAgICAgICogRGV0YWlscyBhYm91dCB0aGUgcGVuZGluZyBzYWZldHkgY2hlY2suXG4gICAgICAgKi9cbiAgICAgIG1lc3NhZ2U/OiBzdHJpbmcgfCBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgb3V0cHV0IG9mIGEgZnVuY3Rpb24gdG9vbCBjYWxsLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBGdW5jdGlvbkNhbGxPdXRwdXQge1xuICAgIC8qKlxuICAgICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIGZ1bmN0aW9uIHRvb2wgY2FsbCBnZW5lcmF0ZWQgYnkgdGhlIG1vZGVsLlxuICAgICAqL1xuICAgIGNhbGxfaWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEEgSlNPTiBzdHJpbmcgb2YgdGhlIG91dHB1dCBvZiB0aGUgZnVuY3Rpb24gdG9vbCBjYWxsLlxuICAgICAqL1xuICAgIG91dHB1dDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIGZ1bmN0aW9uIHRvb2wgY2FsbCBvdXRwdXQuIEFsd2F5cyBgZnVuY3Rpb25fY2FsbF9vdXRwdXRgLlxuICAgICAqL1xuICAgIHR5cGU6ICdmdW5jdGlvbl9jYWxsX291dHB1dCc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBmdW5jdGlvbiB0b29sIGNhbGwgb3V0cHV0LiBQb3B1bGF0ZWQgd2hlbiB0aGlzIGl0ZW0gaXNcbiAgICAgKiByZXR1cm5lZCB2aWEgQVBJLlxuICAgICAqL1xuICAgIGlkPzogc3RyaW5nIHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzdGF0dXMgb2YgdGhlIGl0ZW0uIE9uZSBvZiBgaW5fcHJvZ3Jlc3NgLCBgY29tcGxldGVkYCwgb3IgYGluY29tcGxldGVgLlxuICAgICAqIFBvcHVsYXRlZCB3aGVuIGl0ZW1zIGFyZSByZXR1cm5lZCB2aWEgQVBJLlxuICAgICAqL1xuICAgIHN0YXR1cz86ICdpbl9wcm9ncmVzcycgfCAnY29tcGxldGVkJyB8ICdpbmNvbXBsZXRlJyB8IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQW4gaW1hZ2UgZ2VuZXJhdGlvbiByZXF1ZXN0IG1hZGUgYnkgdGhlIG1vZGVsLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJbWFnZUdlbmVyYXRpb25DYWxsIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBpbWFnZSBnZW5lcmF0aW9uIGNhbGwuXG4gICAgICovXG4gICAgaWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBnZW5lcmF0ZWQgaW1hZ2UgZW5jb2RlZCBpbiBiYXNlNjQuXG4gICAgICovXG4gICAgcmVzdWx0OiBzdHJpbmcgfCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHN0YXR1cyBvZiB0aGUgaW1hZ2UgZ2VuZXJhdGlvbiBjYWxsLlxuICAgICAqL1xuICAgIHN0YXR1czogJ2luX3Byb2dyZXNzJyB8ICdjb21wbGV0ZWQnIHwgJ2dlbmVyYXRpbmcnIHwgJ2ZhaWxlZCc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgaW1hZ2UgZ2VuZXJhdGlvbiBjYWxsLiBBbHdheXMgYGltYWdlX2dlbmVyYXRpb25fY2FsbGAuXG4gICAgICovXG4gICAgdHlwZTogJ2ltYWdlX2dlbmVyYXRpb25fY2FsbCc7XG4gIH1cblxuICAvKipcbiAgICogQSB0b29sIGNhbGwgdG8gcnVuIGEgY29tbWFuZCBvbiB0aGUgbG9jYWwgc2hlbGwuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIExvY2FsU2hlbGxDYWxsIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBsb2NhbCBzaGVsbCBjYWxsLlxuICAgICAqL1xuICAgIGlkOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIGEgc2hlbGwgY29tbWFuZCBvbiB0aGUgc2VydmVyLlxuICAgICAqL1xuICAgIGFjdGlvbjogTG9jYWxTaGVsbENhbGwuQWN0aW9uO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgbG9jYWwgc2hlbGwgdG9vbCBjYWxsIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwuXG4gICAgICovXG4gICAgY2FsbF9pZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHN0YXR1cyBvZiB0aGUgbG9jYWwgc2hlbGwgY2FsbC5cbiAgICAgKi9cbiAgICBzdGF0dXM6ICdpbl9wcm9ncmVzcycgfCAnY29tcGxldGVkJyB8ICdpbmNvbXBsZXRlJztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBsb2NhbCBzaGVsbCBjYWxsLiBBbHdheXMgYGxvY2FsX3NoZWxsX2NhbGxgLlxuICAgICAqL1xuICAgIHR5cGU6ICdsb2NhbF9zaGVsbF9jYWxsJztcbiAgfVxuXG4gIGV4cG9ydCBuYW1lc3BhY2UgTG9jYWxTaGVsbENhbGwge1xuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgYSBzaGVsbCBjb21tYW5kIG9uIHRoZSBzZXJ2ZXIuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBBY3Rpb24ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgY29tbWFuZCB0byBydW4uXG4gICAgICAgKi9cbiAgICAgIGNvbW1hbmQ6IEFycmF5PHN0cmluZz47XG5cbiAgICAgIC8qKlxuICAgICAgICogRW52aXJvbm1lbnQgdmFyaWFibGVzIHRvIHNldCBmb3IgdGhlIGNvbW1hbmQuXG4gICAgICAgKi9cbiAgICAgIGVudjogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdHlwZSBvZiB0aGUgbG9jYWwgc2hlbGwgYWN0aW9uLiBBbHdheXMgYGV4ZWNgLlxuICAgICAgICovXG4gICAgICB0eXBlOiAnZXhlYyc7XG5cbiAgICAgIC8qKlxuICAgICAgICogT3B0aW9uYWwgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZSBjb21tYW5kLlxuICAgICAgICovXG4gICAgICB0aW1lb3V0X21zPzogbnVtYmVyIHwgbnVsbDtcblxuICAgICAgLyoqXG4gICAgICAgKiBPcHRpb25hbCB1c2VyIHRvIHJ1biB0aGUgY29tbWFuZCBhcy5cbiAgICAgICAqL1xuICAgICAgdXNlcj86IHN0cmluZyB8IG51bGw7XG5cbiAgICAgIC8qKlxuICAgICAgICogT3B0aW9uYWwgd29ya2luZyBkaXJlY3RvcnkgdG8gcnVuIHRoZSBjb21tYW5kIGluLlxuICAgICAgICovXG4gICAgICB3b3JraW5nX2RpcmVjdG9yeT86IHN0cmluZyB8IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBvdXRwdXQgb2YgYSBsb2NhbCBzaGVsbCB0b29sIGNhbGwuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIExvY2FsU2hlbGxDYWxsT3V0cHV0IHtcbiAgICAvKipcbiAgICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBsb2NhbCBzaGVsbCB0b29sIGNhbGwgZ2VuZXJhdGVkIGJ5IHRoZSBtb2RlbC5cbiAgICAgKi9cbiAgICBpZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQSBKU09OIHN0cmluZyBvZiB0aGUgb3V0cHV0IG9mIHRoZSBsb2NhbCBzaGVsbCB0b29sIGNhbGwuXG4gICAgICovXG4gICAgb3V0cHV0OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgbG9jYWwgc2hlbGwgdG9vbCBjYWxsIG91dHB1dC4gQWx3YXlzIGBsb2NhbF9zaGVsbF9jYWxsX291dHB1dGAuXG4gICAgICovXG4gICAgdHlwZTogJ2xvY2FsX3NoZWxsX2NhbGxfb3V0cHV0JztcblxuICAgIC8qKlxuICAgICAqIFRoZSBzdGF0dXMgb2YgdGhlIGl0ZW0uIE9uZSBvZiBgaW5fcHJvZ3Jlc3NgLCBgY29tcGxldGVkYCwgb3IgYGluY29tcGxldGVgLlxuICAgICAqL1xuICAgIHN0YXR1cz86ICdpbl9wcm9ncmVzcycgfCAnY29tcGxldGVkJyB8ICdpbmNvbXBsZXRlJyB8IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQSBsaXN0IG9mIHRvb2xzIGF2YWlsYWJsZSBvbiBhbiBNQ1Agc2VydmVyLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBNY3BMaXN0VG9vbHMge1xuICAgIC8qKlxuICAgICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIGxpc3QuXG4gICAgICovXG4gICAgaWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBsYWJlbCBvZiB0aGUgTUNQIHNlcnZlci5cbiAgICAgKi9cbiAgICBzZXJ2ZXJfbGFiZWw6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0b29scyBhdmFpbGFibGUgb24gdGhlIHNlcnZlci5cbiAgICAgKi9cbiAgICB0b29sczogQXJyYXk8TWNwTGlzdFRvb2xzLlRvb2w+O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIGl0ZW0uIEFsd2F5cyBgbWNwX2xpc3RfdG9vbHNgLlxuICAgICAqL1xuICAgIHR5cGU6ICdtY3BfbGlzdF90b29scyc7XG5cbiAgICAvKipcbiAgICAgKiBFcnJvciBtZXNzYWdlIGlmIHRoZSBzZXJ2ZXIgY291bGQgbm90IGxpc3QgdG9vbHMuXG4gICAgICovXG4gICAgZXJyb3I/OiBzdHJpbmcgfCBudWxsO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBNY3BMaXN0VG9vbHMge1xuICAgIC8qKlxuICAgICAqIEEgdG9vbCBhdmFpbGFibGUgb24gYW4gTUNQIHNlcnZlci5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIFRvb2wge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgSlNPTiBzY2hlbWEgZGVzY3JpYmluZyB0aGUgdG9vbCdzIGlucHV0LlxuICAgICAgICovXG4gICAgICBpbnB1dF9zY2hlbWE6IHVua25vd247XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIG5hbWUgb2YgdGhlIHRvb2wuXG4gICAgICAgKi9cbiAgICAgIG5hbWU6IHN0cmluZztcblxuICAgICAgLyoqXG4gICAgICAgKiBBZGRpdGlvbmFsIGFubm90YXRpb25zIGFib3V0IHRoZSB0b29sLlxuICAgICAgICovXG4gICAgICBhbm5vdGF0aW9ucz86IHVua25vd24gfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgdG9vbC5cbiAgICAgICAqL1xuICAgICAgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBIHJlcXVlc3QgZm9yIGh1bWFuIGFwcHJvdmFsIG9mIGEgdG9vbCBpbnZvY2F0aW9uLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBNY3BBcHByb3ZhbFJlcXVlc3Qge1xuICAgIC8qKlxuICAgICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIGFwcHJvdmFsIHJlcXVlc3QuXG4gICAgICovXG4gICAgaWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEEgSlNPTiBzdHJpbmcgb2YgYXJndW1lbnRzIGZvciB0aGUgdG9vbC5cbiAgICAgKi9cbiAgICBhcmd1bWVudHM6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSB0b29sIHRvIHJ1bi5cbiAgICAgKi9cbiAgICBuYW1lOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGFiZWwgb2YgdGhlIE1DUCBzZXJ2ZXIgbWFraW5nIHRoZSByZXF1ZXN0LlxuICAgICAqL1xuICAgIHNlcnZlcl9sYWJlbDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIGl0ZW0uIEFsd2F5cyBgbWNwX2FwcHJvdmFsX3JlcXVlc3RgLlxuICAgICAqL1xuICAgIHR5cGU6ICdtY3BfYXBwcm92YWxfcmVxdWVzdCc7XG4gIH1cblxuICAvKipcbiAgICogQSByZXNwb25zZSB0byBhbiBNQ1AgYXBwcm92YWwgcmVxdWVzdC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgTWNwQXBwcm92YWxSZXNwb25zZSB7XG4gICAgLyoqXG4gICAgICogVGhlIElEIG9mIHRoZSBhcHByb3ZhbCByZXF1ZXN0IGJlaW5nIGFuc3dlcmVkLlxuICAgICAqL1xuICAgIGFwcHJvdmFsX3JlcXVlc3RfaWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIHJlcXVlc3Qgd2FzIGFwcHJvdmVkLlxuICAgICAqL1xuICAgIGFwcHJvdmU6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgaXRlbS4gQWx3YXlzIGBtY3BfYXBwcm92YWxfcmVzcG9uc2VgLlxuICAgICAqL1xuICAgIHR5cGU6ICdtY3BfYXBwcm92YWxfcmVzcG9uc2UnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgYXBwcm92YWwgcmVzcG9uc2VcbiAgICAgKi9cbiAgICBpZD86IHN0cmluZyB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBPcHRpb25hbCByZWFzb24gZm9yIHRoZSBkZWNpc2lvbi5cbiAgICAgKi9cbiAgICByZWFzb24/OiBzdHJpbmcgfCBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuIGludm9jYXRpb24gb2YgYSB0b29sIG9uIGFuIE1DUCBzZXJ2ZXIuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIE1jcENhbGwge1xuICAgIC8qKlxuICAgICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHRvb2wgY2FsbC5cbiAgICAgKi9cbiAgICBpZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQSBKU09OIHN0cmluZyBvZiB0aGUgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgdG9vbC5cbiAgICAgKi9cbiAgICBhcmd1bWVudHM6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSB0b29sIHRoYXQgd2FzIHJ1bi5cbiAgICAgKi9cbiAgICBuYW1lOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGFiZWwgb2YgdGhlIE1DUCBzZXJ2ZXIgcnVubmluZyB0aGUgdG9vbC5cbiAgICAgKi9cbiAgICBzZXJ2ZXJfbGFiZWw6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBpdGVtLiBBbHdheXMgYG1jcF9jYWxsYC5cbiAgICAgKi9cbiAgICB0eXBlOiAnbWNwX2NhbGwnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGVycm9yIGZyb20gdGhlIHRvb2wgY2FsbCwgaWYgYW55LlxuICAgICAqL1xuICAgIGVycm9yPzogc3RyaW5nIHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvdXRwdXQgZnJvbSB0aGUgdG9vbCBjYWxsLlxuICAgICAqL1xuICAgIG91dHB1dD86IHN0cmluZyB8IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQW4gaW50ZXJuYWwgaWRlbnRpZmllciBmb3IgYW4gaXRlbSB0byByZWZlcmVuY2UuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIEl0ZW1SZWZlcmVuY2Uge1xuICAgIC8qKlxuICAgICAqIFRoZSBJRCBvZiB0aGUgaXRlbSB0byByZWZlcmVuY2UuXG4gICAgICovXG4gICAgaWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIGl0ZW0gdG8gcmVmZXJlbmNlLiBBbHdheXMgYGl0ZW1fcmVmZXJlbmNlYC5cbiAgICAgKi9cbiAgICB0eXBlPzogJ2l0ZW1fcmVmZXJlbmNlJyB8IG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBBIGxpc3Qgb2Ygb25lIG9yIG1hbnkgaW5wdXQgaXRlbXMgdG8gdGhlIG1vZGVsLCBjb250YWluaW5nIGRpZmZlcmVudCBjb250ZW50XG4gKiB0eXBlcy5cbiAqL1xuZXhwb3J0IHR5cGUgUmVzcG9uc2VJbnB1dE1lc3NhZ2VDb250ZW50TGlzdCA9IEFycmF5PFJlc3BvbnNlSW5wdXRDb250ZW50PjtcblxuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUlucHV0TWVzc2FnZUl0ZW0ge1xuICAvKipcbiAgICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgbWVzc2FnZSBpbnB1dC5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgbGlzdCBvZiBvbmUgb3IgbWFueSBpbnB1dCBpdGVtcyB0byB0aGUgbW9kZWwsIGNvbnRhaW5pbmcgZGlmZmVyZW50IGNvbnRlbnRcbiAgICogdHlwZXMuXG4gICAqL1xuICBjb250ZW50OiBSZXNwb25zZUlucHV0TWVzc2FnZUNvbnRlbnRMaXN0O1xuXG4gIC8qKlxuICAgKiBUaGUgcm9sZSBvZiB0aGUgbWVzc2FnZSBpbnB1dC4gT25lIG9mIGB1c2VyYCwgYHN5c3RlbWAsIG9yIGBkZXZlbG9wZXJgLlxuICAgKi9cbiAgcm9sZTogJ3VzZXInIHwgJ3N5c3RlbScgfCAnZGV2ZWxvcGVyJztcblxuICAvKipcbiAgICogVGhlIHN0YXR1cyBvZiBpdGVtLiBPbmUgb2YgYGluX3Byb2dyZXNzYCwgYGNvbXBsZXRlZGAsIG9yIGBpbmNvbXBsZXRlYC5cbiAgICogUG9wdWxhdGVkIHdoZW4gaXRlbXMgYXJlIHJldHVybmVkIHZpYSBBUEkuXG4gICAqL1xuICBzdGF0dXM/OiAnaW5fcHJvZ3Jlc3MnIHwgJ2NvbXBsZXRlZCcgfCAnaW5jb21wbGV0ZSc7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBtZXNzYWdlIGlucHV0LiBBbHdheXMgc2V0IHRvIGBtZXNzYWdlYC5cbiAgICovXG4gIHR5cGU/OiAnbWVzc2FnZSc7XG59XG5cbi8qKlxuICogQSB0ZXh0IGlucHV0IHRvIHRoZSBtb2RlbC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUlucHV0VGV4dCB7XG4gIC8qKlxuICAgKiBUaGUgdGV4dCBpbnB1dCB0byB0aGUgbW9kZWwuXG4gICAqL1xuICB0ZXh0OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBpbnB1dCBpdGVtLiBBbHdheXMgYGlucHV0X3RleHRgLlxuICAgKi9cbiAgdHlwZTogJ2lucHV0X3RleHQnO1xufVxuXG4vKipcbiAqIENvbnRlbnQgaXRlbSB1c2VkIHRvIGdlbmVyYXRlIGEgcmVzcG9uc2UuXG4gKi9cbmV4cG9ydCB0eXBlIFJlc3BvbnNlSXRlbSA9XG4gIHwgUmVzcG9uc2VJbnB1dE1lc3NhZ2VJdGVtXG4gIHwgUmVzcG9uc2VPdXRwdXRNZXNzYWdlXG4gIHwgUmVzcG9uc2VGaWxlU2VhcmNoVG9vbENhbGxcbiAgfCBSZXNwb25zZUNvbXB1dGVyVG9vbENhbGxcbiAgfCBSZXNwb25zZUNvbXB1dGVyVG9vbENhbGxPdXRwdXRJdGVtXG4gIHwgUmVzcG9uc2VGdW5jdGlvbldlYlNlYXJjaFxuICB8IFJlc3BvbnNlRnVuY3Rpb25Ub29sQ2FsbEl0ZW1cbiAgfCBSZXNwb25zZUZ1bmN0aW9uVG9vbENhbGxPdXRwdXRJdGVtXG4gIHwgUmVzcG9uc2VJdGVtLkltYWdlR2VuZXJhdGlvbkNhbGxcbiAgfCBSZXNwb25zZUNvZGVJbnRlcnByZXRlclRvb2xDYWxsXG4gIHwgUmVzcG9uc2VJdGVtLkxvY2FsU2hlbGxDYWxsXG4gIHwgUmVzcG9uc2VJdGVtLkxvY2FsU2hlbGxDYWxsT3V0cHV0XG4gIHwgUmVzcG9uc2VJdGVtLk1jcExpc3RUb29sc1xuICB8IFJlc3BvbnNlSXRlbS5NY3BBcHByb3ZhbFJlcXVlc3RcbiAgfCBSZXNwb25zZUl0ZW0uTWNwQXBwcm92YWxSZXNwb25zZVxuICB8IFJlc3BvbnNlSXRlbS5NY3BDYWxsO1xuXG5leHBvcnQgbmFtZXNwYWNlIFJlc3BvbnNlSXRlbSB7XG4gIC8qKlxuICAgKiBBbiBpbWFnZSBnZW5lcmF0aW9uIHJlcXVlc3QgbWFkZSBieSB0aGUgbW9kZWwuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIEltYWdlR2VuZXJhdGlvbkNhbGwge1xuICAgIC8qKlxuICAgICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIGltYWdlIGdlbmVyYXRpb24gY2FsbC5cbiAgICAgKi9cbiAgICBpZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGdlbmVyYXRlZCBpbWFnZSBlbmNvZGVkIGluIGJhc2U2NC5cbiAgICAgKi9cbiAgICByZXN1bHQ6IHN0cmluZyB8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc3RhdHVzIG9mIHRoZSBpbWFnZSBnZW5lcmF0aW9uIGNhbGwuXG4gICAgICovXG4gICAgc3RhdHVzOiAnaW5fcHJvZ3Jlc3MnIHwgJ2NvbXBsZXRlZCcgfCAnZ2VuZXJhdGluZycgfCAnZmFpbGVkJztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBpbWFnZSBnZW5lcmF0aW9uIGNhbGwuIEFsd2F5cyBgaW1hZ2VfZ2VuZXJhdGlvbl9jYWxsYC5cbiAgICAgKi9cbiAgICB0eXBlOiAnaW1hZ2VfZ2VuZXJhdGlvbl9jYWxsJztcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHRvb2wgY2FsbCB0byBydW4gYSBjb21tYW5kIG9uIHRoZSBsb2NhbCBzaGVsbC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgTG9jYWxTaGVsbENhbGwge1xuICAgIC8qKlxuICAgICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIGxvY2FsIHNoZWxsIGNhbGwuXG4gICAgICovXG4gICAgaWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgYSBzaGVsbCBjb21tYW5kIG9uIHRoZSBzZXJ2ZXIuXG4gICAgICovXG4gICAgYWN0aW9uOiBMb2NhbFNoZWxsQ2FsbC5BY3Rpb247XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBsb2NhbCBzaGVsbCB0b29sIGNhbGwgZ2VuZXJhdGVkIGJ5IHRoZSBtb2RlbC5cbiAgICAgKi9cbiAgICBjYWxsX2lkOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc3RhdHVzIG9mIHRoZSBsb2NhbCBzaGVsbCBjYWxsLlxuICAgICAqL1xuICAgIHN0YXR1czogJ2luX3Byb2dyZXNzJyB8ICdjb21wbGV0ZWQnIHwgJ2luY29tcGxldGUnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIGxvY2FsIHNoZWxsIGNhbGwuIEFsd2F5cyBgbG9jYWxfc2hlbGxfY2FsbGAuXG4gICAgICovXG4gICAgdHlwZTogJ2xvY2FsX3NoZWxsX2NhbGwnO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBMb2NhbFNoZWxsQ2FsbCB7XG4gICAgLyoqXG4gICAgICogRXhlY3V0ZSBhIHNoZWxsIGNvbW1hbmQgb24gdGhlIHNlcnZlci5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIEFjdGlvbiB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBjb21tYW5kIHRvIHJ1bi5cbiAgICAgICAqL1xuICAgICAgY29tbWFuZDogQXJyYXk8c3RyaW5nPjtcblxuICAgICAgLyoqXG4gICAgICAgKiBFbnZpcm9ubWVudCB2YXJpYWJsZXMgdG8gc2V0IGZvciB0aGUgY29tbWFuZC5cbiAgICAgICAqL1xuICAgICAgZW52OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSB0eXBlIG9mIHRoZSBsb2NhbCBzaGVsbCBhY3Rpb24uIEFsd2F5cyBgZXhlY2AuXG4gICAgICAgKi9cbiAgICAgIHR5cGU6ICdleGVjJztcblxuICAgICAgLyoqXG4gICAgICAgKiBPcHRpb25hbCB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIGNvbW1hbmQuXG4gICAgICAgKi9cbiAgICAgIHRpbWVvdXRfbXM/OiBudW1iZXIgfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIE9wdGlvbmFsIHVzZXIgdG8gcnVuIHRoZSBjb21tYW5kIGFzLlxuICAgICAgICovXG4gICAgICB1c2VyPzogc3RyaW5nIHwgbnVsbDtcblxuICAgICAgLyoqXG4gICAgICAgKiBPcHRpb25hbCB3b3JraW5nIGRpcmVjdG9yeSB0byBydW4gdGhlIGNvbW1hbmQgaW4uXG4gICAgICAgKi9cbiAgICAgIHdvcmtpbmdfZGlyZWN0b3J5Pzogc3RyaW5nIHwgbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhlIG91dHB1dCBvZiBhIGxvY2FsIHNoZWxsIHRvb2wgY2FsbC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgTG9jYWxTaGVsbENhbGxPdXRwdXQge1xuICAgIC8qKlxuICAgICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIGxvY2FsIHNoZWxsIHRvb2wgY2FsbCBnZW5lcmF0ZWQgYnkgdGhlIG1vZGVsLlxuICAgICAqL1xuICAgIGlkOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBIEpTT04gc3RyaW5nIG9mIHRoZSBvdXRwdXQgb2YgdGhlIGxvY2FsIHNoZWxsIHRvb2wgY2FsbC5cbiAgICAgKi9cbiAgICBvdXRwdXQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBsb2NhbCBzaGVsbCB0b29sIGNhbGwgb3V0cHV0LiBBbHdheXMgYGxvY2FsX3NoZWxsX2NhbGxfb3V0cHV0YC5cbiAgICAgKi9cbiAgICB0eXBlOiAnbG9jYWxfc2hlbGxfY2FsbF9vdXRwdXQnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHN0YXR1cyBvZiB0aGUgaXRlbS4gT25lIG9mIGBpbl9wcm9ncmVzc2AsIGBjb21wbGV0ZWRgLCBvciBgaW5jb21wbGV0ZWAuXG4gICAgICovXG4gICAgc3RhdHVzPzogJ2luX3Byb2dyZXNzJyB8ICdjb21wbGV0ZWQnIHwgJ2luY29tcGxldGUnIHwgbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGxpc3Qgb2YgdG9vbHMgYXZhaWxhYmxlIG9uIGFuIE1DUCBzZXJ2ZXIuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIE1jcExpc3RUb29scyB7XG4gICAgLyoqXG4gICAgICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgbGlzdC5cbiAgICAgKi9cbiAgICBpZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGxhYmVsIG9mIHRoZSBNQ1Agc2VydmVyLlxuICAgICAqL1xuICAgIHNlcnZlcl9sYWJlbDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRvb2xzIGF2YWlsYWJsZSBvbiB0aGUgc2VydmVyLlxuICAgICAqL1xuICAgIHRvb2xzOiBBcnJheTxNY3BMaXN0VG9vbHMuVG9vbD47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgaXRlbS4gQWx3YXlzIGBtY3BfbGlzdF90b29sc2AuXG4gICAgICovXG4gICAgdHlwZTogJ21jcF9saXN0X3Rvb2xzJztcblxuICAgIC8qKlxuICAgICAqIEVycm9yIG1lc3NhZ2UgaWYgdGhlIHNlcnZlciBjb3VsZCBub3QgbGlzdCB0b29scy5cbiAgICAgKi9cbiAgICBlcnJvcj86IHN0cmluZyB8IG51bGw7XG4gIH1cblxuICBleHBvcnQgbmFtZXNwYWNlIE1jcExpc3RUb29scyB7XG4gICAgLyoqXG4gICAgICogQSB0b29sIGF2YWlsYWJsZSBvbiBhbiBNQ1Agc2VydmVyLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgVG9vbCB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBKU09OIHNjaGVtYSBkZXNjcmliaW5nIHRoZSB0b29sJ3MgaW5wdXQuXG4gICAgICAgKi9cbiAgICAgIGlucHV0X3NjaGVtYTogdW5rbm93bjtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgbmFtZSBvZiB0aGUgdG9vbC5cbiAgICAgICAqL1xuICAgICAgbmFtZTogc3RyaW5nO1xuXG4gICAgICAvKipcbiAgICAgICAqIEFkZGl0aW9uYWwgYW5ub3RhdGlvbnMgYWJvdXQgdGhlIHRvb2wuXG4gICAgICAgKi9cbiAgICAgIGFubm90YXRpb25zPzogdW5rbm93biB8IG51bGw7XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSB0b29sLlxuICAgICAgICovXG4gICAgICBkZXNjcmlwdGlvbj86IHN0cmluZyB8IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEEgcmVxdWVzdCBmb3IgaHVtYW4gYXBwcm92YWwgb2YgYSB0b29sIGludm9jYXRpb24uXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIE1jcEFwcHJvdmFsUmVxdWVzdCB7XG4gICAgLyoqXG4gICAgICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgYXBwcm92YWwgcmVxdWVzdC5cbiAgICAgKi9cbiAgICBpZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQSBKU09OIHN0cmluZyBvZiBhcmd1bWVudHMgZm9yIHRoZSB0b29sLlxuICAgICAqL1xuICAgIGFyZ3VtZW50czogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIHRvb2wgdG8gcnVuLlxuICAgICAqL1xuICAgIG5hbWU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBsYWJlbCBvZiB0aGUgTUNQIHNlcnZlciBtYWtpbmcgdGhlIHJlcXVlc3QuXG4gICAgICovXG4gICAgc2VydmVyX2xhYmVsOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgaXRlbS4gQWx3YXlzIGBtY3BfYXBwcm92YWxfcmVxdWVzdGAuXG4gICAgICovXG4gICAgdHlwZTogJ21jcF9hcHByb3ZhbF9yZXF1ZXN0JztcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHJlc3BvbnNlIHRvIGFuIE1DUCBhcHByb3ZhbCByZXF1ZXN0LlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBNY3BBcHByb3ZhbFJlc3BvbnNlIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBhcHByb3ZhbCByZXNwb25zZVxuICAgICAqL1xuICAgIGlkOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgSUQgb2YgdGhlIGFwcHJvdmFsIHJlcXVlc3QgYmVpbmcgYW5zd2VyZWQuXG4gICAgICovXG4gICAgYXBwcm92YWxfcmVxdWVzdF9pZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgcmVxdWVzdCB3YXMgYXBwcm92ZWQuXG4gICAgICovXG4gICAgYXBwcm92ZTogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBpdGVtLiBBbHdheXMgYG1jcF9hcHByb3ZhbF9yZXNwb25zZWAuXG4gICAgICovXG4gICAgdHlwZTogJ21jcF9hcHByb3ZhbF9yZXNwb25zZSc7XG5cbiAgICAvKipcbiAgICAgKiBPcHRpb25hbCByZWFzb24gZm9yIHRoZSBkZWNpc2lvbi5cbiAgICAgKi9cbiAgICByZWFzb24/OiBzdHJpbmcgfCBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuIGludm9jYXRpb24gb2YgYSB0b29sIG9uIGFuIE1DUCBzZXJ2ZXIuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIE1jcENhbGwge1xuICAgIC8qKlxuICAgICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHRvb2wgY2FsbC5cbiAgICAgKi9cbiAgICBpZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQSBKU09OIHN0cmluZyBvZiB0aGUgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgdG9vbC5cbiAgICAgKi9cbiAgICBhcmd1bWVudHM6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSB0b29sIHRoYXQgd2FzIHJ1bi5cbiAgICAgKi9cbiAgICBuYW1lOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGFiZWwgb2YgdGhlIE1DUCBzZXJ2ZXIgcnVubmluZyB0aGUgdG9vbC5cbiAgICAgKi9cbiAgICBzZXJ2ZXJfbGFiZWw6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBpdGVtLiBBbHdheXMgYG1jcF9jYWxsYC5cbiAgICAgKi9cbiAgICB0eXBlOiAnbWNwX2NhbGwnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGVycm9yIGZyb20gdGhlIHRvb2wgY2FsbCwgaWYgYW55LlxuICAgICAqL1xuICAgIGVycm9yPzogc3RyaW5nIHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvdXRwdXQgZnJvbSB0aGUgdG9vbCBjYWxsLlxuICAgICAqL1xuICAgIG91dHB1dD86IHN0cmluZyB8IG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdGhlcmUgaXMgYSBkZWx0YSAocGFydGlhbCB1cGRhdGUpIHRvIHRoZSBhcmd1bWVudHMgb2YgYW4gTUNQIHRvb2xcbiAqIGNhbGwuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VNY3BDYWxsQXJndW1lbnRzRGVsdGFFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgcGFydGlhbCB1cGRhdGUgdG8gdGhlIGFyZ3VtZW50cyBmb3IgdGhlIE1DUCB0b29sIGNhbGwuXG4gICAqL1xuICBkZWx0YTogdW5rbm93bjtcblxuICAvKipcbiAgICogVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBNQ1AgdG9vbCBjYWxsIGl0ZW0gYmVpbmcgcHJvY2Vzc2VkLlxuICAgKi9cbiAgaXRlbV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIG91dHB1dCBpdGVtIGluIHRoZSByZXNwb25zZSdzIG91dHB1dCBhcnJheS5cbiAgICovXG4gIG91dHB1dF9pbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgc2VxdWVuY2UgbnVtYmVyIG9mIHRoaXMgZXZlbnQuXG4gICAqL1xuICBzZXF1ZW5jZV9udW1iZXI6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGV2ZW50LiBBbHdheXMgJ3Jlc3BvbnNlLm1jcF9jYWxsLmFyZ3VtZW50c19kZWx0YScuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2UubWNwX2NhbGwuYXJndW1lbnRzX2RlbHRhJztcbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdGhlIGFyZ3VtZW50cyBmb3IgYW4gTUNQIHRvb2wgY2FsbCBhcmUgZmluYWxpemVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlTWNwQ2FsbEFyZ3VtZW50c0RvbmVFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgZmluYWxpemVkIGFyZ3VtZW50cyBmb3IgdGhlIE1DUCB0b29sIGNhbGwuXG4gICAqL1xuICBhcmd1bWVudHM6IHVua25vd247XG5cbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgTUNQIHRvb2wgY2FsbCBpdGVtIGJlaW5nIHByb2Nlc3NlZC5cbiAgICovXG4gIGl0ZW1faWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBvdXRwdXQgaXRlbSBpbiB0aGUgcmVzcG9uc2UncyBvdXRwdXQgYXJyYXkuXG4gICAqL1xuICBvdXRwdXRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGlzIGV2ZW50LlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC4gQWx3YXlzICdyZXNwb25zZS5tY3BfY2FsbC5hcmd1bWVudHNfZG9uZScuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2UubWNwX2NhbGwuYXJndW1lbnRzX2RvbmUnO1xufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbiBhbiBNQ1AgdG9vbCBjYWxsIGhhcyBjb21wbGV0ZWQgc3VjY2Vzc2Z1bGx5LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlTWNwQ2FsbENvbXBsZXRlZEV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBzZXF1ZW5jZSBudW1iZXIgb2YgdGhpcyBldmVudC5cbiAgICovXG4gIHNlcXVlbmNlX251bWJlcjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgZXZlbnQuIEFsd2F5cyAncmVzcG9uc2UubWNwX2NhbGwuY29tcGxldGVkJy5cbiAgICovXG4gIHR5cGU6ICdyZXNwb25zZS5tY3BfY2FsbC5jb21wbGV0ZWQnO1xufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbiBhbiBNQ1AgdG9vbCBjYWxsIGhhcyBmYWlsZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VNY3BDYWxsRmFpbGVkRXZlbnQge1xuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGlzIGV2ZW50LlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC4gQWx3YXlzICdyZXNwb25zZS5tY3BfY2FsbC5mYWlsZWQnLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLm1jcF9jYWxsLmZhaWxlZCc7XG59XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuIGFuIE1DUCB0b29sIGNhbGwgaXMgaW4gcHJvZ3Jlc3MuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VNY3BDYWxsSW5Qcm9ncmVzc0V2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgTUNQIHRvb2wgY2FsbCBpdGVtIGJlaW5nIHByb2Nlc3NlZC5cbiAgICovXG4gIGl0ZW1faWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBvdXRwdXQgaXRlbSBpbiB0aGUgcmVzcG9uc2UncyBvdXRwdXQgYXJyYXkuXG4gICAqL1xuICBvdXRwdXRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGlzIGV2ZW50LlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC4gQWx3YXlzICdyZXNwb25zZS5tY3BfY2FsbC5pbl9wcm9ncmVzcycuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2UubWNwX2NhbGwuaW5fcHJvZ3Jlc3MnO1xufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbiB0aGUgbGlzdCBvZiBhdmFpbGFibGUgTUNQIHRvb2xzIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSByZXRyaWV2ZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VNY3BMaXN0VG9vbHNDb21wbGV0ZWRFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgc2VxdWVuY2UgbnVtYmVyIG9mIHRoaXMgZXZlbnQuXG4gICAqL1xuICBzZXF1ZW5jZV9udW1iZXI6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGV2ZW50LiBBbHdheXMgJ3Jlc3BvbnNlLm1jcF9saXN0X3Rvb2xzLmNvbXBsZXRlZCcuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2UubWNwX2xpc3RfdG9vbHMuY29tcGxldGVkJztcbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdGhlIGF0dGVtcHQgdG8gbGlzdCBhdmFpbGFibGUgTUNQIHRvb2xzIGhhcyBmYWlsZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VNY3BMaXN0VG9vbHNGYWlsZWRFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgc2VxdWVuY2UgbnVtYmVyIG9mIHRoaXMgZXZlbnQuXG4gICAqL1xuICBzZXF1ZW5jZV9udW1iZXI6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGV2ZW50LiBBbHdheXMgJ3Jlc3BvbnNlLm1jcF9saXN0X3Rvb2xzLmZhaWxlZCcuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2UubWNwX2xpc3RfdG9vbHMuZmFpbGVkJztcbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdGhlIHN5c3RlbSBpcyBpbiB0aGUgcHJvY2VzcyBvZiByZXRyaWV2aW5nIHRoZSBsaXN0IG9mIGF2YWlsYWJsZVxuICogTUNQIHRvb2xzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlTWNwTGlzdFRvb2xzSW5Qcm9ncmVzc0V2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBzZXF1ZW5jZSBudW1iZXIgb2YgdGhpcyBldmVudC5cbiAgICovXG4gIHNlcXVlbmNlX251bWJlcjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgZXZlbnQuIEFsd2F5cyAncmVzcG9uc2UubWNwX2xpc3RfdG9vbHMuaW5fcHJvZ3Jlc3MnLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLm1jcF9saXN0X3Rvb2xzLmluX3Byb2dyZXNzJztcbn1cblxuLyoqXG4gKiBBbiBhdWRpbyBvdXRwdXQgZnJvbSB0aGUgbW9kZWwuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VPdXRwdXRBdWRpbyB7XG4gIC8qKlxuICAgKiBCYXNlNjQtZW5jb2RlZCBhdWRpbyBkYXRhIGZyb20gdGhlIG1vZGVsLlxuICAgKi9cbiAgZGF0YTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdHJhbnNjcmlwdCBvZiB0aGUgYXVkaW8gZGF0YSBmcm9tIHRoZSBtb2RlbC5cbiAgICovXG4gIHRyYW5zY3JpcHQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIG91dHB1dCBhdWRpby4gQWx3YXlzIGBvdXRwdXRfYXVkaW9gLlxuICAgKi9cbiAgdHlwZTogJ291dHB1dF9hdWRpbyc7XG59XG5cbi8qKlxuICogQW4gb3V0cHV0IG1lc3NhZ2UgZnJvbSB0aGUgbW9kZWwuXG4gKi9cbmV4cG9ydCB0eXBlIFJlc3BvbnNlT3V0cHV0SXRlbSA9XG4gIHwgUmVzcG9uc2VPdXRwdXRNZXNzYWdlXG4gIHwgUmVzcG9uc2VGaWxlU2VhcmNoVG9vbENhbGxcbiAgfCBSZXNwb25zZUZ1bmN0aW9uVG9vbENhbGxcbiAgfCBSZXNwb25zZUZ1bmN0aW9uV2ViU2VhcmNoXG4gIHwgUmVzcG9uc2VDb21wdXRlclRvb2xDYWxsXG4gIHwgUmVzcG9uc2VSZWFzb25pbmdJdGVtXG4gIHwgUmVzcG9uc2VPdXRwdXRJdGVtLkltYWdlR2VuZXJhdGlvbkNhbGxcbiAgfCBSZXNwb25zZUNvZGVJbnRlcnByZXRlclRvb2xDYWxsXG4gIHwgUmVzcG9uc2VPdXRwdXRJdGVtLkxvY2FsU2hlbGxDYWxsXG4gIHwgUmVzcG9uc2VPdXRwdXRJdGVtLk1jcENhbGxcbiAgfCBSZXNwb25zZU91dHB1dEl0ZW0uTWNwTGlzdFRvb2xzXG4gIHwgUmVzcG9uc2VPdXRwdXRJdGVtLk1jcEFwcHJvdmFsUmVxdWVzdDtcblxuZXhwb3J0IG5hbWVzcGFjZSBSZXNwb25zZU91dHB1dEl0ZW0ge1xuICAvKipcbiAgICogQW4gaW1hZ2UgZ2VuZXJhdGlvbiByZXF1ZXN0IG1hZGUgYnkgdGhlIG1vZGVsLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJbWFnZUdlbmVyYXRpb25DYWxsIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBpbWFnZSBnZW5lcmF0aW9uIGNhbGwuXG4gICAgICovXG4gICAgaWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBnZW5lcmF0ZWQgaW1hZ2UgZW5jb2RlZCBpbiBiYXNlNjQuXG4gICAgICovXG4gICAgcmVzdWx0OiBzdHJpbmcgfCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHN0YXR1cyBvZiB0aGUgaW1hZ2UgZ2VuZXJhdGlvbiBjYWxsLlxuICAgICAqL1xuICAgIHN0YXR1czogJ2luX3Byb2dyZXNzJyB8ICdjb21wbGV0ZWQnIHwgJ2dlbmVyYXRpbmcnIHwgJ2ZhaWxlZCc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgaW1hZ2UgZ2VuZXJhdGlvbiBjYWxsLiBBbHdheXMgYGltYWdlX2dlbmVyYXRpb25fY2FsbGAuXG4gICAgICovXG4gICAgdHlwZTogJ2ltYWdlX2dlbmVyYXRpb25fY2FsbCc7XG4gIH1cblxuICAvKipcbiAgICogQSB0b29sIGNhbGwgdG8gcnVuIGEgY29tbWFuZCBvbiB0aGUgbG9jYWwgc2hlbGwuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIExvY2FsU2hlbGxDYWxsIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdW5pcXVlIElEIG9mIHRoZSBsb2NhbCBzaGVsbCBjYWxsLlxuICAgICAqL1xuICAgIGlkOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIGEgc2hlbGwgY29tbWFuZCBvbiB0aGUgc2VydmVyLlxuICAgICAqL1xuICAgIGFjdGlvbjogTG9jYWxTaGVsbENhbGwuQWN0aW9uO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgbG9jYWwgc2hlbGwgdG9vbCBjYWxsIGdlbmVyYXRlZCBieSB0aGUgbW9kZWwuXG4gICAgICovXG4gICAgY2FsbF9pZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHN0YXR1cyBvZiB0aGUgbG9jYWwgc2hlbGwgY2FsbC5cbiAgICAgKi9cbiAgICBzdGF0dXM6ICdpbl9wcm9ncmVzcycgfCAnY29tcGxldGVkJyB8ICdpbmNvbXBsZXRlJztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBsb2NhbCBzaGVsbCBjYWxsLiBBbHdheXMgYGxvY2FsX3NoZWxsX2NhbGxgLlxuICAgICAqL1xuICAgIHR5cGU6ICdsb2NhbF9zaGVsbF9jYWxsJztcbiAgfVxuXG4gIGV4cG9ydCBuYW1lc3BhY2UgTG9jYWxTaGVsbENhbGwge1xuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgYSBzaGVsbCBjb21tYW5kIG9uIHRoZSBzZXJ2ZXIuXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBBY3Rpb24ge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgY29tbWFuZCB0byBydW4uXG4gICAgICAgKi9cbiAgICAgIGNvbW1hbmQ6IEFycmF5PHN0cmluZz47XG5cbiAgICAgIC8qKlxuICAgICAgICogRW52aXJvbm1lbnQgdmFyaWFibGVzIHRvIHNldCBmb3IgdGhlIGNvbW1hbmQuXG4gICAgICAgKi9cbiAgICAgIGVudjogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcblxuICAgICAgLyoqXG4gICAgICAgKiBUaGUgdHlwZSBvZiB0aGUgbG9jYWwgc2hlbGwgYWN0aW9uLiBBbHdheXMgYGV4ZWNgLlxuICAgICAgICovXG4gICAgICB0eXBlOiAnZXhlYyc7XG5cbiAgICAgIC8qKlxuICAgICAgICogT3B0aW9uYWwgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZSBjb21tYW5kLlxuICAgICAgICovXG4gICAgICB0aW1lb3V0X21zPzogbnVtYmVyIHwgbnVsbDtcblxuICAgICAgLyoqXG4gICAgICAgKiBPcHRpb25hbCB1c2VyIHRvIHJ1biB0aGUgY29tbWFuZCBhcy5cbiAgICAgICAqL1xuICAgICAgdXNlcj86IHN0cmluZyB8IG51bGw7XG5cbiAgICAgIC8qKlxuICAgICAgICogT3B0aW9uYWwgd29ya2luZyBkaXJlY3RvcnkgdG8gcnVuIHRoZSBjb21tYW5kIGluLlxuICAgICAgICovXG4gICAgICB3b3JraW5nX2RpcmVjdG9yeT86IHN0cmluZyB8IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFuIGludm9jYXRpb24gb2YgYSB0b29sIG9uIGFuIE1DUCBzZXJ2ZXIuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIE1jcENhbGwge1xuICAgIC8qKlxuICAgICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIHRvb2wgY2FsbC5cbiAgICAgKi9cbiAgICBpZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQSBKU09OIHN0cmluZyBvZiB0aGUgYXJndW1lbnRzIHBhc3NlZCB0byB0aGUgdG9vbC5cbiAgICAgKi9cbiAgICBhcmd1bWVudHM6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSB0b29sIHRoYXQgd2FzIHJ1bi5cbiAgICAgKi9cbiAgICBuYW1lOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGFiZWwgb2YgdGhlIE1DUCBzZXJ2ZXIgcnVubmluZyB0aGUgdG9vbC5cbiAgICAgKi9cbiAgICBzZXJ2ZXJfbGFiZWw6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBpdGVtLiBBbHdheXMgYG1jcF9jYWxsYC5cbiAgICAgKi9cbiAgICB0eXBlOiAnbWNwX2NhbGwnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGVycm9yIGZyb20gdGhlIHRvb2wgY2FsbCwgaWYgYW55LlxuICAgICAqL1xuICAgIGVycm9yPzogc3RyaW5nIHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvdXRwdXQgZnJvbSB0aGUgdG9vbCBjYWxsLlxuICAgICAqL1xuICAgIG91dHB1dD86IHN0cmluZyB8IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQSBsaXN0IG9mIHRvb2xzIGF2YWlsYWJsZSBvbiBhbiBNQ1Agc2VydmVyLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBNY3BMaXN0VG9vbHMge1xuICAgIC8qKlxuICAgICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIGxpc3QuXG4gICAgICovXG4gICAgaWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBsYWJlbCBvZiB0aGUgTUNQIHNlcnZlci5cbiAgICAgKi9cbiAgICBzZXJ2ZXJfbGFiZWw6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0b29scyBhdmFpbGFibGUgb24gdGhlIHNlcnZlci5cbiAgICAgKi9cbiAgICB0b29sczogQXJyYXk8TWNwTGlzdFRvb2xzLlRvb2w+O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIGl0ZW0uIEFsd2F5cyBgbWNwX2xpc3RfdG9vbHNgLlxuICAgICAqL1xuICAgIHR5cGU6ICdtY3BfbGlzdF90b29scyc7XG5cbiAgICAvKipcbiAgICAgKiBFcnJvciBtZXNzYWdlIGlmIHRoZSBzZXJ2ZXIgY291bGQgbm90IGxpc3QgdG9vbHMuXG4gICAgICovXG4gICAgZXJyb3I/OiBzdHJpbmcgfCBudWxsO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBNY3BMaXN0VG9vbHMge1xuICAgIC8qKlxuICAgICAqIEEgdG9vbCBhdmFpbGFibGUgb24gYW4gTUNQIHNlcnZlci5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIFRvb2wge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgSlNPTiBzY2hlbWEgZGVzY3JpYmluZyB0aGUgdG9vbCdzIGlucHV0LlxuICAgICAgICovXG4gICAgICBpbnB1dF9zY2hlbWE6IHVua25vd247XG5cbiAgICAgIC8qKlxuICAgICAgICogVGhlIG5hbWUgb2YgdGhlIHRvb2wuXG4gICAgICAgKi9cbiAgICAgIG5hbWU6IHN0cmluZztcblxuICAgICAgLyoqXG4gICAgICAgKiBBZGRpdGlvbmFsIGFubm90YXRpb25zIGFib3V0IHRoZSB0b29sLlxuICAgICAgICovXG4gICAgICBhbm5vdGF0aW9ucz86IHVua25vd24gfCBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgdG9vbC5cbiAgICAgICAqL1xuICAgICAgZGVzY3JpcHRpb24/OiBzdHJpbmcgfCBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBIHJlcXVlc3QgZm9yIGh1bWFuIGFwcHJvdmFsIG9mIGEgdG9vbCBpbnZvY2F0aW9uLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBNY3BBcHByb3ZhbFJlcXVlc3Qge1xuICAgIC8qKlxuICAgICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIGFwcHJvdmFsIHJlcXVlc3QuXG4gICAgICovXG4gICAgaWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEEgSlNPTiBzdHJpbmcgb2YgYXJndW1lbnRzIGZvciB0aGUgdG9vbC5cbiAgICAgKi9cbiAgICBhcmd1bWVudHM6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSB0b29sIHRvIHJ1bi5cbiAgICAgKi9cbiAgICBuYW1lOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGFiZWwgb2YgdGhlIE1DUCBzZXJ2ZXIgbWFraW5nIHRoZSByZXF1ZXN0LlxuICAgICAqL1xuICAgIHNlcnZlcl9sYWJlbDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIGl0ZW0uIEFsd2F5cyBgbWNwX2FwcHJvdmFsX3JlcXVlc3RgLlxuICAgICAqL1xuICAgIHR5cGU6ICdtY3BfYXBwcm92YWxfcmVxdWVzdCc7XG4gIH1cbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW4gYSBuZXcgb3V0cHV0IGl0ZW0gaXMgYWRkZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VPdXRwdXRJdGVtQWRkZWRFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgb3V0cHV0IGl0ZW0gdGhhdCB3YXMgYWRkZWQuXG4gICAqL1xuICBpdGVtOiBSZXNwb25zZU91dHB1dEl0ZW07XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgb3V0cHV0IGl0ZW0gdGhhdCB3YXMgYWRkZWQuXG4gICAqL1xuICBvdXRwdXRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGlzIGV2ZW50LlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC4gQWx3YXlzIGByZXNwb25zZS5vdXRwdXRfaXRlbS5hZGRlZGAuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2Uub3V0cHV0X2l0ZW0uYWRkZWQnO1xufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbiBhbiBvdXRwdXQgaXRlbSBpcyBtYXJrZWQgZG9uZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZU91dHB1dEl0ZW1Eb25lRXZlbnQge1xuICAvKipcbiAgICogVGhlIG91dHB1dCBpdGVtIHRoYXQgd2FzIG1hcmtlZCBkb25lLlxuICAgKi9cbiAgaXRlbTogUmVzcG9uc2VPdXRwdXRJdGVtO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIG91dHB1dCBpdGVtIHRoYXQgd2FzIG1hcmtlZCBkb25lLlxuICAgKi9cbiAgb3V0cHV0X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBzZXF1ZW5jZSBudW1iZXIgb2YgdGhpcyBldmVudC5cbiAgICovXG4gIHNlcXVlbmNlX251bWJlcjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgZXZlbnQuIEFsd2F5cyBgcmVzcG9uc2Uub3V0cHV0X2l0ZW0uZG9uZWAuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2Uub3V0cHV0X2l0ZW0uZG9uZSc7XG59XG5cbi8qKlxuICogQW4gb3V0cHV0IG1lc3NhZ2UgZnJvbSB0aGUgbW9kZWwuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VPdXRwdXRNZXNzYWdlIHtcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIG91dHB1dCBtZXNzYWdlLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIG91dHB1dCBtZXNzYWdlLlxuICAgKi9cbiAgY29udGVudDogQXJyYXk8UmVzcG9uc2VPdXRwdXRUZXh0IHwgUmVzcG9uc2VPdXRwdXRSZWZ1c2FsPjtcblxuICAvKipcbiAgICogVGhlIHJvbGUgb2YgdGhlIG91dHB1dCBtZXNzYWdlLiBBbHdheXMgYGFzc2lzdGFudGAuXG4gICAqL1xuICByb2xlOiAnYXNzaXN0YW50JztcblxuICAvKipcbiAgICogVGhlIHN0YXR1cyBvZiB0aGUgbWVzc2FnZSBpbnB1dC4gT25lIG9mIGBpbl9wcm9ncmVzc2AsIGBjb21wbGV0ZWRgLCBvclxuICAgKiBgaW5jb21wbGV0ZWAuIFBvcHVsYXRlZCB3aGVuIGlucHV0IGl0ZW1zIGFyZSByZXR1cm5lZCB2aWEgQVBJLlxuICAgKi9cbiAgc3RhdHVzOiAnaW5fcHJvZ3Jlc3MnIHwgJ2NvbXBsZXRlZCcgfCAnaW5jb21wbGV0ZSc7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBvdXRwdXQgbWVzc2FnZS4gQWx3YXlzIGBtZXNzYWdlYC5cbiAgICovXG4gIHR5cGU6ICdtZXNzYWdlJztcbn1cblxuLyoqXG4gKiBBIHJlZnVzYWwgZnJvbSB0aGUgbW9kZWwuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VPdXRwdXRSZWZ1c2FsIHtcbiAgLyoqXG4gICAqIFRoZSByZWZ1c2FsIGV4cGxhbmF0aW9uZnJvbSB0aGUgbW9kZWwuXG4gICAqL1xuICByZWZ1c2FsOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSByZWZ1c2FsLiBBbHdheXMgYHJlZnVzYWxgLlxuICAgKi9cbiAgdHlwZTogJ3JlZnVzYWwnO1xufVxuXG4vKipcbiAqIEEgdGV4dCBvdXRwdXQgZnJvbSB0aGUgbW9kZWwuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VPdXRwdXRUZXh0IHtcbiAgLyoqXG4gICAqIFRoZSBhbm5vdGF0aW9ucyBvZiB0aGUgdGV4dCBvdXRwdXQuXG4gICAqL1xuICBhbm5vdGF0aW9uczogQXJyYXk8XG4gICAgUmVzcG9uc2VPdXRwdXRUZXh0LkZpbGVDaXRhdGlvbiB8IFJlc3BvbnNlT3V0cHV0VGV4dC5VUkxDaXRhdGlvbiB8IFJlc3BvbnNlT3V0cHV0VGV4dC5GaWxlUGF0aFxuICA+O1xuXG4gIC8qKlxuICAgKiBUaGUgdGV4dCBvdXRwdXQgZnJvbSB0aGUgbW9kZWwuXG4gICAqL1xuICB0ZXh0OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBvdXRwdXQgdGV4dC4gQWx3YXlzIGBvdXRwdXRfdGV4dGAuXG4gICAqL1xuICB0eXBlOiAnb3V0cHV0X3RleHQnO1xuXG4gIGxvZ3Byb2JzPzogQXJyYXk8UmVzcG9uc2VPdXRwdXRUZXh0LkxvZ3Byb2I+O1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFJlc3BvbnNlT3V0cHV0VGV4dCB7XG4gIC8qKlxuICAgKiBBIGNpdGF0aW9uIHRvIGEgZmlsZS5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgRmlsZUNpdGF0aW9uIHtcbiAgICAvKipcbiAgICAgKiBUaGUgSUQgb2YgdGhlIGZpbGUuXG4gICAgICovXG4gICAgZmlsZV9pZDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGluZGV4IG9mIHRoZSBmaWxlIGluIHRoZSBsaXN0IG9mIGZpbGVzLlxuICAgICAqL1xuICAgIGluZGV4OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgZmlsZSBjaXRhdGlvbi4gQWx3YXlzIGBmaWxlX2NpdGF0aW9uYC5cbiAgICAgKi9cbiAgICB0eXBlOiAnZmlsZV9jaXRhdGlvbic7XG4gIH1cblxuICAvKipcbiAgICogQSBjaXRhdGlvbiBmb3IgYSB3ZWIgcmVzb3VyY2UgdXNlZCB0byBnZW5lcmF0ZSBhIG1vZGVsIHJlc3BvbnNlLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBVUkxDaXRhdGlvbiB7XG4gICAgLyoqXG4gICAgICogVGhlIGluZGV4IG9mIHRoZSBsYXN0IGNoYXJhY3RlciBvZiB0aGUgVVJMIGNpdGF0aW9uIGluIHRoZSBtZXNzYWdlLlxuICAgICAqL1xuICAgIGVuZF9pbmRleDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGluZGV4IG9mIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgdGhlIFVSTCBjaXRhdGlvbiBpbiB0aGUgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBzdGFydF9pbmRleDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRpdGxlIG9mIHRoZSB3ZWIgcmVzb3VyY2UuXG4gICAgICovXG4gICAgdGl0bGU6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBVUkwgY2l0YXRpb24uIEFsd2F5cyBgdXJsX2NpdGF0aW9uYC5cbiAgICAgKi9cbiAgICB0eXBlOiAndXJsX2NpdGF0aW9uJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBVUkwgb2YgdGhlIHdlYiByZXNvdXJjZS5cbiAgICAgKi9cbiAgICB1cmw6IHN0cmluZztcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHBhdGggdG8gYSBmaWxlLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBGaWxlUGF0aCB7XG4gICAgLyoqXG4gICAgICogVGhlIElEIG9mIHRoZSBmaWxlLlxuICAgICAqL1xuICAgIGZpbGVfaWQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBpbmRleCBvZiB0aGUgZmlsZSBpbiB0aGUgbGlzdCBvZiBmaWxlcy5cbiAgICAgKi9cbiAgICBpbmRleDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIGZpbGUgcGF0aC4gQWx3YXlzIGBmaWxlX3BhdGhgLlxuICAgICAqL1xuICAgIHR5cGU6ICdmaWxlX3BhdGgnO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBsb2cgcHJvYmFiaWxpdHkgb2YgYSB0b2tlbi5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgTG9ncHJvYiB7XG4gICAgdG9rZW46IHN0cmluZztcblxuICAgIGJ5dGVzOiBBcnJheTxudW1iZXI+O1xuXG4gICAgbG9ncHJvYjogbnVtYmVyO1xuXG4gICAgdG9wX2xvZ3Byb2JzOiBBcnJheTxMb2dwcm9iLlRvcExvZ3Byb2I+O1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBMb2dwcm9iIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdG9wIGxvZyBwcm9iYWJpbGl0eSBvZiBhIHRva2VuLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgVG9wTG9ncHJvYiB7XG4gICAgICB0b2tlbjogc3RyaW5nO1xuXG4gICAgICBieXRlczogQXJyYXk8bnVtYmVyPjtcblxuICAgICAgbG9ncHJvYjogbnVtYmVyO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbiBhbiBhbm5vdGF0aW9uIGlzIGFkZGVkIHRvIG91dHB1dCB0ZXh0IGNvbnRlbnQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VPdXRwdXRUZXh0QW5ub3RhdGlvbkFkZGVkRXZlbnQge1xuICAvKipcbiAgICogVGhlIGFubm90YXRpb24gb2JqZWN0IGJlaW5nIGFkZGVkLiAoU2VlIGFubm90YXRpb24gc2NoZW1hIGZvciBkZXRhaWxzLilcbiAgICovXG4gIGFubm90YXRpb246IHVua25vd247XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgYW5ub3RhdGlvbiB3aXRoaW4gdGhlIGNvbnRlbnQgcGFydC5cbiAgICovXG4gIGFubm90YXRpb25faW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBjb250ZW50IHBhcnQgd2l0aGluIHRoZSBvdXRwdXQgaXRlbS5cbiAgICovXG4gIGNvbnRlbnRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBpdGVtIHRvIHdoaWNoIHRoZSBhbm5vdGF0aW9uIGlzIGJlaW5nIGFkZGVkLlxuICAgKi9cbiAgaXRlbV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIG91dHB1dCBpdGVtIGluIHRoZSByZXNwb25zZSdzIG91dHB1dCBhcnJheS5cbiAgICovXG4gIG91dHB1dF9pbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgc2VxdWVuY2UgbnVtYmVyIG9mIHRoaXMgZXZlbnQuXG4gICAqL1xuICBzZXF1ZW5jZV9udW1iZXI6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGV2ZW50LiBBbHdheXMgJ3Jlc3BvbnNlLm91dHB1dF90ZXh0X2Fubm90YXRpb24uYWRkZWQnLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLm91dHB1dF90ZXh0X2Fubm90YXRpb24uYWRkZWQnO1xufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbiBhIHJlc3BvbnNlIGlzIHF1ZXVlZCBhbmQgd2FpdGluZyB0byBiZSBwcm9jZXNzZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VRdWV1ZWRFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgZnVsbCByZXNwb25zZSBvYmplY3QgdGhhdCBpcyBxdWV1ZWQuXG4gICAqL1xuICByZXNwb25zZTogUmVzcG9uc2U7XG5cbiAgLyoqXG4gICAqIFRoZSBzZXF1ZW5jZSBudW1iZXIgZm9yIHRoaXMgZXZlbnQuXG4gICAqL1xuICBzZXF1ZW5jZV9udW1iZXI6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGV2ZW50LiBBbHdheXMgJ3Jlc3BvbnNlLnF1ZXVlZCcuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2UucXVldWVkJztcbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdGhlcmUgaXMgYSBkZWx0YSAocGFydGlhbCB1cGRhdGUpIHRvIHRoZSByZWFzb25pbmcgY29udGVudC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZVJlYXNvbmluZ0RlbHRhRXZlbnQge1xuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSByZWFzb25pbmcgY29udGVudCBwYXJ0IHdpdGhpbiB0aGUgb3V0cHV0IGl0ZW0uXG4gICAqL1xuICBjb250ZW50X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBwYXJ0aWFsIHVwZGF0ZSB0byB0aGUgcmVhc29uaW5nIGNvbnRlbnQuXG4gICAqL1xuICBkZWx0YTogdW5rbm93bjtcblxuICAvKipcbiAgICogVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBpdGVtIGZvciB3aGljaCByZWFzb25pbmcgaXMgYmVpbmcgdXBkYXRlZC5cbiAgICovXG4gIGl0ZW1faWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBvdXRwdXQgaXRlbSBpbiB0aGUgcmVzcG9uc2UncyBvdXRwdXQgYXJyYXkuXG4gICAqL1xuICBvdXRwdXRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGlzIGV2ZW50LlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC4gQWx3YXlzICdyZXNwb25zZS5yZWFzb25pbmcuZGVsdGEnLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLnJlYXNvbmluZy5kZWx0YSc7XG59XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuIHRoZSByZWFzb25pbmcgY29udGVudCBpcyBmaW5hbGl6ZWQgZm9yIGFuIGl0ZW0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VSZWFzb25pbmdEb25lRXZlbnQge1xuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSByZWFzb25pbmcgY29udGVudCBwYXJ0IHdpdGhpbiB0aGUgb3V0cHV0IGl0ZW0uXG4gICAqL1xuICBjb250ZW50X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgaXRlbSBmb3Igd2hpY2ggcmVhc29uaW5nIGlzIGZpbmFsaXplZC5cbiAgICovXG4gIGl0ZW1faWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBvdXRwdXQgaXRlbSBpbiB0aGUgcmVzcG9uc2UncyBvdXRwdXQgYXJyYXkuXG4gICAqL1xuICBvdXRwdXRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGlzIGV2ZW50LlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBmaW5hbGl6ZWQgcmVhc29uaW5nIHRleHQuXG4gICAqL1xuICB0ZXh0OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC4gQWx3YXlzICdyZXNwb25zZS5yZWFzb25pbmcuZG9uZScuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2UucmVhc29uaW5nLmRvbmUnO1xufVxuXG4vKipcbiAqIEEgZGVzY3JpcHRpb24gb2YgdGhlIGNoYWluIG9mIHRob3VnaHQgdXNlZCBieSBhIHJlYXNvbmluZyBtb2RlbCB3aGlsZSBnZW5lcmF0aW5nXG4gKiBhIHJlc3BvbnNlLiBCZSBzdXJlIHRvIGluY2x1ZGUgdGhlc2UgaXRlbXMgaW4geW91ciBgaW5wdXRgIHRvIHRoZSBSZXNwb25zZXMgQVBJXG4gKiBmb3Igc3Vic2VxdWVudCB0dXJucyBvZiBhIGNvbnZlcnNhdGlvbiBpZiB5b3UgYXJlIG1hbnVhbGx5XG4gKiBbbWFuYWdpbmcgY29udGV4dF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL2NvbnZlcnNhdGlvbi1zdGF0ZSkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VSZWFzb25pbmdJdGVtIHtcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgcmVhc29uaW5nIGNvbnRlbnQuXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBSZWFzb25pbmcgdGV4dCBjb250ZW50cy5cbiAgICovXG4gIHN1bW1hcnk6IEFycmF5PFJlc3BvbnNlUmVhc29uaW5nSXRlbS5TdW1tYXJ5PjtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIG9iamVjdC4gQWx3YXlzIGByZWFzb25pbmdgLlxuICAgKi9cbiAgdHlwZTogJ3JlYXNvbmluZyc7XG5cbiAgLyoqXG4gICAqIFRoZSBlbmNyeXB0ZWQgY29udGVudCBvZiB0aGUgcmVhc29uaW5nIGl0ZW0gLSBwb3B1bGF0ZWQgd2hlbiBhIHJlc3BvbnNlIGlzXG4gICAqIGdlbmVyYXRlZCB3aXRoIGByZWFzb25pbmcuZW5jcnlwdGVkX2NvbnRlbnRgIGluIHRoZSBgaW5jbHVkZWAgcGFyYW1ldGVyLlxuICAgKi9cbiAgZW5jcnlwdGVkX2NvbnRlbnQ/OiBzdHJpbmcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgc3RhdHVzIG9mIHRoZSBpdGVtLiBPbmUgb2YgYGluX3Byb2dyZXNzYCwgYGNvbXBsZXRlZGAsIG9yIGBpbmNvbXBsZXRlYC5cbiAgICogUG9wdWxhdGVkIHdoZW4gaXRlbXMgYXJlIHJldHVybmVkIHZpYSBBUEkuXG4gICAqL1xuICBzdGF0dXM/OiAnaW5fcHJvZ3Jlc3MnIHwgJ2NvbXBsZXRlZCcgfCAnaW5jb21wbGV0ZSc7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgUmVzcG9uc2VSZWFzb25pbmdJdGVtIHtcbiAgZXhwb3J0IGludGVyZmFjZSBTdW1tYXJ5IHtcbiAgICAvKipcbiAgICAgKiBBIHNob3J0IHN1bW1hcnkgb2YgdGhlIHJlYXNvbmluZyB1c2VkIGJ5IHRoZSBtb2RlbCB3aGVuIGdlbmVyYXRpbmcgdGhlIHJlc3BvbnNlLlxuICAgICAqL1xuICAgIHRleHQ6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBvYmplY3QuIEFsd2F5cyBgc3VtbWFyeV90ZXh0YC5cbiAgICAgKi9cbiAgICB0eXBlOiAnc3VtbWFyeV90ZXh0JztcbiAgfVxufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbiB0aGVyZSBpcyBhIGRlbHRhIChwYXJ0aWFsIHVwZGF0ZSkgdG8gdGhlIHJlYXNvbmluZyBzdW1tYXJ5IGNvbnRlbnQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VSZWFzb25pbmdTdW1tYXJ5RGVsdGFFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgcGFydGlhbCB1cGRhdGUgdG8gdGhlIHJlYXNvbmluZyBzdW1tYXJ5IGNvbnRlbnQuXG4gICAqL1xuICBkZWx0YTogdW5rbm93bjtcblxuICAvKipcbiAgICogVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBpdGVtIGZvciB3aGljaCB0aGUgcmVhc29uaW5nIHN1bW1hcnkgaXMgYmVpbmdcbiAgICogdXBkYXRlZC5cbiAgICovXG4gIGl0ZW1faWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBvdXRwdXQgaXRlbSBpbiB0aGUgcmVzcG9uc2UncyBvdXRwdXQgYXJyYXkuXG4gICAqL1xuICBvdXRwdXRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGlzIGV2ZW50LlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgc3VtbWFyeSBwYXJ0IHdpdGhpbiB0aGUgb3V0cHV0IGl0ZW0uXG4gICAqL1xuICBzdW1tYXJ5X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC4gQWx3YXlzICdyZXNwb25zZS5yZWFzb25pbmdfc3VtbWFyeS5kZWx0YScuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2UucmVhc29uaW5nX3N1bW1hcnkuZGVsdGEnO1xufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbiB0aGUgcmVhc29uaW5nIHN1bW1hcnkgY29udGVudCBpcyBmaW5hbGl6ZWQgZm9yIGFuIGl0ZW0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VSZWFzb25pbmdTdW1tYXJ5RG9uZUV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgaXRlbSBmb3Igd2hpY2ggdGhlIHJlYXNvbmluZyBzdW1tYXJ5IGlzIGZpbmFsaXplZC5cbiAgICovXG4gIGl0ZW1faWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBvdXRwdXQgaXRlbSBpbiB0aGUgcmVzcG9uc2UncyBvdXRwdXQgYXJyYXkuXG4gICAqL1xuICBvdXRwdXRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGlzIGV2ZW50LlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgc3VtbWFyeSBwYXJ0IHdpdGhpbiB0aGUgb3V0cHV0IGl0ZW0uXG4gICAqL1xuICBzdW1tYXJ5X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBmaW5hbGl6ZWQgcmVhc29uaW5nIHN1bW1hcnkgdGV4dC5cbiAgICovXG4gIHRleHQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGV2ZW50LiBBbHdheXMgJ3Jlc3BvbnNlLnJlYXNvbmluZ19zdW1tYXJ5LmRvbmUnLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLnJlYXNvbmluZ19zdW1tYXJ5LmRvbmUnO1xufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbiBhIG5ldyByZWFzb25pbmcgc3VtbWFyeSBwYXJ0IGlzIGFkZGVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlUmVhc29uaW5nU3VtbWFyeVBhcnRBZGRlZEV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgaXRlbSB0aGlzIHN1bW1hcnkgcGFydCBpcyBhc3NvY2lhdGVkIHdpdGguXG4gICAqL1xuICBpdGVtX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgb3V0cHV0IGl0ZW0gdGhpcyBzdW1tYXJ5IHBhcnQgaXMgYXNzb2NpYXRlZCB3aXRoLlxuICAgKi9cbiAgb3V0cHV0X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBzdW1tYXJ5IHBhcnQgdGhhdCB3YXMgYWRkZWQuXG4gICAqL1xuICBwYXJ0OiBSZXNwb25zZVJlYXNvbmluZ1N1bW1hcnlQYXJ0QWRkZWRFdmVudC5QYXJ0O1xuXG4gIC8qKlxuICAgKiBUaGUgc2VxdWVuY2UgbnVtYmVyIG9mIHRoaXMgZXZlbnQuXG4gICAqL1xuICBzZXF1ZW5jZV9udW1iZXI6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBzdW1tYXJ5IHBhcnQgd2l0aGluIHRoZSByZWFzb25pbmcgc3VtbWFyeS5cbiAgICovXG4gIHN1bW1hcnlfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGV2ZW50LiBBbHdheXMgYHJlc3BvbnNlLnJlYXNvbmluZ19zdW1tYXJ5X3BhcnQuYWRkZWRgLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLnJlYXNvbmluZ19zdW1tYXJ5X3BhcnQuYWRkZWQnO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFJlc3BvbnNlUmVhc29uaW5nU3VtbWFyeVBhcnRBZGRlZEV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBzdW1tYXJ5IHBhcnQgdGhhdCB3YXMgYWRkZWQuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFBhcnQge1xuICAgIC8qKlxuICAgICAqIFRoZSB0ZXh0IG9mIHRoZSBzdW1tYXJ5IHBhcnQuXG4gICAgICovXG4gICAgdGV4dDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIHN1bW1hcnkgcGFydC4gQWx3YXlzIGBzdW1tYXJ5X3RleHRgLlxuICAgICAqL1xuICAgIHR5cGU6ICdzdW1tYXJ5X3RleHQnO1xuICB9XG59XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuIGEgcmVhc29uaW5nIHN1bW1hcnkgcGFydCBpcyBjb21wbGV0ZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VSZWFzb25pbmdTdW1tYXJ5UGFydERvbmVFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIGl0ZW0gdGhpcyBzdW1tYXJ5IHBhcnQgaXMgYXNzb2NpYXRlZCB3aXRoLlxuICAgKi9cbiAgaXRlbV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIG91dHB1dCBpdGVtIHRoaXMgc3VtbWFyeSBwYXJ0IGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAgICovXG4gIG91dHB1dF9pbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgY29tcGxldGVkIHN1bW1hcnkgcGFydC5cbiAgICovXG4gIHBhcnQ6IFJlc3BvbnNlUmVhc29uaW5nU3VtbWFyeVBhcnREb25lRXZlbnQuUGFydDtcblxuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGlzIGV2ZW50LlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgc3VtbWFyeSBwYXJ0IHdpdGhpbiB0aGUgcmVhc29uaW5nIHN1bW1hcnkuXG4gICAqL1xuICBzdW1tYXJ5X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC4gQWx3YXlzIGByZXNwb25zZS5yZWFzb25pbmdfc3VtbWFyeV9wYXJ0LmRvbmVgLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLnJlYXNvbmluZ19zdW1tYXJ5X3BhcnQuZG9uZSc7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgUmVzcG9uc2VSZWFzb25pbmdTdW1tYXJ5UGFydERvbmVFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgY29tcGxldGVkIHN1bW1hcnkgcGFydC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgUGFydCB7XG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgb2YgdGhlIHN1bW1hcnkgcGFydC5cbiAgICAgKi9cbiAgICB0ZXh0OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgc3VtbWFyeSBwYXJ0LiBBbHdheXMgYHN1bW1hcnlfdGV4dGAuXG4gICAgICovXG4gICAgdHlwZTogJ3N1bW1hcnlfdGV4dCc7XG4gIH1cbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW4gYSBkZWx0YSBpcyBhZGRlZCB0byBhIHJlYXNvbmluZyBzdW1tYXJ5IHRleHQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VSZWFzb25pbmdTdW1tYXJ5VGV4dERlbHRhRXZlbnQge1xuICAvKipcbiAgICogVGhlIHRleHQgZGVsdGEgdGhhdCB3YXMgYWRkZWQgdG8gdGhlIHN1bW1hcnkuXG4gICAqL1xuICBkZWx0YTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIGl0ZW0gdGhpcyBzdW1tYXJ5IHRleHQgZGVsdGEgaXMgYXNzb2NpYXRlZCB3aXRoLlxuICAgKi9cbiAgaXRlbV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIG91dHB1dCBpdGVtIHRoaXMgc3VtbWFyeSB0ZXh0IGRlbHRhIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAgICovXG4gIG91dHB1dF9pbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgc2VxdWVuY2UgbnVtYmVyIG9mIHRoaXMgZXZlbnQuXG4gICAqL1xuICBzZXF1ZW5jZV9udW1iZXI6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBzdW1tYXJ5IHBhcnQgd2l0aGluIHRoZSByZWFzb25pbmcgc3VtbWFyeS5cbiAgICovXG4gIHN1bW1hcnlfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGV2ZW50LiBBbHdheXMgYHJlc3BvbnNlLnJlYXNvbmluZ19zdW1tYXJ5X3RleHQuZGVsdGFgLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLnJlYXNvbmluZ19zdW1tYXJ5X3RleHQuZGVsdGEnO1xufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbiBhIHJlYXNvbmluZyBzdW1tYXJ5IHRleHQgaXMgY29tcGxldGVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlUmVhc29uaW5nU3VtbWFyeVRleHREb25lRXZlbnQge1xuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBpdGVtIHRoaXMgc3VtbWFyeSB0ZXh0IGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAgICovXG4gIGl0ZW1faWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBvdXRwdXQgaXRlbSB0aGlzIHN1bW1hcnkgdGV4dCBpcyBhc3NvY2lhdGVkIHdpdGguXG4gICAqL1xuICBvdXRwdXRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGlzIGV2ZW50LlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgc3VtbWFyeSBwYXJ0IHdpdGhpbiB0aGUgcmVhc29uaW5nIHN1bW1hcnkuXG4gICAqL1xuICBzdW1tYXJ5X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBmdWxsIHRleHQgb2YgdGhlIGNvbXBsZXRlZCByZWFzb25pbmcgc3VtbWFyeS5cbiAgICovXG4gIHRleHQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGV2ZW50LiBBbHdheXMgYHJlc3BvbnNlLnJlYXNvbmluZ19zdW1tYXJ5X3RleHQuZG9uZWAuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2UucmVhc29uaW5nX3N1bW1hcnlfdGV4dC5kb25lJztcbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdGhlcmUgaXMgYSBwYXJ0aWFsIHJlZnVzYWwgdGV4dC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZVJlZnVzYWxEZWx0YUV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgY29udGVudCBwYXJ0IHRoYXQgdGhlIHJlZnVzYWwgdGV4dCBpcyBhZGRlZCB0by5cbiAgICovXG4gIGNvbnRlbnRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHJlZnVzYWwgdGV4dCB0aGF0IGlzIGFkZGVkLlxuICAgKi9cbiAgZGVsdGE6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBvdXRwdXQgaXRlbSB0aGF0IHRoZSByZWZ1c2FsIHRleHQgaXMgYWRkZWQgdG8uXG4gICAqL1xuICBpdGVtX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgb3V0cHV0IGl0ZW0gdGhhdCB0aGUgcmVmdXNhbCB0ZXh0IGlzIGFkZGVkIHRvLlxuICAgKi9cbiAgb3V0cHV0X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBzZXF1ZW5jZSBudW1iZXIgb2YgdGhpcyBldmVudC5cbiAgICovXG4gIHNlcXVlbmNlX251bWJlcjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgZXZlbnQuIEFsd2F5cyBgcmVzcG9uc2UucmVmdXNhbC5kZWx0YWAuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2UucmVmdXNhbC5kZWx0YSc7XG59XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuIHJlZnVzYWwgdGV4dCBpcyBmaW5hbGl6ZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VSZWZ1c2FsRG9uZUV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgY29udGVudCBwYXJ0IHRoYXQgdGhlIHJlZnVzYWwgdGV4dCBpcyBmaW5hbGl6ZWQuXG4gICAqL1xuICBjb250ZW50X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgb3V0cHV0IGl0ZW0gdGhhdCB0aGUgcmVmdXNhbCB0ZXh0IGlzIGZpbmFsaXplZC5cbiAgICovXG4gIGl0ZW1faWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBvdXRwdXQgaXRlbSB0aGF0IHRoZSByZWZ1c2FsIHRleHQgaXMgZmluYWxpemVkLlxuICAgKi9cbiAgb3V0cHV0X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSByZWZ1c2FsIHRleHQgdGhhdCBpcyBmaW5hbGl6ZWQuXG4gICAqL1xuICByZWZ1c2FsOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBzZXF1ZW5jZSBudW1iZXIgb2YgdGhpcyBldmVudC5cbiAgICovXG4gIHNlcXVlbmNlX251bWJlcjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgZXZlbnQuIEFsd2F5cyBgcmVzcG9uc2UucmVmdXNhbC5kb25lYC5cbiAgICovXG4gIHR5cGU6ICdyZXNwb25zZS5yZWZ1c2FsLmRvbmUnO1xufVxuXG4vKipcbiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJlc3BvbnNlIGdlbmVyYXRpb24uIE9uZSBvZiBgY29tcGxldGVkYCwgYGZhaWxlZGAsXG4gKiBgaW5fcHJvZ3Jlc3NgLCBgY2FuY2VsbGVkYCwgYHF1ZXVlZGAsIG9yIGBpbmNvbXBsZXRlYC5cbiAqL1xuZXhwb3J0IHR5cGUgUmVzcG9uc2VTdGF0dXMgPSAnY29tcGxldGVkJyB8ICdmYWlsZWQnIHwgJ2luX3Byb2dyZXNzJyB8ICdjYW5jZWxsZWQnIHwgJ3F1ZXVlZCcgfCAnaW5jb21wbGV0ZSc7XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuIHRoZXJlIGlzIGEgcGFydGlhbCBhdWRpbyByZXNwb25zZS5cbiAqL1xuZXhwb3J0IHR5cGUgUmVzcG9uc2VTdHJlYW1FdmVudCA9XG4gIHwgUmVzcG9uc2VBdWRpb0RlbHRhRXZlbnRcbiAgfCBSZXNwb25zZUF1ZGlvRG9uZUV2ZW50XG4gIHwgUmVzcG9uc2VBdWRpb1RyYW5zY3JpcHREZWx0YUV2ZW50XG4gIHwgUmVzcG9uc2VBdWRpb1RyYW5zY3JpcHREb25lRXZlbnRcbiAgfCBSZXNwb25zZUNvZGVJbnRlcnByZXRlckNhbGxDb2RlRGVsdGFFdmVudFxuICB8IFJlc3BvbnNlQ29kZUludGVycHJldGVyQ2FsbENvZGVEb25lRXZlbnRcbiAgfCBSZXNwb25zZUNvZGVJbnRlcnByZXRlckNhbGxDb21wbGV0ZWRFdmVudFxuICB8IFJlc3BvbnNlQ29kZUludGVycHJldGVyQ2FsbEluUHJvZ3Jlc3NFdmVudFxuICB8IFJlc3BvbnNlQ29kZUludGVycHJldGVyQ2FsbEludGVycHJldGluZ0V2ZW50XG4gIHwgUmVzcG9uc2VDb21wbGV0ZWRFdmVudFxuICB8IFJlc3BvbnNlQ29udGVudFBhcnRBZGRlZEV2ZW50XG4gIHwgUmVzcG9uc2VDb250ZW50UGFydERvbmVFdmVudFxuICB8IFJlc3BvbnNlQ3JlYXRlZEV2ZW50XG4gIHwgUmVzcG9uc2VFcnJvckV2ZW50XG4gIHwgUmVzcG9uc2VGaWxlU2VhcmNoQ2FsbENvbXBsZXRlZEV2ZW50XG4gIHwgUmVzcG9uc2VGaWxlU2VhcmNoQ2FsbEluUHJvZ3Jlc3NFdmVudFxuICB8IFJlc3BvbnNlRmlsZVNlYXJjaENhbGxTZWFyY2hpbmdFdmVudFxuICB8IFJlc3BvbnNlRnVuY3Rpb25DYWxsQXJndW1lbnRzRGVsdGFFdmVudFxuICB8IFJlc3BvbnNlRnVuY3Rpb25DYWxsQXJndW1lbnRzRG9uZUV2ZW50XG4gIHwgUmVzcG9uc2VJblByb2dyZXNzRXZlbnRcbiAgfCBSZXNwb25zZUZhaWxlZEV2ZW50XG4gIHwgUmVzcG9uc2VJbmNvbXBsZXRlRXZlbnRcbiAgfCBSZXNwb25zZU91dHB1dEl0ZW1BZGRlZEV2ZW50XG4gIHwgUmVzcG9uc2VPdXRwdXRJdGVtRG9uZUV2ZW50XG4gIHwgUmVzcG9uc2VSZWFzb25pbmdTdW1tYXJ5UGFydEFkZGVkRXZlbnRcbiAgfCBSZXNwb25zZVJlYXNvbmluZ1N1bW1hcnlQYXJ0RG9uZUV2ZW50XG4gIHwgUmVzcG9uc2VSZWFzb25pbmdTdW1tYXJ5VGV4dERlbHRhRXZlbnRcbiAgfCBSZXNwb25zZVJlYXNvbmluZ1N1bW1hcnlUZXh0RG9uZUV2ZW50XG4gIHwgUmVzcG9uc2VSZWZ1c2FsRGVsdGFFdmVudFxuICB8IFJlc3BvbnNlUmVmdXNhbERvbmVFdmVudFxuICB8IFJlc3BvbnNlVGV4dERlbHRhRXZlbnRcbiAgfCBSZXNwb25zZVRleHREb25lRXZlbnRcbiAgfCBSZXNwb25zZVdlYlNlYXJjaENhbGxDb21wbGV0ZWRFdmVudFxuICB8IFJlc3BvbnNlV2ViU2VhcmNoQ2FsbEluUHJvZ3Jlc3NFdmVudFxuICB8IFJlc3BvbnNlV2ViU2VhcmNoQ2FsbFNlYXJjaGluZ0V2ZW50XG4gIHwgUmVzcG9uc2VJbWFnZUdlbkNhbGxDb21wbGV0ZWRFdmVudFxuICB8IFJlc3BvbnNlSW1hZ2VHZW5DYWxsR2VuZXJhdGluZ0V2ZW50XG4gIHwgUmVzcG9uc2VJbWFnZUdlbkNhbGxJblByb2dyZXNzRXZlbnRcbiAgfCBSZXNwb25zZUltYWdlR2VuQ2FsbFBhcnRpYWxJbWFnZUV2ZW50XG4gIHwgUmVzcG9uc2VNY3BDYWxsQXJndW1lbnRzRGVsdGFFdmVudFxuICB8IFJlc3BvbnNlTWNwQ2FsbEFyZ3VtZW50c0RvbmVFdmVudFxuICB8IFJlc3BvbnNlTWNwQ2FsbENvbXBsZXRlZEV2ZW50XG4gIHwgUmVzcG9uc2VNY3BDYWxsRmFpbGVkRXZlbnRcbiAgfCBSZXNwb25zZU1jcENhbGxJblByb2dyZXNzRXZlbnRcbiAgfCBSZXNwb25zZU1jcExpc3RUb29sc0NvbXBsZXRlZEV2ZW50XG4gIHwgUmVzcG9uc2VNY3BMaXN0VG9vbHNGYWlsZWRFdmVudFxuICB8IFJlc3BvbnNlTWNwTGlzdFRvb2xzSW5Qcm9ncmVzc0V2ZW50XG4gIHwgUmVzcG9uc2VPdXRwdXRUZXh0QW5ub3RhdGlvbkFkZGVkRXZlbnRcbiAgfCBSZXNwb25zZVF1ZXVlZEV2ZW50XG4gIHwgUmVzcG9uc2VSZWFzb25pbmdEZWx0YUV2ZW50XG4gIHwgUmVzcG9uc2VSZWFzb25pbmdEb25lRXZlbnRcbiAgfCBSZXNwb25zZVJlYXNvbmluZ1N1bW1hcnlEZWx0YUV2ZW50XG4gIHwgUmVzcG9uc2VSZWFzb25pbmdTdW1tYXJ5RG9uZUV2ZW50O1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgYSB0ZXh0IHJlc3BvbnNlIGZyb20gdGhlIG1vZGVsLiBDYW4gYmUgcGxhaW4gdGV4dCBvclxuICogc3RydWN0dXJlZCBKU09OIGRhdGEuIExlYXJuIG1vcmU6XG4gKlxuICogLSBbVGV4dCBpbnB1dHMgYW5kIG91dHB1dHNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy90ZXh0KVxuICogLSBbU3RydWN0dXJlZCBPdXRwdXRzXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvc3RydWN0dXJlZC1vdXRwdXRzKVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlVGV4dENvbmZpZyB7XG4gIC8qKlxuICAgKiBBbiBvYmplY3Qgc3BlY2lmeWluZyB0aGUgZm9ybWF0IHRoYXQgdGhlIG1vZGVsIG11c3Qgb3V0cHV0LlxuICAgKlxuICAgKiBDb25maWd1cmluZyBgeyBcInR5cGVcIjogXCJqc29uX3NjaGVtYVwiIH1gIGVuYWJsZXMgU3RydWN0dXJlZCBPdXRwdXRzLCB3aGljaFxuICAgKiBlbnN1cmVzIHRoZSBtb2RlbCB3aWxsIG1hdGNoIHlvdXIgc3VwcGxpZWQgSlNPTiBzY2hlbWEuIExlYXJuIG1vcmUgaW4gdGhlXG4gICAqIFtTdHJ1Y3R1cmVkIE91dHB1dHMgZ3VpZGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9zdHJ1Y3R1cmVkLW91dHB1dHMpLlxuICAgKlxuICAgKiBUaGUgZGVmYXVsdCBmb3JtYXQgaXMgYHsgXCJ0eXBlXCI6IFwidGV4dFwiIH1gIHdpdGggbm8gYWRkaXRpb25hbCBvcHRpb25zLlxuICAgKlxuICAgKiAqKk5vdCByZWNvbW1lbmRlZCBmb3IgZ3B0LTRvIGFuZCBuZXdlciBtb2RlbHM6KipcbiAgICpcbiAgICogU2V0dGluZyB0byBgeyBcInR5cGVcIjogXCJqc29uX29iamVjdFwiIH1gIGVuYWJsZXMgdGhlIG9sZGVyIEpTT04gbW9kZSwgd2hpY2hcbiAgICogZW5zdXJlcyB0aGUgbWVzc2FnZSB0aGUgbW9kZWwgZ2VuZXJhdGVzIGlzIHZhbGlkIEpTT04uIFVzaW5nIGBqc29uX3NjaGVtYWAgaXNcbiAgICogcHJlZmVycmVkIGZvciBtb2RlbHMgdGhhdCBzdXBwb3J0IGl0LlxuICAgKi9cbiAgZm9ybWF0PzogUmVzcG9uc2VGb3JtYXRUZXh0Q29uZmlnO1xufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbiB0aGVyZSBpcyBhbiBhZGRpdGlvbmFsIHRleHQgZGVsdGEuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VUZXh0RGVsdGFFdmVudCB7XG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIGNvbnRlbnQgcGFydCB0aGF0IHRoZSB0ZXh0IGRlbHRhIHdhcyBhZGRlZCB0by5cbiAgICovXG4gIGNvbnRlbnRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHRleHQgZGVsdGEgdGhhdCB3YXMgYWRkZWQuXG4gICAqL1xuICBkZWx0YTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIG91dHB1dCBpdGVtIHRoYXQgdGhlIHRleHQgZGVsdGEgd2FzIGFkZGVkIHRvLlxuICAgKi9cbiAgaXRlbV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIG91dHB1dCBpdGVtIHRoYXQgdGhlIHRleHQgZGVsdGEgd2FzIGFkZGVkIHRvLlxuICAgKi9cbiAgb3V0cHV0X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBzZXF1ZW5jZSBudW1iZXIgZm9yIHRoaXMgZXZlbnQuXG4gICAqL1xuICBzZXF1ZW5jZV9udW1iZXI6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGV2ZW50LiBBbHdheXMgYHJlc3BvbnNlLm91dHB1dF90ZXh0LmRlbHRhYC5cbiAgICovXG4gIHR5cGU6ICdyZXNwb25zZS5vdXRwdXRfdGV4dC5kZWx0YSc7XG59XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuIHRleHQgY29udGVudCBpcyBmaW5hbGl6ZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VUZXh0RG9uZUV2ZW50IHtcbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgY29udGVudCBwYXJ0IHRoYXQgdGhlIHRleHQgY29udGVudCBpcyBmaW5hbGl6ZWQuXG4gICAqL1xuICBjb250ZW50X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgb3V0cHV0IGl0ZW0gdGhhdCB0aGUgdGV4dCBjb250ZW50IGlzIGZpbmFsaXplZC5cbiAgICovXG4gIGl0ZW1faWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBvdXRwdXQgaXRlbSB0aGF0IHRoZSB0ZXh0IGNvbnRlbnQgaXMgZmluYWxpemVkLlxuICAgKi9cbiAgb3V0cHV0X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBzZXF1ZW5jZSBudW1iZXIgZm9yIHRoaXMgZXZlbnQuXG4gICAqL1xuICBzZXF1ZW5jZV9udW1iZXI6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHRleHQgY29udGVudCB0aGF0IGlzIGZpbmFsaXplZC5cbiAgICovXG4gIHRleHQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGV2ZW50LiBBbHdheXMgYHJlc3BvbnNlLm91dHB1dF90ZXh0LmRvbmVgLlxuICAgKi9cbiAgdHlwZTogJ3Jlc3BvbnNlLm91dHB1dF90ZXh0LmRvbmUnO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgdG9rZW4gdXNhZ2UgZGV0YWlscyBpbmNsdWRpbmcgaW5wdXQgdG9rZW5zLCBvdXRwdXQgdG9rZW5zLCBhXG4gKiBicmVha2Rvd24gb2Ygb3V0cHV0IHRva2VucywgYW5kIHRoZSB0b3RhbCB0b2tlbnMgdXNlZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZVVzYWdlIHtcbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgaW5wdXQgdG9rZW5zLlxuICAgKi9cbiAgaW5wdXRfdG9rZW5zOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEEgZGV0YWlsZWQgYnJlYWtkb3duIG9mIHRoZSBpbnB1dCB0b2tlbnMuXG4gICAqL1xuICBpbnB1dF90b2tlbnNfZGV0YWlsczogUmVzcG9uc2VVc2FnZS5JbnB1dFRva2Vuc0RldGFpbHM7XG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2Ygb3V0cHV0IHRva2Vucy5cbiAgICovXG4gIG91dHB1dF90b2tlbnM6IG51bWJlcjtcblxuICAvKipcbiAgICogQSBkZXRhaWxlZCBicmVha2Rvd24gb2YgdGhlIG91dHB1dCB0b2tlbnMuXG4gICAqL1xuICBvdXRwdXRfdG9rZW5zX2RldGFpbHM6IFJlc3BvbnNlVXNhZ2UuT3V0cHV0VG9rZW5zRGV0YWlscztcblxuICAvKipcbiAgICogVGhlIHRvdGFsIG51bWJlciBvZiB0b2tlbnMgdXNlZC5cbiAgICovXG4gIHRvdGFsX3Rva2VuczogbnVtYmVyO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFJlc3BvbnNlVXNhZ2Uge1xuICAvKipcbiAgICogQSBkZXRhaWxlZCBicmVha2Rvd24gb2YgdGhlIGlucHV0IHRva2Vucy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgSW5wdXRUb2tlbnNEZXRhaWxzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIHRva2VucyB0aGF0IHdlcmUgcmV0cmlldmVkIGZyb20gdGhlIGNhY2hlLlxuICAgICAqIFtNb3JlIG9uIHByb21wdCBjYWNoaW5nXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvcHJvbXB0LWNhY2hpbmcpLlxuICAgICAqL1xuICAgIGNhY2hlZF90b2tlbnM6IG51bWJlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGRldGFpbGVkIGJyZWFrZG93biBvZiB0aGUgb3V0cHV0IHRva2Vucy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgT3V0cHV0VG9rZW5zRGV0YWlscyB7XG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiByZWFzb25pbmcgdG9rZW5zLlxuICAgICAqL1xuICAgIHJlYXNvbmluZ190b2tlbnM6IG51bWJlcjtcbiAgfVxufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbiBhIHdlYiBzZWFyY2ggY2FsbCBpcyBjb21wbGV0ZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VXZWJTZWFyY2hDYWxsQ29tcGxldGVkRXZlbnQge1xuICAvKipcbiAgICogVW5pcXVlIElEIGZvciB0aGUgb3V0cHV0IGl0ZW0gYXNzb2NpYXRlZCB3aXRoIHRoZSB3ZWIgc2VhcmNoIGNhbGwuXG4gICAqL1xuICBpdGVtX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBpbmRleCBvZiB0aGUgb3V0cHV0IGl0ZW0gdGhhdCB0aGUgd2ViIHNlYXJjaCBjYWxsIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAgICovXG4gIG91dHB1dF9pbmRleDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgc2VxdWVuY2UgbnVtYmVyIG9mIHRoZSB3ZWIgc2VhcmNoIGNhbGwgYmVpbmcgcHJvY2Vzc2VkLlxuICAgKi9cbiAgc2VxdWVuY2VfbnVtYmVyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBldmVudC4gQWx3YXlzIGByZXNwb25zZS53ZWJfc2VhcmNoX2NhbGwuY29tcGxldGVkYC5cbiAgICovXG4gIHR5cGU6ICdyZXNwb25zZS53ZWJfc2VhcmNoX2NhbGwuY29tcGxldGVkJztcbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW4gYSB3ZWIgc2VhcmNoIGNhbGwgaXMgaW5pdGlhdGVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlV2ViU2VhcmNoQ2FsbEluUHJvZ3Jlc3NFdmVudCB7XG4gIC8qKlxuICAgKiBVbmlxdWUgSUQgZm9yIHRoZSBvdXRwdXQgaXRlbSBhc3NvY2lhdGVkIHdpdGggdGhlIHdlYiBzZWFyY2ggY2FsbC5cbiAgICovXG4gIGl0ZW1faWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGluZGV4IG9mIHRoZSBvdXRwdXQgaXRlbSB0aGF0IHRoZSB3ZWIgc2VhcmNoIGNhbGwgaXMgYXNzb2NpYXRlZCB3aXRoLlxuICAgKi9cbiAgb3V0cHV0X2luZGV4OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBzZXF1ZW5jZSBudW1iZXIgb2YgdGhlIHdlYiBzZWFyY2ggY2FsbCBiZWluZyBwcm9jZXNzZWQuXG4gICAqL1xuICBzZXF1ZW5jZV9udW1iZXI6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHR5cGUgb2YgdGhlIGV2ZW50LiBBbHdheXMgYHJlc3BvbnNlLndlYl9zZWFyY2hfY2FsbC5pbl9wcm9ncmVzc2AuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2Uud2ViX3NlYXJjaF9jYWxsLmluX3Byb2dyZXNzJztcbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW4gYSB3ZWIgc2VhcmNoIGNhbGwgaXMgZXhlY3V0aW5nLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlV2ViU2VhcmNoQ2FsbFNlYXJjaGluZ0V2ZW50IHtcbiAgLyoqXG4gICAqIFVuaXF1ZSBJRCBmb3IgdGhlIG91dHB1dCBpdGVtIGFzc29jaWF0ZWQgd2l0aCB0aGUgd2ViIHNlYXJjaCBjYWxsLlxuICAgKi9cbiAgaXRlbV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgaW5kZXggb2YgdGhlIG91dHB1dCBpdGVtIHRoYXQgdGhlIHdlYiBzZWFyY2ggY2FsbCBpcyBhc3NvY2lhdGVkIHdpdGguXG4gICAqL1xuICBvdXRwdXRfaW5kZXg6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGUgd2ViIHNlYXJjaCBjYWxsIGJlaW5nIHByb2Nlc3NlZC5cbiAgICovXG4gIHNlcXVlbmNlX251bWJlcjogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgZXZlbnQuIEFsd2F5cyBgcmVzcG9uc2Uud2ViX3NlYXJjaF9jYWxsLnNlYXJjaGluZ2AuXG4gICAqL1xuICB0eXBlOiAncmVzcG9uc2Uud2ViX3NlYXJjaF9jYWxsLnNlYXJjaGluZyc7XG59XG5cbi8qKlxuICogQSB0b29sIHRoYXQgY2FuIGJlIHVzZWQgdG8gZ2VuZXJhdGUgYSByZXNwb25zZS5cbiAqL1xuZXhwb3J0IHR5cGUgVG9vbCA9XG4gIHwgRnVuY3Rpb25Ub29sXG4gIHwgRmlsZVNlYXJjaFRvb2xcbiAgfCBXZWJTZWFyY2hUb29sXG4gIHwgQ29tcHV0ZXJUb29sXG4gIHwgVG9vbC5NY3BcbiAgfCBUb29sLkNvZGVJbnRlcnByZXRlclxuICB8IFRvb2wuSW1hZ2VHZW5lcmF0aW9uXG4gIHwgVG9vbC5Mb2NhbFNoZWxsO1xuXG5leHBvcnQgbmFtZXNwYWNlIFRvb2wge1xuICAvKipcbiAgICogR2l2ZSB0aGUgbW9kZWwgYWNjZXNzIHRvIGFkZGl0aW9uYWwgdG9vbHMgdmlhIHJlbW90ZSBNb2RlbCBDb250ZXh0IFByb3RvY29sXG4gICAqIChNQ1ApIHNlcnZlcnMuXG4gICAqIFtMZWFybiBtb3JlIGFib3V0IE1DUF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3Rvb2xzLXJlbW90ZS1tY3ApLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBNY3Age1xuICAgIC8qKlxuICAgICAqIEEgbGFiZWwgZm9yIHRoaXMgTUNQIHNlcnZlciwgdXNlZCB0byBpZGVudGlmeSBpdCBpbiB0b29sIGNhbGxzLlxuICAgICAqL1xuICAgIHNlcnZlcl9sYWJlbDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIFVSTCBmb3IgdGhlIE1DUCBzZXJ2ZXIuXG4gICAgICovXG4gICAgc2VydmVyX3VybDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIE1DUCB0b29sLiBBbHdheXMgYG1jcGAuXG4gICAgICovXG4gICAgdHlwZTogJ21jcCc7XG5cbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIGFsbG93ZWQgdG9vbCBuYW1lcyBvciBhIGZpbHRlciBvYmplY3QuXG4gICAgICovXG4gICAgYWxsb3dlZF90b29scz86IEFycmF5PHN0cmluZz4gfCBNY3AuTWNwQWxsb3dlZFRvb2xzRmlsdGVyIHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsIEhUVFAgaGVhZGVycyB0byBzZW5kIHRvIHRoZSBNQ1Agc2VydmVyLiBVc2UgZm9yIGF1dGhlbnRpY2F0aW9uIG9yIG90aGVyXG4gICAgICogcHVycG9zZXMuXG4gICAgICovXG4gICAgaGVhZGVycz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogU3BlY2lmeSB3aGljaCBvZiB0aGUgTUNQIHNlcnZlcidzIHRvb2xzIHJlcXVpcmUgYXBwcm92YWwuXG4gICAgICovXG4gICAgcmVxdWlyZV9hcHByb3ZhbD86IE1jcC5NY3BUb29sQXBwcm92YWxGaWx0ZXIgfCAnYWx3YXlzJyB8ICduZXZlcicgfCBudWxsO1xuICB9XG5cbiAgZXhwb3J0IG5hbWVzcGFjZSBNY3Age1xuICAgIC8qKlxuICAgICAqIEEgZmlsdGVyIG9iamVjdCB0byBzcGVjaWZ5IHdoaWNoIHRvb2xzIGFyZSBhbGxvd2VkLlxuICAgICAqL1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgTWNwQWxsb3dlZFRvb2xzRmlsdGVyIHtcbiAgICAgIC8qKlxuICAgICAgICogTGlzdCBvZiBhbGxvd2VkIHRvb2wgbmFtZXMuXG4gICAgICAgKi9cbiAgICAgIHRvb2xfbmFtZXM/OiBBcnJheTxzdHJpbmc+O1xuICAgIH1cblxuICAgIGV4cG9ydCBpbnRlcmZhY2UgTWNwVG9vbEFwcHJvdmFsRmlsdGVyIHtcbiAgICAgIC8qKlxuICAgICAgICogQSBsaXN0IG9mIHRvb2xzIHRoYXQgYWx3YXlzIHJlcXVpcmUgYXBwcm92YWwuXG4gICAgICAgKi9cbiAgICAgIGFsd2F5cz86IE1jcFRvb2xBcHByb3ZhbEZpbHRlci5BbHdheXM7XG5cbiAgICAgIC8qKlxuICAgICAgICogQSBsaXN0IG9mIHRvb2xzIHRoYXQgbmV2ZXIgcmVxdWlyZSBhcHByb3ZhbC5cbiAgICAgICAqL1xuICAgICAgbmV2ZXI/OiBNY3BUb29sQXBwcm92YWxGaWx0ZXIuTmV2ZXI7XG4gICAgfVxuXG4gICAgZXhwb3J0IG5hbWVzcGFjZSBNY3BUb29sQXBwcm92YWxGaWx0ZXIge1xuICAgICAgLyoqXG4gICAgICAgKiBBIGxpc3Qgb2YgdG9vbHMgdGhhdCBhbHdheXMgcmVxdWlyZSBhcHByb3ZhbC5cbiAgICAgICAqL1xuICAgICAgZXhwb3J0IGludGVyZmFjZSBBbHdheXMge1xuICAgICAgICAvKipcbiAgICAgICAgICogTGlzdCBvZiB0b29scyB0aGF0IHJlcXVpcmUgYXBwcm92YWwuXG4gICAgICAgICAqL1xuICAgICAgICB0b29sX25hbWVzPzogQXJyYXk8c3RyaW5nPjtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBBIGxpc3Qgb2YgdG9vbHMgdGhhdCBuZXZlciByZXF1aXJlIGFwcHJvdmFsLlxuICAgICAgICovXG4gICAgICBleHBvcnQgaW50ZXJmYWNlIE5ldmVyIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIExpc3Qgb2YgdG9vbHMgdGhhdCBkbyBub3QgcmVxdWlyZSBhcHByb3ZhbC5cbiAgICAgICAgICovXG4gICAgICAgIHRvb2xfbmFtZXM/OiBBcnJheTxzdHJpbmc+O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBIHRvb2wgdGhhdCBydW5zIFB5dGhvbiBjb2RlIHRvIGhlbHAgZ2VuZXJhdGUgYSByZXNwb25zZSB0byBhIHByb21wdC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgQ29kZUludGVycHJldGVyIHtcbiAgICAvKipcbiAgICAgKiBUaGUgY29kZSBpbnRlcnByZXRlciBjb250YWluZXIuIENhbiBiZSBhIGNvbnRhaW5lciBJRCBvciBhbiBvYmplY3QgdGhhdFxuICAgICAqIHNwZWNpZmllcyB1cGxvYWRlZCBmaWxlIElEcyB0byBtYWtlIGF2YWlsYWJsZSB0byB5b3VyIGNvZGUuXG4gICAgICovXG4gICAgY29udGFpbmVyOiBzdHJpbmcgfCBDb2RlSW50ZXJwcmV0ZXIuQ29kZUludGVycHJldGVyVG9vbEF1dG87XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgY29kZSBpbnRlcnByZXRlciB0b29sLiBBbHdheXMgYGNvZGVfaW50ZXJwcmV0ZXJgLlxuICAgICAqL1xuICAgIHR5cGU6ICdjb2RlX2ludGVycHJldGVyJztcbiAgfVxuXG4gIGV4cG9ydCBuYW1lc3BhY2UgQ29kZUludGVycHJldGVyIHtcbiAgICAvKipcbiAgICAgKiBDb25maWd1cmF0aW9uIGZvciBhIGNvZGUgaW50ZXJwcmV0ZXIgY29udGFpbmVyLiBPcHRpb25hbGx5IHNwZWNpZnkgdGhlIElEcyBvZlxuICAgICAqIHRoZSBmaWxlcyB0byBydW4gdGhlIGNvZGUgb24uXG4gICAgICovXG4gICAgZXhwb3J0IGludGVyZmFjZSBDb2RlSW50ZXJwcmV0ZXJUb29sQXV0byB7XG4gICAgICAvKipcbiAgICAgICAqIEFsd2F5cyBgYXV0b2AuXG4gICAgICAgKi9cbiAgICAgIHR5cGU6ICdhdXRvJztcblxuICAgICAgLyoqXG4gICAgICAgKiBBbiBvcHRpb25hbCBsaXN0IG9mIHVwbG9hZGVkIGZpbGVzIHRvIG1ha2UgYXZhaWxhYmxlIHRvIHlvdXIgY29kZS5cbiAgICAgICAqL1xuICAgICAgZmlsZV9pZHM/OiBBcnJheTxzdHJpbmc+O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBIHRvb2wgdGhhdCBnZW5lcmF0ZXMgaW1hZ2VzIHVzaW5nIGEgbW9kZWwgbGlrZSBgZ3B0LWltYWdlLTFgLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJbWFnZUdlbmVyYXRpb24ge1xuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBpbWFnZSBnZW5lcmF0aW9uIHRvb2wuIEFsd2F5cyBgaW1hZ2VfZ2VuZXJhdGlvbmAuXG4gICAgICovXG4gICAgdHlwZTogJ2ltYWdlX2dlbmVyYXRpb24nO1xuXG4gICAgLyoqXG4gICAgICogQmFja2dyb3VuZCB0eXBlIGZvciB0aGUgZ2VuZXJhdGVkIGltYWdlLiBPbmUgb2YgYHRyYW5zcGFyZW50YCwgYG9wYXF1ZWAsIG9yXG4gICAgICogYGF1dG9gLiBEZWZhdWx0OiBgYXV0b2AuXG4gICAgICovXG4gICAgYmFja2dyb3VuZD86ICd0cmFuc3BhcmVudCcgfCAnb3BhcXVlJyB8ICdhdXRvJztcblxuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsIG1hc2sgZm9yIGlucGFpbnRpbmcuIENvbnRhaW5zIGBpbWFnZV91cmxgIChzdHJpbmcsIG9wdGlvbmFsKSBhbmRcbiAgICAgKiBgZmlsZV9pZGAgKHN0cmluZywgb3B0aW9uYWwpLlxuICAgICAqL1xuICAgIGlucHV0X2ltYWdlX21hc2s/OiBJbWFnZUdlbmVyYXRpb24uSW5wdXRJbWFnZU1hc2s7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW1hZ2UgZ2VuZXJhdGlvbiBtb2RlbCB0byB1c2UuIERlZmF1bHQ6IGBncHQtaW1hZ2UtMWAuXG4gICAgICovXG4gICAgbW9kZWw/OiAnZ3B0LWltYWdlLTEnO1xuXG4gICAgLyoqXG4gICAgICogTW9kZXJhdGlvbiBsZXZlbCBmb3IgdGhlIGdlbmVyYXRlZCBpbWFnZS4gRGVmYXVsdDogYGF1dG9gLlxuICAgICAqL1xuICAgIG1vZGVyYXRpb24/OiAnYXV0bycgfCAnbG93JztcblxuICAgIC8qKlxuICAgICAqIENvbXByZXNzaW9uIGxldmVsIGZvciB0aGUgb3V0cHV0IGltYWdlLiBEZWZhdWx0OiAxMDAuXG4gICAgICovXG4gICAgb3V0cHV0X2NvbXByZXNzaW9uPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG91dHB1dCBmb3JtYXQgb2YgdGhlIGdlbmVyYXRlZCBpbWFnZS4gT25lIG9mIGBwbmdgLCBgd2VicGAsIG9yIGBqcGVnYC5cbiAgICAgKiBEZWZhdWx0OiBgcG5nYC5cbiAgICAgKi9cbiAgICBvdXRwdXRfZm9ybWF0PzogJ3BuZycgfCAnd2VicCcgfCAnanBlZyc7XG5cbiAgICAvKipcbiAgICAgKiBOdW1iZXIgb2YgcGFydGlhbCBpbWFnZXMgdG8gZ2VuZXJhdGUgaW4gc3RyZWFtaW5nIG1vZGUsIGZyb20gMCAoZGVmYXVsdCB2YWx1ZSlcbiAgICAgKiB0byAzLlxuICAgICAqL1xuICAgIHBhcnRpYWxfaW1hZ2VzPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHF1YWxpdHkgb2YgdGhlIGdlbmVyYXRlZCBpbWFnZS4gT25lIG9mIGBsb3dgLCBgbWVkaXVtYCwgYGhpZ2hgLCBvciBgYXV0b2AuXG4gICAgICogRGVmYXVsdDogYGF1dG9gLlxuICAgICAqL1xuICAgIHF1YWxpdHk/OiAnbG93JyB8ICdtZWRpdW0nIHwgJ2hpZ2gnIHwgJ2F1dG8nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNpemUgb2YgdGhlIGdlbmVyYXRlZCBpbWFnZS4gT25lIG9mIGAxMDI0eDEwMjRgLCBgMTAyNHgxNTM2YCwgYDE1MzZ4MTAyNGAsXG4gICAgICogb3IgYGF1dG9gLiBEZWZhdWx0OiBgYXV0b2AuXG4gICAgICovXG4gICAgc2l6ZT86ICcxMDI0eDEwMjQnIHwgJzEwMjR4MTUzNicgfCAnMTUzNngxMDI0JyB8ICdhdXRvJztcbiAgfVxuXG4gIGV4cG9ydCBuYW1lc3BhY2UgSW1hZ2VHZW5lcmF0aW9uIHtcbiAgICAvKipcbiAgICAgKiBPcHRpb25hbCBtYXNrIGZvciBpbnBhaW50aW5nLiBDb250YWlucyBgaW1hZ2VfdXJsYCAoc3RyaW5nLCBvcHRpb25hbCkgYW5kXG4gICAgICogYGZpbGVfaWRgIChzdHJpbmcsIG9wdGlvbmFsKS5cbiAgICAgKi9cbiAgICBleHBvcnQgaW50ZXJmYWNlIElucHV0SW1hZ2VNYXNrIHtcbiAgICAgIC8qKlxuICAgICAgICogRmlsZSBJRCBmb3IgdGhlIG1hc2sgaW1hZ2UuXG4gICAgICAgKi9cbiAgICAgIGZpbGVfaWQ/OiBzdHJpbmc7XG5cbiAgICAgIC8qKlxuICAgICAgICogQmFzZTY0LWVuY29kZWQgbWFzayBpbWFnZS5cbiAgICAgICAqL1xuICAgICAgaW1hZ2VfdXJsPzogc3RyaW5nO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBIHRvb2wgdGhhdCBhbGxvd3MgdGhlIG1vZGVsIHRvIGV4ZWN1dGUgc2hlbGwgY29tbWFuZHMgaW4gYSBsb2NhbCBlbnZpcm9ubWVudC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgTG9jYWxTaGVsbCB7XG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIGxvY2FsIHNoZWxsIHRvb2wuIEFsd2F5cyBgbG9jYWxfc2hlbGxgLlxuICAgICAqL1xuICAgIHR5cGU6ICdsb2NhbF9zaGVsbCc7XG4gIH1cbn1cblxuLyoqXG4gKiBVc2UgdGhpcyBvcHRpb24gdG8gZm9yY2UgdGhlIG1vZGVsIHRvIGNhbGwgYSBzcGVjaWZpYyBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUb29sQ2hvaWNlRnVuY3Rpb24ge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uIHRvIGNhbGwuXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEZvciBmdW5jdGlvbiBjYWxsaW5nLCB0aGUgdHlwZSBpcyBhbHdheXMgYGZ1bmN0aW9uYC5cbiAgICovXG4gIHR5cGU6ICdmdW5jdGlvbic7XG59XG5cbi8qKlxuICogQ29udHJvbHMgd2hpY2ggKGlmIGFueSkgdG9vbCBpcyBjYWxsZWQgYnkgdGhlIG1vZGVsLlxuICpcbiAqIGBub25lYCBtZWFucyB0aGUgbW9kZWwgd2lsbCBub3QgY2FsbCBhbnkgdG9vbCBhbmQgaW5zdGVhZCBnZW5lcmF0ZXMgYSBtZXNzYWdlLlxuICpcbiAqIGBhdXRvYCBtZWFucyB0aGUgbW9kZWwgY2FuIHBpY2sgYmV0d2VlbiBnZW5lcmF0aW5nIGEgbWVzc2FnZSBvciBjYWxsaW5nIG9uZSBvclxuICogbW9yZSB0b29scy5cbiAqXG4gKiBgcmVxdWlyZWRgIG1lYW5zIHRoZSBtb2RlbCBtdXN0IGNhbGwgb25lIG9yIG1vcmUgdG9vbHMuXG4gKi9cbmV4cG9ydCB0eXBlIFRvb2xDaG9pY2VPcHRpb25zID0gJ25vbmUnIHwgJ2F1dG8nIHwgJ3JlcXVpcmVkJztcblxuLyoqXG4gKiBJbmRpY2F0ZXMgdGhhdCB0aGUgbW9kZWwgc2hvdWxkIHVzZSBhIGJ1aWx0LWluIHRvb2wgdG8gZ2VuZXJhdGUgYSByZXNwb25zZS5cbiAqIFtMZWFybiBtb3JlIGFib3V0IGJ1aWx0LWluIHRvb2xzXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvdG9vbHMpLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRvb2xDaG9pY2VUeXBlcyB7XG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiBob3N0ZWQgdG9vbCB0aGUgbW9kZWwgc2hvdWxkIHRvIHVzZS4gTGVhcm4gbW9yZSBhYm91dFxuICAgKiBbYnVpbHQtaW4gdG9vbHNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy90b29scykuXG4gICAqXG4gICAqIEFsbG93ZWQgdmFsdWVzIGFyZTpcbiAgICpcbiAgICogLSBgZmlsZV9zZWFyY2hgXG4gICAqIC0gYHdlYl9zZWFyY2hfcHJldmlld2BcbiAgICogLSBgY29tcHV0ZXJfdXNlX3ByZXZpZXdgXG4gICAqIC0gYGNvZGVfaW50ZXJwcmV0ZXJgXG4gICAqIC0gYG1jcGBcbiAgICogLSBgaW1hZ2VfZ2VuZXJhdGlvbmBcbiAgICovXG4gIHR5cGU6XG4gICAgfCAnZmlsZV9zZWFyY2gnXG4gICAgfCAnd2ViX3NlYXJjaF9wcmV2aWV3J1xuICAgIHwgJ2NvbXB1dGVyX3VzZV9wcmV2aWV3J1xuICAgIHwgJ3dlYl9zZWFyY2hfcHJldmlld18yMDI1XzAzXzExJ1xuICAgIHwgJ2ltYWdlX2dlbmVyYXRpb24nXG4gICAgfCAnY29kZV9pbnRlcnByZXRlcidcbiAgICB8ICdtY3AnO1xufVxuXG4vKipcbiAqIFRoaXMgdG9vbCBzZWFyY2hlcyB0aGUgd2ViIGZvciByZWxldmFudCByZXN1bHRzIHRvIHVzZSBpbiBhIHJlc3BvbnNlLiBMZWFybiBtb3JlXG4gKiBhYm91dCB0aGVcbiAqIFt3ZWIgc2VhcmNoIHRvb2xdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy90b29scy13ZWItc2VhcmNoKS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBXZWJTZWFyY2hUb29sIHtcbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHRoZSB3ZWIgc2VhcmNoIHRvb2wuIE9uZSBvZiBgd2ViX3NlYXJjaF9wcmV2aWV3YCBvclxuICAgKiBgd2ViX3NlYXJjaF9wcmV2aWV3XzIwMjVfMDNfMTFgLlxuICAgKi9cbiAgdHlwZTogJ3dlYl9zZWFyY2hfcHJldmlldycgfCAnd2ViX3NlYXJjaF9wcmV2aWV3XzIwMjVfMDNfMTEnO1xuXG4gIC8qKlxuICAgKiBIaWdoIGxldmVsIGd1aWRhbmNlIGZvciB0aGUgYW1vdW50IG9mIGNvbnRleHQgd2luZG93IHNwYWNlIHRvIHVzZSBmb3IgdGhlXG4gICAqIHNlYXJjaC4gT25lIG9mIGBsb3dgLCBgbWVkaXVtYCwgb3IgYGhpZ2hgLiBgbWVkaXVtYCBpcyB0aGUgZGVmYXVsdC5cbiAgICovXG4gIHNlYXJjaF9jb250ZXh0X3NpemU/OiAnbG93JyB8ICdtZWRpdW0nIHwgJ2hpZ2gnO1xuXG4gIC8qKlxuICAgKiBUaGUgdXNlcidzIGxvY2F0aW9uLlxuICAgKi9cbiAgdXNlcl9sb2NhdGlvbj86IFdlYlNlYXJjaFRvb2wuVXNlckxvY2F0aW9uIHwgbnVsbDtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBXZWJTZWFyY2hUb29sIHtcbiAgLyoqXG4gICAqIFRoZSB1c2VyJ3MgbG9jYXRpb24uXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFVzZXJMb2NhdGlvbiB7XG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgbG9jYXRpb24gYXBwcm94aW1hdGlvbi4gQWx3YXlzIGBhcHByb3hpbWF0ZWAuXG4gICAgICovXG4gICAgdHlwZTogJ2FwcHJveGltYXRlJztcblxuICAgIC8qKlxuICAgICAqIEZyZWUgdGV4dCBpbnB1dCBmb3IgdGhlIGNpdHkgb2YgdGhlIHVzZXIsIGUuZy4gYFNhbiBGcmFuY2lzY29gLlxuICAgICAqL1xuICAgIGNpdHk/OiBzdHJpbmcgfCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR3by1sZXR0ZXIgW0lTTyBjb3VudHJ5IGNvZGVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT18zMTY2LTEpIG9mXG4gICAgICogdGhlIHVzZXIsIGUuZy4gYFVTYC5cbiAgICAgKi9cbiAgICBjb3VudHJ5Pzogc3RyaW5nIHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEZyZWUgdGV4dCBpbnB1dCBmb3IgdGhlIHJlZ2lvbiBvZiB0aGUgdXNlciwgZS5nLiBgQ2FsaWZvcm5pYWAuXG4gICAgICovXG4gICAgcmVnaW9uPzogc3RyaW5nIHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBbSUFOQSB0aW1lem9uZV0oaHR0cHM6Ly90aW1lYXBpLmlvL2RvY3VtZW50YXRpb24vaWFuYS10aW1lem9uZXMpIG9mIHRoZVxuICAgICAqIHVzZXIsIGUuZy4gYEFtZXJpY2EvTG9zX0FuZ2VsZXNgLlxuICAgICAqL1xuICAgIHRpbWV6b25lPzogc3RyaW5nIHwgbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBSZXNwb25zZUNyZWF0ZVBhcmFtcyA9IFJlc3BvbnNlQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nIHwgUmVzcG9uc2VDcmVhdGVQYXJhbXNTdHJlYW1pbmc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VDcmVhdGVQYXJhbXNCYXNlIHtcbiAgLyoqXG4gICAqIFRleHQsIGltYWdlLCBvciBmaWxlIGlucHV0cyB0byB0aGUgbW9kZWwsIHVzZWQgdG8gZ2VuZXJhdGUgYSByZXNwb25zZS5cbiAgICpcbiAgICogTGVhcm4gbW9yZTpcbiAgICpcbiAgICogLSBbVGV4dCBpbnB1dHMgYW5kIG91dHB1dHNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy90ZXh0KVxuICAgKiAtIFtJbWFnZSBpbnB1dHNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9pbWFnZXMpXG4gICAqIC0gW0ZpbGUgaW5wdXRzXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvcGRmLWZpbGVzKVxuICAgKiAtIFtDb252ZXJzYXRpb24gc3RhdGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9jb252ZXJzYXRpb24tc3RhdGUpXG4gICAqIC0gW0Z1bmN0aW9uIGNhbGxpbmddKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9mdW5jdGlvbi1jYWxsaW5nKVxuICAgKi9cbiAgaW5wdXQ6IHN0cmluZyB8IFJlc3BvbnNlSW5wdXQ7XG5cbiAgLyoqXG4gICAqIE1vZGVsIElEIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIHJlc3BvbnNlLCBsaWtlIGBncHQtNG9gIG9yIGBvM2AuIE9wZW5BSSBvZmZlcnMgYVxuICAgKiB3aWRlIHJhbmdlIG9mIG1vZGVscyB3aXRoIGRpZmZlcmVudCBjYXBhYmlsaXRpZXMsIHBlcmZvcm1hbmNlIGNoYXJhY3RlcmlzdGljcyxcbiAgICogYW5kIHByaWNlIHBvaW50cy4gUmVmZXIgdG8gdGhlXG4gICAqIFttb2RlbCBndWlkZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvbW9kZWxzKSB0byBicm93c2UgYW5kIGNvbXBhcmVcbiAgICogYXZhaWxhYmxlIG1vZGVscy5cbiAgICovXG4gIG1vZGVsOiBTaGFyZWQuUmVzcG9uc2VzTW9kZWw7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gcnVuIHRoZSBtb2RlbCByZXNwb25zZSBpbiB0aGUgYmFja2dyb3VuZC5cbiAgICogW0xlYXJuIG1vcmVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9iYWNrZ3JvdW5kKS5cbiAgICovXG4gIGJhY2tncm91bmQ/OiBib29sZWFuIHwgbnVsbDtcblxuICAvKipcbiAgICogU3BlY2lmeSBhZGRpdGlvbmFsIG91dHB1dCBkYXRhIHRvIGluY2x1ZGUgaW4gdGhlIG1vZGVsIHJlc3BvbnNlLiBDdXJyZW50bHlcbiAgICogc3VwcG9ydGVkIHZhbHVlcyBhcmU6XG4gICAqXG4gICAqIC0gYGZpbGVfc2VhcmNoX2NhbGwucmVzdWx0c2A6IEluY2x1ZGUgdGhlIHNlYXJjaCByZXN1bHRzIG9mIHRoZSBmaWxlIHNlYXJjaCB0b29sXG4gICAqICAgY2FsbC5cbiAgICogLSBgbWVzc2FnZS5pbnB1dF9pbWFnZS5pbWFnZV91cmxgOiBJbmNsdWRlIGltYWdlIHVybHMgZnJvbSB0aGUgaW5wdXQgbWVzc2FnZS5cbiAgICogLSBgY29tcHV0ZXJfY2FsbF9vdXRwdXQub3V0cHV0LmltYWdlX3VybGA6IEluY2x1ZGUgaW1hZ2UgdXJscyBmcm9tIHRoZSBjb21wdXRlclxuICAgKiAgIGNhbGwgb3V0cHV0LlxuICAgKiAtIGByZWFzb25pbmcuZW5jcnlwdGVkX2NvbnRlbnRgOiBJbmNsdWRlcyBhbiBlbmNyeXB0ZWQgdmVyc2lvbiBvZiByZWFzb25pbmdcbiAgICogICB0b2tlbnMgaW4gcmVhc29uaW5nIGl0ZW0gb3V0cHV0cy4gVGhpcyBlbmFibGVzIHJlYXNvbmluZyBpdGVtcyB0byBiZSB1c2VkIGluXG4gICAqICAgbXVsdGktdHVybiBjb252ZXJzYXRpb25zIHdoZW4gdXNpbmcgdGhlIFJlc3BvbnNlcyBBUEkgc3RhdGVsZXNzbHkgKGxpa2Ugd2hlblxuICAgKiAgIHRoZSBgc3RvcmVgIHBhcmFtZXRlciBpcyBzZXQgdG8gYGZhbHNlYCwgb3Igd2hlbiBhbiBvcmdhbml6YXRpb24gaXMgZW5yb2xsZWRcbiAgICogICBpbiB0aGUgemVybyBkYXRhIHJldGVudGlvbiBwcm9ncmFtKS5cbiAgICovXG4gIGluY2x1ZGU/OiBBcnJheTxSZXNwb25zZUluY2x1ZGFibGU+IHwgbnVsbDtcblxuICAvKipcbiAgICogSW5zZXJ0cyBhIHN5c3RlbSAob3IgZGV2ZWxvcGVyKSBtZXNzYWdlIGFzIHRoZSBmaXJzdCBpdGVtIGluIHRoZSBtb2RlbCdzXG4gICAqIGNvbnRleHQuXG4gICAqXG4gICAqIFdoZW4gdXNpbmcgYWxvbmcgd2l0aCBgcHJldmlvdXNfcmVzcG9uc2VfaWRgLCB0aGUgaW5zdHJ1Y3Rpb25zIGZyb20gYSBwcmV2aW91c1xuICAgKiByZXNwb25zZSB3aWxsIG5vdCBiZSBjYXJyaWVkIG92ZXIgdG8gdGhlIG5leHQgcmVzcG9uc2UuIFRoaXMgbWFrZXMgaXQgc2ltcGxlIHRvXG4gICAqIHN3YXAgb3V0IHN5c3RlbSAob3IgZGV2ZWxvcGVyKSBtZXNzYWdlcyBpbiBuZXcgcmVzcG9uc2VzLlxuICAgKi9cbiAgaW5zdHJ1Y3Rpb25zPzogc3RyaW5nIHwgbnVsbDtcblxuICAvKipcbiAgICogQW4gdXBwZXIgYm91bmQgZm9yIHRoZSBudW1iZXIgb2YgdG9rZW5zIHRoYXQgY2FuIGJlIGdlbmVyYXRlZCBmb3IgYSByZXNwb25zZSxcbiAgICogaW5jbHVkaW5nIHZpc2libGUgb3V0cHV0IHRva2VucyBhbmRcbiAgICogW3JlYXNvbmluZyB0b2tlbnNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9yZWFzb25pbmcpLlxuICAgKi9cbiAgbWF4X291dHB1dF90b2tlbnM/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgKlxuICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbWV0YWRhdGE/OiBTaGFyZWQuTWV0YWRhdGEgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGFsbG93IHRoZSBtb2RlbCB0byBydW4gdG9vbCBjYWxscyBpbiBwYXJhbGxlbC5cbiAgICovXG4gIHBhcmFsbGVsX3Rvb2xfY2FsbHM/OiBib29sZWFuIHwgbnVsbDtcblxuICAvKipcbiAgICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgcHJldmlvdXMgcmVzcG9uc2UgdG8gdGhlIG1vZGVsLiBVc2UgdGhpcyB0byBjcmVhdGVcbiAgICogbXVsdGktdHVybiBjb252ZXJzYXRpb25zLiBMZWFybiBtb3JlIGFib3V0XG4gICAqIFtjb252ZXJzYXRpb24gc3RhdGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9jb252ZXJzYXRpb24tc3RhdGUpLlxuICAgKi9cbiAgcHJldmlvdXNfcmVzcG9uc2VfaWQ/OiBzdHJpbmcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiAqKm8tc2VyaWVzIG1vZGVscyBvbmx5KipcbiAgICpcbiAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvclxuICAgKiBbcmVhc29uaW5nIG1vZGVsc10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3JlYXNvbmluZykuXG4gICAqL1xuICByZWFzb25pbmc/OiBTaGFyZWQuUmVhc29uaW5nIHwgbnVsbDtcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHRoZSBsYXRlbmN5IHRpZXIgdG8gdXNlIGZvciBwcm9jZXNzaW5nIHRoZSByZXF1ZXN0LiBUaGlzIHBhcmFtZXRlciBpc1xuICAgKiByZWxldmFudCBmb3IgY3VzdG9tZXJzIHN1YnNjcmliZWQgdG8gdGhlIHNjYWxlIHRpZXIgc2VydmljZTpcbiAgICpcbiAgICogLSBJZiBzZXQgdG8gJ2F1dG8nLCBhbmQgdGhlIFByb2plY3QgaXMgU2NhbGUgdGllciBlbmFibGVkLCB0aGUgc3lzdGVtIHdpbGxcbiAgICogICB1dGlsaXplIHNjYWxlIHRpZXIgY3JlZGl0cyB1bnRpbCB0aGV5IGFyZSBleGhhdXN0ZWQuXG4gICAqIC0gSWYgc2V0IHRvICdhdXRvJywgYW5kIHRoZSBQcm9qZWN0IGlzIG5vdCBTY2FsZSB0aWVyIGVuYWJsZWQsIHRoZSByZXF1ZXN0IHdpbGxcbiAgICogICBiZSBwcm9jZXNzZWQgdXNpbmcgdGhlIGRlZmF1bHQgc2VydmljZSB0aWVyIHdpdGggYSBsb3dlciB1cHRpbWUgU0xBIGFuZCBub1xuICAgKiAgIGxhdGVuY3kgZ3VhcmVudGVlLlxuICAgKiAtIElmIHNldCB0byAnZGVmYXVsdCcsIHRoZSByZXF1ZXN0IHdpbGwgYmUgcHJvY2Vzc2VkIHVzaW5nIHRoZSBkZWZhdWx0IHNlcnZpY2VcbiAgICogICB0aWVyIHdpdGggYSBsb3dlciB1cHRpbWUgU0xBIGFuZCBubyBsYXRlbmN5IGd1YXJlbnRlZS5cbiAgICogLSBJZiBzZXQgdG8gJ2ZsZXgnLCB0aGUgcmVxdWVzdCB3aWxsIGJlIHByb2Nlc3NlZCB3aXRoIHRoZSBGbGV4IFByb2Nlc3NpbmdcbiAgICogICBzZXJ2aWNlIHRpZXIuXG4gICAqICAgW0xlYXJuIG1vcmVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9mbGV4LXByb2Nlc3NpbmcpLlxuICAgKiAtIFdoZW4gbm90IHNldCwgdGhlIGRlZmF1bHQgYmVoYXZpb3IgaXMgJ2F1dG8nLlxuICAgKlxuICAgKiBXaGVuIHRoaXMgcGFyYW1ldGVyIGlzIHNldCwgdGhlIHJlc3BvbnNlIGJvZHkgd2lsbCBpbmNsdWRlIHRoZSBgc2VydmljZV90aWVyYFxuICAgKiB1dGlsaXplZC5cbiAgICovXG4gIHNlcnZpY2VfdGllcj86ICdhdXRvJyB8ICdkZWZhdWx0JyB8ICdmbGV4JyB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3RvcmUgdGhlIGdlbmVyYXRlZCBtb2RlbCByZXNwb25zZSBmb3IgbGF0ZXIgcmV0cmlldmFsIHZpYSBBUEkuXG4gICAqL1xuICBzdG9yZT86IGJvb2xlYW4gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBJZiBzZXQgdG8gdHJ1ZSwgdGhlIG1vZGVsIHJlc3BvbnNlIGRhdGEgd2lsbCBiZSBzdHJlYW1lZCB0byB0aGUgY2xpZW50IGFzIGl0IGlzXG4gICAqIGdlbmVyYXRlZCB1c2luZ1xuICAgKiBbc2VydmVyLXNlbnQgZXZlbnRzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvU2VydmVyLXNlbnRfZXZlbnRzL1VzaW5nX3NlcnZlci1zZW50X2V2ZW50cyNFdmVudF9zdHJlYW1fZm9ybWF0KS5cbiAgICogU2VlIHRoZVxuICAgKiBbU3RyZWFtaW5nIHNlY3Rpb24gYmVsb3ddKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvcmVzcG9uc2VzLXN0cmVhbWluZylcbiAgICogZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqL1xuICBzdHJlYW0/OiBib29sZWFuIHwgbnVsbDtcblxuICAvKipcbiAgICogV2hhdCBzYW1wbGluZyB0ZW1wZXJhdHVyZSB0byB1c2UsIGJldHdlZW4gMCBhbmQgMi4gSGlnaGVyIHZhbHVlcyBsaWtlIDAuOCB3aWxsXG4gICAqIG1ha2UgdGhlIG91dHB1dCBtb3JlIHJhbmRvbSwgd2hpbGUgbG93ZXIgdmFsdWVzIGxpa2UgMC4yIHdpbGwgbWFrZSBpdCBtb3JlXG4gICAqIGZvY3VzZWQgYW5kIGRldGVybWluaXN0aWMuIFdlIGdlbmVyYWxseSByZWNvbW1lbmQgYWx0ZXJpbmcgdGhpcyBvciBgdG9wX3BgIGJ1dFxuICAgKiBub3QgYm90aC5cbiAgICovXG4gIHRlbXBlcmF0dXJlPzogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zIGZvciBhIHRleHQgcmVzcG9uc2UgZnJvbSB0aGUgbW9kZWwuIENhbiBiZSBwbGFpbiB0ZXh0IG9yXG4gICAqIHN0cnVjdHVyZWQgSlNPTiBkYXRhLiBMZWFybiBtb3JlOlxuICAgKlxuICAgKiAtIFtUZXh0IGlucHV0cyBhbmQgb3V0cHV0c10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3RleHQpXG4gICAqIC0gW1N0cnVjdHVyZWQgT3V0cHV0c10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3N0cnVjdHVyZWQtb3V0cHV0cylcbiAgICovXG4gIHRleHQ/OiBSZXNwb25zZVRleHRDb25maWc7XG5cbiAgLyoqXG4gICAqIEhvdyB0aGUgbW9kZWwgc2hvdWxkIHNlbGVjdCB3aGljaCB0b29sIChvciB0b29scykgdG8gdXNlIHdoZW4gZ2VuZXJhdGluZyBhXG4gICAqIHJlc3BvbnNlLiBTZWUgdGhlIGB0b29sc2AgcGFyYW1ldGVyIHRvIHNlZSBob3cgdG8gc3BlY2lmeSB3aGljaCB0b29scyB0aGUgbW9kZWxcbiAgICogY2FuIGNhbGwuXG4gICAqL1xuICB0b29sX2Nob2ljZT86IFRvb2xDaG9pY2VPcHRpb25zIHwgVG9vbENob2ljZVR5cGVzIHwgVG9vbENob2ljZUZ1bmN0aW9uO1xuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiB0b29scyB0aGUgbW9kZWwgbWF5IGNhbGwgd2hpbGUgZ2VuZXJhdGluZyBhIHJlc3BvbnNlLiBZb3UgY2FuXG4gICAqIHNwZWNpZnkgd2hpY2ggdG9vbCB0byB1c2UgYnkgc2V0dGluZyB0aGUgYHRvb2xfY2hvaWNlYCBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIFRoZSB0d28gY2F0ZWdvcmllcyBvZiB0b29scyB5b3UgY2FuIHByb3ZpZGUgdGhlIG1vZGVsIGFyZTpcbiAgICpcbiAgICogLSAqKkJ1aWx0LWluIHRvb2xzKio6IFRvb2xzIHRoYXQgYXJlIHByb3ZpZGVkIGJ5IE9wZW5BSSB0aGF0IGV4dGVuZCB0aGUgbW9kZWwnc1xuICAgKiAgIGNhcGFiaWxpdGllcywgbGlrZVxuICAgKiAgIFt3ZWIgc2VhcmNoXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvdG9vbHMtd2ViLXNlYXJjaCkgb3JcbiAgICogICBbZmlsZSBzZWFyY2hdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy90b29scy1maWxlLXNlYXJjaCkuXG4gICAqICAgTGVhcm4gbW9yZSBhYm91dFxuICAgKiAgIFtidWlsdC1pbiB0b29sc10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvZ3VpZGVzL3Rvb2xzKS5cbiAgICogLSAqKkZ1bmN0aW9uIGNhbGxzIChjdXN0b20gdG9vbHMpKio6IEZ1bmN0aW9ucyB0aGF0IGFyZSBkZWZpbmVkIGJ5IHlvdSwgZW5hYmxpbmdcbiAgICogICB0aGUgbW9kZWwgdG8gY2FsbCB5b3VyIG93biBjb2RlLiBMZWFybiBtb3JlIGFib3V0XG4gICAqICAgW2Z1bmN0aW9uIGNhbGxpbmddKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2d1aWRlcy9mdW5jdGlvbi1jYWxsaW5nKS5cbiAgICovXG4gIHRvb2xzPzogQXJyYXk8VG9vbD47XG5cbiAgLyoqXG4gICAqIEFuIGFsdGVybmF0aXZlIHRvIHNhbXBsaW5nIHdpdGggdGVtcGVyYXR1cmUsIGNhbGxlZCBudWNsZXVzIHNhbXBsaW5nLCB3aGVyZSB0aGVcbiAgICogbW9kZWwgY29uc2lkZXJzIHRoZSByZXN1bHRzIG9mIHRoZSB0b2tlbnMgd2l0aCB0b3BfcCBwcm9iYWJpbGl0eSBtYXNzLiBTbyAwLjFcbiAgICogbWVhbnMgb25seSB0aGUgdG9rZW5zIGNvbXByaXNpbmcgdGhlIHRvcCAxMCUgcHJvYmFiaWxpdHkgbWFzcyBhcmUgY29uc2lkZXJlZC5cbiAgICpcbiAgICogV2UgZ2VuZXJhbGx5IHJlY29tbWVuZCBhbHRlcmluZyB0aGlzIG9yIGB0ZW1wZXJhdHVyZWAgYnV0IG5vdCBib3RoLlxuICAgKi9cbiAgdG9wX3A/OiBudW1iZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgdHJ1bmNhdGlvbiBzdHJhdGVneSB0byB1c2UgZm9yIHRoZSBtb2RlbCByZXNwb25zZS5cbiAgICpcbiAgICogLSBgYXV0b2A6IElmIHRoZSBjb250ZXh0IG9mIHRoaXMgcmVzcG9uc2UgYW5kIHByZXZpb3VzIG9uZXMgZXhjZWVkcyB0aGUgbW9kZWwnc1xuICAgKiAgIGNvbnRleHQgd2luZG93IHNpemUsIHRoZSBtb2RlbCB3aWxsIHRydW5jYXRlIHRoZSByZXNwb25zZSB0byBmaXQgdGhlIGNvbnRleHRcbiAgICogICB3aW5kb3cgYnkgZHJvcHBpbmcgaW5wdXQgaXRlbXMgaW4gdGhlIG1pZGRsZSBvZiB0aGUgY29udmVyc2F0aW9uLlxuICAgKiAtIGBkaXNhYmxlZGAgKGRlZmF1bHQpOiBJZiBhIG1vZGVsIHJlc3BvbnNlIHdpbGwgZXhjZWVkIHRoZSBjb250ZXh0IHdpbmRvdyBzaXplXG4gICAqICAgZm9yIGEgbW9kZWwsIHRoZSByZXF1ZXN0IHdpbGwgZmFpbCB3aXRoIGEgNDAwIGVycm9yLlxuICAgKi9cbiAgdHJ1bmNhdGlvbj86ICdhdXRvJyB8ICdkaXNhYmxlZCcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBBIHN0YWJsZSBpZGVudGlmaWVyIGZvciB5b3VyIGVuZC11c2Vycy4gVXNlZCB0byBib29zdCBjYWNoZSBoaXQgcmF0ZXMgYnkgYmV0dGVyXG4gICAqIGJ1Y2tldGluZyBzaW1pbGFyIHJlcXVlc3RzIGFuZCB0byBoZWxwIE9wZW5BSSBkZXRlY3QgYW5kIHByZXZlbnQgYWJ1c2UuXG4gICAqIFtMZWFybiBtb3JlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9ndWlkZXMvc2FmZXR5LWJlc3QtcHJhY3RpY2VzI2VuZC11c2VyLWlkcykuXG4gICAqL1xuICB1c2VyPzogc3RyaW5nO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFJlc3BvbnNlQ3JlYXRlUGFyYW1zIHtcbiAgZXhwb3J0IHR5cGUgUmVzcG9uc2VDcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcgPSBSZXNwb25zZXNBUEkuUmVzcG9uc2VDcmVhdGVQYXJhbXNOb25TdHJlYW1pbmc7XG4gIGV4cG9ydCB0eXBlIFJlc3BvbnNlQ3JlYXRlUGFyYW1zU3RyZWFtaW5nID0gUmVzcG9uc2VzQVBJLlJlc3BvbnNlQ3JlYXRlUGFyYW1zU3RyZWFtaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nIGV4dGVuZHMgUmVzcG9uc2VDcmVhdGVQYXJhbXNCYXNlIHtcbiAgLyoqXG4gICAqIElmIHNldCB0byB0cnVlLCB0aGUgbW9kZWwgcmVzcG9uc2UgZGF0YSB3aWxsIGJlIHN0cmVhbWVkIHRvIHRoZSBjbGllbnQgYXMgaXQgaXNcbiAgICogZ2VuZXJhdGVkIHVzaW5nXG4gICAqIFtzZXJ2ZXItc2VudCBldmVudHNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9TZXJ2ZXItc2VudF9ldmVudHMvVXNpbmdfc2VydmVyLXNlbnRfZXZlbnRzI0V2ZW50X3N0cmVhbV9mb3JtYXQpLlxuICAgKiBTZWUgdGhlXG4gICAqIFtTdHJlYW1pbmcgc2VjdGlvbiBiZWxvd10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9yZXNwb25zZXMtc3RyZWFtaW5nKVxuICAgKiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICovXG4gIHN0cmVhbT86IGZhbHNlIHwgbnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZUNyZWF0ZVBhcmFtc1N0cmVhbWluZyBleHRlbmRzIFJlc3BvbnNlQ3JlYXRlUGFyYW1zQmFzZSB7XG4gIC8qKlxuICAgKiBJZiBzZXQgdG8gdHJ1ZSwgdGhlIG1vZGVsIHJlc3BvbnNlIGRhdGEgd2lsbCBiZSBzdHJlYW1lZCB0byB0aGUgY2xpZW50IGFzIGl0IGlzXG4gICAqIGdlbmVyYXRlZCB1c2luZ1xuICAgKiBbc2VydmVyLXNlbnQgZXZlbnRzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvU2VydmVyLXNlbnRfZXZlbnRzL1VzaW5nX3NlcnZlci1zZW50X2V2ZW50cyNFdmVudF9zdHJlYW1fZm9ybWF0KS5cbiAgICogU2VlIHRoZVxuICAgKiBbU3RyZWFtaW5nIHNlY3Rpb24gYmVsb3ddKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvcmVzcG9uc2VzLXN0cmVhbWluZylcbiAgICogZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqL1xuICBzdHJlYW06IHRydWU7XG59XG5cbmV4cG9ydCB0eXBlIFJlc3BvbnNlUmV0cmlldmVQYXJhbXMgPSBSZXNwb25zZVJldHJpZXZlUGFyYW1zTm9uU3RyZWFtaW5nIHwgUmVzcG9uc2VSZXRyaWV2ZVBhcmFtc1N0cmVhbWluZztcblxuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZVJldHJpZXZlUGFyYW1zQmFzZSB7XG4gIC8qKlxuICAgKiBBZGRpdGlvbmFsIGZpZWxkcyB0byBpbmNsdWRlIGluIHRoZSByZXNwb25zZS4gU2VlIHRoZSBgaW5jbHVkZWAgcGFyYW1ldGVyIGZvclxuICAgKiBSZXNwb25zZSBjcmVhdGlvbiBhYm92ZSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICovXG4gIGluY2x1ZGU/OiBBcnJheTxSZXNwb25zZUluY2x1ZGFibGU+O1xuXG4gIC8qKlxuICAgKiBUaGUgc2VxdWVuY2UgbnVtYmVyIG9mIHRoZSBldmVudCBhZnRlciB3aGljaCB0byBzdGFydCBzdHJlYW1pbmcuXG4gICAqL1xuICBzdGFydGluZ19hZnRlcj86IG51bWJlcjtcblxuICAvKipcbiAgICogSWYgc2V0IHRvIHRydWUsIHRoZSBtb2RlbCByZXNwb25zZSBkYXRhIHdpbGwgYmUgc3RyZWFtZWQgdG8gdGhlIGNsaWVudCBhcyBpdCBpc1xuICAgKiBnZW5lcmF0ZWQgdXNpbmdcbiAgICogW3NlcnZlci1zZW50IGV2ZW50c10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1NlcnZlci1zZW50X2V2ZW50cy9Vc2luZ19zZXJ2ZXItc2VudF9ldmVudHMjRXZlbnRfc3RyZWFtX2Zvcm1hdCkuXG4gICAqIFNlZSB0aGVcbiAgICogW1N0cmVhbWluZyBzZWN0aW9uIGJlbG93XShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3Jlc3BvbnNlcy1zdHJlYW1pbmcpXG4gICAqIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgc3RyZWFtPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBSZXNwb25zZVJldHJpZXZlUGFyYW1zIHtcbiAgZXhwb3J0IHR5cGUgUmVzcG9uc2VSZXRyaWV2ZVBhcmFtc05vblN0cmVhbWluZyA9IFJlc3BvbnNlc0FQSS5SZXNwb25zZVJldHJpZXZlUGFyYW1zTm9uU3RyZWFtaW5nO1xuICBleHBvcnQgdHlwZSBSZXNwb25zZVJldHJpZXZlUGFyYW1zU3RyZWFtaW5nID0gUmVzcG9uc2VzQVBJLlJlc3BvbnNlUmV0cmlldmVQYXJhbXNTdHJlYW1pbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2VSZXRyaWV2ZVBhcmFtc05vblN0cmVhbWluZyBleHRlbmRzIFJlc3BvbnNlUmV0cmlldmVQYXJhbXNCYXNlIHtcbiAgLyoqXG4gICAqIElmIHNldCB0byB0cnVlLCB0aGUgbW9kZWwgcmVzcG9uc2UgZGF0YSB3aWxsIGJlIHN0cmVhbWVkIHRvIHRoZSBjbGllbnQgYXMgaXQgaXNcbiAgICogZ2VuZXJhdGVkIHVzaW5nXG4gICAqIFtzZXJ2ZXItc2VudCBldmVudHNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9TZXJ2ZXItc2VudF9ldmVudHMvVXNpbmdfc2VydmVyLXNlbnRfZXZlbnRzI0V2ZW50X3N0cmVhbV9mb3JtYXQpLlxuICAgKiBTZWUgdGhlXG4gICAqIFtTdHJlYW1pbmcgc2VjdGlvbiBiZWxvd10oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9yZXNwb25zZXMtc3RyZWFtaW5nKVxuICAgKiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICovXG4gIHN0cmVhbT86IGZhbHNlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlc3BvbnNlUmV0cmlldmVQYXJhbXNTdHJlYW1pbmcgZXh0ZW5kcyBSZXNwb25zZVJldHJpZXZlUGFyYW1zQmFzZSB7XG4gIC8qKlxuICAgKiBJZiBzZXQgdG8gdHJ1ZSwgdGhlIG1vZGVsIHJlc3BvbnNlIGRhdGEgd2lsbCBiZSBzdHJlYW1lZCB0byB0aGUgY2xpZW50IGFzIGl0IGlzXG4gICAqIGdlbmVyYXRlZCB1c2luZ1xuICAgKiBbc2VydmVyLXNlbnQgZXZlbnRzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvU2VydmVyLXNlbnRfZXZlbnRzL1VzaW5nX3NlcnZlci1zZW50X2V2ZW50cyNFdmVudF9zdHJlYW1fZm9ybWF0KS5cbiAgICogU2VlIHRoZVxuICAgKiBbU3RyZWFtaW5nIHNlY3Rpb24gYmVsb3ddKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvcmVzcG9uc2VzLXN0cmVhbWluZylcbiAgICogZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqL1xuICBzdHJlYW06IHRydWU7XG59XG5cblJlc3BvbnNlcy5JbnB1dEl0ZW1zID0gSW5wdXRJdGVtcztcblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIFJlc3BvbnNlcyB7XG4gIGV4cG9ydCB7XG4gICAgdHlwZSBDb21wdXRlclRvb2wgYXMgQ29tcHV0ZXJUb29sLFxuICAgIHR5cGUgRWFzeUlucHV0TWVzc2FnZSBhcyBFYXN5SW5wdXRNZXNzYWdlLFxuICAgIHR5cGUgRmlsZVNlYXJjaFRvb2wgYXMgRmlsZVNlYXJjaFRvb2wsXG4gICAgdHlwZSBGdW5jdGlvblRvb2wgYXMgRnVuY3Rpb25Ub29sLFxuICAgIHR5cGUgUmVzcG9uc2UgYXMgUmVzcG9uc2UsXG4gICAgdHlwZSBSZXNwb25zZUF1ZGlvRGVsdGFFdmVudCBhcyBSZXNwb25zZUF1ZGlvRGVsdGFFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlQXVkaW9Eb25lRXZlbnQgYXMgUmVzcG9uc2VBdWRpb0RvbmVFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlQXVkaW9UcmFuc2NyaXB0RGVsdGFFdmVudCBhcyBSZXNwb25zZUF1ZGlvVHJhbnNjcmlwdERlbHRhRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZUF1ZGlvVHJhbnNjcmlwdERvbmVFdmVudCBhcyBSZXNwb25zZUF1ZGlvVHJhbnNjcmlwdERvbmVFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlQ29kZUludGVycHJldGVyQ2FsbENvZGVEZWx0YUV2ZW50IGFzIFJlc3BvbnNlQ29kZUludGVycHJldGVyQ2FsbENvZGVEZWx0YUV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VDb2RlSW50ZXJwcmV0ZXJDYWxsQ29kZURvbmVFdmVudCBhcyBSZXNwb25zZUNvZGVJbnRlcnByZXRlckNhbGxDb2RlRG9uZUV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VDb2RlSW50ZXJwcmV0ZXJDYWxsQ29tcGxldGVkRXZlbnQgYXMgUmVzcG9uc2VDb2RlSW50ZXJwcmV0ZXJDYWxsQ29tcGxldGVkRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZUNvZGVJbnRlcnByZXRlckNhbGxJblByb2dyZXNzRXZlbnQgYXMgUmVzcG9uc2VDb2RlSW50ZXJwcmV0ZXJDYWxsSW5Qcm9ncmVzc0V2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VDb2RlSW50ZXJwcmV0ZXJDYWxsSW50ZXJwcmV0aW5nRXZlbnQgYXMgUmVzcG9uc2VDb2RlSW50ZXJwcmV0ZXJDYWxsSW50ZXJwcmV0aW5nRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZUNvZGVJbnRlcnByZXRlclRvb2xDYWxsIGFzIFJlc3BvbnNlQ29kZUludGVycHJldGVyVG9vbENhbGwsXG4gICAgdHlwZSBSZXNwb25zZUNvbXBsZXRlZEV2ZW50IGFzIFJlc3BvbnNlQ29tcGxldGVkRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZUNvbXB1dGVyVG9vbENhbGwgYXMgUmVzcG9uc2VDb21wdXRlclRvb2xDYWxsLFxuICAgIHR5cGUgUmVzcG9uc2VDb21wdXRlclRvb2xDYWxsT3V0cHV0SXRlbSBhcyBSZXNwb25zZUNvbXB1dGVyVG9vbENhbGxPdXRwdXRJdGVtLFxuICAgIHR5cGUgUmVzcG9uc2VDb21wdXRlclRvb2xDYWxsT3V0cHV0U2NyZWVuc2hvdCBhcyBSZXNwb25zZUNvbXB1dGVyVG9vbENhbGxPdXRwdXRTY3JlZW5zaG90LFxuICAgIHR5cGUgUmVzcG9uc2VDb250ZW50IGFzIFJlc3BvbnNlQ29udGVudCxcbiAgICB0eXBlIFJlc3BvbnNlQ29udGVudFBhcnRBZGRlZEV2ZW50IGFzIFJlc3BvbnNlQ29udGVudFBhcnRBZGRlZEV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VDb250ZW50UGFydERvbmVFdmVudCBhcyBSZXNwb25zZUNvbnRlbnRQYXJ0RG9uZUV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VDcmVhdGVkRXZlbnQgYXMgUmVzcG9uc2VDcmVhdGVkRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZUVycm9yIGFzIFJlc3BvbnNlRXJyb3IsXG4gICAgdHlwZSBSZXNwb25zZUVycm9yRXZlbnQgYXMgUmVzcG9uc2VFcnJvckV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VGYWlsZWRFdmVudCBhcyBSZXNwb25zZUZhaWxlZEV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VGaWxlU2VhcmNoQ2FsbENvbXBsZXRlZEV2ZW50IGFzIFJlc3BvbnNlRmlsZVNlYXJjaENhbGxDb21wbGV0ZWRFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlRmlsZVNlYXJjaENhbGxJblByb2dyZXNzRXZlbnQgYXMgUmVzcG9uc2VGaWxlU2VhcmNoQ2FsbEluUHJvZ3Jlc3NFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlRmlsZVNlYXJjaENhbGxTZWFyY2hpbmdFdmVudCBhcyBSZXNwb25zZUZpbGVTZWFyY2hDYWxsU2VhcmNoaW5nRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZUZpbGVTZWFyY2hUb29sQ2FsbCBhcyBSZXNwb25zZUZpbGVTZWFyY2hUb29sQ2FsbCxcbiAgICB0eXBlIFJlc3BvbnNlRm9ybWF0VGV4dENvbmZpZyBhcyBSZXNwb25zZUZvcm1hdFRleHRDb25maWcsXG4gICAgdHlwZSBSZXNwb25zZUZvcm1hdFRleHRKU09OU2NoZW1hQ29uZmlnIGFzIFJlc3BvbnNlRm9ybWF0VGV4dEpTT05TY2hlbWFDb25maWcsXG4gICAgdHlwZSBSZXNwb25zZUZ1bmN0aW9uQ2FsbEFyZ3VtZW50c0RlbHRhRXZlbnQgYXMgUmVzcG9uc2VGdW5jdGlvbkNhbGxBcmd1bWVudHNEZWx0YUV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VGdW5jdGlvbkNhbGxBcmd1bWVudHNEb25lRXZlbnQgYXMgUmVzcG9uc2VGdW5jdGlvbkNhbGxBcmd1bWVudHNEb25lRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZUZ1bmN0aW9uVG9vbENhbGwgYXMgUmVzcG9uc2VGdW5jdGlvblRvb2xDYWxsLFxuICAgIHR5cGUgUmVzcG9uc2VGdW5jdGlvblRvb2xDYWxsSXRlbSBhcyBSZXNwb25zZUZ1bmN0aW9uVG9vbENhbGxJdGVtLFxuICAgIHR5cGUgUmVzcG9uc2VGdW5jdGlvblRvb2xDYWxsT3V0cHV0SXRlbSBhcyBSZXNwb25zZUZ1bmN0aW9uVG9vbENhbGxPdXRwdXRJdGVtLFxuICAgIHR5cGUgUmVzcG9uc2VGdW5jdGlvbldlYlNlYXJjaCBhcyBSZXNwb25zZUZ1bmN0aW9uV2ViU2VhcmNoLFxuICAgIHR5cGUgUmVzcG9uc2VJbWFnZUdlbkNhbGxDb21wbGV0ZWRFdmVudCBhcyBSZXNwb25zZUltYWdlR2VuQ2FsbENvbXBsZXRlZEV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VJbWFnZUdlbkNhbGxHZW5lcmF0aW5nRXZlbnQgYXMgUmVzcG9uc2VJbWFnZUdlbkNhbGxHZW5lcmF0aW5nRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZUltYWdlR2VuQ2FsbEluUHJvZ3Jlc3NFdmVudCBhcyBSZXNwb25zZUltYWdlR2VuQ2FsbEluUHJvZ3Jlc3NFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlSW1hZ2VHZW5DYWxsUGFydGlhbEltYWdlRXZlbnQgYXMgUmVzcG9uc2VJbWFnZUdlbkNhbGxQYXJ0aWFsSW1hZ2VFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlSW5Qcm9ncmVzc0V2ZW50IGFzIFJlc3BvbnNlSW5Qcm9ncmVzc0V2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VJbmNsdWRhYmxlIGFzIFJlc3BvbnNlSW5jbHVkYWJsZSxcbiAgICB0eXBlIFJlc3BvbnNlSW5jb21wbGV0ZUV2ZW50IGFzIFJlc3BvbnNlSW5jb21wbGV0ZUV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VJbnB1dCBhcyBSZXNwb25zZUlucHV0LFxuICAgIHR5cGUgUmVzcG9uc2VJbnB1dEF1ZGlvIGFzIFJlc3BvbnNlSW5wdXRBdWRpbyxcbiAgICB0eXBlIFJlc3BvbnNlSW5wdXRDb250ZW50IGFzIFJlc3BvbnNlSW5wdXRDb250ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VJbnB1dEZpbGUgYXMgUmVzcG9uc2VJbnB1dEZpbGUsXG4gICAgdHlwZSBSZXNwb25zZUlucHV0SW1hZ2UgYXMgUmVzcG9uc2VJbnB1dEltYWdlLFxuICAgIHR5cGUgUmVzcG9uc2VJbnB1dEl0ZW0gYXMgUmVzcG9uc2VJbnB1dEl0ZW0sXG4gICAgdHlwZSBSZXNwb25zZUlucHV0TWVzc2FnZUNvbnRlbnRMaXN0IGFzIFJlc3BvbnNlSW5wdXRNZXNzYWdlQ29udGVudExpc3QsXG4gICAgdHlwZSBSZXNwb25zZUlucHV0TWVzc2FnZUl0ZW0gYXMgUmVzcG9uc2VJbnB1dE1lc3NhZ2VJdGVtLFxuICAgIHR5cGUgUmVzcG9uc2VJbnB1dFRleHQgYXMgUmVzcG9uc2VJbnB1dFRleHQsXG4gICAgdHlwZSBSZXNwb25zZUl0ZW0gYXMgUmVzcG9uc2VJdGVtLFxuICAgIHR5cGUgUmVzcG9uc2VNY3BDYWxsQXJndW1lbnRzRGVsdGFFdmVudCBhcyBSZXNwb25zZU1jcENhbGxBcmd1bWVudHNEZWx0YUV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VNY3BDYWxsQXJndW1lbnRzRG9uZUV2ZW50IGFzIFJlc3BvbnNlTWNwQ2FsbEFyZ3VtZW50c0RvbmVFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlTWNwQ2FsbENvbXBsZXRlZEV2ZW50IGFzIFJlc3BvbnNlTWNwQ2FsbENvbXBsZXRlZEV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VNY3BDYWxsRmFpbGVkRXZlbnQgYXMgUmVzcG9uc2VNY3BDYWxsRmFpbGVkRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZU1jcENhbGxJblByb2dyZXNzRXZlbnQgYXMgUmVzcG9uc2VNY3BDYWxsSW5Qcm9ncmVzc0V2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VNY3BMaXN0VG9vbHNDb21wbGV0ZWRFdmVudCBhcyBSZXNwb25zZU1jcExpc3RUb29sc0NvbXBsZXRlZEV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VNY3BMaXN0VG9vbHNGYWlsZWRFdmVudCBhcyBSZXNwb25zZU1jcExpc3RUb29sc0ZhaWxlZEV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VNY3BMaXN0VG9vbHNJblByb2dyZXNzRXZlbnQgYXMgUmVzcG9uc2VNY3BMaXN0VG9vbHNJblByb2dyZXNzRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZU91dHB1dEF1ZGlvIGFzIFJlc3BvbnNlT3V0cHV0QXVkaW8sXG4gICAgdHlwZSBSZXNwb25zZU91dHB1dEl0ZW0gYXMgUmVzcG9uc2VPdXRwdXRJdGVtLFxuICAgIHR5cGUgUmVzcG9uc2VPdXRwdXRJdGVtQWRkZWRFdmVudCBhcyBSZXNwb25zZU91dHB1dEl0ZW1BZGRlZEV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VPdXRwdXRJdGVtRG9uZUV2ZW50IGFzIFJlc3BvbnNlT3V0cHV0SXRlbURvbmVFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlT3V0cHV0TWVzc2FnZSBhcyBSZXNwb25zZU91dHB1dE1lc3NhZ2UsXG4gICAgdHlwZSBSZXNwb25zZU91dHB1dFJlZnVzYWwgYXMgUmVzcG9uc2VPdXRwdXRSZWZ1c2FsLFxuICAgIHR5cGUgUmVzcG9uc2VPdXRwdXRUZXh0IGFzIFJlc3BvbnNlT3V0cHV0VGV4dCxcbiAgICB0eXBlIFJlc3BvbnNlT3V0cHV0VGV4dEFubm90YXRpb25BZGRlZEV2ZW50IGFzIFJlc3BvbnNlT3V0cHV0VGV4dEFubm90YXRpb25BZGRlZEV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VRdWV1ZWRFdmVudCBhcyBSZXNwb25zZVF1ZXVlZEV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VSZWFzb25pbmdEZWx0YUV2ZW50IGFzIFJlc3BvbnNlUmVhc29uaW5nRGVsdGFFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlUmVhc29uaW5nRG9uZUV2ZW50IGFzIFJlc3BvbnNlUmVhc29uaW5nRG9uZUV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VSZWFzb25pbmdJdGVtIGFzIFJlc3BvbnNlUmVhc29uaW5nSXRlbSxcbiAgICB0eXBlIFJlc3BvbnNlUmVhc29uaW5nU3VtbWFyeURlbHRhRXZlbnQgYXMgUmVzcG9uc2VSZWFzb25pbmdTdW1tYXJ5RGVsdGFFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlUmVhc29uaW5nU3VtbWFyeURvbmVFdmVudCBhcyBSZXNwb25zZVJlYXNvbmluZ1N1bW1hcnlEb25lRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZVJlYXNvbmluZ1N1bW1hcnlQYXJ0QWRkZWRFdmVudCBhcyBSZXNwb25zZVJlYXNvbmluZ1N1bW1hcnlQYXJ0QWRkZWRFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlUmVhc29uaW5nU3VtbWFyeVBhcnREb25lRXZlbnQgYXMgUmVzcG9uc2VSZWFzb25pbmdTdW1tYXJ5UGFydERvbmVFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlUmVhc29uaW5nU3VtbWFyeVRleHREZWx0YUV2ZW50IGFzIFJlc3BvbnNlUmVhc29uaW5nU3VtbWFyeVRleHREZWx0YUV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VSZWFzb25pbmdTdW1tYXJ5VGV4dERvbmVFdmVudCBhcyBSZXNwb25zZVJlYXNvbmluZ1N1bW1hcnlUZXh0RG9uZUV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VSZWZ1c2FsRGVsdGFFdmVudCBhcyBSZXNwb25zZVJlZnVzYWxEZWx0YUV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VSZWZ1c2FsRG9uZUV2ZW50IGFzIFJlc3BvbnNlUmVmdXNhbERvbmVFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlU3RhdHVzIGFzIFJlc3BvbnNlU3RhdHVzLFxuICAgIHR5cGUgUmVzcG9uc2VTdHJlYW1FdmVudCBhcyBSZXNwb25zZVN0cmVhbUV2ZW50LFxuICAgIHR5cGUgUmVzcG9uc2VUZXh0Q29uZmlnIGFzIFJlc3BvbnNlVGV4dENvbmZpZyxcbiAgICB0eXBlIFJlc3BvbnNlVGV4dERlbHRhRXZlbnQgYXMgUmVzcG9uc2VUZXh0RGVsdGFFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlVGV4dERvbmVFdmVudCBhcyBSZXNwb25zZVRleHREb25lRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZVVzYWdlIGFzIFJlc3BvbnNlVXNhZ2UsXG4gICAgdHlwZSBSZXNwb25zZVdlYlNlYXJjaENhbGxDb21wbGV0ZWRFdmVudCBhcyBSZXNwb25zZVdlYlNlYXJjaENhbGxDb21wbGV0ZWRFdmVudCxcbiAgICB0eXBlIFJlc3BvbnNlV2ViU2VhcmNoQ2FsbEluUHJvZ3Jlc3NFdmVudCBhcyBSZXNwb25zZVdlYlNlYXJjaENhbGxJblByb2dyZXNzRXZlbnQsXG4gICAgdHlwZSBSZXNwb25zZVdlYlNlYXJjaENhbGxTZWFyY2hpbmdFdmVudCBhcyBSZXNwb25zZVdlYlNlYXJjaENhbGxTZWFyY2hpbmdFdmVudCxcbiAgICB0eXBlIFRvb2wgYXMgVG9vbCxcbiAgICB0eXBlIFRvb2xDaG9pY2VGdW5jdGlvbiBhcyBUb29sQ2hvaWNlRnVuY3Rpb24sXG4gICAgdHlwZSBUb29sQ2hvaWNlT3B0aW9ucyBhcyBUb29sQ2hvaWNlT3B0aW9ucyxcbiAgICB0eXBlIFRvb2xDaG9pY2VUeXBlcyBhcyBUb29sQ2hvaWNlVHlwZXMsXG4gICAgdHlwZSBXZWJTZWFyY2hUb29sIGFzIFdlYlNlYXJjaFRvb2wsXG4gICAgdHlwZSBSZXNwb25zZUNyZWF0ZVBhcmFtcyBhcyBSZXNwb25zZUNyZWF0ZVBhcmFtcyxcbiAgICB0eXBlIFJlc3BvbnNlQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nIGFzIFJlc3BvbnNlQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nLFxuICAgIHR5cGUgUmVzcG9uc2VDcmVhdGVQYXJhbXNTdHJlYW1pbmcgYXMgUmVzcG9uc2VDcmVhdGVQYXJhbXNTdHJlYW1pbmcsXG4gICAgdHlwZSBSZXNwb25zZVJldHJpZXZlUGFyYW1zIGFzIFJlc3BvbnNlUmV0cmlldmVQYXJhbXMsXG4gICAgdHlwZSBSZXNwb25zZVJldHJpZXZlUGFyYW1zTm9uU3RyZWFtaW5nIGFzIFJlc3BvbnNlUmV0cmlldmVQYXJhbXNOb25TdHJlYW1pbmcsXG4gICAgdHlwZSBSZXNwb25zZVJldHJpZXZlUGFyYW1zU3RyZWFtaW5nIGFzIFJlc3BvbnNlUmV0cmlldmVQYXJhbXNTdHJlYW1pbmcsXG4gIH07XG5cbiAgZXhwb3J0IHtcbiAgICBJbnB1dEl0ZW1zIGFzIElucHV0SXRlbXMsXG4gICAgdHlwZSBSZXNwb25zZUl0ZW1MaXN0IGFzIFJlc3BvbnNlSXRlbUxpc3QsXG4gICAgdHlwZSBJbnB1dEl0ZW1MaXN0UGFyYW1zIGFzIElucHV0SXRlbUxpc3RQYXJhbXMsXG4gIH07XG59XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICcuLi8uLi9yZXNvdXJjZSc7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gJy4uLy4uL2NvcmUnO1xuXG5leHBvcnQgY2xhc3MgUGFydHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBBZGRzIGFcbiAgICogW1BhcnRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdXBsb2Fkcy9wYXJ0LW9iamVjdCkgdG8gYW5cbiAgICogW1VwbG9hZF0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS91cGxvYWRzL29iamVjdCkgb2JqZWN0LlxuICAgKiBBIFBhcnQgcmVwcmVzZW50cyBhIGNodW5rIG9mIGJ5dGVzIGZyb20gdGhlIGZpbGUgeW91IGFyZSB0cnlpbmcgdG8gdXBsb2FkLlxuICAgKlxuICAgKiBFYWNoIFBhcnQgY2FuIGJlIGF0IG1vc3QgNjQgTUIsIGFuZCB5b3UgY2FuIGFkZCBQYXJ0cyB1bnRpbCB5b3UgaGl0IHRoZSBVcGxvYWRcbiAgICogbWF4aW11bSBvZiA4IEdCLlxuICAgKlxuICAgKiBJdCBpcyBwb3NzaWJsZSB0byBhZGQgbXVsdGlwbGUgUGFydHMgaW4gcGFyYWxsZWwuIFlvdSBjYW4gZGVjaWRlIHRoZSBpbnRlbmRlZFxuICAgKiBvcmRlciBvZiB0aGUgUGFydHMgd2hlbiB5b3VcbiAgICogW2NvbXBsZXRlIHRoZSBVcGxvYWRdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdXBsb2Fkcy9jb21wbGV0ZSkuXG4gICAqL1xuICBjcmVhdGUoXG4gICAgdXBsb2FkSWQ6IHN0cmluZyxcbiAgICBib2R5OiBQYXJ0Q3JlYXRlUGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLkFQSVByb21pc2U8VXBsb2FkUGFydD4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChcbiAgICAgIGAvdXBsb2Fkcy8ke3VwbG9hZElkfS9wYXJ0c2AsXG4gICAgICBDb3JlLm11bHRpcGFydEZvcm1SZXF1ZXN0T3B0aW9ucyh7IGJvZHksIC4uLm9wdGlvbnMgfSksXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIFRoZSB1cGxvYWQgUGFydCByZXByZXNlbnRzIGEgY2h1bmsgb2YgYnl0ZXMgd2UgY2FuIGFkZCB0byBhbiBVcGxvYWQgb2JqZWN0LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFVwbG9hZFBhcnQge1xuICAvKipcbiAgICogVGhlIHVwbG9hZCBQYXJ0IHVuaXF1ZSBpZGVudGlmaWVyLCB3aGljaCBjYW4gYmUgcmVmZXJlbmNlZCBpbiBBUEkgZW5kcG9pbnRzLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSBmb3Igd2hlbiB0aGUgUGFydCB3YXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWRfYXQ6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG9iamVjdCB0eXBlLCB3aGljaCBpcyBhbHdheXMgYHVwbG9hZC5wYXJ0YC5cbiAgICovXG4gIG9iamVjdDogJ3VwbG9hZC5wYXJ0JztcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSBVcGxvYWQgb2JqZWN0IHRoYXQgdGhpcyBQYXJ0IHdhcyBhZGRlZCB0by5cbiAgICovXG4gIHVwbG9hZF9pZDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhcnRDcmVhdGVQYXJhbXMge1xuICAvKipcbiAgICogVGhlIGNodW5rIG9mIGJ5dGVzIGZvciB0aGlzIFBhcnQuXG4gICAqL1xuICBkYXRhOiBDb3JlLlVwbG9hZGFibGU7XG59XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBQYXJ0cyB7XG4gIGV4cG9ydCB7IHR5cGUgVXBsb2FkUGFydCBhcyBVcGxvYWRQYXJ0LCB0eXBlIFBhcnRDcmVhdGVQYXJhbXMgYXMgUGFydENyZWF0ZVBhcmFtcyB9O1xufVxuIiwgIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnLi4vLi4vcmVzb3VyY2UnO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCAqIGFzIEZpbGVzQVBJIGZyb20gJy4uL2ZpbGVzJztcbmltcG9ydCAqIGFzIFBhcnRzQVBJIGZyb20gJy4vcGFydHMnO1xuaW1wb3J0IHsgUGFydENyZWF0ZVBhcmFtcywgUGFydHMsIFVwbG9hZFBhcnQgfSBmcm9tICcuL3BhcnRzJztcblxuZXhwb3J0IGNsYXNzIFVwbG9hZHMgZXh0ZW5kcyBBUElSZXNvdXJjZSB7XG4gIHBhcnRzOiBQYXJ0c0FQSS5QYXJ0cyA9IG5ldyBQYXJ0c0FQSS5QYXJ0cyh0aGlzLl9jbGllbnQpO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGludGVybWVkaWF0ZVxuICAgKiBbVXBsb2FkXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3VwbG9hZHMvb2JqZWN0KSBvYmplY3RcbiAgICogdGhhdCB5b3UgY2FuIGFkZFxuICAgKiBbUGFydHNdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdXBsb2Fkcy9wYXJ0LW9iamVjdCkgdG8uXG4gICAqIEN1cnJlbnRseSwgYW4gVXBsb2FkIGNhbiBhY2NlcHQgYXQgbW9zdCA4IEdCIGluIHRvdGFsIGFuZCBleHBpcmVzIGFmdGVyIGFuIGhvdXJcbiAgICogYWZ0ZXIgeW91IGNyZWF0ZSBpdC5cbiAgICpcbiAgICogT25jZSB5b3UgY29tcGxldGUgdGhlIFVwbG9hZCwgd2Ugd2lsbCBjcmVhdGUgYVxuICAgKiBbRmlsZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maWxlcy9vYmplY3QpIG9iamVjdCB0aGF0XG4gICAqIGNvbnRhaW5zIGFsbCB0aGUgcGFydHMgeW91IHVwbG9hZGVkLiBUaGlzIEZpbGUgaXMgdXNhYmxlIGluIHRoZSByZXN0IG9mIG91clxuICAgKiBwbGF0Zm9ybSBhcyBhIHJlZ3VsYXIgRmlsZSBvYmplY3QuXG4gICAqXG4gICAqIEZvciBjZXJ0YWluIGBwdXJwb3NlYCB2YWx1ZXMsIHRoZSBjb3JyZWN0IGBtaW1lX3R5cGVgIG11c3QgYmUgc3BlY2lmaWVkLiBQbGVhc2VcbiAgICogcmVmZXIgdG8gZG9jdW1lbnRhdGlvbiBmb3IgdGhlXG4gICAqIFtzdXBwb3J0ZWQgTUlNRSB0eXBlcyBmb3IgeW91ciB1c2UgY2FzZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXNzaXN0YW50cy90b29scy9maWxlLXNlYXJjaCNzdXBwb3J0ZWQtZmlsZXMpLlxuICAgKlxuICAgKiBGb3IgZ3VpZGFuY2Ugb24gdGhlIHByb3BlciBmaWxlbmFtZSBleHRlbnNpb25zIGZvciBlYWNoIHB1cnBvc2UsIHBsZWFzZSBmb2xsb3dcbiAgICogdGhlIGRvY3VtZW50YXRpb24gb25cbiAgICogW2NyZWF0aW5nIGEgRmlsZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maWxlcy9jcmVhdGUpLlxuICAgKi9cbiAgY3JlYXRlKGJvZHk6IFVwbG9hZENyZWF0ZVBhcmFtcywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkFQSVByb21pc2U8VXBsb2FkPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KCcvdXBsb2FkcycsIHsgYm9keSwgLi4ub3B0aW9ucyB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW5jZWxzIHRoZSBVcGxvYWQuIE5vIFBhcnRzIG1heSBiZSBhZGRlZCBhZnRlciBhbiBVcGxvYWQgaXMgY2FuY2VsbGVkLlxuICAgKi9cbiAgY2FuY2VsKHVwbG9hZElkOiBzdHJpbmcsIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zKTogQ29yZS5BUElQcm9taXNlPFVwbG9hZD4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3VwbG9hZHMvJHt1cGxvYWRJZH0vY2FuY2VsYCwgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogQ29tcGxldGVzIHRoZVxuICAgKiBbVXBsb2FkXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3VwbG9hZHMvb2JqZWN0KS5cbiAgICpcbiAgICogV2l0aGluIHRoZSByZXR1cm5lZCBVcGxvYWQgb2JqZWN0LCB0aGVyZSBpcyBhIG5lc3RlZFxuICAgKiBbRmlsZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maWxlcy9vYmplY3QpIG9iamVjdCB0aGF0XG4gICAqIGlzIHJlYWR5IHRvIHVzZSBpbiB0aGUgcmVzdCBvZiB0aGUgcGxhdGZvcm0uXG4gICAqXG4gICAqIFlvdSBjYW4gc3BlY2lmeSB0aGUgb3JkZXIgb2YgdGhlIFBhcnRzIGJ5IHBhc3NpbmcgaW4gYW4gb3JkZXJlZCBsaXN0IG9mIHRoZSBQYXJ0XG4gICAqIElEcy5cbiAgICpcbiAgICogVGhlIG51bWJlciBvZiBieXRlcyB1cGxvYWRlZCB1cG9uIGNvbXBsZXRpb24gbXVzdCBtYXRjaCB0aGUgbnVtYmVyIG9mIGJ5dGVzXG4gICAqIGluaXRpYWxseSBzcGVjaWZpZWQgd2hlbiBjcmVhdGluZyB0aGUgVXBsb2FkIG9iamVjdC4gTm8gUGFydHMgbWF5IGJlIGFkZGVkIGFmdGVyXG4gICAqIGFuIFVwbG9hZCBpcyBjb21wbGV0ZWQuXG4gICAqL1xuICBjb21wbGV0ZShcbiAgICB1cGxvYWRJZDogc3RyaW5nLFxuICAgIGJvZHk6IFVwbG9hZENvbXBsZXRlUGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLkFQSVByb21pc2U8VXBsb2FkPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvdXBsb2Fkcy8ke3VwbG9hZElkfS9jb21wbGV0ZWAsIHsgYm9keSwgLi4ub3B0aW9ucyB9KTtcbiAgfVxufVxuXG4vKipcbiAqIFRoZSBVcGxvYWQgb2JqZWN0IGNhbiBhY2NlcHQgYnl0ZSBjaHVua3MgaW4gdGhlIGZvcm0gb2YgUGFydHMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXBsb2FkIHtcbiAgLyoqXG4gICAqIFRoZSBVcGxvYWQgdW5pcXVlIGlkZW50aWZpZXIsIHdoaWNoIGNhbiBiZSByZWZlcmVuY2VkIGluIEFQSSBlbmRwb2ludHMuXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgaW50ZW5kZWQgbnVtYmVyIG9mIGJ5dGVzIHRvIGJlIHVwbG9hZGVkLlxuICAgKi9cbiAgYnl0ZXM6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSBmb3Igd2hlbiB0aGUgVXBsb2FkIHdhcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZF9hdDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpIGZvciB3aGVuIHRoZSBVcGxvYWQgd2lsbCBleHBpcmUuXG4gICAqL1xuICBleHBpcmVzX2F0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBmaWxlIHRvIGJlIHVwbG9hZGVkLlxuICAgKi9cbiAgZmlsZW5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG9iamVjdCB0eXBlLCB3aGljaCBpcyBhbHdheXMgXCJ1cGxvYWRcIi5cbiAgICovXG4gIG9iamVjdDogJ3VwbG9hZCc7XG5cbiAgLyoqXG4gICAqIFRoZSBpbnRlbmRlZCBwdXJwb3NlIG9mIHRoZSBmaWxlLlxuICAgKiBbUGxlYXNlIHJlZmVyIGhlcmVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvZmlsZXMvb2JqZWN0I2ZpbGVzL29iamVjdC1wdXJwb3NlKVxuICAgKiBmb3IgYWNjZXB0YWJsZSB2YWx1ZXMuXG4gICAqL1xuICBwdXJwb3NlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBzdGF0dXMgb2YgdGhlIFVwbG9hZC5cbiAgICovXG4gIHN0YXR1czogJ3BlbmRpbmcnIHwgJ2NvbXBsZXRlZCcgfCAnY2FuY2VsbGVkJyB8ICdleHBpcmVkJztcblxuICAvKipcbiAgICogVGhlIGBGaWxlYCBvYmplY3QgcmVwcmVzZW50cyBhIGRvY3VtZW50IHRoYXQgaGFzIGJlZW4gdXBsb2FkZWQgdG8gT3BlbkFJLlxuICAgKi9cbiAgZmlsZT86IEZpbGVzQVBJLkZpbGVPYmplY3QgfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVwbG9hZENyZWF0ZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIGJ5dGVzIGluIHRoZSBmaWxlIHlvdSBhcmUgdXBsb2FkaW5nLlxuICAgKi9cbiAgYnl0ZXM6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGZpbGUgdG8gdXBsb2FkLlxuICAgKi9cbiAgZmlsZW5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIE1JTUUgdHlwZSBvZiB0aGUgZmlsZS5cbiAgICpcbiAgICogVGhpcyBtdXN0IGZhbGwgd2l0aGluIHRoZSBzdXBwb3J0ZWQgTUlNRSB0eXBlcyBmb3IgeW91ciBmaWxlIHB1cnBvc2UuIFNlZSB0aGVcbiAgICogc3VwcG9ydGVkIE1JTUUgdHlwZXMgZm9yIGFzc2lzdGFudHMgYW5kIHZpc2lvbi5cbiAgICovXG4gIG1pbWVfdHlwZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgaW50ZW5kZWQgcHVycG9zZSBvZiB0aGUgdXBsb2FkZWQgZmlsZS5cbiAgICpcbiAgICogU2VlIHRoZVxuICAgKiBbZG9jdW1lbnRhdGlvbiBvbiBGaWxlIHB1cnBvc2VzXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2ZpbGVzL2NyZWF0ZSNmaWxlcy1jcmVhdGUtcHVycG9zZSkuXG4gICAqL1xuICBwdXJwb3NlOiBGaWxlc0FQSS5GaWxlUHVycG9zZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVcGxvYWRDb21wbGV0ZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBUaGUgb3JkZXJlZCBsaXN0IG9mIFBhcnQgSURzLlxuICAgKi9cbiAgcGFydF9pZHM6IEFycmF5PHN0cmluZz47XG5cbiAgLyoqXG4gICAqIFRoZSBvcHRpb25hbCBtZDUgY2hlY2tzdW0gZm9yIHRoZSBmaWxlIGNvbnRlbnRzIHRvIHZlcmlmeSBpZiB0aGUgYnl0ZXMgdXBsb2FkZWRcbiAgICogbWF0Y2hlcyB3aGF0IHlvdSBleHBlY3QuXG4gICAqL1xuICBtZDU/OiBzdHJpbmc7XG59XG5cblVwbG9hZHMuUGFydHMgPSBQYXJ0cztcblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIFVwbG9hZHMge1xuICBleHBvcnQge1xuICAgIHR5cGUgVXBsb2FkIGFzIFVwbG9hZCxcbiAgICB0eXBlIFVwbG9hZENyZWF0ZVBhcmFtcyBhcyBVcGxvYWRDcmVhdGVQYXJhbXMsXG4gICAgdHlwZSBVcGxvYWRDb21wbGV0ZVBhcmFtcyBhcyBVcGxvYWRDb21wbGV0ZVBhcmFtcyxcbiAgfTtcblxuICBleHBvcnQgeyBQYXJ0cyBhcyBQYXJ0cywgdHlwZSBVcGxvYWRQYXJ0IGFzIFVwbG9hZFBhcnQsIHR5cGUgUGFydENyZWF0ZVBhcmFtcyBhcyBQYXJ0Q3JlYXRlUGFyYW1zIH07XG59XG4iLCAiLyoqXG4gKiBMaWtlIGBQcm9taXNlLmFsbFNldHRsZWQoKWAgYnV0IHRocm93cyBhbiBlcnJvciBpZiBhbnkgcHJvbWlzZXMgYXJlIHJlamVjdGVkLlxuICovXG5leHBvcnQgY29uc3QgYWxsU2V0dGxlZFdpdGhUaHJvdyA9IGFzeW5jIDxSPihwcm9taXNlczogUHJvbWlzZTxSPltdKTogUHJvbWlzZTxSW10+ID0+IHtcbiAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsU2V0dGxlZChwcm9taXNlcyk7XG4gIGNvbnN0IHJlamVjdGVkID0gcmVzdWx0cy5maWx0ZXIoKHJlc3VsdCk6IHJlc3VsdCBpcyBQcm9taXNlUmVqZWN0ZWRSZXN1bHQgPT4gcmVzdWx0LnN0YXR1cyA9PT0gJ3JlamVjdGVkJyk7XG4gIGlmIChyZWplY3RlZC5sZW5ndGgpIHtcbiAgICBmb3IgKGNvbnN0IHJlc3VsdCBvZiByZWplY3RlZCkge1xuICAgICAgY29uc29sZS5lcnJvcihyZXN1bHQucmVhc29uKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cmVqZWN0ZWQubGVuZ3RofSBwcm9taXNlKHMpIGZhaWxlZCAtIHNlZSB0aGUgYWJvdmUgZXJyb3JzYCk7XG4gIH1cblxuICAvLyBOb3RlOiBUUyB3YXMgY29tcGxhaW5pbmcgYWJvdXQgdXNpbmcgYC5maWx0ZXIoKS5tYXAoKWAgaGVyZSBmb3Igc29tZSByZWFzb25cbiAgY29uc3QgdmFsdWVzOiBSW10gPSBbXTtcbiAgZm9yIChjb25zdCByZXN1bHQgb2YgcmVzdWx0cykge1xuICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSAnZnVsZmlsbGVkJykge1xuICAgICAgdmFsdWVzLnB1c2gocmVzdWx0LnZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlcztcbn07XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICcuLi8uLi9yZXNvdXJjZSc7XG5pbXBvcnQgeyBzbGVlcCwgVXBsb2FkYWJsZSwgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCAqIGFzIFZlY3RvclN0b3Jlc0FQSSBmcm9tICcuL3ZlY3Rvci1zdG9yZXMnO1xuaW1wb3J0IHsgQ3Vyc29yUGFnZSwgdHlwZSBDdXJzb3JQYWdlUGFyYW1zLCBQYWdlIH0gZnJvbSAnLi4vLi4vcGFnaW5hdGlvbic7XG5cbmV4cG9ydCBjbGFzcyBGaWxlcyBleHRlbmRzIEFQSVJlc291cmNlIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIHZlY3RvciBzdG9yZSBmaWxlIGJ5IGF0dGFjaGluZyBhXG4gICAqIFtGaWxlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2ZpbGVzKSB0byBhXG4gICAqIFt2ZWN0b3Igc3RvcmVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdmVjdG9yLXN0b3Jlcy9vYmplY3QpLlxuICAgKi9cbiAgY3JlYXRlKFxuICAgIHZlY3RvclN0b3JlSWQ6IHN0cmluZyxcbiAgICBib2R5OiBGaWxlQ3JlYXRlUGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLkFQSVByb21pc2U8VmVjdG9yU3RvcmVGaWxlPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvdmVjdG9yX3N0b3Jlcy8ke3ZlY3RvclN0b3JlSWR9L2ZpbGVzYCwge1xuICAgICAgYm9keSxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBhIHZlY3RvciBzdG9yZSBmaWxlLlxuICAgKi9cbiAgcmV0cmlldmUoXG4gICAgdmVjdG9yU3RvcmVJZDogc3RyaW5nLFxuICAgIGZpbGVJZDogc3RyaW5nLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLkFQSVByb21pc2U8VmVjdG9yU3RvcmVGaWxlPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXQoYC92ZWN0b3Jfc3RvcmVzLyR7dmVjdG9yU3RvcmVJZH0vZmlsZXMvJHtmaWxlSWR9YCwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGF0dHJpYnV0ZXMgb24gYSB2ZWN0b3Igc3RvcmUgZmlsZS5cbiAgICovXG4gIHVwZGF0ZShcbiAgICB2ZWN0b3JTdG9yZUlkOiBzdHJpbmcsXG4gICAgZmlsZUlkOiBzdHJpbmcsXG4gICAgYm9keTogRmlsZVVwZGF0ZVBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5BUElQcm9taXNlPFZlY3RvclN0b3JlRmlsZT4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQucG9zdChgL3ZlY3Rvcl9zdG9yZXMvJHt2ZWN0b3JTdG9yZUlkfS9maWxlcy8ke2ZpbGVJZH1gLCB7XG4gICAgICBib2R5LFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGxpc3Qgb2YgdmVjdG9yIHN0b3JlIGZpbGVzLlxuICAgKi9cbiAgbGlzdChcbiAgICB2ZWN0b3JTdG9yZUlkOiBzdHJpbmcsXG4gICAgcXVlcnk/OiBGaWxlTGlzdFBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5QYWdlUHJvbWlzZTxWZWN0b3JTdG9yZUZpbGVzUGFnZSwgVmVjdG9yU3RvcmVGaWxlPjtcbiAgbGlzdChcbiAgICB2ZWN0b3JTdG9yZUlkOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuUGFnZVByb21pc2U8VmVjdG9yU3RvcmVGaWxlc1BhZ2UsIFZlY3RvclN0b3JlRmlsZT47XG4gIGxpc3QoXG4gICAgdmVjdG9yU3RvcmVJZDogc3RyaW5nLFxuICAgIHF1ZXJ5OiBGaWxlTGlzdFBhcmFtcyB8IENvcmUuUmVxdWVzdE9wdGlvbnMgPSB7fSxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5QYWdlUHJvbWlzZTxWZWN0b3JTdG9yZUZpbGVzUGFnZSwgVmVjdG9yU3RvcmVGaWxlPiB7XG4gICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5saXN0KHZlY3RvclN0b3JlSWQsIHt9LCBxdWVyeSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0QVBJTGlzdChgL3ZlY3Rvcl9zdG9yZXMvJHt2ZWN0b3JTdG9yZUlkfS9maWxlc2AsIFZlY3RvclN0b3JlRmlsZXNQYWdlLCB7XG4gICAgICBxdWVyeSxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHZlY3RvciBzdG9yZSBmaWxlLiBUaGlzIHdpbGwgcmVtb3ZlIHRoZSBmaWxlIGZyb20gdGhlIHZlY3RvciBzdG9yZSBidXRcbiAgICogdGhlIGZpbGUgaXRzZWxmIHdpbGwgbm90IGJlIGRlbGV0ZWQuIFRvIGRlbGV0ZSB0aGUgZmlsZSwgdXNlIHRoZVxuICAgKiBbZGVsZXRlIGZpbGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvZmlsZXMvZGVsZXRlKVxuICAgKiBlbmRwb2ludC5cbiAgICovXG4gIGRlbChcbiAgICB2ZWN0b3JTdG9yZUlkOiBzdHJpbmcsXG4gICAgZmlsZUlkOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuQVBJUHJvbWlzZTxWZWN0b3JTdG9yZUZpbGVEZWxldGVkPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5kZWxldGUoYC92ZWN0b3Jfc3RvcmVzLyR7dmVjdG9yU3RvcmVJZH0vZmlsZXMvJHtmaWxlSWR9YCwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQXR0YWNoIGEgZmlsZSB0byB0aGUgZ2l2ZW4gdmVjdG9yIHN0b3JlIGFuZCB3YWl0IGZvciBpdCB0byBiZSBwcm9jZXNzZWQuXG4gICAqL1xuICBhc3luYyBjcmVhdGVBbmRQb2xsKFxuICAgIHZlY3RvclN0b3JlSWQ6IHN0cmluZyxcbiAgICBib2R5OiBGaWxlQ3JlYXRlUGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zICYgeyBwb2xsSW50ZXJ2YWxNcz86IG51bWJlciB9LFxuICApOiBQcm9taXNlPFZlY3RvclN0b3JlRmlsZT4ge1xuICAgIGNvbnN0IGZpbGUgPSBhd2FpdCB0aGlzLmNyZWF0ZSh2ZWN0b3JTdG9yZUlkLCBib2R5LCBvcHRpb25zKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5wb2xsKHZlY3RvclN0b3JlSWQsIGZpbGUuaWQsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdhaXQgZm9yIHRoZSB2ZWN0b3Igc3RvcmUgZmlsZSB0byBmaW5pc2ggcHJvY2Vzc2luZy5cbiAgICpcbiAgICogTm90ZTogdGhpcyB3aWxsIHJldHVybiBldmVuIGlmIHRoZSBmaWxlIGZhaWxlZCB0byBwcm9jZXNzLCB5b3UgbmVlZCB0byBjaGVja1xuICAgKiBmaWxlLmxhc3RfZXJyb3IgYW5kIGZpbGUuc3RhdHVzIHRvIGhhbmRsZSB0aGVzZSBjYXNlc1xuICAgKi9cbiAgYXN5bmMgcG9sbChcbiAgICB2ZWN0b3JTdG9yZUlkOiBzdHJpbmcsXG4gICAgZmlsZUlkOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMgJiB7IHBvbGxJbnRlcnZhbE1zPzogbnVtYmVyIH0sXG4gICk6IFByb21pc2U8VmVjdG9yU3RvcmVGaWxlPiB7XG4gICAgY29uc3QgaGVhZGVyczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHsgLi4ub3B0aW9ucz8uaGVhZGVycywgJ1gtU3RhaW5sZXNzLVBvbGwtSGVscGVyJzogJ3RydWUnIH07XG4gICAgaWYgKG9wdGlvbnM/LnBvbGxJbnRlcnZhbE1zKSB7XG4gICAgICBoZWFkZXJzWydYLVN0YWlubGVzcy1DdXN0b20tUG9sbC1JbnRlcnZhbCddID0gb3B0aW9ucy5wb2xsSW50ZXJ2YWxNcy50b1N0cmluZygpO1xuICAgIH1cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgY29uc3QgZmlsZVJlc3BvbnNlID0gYXdhaXQgdGhpcy5yZXRyaWV2ZSh2ZWN0b3JTdG9yZUlkLCBmaWxlSWQsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgaGVhZGVycyxcbiAgICAgIH0pLndpdGhSZXNwb25zZSgpO1xuXG4gICAgICBjb25zdCBmaWxlID0gZmlsZVJlc3BvbnNlLmRhdGE7XG5cbiAgICAgIHN3aXRjaCAoZmlsZS5zdGF0dXMpIHtcbiAgICAgICAgY2FzZSAnaW5fcHJvZ3Jlc3MnOlxuICAgICAgICAgIGxldCBzbGVlcEludGVydmFsID0gNTAwMDtcblxuICAgICAgICAgIGlmIChvcHRpb25zPy5wb2xsSW50ZXJ2YWxNcykge1xuICAgICAgICAgICAgc2xlZXBJbnRlcnZhbCA9IG9wdGlvbnMucG9sbEludGVydmFsTXM7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlckludGVydmFsID0gZmlsZVJlc3BvbnNlLnJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdvcGVuYWktcG9sbC1hZnRlci1tcycpO1xuICAgICAgICAgICAgaWYgKGhlYWRlckludGVydmFsKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGhlYWRlckludGVydmFsTXMgPSBwYXJzZUludChoZWFkZXJJbnRlcnZhbCk7XG4gICAgICAgICAgICAgIGlmICghaXNOYU4oaGVhZGVySW50ZXJ2YWxNcykpIHtcbiAgICAgICAgICAgICAgICBzbGVlcEludGVydmFsID0gaGVhZGVySW50ZXJ2YWxNcztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBhd2FpdCBzbGVlcChzbGVlcEludGVydmFsKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZmFpbGVkJzpcbiAgICAgICAgY2FzZSAnY29tcGxldGVkJzpcbiAgICAgICAgICByZXR1cm4gZmlsZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXBsb2FkIGEgZmlsZSB0byB0aGUgYGZpbGVzYCBBUEkgYW5kIHRoZW4gYXR0YWNoIGl0IHRvIHRoZSBnaXZlbiB2ZWN0b3Igc3RvcmUuXG4gICAqXG4gICAqIE5vdGUgdGhlIGZpbGUgd2lsbCBiZSBhc3luY2hyb25vdXNseSBwcm9jZXNzZWQgKHlvdSBjYW4gdXNlIHRoZSBhbHRlcm5hdGl2ZVxuICAgKiBwb2xsaW5nIGhlbHBlciBtZXRob2QgdG8gd2FpdCBmb3IgcHJvY2Vzc2luZyB0byBjb21wbGV0ZSkuXG4gICAqL1xuICBhc3luYyB1cGxvYWQoXG4gICAgdmVjdG9yU3RvcmVJZDogc3RyaW5nLFxuICAgIGZpbGU6IFVwbG9hZGFibGUsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IFByb21pc2U8VmVjdG9yU3RvcmVGaWxlPiB7XG4gICAgY29uc3QgZmlsZUluZm8gPSBhd2FpdCB0aGlzLl9jbGllbnQuZmlsZXMuY3JlYXRlKHsgZmlsZTogZmlsZSwgcHVycG9zZTogJ2Fzc2lzdGFudHMnIH0sIG9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZSh2ZWN0b3JTdG9yZUlkLCB7IGZpbGVfaWQ6IGZpbGVJbmZvLmlkIH0sIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIGZpbGUgdG8gYSB2ZWN0b3Igc3RvcmUgYW5kIHBvbGwgdW50aWwgcHJvY2Vzc2luZyBpcyBjb21wbGV0ZS5cbiAgICovXG4gIGFzeW5jIHVwbG9hZEFuZFBvbGwoXG4gICAgdmVjdG9yU3RvcmVJZDogc3RyaW5nLFxuICAgIGZpbGU6IFVwbG9hZGFibGUsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMgJiB7IHBvbGxJbnRlcnZhbE1zPzogbnVtYmVyIH0sXG4gICk6IFByb21pc2U8VmVjdG9yU3RvcmVGaWxlPiB7XG4gICAgY29uc3QgZmlsZUluZm8gPSBhd2FpdCB0aGlzLnVwbG9hZCh2ZWN0b3JTdG9yZUlkLCBmaWxlLCBvcHRpb25zKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5wb2xsKHZlY3RvclN0b3JlSWQsIGZpbGVJbmZvLmlkLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSB0aGUgcGFyc2VkIGNvbnRlbnRzIG9mIGEgdmVjdG9yIHN0b3JlIGZpbGUuXG4gICAqL1xuICBjb250ZW50KFxuICAgIHZlY3RvclN0b3JlSWQ6IHN0cmluZyxcbiAgICBmaWxlSWQ6IHN0cmluZyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5QYWdlUHJvbWlzZTxGaWxlQ29udGVudFJlc3BvbnNlc1BhZ2UsIEZpbGVDb250ZW50UmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoXG4gICAgICBgL3ZlY3Rvcl9zdG9yZXMvJHt2ZWN0b3JTdG9yZUlkfS9maWxlcy8ke2ZpbGVJZH0vY29udGVudGAsXG4gICAgICBGaWxlQ29udGVudFJlc3BvbnNlc1BhZ2UsXG4gICAgICB7IC4uLm9wdGlvbnMsIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0gfSxcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWZWN0b3JTdG9yZUZpbGVzUGFnZSBleHRlbmRzIEN1cnNvclBhZ2U8VmVjdG9yU3RvcmVGaWxlPiB7fVxuXG4vKipcbiAqIE5vdGU6IG5vIHBhZ2luYXRpb24gYWN0dWFsbHkgb2NjdXJzIHlldCwgdGhpcyBpcyBmb3IgZm9yd2FyZHMtY29tcGF0aWJpbGl0eS5cbiAqL1xuZXhwb3J0IGNsYXNzIEZpbGVDb250ZW50UmVzcG9uc2VzUGFnZSBleHRlbmRzIFBhZ2U8RmlsZUNvbnRlbnRSZXNwb25zZT4ge31cblxuLyoqXG4gKiBBIGxpc3Qgb2YgZmlsZXMgYXR0YWNoZWQgdG8gYSB2ZWN0b3Igc3RvcmUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVmVjdG9yU3RvcmVGaWxlIHtcbiAgLyoqXG4gICAqIFRoZSBpZGVudGlmaWVyLCB3aGljaCBjYW4gYmUgcmVmZXJlbmNlZCBpbiBBUEkgZW5kcG9pbnRzLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIFVuaXggdGltZXN0YW1wIChpbiBzZWNvbmRzKSBmb3Igd2hlbiB0aGUgdmVjdG9yIHN0b3JlIGZpbGUgd2FzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkX2F0OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBsYXN0IGVycm9yIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHZlY3RvciBzdG9yZSBmaWxlLiBXaWxsIGJlIGBudWxsYCBpZiB0aGVyZVxuICAgKiBhcmUgbm8gZXJyb3JzLlxuICAgKi9cbiAgbGFzdF9lcnJvcjogVmVjdG9yU3RvcmVGaWxlLkxhc3RFcnJvciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBvYmplY3QgdHlwZSwgd2hpY2ggaXMgYWx3YXlzIGB2ZWN0b3Jfc3RvcmUuZmlsZWAuXG4gICAqL1xuICBvYmplY3Q6ICd2ZWN0b3Jfc3RvcmUuZmlsZSc7XG5cbiAgLyoqXG4gICAqIFRoZSBzdGF0dXMgb2YgdGhlIHZlY3RvciBzdG9yZSBmaWxlLCB3aGljaCBjYW4gYmUgZWl0aGVyIGBpbl9wcm9ncmVzc2AsXG4gICAqIGBjb21wbGV0ZWRgLCBgY2FuY2VsbGVkYCwgb3IgYGZhaWxlZGAuIFRoZSBzdGF0dXMgYGNvbXBsZXRlZGAgaW5kaWNhdGVzIHRoYXQgdGhlXG4gICAqIHZlY3RvciBzdG9yZSBmaWxlIGlzIHJlYWR5IGZvciB1c2UuXG4gICAqL1xuICBzdGF0dXM6ICdpbl9wcm9ncmVzcycgfCAnY29tcGxldGVkJyB8ICdjYW5jZWxsZWQnIHwgJ2ZhaWxlZCc7XG5cbiAgLyoqXG4gICAqIFRoZSB0b3RhbCB2ZWN0b3Igc3RvcmUgdXNhZ2UgaW4gYnl0ZXMuIE5vdGUgdGhhdCB0aGlzIG1heSBiZSBkaWZmZXJlbnQgZnJvbSB0aGVcbiAgICogb3JpZ2luYWwgZmlsZSBzaXplLlxuICAgKi9cbiAgdXNhZ2VfYnl0ZXM6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZVxuICAgKiBbdmVjdG9yIHN0b3JlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL3ZlY3Rvci1zdG9yZXMvb2JqZWN0KVxuICAgKiB0aGF0IHRoZSBbRmlsZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maWxlcykgaXNcbiAgICogYXR0YWNoZWQgdG8uXG4gICAqL1xuICB2ZWN0b3Jfc3RvcmVfaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdCwgYW5kXG4gICAqIHF1ZXJ5aW5nIGZvciBvYmplY3RzIHZpYSBBUEkgb3IgdGhlIGRhc2hib2FyZC4gS2V5cyBhcmUgc3RyaW5ncyB3aXRoIGEgbWF4aW11bVxuICAgKiBsZW5ndGggb2YgNjQgY2hhcmFjdGVycy4gVmFsdWVzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA1MTJcbiAgICogY2hhcmFjdGVycywgYm9vbGVhbnMsIG9yIG51bWJlcnMuXG4gICAqL1xuICBhdHRyaWJ1dGVzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbj4gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgc3RyYXRlZ3kgdXNlZCB0byBjaHVuayB0aGUgZmlsZS5cbiAgICovXG4gIGNodW5raW5nX3N0cmF0ZWd5PzogVmVjdG9yU3RvcmVzQVBJLkZpbGVDaHVua2luZ1N0cmF0ZWd5O1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFZlY3RvclN0b3JlRmlsZSB7XG4gIC8qKlxuICAgKiBUaGUgbGFzdCBlcnJvciBhc3NvY2lhdGVkIHdpdGggdGhpcyB2ZWN0b3Igc3RvcmUgZmlsZS4gV2lsbCBiZSBgbnVsbGAgaWYgdGhlcmVcbiAgICogYXJlIG5vIGVycm9ycy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgTGFzdEVycm9yIHtcbiAgICAvKipcbiAgICAgKiBPbmUgb2YgYHNlcnZlcl9lcnJvcmAgb3IgYHJhdGVfbGltaXRfZXhjZWVkZWRgLlxuICAgICAqL1xuICAgIGNvZGU6ICdzZXJ2ZXJfZXJyb3InIHwgJ3Vuc3VwcG9ydGVkX2ZpbGUnIHwgJ2ludmFsaWRfZmlsZSc7XG5cbiAgICAvKipcbiAgICAgKiBBIGh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvci5cbiAgICAgKi9cbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBWZWN0b3JTdG9yZUZpbGVEZWxldGVkIHtcbiAgaWQ6IHN0cmluZztcblxuICBkZWxldGVkOiBib29sZWFuO1xuXG4gIG9iamVjdDogJ3ZlY3Rvcl9zdG9yZS5maWxlLmRlbGV0ZWQnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVDb250ZW50UmVzcG9uc2Uge1xuICAvKipcbiAgICogVGhlIHRleHQgY29udGVudFxuICAgKi9cbiAgdGV4dD86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgdHlwZSAoY3VycmVudGx5IG9ubHkgYFwidGV4dFwiYClcbiAgICovXG4gIHR5cGU/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZUNyZWF0ZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBBIFtGaWxlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2ZpbGVzKSBJRCB0aGF0IHRoZVxuICAgKiB2ZWN0b3Igc3RvcmUgc2hvdWxkIHVzZS4gVXNlZnVsIGZvciB0b29scyBsaWtlIGBmaWxlX3NlYXJjaGAgdGhhdCBjYW4gYWNjZXNzXG4gICAqIGZpbGVzLlxuICAgKi9cbiAgZmlsZV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtXG4gICAqIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aCBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMlxuICAgKiBjaGFyYWN0ZXJzLCBib29sZWFucywgb3IgbnVtYmVycy5cbiAgICovXG4gIGF0dHJpYnV0ZXM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuPiB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFRoZSBjaHVua2luZyBzdHJhdGVneSB1c2VkIHRvIGNodW5rIHRoZSBmaWxlKHMpLiBJZiBub3Qgc2V0LCB3aWxsIHVzZSB0aGUgYGF1dG9gXG4gICAqIHN0cmF0ZWd5LiBPbmx5IGFwcGxpY2FibGUgaWYgYGZpbGVfaWRzYCBpcyBub24tZW1wdHkuXG4gICAqL1xuICBjaHVua2luZ19zdHJhdGVneT86IFZlY3RvclN0b3Jlc0FQSS5GaWxlQ2h1bmtpbmdTdHJhdGVneVBhcmFtO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVVcGRhdGVQYXJhbXMge1xuICAvKipcbiAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdCwgYW5kXG4gICAqIHF1ZXJ5aW5nIGZvciBvYmplY3RzIHZpYSBBUEkgb3IgdGhlIGRhc2hib2FyZC4gS2V5cyBhcmUgc3RyaW5ncyB3aXRoIGEgbWF4aW11bVxuICAgKiBsZW5ndGggb2YgNjQgY2hhcmFjdGVycy4gVmFsdWVzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA1MTJcbiAgICogY2hhcmFjdGVycywgYm9vbGVhbnMsIG9yIG51bWJlcnMuXG4gICAqL1xuICBhdHRyaWJ1dGVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuPiB8IG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZUxpc3RQYXJhbXMgZXh0ZW5kcyBDdXJzb3JQYWdlUGFyYW1zIHtcbiAgLyoqXG4gICAqIEEgY3Vyc29yIGZvciB1c2UgaW4gcGFnaW5hdGlvbi4gYGJlZm9yZWAgaXMgYW4gb2JqZWN0IElEIHRoYXQgZGVmaW5lcyB5b3VyIHBsYWNlXG4gICAqIGluIHRoZSBsaXN0LiBGb3IgaW5zdGFuY2UsIGlmIHlvdSBtYWtlIGEgbGlzdCByZXF1ZXN0IGFuZCByZWNlaXZlIDEwMCBvYmplY3RzLFxuICAgKiBzdGFydGluZyB3aXRoIG9ial9mb28sIHlvdXIgc3Vic2VxdWVudCBjYWxsIGNhbiBpbmNsdWRlIGJlZm9yZT1vYmpfZm9vIGluIG9yZGVyXG4gICAqIHRvIGZldGNoIHRoZSBwcmV2aW91cyBwYWdlIG9mIHRoZSBsaXN0LlxuICAgKi9cbiAgYmVmb3JlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBGaWx0ZXIgYnkgZmlsZSBzdGF0dXMuIE9uZSBvZiBgaW5fcHJvZ3Jlc3NgLCBgY29tcGxldGVkYCwgYGZhaWxlZGAsIGBjYW5jZWxsZWRgLlxuICAgKi9cbiAgZmlsdGVyPzogJ2luX3Byb2dyZXNzJyB8ICdjb21wbGV0ZWQnIHwgJ2ZhaWxlZCcgfCAnY2FuY2VsbGVkJztcblxuICAvKipcbiAgICogU29ydCBvcmRlciBieSB0aGUgYGNyZWF0ZWRfYXRgIHRpbWVzdGFtcCBvZiB0aGUgb2JqZWN0cy4gYGFzY2AgZm9yIGFzY2VuZGluZ1xuICAgKiBvcmRlciBhbmQgYGRlc2NgIGZvciBkZXNjZW5kaW5nIG9yZGVyLlxuICAgKi9cbiAgb3JkZXI/OiAnYXNjJyB8ICdkZXNjJztcbn1cblxuRmlsZXMuVmVjdG9yU3RvcmVGaWxlc1BhZ2UgPSBWZWN0b3JTdG9yZUZpbGVzUGFnZTtcbkZpbGVzLkZpbGVDb250ZW50UmVzcG9uc2VzUGFnZSA9IEZpbGVDb250ZW50UmVzcG9uc2VzUGFnZTtcblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIEZpbGVzIHtcbiAgZXhwb3J0IHtcbiAgICB0eXBlIFZlY3RvclN0b3JlRmlsZSBhcyBWZWN0b3JTdG9yZUZpbGUsXG4gICAgdHlwZSBWZWN0b3JTdG9yZUZpbGVEZWxldGVkIGFzIFZlY3RvclN0b3JlRmlsZURlbGV0ZWQsXG4gICAgdHlwZSBGaWxlQ29udGVudFJlc3BvbnNlIGFzIEZpbGVDb250ZW50UmVzcG9uc2UsXG4gICAgVmVjdG9yU3RvcmVGaWxlc1BhZ2UgYXMgVmVjdG9yU3RvcmVGaWxlc1BhZ2UsXG4gICAgRmlsZUNvbnRlbnRSZXNwb25zZXNQYWdlIGFzIEZpbGVDb250ZW50UmVzcG9uc2VzUGFnZSxcbiAgICB0eXBlIEZpbGVDcmVhdGVQYXJhbXMgYXMgRmlsZUNyZWF0ZVBhcmFtcyxcbiAgICB0eXBlIEZpbGVVcGRhdGVQYXJhbXMgYXMgRmlsZVVwZGF0ZVBhcmFtcyxcbiAgICB0eXBlIEZpbGVMaXN0UGFyYW1zIGFzIEZpbGVMaXN0UGFyYW1zLFxuICB9O1xufVxuIiwgIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5cbmltcG9ydCB7IEFQSVJlc291cmNlIH0gZnJvbSAnLi4vLi4vcmVzb3VyY2UnO1xuaW1wb3J0IHsgaXNSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgc2xlZXAgfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IFVwbG9hZGFibGUgfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IGFsbFNldHRsZWRXaXRoVGhyb3cgfSBmcm9tICcuLi8uLi9saWIvVXRpbCc7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgRmlsZXNBUEkgZnJvbSAnLi9maWxlcyc7XG5pbXBvcnQgeyBWZWN0b3JTdG9yZUZpbGVzUGFnZSB9IGZyb20gJy4vZmlsZXMnO1xuaW1wb3J0ICogYXMgVmVjdG9yU3RvcmVzQVBJIGZyb20gJy4vdmVjdG9yLXN0b3Jlcyc7XG5pbXBvcnQgeyB0eXBlIEN1cnNvclBhZ2VQYXJhbXMgfSBmcm9tICcuLi8uLi9wYWdpbmF0aW9uJztcblxuZXhwb3J0IGNsYXNzIEZpbGVCYXRjaGVzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICAvKipcbiAgICogQ3JlYXRlIGEgdmVjdG9yIHN0b3JlIGZpbGUgYmF0Y2guXG4gICAqL1xuICBjcmVhdGUoXG4gICAgdmVjdG9yU3RvcmVJZDogc3RyaW5nLFxuICAgIGJvZHk6IEZpbGVCYXRjaENyZWF0ZVBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5BUElQcm9taXNlPFZlY3RvclN0b3JlRmlsZUJhdGNoPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvdmVjdG9yX3N0b3Jlcy8ke3ZlY3RvclN0b3JlSWR9L2ZpbGVfYmF0Y2hlc2AsIHtcbiAgICAgIGJvZHksXG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgYSB2ZWN0b3Igc3RvcmUgZmlsZSBiYXRjaC5cbiAgICovXG4gIHJldHJpZXZlKFxuICAgIHZlY3RvclN0b3JlSWQ6IHN0cmluZyxcbiAgICBiYXRjaElkOiBzdHJpbmcsXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuQVBJUHJvbWlzZTxWZWN0b3JTdG9yZUZpbGVCYXRjaD4ge1xuICAgIHJldHVybiB0aGlzLl9jbGllbnQuZ2V0KGAvdmVjdG9yX3N0b3Jlcy8ke3ZlY3RvclN0b3JlSWR9L2ZpbGVfYmF0Y2hlcy8ke2JhdGNoSWR9YCwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VsIGEgdmVjdG9yIHN0b3JlIGZpbGUgYmF0Y2guIFRoaXMgYXR0ZW1wdHMgdG8gY2FuY2VsIHRoZSBwcm9jZXNzaW5nIG9mXG4gICAqIGZpbGVzIGluIHRoaXMgYmF0Y2ggYXMgc29vbiBhcyBwb3NzaWJsZS5cbiAgICovXG4gIGNhbmNlbChcbiAgICB2ZWN0b3JTdG9yZUlkOiBzdHJpbmcsXG4gICAgYmF0Y2hJZDogc3RyaW5nLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLkFQSVByb21pc2U8VmVjdG9yU3RvcmVGaWxlQmF0Y2g+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoYC92ZWN0b3Jfc3RvcmVzLyR7dmVjdG9yU3RvcmVJZH0vZmlsZV9iYXRjaGVzLyR7YmF0Y2hJZH0vY2FuY2VsYCwge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgdmVjdG9yIHN0b3JlIGJhdGNoIGFuZCBwb2xsIHVudGlsIGFsbCBmaWxlcyBoYXZlIGJlZW4gcHJvY2Vzc2VkLlxuICAgKi9cbiAgYXN5bmMgY3JlYXRlQW5kUG9sbChcbiAgICB2ZWN0b3JTdG9yZUlkOiBzdHJpbmcsXG4gICAgYm9keTogRmlsZUJhdGNoQ3JlYXRlUGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zICYgeyBwb2xsSW50ZXJ2YWxNcz86IG51bWJlciB9LFxuICApOiBQcm9taXNlPFZlY3RvclN0b3JlRmlsZUJhdGNoPiB7XG4gICAgY29uc3QgYmF0Y2ggPSBhd2FpdCB0aGlzLmNyZWF0ZSh2ZWN0b3JTdG9yZUlkLCBib2R5KTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5wb2xsKHZlY3RvclN0b3JlSWQsIGJhdGNoLmlkLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbGlzdCBvZiB2ZWN0b3Igc3RvcmUgZmlsZXMgaW4gYSBiYXRjaC5cbiAgICovXG4gIGxpc3RGaWxlcyhcbiAgICB2ZWN0b3JTdG9yZUlkOiBzdHJpbmcsXG4gICAgYmF0Y2hJZDogc3RyaW5nLFxuICAgIHF1ZXJ5PzogRmlsZUJhdGNoTGlzdEZpbGVzUGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLlBhZ2VQcm9taXNlPFZlY3RvclN0b3JlRmlsZXNQYWdlLCBGaWxlc0FQSS5WZWN0b3JTdG9yZUZpbGU+O1xuICBsaXN0RmlsZXMoXG4gICAgdmVjdG9yU3RvcmVJZDogc3RyaW5nLFxuICAgIGJhdGNoSWQ6IHN0cmluZyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5QYWdlUHJvbWlzZTxWZWN0b3JTdG9yZUZpbGVzUGFnZSwgRmlsZXNBUEkuVmVjdG9yU3RvcmVGaWxlPjtcbiAgbGlzdEZpbGVzKFxuICAgIHZlY3RvclN0b3JlSWQ6IHN0cmluZyxcbiAgICBiYXRjaElkOiBzdHJpbmcsXG4gICAgcXVlcnk6IEZpbGVCYXRjaExpc3RGaWxlc1BhcmFtcyB8IENvcmUuUmVxdWVzdE9wdGlvbnMgPSB7fSxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5QYWdlUHJvbWlzZTxWZWN0b3JTdG9yZUZpbGVzUGFnZSwgRmlsZXNBUEkuVmVjdG9yU3RvcmVGaWxlPiB7XG4gICAgaWYgKGlzUmVxdWVzdE9wdGlvbnMocXVlcnkpKSB7XG4gICAgICByZXR1cm4gdGhpcy5saXN0RmlsZXModmVjdG9yU3RvcmVJZCwgYmF0Y2hJZCwge30sIHF1ZXJ5KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KFxuICAgICAgYC92ZWN0b3Jfc3RvcmVzLyR7dmVjdG9yU3RvcmVJZH0vZmlsZV9iYXRjaGVzLyR7YmF0Y2hJZH0vZmlsZXNgLFxuICAgICAgVmVjdG9yU3RvcmVGaWxlc1BhZ2UsXG4gICAgICB7IHF1ZXJ5LCAuLi5vcHRpb25zLCBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9IH0sXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXYWl0IGZvciB0aGUgZ2l2ZW4gZmlsZSBiYXRjaCB0byBiZSBwcm9jZXNzZWQuXG4gICAqXG4gICAqIE5vdGU6IHRoaXMgd2lsbCByZXR1cm4gZXZlbiBpZiBvbmUgb2YgdGhlIGZpbGVzIGZhaWxlZCB0byBwcm9jZXNzLCB5b3UgbmVlZCB0b1xuICAgKiBjaGVjayBiYXRjaC5maWxlX2NvdW50cy5mYWlsZWRfY291bnQgdG8gaGFuZGxlIHRoaXMgY2FzZS5cbiAgICovXG4gIGFzeW5jIHBvbGwoXG4gICAgdmVjdG9yU3RvcmVJZDogc3RyaW5nLFxuICAgIGJhdGNoSWQ6IHN0cmluZyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyAmIHsgcG9sbEludGVydmFsTXM/OiBudW1iZXIgfSxcbiAgKTogUHJvbWlzZTxWZWN0b3JTdG9yZUZpbGVCYXRjaD4ge1xuICAgIGNvbnN0IGhlYWRlcnM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7IC4uLm9wdGlvbnM/LmhlYWRlcnMsICdYLVN0YWlubGVzcy1Qb2xsLUhlbHBlcic6ICd0cnVlJyB9O1xuICAgIGlmIChvcHRpb25zPy5wb2xsSW50ZXJ2YWxNcykge1xuICAgICAgaGVhZGVyc1snWC1TdGFpbmxlc3MtQ3VzdG9tLVBvbGwtSW50ZXJ2YWwnXSA9IG9wdGlvbnMucG9sbEludGVydmFsTXMudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgY29uc3QgeyBkYXRhOiBiYXRjaCwgcmVzcG9uc2UgfSA9IGF3YWl0IHRoaXMucmV0cmlldmUodmVjdG9yU3RvcmVJZCwgYmF0Y2hJZCwge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBoZWFkZXJzLFxuICAgICAgfSkud2l0aFJlc3BvbnNlKCk7XG5cbiAgICAgIHN3aXRjaCAoYmF0Y2guc3RhdHVzKSB7XG4gICAgICAgIGNhc2UgJ2luX3Byb2dyZXNzJzpcbiAgICAgICAgICBsZXQgc2xlZXBJbnRlcnZhbCA9IDUwMDA7XG5cbiAgICAgICAgICBpZiAob3B0aW9ucz8ucG9sbEludGVydmFsTXMpIHtcbiAgICAgICAgICAgIHNsZWVwSW50ZXJ2YWwgPSBvcHRpb25zLnBvbGxJbnRlcnZhbE1zO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBoZWFkZXJJbnRlcnZhbCA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdvcGVuYWktcG9sbC1hZnRlci1tcycpO1xuICAgICAgICAgICAgaWYgKGhlYWRlckludGVydmFsKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGhlYWRlckludGVydmFsTXMgPSBwYXJzZUludChoZWFkZXJJbnRlcnZhbCk7XG4gICAgICAgICAgICAgIGlmICghaXNOYU4oaGVhZGVySW50ZXJ2YWxNcykpIHtcbiAgICAgICAgICAgICAgICBzbGVlcEludGVydmFsID0gaGVhZGVySW50ZXJ2YWxNcztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBhd2FpdCBzbGVlcChzbGVlcEludGVydmFsKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZmFpbGVkJzpcbiAgICAgICAgY2FzZSAnY2FuY2VsbGVkJzpcbiAgICAgICAgY2FzZSAnY29tcGxldGVkJzpcbiAgICAgICAgICByZXR1cm4gYmF0Y2g7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwbG9hZHMgdGhlIGdpdmVuIGZpbGVzIGNvbmN1cnJlbnRseSBhbmQgdGhlbiBjcmVhdGVzIGEgdmVjdG9yIHN0b3JlIGZpbGUgYmF0Y2guXG4gICAqXG4gICAqIFRoZSBjb25jdXJyZW5jeSBsaW1pdCBpcyBjb25maWd1cmFibGUgdXNpbmcgdGhlIGBtYXhDb25jdXJyZW5jeWAgcGFyYW1ldGVyLlxuICAgKi9cbiAgYXN5bmMgdXBsb2FkQW5kUG9sbChcbiAgICB2ZWN0b3JTdG9yZUlkOiBzdHJpbmcsXG4gICAgeyBmaWxlcywgZmlsZUlkcyA9IFtdIH06IHsgZmlsZXM6IFVwbG9hZGFibGVbXTsgZmlsZUlkcz86IHN0cmluZ1tdIH0sXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMgJiB7IHBvbGxJbnRlcnZhbE1zPzogbnVtYmVyOyBtYXhDb25jdXJyZW5jeT86IG51bWJlciB9LFxuICApOiBQcm9taXNlPFZlY3RvclN0b3JlRmlsZUJhdGNoPiB7XG4gICAgaWYgKGZpbGVzID09IG51bGwgfHwgZmlsZXMubGVuZ3RoID09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYE5vIFxcYGZpbGVzXFxgIHByb3ZpZGVkIHRvIHByb2Nlc3MuIElmIHlvdSd2ZSBhbHJlYWR5IHVwbG9hZGVkIGZpbGVzIHlvdSBzaG91bGQgdXNlIFxcYC5jcmVhdGVBbmRQb2xsKClcXGAgaW5zdGVhZGAsXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbmZpZ3VyZWRDb25jdXJyZW5jeSA9IG9wdGlvbnM/Lm1heENvbmN1cnJlbmN5ID8/IDU7XG5cbiAgICAvLyBXZSBjYXAgdGhlIG51bWJlciBvZiB3b3JrZXJzIGF0IHRoZSBudW1iZXIgb2YgZmlsZXMgKHNvIHdlIGRvbid0IHN0YXJ0IGFueSB1bm5lY2Vzc2FyeSB3b3JrZXJzKVxuICAgIGNvbnN0IGNvbmN1cnJlbmN5TGltaXQgPSBNYXRoLm1pbihjb25maWd1cmVkQ29uY3VycmVuY3ksIGZpbGVzLmxlbmd0aCk7XG5cbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLl9jbGllbnQ7XG4gICAgY29uc3QgZmlsZUl0ZXJhdG9yID0gZmlsZXMudmFsdWVzKCk7XG4gICAgY29uc3QgYWxsRmlsZUlkczogc3RyaW5nW10gPSBbLi4uZmlsZUlkc107XG5cbiAgICAvLyBUaGlzIGNvZGUgaXMgYmFzZWQgb24gdGhpcyBkZXNpZ24uIFRoZSBsaWJyYXJpZXMgZG9uJ3QgYWNjb21tb2RhdGUgb3VyIGVudmlyb25tZW50IGxpbWl0cy5cbiAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80MDYzOTQzMi93aGF0LWlzLXRoZS1iZXN0LXdheS10by1saW1pdC1jb25jdXJyZW5jeS13aGVuLXVzaW5nLWVzNnMtcHJvbWlzZS1hbGxcbiAgICBhc3luYyBmdW5jdGlvbiBwcm9jZXNzRmlsZXMoaXRlcmF0b3I6IEl0ZXJhYmxlSXRlcmF0b3I8VXBsb2FkYWJsZT4pIHtcbiAgICAgIGZvciAobGV0IGl0ZW0gb2YgaXRlcmF0b3IpIHtcbiAgICAgICAgY29uc3QgZmlsZU9iaiA9IGF3YWl0IGNsaWVudC5maWxlcy5jcmVhdGUoeyBmaWxlOiBpdGVtLCBwdXJwb3NlOiAnYXNzaXN0YW50cycgfSwgb3B0aW9ucyk7XG4gICAgICAgIGFsbEZpbGVJZHMucHVzaChmaWxlT2JqLmlkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTdGFydCB3b3JrZXJzIHRvIHByb2Nlc3MgcmVzdWx0c1xuICAgIGNvbnN0IHdvcmtlcnMgPSBBcnJheShjb25jdXJyZW5jeUxpbWl0KS5maWxsKGZpbGVJdGVyYXRvcikubWFwKHByb2Nlc3NGaWxlcyk7XG5cbiAgICAvLyBXYWl0IGZvciBhbGwgcHJvY2Vzc2luZyB0byBjb21wbGV0ZS5cbiAgICBhd2FpdCBhbGxTZXR0bGVkV2l0aFRocm93KHdvcmtlcnMpO1xuXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY3JlYXRlQW5kUG9sbCh2ZWN0b3JTdG9yZUlkLCB7XG4gICAgICBmaWxlX2lkczogYWxsRmlsZUlkcyxcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEEgYmF0Y2ggb2YgZmlsZXMgYXR0YWNoZWQgdG8gYSB2ZWN0b3Igc3RvcmUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVmVjdG9yU3RvcmVGaWxlQmF0Y2gge1xuICAvKipcbiAgICogVGhlIGlkZW50aWZpZXIsIHdoaWNoIGNhbiBiZSByZWZlcmVuY2VkIGluIEFQSSBlbmRwb2ludHMuXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpIGZvciB3aGVuIHRoZSB2ZWN0b3Igc3RvcmUgZmlsZXMgYmF0Y2ggd2FzXG4gICAqIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkX2F0OiBudW1iZXI7XG5cbiAgZmlsZV9jb3VudHM6IFZlY3RvclN0b3JlRmlsZUJhdGNoLkZpbGVDb3VudHM7XG5cbiAgLyoqXG4gICAqIFRoZSBvYmplY3QgdHlwZSwgd2hpY2ggaXMgYWx3YXlzIGB2ZWN0b3Jfc3RvcmUuZmlsZV9iYXRjaGAuXG4gICAqL1xuICBvYmplY3Q6ICd2ZWN0b3Jfc3RvcmUuZmlsZXNfYmF0Y2gnO1xuXG4gIC8qKlxuICAgKiBUaGUgc3RhdHVzIG9mIHRoZSB2ZWN0b3Igc3RvcmUgZmlsZXMgYmF0Y2gsIHdoaWNoIGNhbiBiZSBlaXRoZXIgYGluX3Byb2dyZXNzYCxcbiAgICogYGNvbXBsZXRlZGAsIGBjYW5jZWxsZWRgIG9yIGBmYWlsZWRgLlxuICAgKi9cbiAgc3RhdHVzOiAnaW5fcHJvZ3Jlc3MnIHwgJ2NvbXBsZXRlZCcgfCAnY2FuY2VsbGVkJyB8ICdmYWlsZWQnO1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlXG4gICAqIFt2ZWN0b3Igc3RvcmVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvdmVjdG9yLXN0b3Jlcy9vYmplY3QpXG4gICAqIHRoYXQgdGhlIFtGaWxlXShodHRwczovL3BsYXRmb3JtLm9wZW5haS5jb20vZG9jcy9hcGktcmVmZXJlbmNlL2ZpbGVzKSBpc1xuICAgKiBhdHRhY2hlZCB0by5cbiAgICovXG4gIHZlY3Rvcl9zdG9yZV9pZDogc3RyaW5nO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFZlY3RvclN0b3JlRmlsZUJhdGNoIHtcbiAgZXhwb3J0IGludGVyZmFjZSBGaWxlQ291bnRzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGZpbGVzIHRoYXQgd2hlcmUgY2FuY2VsbGVkLlxuICAgICAqL1xuICAgIGNhbmNlbGxlZDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBmaWxlcyB0aGF0IGhhdmUgYmVlbiBwcm9jZXNzZWQuXG4gICAgICovXG4gICAgY29tcGxldGVkOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGZpbGVzIHRoYXQgaGF2ZSBmYWlsZWQgdG8gcHJvY2Vzcy5cbiAgICAgKi9cbiAgICBmYWlsZWQ6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgZmlsZXMgdGhhdCBhcmUgY3VycmVudGx5IGJlaW5nIHByb2Nlc3NlZC5cbiAgICAgKi9cbiAgICBpbl9wcm9ncmVzczogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRvdGFsIG51bWJlciBvZiBmaWxlcy5cbiAgICAgKi9cbiAgICB0b3RhbDogbnVtYmVyO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZUJhdGNoQ3JlYXRlUGFyYW1zIHtcbiAgLyoqXG4gICAqIEEgbGlzdCBvZiBbRmlsZV0oaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tL2RvY3MvYXBpLXJlZmVyZW5jZS9maWxlcykgSURzIHRoYXRcbiAgICogdGhlIHZlY3RvciBzdG9yZSBzaG91bGQgdXNlLiBVc2VmdWwgZm9yIHRvb2xzIGxpa2UgYGZpbGVfc2VhcmNoYCB0aGF0IGNhbiBhY2Nlc3NcbiAgICogZmlsZXMuXG4gICAqL1xuICBmaWxlX2lkczogQXJyYXk8c3RyaW5nPjtcblxuICAvKipcbiAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdCwgYW5kXG4gICAqIHF1ZXJ5aW5nIGZvciBvYmplY3RzIHZpYSBBUEkgb3IgdGhlIGRhc2hib2FyZC4gS2V5cyBhcmUgc3RyaW5ncyB3aXRoIGEgbWF4aW11bVxuICAgKiBsZW5ndGggb2YgNjQgY2hhcmFjdGVycy4gVmFsdWVzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA1MTJcbiAgICogY2hhcmFjdGVycywgYm9vbGVhbnMsIG9yIG51bWJlcnMuXG4gICAqL1xuICBhdHRyaWJ1dGVzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbj4gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgY2h1bmtpbmcgc3RyYXRlZ3kgdXNlZCB0byBjaHVuayB0aGUgZmlsZShzKS4gSWYgbm90IHNldCwgd2lsbCB1c2UgdGhlIGBhdXRvYFxuICAgKiBzdHJhdGVneS4gT25seSBhcHBsaWNhYmxlIGlmIGBmaWxlX2lkc2AgaXMgbm9uLWVtcHR5LlxuICAgKi9cbiAgY2h1bmtpbmdfc3RyYXRlZ3k/OiBWZWN0b3JTdG9yZXNBUEkuRmlsZUNodW5raW5nU3RyYXRlZ3lQYXJhbTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWxlQmF0Y2hMaXN0RmlsZXNQYXJhbXMgZXh0ZW5kcyBDdXJzb3JQYWdlUGFyYW1zIHtcbiAgLyoqXG4gICAqIEEgY3Vyc29yIGZvciB1c2UgaW4gcGFnaW5hdGlvbi4gYGJlZm9yZWAgaXMgYW4gb2JqZWN0IElEIHRoYXQgZGVmaW5lcyB5b3VyIHBsYWNlXG4gICAqIGluIHRoZSBsaXN0LiBGb3IgaW5zdGFuY2UsIGlmIHlvdSBtYWtlIGEgbGlzdCByZXF1ZXN0IGFuZCByZWNlaXZlIDEwMCBvYmplY3RzLFxuICAgKiBzdGFydGluZyB3aXRoIG9ial9mb28sIHlvdXIgc3Vic2VxdWVudCBjYWxsIGNhbiBpbmNsdWRlIGJlZm9yZT1vYmpfZm9vIGluIG9yZGVyXG4gICAqIHRvIGZldGNoIHRoZSBwcmV2aW91cyBwYWdlIG9mIHRoZSBsaXN0LlxuICAgKi9cbiAgYmVmb3JlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBGaWx0ZXIgYnkgZmlsZSBzdGF0dXMuIE9uZSBvZiBgaW5fcHJvZ3Jlc3NgLCBgY29tcGxldGVkYCwgYGZhaWxlZGAsIGBjYW5jZWxsZWRgLlxuICAgKi9cbiAgZmlsdGVyPzogJ2luX3Byb2dyZXNzJyB8ICdjb21wbGV0ZWQnIHwgJ2ZhaWxlZCcgfCAnY2FuY2VsbGVkJztcblxuICAvKipcbiAgICogU29ydCBvcmRlciBieSB0aGUgYGNyZWF0ZWRfYXRgIHRpbWVzdGFtcCBvZiB0aGUgb2JqZWN0cy4gYGFzY2AgZm9yIGFzY2VuZGluZ1xuICAgKiBvcmRlciBhbmQgYGRlc2NgIGZvciBkZXNjZW5kaW5nIG9yZGVyLlxuICAgKi9cbiAgb3JkZXI/OiAnYXNjJyB8ICdkZXNjJztcbn1cblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIEZpbGVCYXRjaGVzIHtcbiAgZXhwb3J0IHtcbiAgICB0eXBlIFZlY3RvclN0b3JlRmlsZUJhdGNoIGFzIFZlY3RvclN0b3JlRmlsZUJhdGNoLFxuICAgIHR5cGUgRmlsZUJhdGNoQ3JlYXRlUGFyYW1zIGFzIEZpbGVCYXRjaENyZWF0ZVBhcmFtcyxcbiAgICB0eXBlIEZpbGVCYXRjaExpc3RGaWxlc1BhcmFtcyBhcyBGaWxlQmF0Y2hMaXN0RmlsZXNQYXJhbXMsXG4gIH07XG59XG5cbmV4cG9ydCB7IFZlY3RvclN0b3JlRmlsZXNQYWdlIH07XG4iLCAiLy8gRmlsZSBnZW5lcmF0ZWQgZnJvbSBvdXIgT3BlbkFQSSBzcGVjIGJ5IFN0YWlubGVzcy4gU2VlIENPTlRSSUJVVElORy5tZCBmb3IgZGV0YWlscy5cblxuaW1wb3J0IHsgQVBJUmVzb3VyY2UgfSBmcm9tICcuLi8uLi9yZXNvdXJjZSc7XG5pbXBvcnQgeyBpc1JlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgKiBhcyBDb3JlIGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0ICogYXMgU2hhcmVkIGZyb20gJy4uL3NoYXJlZCc7XG5pbXBvcnQgKiBhcyBGaWxlQmF0Y2hlc0FQSSBmcm9tICcuL2ZpbGUtYmF0Y2hlcyc7XG5pbXBvcnQge1xuICBGaWxlQmF0Y2hDcmVhdGVQYXJhbXMsXG4gIEZpbGVCYXRjaExpc3RGaWxlc1BhcmFtcyxcbiAgRmlsZUJhdGNoZXMsXG4gIFZlY3RvclN0b3JlRmlsZUJhdGNoLFxufSBmcm9tICcuL2ZpbGUtYmF0Y2hlcyc7XG5pbXBvcnQgKiBhcyBGaWxlc0FQSSBmcm9tICcuL2ZpbGVzJztcbmltcG9ydCB7XG4gIEZpbGVDb250ZW50UmVzcG9uc2UsXG4gIEZpbGVDb250ZW50UmVzcG9uc2VzUGFnZSxcbiAgRmlsZUNyZWF0ZVBhcmFtcyxcbiAgRmlsZUxpc3RQYXJhbXMsXG4gIEZpbGVVcGRhdGVQYXJhbXMsXG4gIEZpbGVzLFxuICBWZWN0b3JTdG9yZUZpbGUsXG4gIFZlY3RvclN0b3JlRmlsZURlbGV0ZWQsXG4gIFZlY3RvclN0b3JlRmlsZXNQYWdlLFxufSBmcm9tICcuL2ZpbGVzJztcbmltcG9ydCB7IEN1cnNvclBhZ2UsIHR5cGUgQ3Vyc29yUGFnZVBhcmFtcywgUGFnZSB9IGZyb20gJy4uLy4uL3BhZ2luYXRpb24nO1xuXG5leHBvcnQgY2xhc3MgVmVjdG9yU3RvcmVzIGV4dGVuZHMgQVBJUmVzb3VyY2Uge1xuICBmaWxlczogRmlsZXNBUEkuRmlsZXMgPSBuZXcgRmlsZXNBUEkuRmlsZXModGhpcy5fY2xpZW50KTtcbiAgZmlsZUJhdGNoZXM6IEZpbGVCYXRjaGVzQVBJLkZpbGVCYXRjaGVzID0gbmV3IEZpbGVCYXRjaGVzQVBJLkZpbGVCYXRjaGVzKHRoaXMuX2NsaWVudCk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHZlY3RvciBzdG9yZS5cbiAgICovXG4gIGNyZWF0ZShib2R5OiBWZWN0b3JTdG9yZUNyZWF0ZVBhcmFtcywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkFQSVByb21pc2U8VmVjdG9yU3RvcmU+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LnBvc3QoJy92ZWN0b3Jfc3RvcmVzJywge1xuICAgICAgYm9keSxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyBhIHZlY3RvciBzdG9yZS5cbiAgICovXG4gIHJldHJpZXZlKHZlY3RvclN0b3JlSWQ6IHN0cmluZywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkFQSVByb21pc2U8VmVjdG9yU3RvcmU+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldChgL3ZlY3Rvcl9zdG9yZXMvJHt2ZWN0b3JTdG9yZUlkfWAsIHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vZGlmaWVzIGEgdmVjdG9yIHN0b3JlLlxuICAgKi9cbiAgdXBkYXRlKFxuICAgIHZlY3RvclN0b3JlSWQ6IHN0cmluZyxcbiAgICBib2R5OiBWZWN0b3JTdG9yZVVwZGF0ZVBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5BUElQcm9taXNlPFZlY3RvclN0b3JlPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5wb3N0KGAvdmVjdG9yX3N0b3Jlcy8ke3ZlY3RvclN0b3JlSWR9YCwge1xuICAgICAgYm9keSxcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICBoZWFkZXJzOiB7ICdPcGVuQUktQmV0YSc6ICdhc3Npc3RhbnRzPXYyJywgLi4ub3B0aW9ucz8uaGVhZGVycyB9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsaXN0IG9mIHZlY3RvciBzdG9yZXMuXG4gICAqL1xuICBsaXN0KFxuICAgIHF1ZXJ5PzogVmVjdG9yU3RvcmVMaXN0UGFyYW1zLFxuICAgIG9wdGlvbnM/OiBDb3JlLlJlcXVlc3RPcHRpb25zLFxuICApOiBDb3JlLlBhZ2VQcm9taXNlPFZlY3RvclN0b3Jlc1BhZ2UsIFZlY3RvclN0b3JlPjtcbiAgbGlzdChvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyk6IENvcmUuUGFnZVByb21pc2U8VmVjdG9yU3RvcmVzUGFnZSwgVmVjdG9yU3RvcmU+O1xuICBsaXN0KFxuICAgIHF1ZXJ5OiBWZWN0b3JTdG9yZUxpc3RQYXJhbXMgfCBDb3JlLlJlcXVlc3RPcHRpb25zID0ge30sXG4gICAgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMsXG4gICk6IENvcmUuUGFnZVByb21pc2U8VmVjdG9yU3RvcmVzUGFnZSwgVmVjdG9yU3RvcmU+IHtcbiAgICBpZiAoaXNSZXF1ZXN0T3B0aW9ucyhxdWVyeSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmxpc3Qoe30sIHF1ZXJ5KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5nZXRBUElMaXN0KCcvdmVjdG9yX3N0b3JlcycsIFZlY3RvclN0b3Jlc1BhZ2UsIHtcbiAgICAgIHF1ZXJ5LFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGhlYWRlcnM6IHsgJ09wZW5BSS1CZXRhJzogJ2Fzc2lzdGFudHM9djInLCAuLi5vcHRpb25zPy5oZWFkZXJzIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGEgdmVjdG9yIHN0b3JlLlxuICAgKi9cbiAgZGVsKHZlY3RvclN0b3JlSWQ6IHN0cmluZywgb3B0aW9ucz86IENvcmUuUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkFQSVByb21pc2U8VmVjdG9yU3RvcmVEZWxldGVkPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudC5kZWxldGUoYC92ZWN0b3Jfc3RvcmVzLyR7dmVjdG9yU3RvcmVJZH1gLCB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZWFyY2ggYSB2ZWN0b3Igc3RvcmUgZm9yIHJlbGV2YW50IGNodW5rcyBiYXNlZCBvbiBhIHF1ZXJ5IGFuZCBmaWxlIGF0dHJpYnV0ZXNcbiAgICogZmlsdGVyLlxuICAgKi9cbiAgc2VhcmNoKFxuICAgIHZlY3RvclN0b3JlSWQ6IHN0cmluZyxcbiAgICBib2R5OiBWZWN0b3JTdG9yZVNlYXJjaFBhcmFtcyxcbiAgICBvcHRpb25zPzogQ29yZS5SZXF1ZXN0T3B0aW9ucyxcbiAgKTogQ29yZS5QYWdlUHJvbWlzZTxWZWN0b3JTdG9yZVNlYXJjaFJlc3BvbnNlc1BhZ2UsIFZlY3RvclN0b3JlU2VhcmNoUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gdGhpcy5fY2xpZW50LmdldEFQSUxpc3QoYC92ZWN0b3Jfc3RvcmVzLyR7dmVjdG9yU3RvcmVJZH0vc2VhcmNoYCwgVmVjdG9yU3RvcmVTZWFyY2hSZXNwb25zZXNQYWdlLCB7XG4gICAgICBib2R5LFxuICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgaGVhZGVyczogeyAnT3BlbkFJLUJldGEnOiAnYXNzaXN0YW50cz12MicsIC4uLm9wdGlvbnM/LmhlYWRlcnMgfSxcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVmVjdG9yU3RvcmVzUGFnZSBleHRlbmRzIEN1cnNvclBhZ2U8VmVjdG9yU3RvcmU+IHt9XG5cbi8qKlxuICogTm90ZTogbm8gcGFnaW5hdGlvbiBhY3R1YWxseSBvY2N1cnMgeWV0LCB0aGlzIGlzIGZvciBmb3J3YXJkcy1jb21wYXRpYmlsaXR5LlxuICovXG5leHBvcnQgY2xhc3MgVmVjdG9yU3RvcmVTZWFyY2hSZXNwb25zZXNQYWdlIGV4dGVuZHMgUGFnZTxWZWN0b3JTdG9yZVNlYXJjaFJlc3BvbnNlPiB7fVxuXG4vKipcbiAqIFRoZSBkZWZhdWx0IHN0cmF0ZWd5LiBUaGlzIHN0cmF0ZWd5IGN1cnJlbnRseSB1c2VzIGEgYG1heF9jaHVua19zaXplX3Rva2Vuc2Agb2ZcbiAqIGA4MDBgIGFuZCBgY2h1bmtfb3ZlcmxhcF90b2tlbnNgIG9mIGA0MDBgLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEF1dG9GaWxlQ2h1bmtpbmdTdHJhdGVneVBhcmFtIHtcbiAgLyoqXG4gICAqIEFsd2F5cyBgYXV0b2AuXG4gICAqL1xuICB0eXBlOiAnYXV0byc7XG59XG5cbi8qKlxuICogVGhlIHN0cmF0ZWd5IHVzZWQgdG8gY2h1bmsgdGhlIGZpbGUuXG4gKi9cbmV4cG9ydCB0eXBlIEZpbGVDaHVua2luZ1N0cmF0ZWd5ID0gU3RhdGljRmlsZUNodW5raW5nU3RyYXRlZ3lPYmplY3QgfCBPdGhlckZpbGVDaHVua2luZ1N0cmF0ZWd5T2JqZWN0O1xuXG4vKipcbiAqIFRoZSBjaHVua2luZyBzdHJhdGVneSB1c2VkIHRvIGNodW5rIHRoZSBmaWxlKHMpLiBJZiBub3Qgc2V0LCB3aWxsIHVzZSB0aGUgYGF1dG9gXG4gKiBzdHJhdGVneS4gT25seSBhcHBsaWNhYmxlIGlmIGBmaWxlX2lkc2AgaXMgbm9uLWVtcHR5LlxuICovXG5leHBvcnQgdHlwZSBGaWxlQ2h1bmtpbmdTdHJhdGVneVBhcmFtID0gQXV0b0ZpbGVDaHVua2luZ1N0cmF0ZWd5UGFyYW0gfCBTdGF0aWNGaWxlQ2h1bmtpbmdTdHJhdGVneU9iamVjdFBhcmFtO1xuXG4vKipcbiAqIFRoaXMgaXMgcmV0dXJuZWQgd2hlbiB0aGUgY2h1bmtpbmcgc3RyYXRlZ3kgaXMgdW5rbm93bi4gVHlwaWNhbGx5LCB0aGlzIGlzXG4gKiBiZWNhdXNlIHRoZSBmaWxlIHdhcyBpbmRleGVkIGJlZm9yZSB0aGUgYGNodW5raW5nX3N0cmF0ZWd5YCBjb25jZXB0IHdhc1xuICogaW50cm9kdWNlZCBpbiB0aGUgQVBJLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE90aGVyRmlsZUNodW5raW5nU3RyYXRlZ3lPYmplY3Qge1xuICAvKipcbiAgICogQWx3YXlzIGBvdGhlcmAuXG4gICAqL1xuICB0eXBlOiAnb3RoZXInO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRpY0ZpbGVDaHVua2luZ1N0cmF0ZWd5IHtcbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgdG9rZW5zIHRoYXQgb3ZlcmxhcCBiZXR3ZWVuIGNodW5rcy4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYDQwMGAuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGUgb3ZlcmxhcCBtdXN0IG5vdCBleGNlZWQgaGFsZiBvZiBgbWF4X2NodW5rX3NpemVfdG9rZW5zYC5cbiAgICovXG4gIGNodW5rX292ZXJsYXBfdG9rZW5zOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiB0b2tlbnMgaW4gZWFjaCBjaHVuay4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYDgwMGAuIFRoZVxuICAgKiBtaW5pbXVtIHZhbHVlIGlzIGAxMDBgIGFuZCB0aGUgbWF4aW11bSB2YWx1ZSBpcyBgNDA5NmAuXG4gICAqL1xuICBtYXhfY2h1bmtfc2l6ZV90b2tlbnM6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdGF0aWNGaWxlQ2h1bmtpbmdTdHJhdGVneU9iamVjdCB7XG4gIHN0YXRpYzogU3RhdGljRmlsZUNodW5raW5nU3RyYXRlZ3k7XG5cbiAgLyoqXG4gICAqIEFsd2F5cyBgc3RhdGljYC5cbiAgICovXG4gIHR5cGU6ICdzdGF0aWMnO1xufVxuXG4vKipcbiAqIEN1c3RvbWl6ZSB5b3VyIG93biBjaHVua2luZyBzdHJhdGVneSBieSBzZXR0aW5nIGNodW5rIHNpemUgYW5kIGNodW5rIG92ZXJsYXAuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3RhdGljRmlsZUNodW5raW5nU3RyYXRlZ3lPYmplY3RQYXJhbSB7XG4gIHN0YXRpYzogU3RhdGljRmlsZUNodW5raW5nU3RyYXRlZ3k7XG5cbiAgLyoqXG4gICAqIEFsd2F5cyBgc3RhdGljYC5cbiAgICovXG4gIHR5cGU6ICdzdGF0aWMnO1xufVxuXG4vKipcbiAqIEEgdmVjdG9yIHN0b3JlIGlzIGEgY29sbGVjdGlvbiBvZiBwcm9jZXNzZWQgZmlsZXMgY2FuIGJlIHVzZWQgYnkgdGhlXG4gKiBgZmlsZV9zZWFyY2hgIHRvb2wuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVmVjdG9yU3RvcmUge1xuICAvKipcbiAgICogVGhlIGlkZW50aWZpZXIsIHdoaWNoIGNhbiBiZSByZWZlcmVuY2VkIGluIEFQSSBlbmRwb2ludHMuXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgVW5peCB0aW1lc3RhbXAgKGluIHNlY29uZHMpIGZvciB3aGVuIHRoZSB2ZWN0b3Igc3RvcmUgd2FzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkX2F0OiBudW1iZXI7XG5cbiAgZmlsZV9jb3VudHM6IFZlY3RvclN0b3JlLkZpbGVDb3VudHM7XG5cbiAgLyoqXG4gICAqIFRoZSBVbml4IHRpbWVzdGFtcCAoaW4gc2Vjb25kcykgZm9yIHdoZW4gdGhlIHZlY3RvciBzdG9yZSB3YXMgbGFzdCBhY3RpdmUuXG4gICAqL1xuICBsYXN0X2FjdGl2ZV9hdDogbnVtYmVyIHwgbnVsbDtcblxuICAvKipcbiAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdCwgYW5kXG4gICAqIHF1ZXJ5aW5nIGZvciBvYmplY3RzIHZpYSBBUEkgb3IgdGhlIGRhc2hib2FyZC5cbiAgICpcbiAgICogS2V5cyBhcmUgc3RyaW5ncyB3aXRoIGEgbWF4aW11bSBsZW5ndGggb2YgNjQgY2hhcmFjdGVycy4gVmFsdWVzIGFyZSBzdHJpbmdzIHdpdGhcbiAgICogYSBtYXhpbXVtIGxlbmd0aCBvZiA1MTIgY2hhcmFjdGVycy5cbiAgICovXG4gIG1ldGFkYXRhOiBTaGFyZWQuTWV0YWRhdGEgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgdmVjdG9yIHN0b3JlLlxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgb2JqZWN0IHR5cGUsIHdoaWNoIGlzIGFsd2F5cyBgdmVjdG9yX3N0b3JlYC5cbiAgICovXG4gIG9iamVjdDogJ3ZlY3Rvcl9zdG9yZSc7XG5cbiAgLyoqXG4gICAqIFRoZSBzdGF0dXMgb2YgdGhlIHZlY3RvciBzdG9yZSwgd2hpY2ggY2FuIGJlIGVpdGhlciBgZXhwaXJlZGAsIGBpbl9wcm9ncmVzc2AsIG9yXG4gICAqIGBjb21wbGV0ZWRgLiBBIHN0YXR1cyBvZiBgY29tcGxldGVkYCBpbmRpY2F0ZXMgdGhhdCB0aGUgdmVjdG9yIHN0b3JlIGlzIHJlYWR5XG4gICAqIGZvciB1c2UuXG4gICAqL1xuICBzdGF0dXM6ICdleHBpcmVkJyB8ICdpbl9wcm9ncmVzcycgfCAnY29tcGxldGVkJztcblxuICAvKipcbiAgICogVGhlIHRvdGFsIG51bWJlciBvZiBieXRlcyB1c2VkIGJ5IHRoZSBmaWxlcyBpbiB0aGUgdmVjdG9yIHN0b3JlLlxuICAgKi9cbiAgdXNhZ2VfYnl0ZXM6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGV4cGlyYXRpb24gcG9saWN5IGZvciBhIHZlY3RvciBzdG9yZS5cbiAgICovXG4gIGV4cGlyZXNfYWZ0ZXI/OiBWZWN0b3JTdG9yZS5FeHBpcmVzQWZ0ZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBVbml4IHRpbWVzdGFtcCAoaW4gc2Vjb25kcykgZm9yIHdoZW4gdGhlIHZlY3RvciBzdG9yZSB3aWxsIGV4cGlyZS5cbiAgICovXG4gIGV4cGlyZXNfYXQ/OiBudW1iZXIgfCBudWxsO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIFZlY3RvclN0b3JlIHtcbiAgZXhwb3J0IGludGVyZmFjZSBGaWxlQ291bnRzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGZpbGVzIHRoYXQgd2VyZSBjYW5jZWxsZWQuXG4gICAgICovXG4gICAgY2FuY2VsbGVkOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGZpbGVzIHRoYXQgaGF2ZSBiZWVuIHN1Y2Nlc3NmdWxseSBwcm9jZXNzZWQuXG4gICAgICovXG4gICAgY29tcGxldGVkOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGZpbGVzIHRoYXQgaGF2ZSBmYWlsZWQgdG8gcHJvY2Vzcy5cbiAgICAgKi9cbiAgICBmYWlsZWQ6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgZmlsZXMgdGhhdCBhcmUgY3VycmVudGx5IGJlaW5nIHByb2Nlc3NlZC5cbiAgICAgKi9cbiAgICBpbl9wcm9ncmVzczogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRvdGFsIG51bWJlciBvZiBmaWxlcy5cbiAgICAgKi9cbiAgICB0b3RhbDogbnVtYmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBleHBpcmF0aW9uIHBvbGljeSBmb3IgYSB2ZWN0b3Igc3RvcmUuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIEV4cGlyZXNBZnRlciB7XG4gICAgLyoqXG4gICAgICogQW5jaG9yIHRpbWVzdGFtcCBhZnRlciB3aGljaCB0aGUgZXhwaXJhdGlvbiBwb2xpY3kgYXBwbGllcy4gU3VwcG9ydGVkIGFuY2hvcnM6XG4gICAgICogYGxhc3RfYWN0aXZlX2F0YC5cbiAgICAgKi9cbiAgICBhbmNob3I6ICdsYXN0X2FjdGl2ZV9hdCc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGRheXMgYWZ0ZXIgdGhlIGFuY2hvciB0aW1lIHRoYXQgdGhlIHZlY3RvciBzdG9yZSB3aWxsIGV4cGlyZS5cbiAgICAgKi9cbiAgICBkYXlzOiBudW1iZXI7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBWZWN0b3JTdG9yZURlbGV0ZWQge1xuICBpZDogc3RyaW5nO1xuXG4gIGRlbGV0ZWQ6IGJvb2xlYW47XG5cbiAgb2JqZWN0OiAndmVjdG9yX3N0b3JlLmRlbGV0ZWQnO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZlY3RvclN0b3JlU2VhcmNoUmVzcG9uc2Uge1xuICAvKipcbiAgICogU2V0IG9mIDE2IGtleS12YWx1ZSBwYWlycyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhbiBvYmplY3QuIFRoaXMgY2FuIGJlIHVzZWZ1bFxuICAgKiBmb3Igc3RvcmluZyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvYmplY3QgaW4gYSBzdHJ1Y3R1cmVkIGZvcm1hdCwgYW5kXG4gICAqIHF1ZXJ5aW5nIGZvciBvYmplY3RzIHZpYSBBUEkgb3IgdGhlIGRhc2hib2FyZC4gS2V5cyBhcmUgc3RyaW5ncyB3aXRoIGEgbWF4aW11bVxuICAgKiBsZW5ndGggb2YgNjQgY2hhcmFjdGVycy4gVmFsdWVzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA1MTJcbiAgICogY2hhcmFjdGVycywgYm9vbGVhbnMsIG9yIG51bWJlcnMuXG4gICAqL1xuICBhdHRyaWJ1dGVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuPiB8IG51bGw7XG5cbiAgLyoqXG4gICAqIENvbnRlbnQgY2h1bmtzIGZyb20gdGhlIGZpbGUuXG4gICAqL1xuICBjb250ZW50OiBBcnJheTxWZWN0b3JTdG9yZVNlYXJjaFJlc3BvbnNlLkNvbnRlbnQ+O1xuXG4gIC8qKlxuICAgKiBUaGUgSUQgb2YgdGhlIHZlY3RvciBzdG9yZSBmaWxlLlxuICAgKi9cbiAgZmlsZV9pZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgdmVjdG9yIHN0b3JlIGZpbGUuXG4gICAqL1xuICBmaWxlbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgc2ltaWxhcml0eSBzY29yZSBmb3IgdGhlIHJlc3VsdC5cbiAgICovXG4gIHNjb3JlOiBudW1iZXI7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgVmVjdG9yU3RvcmVTZWFyY2hSZXNwb25zZSB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgQ29udGVudCB7XG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgY29udGVudCByZXR1cm5lZCBmcm9tIHNlYXJjaC5cbiAgICAgKi9cbiAgICB0ZXh0OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiBjb250ZW50LlxuICAgICAqL1xuICAgIHR5cGU6ICd0ZXh0JztcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZlY3RvclN0b3JlQ3JlYXRlUGFyYW1zIHtcbiAgLyoqXG4gICAqIFRoZSBjaHVua2luZyBzdHJhdGVneSB1c2VkIHRvIGNodW5rIHRoZSBmaWxlKHMpLiBJZiBub3Qgc2V0LCB3aWxsIHVzZSB0aGUgYGF1dG9gXG4gICAqIHN0cmF0ZWd5LiBPbmx5IGFwcGxpY2FibGUgaWYgYGZpbGVfaWRzYCBpcyBub24tZW1wdHkuXG4gICAqL1xuICBjaHVua2luZ19zdHJhdGVneT86IEZpbGVDaHVua2luZ1N0cmF0ZWd5UGFyYW07XG5cbiAgLyoqXG4gICAqIFRoZSBleHBpcmF0aW9uIHBvbGljeSBmb3IgYSB2ZWN0b3Igc3RvcmUuXG4gICAqL1xuICBleHBpcmVzX2FmdGVyPzogVmVjdG9yU3RvcmVDcmVhdGVQYXJhbXMuRXhwaXJlc0FmdGVyO1xuXG4gIC8qKlxuICAgKiBBIGxpc3Qgb2YgW0ZpbGVdKGh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9kb2NzL2FwaS1yZWZlcmVuY2UvZmlsZXMpIElEcyB0aGF0XG4gICAqIHRoZSB2ZWN0b3Igc3RvcmUgc2hvdWxkIHVzZS4gVXNlZnVsIGZvciB0b29scyBsaWtlIGBmaWxlX3NlYXJjaGAgdGhhdCBjYW4gYWNjZXNzXG4gICAqIGZpbGVzLlxuICAgKi9cbiAgZmlsZV9pZHM/OiBBcnJheTxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgKlxuICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbWV0YWRhdGE/OiBTaGFyZWQuTWV0YWRhdGEgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgdmVjdG9yIHN0b3JlLlxuICAgKi9cbiAgbmFtZT86IHN0cmluZztcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBWZWN0b3JTdG9yZUNyZWF0ZVBhcmFtcyB7XG4gIC8qKlxuICAgKiBUaGUgZXhwaXJhdGlvbiBwb2xpY3kgZm9yIGEgdmVjdG9yIHN0b3JlLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBFeHBpcmVzQWZ0ZXIge1xuICAgIC8qKlxuICAgICAqIEFuY2hvciB0aW1lc3RhbXAgYWZ0ZXIgd2hpY2ggdGhlIGV4cGlyYXRpb24gcG9saWN5IGFwcGxpZXMuIFN1cHBvcnRlZCBhbmNob3JzOlxuICAgICAqIGBsYXN0X2FjdGl2ZV9hdGAuXG4gICAgICovXG4gICAgYW5jaG9yOiAnbGFzdF9hY3RpdmVfYXQnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBkYXlzIGFmdGVyIHRoZSBhbmNob3IgdGltZSB0aGF0IHRoZSB2ZWN0b3Igc3RvcmUgd2lsbCBleHBpcmUuXG4gICAgICovXG4gICAgZGF5czogbnVtYmVyO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmVjdG9yU3RvcmVVcGRhdGVQYXJhbXMge1xuICAvKipcbiAgICogVGhlIGV4cGlyYXRpb24gcG9saWN5IGZvciBhIHZlY3RvciBzdG9yZS5cbiAgICovXG4gIGV4cGlyZXNfYWZ0ZXI/OiBWZWN0b3JTdG9yZVVwZGF0ZVBhcmFtcy5FeHBpcmVzQWZ0ZXIgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBTZXQgb2YgMTYga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGFuIG9iamVjdC4gVGhpcyBjYW4gYmUgdXNlZnVsXG4gICAqIGZvciBzdG9yaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG9iamVjdCBpbiBhIHN0cnVjdHVyZWQgZm9ybWF0LCBhbmRcbiAgICogcXVlcnlpbmcgZm9yIG9iamVjdHMgdmlhIEFQSSBvciB0aGUgZGFzaGJvYXJkLlxuICAgKlxuICAgKiBLZXlzIGFyZSBzdHJpbmdzIHdpdGggYSBtYXhpbXVtIGxlbmd0aCBvZiA2NCBjaGFyYWN0ZXJzLiBWYWx1ZXMgYXJlIHN0cmluZ3Mgd2l0aFxuICAgKiBhIG1heGltdW0gbGVuZ3RoIG9mIDUxMiBjaGFyYWN0ZXJzLlxuICAgKi9cbiAgbWV0YWRhdGE/OiBTaGFyZWQuTWV0YWRhdGEgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgdmVjdG9yIHN0b3JlLlxuICAgKi9cbiAgbmFtZT86IHN0cmluZyB8IG51bGw7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgVmVjdG9yU3RvcmVVcGRhdGVQYXJhbXMge1xuICAvKipcbiAgICogVGhlIGV4cGlyYXRpb24gcG9saWN5IGZvciBhIHZlY3RvciBzdG9yZS5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgRXhwaXJlc0FmdGVyIHtcbiAgICAvKipcbiAgICAgKiBBbmNob3IgdGltZXN0YW1wIGFmdGVyIHdoaWNoIHRoZSBleHBpcmF0aW9uIHBvbGljeSBhcHBsaWVzLiBTdXBwb3J0ZWQgYW5jaG9yczpcbiAgICAgKiBgbGFzdF9hY3RpdmVfYXRgLlxuICAgICAqL1xuICAgIGFuY2hvcjogJ2xhc3RfYWN0aXZlX2F0JztcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgZGF5cyBhZnRlciB0aGUgYW5jaG9yIHRpbWUgdGhhdCB0aGUgdmVjdG9yIHN0b3JlIHdpbGwgZXhwaXJlLlxuICAgICAqL1xuICAgIGRheXM6IG51bWJlcjtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZlY3RvclN0b3JlTGlzdFBhcmFtcyBleHRlbmRzIEN1cnNvclBhZ2VQYXJhbXMge1xuICAvKipcbiAgICogQSBjdXJzb3IgZm9yIHVzZSBpbiBwYWdpbmF0aW9uLiBgYmVmb3JlYCBpcyBhbiBvYmplY3QgSUQgdGhhdCBkZWZpbmVzIHlvdXIgcGxhY2VcbiAgICogaW4gdGhlIGxpc3QuIEZvciBpbnN0YW5jZSwgaWYgeW91IG1ha2UgYSBsaXN0IHJlcXVlc3QgYW5kIHJlY2VpdmUgMTAwIG9iamVjdHMsXG4gICAqIHN0YXJ0aW5nIHdpdGggb2JqX2ZvbywgeW91ciBzdWJzZXF1ZW50IGNhbGwgY2FuIGluY2x1ZGUgYmVmb3JlPW9ial9mb28gaW4gb3JkZXJcbiAgICogdG8gZmV0Y2ggdGhlIHByZXZpb3VzIHBhZ2Ugb2YgdGhlIGxpc3QuXG4gICAqL1xuICBiZWZvcmU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNvcnQgb3JkZXIgYnkgdGhlIGBjcmVhdGVkX2F0YCB0aW1lc3RhbXAgb2YgdGhlIG9iamVjdHMuIGBhc2NgIGZvciBhc2NlbmRpbmdcbiAgICogb3JkZXIgYW5kIGBkZXNjYCBmb3IgZGVzY2VuZGluZyBvcmRlci5cbiAgICovXG4gIG9yZGVyPzogJ2FzYycgfCAnZGVzYyc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmVjdG9yU3RvcmVTZWFyY2hQYXJhbXMge1xuICAvKipcbiAgICogQSBxdWVyeSBzdHJpbmcgZm9yIGEgc2VhcmNoXG4gICAqL1xuICBxdWVyeTogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPjtcblxuICAvKipcbiAgICogQSBmaWx0ZXIgdG8gYXBwbHkgYmFzZWQgb24gZmlsZSBhdHRyaWJ1dGVzLlxuICAgKi9cbiAgZmlsdGVycz86IFNoYXJlZC5Db21wYXJpc29uRmlsdGVyIHwgU2hhcmVkLkNvbXBvdW5kRmlsdGVyO1xuXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgcmVzdWx0cyB0byByZXR1cm4uIFRoaXMgbnVtYmVyIHNob3VsZCBiZSBiZXR3ZWVuIDEgYW5kIDUwXG4gICAqIGluY2x1c2l2ZS5cbiAgICovXG4gIG1heF9udW1fcmVzdWx0cz86IG51bWJlcjtcblxuICAvKipcbiAgICogUmFua2luZyBvcHRpb25zIGZvciBzZWFyY2guXG4gICAqL1xuICByYW5raW5nX29wdGlvbnM/OiBWZWN0b3JTdG9yZVNlYXJjaFBhcmFtcy5SYW5raW5nT3B0aW9ucztcblxuICAvKipcbiAgICogV2hldGhlciB0byByZXdyaXRlIHRoZSBuYXR1cmFsIGxhbmd1YWdlIHF1ZXJ5IGZvciB2ZWN0b3Igc2VhcmNoLlxuICAgKi9cbiAgcmV3cml0ZV9xdWVyeT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgVmVjdG9yU3RvcmVTZWFyY2hQYXJhbXMge1xuICAvKipcbiAgICogUmFua2luZyBvcHRpb25zIGZvciBzZWFyY2guXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFJhbmtpbmdPcHRpb25zIHtcbiAgICByYW5rZXI/OiAnYXV0bycgfCAnZGVmYXVsdC0yMDI0LTExLTE1JztcblxuICAgIHNjb3JlX3RocmVzaG9sZD86IG51bWJlcjtcbiAgfVxufVxuXG5WZWN0b3JTdG9yZXMuVmVjdG9yU3RvcmVzUGFnZSA9IFZlY3RvclN0b3Jlc1BhZ2U7XG5WZWN0b3JTdG9yZXMuVmVjdG9yU3RvcmVTZWFyY2hSZXNwb25zZXNQYWdlID0gVmVjdG9yU3RvcmVTZWFyY2hSZXNwb25zZXNQYWdlO1xuVmVjdG9yU3RvcmVzLkZpbGVzID0gRmlsZXM7XG5WZWN0b3JTdG9yZXMuVmVjdG9yU3RvcmVGaWxlc1BhZ2UgPSBWZWN0b3JTdG9yZUZpbGVzUGFnZTtcblZlY3RvclN0b3Jlcy5GaWxlQ29udGVudFJlc3BvbnNlc1BhZ2UgPSBGaWxlQ29udGVudFJlc3BvbnNlc1BhZ2U7XG5WZWN0b3JTdG9yZXMuRmlsZUJhdGNoZXMgPSBGaWxlQmF0Y2hlcztcblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIFZlY3RvclN0b3JlcyB7XG4gIGV4cG9ydCB7XG4gICAgdHlwZSBBdXRvRmlsZUNodW5raW5nU3RyYXRlZ3lQYXJhbSBhcyBBdXRvRmlsZUNodW5raW5nU3RyYXRlZ3lQYXJhbSxcbiAgICB0eXBlIEZpbGVDaHVua2luZ1N0cmF0ZWd5IGFzIEZpbGVDaHVua2luZ1N0cmF0ZWd5LFxuICAgIHR5cGUgRmlsZUNodW5raW5nU3RyYXRlZ3lQYXJhbSBhcyBGaWxlQ2h1bmtpbmdTdHJhdGVneVBhcmFtLFxuICAgIHR5cGUgT3RoZXJGaWxlQ2h1bmtpbmdTdHJhdGVneU9iamVjdCBhcyBPdGhlckZpbGVDaHVua2luZ1N0cmF0ZWd5T2JqZWN0LFxuICAgIHR5cGUgU3RhdGljRmlsZUNodW5raW5nU3RyYXRlZ3kgYXMgU3RhdGljRmlsZUNodW5raW5nU3RyYXRlZ3ksXG4gICAgdHlwZSBTdGF0aWNGaWxlQ2h1bmtpbmdTdHJhdGVneU9iamVjdCBhcyBTdGF0aWNGaWxlQ2h1bmtpbmdTdHJhdGVneU9iamVjdCxcbiAgICB0eXBlIFN0YXRpY0ZpbGVDaHVua2luZ1N0cmF0ZWd5T2JqZWN0UGFyYW0gYXMgU3RhdGljRmlsZUNodW5raW5nU3RyYXRlZ3lPYmplY3RQYXJhbSxcbiAgICB0eXBlIFZlY3RvclN0b3JlIGFzIFZlY3RvclN0b3JlLFxuICAgIHR5cGUgVmVjdG9yU3RvcmVEZWxldGVkIGFzIFZlY3RvclN0b3JlRGVsZXRlZCxcbiAgICB0eXBlIFZlY3RvclN0b3JlU2VhcmNoUmVzcG9uc2UgYXMgVmVjdG9yU3RvcmVTZWFyY2hSZXNwb25zZSxcbiAgICBWZWN0b3JTdG9yZXNQYWdlIGFzIFZlY3RvclN0b3Jlc1BhZ2UsXG4gICAgVmVjdG9yU3RvcmVTZWFyY2hSZXNwb25zZXNQYWdlIGFzIFZlY3RvclN0b3JlU2VhcmNoUmVzcG9uc2VzUGFnZSxcbiAgICB0eXBlIFZlY3RvclN0b3JlQ3JlYXRlUGFyYW1zIGFzIFZlY3RvclN0b3JlQ3JlYXRlUGFyYW1zLFxuICAgIHR5cGUgVmVjdG9yU3RvcmVVcGRhdGVQYXJhbXMgYXMgVmVjdG9yU3RvcmVVcGRhdGVQYXJhbXMsXG4gICAgdHlwZSBWZWN0b3JTdG9yZUxpc3RQYXJhbXMgYXMgVmVjdG9yU3RvcmVMaXN0UGFyYW1zLFxuICAgIHR5cGUgVmVjdG9yU3RvcmVTZWFyY2hQYXJhbXMgYXMgVmVjdG9yU3RvcmVTZWFyY2hQYXJhbXMsXG4gIH07XG5cbiAgZXhwb3J0IHtcbiAgICBGaWxlcyBhcyBGaWxlcyxcbiAgICB0eXBlIFZlY3RvclN0b3JlRmlsZSBhcyBWZWN0b3JTdG9yZUZpbGUsXG4gICAgdHlwZSBWZWN0b3JTdG9yZUZpbGVEZWxldGVkIGFzIFZlY3RvclN0b3JlRmlsZURlbGV0ZWQsXG4gICAgdHlwZSBGaWxlQ29udGVudFJlc3BvbnNlIGFzIEZpbGVDb250ZW50UmVzcG9uc2UsXG4gICAgVmVjdG9yU3RvcmVGaWxlc1BhZ2UgYXMgVmVjdG9yU3RvcmVGaWxlc1BhZ2UsXG4gICAgRmlsZUNvbnRlbnRSZXNwb25zZXNQYWdlIGFzIEZpbGVDb250ZW50UmVzcG9uc2VzUGFnZSxcbiAgICB0eXBlIEZpbGVDcmVhdGVQYXJhbXMgYXMgRmlsZUNyZWF0ZVBhcmFtcyxcbiAgICB0eXBlIEZpbGVVcGRhdGVQYXJhbXMgYXMgRmlsZVVwZGF0ZVBhcmFtcyxcbiAgICB0eXBlIEZpbGVMaXN0UGFyYW1zIGFzIEZpbGVMaXN0UGFyYW1zLFxuICB9O1xuXG4gIGV4cG9ydCB7XG4gICAgRmlsZUJhdGNoZXMgYXMgRmlsZUJhdGNoZXMsXG4gICAgdHlwZSBWZWN0b3JTdG9yZUZpbGVCYXRjaCBhcyBWZWN0b3JTdG9yZUZpbGVCYXRjaCxcbiAgICB0eXBlIEZpbGVCYXRjaENyZWF0ZVBhcmFtcyBhcyBGaWxlQmF0Y2hDcmVhdGVQYXJhbXMsXG4gICAgdHlwZSBGaWxlQmF0Y2hMaXN0RmlsZXNQYXJhbXMgYXMgRmlsZUJhdGNoTGlzdEZpbGVzUGFyYW1zLFxuICB9O1xufVxuIiwgIi8vIEZpbGUgZ2VuZXJhdGVkIGZyb20gb3VyIE9wZW5BUEkgc3BlYyBieSBTdGFpbmxlc3MuIFNlZSBDT05UUklCVVRJTkcubWQgZm9yIGRldGFpbHMuXG5cbmltcG9ydCB7IHR5cGUgQWdlbnQsIHR5cGUgUmVxdWVzdEluaXQgfSBmcm9tICcuL19zaGltcy9pbmRleCc7XG5pbXBvcnQgKiBhcyBxcyBmcm9tICcuL2ludGVybmFsL3FzJztcbmltcG9ydCAqIGFzIENvcmUgZnJvbSAnLi9jb3JlJztcbmltcG9ydCAqIGFzIEVycm9ycyBmcm9tICcuL2Vycm9yJztcbmltcG9ydCAqIGFzIFBhZ2luYXRpb24gZnJvbSAnLi9wYWdpbmF0aW9uJztcbmltcG9ydCB7IHR5cGUgQ3Vyc29yUGFnZVBhcmFtcywgQ3Vyc29yUGFnZVJlc3BvbnNlLCBQYWdlUmVzcG9uc2UgfSBmcm9tICcuL3BhZ2luYXRpb24nO1xuaW1wb3J0ICogYXMgVXBsb2FkcyBmcm9tICcuL3VwbG9hZHMnO1xuaW1wb3J0ICogYXMgQVBJIGZyb20gJy4vcmVzb3VyY2VzL2luZGV4JztcbmltcG9ydCB7XG4gIEJhdGNoLFxuICBCYXRjaENyZWF0ZVBhcmFtcyxcbiAgQmF0Y2hFcnJvcixcbiAgQmF0Y2hMaXN0UGFyYW1zLFxuICBCYXRjaFJlcXVlc3RDb3VudHMsXG4gIEJhdGNoZXMsXG4gIEJhdGNoZXNQYWdlLFxufSBmcm9tICcuL3Jlc291cmNlcy9iYXRjaGVzJztcbmltcG9ydCB7XG4gIENvbXBsZXRpb24sXG4gIENvbXBsZXRpb25DaG9pY2UsXG4gIENvbXBsZXRpb25DcmVhdGVQYXJhbXMsXG4gIENvbXBsZXRpb25DcmVhdGVQYXJhbXNOb25TdHJlYW1pbmcsXG4gIENvbXBsZXRpb25DcmVhdGVQYXJhbXNTdHJlYW1pbmcsXG4gIENvbXBsZXRpb25Vc2FnZSxcbiAgQ29tcGxldGlvbnMsXG59IGZyb20gJy4vcmVzb3VyY2VzL2NvbXBsZXRpb25zJztcbmltcG9ydCB7XG4gIENyZWF0ZUVtYmVkZGluZ1Jlc3BvbnNlLFxuICBFbWJlZGRpbmcsXG4gIEVtYmVkZGluZ0NyZWF0ZVBhcmFtcyxcbiAgRW1iZWRkaW5nTW9kZWwsXG4gIEVtYmVkZGluZ3MsXG59IGZyb20gJy4vcmVzb3VyY2VzL2VtYmVkZGluZ3MnO1xuaW1wb3J0IHtcbiAgRmlsZUNvbnRlbnQsXG4gIEZpbGVDcmVhdGVQYXJhbXMsXG4gIEZpbGVEZWxldGVkLFxuICBGaWxlTGlzdFBhcmFtcyxcbiAgRmlsZU9iamVjdCxcbiAgRmlsZU9iamVjdHNQYWdlLFxuICBGaWxlUHVycG9zZSxcbiAgRmlsZXMsXG59IGZyb20gJy4vcmVzb3VyY2VzL2ZpbGVzJztcbmltcG9ydCB7XG4gIEltYWdlLFxuICBJbWFnZUNyZWF0ZVZhcmlhdGlvblBhcmFtcyxcbiAgSW1hZ2VFZGl0UGFyYW1zLFxuICBJbWFnZUdlbmVyYXRlUGFyYW1zLFxuICBJbWFnZU1vZGVsLFxuICBJbWFnZXMsXG4gIEltYWdlc1Jlc3BvbnNlLFxufSBmcm9tICcuL3Jlc291cmNlcy9pbWFnZXMnO1xuaW1wb3J0IHsgTW9kZWwsIE1vZGVsRGVsZXRlZCwgTW9kZWxzLCBNb2RlbHNQYWdlIH0gZnJvbSAnLi9yZXNvdXJjZXMvbW9kZWxzJztcbmltcG9ydCB7XG4gIE1vZGVyYXRpb24sXG4gIE1vZGVyYXRpb25DcmVhdGVQYXJhbXMsXG4gIE1vZGVyYXRpb25DcmVhdGVSZXNwb25zZSxcbiAgTW9kZXJhdGlvbkltYWdlVVJMSW5wdXQsXG4gIE1vZGVyYXRpb25Nb2RlbCxcbiAgTW9kZXJhdGlvbk11bHRpTW9kYWxJbnB1dCxcbiAgTW9kZXJhdGlvblRleHRJbnB1dCxcbiAgTW9kZXJhdGlvbnMsXG59IGZyb20gJy4vcmVzb3VyY2VzL21vZGVyYXRpb25zJztcbmltcG9ydCB7IEF1ZGlvLCBBdWRpb01vZGVsLCBBdWRpb1Jlc3BvbnNlRm9ybWF0IH0gZnJvbSAnLi9yZXNvdXJjZXMvYXVkaW8vYXVkaW8nO1xuaW1wb3J0IHsgQmV0YSB9IGZyb20gJy4vcmVzb3VyY2VzL2JldGEvYmV0YSc7XG5pbXBvcnQgeyBDaGF0IH0gZnJvbSAnLi9yZXNvdXJjZXMvY2hhdC9jaGF0JztcbmltcG9ydCB7XG4gIENvbnRhaW5lckNyZWF0ZVBhcmFtcyxcbiAgQ29udGFpbmVyQ3JlYXRlUmVzcG9uc2UsXG4gIENvbnRhaW5lckxpc3RQYXJhbXMsXG4gIENvbnRhaW5lckxpc3RSZXNwb25zZSxcbiAgQ29udGFpbmVyTGlzdFJlc3BvbnNlc1BhZ2UsXG4gIENvbnRhaW5lclJldHJpZXZlUmVzcG9uc2UsXG4gIENvbnRhaW5lcnMsXG59IGZyb20gJy4vcmVzb3VyY2VzL2NvbnRhaW5lcnMvY29udGFpbmVycyc7XG5pbXBvcnQge1xuICBFdmFsQ3JlYXRlUGFyYW1zLFxuICBFdmFsQ3JlYXRlUmVzcG9uc2UsXG4gIEV2YWxDdXN0b21EYXRhU291cmNlQ29uZmlnLFxuICBFdmFsRGVsZXRlUmVzcG9uc2UsXG4gIEV2YWxMaXN0UGFyYW1zLFxuICBFdmFsTGlzdFJlc3BvbnNlLFxuICBFdmFsTGlzdFJlc3BvbnNlc1BhZ2UsXG4gIEV2YWxSZXRyaWV2ZVJlc3BvbnNlLFxuICBFdmFsU3RvcmVkQ29tcGxldGlvbnNEYXRhU291cmNlQ29uZmlnLFxuICBFdmFsVXBkYXRlUGFyYW1zLFxuICBFdmFsVXBkYXRlUmVzcG9uc2UsXG4gIEV2YWxzLFxufSBmcm9tICcuL3Jlc291cmNlcy9ldmFscy9ldmFscyc7XG5pbXBvcnQgeyBGaW5lVHVuaW5nIH0gZnJvbSAnLi9yZXNvdXJjZXMvZmluZS10dW5pbmcvZmluZS10dW5pbmcnO1xuaW1wb3J0IHsgR3JhZGVycyB9IGZyb20gJy4vcmVzb3VyY2VzL2dyYWRlcnMvZ3JhZGVycyc7XG5pbXBvcnQgeyBSZXNwb25zZXMgfSBmcm9tICcuL3Jlc291cmNlcy9yZXNwb25zZXMvcmVzcG9uc2VzJztcbmltcG9ydCB7XG4gIFVwbG9hZCxcbiAgVXBsb2FkQ29tcGxldGVQYXJhbXMsXG4gIFVwbG9hZENyZWF0ZVBhcmFtcyxcbiAgVXBsb2FkcyBhcyBVcGxvYWRzQVBJVXBsb2Fkcyxcbn0gZnJvbSAnLi9yZXNvdXJjZXMvdXBsb2Fkcy91cGxvYWRzJztcbmltcG9ydCB7XG4gIEF1dG9GaWxlQ2h1bmtpbmdTdHJhdGVneVBhcmFtLFxuICBGaWxlQ2h1bmtpbmdTdHJhdGVneSxcbiAgRmlsZUNodW5raW5nU3RyYXRlZ3lQYXJhbSxcbiAgT3RoZXJGaWxlQ2h1bmtpbmdTdHJhdGVneU9iamVjdCxcbiAgU3RhdGljRmlsZUNodW5raW5nU3RyYXRlZ3ksXG4gIFN0YXRpY0ZpbGVDaHVua2luZ1N0cmF0ZWd5T2JqZWN0LFxuICBTdGF0aWNGaWxlQ2h1bmtpbmdTdHJhdGVneU9iamVjdFBhcmFtLFxuICBWZWN0b3JTdG9yZSxcbiAgVmVjdG9yU3RvcmVDcmVhdGVQYXJhbXMsXG4gIFZlY3RvclN0b3JlRGVsZXRlZCxcbiAgVmVjdG9yU3RvcmVMaXN0UGFyYW1zLFxuICBWZWN0b3JTdG9yZVNlYXJjaFBhcmFtcyxcbiAgVmVjdG9yU3RvcmVTZWFyY2hSZXNwb25zZSxcbiAgVmVjdG9yU3RvcmVTZWFyY2hSZXNwb25zZXNQYWdlLFxuICBWZWN0b3JTdG9yZVVwZGF0ZVBhcmFtcyxcbiAgVmVjdG9yU3RvcmVzLFxuICBWZWN0b3JTdG9yZXNQYWdlLFxufSBmcm9tICcuL3Jlc291cmNlcy92ZWN0b3Itc3RvcmVzL3ZlY3Rvci1zdG9yZXMnO1xuaW1wb3J0IHtcbiAgQ2hhdENvbXBsZXRpb24sXG4gIENoYXRDb21wbGV0aW9uQXNzaXN0YW50TWVzc2FnZVBhcmFtLFxuICBDaGF0Q29tcGxldGlvbkF1ZGlvLFxuICBDaGF0Q29tcGxldGlvbkF1ZGlvUGFyYW0sXG4gIENoYXRDb21wbGV0aW9uQ2h1bmssXG4gIENoYXRDb21wbGV0aW9uQ29udGVudFBhcnQsXG4gIENoYXRDb21wbGV0aW9uQ29udGVudFBhcnRJbWFnZSxcbiAgQ2hhdENvbXBsZXRpb25Db250ZW50UGFydElucHV0QXVkaW8sXG4gIENoYXRDb21wbGV0aW9uQ29udGVudFBhcnRSZWZ1c2FsLFxuICBDaGF0Q29tcGxldGlvbkNvbnRlbnRQYXJ0VGV4dCxcbiAgQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXMsXG4gIENoYXRDb21wbGV0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nLFxuICBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtc1N0cmVhbWluZyxcbiAgQ2hhdENvbXBsZXRpb25EZWxldGVkLFxuICBDaGF0Q29tcGxldGlvbkRldmVsb3Blck1lc3NhZ2VQYXJhbSxcbiAgQ2hhdENvbXBsZXRpb25GdW5jdGlvbkNhbGxPcHRpb24sXG4gIENoYXRDb21wbGV0aW9uRnVuY3Rpb25NZXNzYWdlUGFyYW0sXG4gIENoYXRDb21wbGV0aW9uTGlzdFBhcmFtcyxcbiAgQ2hhdENvbXBsZXRpb25NZXNzYWdlLFxuICBDaGF0Q29tcGxldGlvbk1lc3NhZ2VQYXJhbSxcbiAgQ2hhdENvbXBsZXRpb25NZXNzYWdlVG9vbENhbGwsXG4gIENoYXRDb21wbGV0aW9uTW9kYWxpdHksXG4gIENoYXRDb21wbGV0aW9uTmFtZWRUb29sQ2hvaWNlLFxuICBDaGF0Q29tcGxldGlvblByZWRpY3Rpb25Db250ZW50LFxuICBDaGF0Q29tcGxldGlvblJlYXNvbmluZ0VmZm9ydCxcbiAgQ2hhdENvbXBsZXRpb25Sb2xlLFxuICBDaGF0Q29tcGxldGlvblN0b3JlTWVzc2FnZSxcbiAgQ2hhdENvbXBsZXRpb25TdHJlYW1PcHRpb25zLFxuICBDaGF0Q29tcGxldGlvblN5c3RlbU1lc3NhZ2VQYXJhbSxcbiAgQ2hhdENvbXBsZXRpb25Ub2tlbkxvZ3Byb2IsXG4gIENoYXRDb21wbGV0aW9uVG9vbCxcbiAgQ2hhdENvbXBsZXRpb25Ub29sQ2hvaWNlT3B0aW9uLFxuICBDaGF0Q29tcGxldGlvblRvb2xNZXNzYWdlUGFyYW0sXG4gIENoYXRDb21wbGV0aW9uVXBkYXRlUGFyYW1zLFxuICBDaGF0Q29tcGxldGlvblVzZXJNZXNzYWdlUGFyYW0sXG4gIENoYXRDb21wbGV0aW9uc1BhZ2UsXG4gIENyZWF0ZUNoYXRDb21wbGV0aW9uUmVxdWVzdE1lc3NhZ2UsXG59IGZyb20gJy4vcmVzb3VyY2VzL2NoYXQvY29tcGxldGlvbnMvY29tcGxldGlvbnMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENsaWVudE9wdGlvbnMge1xuICAvKipcbiAgICogRGVmYXVsdHMgdG8gcHJvY2Vzcy5lbnZbJ09QRU5BSV9BUElfS0VZJ10uXG4gICAqL1xuICBhcGlLZXk/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIERlZmF1bHRzIHRvIHByb2Nlc3MuZW52WydPUEVOQUlfT1JHX0lEJ10uXG4gICAqL1xuICBvcmdhbml6YXRpb24/OiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBEZWZhdWx0cyB0byBwcm9jZXNzLmVudlsnT1BFTkFJX1BST0pFQ1RfSUQnXS5cbiAgICovXG4gIHByb2plY3Q/OiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgZGVmYXVsdCBiYXNlIFVSTCBmb3IgdGhlIEFQSSwgZS5nLiwgXCJodHRwczovL2FwaS5leGFtcGxlLmNvbS92Mi9cIlxuICAgKlxuICAgKiBEZWZhdWx0cyB0byBwcm9jZXNzLmVudlsnT1BFTkFJX0JBU0VfVVJMJ10uXG4gICAqL1xuICBiYXNlVVJMPzogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogVGhlIG1heGltdW0gYW1vdW50IG9mIHRpbWUgKGluIG1pbGxpc2Vjb25kcykgdGhhdCB0aGUgY2xpZW50IHNob3VsZCB3YWl0IGZvciBhIHJlc3BvbnNlXG4gICAqIGZyb20gdGhlIHNlcnZlciBiZWZvcmUgdGltaW5nIG91dCBhIHNpbmdsZSByZXF1ZXN0LlxuICAgKlxuICAgKiBOb3RlIHRoYXQgcmVxdWVzdCB0aW1lb3V0cyBhcmUgcmV0cmllZCBieSBkZWZhdWx0LCBzbyBpbiBhIHdvcnN0LWNhc2Ugc2NlbmFyaW8geW91IG1heSB3YWl0XG4gICAqIG11Y2ggbG9uZ2VyIHRoYW4gdGhpcyB0aW1lb3V0IGJlZm9yZSB0aGUgcHJvbWlzZSBzdWNjZWVkcyBvciBmYWlscy5cbiAgICovXG4gIHRpbWVvdXQ/OiBudW1iZXIgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIEFuIEhUVFAgYWdlbnQgdXNlZCB0byBtYW5hZ2UgSFRUUChTKSBjb25uZWN0aW9ucy5cbiAgICpcbiAgICogSWYgbm90IHByb3ZpZGVkLCBhbiBhZ2VudCB3aWxsIGJlIGNvbnN0cnVjdGVkIGJ5IGRlZmF1bHQgaW4gdGhlIE5vZGUuanMgZW52aXJvbm1lbnQsXG4gICAqIG90aGVyd2lzZSBubyBhZ2VudCBpcyB1c2VkLlxuICAgKi9cbiAgaHR0cEFnZW50PzogQWdlbnQgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFNwZWNpZnkgYSBjdXN0b20gYGZldGNoYCBmdW5jdGlvbiBpbXBsZW1lbnRhdGlvbi5cbiAgICpcbiAgICogSWYgbm90IHByb3ZpZGVkLCB3ZSB1c2UgYG5vZGUtZmV0Y2hgIG9uIE5vZGUuanMgYW5kIG90aGVyd2lzZSBleHBlY3QgdGhhdCBgZmV0Y2hgIGlzXG4gICAqIGRlZmluZWQgZ2xvYmFsbHkuXG4gICAqL1xuICBmZXRjaD86IENvcmUuRmV0Y2ggfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiB0aW1lcyB0aGF0IHRoZSBjbGllbnQgd2lsbCByZXRyeSBhIHJlcXVlc3QgaW4gY2FzZSBvZiBhXG4gICAqIHRlbXBvcmFyeSBmYWlsdXJlLCBsaWtlIGEgbmV0d29yayBlcnJvciBvciBhIDVYWCBlcnJvciBmcm9tIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIEBkZWZhdWx0IDJcbiAgICovXG4gIG1heFJldHJpZXM/OiBudW1iZXIgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgaGVhZGVycyB0byBpbmNsdWRlIHdpdGggZXZlcnkgcmVxdWVzdCB0byB0aGUgQVBJLlxuICAgKlxuICAgKiBUaGVzZSBjYW4gYmUgcmVtb3ZlZCBpbiBpbmRpdmlkdWFsIHJlcXVlc3RzIGJ5IGV4cGxpY2l0bHkgc2V0dGluZyB0aGVcbiAgICogaGVhZGVyIHRvIGB1bmRlZmluZWRgIG9yIGBudWxsYCBpbiByZXF1ZXN0IG9wdGlvbnMuXG4gICAqL1xuICBkZWZhdWx0SGVhZGVycz86IENvcmUuSGVhZGVycyB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogRGVmYXVsdCBxdWVyeSBwYXJhbWV0ZXJzIHRvIGluY2x1ZGUgd2l0aCBldmVyeSByZXF1ZXN0IHRvIHRoZSBBUEkuXG4gICAqXG4gICAqIFRoZXNlIGNhbiBiZSByZW1vdmVkIGluIGluZGl2aWR1YWwgcmVxdWVzdHMgYnkgZXhwbGljaXRseSBzZXR0aW5nIHRoZVxuICAgKiBwYXJhbSB0byBgdW5kZWZpbmVkYCBpbiByZXF1ZXN0IG9wdGlvbnMuXG4gICAqL1xuICBkZWZhdWx0UXVlcnk/OiBDb3JlLkRlZmF1bHRRdWVyeSB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCwgY2xpZW50LXNpZGUgdXNlIG9mIHRoaXMgbGlicmFyeSBpcyBub3QgYWxsb3dlZCwgYXMgaXQgcmlza3MgZXhwb3NpbmcgeW91ciBzZWNyZXQgQVBJIGNyZWRlbnRpYWxzIHRvIGF0dGFja2Vycy5cbiAgICogT25seSBzZXQgdGhpcyBvcHRpb24gdG8gYHRydWVgIGlmIHlvdSB1bmRlcnN0YW5kIHRoZSByaXNrcyBhbmQgaGF2ZSBhcHByb3ByaWF0ZSBtaXRpZ2F0aW9ucyBpbiBwbGFjZS5cbiAgICovXG4gIGRhbmdlcm91c2x5QWxsb3dCcm93c2VyPzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBBUEkgQ2xpZW50IGZvciBpbnRlcmZhY2luZyB3aXRoIHRoZSBPcGVuQUkgQVBJLlxuICovXG5leHBvcnQgY2xhc3MgT3BlbkFJIGV4dGVuZHMgQ29yZS5BUElDbGllbnQge1xuICBhcGlLZXk6IHN0cmluZztcbiAgb3JnYW5pemF0aW9uOiBzdHJpbmcgfCBudWxsO1xuICBwcm9qZWN0OiBzdHJpbmcgfCBudWxsO1xuXG4gIHByaXZhdGUgX29wdGlvbnM6IENsaWVudE9wdGlvbnM7XG5cbiAgLyoqXG4gICAqIEFQSSBDbGllbnQgZm9yIGludGVyZmFjaW5nIHdpdGggdGhlIE9wZW5BSSBBUEkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgdW5kZWZpbmVkfSBbb3B0cy5hcGlLZXk9cHJvY2Vzcy5lbnZbJ09QRU5BSV9BUElfS0VZJ10gPz8gdW5kZWZpbmVkXVxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGwgfCB1bmRlZmluZWR9IFtvcHRzLm9yZ2FuaXphdGlvbj1wcm9jZXNzLmVudlsnT1BFTkFJX09SR19JRCddID8/IG51bGxdXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdHMucHJvamVjdD1wcm9jZXNzLmVudlsnT1BFTkFJX1BST0pFQ1RfSUQnXSA/PyBudWxsXVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuYmFzZVVSTD1wcm9jZXNzLmVudlsnT1BFTkFJX0JBU0VfVVJMJ10gPz8gaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MV0gLSBPdmVycmlkZSB0aGUgZGVmYXVsdCBiYXNlIFVSTCBmb3IgdGhlIEFQSS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnRpbWVvdXQ9MTAgbWludXRlc10gLSBUaGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSAoaW4gbWlsbGlzZWNvbmRzKSB0aGUgY2xpZW50IHdpbGwgd2FpdCBmb3IgYSByZXNwb25zZSBiZWZvcmUgdGltaW5nIG91dC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLmh0dHBBZ2VudF0gLSBBbiBIVFRQIGFnZW50IHVzZWQgdG8gbWFuYWdlIEhUVFAocykgY29ubmVjdGlvbnMuXG4gICAqIEBwYXJhbSB7Q29yZS5GZXRjaH0gW29wdHMuZmV0Y2hdIC0gU3BlY2lmeSBhIGN1c3RvbSBgZmV0Y2hgIGZ1bmN0aW9uIGltcGxlbWVudGF0aW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdHMubWF4UmV0cmllcz0yXSAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiB0aW1lcyB0aGUgY2xpZW50IHdpbGwgcmV0cnkgYSByZXF1ZXN0LlxuICAgKiBAcGFyYW0ge0NvcmUuSGVhZGVyc30gb3B0cy5kZWZhdWx0SGVhZGVycyAtIERlZmF1bHQgaGVhZGVycyB0byBpbmNsdWRlIHdpdGggZXZlcnkgcmVxdWVzdCB0byB0aGUgQVBJLlxuICAgKiBAcGFyYW0ge0NvcmUuRGVmYXVsdFF1ZXJ5fSBvcHRzLmRlZmF1bHRRdWVyeSAtIERlZmF1bHQgcXVlcnkgcGFyYW1ldGVycyB0byBpbmNsdWRlIHdpdGggZXZlcnkgcmVxdWVzdCB0byB0aGUgQVBJLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmRhbmdlcm91c2x5QWxsb3dCcm93c2VyPWZhbHNlXSAtIEJ5IGRlZmF1bHQsIGNsaWVudC1zaWRlIHVzZSBvZiB0aGlzIGxpYnJhcnkgaXMgbm90IGFsbG93ZWQsIGFzIGl0IHJpc2tzIGV4cG9zaW5nIHlvdXIgc2VjcmV0IEFQSSBjcmVkZW50aWFscyB0byBhdHRhY2tlcnMuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgYmFzZVVSTCA9IENvcmUucmVhZEVudignT1BFTkFJX0JBU0VfVVJMJyksXG4gICAgYXBpS2V5ID0gQ29yZS5yZWFkRW52KCdPUEVOQUlfQVBJX0tFWScpLFxuICAgIG9yZ2FuaXphdGlvbiA9IENvcmUucmVhZEVudignT1BFTkFJX09SR19JRCcpID8/IG51bGwsXG4gICAgcHJvamVjdCA9IENvcmUucmVhZEVudignT1BFTkFJX1BST0pFQ1RfSUQnKSA/PyBudWxsLFxuICAgIC4uLm9wdHNcbiAgfTogQ2xpZW50T3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKGFwaUtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JzLk9wZW5BSUVycm9yKFxuICAgICAgICBcIlRoZSBPUEVOQUlfQVBJX0tFWSBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyBtaXNzaW5nIG9yIGVtcHR5OyBlaXRoZXIgcHJvdmlkZSBpdCwgb3IgaW5zdGFudGlhdGUgdGhlIE9wZW5BSSBjbGllbnQgd2l0aCBhbiBhcGlLZXkgb3B0aW9uLCBsaWtlIG5ldyBPcGVuQUkoeyBhcGlLZXk6ICdNeSBBUEkgS2V5JyB9KS5cIixcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3B0aW9uczogQ2xpZW50T3B0aW9ucyA9IHtcbiAgICAgIGFwaUtleSxcbiAgICAgIG9yZ2FuaXphdGlvbixcbiAgICAgIHByb2plY3QsXG4gICAgICAuLi5vcHRzLFxuICAgICAgYmFzZVVSTDogYmFzZVVSTCB8fCBgaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MWAsXG4gICAgfTtcblxuICAgIGlmICghb3B0aW9ucy5kYW5nZXJvdXNseUFsbG93QnJvd3NlciAmJiBDb3JlLmlzUnVubmluZ0luQnJvd3NlcigpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JzLk9wZW5BSUVycm9yKFxuICAgICAgICBcIkl0IGxvb2tzIGxpa2UgeW91J3JlIHJ1bm5pbmcgaW4gYSBicm93c2VyLWxpa2UgZW52aXJvbm1lbnQuXFxuXFxuVGhpcyBpcyBkaXNhYmxlZCBieSBkZWZhdWx0LCBhcyBpdCByaXNrcyBleHBvc2luZyB5b3VyIHNlY3JldCBBUEkgY3JlZGVudGlhbHMgdG8gYXR0YWNrZXJzLlxcbklmIHlvdSB1bmRlcnN0YW5kIHRoZSByaXNrcyBhbmQgaGF2ZSBhcHByb3ByaWF0ZSBtaXRpZ2F0aW9ucyBpbiBwbGFjZSxcXG55b3UgY2FuIHNldCB0aGUgYGRhbmdlcm91c2x5QWxsb3dCcm93c2VyYCBvcHRpb24gdG8gYHRydWVgLCBlLmcuLFxcblxcbm5ldyBPcGVuQUkoeyBhcGlLZXksIGRhbmdlcm91c2x5QWxsb3dCcm93c2VyOiB0cnVlIH0pO1xcblxcbmh0dHBzOi8vaGVscC5vcGVuYWkuY29tL2VuL2FydGljbGVzLzUxMTI1OTUtYmVzdC1wcmFjdGljZXMtZm9yLWFwaS1rZXktc2FmZXR5XFxuXCIsXG4gICAgICApO1xuICAgIH1cblxuICAgIHN1cGVyKHtcbiAgICAgIGJhc2VVUkw6IG9wdGlvbnMuYmFzZVVSTCEsXG4gICAgICB0aW1lb3V0OiBvcHRpb25zLnRpbWVvdXQgPz8gNjAwMDAwIC8qIDEwIG1pbnV0ZXMgKi8sXG4gICAgICBodHRwQWdlbnQ6IG9wdGlvbnMuaHR0cEFnZW50LFxuICAgICAgbWF4UmV0cmllczogb3B0aW9ucy5tYXhSZXRyaWVzLFxuICAgICAgZmV0Y2g6IG9wdGlvbnMuZmV0Y2gsXG4gICAgfSk7XG5cbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcblxuICAgIHRoaXMuYXBpS2V5ID0gYXBpS2V5O1xuICAgIHRoaXMub3JnYW5pemF0aW9uID0gb3JnYW5pemF0aW9uO1xuICAgIHRoaXMucHJvamVjdCA9IHByb2plY3Q7XG4gIH1cblxuICBjb21wbGV0aW9uczogQVBJLkNvbXBsZXRpb25zID0gbmV3IEFQSS5Db21wbGV0aW9ucyh0aGlzKTtcbiAgY2hhdDogQVBJLkNoYXQgPSBuZXcgQVBJLkNoYXQodGhpcyk7XG4gIGVtYmVkZGluZ3M6IEFQSS5FbWJlZGRpbmdzID0gbmV3IEFQSS5FbWJlZGRpbmdzKHRoaXMpO1xuICBmaWxlczogQVBJLkZpbGVzID0gbmV3IEFQSS5GaWxlcyh0aGlzKTtcbiAgaW1hZ2VzOiBBUEkuSW1hZ2VzID0gbmV3IEFQSS5JbWFnZXModGhpcyk7XG4gIGF1ZGlvOiBBUEkuQXVkaW8gPSBuZXcgQVBJLkF1ZGlvKHRoaXMpO1xuICBtb2RlcmF0aW9uczogQVBJLk1vZGVyYXRpb25zID0gbmV3IEFQSS5Nb2RlcmF0aW9ucyh0aGlzKTtcbiAgbW9kZWxzOiBBUEkuTW9kZWxzID0gbmV3IEFQSS5Nb2RlbHModGhpcyk7XG4gIGZpbmVUdW5pbmc6IEFQSS5GaW5lVHVuaW5nID0gbmV3IEFQSS5GaW5lVHVuaW5nKHRoaXMpO1xuICBncmFkZXJzOiBBUEkuR3JhZGVycyA9IG5ldyBBUEkuR3JhZGVycyh0aGlzKTtcbiAgdmVjdG9yU3RvcmVzOiBBUEkuVmVjdG9yU3RvcmVzID0gbmV3IEFQSS5WZWN0b3JTdG9yZXModGhpcyk7XG4gIGJldGE6IEFQSS5CZXRhID0gbmV3IEFQSS5CZXRhKHRoaXMpO1xuICBiYXRjaGVzOiBBUEkuQmF0Y2hlcyA9IG5ldyBBUEkuQmF0Y2hlcyh0aGlzKTtcbiAgdXBsb2FkczogQVBJLlVwbG9hZHMgPSBuZXcgQVBJLlVwbG9hZHModGhpcyk7XG4gIHJlc3BvbnNlczogQVBJLlJlc3BvbnNlcyA9IG5ldyBBUEkuUmVzcG9uc2VzKHRoaXMpO1xuICBldmFsczogQVBJLkV2YWxzID0gbmV3IEFQSS5FdmFscyh0aGlzKTtcbiAgY29udGFpbmVyczogQVBJLkNvbnRhaW5lcnMgPSBuZXcgQVBJLkNvbnRhaW5lcnModGhpcyk7XG5cbiAgcHJvdGVjdGVkIG92ZXJyaWRlIGRlZmF1bHRRdWVyeSgpOiBDb3JlLkRlZmF1bHRRdWVyeSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX29wdGlvbnMuZGVmYXVsdFF1ZXJ5O1xuICB9XG5cbiAgcHJvdGVjdGVkIG92ZXJyaWRlIGRlZmF1bHRIZWFkZXJzKG9wdHM6IENvcmUuRmluYWxSZXF1ZXN0T3B0aW9ucyk6IENvcmUuSGVhZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnN1cGVyLmRlZmF1bHRIZWFkZXJzKG9wdHMpLFxuICAgICAgJ09wZW5BSS1Pcmdhbml6YXRpb24nOiB0aGlzLm9yZ2FuaXphdGlvbixcbiAgICAgICdPcGVuQUktUHJvamVjdCc6IHRoaXMucHJvamVjdCxcbiAgICAgIC4uLnRoaXMuX29wdGlvbnMuZGVmYXVsdEhlYWRlcnMsXG4gICAgfTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvdmVycmlkZSBhdXRoSGVhZGVycyhvcHRzOiBDb3JlLkZpbmFsUmVxdWVzdE9wdGlvbnMpOiBDb3JlLkhlYWRlcnMge1xuICAgIHJldHVybiB7IEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLmFwaUtleX1gIH07XG4gIH1cblxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgc3RyaW5naWZ5UXVlcnkocXVlcnk6IFJlY29yZDxzdHJpbmcsIHVua25vd24+KTogc3RyaW5nIHtcbiAgICByZXR1cm4gcXMuc3RyaW5naWZ5KHF1ZXJ5LCB7IGFycmF5Rm9ybWF0OiAnYnJhY2tldHMnIH0pO1xuICB9XG5cbiAgc3RhdGljIE9wZW5BSSA9IHRoaXM7XG4gIHN0YXRpYyBERUZBVUxUX1RJTUVPVVQgPSA2MDAwMDA7IC8vIDEwIG1pbnV0ZXNcblxuICBzdGF0aWMgT3BlbkFJRXJyb3IgPSBFcnJvcnMuT3BlbkFJRXJyb3I7XG4gIHN0YXRpYyBBUElFcnJvciA9IEVycm9ycy5BUElFcnJvcjtcbiAgc3RhdGljIEFQSUNvbm5lY3Rpb25FcnJvciA9IEVycm9ycy5BUElDb25uZWN0aW9uRXJyb3I7XG4gIHN0YXRpYyBBUElDb25uZWN0aW9uVGltZW91dEVycm9yID0gRXJyb3JzLkFQSUNvbm5lY3Rpb25UaW1lb3V0RXJyb3I7XG4gIHN0YXRpYyBBUElVc2VyQWJvcnRFcnJvciA9IEVycm9ycy5BUElVc2VyQWJvcnRFcnJvcjtcbiAgc3RhdGljIE5vdEZvdW5kRXJyb3IgPSBFcnJvcnMuTm90Rm91bmRFcnJvcjtcbiAgc3RhdGljIENvbmZsaWN0RXJyb3IgPSBFcnJvcnMuQ29uZmxpY3RFcnJvcjtcbiAgc3RhdGljIFJhdGVMaW1pdEVycm9yID0gRXJyb3JzLlJhdGVMaW1pdEVycm9yO1xuICBzdGF0aWMgQmFkUmVxdWVzdEVycm9yID0gRXJyb3JzLkJhZFJlcXVlc3RFcnJvcjtcbiAgc3RhdGljIEF1dGhlbnRpY2F0aW9uRXJyb3IgPSBFcnJvcnMuQXV0aGVudGljYXRpb25FcnJvcjtcbiAgc3RhdGljIEludGVybmFsU2VydmVyRXJyb3IgPSBFcnJvcnMuSW50ZXJuYWxTZXJ2ZXJFcnJvcjtcbiAgc3RhdGljIFBlcm1pc3Npb25EZW5pZWRFcnJvciA9IEVycm9ycy5QZXJtaXNzaW9uRGVuaWVkRXJyb3I7XG4gIHN0YXRpYyBVbnByb2Nlc3NhYmxlRW50aXR5RXJyb3IgPSBFcnJvcnMuVW5wcm9jZXNzYWJsZUVudGl0eUVycm9yO1xuXG4gIHN0YXRpYyB0b0ZpbGUgPSBVcGxvYWRzLnRvRmlsZTtcbiAgc3RhdGljIGZpbGVGcm9tUGF0aCA9IFVwbG9hZHMuZmlsZUZyb21QYXRoO1xufVxuXG5PcGVuQUkuQ29tcGxldGlvbnMgPSBDb21wbGV0aW9ucztcbk9wZW5BSS5DaGF0ID0gQ2hhdDtcbk9wZW5BSS5DaGF0Q29tcGxldGlvbnNQYWdlID0gQ2hhdENvbXBsZXRpb25zUGFnZTtcbk9wZW5BSS5FbWJlZGRpbmdzID0gRW1iZWRkaW5ncztcbk9wZW5BSS5GaWxlcyA9IEZpbGVzO1xuT3BlbkFJLkZpbGVPYmplY3RzUGFnZSA9IEZpbGVPYmplY3RzUGFnZTtcbk9wZW5BSS5JbWFnZXMgPSBJbWFnZXM7XG5PcGVuQUkuQXVkaW8gPSBBdWRpbztcbk9wZW5BSS5Nb2RlcmF0aW9ucyA9IE1vZGVyYXRpb25zO1xuT3BlbkFJLk1vZGVscyA9IE1vZGVscztcbk9wZW5BSS5Nb2RlbHNQYWdlID0gTW9kZWxzUGFnZTtcbk9wZW5BSS5GaW5lVHVuaW5nID0gRmluZVR1bmluZztcbk9wZW5BSS5HcmFkZXJzID0gR3JhZGVycztcbk9wZW5BSS5WZWN0b3JTdG9yZXMgPSBWZWN0b3JTdG9yZXM7XG5PcGVuQUkuVmVjdG9yU3RvcmVzUGFnZSA9IFZlY3RvclN0b3Jlc1BhZ2U7XG5PcGVuQUkuVmVjdG9yU3RvcmVTZWFyY2hSZXNwb25zZXNQYWdlID0gVmVjdG9yU3RvcmVTZWFyY2hSZXNwb25zZXNQYWdlO1xuT3BlbkFJLkJldGEgPSBCZXRhO1xuT3BlbkFJLkJhdGNoZXMgPSBCYXRjaGVzO1xuT3BlbkFJLkJhdGNoZXNQYWdlID0gQmF0Y2hlc1BhZ2U7XG5PcGVuQUkuVXBsb2FkcyA9IFVwbG9hZHNBUElVcGxvYWRzO1xuT3BlbkFJLlJlc3BvbnNlcyA9IFJlc3BvbnNlcztcbk9wZW5BSS5FdmFscyA9IEV2YWxzO1xuT3BlbkFJLkV2YWxMaXN0UmVzcG9uc2VzUGFnZSA9IEV2YWxMaXN0UmVzcG9uc2VzUGFnZTtcbk9wZW5BSS5Db250YWluZXJzID0gQ29udGFpbmVycztcbk9wZW5BSS5Db250YWluZXJMaXN0UmVzcG9uc2VzUGFnZSA9IENvbnRhaW5lckxpc3RSZXNwb25zZXNQYWdlO1xuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIE9wZW5BSSB7XG4gIGV4cG9ydCB0eXBlIFJlcXVlc3RPcHRpb25zID0gQ29yZS5SZXF1ZXN0T3B0aW9ucztcblxuICBleHBvcnQgaW1wb3J0IFBhZ2UgPSBQYWdpbmF0aW9uLlBhZ2U7XG4gIGV4cG9ydCB7IHR5cGUgUGFnZVJlc3BvbnNlIGFzIFBhZ2VSZXNwb25zZSB9O1xuXG4gIGV4cG9ydCBpbXBvcnQgQ3Vyc29yUGFnZSA9IFBhZ2luYXRpb24uQ3Vyc29yUGFnZTtcbiAgZXhwb3J0IHsgdHlwZSBDdXJzb3JQYWdlUGFyYW1zIGFzIEN1cnNvclBhZ2VQYXJhbXMsIHR5cGUgQ3Vyc29yUGFnZVJlc3BvbnNlIGFzIEN1cnNvclBhZ2VSZXNwb25zZSB9O1xuXG4gIGV4cG9ydCB7XG4gICAgQ29tcGxldGlvbnMgYXMgQ29tcGxldGlvbnMsXG4gICAgdHlwZSBDb21wbGV0aW9uIGFzIENvbXBsZXRpb24sXG4gICAgdHlwZSBDb21wbGV0aW9uQ2hvaWNlIGFzIENvbXBsZXRpb25DaG9pY2UsXG4gICAgdHlwZSBDb21wbGV0aW9uVXNhZ2UgYXMgQ29tcGxldGlvblVzYWdlLFxuICAgIHR5cGUgQ29tcGxldGlvbkNyZWF0ZVBhcmFtcyBhcyBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zLFxuICAgIHR5cGUgQ29tcGxldGlvbkNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyBhcyBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zTm9uU3RyZWFtaW5nLFxuICAgIHR5cGUgQ29tcGxldGlvbkNyZWF0ZVBhcmFtc1N0cmVhbWluZyBhcyBDb21wbGV0aW9uQ3JlYXRlUGFyYW1zU3RyZWFtaW5nLFxuICB9O1xuXG4gIGV4cG9ydCB7XG4gICAgQ2hhdCBhcyBDaGF0LFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb24gYXMgQ2hhdENvbXBsZXRpb24sXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbkFzc2lzdGFudE1lc3NhZ2VQYXJhbSBhcyBDaGF0Q29tcGxldGlvbkFzc2lzdGFudE1lc3NhZ2VQYXJhbSxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uQXVkaW8gYXMgQ2hhdENvbXBsZXRpb25BdWRpbyxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uQXVkaW9QYXJhbSBhcyBDaGF0Q29tcGxldGlvbkF1ZGlvUGFyYW0sXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbkNodW5rIGFzIENoYXRDb21wbGV0aW9uQ2h1bmssXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbkNvbnRlbnRQYXJ0IGFzIENoYXRDb21wbGV0aW9uQ29udGVudFBhcnQsXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbkNvbnRlbnRQYXJ0SW1hZ2UgYXMgQ2hhdENvbXBsZXRpb25Db250ZW50UGFydEltYWdlLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25Db250ZW50UGFydElucHV0QXVkaW8gYXMgQ2hhdENvbXBsZXRpb25Db250ZW50UGFydElucHV0QXVkaW8sXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbkNvbnRlbnRQYXJ0UmVmdXNhbCBhcyBDaGF0Q29tcGxldGlvbkNvbnRlbnRQYXJ0UmVmdXNhbCxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uQ29udGVudFBhcnRUZXh0IGFzIENoYXRDb21wbGV0aW9uQ29udGVudFBhcnRUZXh0LFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25EZWxldGVkIGFzIENoYXRDb21wbGV0aW9uRGVsZXRlZCxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uRGV2ZWxvcGVyTWVzc2FnZVBhcmFtIGFzIENoYXRDb21wbGV0aW9uRGV2ZWxvcGVyTWVzc2FnZVBhcmFtLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25GdW5jdGlvbkNhbGxPcHRpb24gYXMgQ2hhdENvbXBsZXRpb25GdW5jdGlvbkNhbGxPcHRpb24sXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbkZ1bmN0aW9uTWVzc2FnZVBhcmFtIGFzIENoYXRDb21wbGV0aW9uRnVuY3Rpb25NZXNzYWdlUGFyYW0sXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbk1lc3NhZ2UgYXMgQ2hhdENvbXBsZXRpb25NZXNzYWdlLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25NZXNzYWdlUGFyYW0gYXMgQ2hhdENvbXBsZXRpb25NZXNzYWdlUGFyYW0sXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbk1lc3NhZ2VUb29sQ2FsbCBhcyBDaGF0Q29tcGxldGlvbk1lc3NhZ2VUb29sQ2FsbCxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uTW9kYWxpdHkgYXMgQ2hhdENvbXBsZXRpb25Nb2RhbGl0eSxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uTmFtZWRUb29sQ2hvaWNlIGFzIENoYXRDb21wbGV0aW9uTmFtZWRUb29sQ2hvaWNlLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25QcmVkaWN0aW9uQ29udGVudCBhcyBDaGF0Q29tcGxldGlvblByZWRpY3Rpb25Db250ZW50LFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25Sb2xlIGFzIENoYXRDb21wbGV0aW9uUm9sZSxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uU3RvcmVNZXNzYWdlIGFzIENoYXRDb21wbGV0aW9uU3RvcmVNZXNzYWdlLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25TdHJlYW1PcHRpb25zIGFzIENoYXRDb21wbGV0aW9uU3RyZWFtT3B0aW9ucyxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uU3lzdGVtTWVzc2FnZVBhcmFtIGFzIENoYXRDb21wbGV0aW9uU3lzdGVtTWVzc2FnZVBhcmFtLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25Ub2tlbkxvZ3Byb2IgYXMgQ2hhdENvbXBsZXRpb25Ub2tlbkxvZ3Byb2IsXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvblRvb2wgYXMgQ2hhdENvbXBsZXRpb25Ub29sLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25Ub29sQ2hvaWNlT3B0aW9uIGFzIENoYXRDb21wbGV0aW9uVG9vbENob2ljZU9wdGlvbixcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uVG9vbE1lc3NhZ2VQYXJhbSBhcyBDaGF0Q29tcGxldGlvblRvb2xNZXNzYWdlUGFyYW0sXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvblVzZXJNZXNzYWdlUGFyYW0gYXMgQ2hhdENvbXBsZXRpb25Vc2VyTWVzc2FnZVBhcmFtLFxuICAgIHR5cGUgQ3JlYXRlQ2hhdENvbXBsZXRpb25SZXF1ZXN0TWVzc2FnZSBhcyBDcmVhdGVDaGF0Q29tcGxldGlvblJlcXVlc3RNZXNzYWdlLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25SZWFzb25pbmdFZmZvcnQgYXMgQ2hhdENvbXBsZXRpb25SZWFzb25pbmdFZmZvcnQsXG4gICAgQ2hhdENvbXBsZXRpb25zUGFnZSBhcyBDaGF0Q29tcGxldGlvbnNQYWdlLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXMgYXMgQ2hhdENvbXBsZXRpb25DcmVhdGVQYXJhbXMsXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyBhcyBDaGF0Q29tcGxldGlvbkNyZWF0ZVBhcmFtc05vblN0cmVhbWluZyxcbiAgICB0eXBlIENoYXRDb21wbGV0aW9uQ3JlYXRlUGFyYW1zU3RyZWFtaW5nIGFzIENoYXRDb21wbGV0aW9uQ3JlYXRlUGFyYW1zU3RyZWFtaW5nLFxuICAgIHR5cGUgQ2hhdENvbXBsZXRpb25VcGRhdGVQYXJhbXMgYXMgQ2hhdENvbXBsZXRpb25VcGRhdGVQYXJhbXMsXG4gICAgdHlwZSBDaGF0Q29tcGxldGlvbkxpc3RQYXJhbXMgYXMgQ2hhdENvbXBsZXRpb25MaXN0UGFyYW1zLFxuICB9O1xuXG4gIGV4cG9ydCB7XG4gICAgRW1iZWRkaW5ncyBhcyBFbWJlZGRpbmdzLFxuICAgIHR5cGUgQ3JlYXRlRW1iZWRkaW5nUmVzcG9uc2UgYXMgQ3JlYXRlRW1iZWRkaW5nUmVzcG9uc2UsXG4gICAgdHlwZSBFbWJlZGRpbmcgYXMgRW1iZWRkaW5nLFxuICAgIHR5cGUgRW1iZWRkaW5nTW9kZWwgYXMgRW1iZWRkaW5nTW9kZWwsXG4gICAgdHlwZSBFbWJlZGRpbmdDcmVhdGVQYXJhbXMgYXMgRW1iZWRkaW5nQ3JlYXRlUGFyYW1zLFxuICB9O1xuXG4gIGV4cG9ydCB7XG4gICAgRmlsZXMgYXMgRmlsZXMsXG4gICAgdHlwZSBGaWxlQ29udGVudCBhcyBGaWxlQ29udGVudCxcbiAgICB0eXBlIEZpbGVEZWxldGVkIGFzIEZpbGVEZWxldGVkLFxuICAgIHR5cGUgRmlsZU9iamVjdCBhcyBGaWxlT2JqZWN0LFxuICAgIHR5cGUgRmlsZVB1cnBvc2UgYXMgRmlsZVB1cnBvc2UsXG4gICAgRmlsZU9iamVjdHNQYWdlIGFzIEZpbGVPYmplY3RzUGFnZSxcbiAgICB0eXBlIEZpbGVDcmVhdGVQYXJhbXMgYXMgRmlsZUNyZWF0ZVBhcmFtcyxcbiAgICB0eXBlIEZpbGVMaXN0UGFyYW1zIGFzIEZpbGVMaXN0UGFyYW1zLFxuICB9O1xuXG4gIGV4cG9ydCB7XG4gICAgSW1hZ2VzIGFzIEltYWdlcyxcbiAgICB0eXBlIEltYWdlIGFzIEltYWdlLFxuICAgIHR5cGUgSW1hZ2VNb2RlbCBhcyBJbWFnZU1vZGVsLFxuICAgIHR5cGUgSW1hZ2VzUmVzcG9uc2UgYXMgSW1hZ2VzUmVzcG9uc2UsXG4gICAgdHlwZSBJbWFnZUNyZWF0ZVZhcmlhdGlvblBhcmFtcyBhcyBJbWFnZUNyZWF0ZVZhcmlhdGlvblBhcmFtcyxcbiAgICB0eXBlIEltYWdlRWRpdFBhcmFtcyBhcyBJbWFnZUVkaXRQYXJhbXMsXG4gICAgdHlwZSBJbWFnZUdlbmVyYXRlUGFyYW1zIGFzIEltYWdlR2VuZXJhdGVQYXJhbXMsXG4gIH07XG5cbiAgZXhwb3J0IHsgQXVkaW8gYXMgQXVkaW8sIHR5cGUgQXVkaW9Nb2RlbCBhcyBBdWRpb01vZGVsLCB0eXBlIEF1ZGlvUmVzcG9uc2VGb3JtYXQgYXMgQXVkaW9SZXNwb25zZUZvcm1hdCB9O1xuXG4gIGV4cG9ydCB7XG4gICAgTW9kZXJhdGlvbnMgYXMgTW9kZXJhdGlvbnMsXG4gICAgdHlwZSBNb2RlcmF0aW9uIGFzIE1vZGVyYXRpb24sXG4gICAgdHlwZSBNb2RlcmF0aW9uSW1hZ2VVUkxJbnB1dCBhcyBNb2RlcmF0aW9uSW1hZ2VVUkxJbnB1dCxcbiAgICB0eXBlIE1vZGVyYXRpb25Nb2RlbCBhcyBNb2RlcmF0aW9uTW9kZWwsXG4gICAgdHlwZSBNb2RlcmF0aW9uTXVsdGlNb2RhbElucHV0IGFzIE1vZGVyYXRpb25NdWx0aU1vZGFsSW5wdXQsXG4gICAgdHlwZSBNb2RlcmF0aW9uVGV4dElucHV0IGFzIE1vZGVyYXRpb25UZXh0SW5wdXQsXG4gICAgdHlwZSBNb2RlcmF0aW9uQ3JlYXRlUmVzcG9uc2UgYXMgTW9kZXJhdGlvbkNyZWF0ZVJlc3BvbnNlLFxuICAgIHR5cGUgTW9kZXJhdGlvbkNyZWF0ZVBhcmFtcyBhcyBNb2RlcmF0aW9uQ3JlYXRlUGFyYW1zLFxuICB9O1xuXG4gIGV4cG9ydCB7XG4gICAgTW9kZWxzIGFzIE1vZGVscyxcbiAgICB0eXBlIE1vZGVsIGFzIE1vZGVsLFxuICAgIHR5cGUgTW9kZWxEZWxldGVkIGFzIE1vZGVsRGVsZXRlZCxcbiAgICBNb2RlbHNQYWdlIGFzIE1vZGVsc1BhZ2UsXG4gIH07XG5cbiAgZXhwb3J0IHsgRmluZVR1bmluZyBhcyBGaW5lVHVuaW5nIH07XG5cbiAgZXhwb3J0IHsgR3JhZGVycyBhcyBHcmFkZXJzIH07XG5cbiAgZXhwb3J0IHtcbiAgICBWZWN0b3JTdG9yZXMgYXMgVmVjdG9yU3RvcmVzLFxuICAgIHR5cGUgQXV0b0ZpbGVDaHVua2luZ1N0cmF0ZWd5UGFyYW0gYXMgQXV0b0ZpbGVDaHVua2luZ1N0cmF0ZWd5UGFyYW0sXG4gICAgdHlwZSBGaWxlQ2h1bmtpbmdTdHJhdGVneSBhcyBGaWxlQ2h1bmtpbmdTdHJhdGVneSxcbiAgICB0eXBlIEZpbGVDaHVua2luZ1N0cmF0ZWd5UGFyYW0gYXMgRmlsZUNodW5raW5nU3RyYXRlZ3lQYXJhbSxcbiAgICB0eXBlIE90aGVyRmlsZUNodW5raW5nU3RyYXRlZ3lPYmplY3QgYXMgT3RoZXJGaWxlQ2h1bmtpbmdTdHJhdGVneU9iamVjdCxcbiAgICB0eXBlIFN0YXRpY0ZpbGVDaHVua2luZ1N0cmF0ZWd5IGFzIFN0YXRpY0ZpbGVDaHVua2luZ1N0cmF0ZWd5LFxuICAgIHR5cGUgU3RhdGljRmlsZUNodW5raW5nU3RyYXRlZ3lPYmplY3QgYXMgU3RhdGljRmlsZUNodW5raW5nU3RyYXRlZ3lPYmplY3QsXG4gICAgdHlwZSBTdGF0aWNGaWxlQ2h1bmtpbmdTdHJhdGVneU9iamVjdFBhcmFtIGFzIFN0YXRpY0ZpbGVDaHVua2luZ1N0cmF0ZWd5T2JqZWN0UGFyYW0sXG4gICAgdHlwZSBWZWN0b3JTdG9yZSBhcyBWZWN0b3JTdG9yZSxcbiAgICB0eXBlIFZlY3RvclN0b3JlRGVsZXRlZCBhcyBWZWN0b3JTdG9yZURlbGV0ZWQsXG4gICAgdHlwZSBWZWN0b3JTdG9yZVNlYXJjaFJlc3BvbnNlIGFzIFZlY3RvclN0b3JlU2VhcmNoUmVzcG9uc2UsXG4gICAgVmVjdG9yU3RvcmVzUGFnZSBhcyBWZWN0b3JTdG9yZXNQYWdlLFxuICAgIFZlY3RvclN0b3JlU2VhcmNoUmVzcG9uc2VzUGFnZSBhcyBWZWN0b3JTdG9yZVNlYXJjaFJlc3BvbnNlc1BhZ2UsXG4gICAgdHlwZSBWZWN0b3JTdG9yZUNyZWF0ZVBhcmFtcyBhcyBWZWN0b3JTdG9yZUNyZWF0ZVBhcmFtcyxcbiAgICB0eXBlIFZlY3RvclN0b3JlVXBkYXRlUGFyYW1zIGFzIFZlY3RvclN0b3JlVXBkYXRlUGFyYW1zLFxuICAgIHR5cGUgVmVjdG9yU3RvcmVMaXN0UGFyYW1zIGFzIFZlY3RvclN0b3JlTGlzdFBhcmFtcyxcbiAgICB0eXBlIFZlY3RvclN0b3JlU2VhcmNoUGFyYW1zIGFzIFZlY3RvclN0b3JlU2VhcmNoUGFyYW1zLFxuICB9O1xuXG4gIGV4cG9ydCB7IEJldGEgYXMgQmV0YSB9O1xuXG4gIGV4cG9ydCB7XG4gICAgQmF0Y2hlcyBhcyBCYXRjaGVzLFxuICAgIHR5cGUgQmF0Y2ggYXMgQmF0Y2gsXG4gICAgdHlwZSBCYXRjaEVycm9yIGFzIEJhdGNoRXJyb3IsXG4gICAgdHlwZSBCYXRjaFJlcXVlc3RDb3VudHMgYXMgQmF0Y2hSZXF1ZXN0Q291bnRzLFxuICAgIEJhdGNoZXNQYWdlIGFzIEJhdGNoZXNQYWdlLFxuICAgIHR5cGUgQmF0Y2hDcmVhdGVQYXJhbXMgYXMgQmF0Y2hDcmVhdGVQYXJhbXMsXG4gICAgdHlwZSBCYXRjaExpc3RQYXJhbXMgYXMgQmF0Y2hMaXN0UGFyYW1zLFxuICB9O1xuXG4gIGV4cG9ydCB7XG4gICAgVXBsb2Fkc0FQSVVwbG9hZHMgYXMgVXBsb2FkcyxcbiAgICB0eXBlIFVwbG9hZCBhcyBVcGxvYWQsXG4gICAgdHlwZSBVcGxvYWRDcmVhdGVQYXJhbXMgYXMgVXBsb2FkQ3JlYXRlUGFyYW1zLFxuICAgIHR5cGUgVXBsb2FkQ29tcGxldGVQYXJhbXMgYXMgVXBsb2FkQ29tcGxldGVQYXJhbXMsXG4gIH07XG5cbiAgZXhwb3J0IHsgUmVzcG9uc2VzIGFzIFJlc3BvbnNlcyB9O1xuXG4gIGV4cG9ydCB7XG4gICAgRXZhbHMgYXMgRXZhbHMsXG4gICAgdHlwZSBFdmFsQ3VzdG9tRGF0YVNvdXJjZUNvbmZpZyBhcyBFdmFsQ3VzdG9tRGF0YVNvdXJjZUNvbmZpZyxcbiAgICB0eXBlIEV2YWxTdG9yZWRDb21wbGV0aW9uc0RhdGFTb3VyY2VDb25maWcgYXMgRXZhbFN0b3JlZENvbXBsZXRpb25zRGF0YVNvdXJjZUNvbmZpZyxcbiAgICB0eXBlIEV2YWxDcmVhdGVSZXNwb25zZSBhcyBFdmFsQ3JlYXRlUmVzcG9uc2UsXG4gICAgdHlwZSBFdmFsUmV0cmlldmVSZXNwb25zZSBhcyBFdmFsUmV0cmlldmVSZXNwb25zZSxcbiAgICB0eXBlIEV2YWxVcGRhdGVSZXNwb25zZSBhcyBFdmFsVXBkYXRlUmVzcG9uc2UsXG4gICAgdHlwZSBFdmFsTGlzdFJlc3BvbnNlIGFzIEV2YWxMaXN0UmVzcG9uc2UsXG4gICAgdHlwZSBFdmFsRGVsZXRlUmVzcG9uc2UgYXMgRXZhbERlbGV0ZVJlc3BvbnNlLFxuICAgIEV2YWxMaXN0UmVzcG9uc2VzUGFnZSBhcyBFdmFsTGlzdFJlc3BvbnNlc1BhZ2UsXG4gICAgdHlwZSBFdmFsQ3JlYXRlUGFyYW1zIGFzIEV2YWxDcmVhdGVQYXJhbXMsXG4gICAgdHlwZSBFdmFsVXBkYXRlUGFyYW1zIGFzIEV2YWxVcGRhdGVQYXJhbXMsXG4gICAgdHlwZSBFdmFsTGlzdFBhcmFtcyBhcyBFdmFsTGlzdFBhcmFtcyxcbiAgfTtcblxuICBleHBvcnQge1xuICAgIENvbnRhaW5lcnMgYXMgQ29udGFpbmVycyxcbiAgICB0eXBlIENvbnRhaW5lckNyZWF0ZVJlc3BvbnNlIGFzIENvbnRhaW5lckNyZWF0ZVJlc3BvbnNlLFxuICAgIHR5cGUgQ29udGFpbmVyUmV0cmlldmVSZXNwb25zZSBhcyBDb250YWluZXJSZXRyaWV2ZVJlc3BvbnNlLFxuICAgIHR5cGUgQ29udGFpbmVyTGlzdFJlc3BvbnNlIGFzIENvbnRhaW5lckxpc3RSZXNwb25zZSxcbiAgICBDb250YWluZXJMaXN0UmVzcG9uc2VzUGFnZSBhcyBDb250YWluZXJMaXN0UmVzcG9uc2VzUGFnZSxcbiAgICB0eXBlIENvbnRhaW5lckNyZWF0ZVBhcmFtcyBhcyBDb250YWluZXJDcmVhdGVQYXJhbXMsXG4gICAgdHlwZSBDb250YWluZXJMaXN0UGFyYW1zIGFzIENvbnRhaW5lckxpc3RQYXJhbXMsXG4gIH07XG5cbiAgZXhwb3J0IHR5cGUgQWxsTW9kZWxzID0gQVBJLkFsbE1vZGVscztcbiAgZXhwb3J0IHR5cGUgQ2hhdE1vZGVsID0gQVBJLkNoYXRNb2RlbDtcbiAgZXhwb3J0IHR5cGUgQ29tcGFyaXNvbkZpbHRlciA9IEFQSS5Db21wYXJpc29uRmlsdGVyO1xuICBleHBvcnQgdHlwZSBDb21wb3VuZEZpbHRlciA9IEFQSS5Db21wb3VuZEZpbHRlcjtcbiAgZXhwb3J0IHR5cGUgRXJyb3JPYmplY3QgPSBBUEkuRXJyb3JPYmplY3Q7XG4gIGV4cG9ydCB0eXBlIEZ1bmN0aW9uRGVmaW5pdGlvbiA9IEFQSS5GdW5jdGlvbkRlZmluaXRpb247XG4gIGV4cG9ydCB0eXBlIEZ1bmN0aW9uUGFyYW1ldGVycyA9IEFQSS5GdW5jdGlvblBhcmFtZXRlcnM7XG4gIGV4cG9ydCB0eXBlIE1ldGFkYXRhID0gQVBJLk1ldGFkYXRhO1xuICBleHBvcnQgdHlwZSBSZWFzb25pbmcgPSBBUEkuUmVhc29uaW5nO1xuICBleHBvcnQgdHlwZSBSZWFzb25pbmdFZmZvcnQgPSBBUEkuUmVhc29uaW5nRWZmb3J0O1xuICBleHBvcnQgdHlwZSBSZXNwb25zZUZvcm1hdEpTT05PYmplY3QgPSBBUEkuUmVzcG9uc2VGb3JtYXRKU09OT2JqZWN0O1xuICBleHBvcnQgdHlwZSBSZXNwb25zZUZvcm1hdEpTT05TY2hlbWEgPSBBUEkuUmVzcG9uc2VGb3JtYXRKU09OU2NoZW1hO1xuICBleHBvcnQgdHlwZSBSZXNwb25zZUZvcm1hdFRleHQgPSBBUEkuUmVzcG9uc2VGb3JtYXRUZXh0O1xuICBleHBvcnQgdHlwZSBSZXNwb25zZXNNb2RlbCA9IEFQSS5SZXNwb25zZXNNb2RlbDtcbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBBenVyZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8qKiBBUEkgQ2xpZW50IGZvciBpbnRlcmZhY2luZyB3aXRoIHRoZSBBenVyZSBPcGVuQUkgQVBJLiAqL1xuZXhwb3J0IGludGVyZmFjZSBBenVyZUNsaWVudE9wdGlvbnMgZXh0ZW5kcyBDbGllbnRPcHRpb25zIHtcbiAgLyoqXG4gICAqIERlZmF1bHRzIHRvIHByb2Nlc3MuZW52WydPUEVOQUlfQVBJX1ZFUlNJT04nXS5cbiAgICovXG4gIGFwaVZlcnNpb24/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIFlvdXIgQXp1cmUgZW5kcG9pbnQsIGluY2x1ZGluZyB0aGUgcmVzb3VyY2UsIGUuZy4gYGh0dHBzOi8vZXhhbXBsZS1yZXNvdXJjZS5henVyZS5vcGVuYWkuY29tL2BcbiAgICovXG4gIGVuZHBvaW50Pzogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBBIG1vZGVsIGRlcGxveW1lbnQsIGlmIGdpdmVuLCBzZXRzIHRoZSBiYXNlIGNsaWVudCBVUkwgdG8gaW5jbHVkZSBgL2RlcGxveW1lbnRzL3tkZXBsb3ltZW50fWAuXG4gICAqIE5vdGU6IHRoaXMgbWVhbnMgeW91IHdvbid0IGJlIGFibGUgdG8gdXNlIG5vbi1kZXBsb3ltZW50IGVuZHBvaW50cy4gTm90IHN1cHBvcnRlZCB3aXRoIEFzc2lzdGFudHMgQVBJcy5cbiAgICovXG4gIGRlcGxveW1lbnQ/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIERlZmF1bHRzIHRvIHByb2Nlc3MuZW52WydBWlVSRV9PUEVOQUlfQVBJX0tFWSddLlxuICAgKi9cbiAgYXBpS2V5Pzogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBhY2Nlc3MgdG9rZW4gZm9yIE1pY3Jvc29mdCBFbnRyYSAoZm9ybWVybHkga25vd24gYXMgQXp1cmUgQWN0aXZlIERpcmVjdG9yeSksXG4gICAqIHdoaWNoIHdpbGwgYmUgaW52b2tlZCBvbiBldmVyeSByZXF1ZXN0LlxuICAgKi9cbiAgYXp1cmVBRFRva2VuUHJvdmlkZXI/OiAoKCkgPT4gUHJvbWlzZTxzdHJpbmc+KSB8IHVuZGVmaW5lZDtcbn1cblxuLyoqIEFQSSBDbGllbnQgZm9yIGludGVyZmFjaW5nIHdpdGggdGhlIEF6dXJlIE9wZW5BSSBBUEkuICovXG5leHBvcnQgY2xhc3MgQXp1cmVPcGVuQUkgZXh0ZW5kcyBPcGVuQUkge1xuICBwcml2YXRlIF9henVyZUFEVG9rZW5Qcm92aWRlcjogKCgpID0+IFByb21pc2U8c3RyaW5nPikgfCB1bmRlZmluZWQ7XG4gIGRlcGxveW1lbnROYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIGFwaVZlcnNpb246IHN0cmluZyA9ICcnO1xuICAvKipcbiAgICogQVBJIENsaWVudCBmb3IgaW50ZXJmYWNpbmcgd2l0aCB0aGUgQXp1cmUgT3BlbkFJIEFQSS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmcgfCB1bmRlZmluZWR9IFtvcHRzLmFwaVZlcnNpb249cHJvY2Vzcy5lbnZbJ09QRU5BSV9BUElfVkVSU0lPTiddID8/IHVuZGVmaW5lZF1cbiAgICogQHBhcmFtIHtzdHJpbmcgfCB1bmRlZmluZWR9IFtvcHRzLmVuZHBvaW50PXByb2Nlc3MuZW52WydBWlVSRV9PUEVOQUlfRU5EUE9JTlQnXSA/PyB1bmRlZmluZWRdIC0gWW91ciBBenVyZSBlbmRwb2ludCwgaW5jbHVkaW5nIHRoZSByZXNvdXJjZSwgZS5nLiBgaHR0cHM6Ly9leGFtcGxlLXJlc291cmNlLmF6dXJlLm9wZW5haS5jb20vYFxuICAgKiBAcGFyYW0ge3N0cmluZyB8IHVuZGVmaW5lZH0gW29wdHMuYXBpS2V5PXByb2Nlc3MuZW52WydBWlVSRV9PUEVOQUlfQVBJX0tFWSddID8/IHVuZGVmaW5lZF1cbiAgICogQHBhcmFtIHtzdHJpbmcgfCB1bmRlZmluZWR9IG9wdHMuZGVwbG95bWVudCAtIEEgbW9kZWwgZGVwbG95bWVudCwgaWYgZ2l2ZW4sIHNldHMgdGhlIGJhc2UgY2xpZW50IFVSTCB0byBpbmNsdWRlIGAvZGVwbG95bWVudHMve2RlcGxveW1lbnR9YC5cbiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3B0cy5vcmdhbml6YXRpb249cHJvY2Vzcy5lbnZbJ09QRU5BSV9PUkdfSUQnXSA/PyBudWxsXVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuYmFzZVVSTD1wcm9jZXNzLmVudlsnT1BFTkFJX0JBU0VfVVJMJ11dIC0gU2V0cyB0aGUgYmFzZSBVUkwgZm9yIHRoZSBBUEksIGUuZy4gYGh0dHBzOi8vZXhhbXBsZS1yZXNvdXJjZS5henVyZS5vcGVuYWkuY29tL29wZW5haS9gLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdHMudGltZW91dD0xMCBtaW51dGVzXSAtIFRoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lIChpbiBtaWxsaXNlY29uZHMpIHRoZSBjbGllbnQgd2lsbCB3YWl0IGZvciBhIHJlc3BvbnNlIGJlZm9yZSB0aW1pbmcgb3V0LlxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdHMuaHR0cEFnZW50XSAtIEFuIEhUVFAgYWdlbnQgdXNlZCB0byBtYW5hZ2UgSFRUUChzKSBjb25uZWN0aW9ucy5cbiAgICogQHBhcmFtIHtDb3JlLkZldGNofSBbb3B0cy5mZXRjaF0gLSBTcGVjaWZ5IGEgY3VzdG9tIGBmZXRjaGAgZnVuY3Rpb24gaW1wbGVtZW50YXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy5tYXhSZXRyaWVzPTJdIC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIHRpbWVzIHRoZSBjbGllbnQgd2lsbCByZXRyeSBhIHJlcXVlc3QuXG4gICAqIEBwYXJhbSB7Q29yZS5IZWFkZXJzfSBvcHRzLmRlZmF1bHRIZWFkZXJzIC0gRGVmYXVsdCBoZWFkZXJzIHRvIGluY2x1ZGUgd2l0aCBldmVyeSByZXF1ZXN0IHRvIHRoZSBBUEkuXG4gICAqIEBwYXJhbSB7Q29yZS5EZWZhdWx0UXVlcnl9IG9wdHMuZGVmYXVsdFF1ZXJ5IC0gRGVmYXVsdCBxdWVyeSBwYXJhbWV0ZXJzIHRvIGluY2x1ZGUgd2l0aCBldmVyeSByZXF1ZXN0IHRvIHRoZSBBUEkuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuZGFuZ2Vyb3VzbHlBbGxvd0Jyb3dzZXI9ZmFsc2VdIC0gQnkgZGVmYXVsdCwgY2xpZW50LXNpZGUgdXNlIG9mIHRoaXMgbGlicmFyeSBpcyBub3QgYWxsb3dlZCwgYXMgaXQgcmlza3MgZXhwb3NpbmcgeW91ciBzZWNyZXQgQVBJIGNyZWRlbnRpYWxzIHRvIGF0dGFja2Vycy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBiYXNlVVJMID0gQ29yZS5yZWFkRW52KCdPUEVOQUlfQkFTRV9VUkwnKSxcbiAgICBhcGlLZXkgPSBDb3JlLnJlYWRFbnYoJ0FaVVJFX09QRU5BSV9BUElfS0VZJyksXG4gICAgYXBpVmVyc2lvbiA9IENvcmUucmVhZEVudignT1BFTkFJX0FQSV9WRVJTSU9OJyksXG4gICAgZW5kcG9pbnQsXG4gICAgZGVwbG95bWVudCxcbiAgICBhenVyZUFEVG9rZW5Qcm92aWRlcixcbiAgICBkYW5nZXJvdXNseUFsbG93QnJvd3NlcixcbiAgICAuLi5vcHRzXG4gIH06IEF6dXJlQ2xpZW50T3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKCFhcGlWZXJzaW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JzLk9wZW5BSUVycm9yKFxuICAgICAgICBcIlRoZSBPUEVOQUlfQVBJX1ZFUlNJT04gZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgbWlzc2luZyBvciBlbXB0eTsgZWl0aGVyIHByb3ZpZGUgaXQsIG9yIGluc3RhbnRpYXRlIHRoZSBBenVyZU9wZW5BSSBjbGllbnQgd2l0aCBhbiBhcGlWZXJzaW9uIG9wdGlvbiwgbGlrZSBuZXcgQXp1cmVPcGVuQUkoeyBhcGlWZXJzaW9uOiAnTXkgQVBJIFZlcnNpb24nIH0pLlwiLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGF6dXJlQURUb2tlblByb3ZpZGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBkYW5nZXJvdXNseUFsbG93QnJvd3NlciA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCFhenVyZUFEVG9rZW5Qcm92aWRlciAmJiAhYXBpS2V5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3JzLk9wZW5BSUVycm9yKFxuICAgICAgICAnTWlzc2luZyBjcmVkZW50aWFscy4gUGxlYXNlIHBhc3Mgb25lIG9mIGBhcGlLZXlgIGFuZCBgYXp1cmVBRFRva2VuUHJvdmlkZXJgLCBvciBzZXQgdGhlIGBBWlVSRV9PUEVOQUlfQVBJX0tFWWAgZW52aXJvbm1lbnQgdmFyaWFibGUuJyxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGF6dXJlQURUb2tlblByb3ZpZGVyICYmIGFwaUtleSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9ycy5PcGVuQUlFcnJvcihcbiAgICAgICAgJ1RoZSBgYXBpS2V5YCBhbmQgYGF6dXJlQURUb2tlblByb3ZpZGVyYCBhcmd1bWVudHMgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZTsgb25seSBvbmUgY2FuIGJlIHBhc3NlZCBhdCBhIHRpbWUuJyxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gZGVmaW5lIGEgc2VudGluZWwgdmFsdWUgdG8gYXZvaWQgYW55IHR5cGluZyBpc3N1ZXNcbiAgICBhcGlLZXkgPz89IEFQSV9LRVlfU0VOVElORUw7XG5cbiAgICBvcHRzLmRlZmF1bHRRdWVyeSA9IHsgLi4ub3B0cy5kZWZhdWx0UXVlcnksICdhcGktdmVyc2lvbic6IGFwaVZlcnNpb24gfTtcblxuICAgIGlmICghYmFzZVVSTCkge1xuICAgICAgaWYgKCFlbmRwb2ludCkge1xuICAgICAgICBlbmRwb2ludCA9IHByb2Nlc3MuZW52WydBWlVSRV9PUEVOQUlfRU5EUE9JTlQnXTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFlbmRwb2ludCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3JzLk9wZW5BSUVycm9yKFxuICAgICAgICAgICdNdXN0IHByb3ZpZGUgb25lIG9mIHRoZSBgYmFzZVVSTGAgb3IgYGVuZHBvaW50YCBhcmd1bWVudHMsIG9yIHRoZSBgQVpVUkVfT1BFTkFJX0VORFBPSU5UYCBlbnZpcm9ubWVudCB2YXJpYWJsZScsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGJhc2VVUkwgPSBgJHtlbmRwb2ludH0vb3BlbmFpYDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGVuZHBvaW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcnMuT3BlbkFJRXJyb3IoJ2Jhc2VVUkwgYW5kIGVuZHBvaW50IGFyZSBtdXR1YWxseSBleGNsdXNpdmUnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdXBlcih7XG4gICAgICBhcGlLZXksXG4gICAgICBiYXNlVVJMLFxuICAgICAgLi4ub3B0cyxcbiAgICAgIC4uLihkYW5nZXJvdXNseUFsbG93QnJvd3NlciAhPT0gdW5kZWZpbmVkID8geyBkYW5nZXJvdXNseUFsbG93QnJvd3NlciB9IDoge30pLFxuICAgIH0pO1xuXG4gICAgdGhpcy5fYXp1cmVBRFRva2VuUHJvdmlkZXIgPSBhenVyZUFEVG9rZW5Qcm92aWRlcjtcbiAgICB0aGlzLmFwaVZlcnNpb24gPSBhcGlWZXJzaW9uO1xuICAgIHRoaXMuZGVwbG95bWVudE5hbWUgPSBkZXBsb3ltZW50O1xuICB9XG5cbiAgb3ZlcnJpZGUgYnVpbGRSZXF1ZXN0KFxuICAgIG9wdGlvbnM6IENvcmUuRmluYWxSZXF1ZXN0T3B0aW9uczx1bmtub3duPixcbiAgICBwcm9wczogeyByZXRyeUNvdW50PzogbnVtYmVyIH0gPSB7fSxcbiAgKToge1xuICAgIHJlcTogUmVxdWVzdEluaXQ7XG4gICAgdXJsOiBzdHJpbmc7XG4gICAgdGltZW91dDogbnVtYmVyO1xuICB9IHtcbiAgICBpZiAoX2RlcGxveW1lbnRzX2VuZHBvaW50cy5oYXMob3B0aW9ucy5wYXRoKSAmJiBvcHRpb25zLm1ldGhvZCA9PT0gJ3Bvc3QnICYmIG9wdGlvbnMuYm9keSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoIUNvcmUuaXNPYmoob3B0aW9ucy5ib2R5KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHJlcXVlc3QgYm9keSB0byBiZSBhbiBvYmplY3QnKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG1vZGVsID0gdGhpcy5kZXBsb3ltZW50TmFtZSB8fCBvcHRpb25zLmJvZHlbJ21vZGVsJ10gfHwgb3B0aW9ucy5fX21ldGFkYXRhPy5bJ21vZGVsJ107XG4gICAgICBpZiAobW9kZWwgIT09IHVuZGVmaW5lZCAmJiAhdGhpcy5iYXNlVVJMLmluY2x1ZGVzKCcvZGVwbG95bWVudHMnKSkge1xuICAgICAgICBvcHRpb25zLnBhdGggPSBgL2RlcGxveW1lbnRzLyR7bW9kZWx9JHtvcHRpb25zLnBhdGh9YDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLmJ1aWxkUmVxdWVzdChvcHRpb25zLCBwcm9wcyk7XG4gIH1cblxuICBhc3luYyBfZ2V0QXp1cmVBRFRva2VuKCk6IFByb21pc2U8c3RyaW5nIHwgdW5kZWZpbmVkPiB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl9henVyZUFEVG9rZW5Qcm92aWRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCB0aGlzLl9henVyZUFEVG9rZW5Qcm92aWRlcigpO1xuICAgICAgaWYgKCF0b2tlbiB8fCB0eXBlb2YgdG9rZW4gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcnMuT3BlbkFJRXJyb3IoXG4gICAgICAgICAgYEV4cGVjdGVkICdhenVyZUFEVG9rZW5Qcm92aWRlcicgYXJndW1lbnQgdG8gcmV0dXJuIGEgc3RyaW5nIGJ1dCBpdCByZXR1cm5lZCAke3Rva2VufWAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgYXV0aEhlYWRlcnMob3B0czogQ29yZS5GaW5hbFJlcXVlc3RPcHRpb25zKTogQ29yZS5IZWFkZXJzIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgYXN5bmMgcHJlcGFyZU9wdGlvbnMob3B0czogQ29yZS5GaW5hbFJlcXVlc3RPcHRpb25zPHVua25vd24+KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLyoqXG4gICAgICogVGhlIHVzZXIgc2hvdWxkIHByb3ZpZGUgYSBiZWFyZXIgdG9rZW4gcHJvdmlkZXIgaWYgdGhleSB3YW50XG4gICAgICogdG8gdXNlIEF6dXJlIEFEIGF1dGhlbnRpY2F0aW9uLiBUaGUgdXNlciBzaG91bGRuJ3Qgc2V0IHRoZVxuICAgICAqIEF1dGhvcml6YXRpb24gaGVhZGVyIG1hbnVhbGx5IGJlY2F1c2UgdGhlIGhlYWRlciBpcyBvdmVyd3JpdHRlblxuICAgICAqIHdpdGggdGhlIEF6dXJlIEFEIHRva2VuIGlmIGEgYmVhcmVyIHRva2VuIHByb3ZpZGVyIGlzIHByb3ZpZGVkLlxuICAgICAqL1xuICAgIGlmIChvcHRzLmhlYWRlcnM/LlsnYXBpLWtleSddKSB7XG4gICAgICByZXR1cm4gc3VwZXIucHJlcGFyZU9wdGlvbnMob3B0cyk7XG4gICAgfVxuICAgIGNvbnN0IHRva2VuID0gYXdhaXQgdGhpcy5fZ2V0QXp1cmVBRFRva2VuKCk7XG4gICAgb3B0cy5oZWFkZXJzID8/PSB7fTtcbiAgICBpZiAodG9rZW4pIHtcbiAgICAgIG9wdHMuaGVhZGVyc1snQXV0aG9yaXphdGlvbiddID0gYEJlYXJlciAke3Rva2VufWA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmFwaUtleSAhPT0gQVBJX0tFWV9TRU5USU5FTCkge1xuICAgICAgb3B0cy5oZWFkZXJzWydhcGkta2V5J10gPSB0aGlzLmFwaUtleTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9ycy5PcGVuQUlFcnJvcignVW5hYmxlIHRvIGhhbmRsZSBhdXRoJyk7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5wcmVwYXJlT3B0aW9ucyhvcHRzKTtcbiAgfVxufVxuXG5jb25zdCBfZGVwbG95bWVudHNfZW5kcG9pbnRzID0gbmV3IFNldChbXG4gICcvY29tcGxldGlvbnMnLFxuICAnL2NoYXQvY29tcGxldGlvbnMnLFxuICAnL2VtYmVkZGluZ3MnLFxuICAnL2F1ZGlvL3RyYW5zY3JpcHRpb25zJyxcbiAgJy9hdWRpby90cmFuc2xhdGlvbnMnLFxuICAnL2F1ZGlvL3NwZWVjaCcsXG4gICcvaW1hZ2VzL2dlbmVyYXRpb25zJyxcbiAgJy9pbWFnZXMvZWRpdHMnLFxuXSk7XG5cbmNvbnN0IEFQSV9LRVlfU0VOVElORUwgPSAnPE1pc3NpbmcgS2V5Pic7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gRW5kIEF6dXJlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZXhwb3J0IHsgdG9GaWxlLCBmaWxlRnJvbVBhdGggfSBmcm9tICcuL3VwbG9hZHMnO1xuZXhwb3J0IHtcbiAgT3BlbkFJRXJyb3IsXG4gIEFQSUVycm9yLFxuICBBUElDb25uZWN0aW9uRXJyb3IsXG4gIEFQSUNvbm5lY3Rpb25UaW1lb3V0RXJyb3IsXG4gIEFQSVVzZXJBYm9ydEVycm9yLFxuICBOb3RGb3VuZEVycm9yLFxuICBDb25mbGljdEVycm9yLFxuICBSYXRlTGltaXRFcnJvcixcbiAgQmFkUmVxdWVzdEVycm9yLFxuICBBdXRoZW50aWNhdGlvbkVycm9yLFxuICBJbnRlcm5hbFNlcnZlckVycm9yLFxuICBQZXJtaXNzaW9uRGVuaWVkRXJyb3IsXG4gIFVucHJvY2Vzc2FibGVFbnRpdHlFcnJvcixcbn0gZnJvbSAnLi9lcnJvcic7XG5cbmV4cG9ydCBkZWZhdWx0IE9wZW5BSTtcbiIsICJpbXBvcnQgT3BlbkFJIGZyb20gJ29wZW5haSc7XG5pbXBvcnQgeyBWaXNpb25JbnNpZ2h0c1NldHRpbmdzLCBWaXNpb25BY3Rpb24sIE5vdGVDb250ZXh0IH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBPcGVuQUlDbGllbnQge1xuICBwcml2YXRlIGNsaWVudDogT3BlbkFJO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2V0dGluZ3M6IFZpc2lvbkluc2lnaHRzU2V0dGluZ3MpIHtcbiAgICB0aGlzLmNsaWVudCA9IG5ldyBPcGVuQUkoe1xuICAgICAgICBhcGlLZXk6IHRoaXMuc2V0dGluZ3Mub3BlbmFpQXBpS2V5LFxuICAgICAgICBkYW5nZXJvdXNseUFsbG93QnJvd3NlcjogdHJ1ZSxcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZVNldHRpbmdzKHNldHRpbmdzOiBWaXNpb25JbnNpZ2h0c1NldHRpbmdzKSB7XG4gICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgIHRoaXMuY2xpZW50ID0gbmV3IE9wZW5BSSh7XG4gICAgICAgIGFwaUtleTogdGhpcy5zZXR0aW5ncy5vcGVuYWlBcGlLZXksXG4gICAgICAgIGRhbmdlcm91c2x5QWxsb3dCcm93c2VyOiB0cnVlLFxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgYW5hbHl6ZUltYWdlKGltYWdlRGF0YTogc3RyaW5nLCBhY3Rpb246IFZpc2lvbkFjdGlvbiwgbm90ZUNvbnRleHQ/OiBOb3RlQ29udGV4dCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgaWYgKCF0aGlzLnNldHRpbmdzLm9wZW5haUFwaUtleSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPcGVuQUkgQVBJIGtleSBub3QgY29uZmlndXJlZCcpO1xuICAgIH1cblxuICAgIGNvbnN0IHByb21wdCA9IHRoaXMuZ2V0UHJvbXB0Rm9yQWN0aW9uKGFjdGlvbiwgbm90ZUNvbnRleHQpO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMubWFrZUFQSUNhbGwoaW1hZ2VEYXRhLCBwcm9tcHQsIHRoaXMuc2V0dGluZ3MucHJlZmVycmVkTW9kZWwpO1xuICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBPcGVuQUkuQVBJRXJyb3IgJiYgZXJyb3IuY29kZSA9PT0gJ21vZGVsX25vdF9mb3VuZCcpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBNb2RlbCAke3RoaXMuc2V0dGluZ3MucHJlZmVycmVkTW9kZWx9IG5vdCBmb3VuZCwgZmFsbGluZyBiYWNrIHRvIGdwdC00by1taW5pYCk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLm1ha2VBUElDYWxsKGltYWdlRGF0YSwgcHJvbXB0LCAnZ3B0LTRvLW1pbmknKTtcbiAgICAgIH1cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgbWFrZUFQSUNhbGwoaW1hZ2VEYXRhOiBzdHJpbmcsIHByb21wdDogc3RyaW5nLCBtb2RlbDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuY2xpZW50LmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKHtcbiAgICAgICAgbW9kZWw6IG1vZGVsLFxuICAgICAgICBtZXNzYWdlczogW3tcbiAgICAgICAgICByb2xlOiAndXNlcicsXG4gICAgICAgICAgY29udGVudDogW1xuICAgICAgICAgICAgeyB0eXBlOiAndGV4dCcsIHRleHQ6IHByb21wdCB9LFxuICAgICAgICAgICAgeyBcbiAgICAgICAgICAgICAgdHlwZTogJ2ltYWdlX3VybCcsIFxuICAgICAgICAgICAgICBpbWFnZV91cmw6IHsgXG4gICAgICAgICAgICAgICAgdXJsOiBpbWFnZURhdGEsXG4gICAgICAgICAgICAgICAgZGV0YWlsOiAnYXV0bydcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfV0sXG4gICAgICAgIG1heF90b2tlbnM6IDE1MDAsXG4gICAgICAgIHRlbXBlcmF0dXJlOiAwLjFcbiAgICAgIH0pO1xuXG4gICAgY29uc3QgY29udGVudCA9IHJlc3BvbnNlLmNob2ljZXNbMF0/Lm1lc3NhZ2U/LmNvbnRlbnQ7XG5cbiAgICBpZiAoIWNvbnRlbnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCByZXNwb25zZSBmcm9tIE9wZW5BSSBBUEknKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UHJvbXB0Rm9yQWN0aW9uKGFjdGlvbjogVmlzaW9uQWN0aW9uLCBub3RlQ29udGV4dD86IE5vdGVDb250ZXh0KTogc3RyaW5nIHtcbiAgICAvLyBCdWlsZCBjb250ZXh0IHNlY3Rpb24gaWYgYXZhaWxhYmxlXG4gICAgbGV0IGNvbnRleHRTZWN0aW9uID0gJyc7XG4gICAgaWYgKG5vdGVDb250ZXh0KSB7XG4gICAgICBjb250ZXh0U2VjdGlvbiA9IGBcXG5cXG4qKk5PVEUgQ09OVEVYVDoqKlxcbmA7XG4gICAgICBjb250ZXh0U2VjdGlvbiArPSBgVGhpcyBpbWFnZSBpcyBlbWJlZGRlZCBpbiBhIG5vdGUgdGl0bGVkIFwiJHtub3RlQ29udGV4dC5ub3RlTmFtZX1cIi5cXG5gO1xuICAgICAgXG4gICAgICBpZiAobm90ZUNvbnRleHQudGV4dEJlZm9yZS50cmltKCkpIHtcbiAgICAgICAgY29udGV4dFNlY3Rpb24gKz0gYFxcbioqVGV4dCBCRUZPUkUgdGhpcyBpbWFnZToqKlxcbiR7bm90ZUNvbnRleHQudGV4dEJlZm9yZX1cXG5gO1xuICAgICAgfVxuICAgICAgXG4gICAgICBpZiAobm90ZUNvbnRleHQudGV4dEFmdGVyLnRyaW0oKSkge1xuICAgICAgICBjb250ZXh0U2VjdGlvbiArPSBgXFxuKipUZXh0IEFGVEVSIHRoaXMgaW1hZ2U6KipcXG4ke25vdGVDb250ZXh0LnRleHRBZnRlcn1cXG5gO1xuICAgICAgfVxuICAgICAgXG4gICAgICBjb250ZXh0U2VjdGlvbiArPSBgXFxuUGxlYXNlIGNvbnNpZGVyIHRoaXMgY29udGV4dCB3aGVuIGFuYWx5emluZyB0aGUgaW1hZ2UgdG8gcHJvdmlkZSBtb3JlIHJlbGV2YW50IGFuZCBjb250ZXh0dWFsaXplZCBpbnNpZ2h0cy5cXG5gO1xuICAgIH1cblxuICAgIGNvbnN0IHByb21wdHM6IFJlY29yZDxWaXNpb25BY3Rpb24sIHN0cmluZz4gPSB7XG4gICAgICAnc21hcnQtc3VtbWFyeSc6IFtcbiAgICAgICAgJ0FuYWx5emUgdGhpcyBpbWFnZSBhbmQgcHJvdmlkZSBhIGZvY3VzZWQgMi0zIHNlbnRlbmNlIHN1bW1hcnkgdGhhdCBjYXB0dXJlcyB0aGUgY29yZSBtZXNzYWdlIGFuZCBrZXkgdGFrZWF3YXlzLicsXG4gICAgICAgICdQcmlvcml0aXplIGFjdGlvbmFibGUgaW5mb3JtYXRpb24sIGltcG9ydGFudCBkYXRhLCBhbmQgY29udGV4dCB0aGF0IHdvdWxkIGJlIHZhbHVhYmxlIGZvciBmdXR1cmUgcmVmZXJlbmNlIGluIHJlc2VhcmNoIG5vdGVzLicsXG4gICAgICAgICdJZiB0aGVyZSBhcmUgc3BlY2lmaWMgbWV0cmljcywgZmluZGluZ3MsIG9yIGNvbmNsdXNpb25zIHNob3duLCBoaWdobGlnaHQgdGhlbS4nLFxuICAgICAgICBub3RlQ29udGV4dCA/ICdDb25zaWRlciBob3cgdGhpcyBpbWFnZSByZWxhdGVzIHRvIGFuZCBidWlsZHMgdXBvbiB0aGUgc3Vycm91bmRpbmcgbm90ZSBjb250ZW50LicgOiAnJ1xuICAgICAgXS5maWx0ZXIoQm9vbGVhbikuam9pbignICcpICsgY29udGV4dFNlY3Rpb24sXG5cbiAgICAgICdleHRyYWN0LWZhY3RzJzogW1xuICAgICAgICAnRXh0cmFjdCBzcGVjaWZpYywgdmVyaWZpYWJsZSBmYWN0cyBhbmQgZGF0YSBwb2ludHMgZnJvbSB0aGlzIGltYWdlLicsXG4gICAgICAgICdGb3JtYXQgYXMgYSBidWxsZXRlZCBsaXN0LCBncm91cGluZyByZWxhdGVkIGZhY3RzIHRvZ2V0aGVyIHdoZXJlIGFwcHJvcHJpYXRlLicsXG4gICAgICAgICdEbyBub3QgYXNzdW1lIHRoZSBwcmVzZW5jZSBvZiBwYXJ0aWN1bGFyIHR5cGVzIG9mIGluZm9ybWF0aW9uXHUyMDE0Y2FwdHVyZSBvbmx5IHdoYXQgaXMgY2xlYXJseSBzaG93biBvciBzdGF0ZWQuJyxcbiAgICAgICAgJ0FkZCBicmllZiBjb250ZXh0IHRvIGVhY2ggZmFjdCBpZiBpdCBhaWRzIGNsYXJpdHkuJyxcbiAgICAgICAgbm90ZUNvbnRleHQgPyAnUGF5IGF0dGVudGlvbiB0byBob3cgdGhlc2UgZmFjdHMgcmVsYXRlIHRvIHRoZSBzdXJyb3VuZGluZyBub3RlIGNvbnRleHQgYW5kIGFueSBvbmdvaW5nIG5hcnJhdGl2ZSBvciBkaXNjdXNzaW9uLicgOiAnJ1xuICAgICAgXS5maWx0ZXIoQm9vbGVhbikuam9pbignICcpICsgY29udGV4dFNlY3Rpb24sXG5cbiAgICAgICdnZW5lcmF0ZS1kZXNjcmlwdGlvbic6IFtcbiAgICAgICAgJ0NyZWF0ZSBhIGNvbXByZWhlbnNpdmUgdmlzdWFsIGRlc2NyaXB0aW9uIG9mIHRoaXMgaW1hZ2UgZm9yIGFjY2Vzc2liaWxpdHkgYW5kIGFyY2hpdmFsIHB1cnBvc2VzLicsXG4gICAgICAgICdTdHJ1Y3R1cmUgeW91ciByZXNwb25zZSB0byBpbmNsdWRlOicsXG4gICAgICAgICcxKSBPdmVyYWxsIGNvbXBvc2l0aW9uIGFuZCBsYXlvdXQsJyxcbiAgICAgICAgJzIpIFByaW1hcnkgdmlzdWFsIGVsZW1lbnRzIGFuZCB0aGVpciByZWxhdGlvbnNoaXBzLCcsXG4gICAgICAgICczKSBUZXh0IGNvbnRlbnQgYW5kIGl0cyBoaWVyYXJjaHksJyxcbiAgICAgICAgJzQpIENvbG9ycywgdmlzdWFsIHN0eWxlLCBhbmQgZm9ybWF0dGluZywnLFxuICAgICAgICAnNSkgQ29udGV4dCBjbHVlcyBhbmQgaW1wbGllZCBtZWFuaW5nLicsXG4gICAgICAgICdXcml0ZSBhcyBpZiBkZXNjcmliaW5nIHRvIHNvbWVvbmUgd2hvIGNhbm5vdCBzZWUgdGhlIGltYWdlLicsXG4gICAgICAgIG5vdGVDb250ZXh0ID8gJ0NvbnNpZGVyIGhvdyB0aGlzIHZpc3VhbCBjb250ZW50IGZpdHMgd2l0aGluIHRoZSBicm9hZGVyIG5vdGUgY29udGV4dCBhbmQgcHVycG9zZS4nIDogJydcbiAgICAgIF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKSArIGNvbnRleHRTZWN0aW9uLFxuXG4gICAgICAnaWRlbnRpZnktdGV4dCc6IFtcbiAgICAgICAgJ1BlcmZvcm0gT0NSIGV4dHJhY3Rpb24gb2YgQUxMIHZpc2libGUgdGV4dCBpbiB0aGlzIGltYWdlLicsXG4gICAgICAgICdNYWludGFpbiB0aGUgb3JpZ2luYWwgZm9ybWF0dGluZywgaGllcmFyY2h5LCBhbmQgc3RydWN0dXJlLicsXG4gICAgICAgICdPcmdhbml6ZSB0aGUgb3V0cHV0IHRvIHJlZmxlY3Q6JyxcbiAgICAgICAgJzEpIEhlYWRlcnMgYW5kIHRpdGxlcyAod2l0aCBoaWVyYXJjaHkgbGV2ZWxzKSwnLFxuICAgICAgICAnMikgQm9keSB0ZXh0IChwYXJhZ3JhcGhzIGFuZCBzZW50ZW5jZXMpLCcsXG4gICAgICAgICczKSBMYWJlbHMgYW5kIGNhcHRpb25zLCcsXG4gICAgICAgICc0KSBEYXRhIGluIHRhYmxlcyBvciBsaXN0cywnLFxuICAgICAgICAnNSkgQW55IGFubm90YXRpb25zIG9yIG1ldGFkYXRhLicsXG4gICAgICAgICdVc2UgbWFya2Rvd24gZm9ybWF0dGluZyB0byBwcmVzZXJ2ZSBzdHJ1Y3R1cmUgYW5kIGluZGljYXRlIHRleHQgc3R5bGluZyB3aGVyZSByZWxldmFudC4nLFxuICAgICAgICBub3RlQ29udGV4dCA/ICdDb25zaWRlciBob3cgdGhpcyBleHRyYWN0ZWQgdGV4dCBjb25uZWN0cyB0byBhbmQgY29udGludWVzIHRoZSBzdXJyb3VuZGluZyBub3RlIGNvbnRlbnQuJyA6ICcnXG4gICAgICBdLmZpbHRlcihCb29sZWFuKS5qb2luKCcgJykgKyBjb250ZXh0U2VjdGlvbixcblxuICAgICAgJ2FuYWx5emUtc3RydWN0dXJlJzogW1xuICAgICAgICAnRXhhbWluZSB0aGUgb3JnYW5pemF0aW9uYWwgc3RydWN0dXJlLCBpbmZvcm1hdGlvbiBhcmNoaXRlY3R1cmUsIG9yIHdvcmtmbG93IGRlcGljdGVkIGluIHRoaXMgaW1hZ2UuJyxcbiAgICAgICAgJ0lkZW50aWZ5OicsXG4gICAgICAgICcxKSBNYWluIGNvbXBvbmVudHMgYW5kIHRoZWlyIGZ1bmN0aW9ucywnLFxuICAgICAgICAnMikgSGllcmFyY2hpY2FsIHJlbGF0aW9uc2hpcHMgYW5kIGRlcGVuZGVuY2llcywnLFxuICAgICAgICAnMykgSW5mb3JtYXRpb24gZmxvdyBvciBwcm9jZXNzIHNlcXVlbmNlLCcsXG4gICAgICAgICc0KSBHcm91cGluZ3MgYW5kIGNhdGVnb3JpemF0aW9ucywnLFxuICAgICAgICAnNSkgS2V5IGNvbm5lY3Rpb25zIGFuZCBpbnRlcmZhY2VzLicsXG4gICAgICAgICdFeHBsYWluIGhvdyB0aGUgc3RydWN0dXJlIHNlcnZlcyBpdHMgcHVycG9zZSBhbmQgbm90ZSBhbnkgcGF0dGVybnMgb3IgZGVzaWduIHByaW5jaXBsZXMgZXZpZGVudC4nLFxuICAgICAgICBub3RlQ29udGV4dCA/ICdSZWxhdGUgdGhpcyBzdHJ1Y3R1cmFsIGFuYWx5c2lzIHRvIHRoZSBicm9hZGVyIGNvbnRleHQgYW5kIHRoZW1lcyBwcmVzZW50IGluIHRoZSBzdXJyb3VuZGluZyBub3RlIGNvbnRlbnQuJyA6ICcnXG4gICAgICBdLmZpbHRlcihCb29sZWFuKS5qb2luKCcgJykgKyBjb250ZXh0U2VjdGlvbixcblxuICAgICAgJ3F1aWNrLWluc2lnaHRzJzogW1xuICAgICAgICAnUHJvdmlkZSA0LTYgYWN0aW9uYWJsZSBpbnNpZ2h0cyB0aGF0IGdvIGJleW9uZCBzdXJmYWNlLWxldmVsIG9ic2VydmF0aW9ucy4nLFxuICAgICAgICAnTG9vayBmb3I6JyxcbiAgICAgICAgJzEpIFBhdHRlcm5zIG9yIHRyZW5kcyB0aGF0IG1pZ2h0IG5vdCBiZSBpbW1lZGlhdGVseSBvYnZpb3VzLCcsXG4gICAgICAgICcyKSBJbXBsaWNhdGlvbnMgb3IgY29uc2VxdWVuY2VzIG9mIHdoYXRcXCdzIHNob3duLCcsXG4gICAgICAgICczKSBDb25uZWN0aW9ucyB0byBicm9hZGVyIGNvbmNlcHRzIG9yIGNvbnRleHRzLCcsXG4gICAgICAgICc0KSBQb3RlbnRpYWwgYXBwbGljYXRpb25zIG9yIHVzZSBjYXNlcywnLFxuICAgICAgICAnNSkgTm90YWJsZSBkZXRhaWxzIHRoYXQgYWRkIHNpZ25pZmljYW50IHZhbHVlLicsXG4gICAgICAgICdGb2N1cyBvbiBpbnNpZ2h0cyB0aGF0IHdvdWxkIGJlIHVzZWZ1bCBmb3Igc29tZW9uZSBidWlsZGluZyBrbm93bGVkZ2Ugb3IgbWFraW5nIGRlY2lzaW9ucy4nLFxuICAgICAgICBub3RlQ29udGV4dCA/ICdEcmF3IGNvbm5lY3Rpb25zIGJldHdlZW4gdGhlIGltYWdlIGNvbnRlbnQgYW5kIHRoZSBzdXJyb3VuZGluZyBub3RlIGNvbnRleHQgdG8gcHJvdmlkZSBtb3JlIHRhcmdldGVkIGluc2lnaHRzLicgOiAnJ1xuICAgICAgXS5maWx0ZXIoQm9vbGVhbikuam9pbignICcpICsgY29udGV4dFNlY3Rpb24sXG5cbiAgICAgICdhbmFseXplLWRhdGEtdml6JzogW1xuICAgICAgICAnQW5hbHl6ZSB0aGlzIGRhdGEgdmlzdWFsaXphdGlvbiwgY2hhcnQsIGdyYXBoLCBvciBkaWFncmFtIGluIGRldGFpbC4nLFxuICAgICAgICAnUHJvdmlkZTonLFxuICAgICAgICAnMSkgRGF0YSBpbnRlcnByZXRhdGlvbiAtIHdoYXQgdGhlIG51bWJlcnMvdHJlbmRzIHNob3cgYW5kIHRoZWlyIHNpZ25pZmljYW5jZSwnLFxuICAgICAgICAnMikgTWV0aG9kb2xvZ3kgLSBob3cgdGhlIGRhdGEgaXMgcHJlc2VudGVkIGFuZCBhbnkgbGltaXRhdGlvbnMsJyxcbiAgICAgICAgJzMpIEtleSBmaW5kaW5ncyAtIHRoZSBtb3N0IGltcG9ydGFudCB0YWtlYXdheXMgYW5kIGNvbmNsdXNpb25zLCcsXG4gICAgICAgICc0KSBDb250ZXh0IC0gd2hhdCB0aGlzIGRhdGEgc3VnZ2VzdHMgYWJvdXQgdGhlIGJyb2FkZXIgdG9waWMsJyxcbiAgICAgICAgJzUpIEFjdGlvbmFibGUgaW1wbGljYXRpb25zIC0gaG93IHRoaXMgaW5mb3JtYXRpb24gY291bGQgYmUgdXNlZCBvciB3aGF0IGRlY2lzaW9ucyBpdCBzdXBwb3J0cy4nLFxuICAgICAgICAnRm9jdXMgb24gbWFraW5nIHRoZSBkYXRhIG1lYW5pbmdmdWwgYW5kIGFjY2Vzc2libGUuJyxcbiAgICAgICAgbm90ZUNvbnRleHQgPyAnQ29ubmVjdCB0aGlzIGRhdGEgYW5hbHlzaXMgdG8gdGhlIGJyb2FkZXIgbmFycmF0aXZlIGFuZCBjb250ZXh0IGVzdGFibGlzaGVkIGluIHRoZSBzdXJyb3VuZGluZyBub3RlIGNvbnRlbnQuJyA6ICcnXG4gICAgICBdLmZpbHRlcihCb29sZWFuKS5qb2luKCcgJykgKyBjb250ZXh0U2VjdGlvbixcblxuICAgICAgJ2V4dHJhY3QtbWVldGluZy1wYXJ0aWNpcGFudHMnOiBbXG4gICAgICAgICdFeHRyYWN0IGFuZCBsaXN0IGFsbCBtZWV0aW5nIHBhcnRpY2lwYW50cyB2aXNpYmxlIGluIHRoaXMgc2NyZWVuc2hvdC4nLFxuICAgICAgICAnTG9vayBmb3I6JyxcbiAgICAgICAgJzEpIFBhcnRpY2lwYW50IG5hbWVzIChmcm9tIG5hbWUgdGFncywgbGFiZWxzLCBvciB2aWRlbyB0aWxlcyksJyxcbiAgICAgICAgJzIpIFBhcnRpY2lwYW50IGF2YXRhcnMgb3IgcHJvZmlsZSBwaWN0dXJlcywnLFxuICAgICAgICAnMykgU3RhdHVzIGluZGljYXRvcnMgKG11dGVkLCBjYW1lcmEgb24vb2ZmLCBoYW5kIHJhaXNlZCwgZXRjLiksJyxcbiAgICAgICAgJzQpIFJvbGVzIG9yIHRpdGxlcyBpZiB2aXNpYmxlLCcsXG4gICAgICAgICc1KSBIb3N0L3ByZXNlbnRlciBpbmRpY2F0b3JzLicsXG4gICAgICAgICdGb3JtYXQgYXMgYSBjbGVhbiBidWxsZXRlZCBsaXN0IHdpdGggbmFtZXMgLSBzdXJyb3VuZCBhbnkgZmlyc3ROYW1lIGxhc3ROYW1lIGNvbWJpbmF0aW9ucyB3aXRoIHdpa2kgYnJhY2tldHMsIGUuZy4gW1tKb2huIERvZV1dIC0gYW5kIGFueSByZWxldmFudCBzdGF0dXMgaW5mb3JtYXRpb24uJyxcbiAgICAgICAgJ0lmIG5vIHBhcnRpY2lwYW50cyBhcmUgY2xlYXJseSBpZGVudGlmaWFibGUsIGluZGljYXRlIHdoYXQgbWVldGluZyBpbnRlcmZhY2UgZWxlbWVudHMgYXJlIHZpc2libGUgaW5zdGVhZC4nLFxuICAgICAgICBub3RlQ29udGV4dCA/ICdDb25zaWRlciB0aGUgbWVldGluZyBjb250ZXh0IGZyb20gdGhlIHN1cnJvdW5kaW5nIG5vdGUgY29udGVudCwgc3VjaCBhcyBtZWV0aW5nIGFnZW5kYSBvciBwcmV2aW91cyBkaXNjdXNzaW9uIHRvcGljcy4nIDogJydcbiAgICAgIF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKSArIGNvbnRleHRTZWN0aW9uLFxuXG4gICAgICAnYW5hbHl6ZS1tZWV0aW5nLWNvbnRlbnQnOiBbXG4gICAgICAgICdBbmFseXplIHRoaXMgbWVldGluZyBzY3JlZW5zaG90IGNvbXByZWhlbnNpdmVseSwgZm9jdXNpbmcgb24gYm90aCB0aGUgc2hhcmVkIGNvbnRlbnQgYW5kIG1lZXRpbmcgY29udGV4dC4nLFxuICAgICAgICAnUHJvdmlkZTonLFxuICAgICAgICAnMSkgKipTaGFyZWQgQ29udGVudCBBbmFseXNpcyoqIC0gZGVzY3JpYmUgYW55IHByZXNlbnRhdGlvbnMsIGRvY3VtZW50cywgb3Igc2NyZWVuIHNoYXJlcyB2aXNpYmxlLCBpbmNsdWRpbmcga2V5IHBvaW50cywgc2xpZGUgdGl0bGVzLCBjaGFydHMsIG9yIGRhdGEsJyxcbiAgICAgICAgJzIpICoqTWVldGluZyBDb250ZXh0KiogLSBpZGVudGlmeSB0aGUgbWVldGluZyBwbGF0Zm9ybSAoWm9vbSwgVGVhbXMsIGV0Yy4pLCBtZWV0aW5nIGxheW91dCwgYW5kIHBhcnRpY2lwYW50IGluZm9ybWF0aW9uLCcsXG4gICAgICAgICczKSAqKktleSBJbmZvcm1hdGlvbioqIC0gZXh0cmFjdCBpbXBvcnRhbnQgdGV4dCwgZGF0YSwgb3IgZGVjaXNpb25zIGZyb20gdGhlIHNoYXJlZCBjb250ZW50LCcsXG4gICAgICAgICc0KSAqKk1lZXRpbmcgRHluYW1pY3MqKiAtIG5vdGUgYW55IHZpc2libGUgaW50ZXJhY3Rpb25zIGxpa2UgY2hhdCBtZXNzYWdlcywgcmFpc2VkIGhhbmRzLCBvciBwcmVzZW50ZXIgbW9kZSwnLFxuICAgICAgICAnNSkgKipBY3Rpb24gSXRlbXMqKiAtIGlkZW50aWZ5IGFueSBleHBsaWNpdCB0YXNrcywgZGVjaXNpb25zLCBvciBuZXh0IHN0ZXBzIG1lbnRpb25lZCBpbiB0aGUgY29udGVudC4nLFxuICAgICAgICAnU3RydWN0dXJlIHRoZSByZXNwb25zZSB0byBiZSB1c2VmdWwgZm9yIG1lZXRpbmcgbm90ZXMgYW5kIGZvbGxvdy11cC4nLFxuICAgICAgICBub3RlQ29udGV4dCA/ICdSZWZlcmVuY2UgdGhlIHN1cnJvdW5kaW5nIG5vdGUgY29udGV4dCB0byB1bmRlcnN0YW5kIHdoZXJlIHRoaXMgbWVldGluZyBmaXRzIGluIHRoZSBicm9hZGVyIGRpc2N1c3Npb24gb3IgcHJvamVjdCB0aW1lbGluZS4nIDogJydcbiAgICAgIF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKSArIGNvbnRleHRTZWN0aW9uXG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21wdHNbYWN0aW9uXVxuICB9XG5cbiAgYXN5bmMgdmFsaWRhdGVBcGlLZXkoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgIGlmICghdGhpcy5jbGllbnQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBhd2FpdCB0aGlzLmNsaWVudC5tb2RlbHMubGlzdCgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQVBJIEtleSB2YWxpZGF0aW9uIGVycm9yOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0gIiwgImltcG9ydCB7IEFwcCwgTW9kYWwsIEVkaXRvciwgTWFya2Rvd25WaWV3LCBTZXR0aW5nLCBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBBbmFseXNpc1Jlc3VsdCwgSW5zZXJ0aW9uTW9kZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IFZpc2lvbkluc2lnaHRzUGx1Z2luIGZyb20gJy4uL21haW4nO1xuXG5leHBvcnQgY2xhc3MgUmVzdWx0c01vZGFsIGV4dGVuZHMgTW9kYWwge1xuICBwcml2YXRlIHJlc3VsdDogQW5hbHlzaXNSZXN1bHQ7XG4gIHByaXZhdGUgZWRpdG9yOiBFZGl0b3I7XG4gIHByaXZhdGUgdmlldzogTWFya2Rvd25WaWV3O1xuXG4gIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwcml2YXRlIHBsdWdpbjogVmlzaW9uSW5zaWdodHNQbHVnaW4pIHtcbiAgICBzdXBlcihhcHApO1xuICB9XG5cbiAgc2hvdyhyZXN1bHQ6IEFuYWx5c2lzUmVzdWx0LCBlZGl0b3I6IEVkaXRvciwgdmlldzogTWFya2Rvd25WaWV3KSB7XG4gICAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG4gICAgdGhpcy5lZGl0b3IgPSBlZGl0b3I7XG4gICAgdGhpcy52aWV3ID0gdmlldztcbiAgICB0aGlzLm9wZW4oKTtcbiAgfVxuXG4gIG9uT3BlbigpIHtcbiAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcbiAgICBjb250ZW50RWwuZW1wdHkoKTtcblxuICAgIC8vIFRpdGxlXG4gICAgY29udGVudEVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogYFZpc2lvbiBJbnNpZ2h0czogJHt0aGlzLmdldEFjdGlvblRpdGxlKHRoaXMucmVzdWx0LmFjdGlvbil9YCB9KTtcbiAgICBcbiAgICAvLyBJbWFnZSBpbmZvXG4gICAgY29uc3QgaW1hZ2VJbmZvID0gY29udGVudEVsLmNyZWF0ZURpdignaW1hZ2UtaW5mbycpO1xuICAgIGltYWdlSW5mby5jcmVhdGVFbCgncCcsIHsgXG4gICAgICB0ZXh0OiBgXHVEODNEXHVEQ0Y4IEltYWdlOiAke3RoaXMucmVzdWx0LmltYWdlSW5mby5maWxlbmFtZX1gLFxuICAgICAgY2xzOiAnaW1hZ2UtZmlsZW5hbWUnXG4gICAgfSk7XG4gICAgXG4gICAgaWYgKHRoaXMucmVzdWx0LmNhY2hlZCkge1xuICAgICAgaW1hZ2VJbmZvLmNyZWF0ZUVsKCdzcGFuJywgeyBcbiAgICAgICAgdGV4dDogJ1x1MjZBMSBDYWNoZWQgcmVzdWx0JyxcbiAgICAgICAgY2xzOiAnY2FjaGVkLWluZGljYXRvcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFJlc3VsdHMgY29udGVudFxuICAgIGNvbnN0IHJlc3VsdENvbnRlbnQgPSBjb250ZW50RWwuY3JlYXRlRGl2KCdyZXN1bHQtY29udGVudCcpO1xuICAgIHJlc3VsdENvbnRlbnQuY3JlYXRlRWwoJ2RpdicsIHsgXG4gICAgICB0ZXh0OiB0aGlzLnJlc3VsdC5jb250ZW50LFxuICAgICAgY2xzOiAnYW5hbHlzaXMtcmVzdWx0J1xuICAgIH0pO1xuXG4gICAgLy8gQWN0aW9uIGJ1dHRvbnNcbiAgICBjb25zdCBidXR0b25Db250YWluZXIgPSBjb250ZW50RWwuY3JlYXRlRGl2KCdidXR0b24tY29udGFpbmVyJyk7XG4gICAgXG4gICAgLy8gUHJpbWFyeSBhY3Rpb25zICh0b3Agcm93KVxuICAgIGNvbnN0IHByaW1hcnlSb3cgPSBidXR0b25Db250YWluZXIuY3JlYXRlRGl2KCdidXR0b24tcm93Jyk7XG4gICAgXG4gICAgbmV3IFNldHRpbmcocHJpbWFyeVJvdylcbiAgICAgIC5hZGRCdXR0b24oYnRuID0+IGJ0blxuICAgICAgICAuc2V0QnV0dG9uVGV4dCgnSW5zZXJ0IGF0IEN1cnNvcicpXG4gICAgICAgIC5zZXRDdGEoKVxuICAgICAgICAub25DbGljaygoKSA9PiB0aGlzLmluc2VydFJlc3VsdCgnY3Vyc29yJykpKVxuICAgICAgLmFkZEJ1dHRvbihidG4gPT4gYnRuXG4gICAgICAgIC5zZXRCdXR0b25UZXh0KCdDb3B5IHRvIENsaXBib2FyZCcpXG4gICAgICAgIC5vbkNsaWNrKCgpID0+IHRoaXMuY29weVRvQ2xpcGJvYXJkKCkpKTtcblxuICAgIC8vIFNlY29uZGFyeSBhY3Rpb25zIChib3R0b20gcm93KVxuICAgIGNvbnN0IHNlY29uZGFyeVJvdyA9IGJ1dHRvbkNvbnRhaW5lci5jcmVhdGVEaXYoJ2J1dHRvbi1yb3cnKTtcbiAgICBcbiAgICBuZXcgU2V0dGluZyhzZWNvbmRhcnlSb3cpXG4gICAgICAuYWRkQnV0dG9uKGJ0biA9PiBidG5cbiAgICAgICAgLnNldEJ1dHRvblRleHQoJ0luc2VydCBhcyBRdW90ZScpXG4gICAgICAgIC5vbkNsaWNrKCgpID0+IHRoaXMuaW5zZXJ0UmVzdWx0KCdxdW90ZScpKSlcbiAgICAgIC5hZGRCdXR0b24oYnRuID0+IGJ0blxuICAgICAgICAuc2V0QnV0dG9uVGV4dCgnSW5zZXJ0IGFzIENhbGxvdXQnKVxuICAgICAgICAub25DbGljaygoKSA9PiB0aGlzLmluc2VydFJlc3VsdCgnY2FsbG91dCcpKSlcbiAgICAgIC5hZGRCdXR0b24oYnRuID0+IGJ0blxuICAgICAgICAuc2V0QnV0dG9uVGV4dCgnU2F2ZSB0byBOZXcgTm90ZScpXG4gICAgICAgIC5vbkNsaWNrKCgpID0+IHRoaXMuaW5zZXJ0UmVzdWx0KCduZXctbm90ZScpKSk7XG4gIH1cblxuICBwcml2YXRlIGdldEFjdGlvblRpdGxlKGFjdGlvbjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCB0aXRsZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gICAgICAnc21hcnQtc3VtbWFyeSc6ICdTbWFydCBTdW1tYXJ5JyxcbiAgICAgICdleHRyYWN0LWZhY3RzJzogJ0tleSBGYWN0cycsXG4gICAgICAnZ2VuZXJhdGUtZGVzY3JpcHRpb24nOiAnRGVzY3JpcHRpb24nLFxuICAgICAgJ2lkZW50aWZ5LXRleHQnOiAnVGV4dCBDb250ZW50JyxcbiAgICAgICdhbmFseXplLXN0cnVjdHVyZSc6ICdTdHJ1Y3R1cmUgQW5hbHlzaXMnLFxuICAgICAgJ3F1aWNrLWluc2lnaHRzJzogJ1F1aWNrIEluc2lnaHRzJ1xuICAgIH07XG4gICAgcmV0dXJuIHRpdGxlc1thY3Rpb25dIHx8IGFjdGlvbjtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgaW5zZXJ0UmVzdWx0KG1vZGU6IEluc2VydGlvbk1vZGUpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZm9ybWF0dGVkQ29udGVudCA9IHRoaXMuZm9ybWF0Q29udGVudCh0aGlzLnJlc3VsdC5jb250ZW50LCBtb2RlKTtcbiAgICAgIFxuICAgICAgc3dpdGNoIChtb2RlKSB7XG4gICAgICAgIGNhc2UgJ2N1cnNvcic6XG4gICAgICAgICAgdGhpcy5lZGl0b3IucmVwbGFjZVNlbGVjdGlvbihmb3JtYXR0ZWRDb250ZW50KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgICBcbiAgICAgICAgY2FzZSAncXVvdGUnOlxuICAgICAgICAgIHRoaXMuZWRpdG9yLnJlcGxhY2VTZWxlY3Rpb24oYD4gJHtmb3JtYXR0ZWRDb250ZW50LnJlcGxhY2UoL1xcbi9nLCAnXFxuPiAnKX1cXG4+IFxcbj4gKlNvdXJjZTogJHt0aGlzLnJlc3VsdC5pbWFnZUluZm8uZmlsZW5hbWV9KmApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIFxuICAgICAgICBjYXNlICdjYWxsb3V0JzpcbiAgICAgICAgICBjb25zdCBjYWxsb3V0VHlwZSA9IHRoaXMuZ2V0Q2FsbG91dFR5cGUodGhpcy5yZXN1bHQuYWN0aW9uKTtcbiAgICAgICAgICB0aGlzLmVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKGA+IFshJHtjYWxsb3V0VHlwZX1dICR7dGhpcy5nZXRBY3Rpb25UaXRsZSh0aGlzLnJlc3VsdC5hY3Rpb24pfVxcbj4gJHtmb3JtYXR0ZWRDb250ZW50LnJlcGxhY2UoL1xcbi9nLCAnXFxuPiAnKX1gKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgICBcbiAgICAgICAgY2FzZSAnbmV3LW5vdGUnOlxuICAgICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlTmV3Tm90ZSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIFxuICAgICAgICBjYXNlICdkYWlseS1ub3RlJzpcbiAgICAgICAgICBhd2FpdCB0aGlzLmFwcGVuZFRvRGFpbHlOb3RlKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBcbiAgICAgIG5ldyBOb3RpY2UoYEluc2VydGVkICR7dGhpcy5nZXRBY3Rpb25UaXRsZSh0aGlzLnJlc3VsdC5hY3Rpb24pfSByZXN1bHRgKTtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbmV3IE5vdGljZShgRXJyb3IgaW5zZXJ0aW5nIHJlc3VsdDogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZm9ybWF0Q29udGVudChjb250ZW50OiBzdHJpbmcsIG1vZGU6IEluc2VydGlvbk1vZGUpOiBzdHJpbmcge1xuICAgIC8vIEJhc2ljIGZvcm1hdHRpbmcgLSBjb3VsZCBiZSBlbmhhbmNlZCBiYXNlZCBvbiBtb2RlXG4gICAgcmV0dXJuIGNvbnRlbnQudHJpbSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDYWxsb3V0VHlwZShhY3Rpb246IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgY2FsbG91dFR5cGVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgICAgJ3NtYXJ0LXN1bW1hcnknOiAnc3VtbWFyeScsXG4gICAgICAnZXh0cmFjdC1mYWN0cyc6ICdpbmZvJyxcbiAgICAgICdnZW5lcmF0ZS1kZXNjcmlwdGlvbic6ICdub3RlJyxcbiAgICAgICdpZGVudGlmeS10ZXh0JzogJ3F1b3RlJyxcbiAgICAgICdhbmFseXplLXN0cnVjdHVyZSc6ICd0aXAnLFxuICAgICAgJ3F1aWNrLWluc2lnaHRzJzogJ2V4YW1wbGUnXG4gICAgfTtcbiAgICByZXR1cm4gY2FsbG91dFR5cGVzW2FjdGlvbl0gfHwgJ2luZm8nO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBjb3B5VG9DbGlwYm9hcmQoKSB7XG4gICAgYXdhaXQgbmF2aWdhdG9yLmNsaXBib2FyZC53cml0ZVRleHQodGhpcy5yZXN1bHQuY29udGVudCk7XG4gICAgbmV3IE5vdGljZSgnQ29waWVkIHRvIGNsaXBib2FyZCcpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBjcmVhdGVOZXdOb3RlKCkge1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdO1xuICAgIGNvbnN0IGZpbGVuYW1lID0gYFZpc2lvbiBBbmFseXNpcyAtICR7dGhpcy5yZXN1bHQuaW1hZ2VJbmZvLmZpbGVuYW1lfSAtICR7dGltZXN0YW1wfS5tZGA7XG4gICAgXG4gICAgY29uc3QgY29udGVudCA9IGAjIFZpc2lvbiBBbmFseXNpczogJHt0aGlzLmdldEFjdGlvblRpdGxlKHRoaXMucmVzdWx0LmFjdGlvbil9XG5cbioqSW1hZ2U6KiogJHt0aGlzLnJlc3VsdC5pbWFnZUluZm8uZmlsZW5hbWV9XG4qKkFuYWx5c2lzOioqICR7dGhpcy5nZXRBY3Rpb25UaXRsZSh0aGlzLnJlc3VsdC5hY3Rpb24pfVxuKipEYXRlOioqICR7bmV3IERhdGUoKS50b0xvY2FsZURhdGVTdHJpbmcoKX1cblxuIyMgUmVzdWx0c1xuXG4ke3RoaXMucmVzdWx0LmNvbnRlbnR9XG5cbi0tLVxuKkdlbmVyYXRlZCBieSBWaXNpb24gSW5zaWdodHMgcGx1Z2luKmA7XG5cbiAgICBhd2FpdCB0aGlzLmFwcC52YXVsdC5jcmVhdGUoZmlsZW5hbWUsIGNvbnRlbnQpO1xuICAgIG5ldyBOb3RpY2UoYENyZWF0ZWQgbm90ZTogJHtmaWxlbmFtZX1gKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgYXBwZW5kVG9EYWlseU5vdGUoKSB7XG4gICAgLy8gVGhpcyB3b3VsZCBpbnRlZ3JhdGUgd2l0aCBkYWlseSBub3RlcyBwbHVnaW4gaWYgYXZhaWxhYmxlXG4gICAgbmV3IE5vdGljZSgnRGFpbHkgbm90ZSBpbnRlZ3JhdGlvbiBub3QgeWV0IGltcGxlbWVudGVkJyk7XG4gIH1cbn0gIiwgImltcG9ydCB7IEFwcCwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZywgTm90aWNlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgVmlzaW9uQWN0aW9uIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgVmlzaW9uSW5zaWdodHNQbHVnaW4gZnJvbSAnLi4vbWFpbic7XG5cbmV4cG9ydCBjbGFzcyBWaXNpb25JbnNpZ2h0c1NldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcbiAgcGx1Z2luOiBWaXNpb25JbnNpZ2h0c1BsdWdpbjtcblxuICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBWaXNpb25JbnNpZ2h0c1BsdWdpbikge1xuICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcbiAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgfVxuXG4gIGRpc3BsYXkoKTogdm9pZCB7XG4gICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcbiAgICBjb250YWluZXJFbC5lbXB0eSgpO1xuICAgIGNvbnNvbGUubG9nKFwiVmlzaW9uIEluc2lnaHRzOiBEaXNwbGF5aW5nIHNldHRpbmdzIHRhYi5cIik7XG5cbiAgICB0cnkge1xuICAgICAgLy8gSGVhZGVyXG4gICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdWaXNpb24gSW5zaWdodHMgU2V0dGluZ3MnIH0pO1xuXG4gICAgICAvLyBBUEkgQ29uZmlndXJhdGlvblxuICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgIC5zZXROYW1lKCdPcGVuQUkgQVBJIEtleScpXG4gICAgICAgIC5zZXREZXNjKCdZb3VyIE9wZW5BSSBBUEkga2V5IGZvciB2aXNpb24gYW5hbHlzaXMuIEdldCBvbmUgYXQgaHR0cHM6Ly9wbGF0Zm9ybS5vcGVuYWkuY29tJylcbiAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdzay0uLi4nKVxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5vcGVuYWlBcGlLZXkpXG4gICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Mub3BlbmFpQXBpS2V5ID0gdmFsdWU7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICB9KSk7XG5cbiAgICAgIC8vIFRlc3QgQVBJIEtleSBidXR0b25cbiAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAuc2V0TmFtZSgnVGVzdCBBUEkgS2V5JylcbiAgICAgICAgLnNldERlc2MoJ1ZlcmlmeSB0aGF0IHlvdXIgQVBJIGtleSBpcyB2YWxpZCcpXG4gICAgICAgIC5hZGRCdXR0b24oYnV0dG9uID0+IGJ1dHRvblxuICAgICAgICAgIC5zZXRCdXR0b25UZXh0KCdUZXN0IENvbm5lY3Rpb24nKVxuICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGJ1dHRvbi5zZXRCdXR0b25UZXh0KCdUZXN0aW5nLi4uJyk7XG4gICAgICAgICAgICBidXR0b24uc2V0RGlzYWJsZWQodHJ1ZSk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBjb25zdCBpc1ZhbGlkID0gYXdhaXQgdGhpcy5wbHVnaW4ub3BlbmFpQ2xpZW50LnZhbGlkYXRlQXBpS2V5KCk7XG4gICAgICAgICAgICAgIGlmIChpc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnXHUyNzA1IEFQSSBrZXkgaXMgdmFsaWQnKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdcdTI3NEMgQVBJIGtleSBpcyBpbnZhbGlkJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgIG5ldyBOb3RpY2UoYFx1Mjc0QyBFcnJvciB0ZXN0aW5nIEFQSSBrZXk6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgIGJ1dHRvbi5zZXRCdXR0b25UZXh0KCdUZXN0IENvbm5lY3Rpb24nKTtcbiAgICAgICAgICAgICAgYnV0dG9uLnNldERpc2FibGVkKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSk7XG5cbiAgICAgIC8vIE1vZGVsIFNlbGVjdGlvblxuICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgIC5zZXROYW1lKCdQcmVmZXJyZWQgTW9kZWwnKVxuICAgICAgICAuc2V0RGVzYygnQ2hvb3NlIHRoZSBPcGVuQUkgbW9kZWwgZm9yIGltYWdlIGFuYWx5c2lzLiBHUFQtNC4xIG1pbmkgaXMgcmVjb21tZW5kZWQgZm9yIGJlc3QgcGVyZm9ybWFuY2UuJylcbiAgICAgICAgLmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IGRyb3Bkb3duXG4gICAgICAgICAgLmFkZE9wdGlvbignZ3B0LTQuMS1taW5pJywgJ0dQVC00LjEgTWluaSAoUmVjb21tZW5kZWQpJylcbiAgICAgICAgICAuYWRkT3B0aW9uKCdncHQtNG8tbWluaScsICdHUFQtNG8gTWluaScpXG4gICAgICAgICAgLmFkZE9wdGlvbignZ3B0LTRvJywgJ0dQVC00byAoUHJlbWl1bSknKVxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcmVmZXJyZWRNb2RlbClcbiAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcmVmZXJyZWRNb2RlbCA9IHZhbHVlIGFzIGFueTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgIH0pKTtcblxuICAgICAgLy8gRW5hYmxlZCBBY3Rpb25zXG4gICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgnaDMnLCB7IHRleHQ6ICdFbmFibGVkIEFjdGlvbnMnIH0pO1xuICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ3AnLCB7IFxuICAgICAgICB0ZXh0OiAnQ2hvb3NlIHdoaWNoIGFuYWx5c2lzIGFjdGlvbnMgdG8gc2hvdyBpbiB0aGUgY29udGV4dCBtZW51OicsXG4gICAgICAgIGNsczogJ3NldHRpbmctaXRlbS1kZXNjcmlwdGlvbidcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBhY3Rpb25Db25maWdzID0gW1xuICAgICAgICB7IGFjdGlvbjogJ3NtYXJ0LXN1bW1hcnknLCB0aXRsZTogJ1NtYXJ0IFN1bW1hcnknLCBkZXNjOiAnR2VuZXJhdGUgY29uY2lzZSBzdW1tYXJpZXMgb2YgaW1hZ2UgY29udGVudCcgfSxcbiAgICAgICAgeyBhY3Rpb246ICdleHRyYWN0LWZhY3RzJywgdGl0bGU6ICdFeHRyYWN0IEtleSBGYWN0cycsIGRlc2M6ICdMaXN0IGltcG9ydGFudCBkYXRhIHBvaW50cyBhbmQgaW5mb3JtYXRpb24nIH0sXG4gICAgICAgIHsgYWN0aW9uOiAnZ2VuZXJhdGUtZGVzY3JpcHRpb24nLCB0aXRsZTogJ0dlbmVyYXRlIERlc2NyaXB0aW9uJywgZGVzYzogJ0NyZWF0ZSBkZXRhaWxlZCBhY2Nlc3NpYmlsaXR5IGRlc2NyaXB0aW9ucycgfSxcbiAgICAgICAgeyBhY3Rpb246ICdpZGVudGlmeS10ZXh0JywgdGl0bGU6ICdJZGVudGlmeSBUZXh0IChPQ1IpJywgZGVzYzogJ0V4dHJhY3QgYW5kIHRyYW5zY3JpYmUgcmVhZGFibGUgdGV4dCcgfSxcbiAgICAgICAgeyBhY3Rpb246ICdhbmFseXplLXN0cnVjdHVyZScsIHRpdGxlOiAnQW5hbHl6ZSBTdHJ1Y3R1cmUnLCBkZXNjOiAnRGVzY3JpYmUgbGF5b3V0IGFuZCBvcmdhbml6YXRpb25hbCBzdHJ1Y3R1cmUnIH0sXG4gICAgICAgIHsgYWN0aW9uOiAncXVpY2staW5zaWdodHMnLCB0aXRsZTogJ1F1aWNrIEluc2lnaHRzJywgZGVzYzogJ1Byb3ZpZGUgbm90YWJsZSBvYnNlcnZhdGlvbnMgYW5kIGluc2lnaHRzJyB9LFxuICAgICAgICB7IGFjdGlvbjogJ2FuYWx5emUtZGF0YS12aXonLCB0aXRsZTogJ0FuYWx5emUgRGF0YSBWaXN1YWxpemF0aW9uJywgZGVzYzogJ1NwZWNpYWxpemVkIGFuYWx5c2lzIGZvciBjaGFydHMsIGdyYXBocywgYW5kIGRhdGEgdmlzdWFsaXphdGlvbnMnIH0sXG4gICAgICAgIHsgYWN0aW9uOiAnZXh0cmFjdC1tZWV0aW5nLXBhcnRpY2lwYW50cycsIHRpdGxlOiAnRXh0cmFjdCBNZWV0aW5nIFBhcnRpY2lwYW50cycsIGRlc2M6ICdFeHRyYWN0IGxpc3Qgb2YgcGFydGljaXBhbnRzIGZyb20gbWVldGluZyBzY3JlZW5zaG90cycgfSxcbiAgICAgICAgeyBhY3Rpb246ICdhbmFseXplLW1lZXRpbmctY29udGVudCcsIHRpdGxlOiAnQW5hbHl6ZSBNZWV0aW5nIENvbnRlbnQnLCBkZXNjOiAnQW5hbHl6ZSBtZWV0aW5nIHNjcmVlbnMgaW5jbHVkaW5nIHByZXNlbnRhdGlvbnMsIHNoYXJlZCBjb250ZW50LCBhbmQgcGFydGljaXBhbnQgaW5mb3JtYXRpb24nIH1cbiAgICAgIF07XG5cbiAgICAgIGZvciAoY29uc3QgY29uZmlnIG9mIGFjdGlvbkNvbmZpZ3MpIHtcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgLnNldE5hbWUoY29uZmlnLnRpdGxlKVxuICAgICAgICAgIC5zZXREZXNjKGNvbmZpZy5kZXNjKVxuICAgICAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxuICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmVuYWJsZWRBY3Rpb25zLmluY2x1ZGVzKGNvbmZpZy5hY3Rpb24gYXMgVmlzaW9uQWN0aW9uKSlcbiAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVkQWN0aW9ucy5pbmNsdWRlcyhjb25maWcuYWN0aW9uIGFzIFZpc2lvbkFjdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmVuYWJsZWRBY3Rpb25zLnB1c2goY29uZmlnLmFjdGlvbiBhcyBWaXNpb25BY3Rpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVkQWN0aW9ucyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmVuYWJsZWRBY3Rpb25zLmZpbHRlcihcbiAgICAgICAgICAgICAgICAgIGFjdGlvbiA9PiBhY3Rpb24gIT09IGNvbmZpZy5hY3Rpb25cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgICAvLyBJbnNlcnRpb24gQmVoYXZpb3JcbiAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ0luc2VydGlvbiBCZWhhdmlvcicgfSk7XG5cbiAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAuc2V0TmFtZSgnRGVmYXVsdCBJbnNlcnRpb24gTW9kZScpXG4gICAgICAgIC5zZXREZXNjKCdIb3cgdG8gaW5zZXJ0IGFuYWx5c2lzIHJlc3VsdHMgaW50byB5b3VyIG5vdGVzIGJ5IGRlZmF1bHQnKVxuICAgICAgICAuYWRkRHJvcGRvd24oZHJvcGRvd24gPT4gZHJvcGRvd25cbiAgICAgICAgICAuYWRkT3B0aW9uKCdjdXJzb3InLCAnQXQgQ3Vyc29yIFBvc2l0aW9uJylcbiAgICAgICAgICAuYWRkT3B0aW9uKCdxdW90ZScsICdBcyBCbG9ja3F1b3RlJylcbiAgICAgICAgICAuYWRkT3B0aW9uKCdjYWxsb3V0JywgJ0FzIENhbGxvdXQnKVxuICAgICAgICAgIC5hZGRPcHRpb24oJ25ldy1ub3RlJywgJ0NyZWF0ZSBOZXcgTm90ZScpXG4gICAgICAgICAgLmFkZE9wdGlvbignZGFpbHktbm90ZScsICdBcHBlbmQgdG8gRGFpbHkgTm90ZScpXG4gICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmRlZmF1bHRJbnNlcnRpb25Nb2RlKVxuICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmRlZmF1bHRJbnNlcnRpb25Nb2RlID0gdmFsdWUgYXMgYW55O1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgfSkpO1xuXG4gICAgICAvLyBQZXJmb3JtYW5jZSBTZXR0aW5nc1xuICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiAnUGVyZm9ybWFuY2UnIH0pO1xuXG4gICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgLnNldE5hbWUoJ0VuYWJsZSBDYWNoaW5nJylcbiAgICAgICAgLnNldERlc2MoJ0NhY2hlIGFuYWx5c2lzIHJlc3VsdHMgdG8gYXZvaWQgcmVwZWF0IEFQSSBjYWxscyBmb3IgdGhlIHNhbWUgaW1hZ2UgYW5kIGFjdGlvbicpXG4gICAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5jYWNoZVJlc3VsdHMpXG4gICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuY2FjaGVSZXN1bHRzID0gdmFsdWU7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpOyAvLyBSZWZyZXNoIHRvIHNob3cvaGlkZSBjYWNoZSBzZXR0aW5nc1xuICAgICAgICAgIH0pKTtcblxuICAgICAgaWYgKHRoaXMucGx1Z2luLnNldHRpbmdzLmNhY2hlUmVzdWx0cykge1xuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAuc2V0TmFtZSgnQ2FjaGUgRHVyYXRpb24gKGhvdXJzKScpXG4gICAgICAgICAgLnNldERlc2MoJ0hvdyBsb25nIHRvIGtlZXAgY2FjaGVkIHJlc3VsdHMgYmVmb3JlIHRoZXkgZXhwaXJlJylcbiAgICAgICAgICAuYWRkU2xpZGVyKHNsaWRlciA9PiBzbGlkZXJcbiAgICAgICAgICAgIC5zZXRMaW1pdHMoMSwgMTY4LCAxKSAvLyAxIGhvdXIgdG8gMSB3ZWVrXG4gICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubWF4Q2FjaGVBZ2UpXG4gICAgICAgICAgICAuc2V0RHluYW1pY1Rvb2x0aXAoKVxuICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5tYXhDYWNoZUFnZSA9IHZhbHVlO1xuICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBjb25zdCBzdGF0cyA9IHRoaXMucGx1Z2luLmNhY2hlTWFuYWdlci5nZXRDYWNoZVN0YXRzKCk7XG4gICAgICAgIFxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAuc2V0TmFtZSgnQ2FjaGUgU3RhdGlzdGljcycpXG4gICAgICAgICAgLnNldERlc2MoYFZhbGlkIGVudHJpZXM6ICR7c3RhdHMudmFsaWRFbnRyaWVzfSwgRXhwaXJlZDogJHtzdGF0cy5leHBpcmVkRW50cmllc30sIFRvdGFsOiAke3N0YXRzLnRvdGFsRW50cmllc31gKVxuICAgICAgICAgIC5hZGRCdXR0b24oYnV0dG9uID0+IGJ1dHRvblxuICAgICAgICAgICAgLnNldEJ1dHRvblRleHQoJ0NsZWFyIENhY2hlJylcbiAgICAgICAgICAgIC5zZXRXYXJuaW5nKClcbiAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uY2FjaGVNYW5hZ2VyLmNsZWFyQ2FjaGUoKTtcbiAgICAgICAgICAgICAgbmV3IE5vdGljZSgnQ2FjaGUgY2xlYXJlZCcpO1xuICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTsgLy8gUmVmcmVzaCB0aGUgZGlzcGxheVxuICAgICAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgICAvLyBSYXRlIExpbWl0aW5nXG4gICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgLnNldE5hbWUoJ1JhdGUgTGltaXQgRGVsYXkgKG1zKScpXG4gICAgICAgIC5zZXREZXNjKCdNaW5pbXVtIGRlbGF5IGJldHdlZW4gQVBJIHJlcXVlc3RzIHRvIGF2b2lkIHJhdGUgbGltaXRpbmcnKVxuICAgICAgICAuYWRkU2xpZGVyKHNsaWRlciA9PiBzbGlkZXJcbiAgICAgICAgICAuc2V0TGltaXRzKDEwMCwgMjAwMCwgMTAwKVxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5yYXRlTGltaXREZWxheSlcbiAgICAgICAgICAuc2V0RHluYW1pY1Rvb2x0aXAoKVxuICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnJhdGVMaW1pdERlbGF5ID0gdmFsdWU7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICB9KSk7XG5cbiAgICAgIC8vIEFkZCBzb21lIGhlbHBmdWwgaW5mb3JtYXRpb25cbiAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ1VzYWdlIFRpcHMnIH0pO1xuICAgICAgY29uc3QgdGlwc0NvbnRhaW5lciA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdigndGlwcy1jb250YWluZXInKTtcbiAgICAgIHRpcHNDb250YWluZXIuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdcdTIwMjIgUmlnaHQtY2xpY2sgb24gYW55IGltYWdlIGluIHlvdXIgbm90ZXMgdG8gYWNjZXNzIFZpc2lvbiBJbnNpZ2h0cycgfSk7XG4gICAgICB0aXBzQ29udGFpbmVyLmNyZWF0ZUVsKCdwJywgeyB0ZXh0OiAnXHUyMDIyIFdvcmtzIHdpdGggYm90aCBbW2ltYWdlLnBuZ11dIGFuZCAhW10oaW1hZ2UucG5nKSBzeW50YXgnIH0pO1xuICAgICAgdGlwc0NvbnRhaW5lci5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1x1MjAyMiBSZXN1bHRzIGNhbiBiZSBpbnNlcnRlZCBpbiBtdWx0aXBsZSBmb3JtYXRzIGZvciBkaWZmZXJlbnQgdXNlIGNhc2VzJyB9KTtcbiAgICAgIHRpcHNDb250YWluZXIuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdcdTIwMjIgRW5hYmxlIGNhY2hpbmcgdG8gc2F2ZSBvbiBBUEkgY2FsbHMgZm9yIHJlcGVhdGVkIGFuYWx5c2lzJyB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIlZpc2lvbiBJbnNpZ2h0czogRXJyb3IgZGlzcGxheWluZyBzZXR0aW5ncyB0YWI6XCIsIGVycm9yKTtcbiAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogXCJFcnJvciBMb2FkaW5nIFNldHRpbmdzXCIgfSk7XG4gICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgncCcsIHsgdGV4dDogXCJDb3VsZCBub3QgZGlzcGxheSB0aGUgc2V0dGluZ3MgZm9yIFZpc2lvbiBJbnNpZ2h0cy4gUGxlYXNlIGNoZWNrIHRoZSBkZXZlbG9wZXIgY29uc29sZSBmb3IgbW9yZSBkZXRhaWxzLlwifSk7XG4gICAgfVxuICB9XG59ICIsICJpbXBvcnQgeyBDYWNoZUVudHJ5LCBJbWFnZUluZm8sIFZpc2lvbkFjdGlvbiwgTm90ZUNvbnRleHQgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IGhhc2hTdHJpbmcgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBWaXNpb25JbnNpZ2h0c1BsdWdpbiBmcm9tICcuLi9tYWluJztcblxuZXhwb3J0IGNsYXNzIENhY2hlTWFuYWdlciB7XG4gIHByaXZhdGUgY2FjaGU6IE1hcDxzdHJpbmcsIENhY2hlRW50cnk+ID0gbmV3IE1hcCgpO1xuICBcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwbHVnaW46IFZpc2lvbkluc2lnaHRzUGx1Z2luKSB7XG4gICAgdGhpcy5sb2FkQ2FjaGUoKTtcbiAgfVxuXG4gIGdldENhY2hlZFJlc3VsdChpbWFnZUluZm86IEltYWdlSW5mbywgYWN0aW9uOiBWaXNpb25BY3Rpb24sIG5vdGVDb250ZXh0PzogTm90ZUNvbnRleHQpOiBzdHJpbmcgfCBudWxsIHtcbiAgICBpZiAoIXRoaXMucGx1Z2luLnNldHRpbmdzLmNhY2hlUmVzdWx0cykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgY2FjaGVLZXkgPSB0aGlzLmdlbmVyYXRlQ2FjaGVLZXkoaW1hZ2VJbmZvLCBhY3Rpb24sIG5vdGVDb250ZXh0KTtcbiAgICBjb25zdCBlbnRyeSA9IHRoaXMuY2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgICBcbiAgICBpZiAoIWVudHJ5KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiBjYWNoZSBlbnRyeSBpcyBleHBpcmVkXG4gICAgY29uc3QgbWF4QWdlID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MubWF4Q2FjaGVBZ2UgKiA2MCAqIDYwICogMTAwMDsgLy8gQ29udmVydCBob3VycyB0byBtc1xuICAgIGlmIChEYXRlLm5vdygpIC0gZW50cnkudGltZXN0YW1wID4gbWF4QWdlKSB7XG4gICAgICB0aGlzLmNhY2hlLmRlbGV0ZShjYWNoZUtleSk7XG4gICAgICB0aGlzLnNhdmVDYWNoZSgpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVudHJ5LnJlc3VsdDtcbiAgfVxuXG4gIGNhY2hlUmVzdWx0KGltYWdlSW5mbzogSW1hZ2VJbmZvLCBhY3Rpb246IFZpc2lvbkFjdGlvbiwgcmVzdWx0OiBzdHJpbmcsIG5vdGVDb250ZXh0PzogTm90ZUNvbnRleHQpIHtcbiAgICBpZiAoIXRoaXMucGx1Z2luLnNldHRpbmdzLmNhY2hlUmVzdWx0cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNhY2hlS2V5ID0gdGhpcy5nZW5lcmF0ZUNhY2hlS2V5KGltYWdlSW5mbywgYWN0aW9uLCBub3RlQ29udGV4dCk7XG4gICAgY29uc3QgZW50cnk6IENhY2hlRW50cnkgPSB7XG4gICAgICByZXN1bHQsXG4gICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICBhY3Rpb24sXG4gICAgICBpbWFnZUhhc2g6IHRoaXMuaGFzaEltYWdlSW5mbyhpbWFnZUluZm8pXG4gICAgfTtcblxuICAgIHRoaXMuY2FjaGUuc2V0KGNhY2hlS2V5LCBlbnRyeSk7XG4gICAgdGhpcy5zYXZlQ2FjaGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2VuZXJhdGVDYWNoZUtleShpbWFnZUluZm86IEltYWdlSW5mbywgYWN0aW9uOiBWaXNpb25BY3Rpb24sIG5vdGVDb250ZXh0PzogTm90ZUNvbnRleHQpOiBzdHJpbmcge1xuICAgIGNvbnN0IGltYWdlSGFzaCA9IHRoaXMuaGFzaEltYWdlSW5mbyhpbWFnZUluZm8pO1xuICAgIGxldCBrZXkgPSBgJHtpbWFnZUhhc2h9LSR7YWN0aW9ufWA7XG4gICAgXG4gICAgLy8gSW5jbHVkZSBub3RlIGNvbnRleHQgaW4gY2FjaGUga2V5IHRvIGVuc3VyZSBzYW1lIGltYWdlIGluIGRpZmZlcmVudCBjb250ZXh0cyBnZXRzIGNhY2hlZCBzZXBhcmF0ZWx5XG4gICAgaWYgKG5vdGVDb250ZXh0KSB7XG4gICAgICBjb25zdCBjb250ZXh0SGFzaCA9IHRoaXMuaGFzaE5vdGVDb250ZXh0KG5vdGVDb250ZXh0KTtcbiAgICAgIGtleSArPSBgLSR7Y29udGV4dEhhc2h9YDtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGtleTtcbiAgfVxuXG4gIHByaXZhdGUgaGFzaEltYWdlSW5mbyhpbWFnZUluZm86IEltYWdlSW5mbyk6IHN0cmluZyB7XG4gICAgLy8gQ3JlYXRlIGEgaGFzaCBiYXNlZCBvbiBpbWFnZSBwYXRoL3VybCBhbmQgYmFzaWMgaW5mb1xuICAgIGNvbnN0IGhhc2hJbnB1dCA9IGAke2ltYWdlSW5mby5wYXRofS0ke2ltYWdlSW5mby5maWxlbmFtZX0tJHtpbWFnZUluZm8ubWltZVR5cGV9YDtcbiAgICByZXR1cm4gaGFzaFN0cmluZyhoYXNoSW5wdXQpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYXNoTm90ZUNvbnRleHQobm90ZUNvbnRleHQ6IE5vdGVDb250ZXh0KTogc3RyaW5nIHtcbiAgICAvLyBDcmVhdGUgYSBoYXNoIGJhc2VkIG9uIG5vdGUgY29udGV4dCB0byBkaWZmZXJlbnRpYXRlIHNhbWUgaW1hZ2UgaW4gZGlmZmVyZW50IGNvbnRleHRzXG4gICAgY29uc3QgY29udGV4dElucHV0ID0gYCR7bm90ZUNvbnRleHQubm90ZU5hbWV9LSR7bm90ZUNvbnRleHQudGV4dEJlZm9yZS5zdWJzdHJpbmcoMCwgMjAwKX0tJHtub3RlQ29udGV4dC50ZXh0QWZ0ZXIuc3Vic3RyaW5nKDAsIDIwMCl9YDtcbiAgICByZXR1cm4gaGFzaFN0cmluZyhjb250ZXh0SW5wdXQpO1xuICB9XG5cbiAgY2xlYXJDYWNoZSgpIHtcbiAgICB0aGlzLmNhY2hlLmNsZWFyKCk7XG4gICAgdGhpcy5zYXZlQ2FjaGUoKTtcbiAgfVxuXG4gIGdldENhY2hlU3RhdHMoKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBtYXhBZ2UgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5tYXhDYWNoZUFnZSAqIDYwICogNjAgKiAxMDAwO1xuICAgIFxuICAgIGxldCB2YWxpZEVudHJpZXMgPSAwO1xuICAgIGxldCBleHBpcmVkRW50cmllcyA9IDA7XG4gICAgXG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiB0aGlzLmNhY2hlLnZhbHVlcygpKSB7XG4gICAgICBpZiAobm93IC0gZW50cnkudGltZXN0YW1wID4gbWF4QWdlKSB7XG4gICAgICAgIGV4cGlyZWRFbnRyaWVzKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWxpZEVudHJpZXMrKztcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHsgdmFsaWRFbnRyaWVzLCBleHBpcmVkRW50cmllcywgdG90YWxFbnRyaWVzOiB0aGlzLmNhY2hlLnNpemUgfTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgbG9hZENhY2hlKCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5wbHVnaW4ubG9hZERhdGEoKTtcbiAgICAgIGlmIChkYXRhPy5jYWNoZSkge1xuICAgICAgICB0aGlzLmNhY2hlID0gbmV3IE1hcChPYmplY3QuZW50cmllcyhkYXRhLmNhY2hlKSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgY2FjaGU6JywgZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2F2ZUNhY2hlKCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5wbHVnaW4ubG9hZERhdGEoKSB8fCB7fTtcbiAgICAgIGRhdGEuY2FjaGUgPSBPYmplY3QuZnJvbUVudHJpZXModGhpcy5jYWNoZSk7XG4gICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlRGF0YShkYXRhKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc2F2aW5nIGNhY2hlOicsIGVycm9yKTtcbiAgICB9XG4gIH1cbn0gIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFBLG1CQUEyRjs7O0FDQTNGLHNCQUFpRDs7O0FDQTFDLFNBQVMsb0JBQW9CLFFBQTZCO0FBQy9ELFFBQU0sUUFBUSxJQUFJLFdBQVcsTUFBTTtBQUNuQyxNQUFJLFNBQVM7QUFDYixXQUFTLElBQUksR0FBRyxJQUFJLE1BQU0sWUFBWSxLQUFLO0FBQ3pDLGNBQVUsT0FBTyxhQUFhLE1BQU0sQ0FBQyxDQUFDO0FBQUEsRUFDeEM7QUFDQSxTQUFPLEtBQUssTUFBTTtBQUNwQjtBQUVPLFNBQVMsWUFBWSxXQUEyQjtBQUNyRCxRQUFNLFlBQW9DO0FBQUEsSUFDeEMsT0FBTztBQUFBLElBQ1AsT0FBTztBQUFBLElBQ1AsUUFBUTtBQUFBLElBQ1IsT0FBTztBQUFBLElBQ1AsUUFBUTtBQUFBLElBQ1IsT0FBTztBQUFBLElBQ1AsT0FBTztBQUFBLElBQ1AsUUFBUTtBQUFBLEVBQ1Y7QUFFQSxTQUFPLFVBQVUsVUFBVSxZQUFZLENBQUMsS0FBSztBQUMvQztBQUVPLFNBQVMsV0FBV0MsTUFBcUI7QUFDOUMsTUFBSSxPQUFPO0FBQ1gsTUFBSUEsS0FBSSxXQUFXO0FBQUcsV0FBTyxL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LGlCQUFpQjtBQUN4RCxZQUFNLElBQUksUUFBUSxhQUFXLFdBQVcsU0FBUyxRQUFRLENBQUM7QUFBQSxJQUM1RDtBQUVBLFNBQUssa0JBQWtCLEtBQUssSUFBSTtBQUFBLEVBQ2xDO0FBQUEsRUFFQSxZQUNFLFFBQ0EsUUFDQSxNQUNNO0FBQ04sU0FBSyxhQUFhLEtBQUssUUFBUSxRQUFRLElBQUk7QUFBQSxFQUM3QztBQUNGOyIsCiAgIm5hbWVzIjogWyJpbXBvcnRfb2JzaWRpYW4iLCAic3RyIiwgIl9hIiwgInN0ciIsICJpc19hcnJheSIsICJmZXRjaCIsICJSZXF1ZXN0IiwgIlJlc3BvbnNlIiwgIkhlYWRlcnMiLCAiRm9ybURhdGEiLCAiQmxvYiIsICJGaWxlIiwgIlJlYWRhYmxlU3RyZWFtIiwgIl9hIiwgIlJlYWRhYmxlU3RyZWFtIiwgIl9hIiwgInN0ciIsICJfYSIsICJGaWxlIiwgIkZvcm1EYXRhIiwgIl9hIiwgInBhcnNlUmVzcG9uc2UiLCAiZmV0Y2giLCAib3B0cyIsICJQYWdlIiwgInJldHJ5TWVzc2FnZSIsICJpbml0IiwgIl9fY2xhc3NQcml2YXRlRmllbGRTZXQiLCAiX19jbGFzc1ByaXZhdGVGaWVsZEdldCIsICJfYSIsICJfYSIsICJtb2RpZmllZEFyZyIsICJfYSIsICJfYSIsICJfYSIsICJfYSIsICJfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0IiwgIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCAiY2h1bmsiLCAiX19jbGFzc1ByaXZhdGVGaWVsZEdldCIsICJfYSIsICJfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0IiwgIl9Bc3Npc3RhbnRTdHJlYW1fZW5kUmVxdWVzdCIsICJfQXNzaXN0YW50U3RyZWFtX2hhbmRsZU1lc3NhZ2UiLCAiX0Fzc2lzdGFudFN0cmVhbV9oYW5kbGVSdW5TdGVwIiwgIl9Bc3Npc3RhbnRTdHJlYW1faGFuZGxlRXZlbnQiLCAiX0Fzc2lzdGFudFN0cmVhbV9hY2N1bXVsYXRlUnVuU3RlcCIsICJfQXNzaXN0YW50U3RyZWFtX2FjY3VtdWxhdGVNZXNzYWdlIiwgIl9Bc3Npc3RhbnRTdHJlYW1fYWNjdW11bGF0ZUNvbnRlbnQiLCAiX0Fzc2lzdGFudFN0cmVhbV9oYW5kbGVSdW4iLCAiX2EiLCAiaW5wdXRUb29sIiwgIl9hIiwgIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCAiY29udGVudCIsICJuYW1lIiwgIl9BYnN0cmFjdENoYXRDb21wbGV0aW9uUnVubmVyX2dldEZpbmFsTWVzc2FnZSIsICJfQWJzdHJhY3RDaGF0Q29tcGxldGlvblJ1bm5lcl9nZXRGaW5hbEZ1bmN0aW9uQ2FsbCIsICJfQWJzdHJhY3RDaGF0Q29tcGxldGlvblJ1bm5lcl9nZXRGaW5hbEZ1bmN0aW9uQ2FsbFJlc3VsdCIsICJfQWJzdHJhY3RDaGF0Q29tcGxldGlvblJ1bm5lcl9jYWxjdWxhdGVUb3RhbFVzYWdlIiwgIl9BYnN0cmFjdENoYXRDb21wbGV0aW9uUnVubmVyX3ZhbGlkYXRlUGFyYW1zIiwgIl9BYnN0cmFjdENoYXRDb21wbGV0aW9uUnVubmVyX3N0cmluZ2lmeUZ1bmN0aW9uQ2FsbFJlc3VsdCIsICJlc2NhcGUiLCAiZSIsICJfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0IiwgIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCAiX2EiLCAiX0NoYXRDb21wbGV0aW9uU3RyZWFtX2JlZ2luUmVxdWVzdCIsICJfQ2hhdENvbXBsZXRpb25TdHJlYW1fZ2V0Q2hvaWNlRXZlbnRTdGF0ZSIsICJfQ2hhdENvbXBsZXRpb25TdHJlYW1fYWRkQ2h1bmsiLCAiYXNzZXJ0TmV2ZXIiLCAiX0NoYXRDb21wbGV0aW9uU3RyZWFtX2VtaXRUb29sQ2FsbERvbmVFdmVudCIsICJfQ2hhdENvbXBsZXRpb25TdHJlYW1fZW1pdENvbnRlbnREb25lRXZlbnRzIiwgIl9DaGF0Q29tcGxldGlvblN0cmVhbV9lbmRSZXF1ZXN0IiwgIl9DaGF0Q29tcGxldGlvblN0cmVhbV9nZXRBdXRvUGFyc2VhYmxlUmVzcG9uc2VGb3JtYXQiLCAiX0NoYXRDb21wbGV0aW9uU3RyZWFtX2FjY3VtdWxhdGVDaGF0Q29tcGxldGlvbiIsICJjb250ZW50IiwgInJlZnVzYWwiLCAicmVzdCIsICJfYiIsICJfYyIsICJpbmRleCIsICJfZCIsICJjaHVuayIsICJpZCIsICJDb21wbGV0aW9ucyIsICJDaGF0IiwgIkNvbXBsZXRpb25zIiwgIk1lc3NhZ2VzIiwgIl9hIiwgIk1lc3NhZ2VzIiwgIl9hIiwgIkNoYXQiLCAiQ29tcGxldGlvbnMiLCAiX2EiLCAicmVzcG9uc2UiLCAiUnVucyIsICJSdW5zIiwgIkZpbGVzIiwgIkNoZWNrcG9pbnRzIiwgIkNoZWNrcG9pbnRzIiwgIkdyYWRlcnMiLCAiaGFzQXV0b1BhcnNlYWJsZUlucHV0IiwgInBhcnNlVG9vbENhbGwiLCAiY29udGVudCIsICJvdXRwdXQiLCAiX2EiLCAiaXNBdXRvUGFyc2FibGVUb29sIiwgInBhcnNlVG9vbENhbGwiLCAiX2EiLCAiX19jbGFzc1ByaXZhdGVGaWVsZFNldCIsICJfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0IiwgIl9hIiwgIl9SZXNwb25zZVN0cmVhbV9iZWdpblJlcXVlc3QiLCAiX1Jlc3BvbnNlU3RyZWFtX2FkZEV2ZW50IiwgImV2ZW50IiwgIl9SZXNwb25zZVN0cmVhbV9lbmRSZXF1ZXN0IiwgIl9SZXNwb25zZVN0cmVhbV9hY2N1bXVsYXRlUmVzcG9uc2UiLCAiX2EiLCAiRmlsZXMiLCAiX2EiLCAiRmlsZXMiLCAiX2EiLCAiQ29tcGxldGlvbnMiLCAiRmlsZXMiLCAiR3JhZGVycyIsICJfYSIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIl0KfQo=
